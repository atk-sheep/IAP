
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bef4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ecc  0801c0f4  0801c0f4  0002c0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ffc0  0801ffc0  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801ffc0  0801ffc0  0002ffc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ffc8  0801ffc8  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ffc8  0801ffc8  0002ffc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ffcc  0801ffcc  0002ffcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801ffd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0802005c  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080200fc  0003012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0003d1bc  200001cc  0802019c  000301cc  2**2
                  ALLOC
 12 ._user_heap_stack 00004000  2003d388  0802019c  0003d388  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003e005  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009ed1  00000000  00000000  0006e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c20  00000000  00000000  00078118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000022f4  00000000  00000000  0007ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ef2c  00000000  00000000  0007d02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004ab7c  00000000  00000000  000bbf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00126708  00000000  00000000  00106ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000bbe8  00000000  00000000  0022d1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  00238dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c0dc 	.word	0x0801c0dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	0801c0dc 	.word	0x0801c0dc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <delay_init>:
static uint16_t fac_us = 0;
static uint32_t fac_ms = 0;

/*初始化*/
void delay_init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
#if	(!Timebase_Source_is_SysTick)
	fac_ms = 1000000;				//作为时基的计数器时钟频率在HAL_InitTick()中被设为了1MHz
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <delay_init+0x28>)
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <delay_init+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
	fac_us = fac_ms / 1000;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <delay_init+0x28>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <delay_init+0x30>)
 80005fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000600:	099b      	lsrs	r3, r3, #6
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <delay_init+0x34>)
 8000606:	801a      	strh	r2, [r3, #0]
#else
	fac_ms = SystemCoreClock / 1000;
	fac_us = fac_ms / 1000;
#endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	200001ec 	.word	0x200001ec
 8000618:	000f4240 	.word	0x000f4240
 800061c:	10624dd3 	.word	0x10624dd3
 8000620:	200001e8 	.word	0x200001e8

08000624 <delay_us>:

/*微秒级延时*/
void delay_us(uint32_t nus)
{
 8000624:	b480      	push	{r7}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <delay_us+0x8c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	60fb      	str	r3, [r7, #12]

	ticks = nus * fac_us;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <delay_us+0x90>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	fb02 f303 	mul.w	r3, r2, r3
 8000654:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <delay_us+0x8c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065c:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <delay_us+0x8c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	429a      	cmp	r2, r3
 800066c:	d0f7      	beq.n	800065e <delay_us+0x3a>
		{
			if (tnow < told)
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	429a      	cmp	r2, r3
 8000674:	d206      	bcs.n	8000684 <delay_us+0x60>
			{
				tcnt += told - tnow;
 8000676:	69fa      	ldr	r2, [r7, #28]
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	4413      	add	r3, r2
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	e007      	b.n	8000694 <delay_us+0x70>
			}
			else
			{
				tcnt += reload - tnow + told;
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	4413      	add	r3, r2
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	4413      	add	r3, r2
 8000692:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 8000698:	69ba      	ldr	r2, [r7, #24]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	429a      	cmp	r2, r3
 800069e:	d200      	bcs.n	80006a2 <delay_us+0x7e>
		tnow = Delay_GetCounter();
 80006a0:	e7dd      	b.n	800065e <delay_us+0x3a>
			{
				break;
 80006a2:	bf00      	nop
			}
		}
	}
}
 80006a4:	bf00      	nop
 80006a6:	3724      	adds	r7, #36	; 0x24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	20002b08 	.word	0x20002b08
 80006b4:	200001e8 	.word	0x200001e8

080006b8 <delay_ms>:

/*毫秒级延时*/
void delay_ms(uint32_t nms)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <delay_ms+0x8c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006da:	60fb      	str	r3, [r7, #12]

	ticks = nms * fac_ms;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <delay_ms+0x90>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <delay_ms+0x8c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ee:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <delay_ms+0x8c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d0f7      	beq.n	80006f0 <delay_ms+0x38>
		{
			if (tnow < told)
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	429a      	cmp	r2, r3
 8000706:	d206      	bcs.n	8000716 <delay_ms+0x5e>
			{
				tcnt += told - tnow;
 8000708:	69fa      	ldr	r2, [r7, #28]
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	4413      	add	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	e007      	b.n	8000726 <delay_ms+0x6e>
			}
			else
			{
				tcnt += reload - tnow + told;
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	4413      	add	r3, r2
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	4413      	add	r3, r2
 8000724:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 800072a:	69ba      	ldr	r2, [r7, #24]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	429a      	cmp	r2, r3
 8000730:	d200      	bcs.n	8000734 <delay_ms+0x7c>
		tnow = Delay_GetCounter();
 8000732:	e7dd      	b.n	80006f0 <delay_ms+0x38>
			{
				break;
 8000734:	bf00      	nop
			}
		}
	}
}
 8000736:	bf00      	nop
 8000738:	3724      	adds	r7, #36	; 0x24
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20002b08 	.word	0x20002b08
 8000748:	200001ec 	.word	0x200001ec

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_DMA_Init+0x48>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <MX_DMA_Init+0x48>)
 8000758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_DMA_Init+0x48>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	203a      	movs	r0, #58	; 0x3a
 8000770:	f002 f866 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000774:	203a      	movs	r0, #58	; 0x3a
 8000776:	f002 f87f 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2105      	movs	r1, #5
 800077e:	2046      	movs	r0, #70	; 0x46
 8000780:	f002 f85e 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000784:	2046      	movs	r0, #70	; 0x46
 8000786:	f002 f877 	bl	8002878 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <vApplicationGetIdleTaskMemory+0x30>)
 80007ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007b6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	20000208 	.word	0x20000208
 80007c8:	200002a8 	.word	0x200002a8

080007cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007cc:	b5b0      	push	{r4, r5, r7, lr}
 80007ce:	b096      	sub	sp, #88	; 0x58
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  flash_mutex = xSemaphoreCreateMutex();
 80007d2:	2001      	movs	r0, #1
 80007d4:	f008 fd7b 	bl	80092ce <xQueueCreateMutex>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_FREERTOS_Init+0x98>)
 80007dc:	6013      	str	r3, [r2, #0]

  flashQueue = xQueueCreate(3,  ITEM_SIZE);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	2003      	movs	r0, #3
 80007e4:	f008 fcf8 	bl	80091d8 <xQueueGenericCreate>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_FREERTOS_Init+0x9c>)
 80007ec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_FREERTOS_Init+0xa0>)
 80007f0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f008 f86c 	bl	80088e6 <osThreadCreate>
 800080e:	4603      	mov	r3, r0
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_FREERTOS_Init+0xa4>)
 8000812:	6013      	str	r3, [r2, #0]

  /* definition and creation of feedDogTask */
  osThreadDef(feedDogTask, StartTask02, osPriorityIdle, 0, 2048);
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_FREERTOS_Init+0xa8>)
 8000816:	f107 0420 	add.w	r4, r7, #32
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  feedDogTaskHandle = osThreadCreate(osThread(feedDogTask), NULL);
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 f859 	bl	80088e6 <osThreadCreate>
 8000834:	4603      	mov	r3, r0
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <MX_FREERTOS_Init+0xac>)
 8000838:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
    osThreadDef(servicesTask, StartTask03, osPriorityIdle, 0, 4096);
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_FREERTOS_Init+0xb0>)
 800083c:	1d3c      	adds	r4, r7, #4
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    servicesTaskHandle = osThreadCreate(osThread(servicesTask), NULL);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f008 f848 	bl	80088e6 <osThreadCreate>
 8000856:	4603      	mov	r3, r0
 8000858:	4a09      	ldr	r2, [pc, #36]	; (8000880 <MX_FREERTOS_Init+0xb4>)
 800085a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 800085c:	bf00      	nop
 800085e:	3758      	adds	r7, #88	; 0x58
 8000860:	46bd      	mov	sp, r7
 8000862:	bdb0      	pop	{r4, r5, r7, pc}
 8000864:	200001f4 	.word	0x200001f4
 8000868:	200001fc 	.word	0x200001fc
 800086c:	0801c100 	.word	0x0801c100
 8000870:	20000200 	.word	0x20000200
 8000874:	0801c128 	.word	0x0801c128
 8000878:	20000204 	.word	0x20000204
 800087c:	0801c154 	.word	0x0801c154
 8000880:	200001f0 	.word	0x200001f0

08000884 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
int server_socket;
void StartDefaultTask(void const * argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800088c:	f007 f95e 	bl	8007b4c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  printf("bootloader defult task started!!!\r\n");
 8000890:	4821      	ldr	r0, [pc, #132]	; (8000918 <StartDefaultTask+0x94>)
 8000892:	f01a fcc7 	bl	801b224 <puts>

  printf("wait for connection req from client\r\n");
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <StartDefaultTask+0x98>)
 8000898:	f01a fcc4 	bl	801b224 <puts>
  
  int client_sock = tcp_server();
 800089c:	f000 f8c4 	bl	8000a28 <tcp_server>
 80008a0:	60f8      	str	r0, [r7, #12]

  if(client_sock >= 0){
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0d      	blt.n	80008c4 <StartDefaultTask+0x40>
    xTaskNotify(feedDogTaskHandle, client_sock,  eNoAction);
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <StartDefaultTask+0x9c>)
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	2300      	movs	r3, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	f00a fc9b 	bl	800b1ec <xTaskGenericNotify>
    xTaskNotify(servicesTaskHandle, client_sock,  eNoAction);
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <StartDefaultTask+0xa0>)
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	68f9      	ldr	r1, [r7, #12]
 80008bc:	2300      	movs	r3, #0
 80008be:	2200      	movs	r2, #0
 80008c0:	f00a fc94 	bl	800b1ec <xTaskGenericNotify>
  }

  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4817      	ldr	r0, [pc, #92]	; (8000928 <StartDefaultTask+0xa4>)
 80008ca:	f004 fabb 	bl	8004e44 <HAL_GPIO_WritePin>
	  osDelay(500);
 80008ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d2:	f008 f860 	bl	8008996 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	4813      	ldr	r0, [pc, #76]	; (8000928 <StartDefaultTask+0xa4>)
 80008dc:	f004 fab2 	bl	8004e44 <HAL_GPIO_WritePin>
	  osDelay(500);
 80008e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e4:	f008 f857 	bl	8008996 <osDelay>

	  if(jumpflag){
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <StartDefaultTask+0xa8>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0e9      	beq.n	80008c4 <StartDefaultTask+0x40>
      osDelay(2000);
 80008f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f4:	f008 f84f 	bl	8008996 <osDelay>

      close(client_sock);
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f00d ff93 	bl	800e824 <lwip_close>
      close(server_socket);
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <StartDefaultTask+0xac>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f00d ff8e 	bl	800e824 <lwip_close>

      osDelay(2000);
 8000908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090c:	f008 f843 	bl	8008996 <osDelay>

      iap_load_app(FLASH_APP_ADDR);
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <StartDefaultTask+0xb0>)
 8000912:	f000 fa5b 	bl	8000dcc <iap_load_app>
	  HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_SET);
 8000916:	e7d5      	b.n	80008c4 <StartDefaultTask+0x40>
 8000918:	0801c170 	.word	0x0801c170
 800091c:	0801c194 	.word	0x0801c194
 8000920:	20000204 	.word	0x20000204
 8000924:	200001f0 	.word	0x200001f0
 8000928:	40020400 	.word	0x40020400
 800092c:	200001f9 	.word	0x200001f9
 8000930:	200022a8 	.word	0x200022a8
 8000934:	08040000 	.word	0x08040000

08000938 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  int sock = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  sock = ( ulTaskNotifyTake(pdFALSE,  portMAX_DELAY) )+1;
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	2000      	movs	r0, #0
 800094a:	f00a fc03 	bl	800b154 <ulTaskNotifyTake>
 800094e:	4603      	mov	r3, r0
 8000950:	3301      	adds	r3, #1
 8000952:	613b      	str	r3, [r7, #16]

  printf("remote notify sock: %d\r\n", sock);
 8000954:	6939      	ldr	r1, [r7, #16]
 8000956:	481b      	ldr	r0, [pc, #108]	; (80009c4 <StartTask02+0x8c>)
 8000958:	f01a fbfe 	bl	801b158 <iprintf>

  osDelay(2000);
 800095c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000960:	f008 f819 	bl	8008996 <osDelay>

  uint32_t flashAddr = FLASH_APP_ADDR;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <StartTask02+0x90>)
 8000966:	617b      	str	r3, [r7, #20]
  printf("first flashaddr: %d\r\n", flashAddr);
 8000968:	6979      	ldr	r1, [r7, #20]
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <StartTask02+0x94>)
 800096c:	f01a fbf4 	bl	801b158 <iprintf>
  flashItem item_received;
  /* write flash */
  while (1)
  {
    if(xQueueReceive(flashQueue,  &item_received,  portMAX_DELAY)  ==  pdPASS)  {
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <StartTask02+0x98>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	4618      	mov	r0, r3
 800097e:	f008 ff15 	bl	80097ac <xQueueReceive>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d003      	beq.n	8000990 <StartTask02+0x58>
        //  接收成功，处理数据
        //printf("Received item from the queue\r\n");
    }
    else{
        printf("Received from the queue failed!!!\r\n");
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <StartTask02+0x9c>)
 800098a:	f01a fc4b 	bl	801b224 <puts>
        continue;
 800098e:	e017      	b.n	80009c0 <StartTask02+0x88>
    }

    if(xSemaphoreTake(flash_mutex,  portMAX_DELAY)  ==  pdTRUE)  {
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <StartTask02+0xa0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	4618      	mov	r0, r3
 800099a:	f008 ffed 	bl	8009978 <xQueueSemaphoreTake>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d1e5      	bne.n	8000970 <StartTask02+0x38>
      //  访问共享资源
      //flash
      flashAddr = flash_write(flashAddr, item_received.buf, item_received.len);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4619      	mov	r1, r3
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f000 fa3c 	bl	8000e28 <flash_write>
 80009b0:	6178      	str	r0, [r7, #20]

      if(item_received.len != 1024){
        //printf("this is the last flash!!!\r\n");
      }
      //  释放互斥量
      xSemaphoreGive(flash_mutex);
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <StartTask02+0xa0>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	2300      	movs	r3, #0
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	f008 fcba 	bl	8009334 <xQueueGenericSend>
    if(xQueueReceive(flashQueue,  &item_received,  portMAX_DELAY)  ==  pdPASS)  {
 80009c0:	e7d6      	b.n	8000970 <StartTask02+0x38>
 80009c2:	bf00      	nop
 80009c4:	0801c1bc 	.word	0x0801c1bc
 80009c8:	08040000 	.word	0x08040000
 80009cc:	0801c1d8 	.word	0x0801c1d8
 80009d0:	200001fc 	.word	0x200001fc
 80009d4:	0801c1f0 	.word	0x0801c1f0
 80009d8:	200001f4 	.word	0x200001f4

080009dc <print_addr>:
  /* USER CODE END StartTask02 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void print_addr(struct sockaddr_in* addr){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

    char ipAddress[INET_ADDRSTRLEN];
    
    inet_ntop(AF_INET, &(addr->sin_addr), ipAddress, INET_ADDRSTRLEN);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	f107 020c 	add.w	r2, r7, #12
 80009ec:	2310      	movs	r3, #16
 80009ee:	2002      	movs	r0, #2
 80009f0:	f00e fdea 	bl	800f5c8 <lwip_inet_ntop>

    printf("remote ip: %s\r\n", ipAddress);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <print_addr+0x44>)
 80009fc:	f01a fbac 	bl	801b158 <iprintf>

    uint16_t port = ntohs(addr->sin_port);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00e ffc7 	bl	800f998 <lwip_htons>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	83fb      	strh	r3, [r7, #30]

    printf("remote port: %d\r\n", port);
 8000a0e:	8bfb      	ldrh	r3, [r7, #30]
 8000a10:	4619      	mov	r1, r3
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <print_addr+0x48>)
 8000a14:	f01a fba0 	bl	801b158 <iprintf>

    return;
 8000a18:	bf00      	nop
}
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0801c214 	.word	0x0801c214
 8000a24:	0801c224 	.word	0x0801c224

08000a28 <tcp_server>:


int tcp_server(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
    server_socket;
    struct  sockaddr_in  server_addr,  client_addr;
    socklen_t  client_len  =  sizeof(client_addr);
 8000a2e:	2310      	movs	r3, #16
 8000a30:	603b      	str	r3, [r7, #0]
    int  i,  new_sock;

    server_socket  =  socket(AF_INET,  SOCK_STREAM,  0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2101      	movs	r1, #1
 8000a36:	2002      	movs	r0, #2
 8000a38:	f00e fbda 	bl	800f1f0 <lwip_socket>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <tcp_server+0xcc>)
 8000a40:	6013      	str	r3, [r2, #0]
    if  (server_socket  <  0)  {
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <tcp_server+0xcc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da02      	bge.n	8000a50 <tcp_server+0x28>
        //  错误处理
        return -1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e04d      	b.n	8000aec <tcp_server+0xc4>
    //   // printf("Error  occurred:  %s\r\n",  err_str);
    //   close(server_socket);
    //   return -1;
    // }

    server_addr.sin_family  =  AF_INET;
 8000a50:	2302      	movs	r3, #2
 8000a52:	757b      	strb	r3, [r7, #21]
    server_addr.sin_addr.s_addr  =  INADDR_ANY;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
    server_addr.sin_port  =  htons(12345);
 8000a58:	f243 0039 	movw	r0, #12345	; 0x3039
 8000a5c:	f00e ff9c 	bl	800f998 <lwip_htons>
 8000a60:	4603      	mov	r3, r0
 8000a62:	82fb      	strh	r3, [r7, #22]

    if  (bind(server_socket,  (struct  sockaddr  *)&server_addr,  sizeof(server_addr))  <  0)  {
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <tcp_server+0xcc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f107 0114 	add.w	r1, r7, #20
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00d fe6a 	bl	800e748 <lwip_bind>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	da0a      	bge.n	8000a90 <tcp_server+0x68>
        //  错误处理
        printf("bind failed!!\r\n");
 8000a7a:	481f      	ldr	r0, [pc, #124]	; (8000af8 <tcp_server+0xd0>)
 8000a7c:	f01a fbd2 	bl	801b224 <puts>
        close(server_socket);
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <tcp_server+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00d fecd 	bl	800e824 <lwip_close>
        return -1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e02d      	b.n	8000aec <tcp_server+0xc4>
    }

    if  (listen(server_socket,  3)  <  0)  {
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <tcp_server+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2103      	movs	r1, #3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00d ff1a 	bl	800e8d0 <lwip_listen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da0a      	bge.n	8000ab8 <tcp_server+0x90>
        //  错误处理
        printf("listen error\r\n");
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <tcp_server+0xd4>)
 8000aa4:	f01a fbbe 	bl	801b224 <puts>
        closesocket(server_socket);
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <tcp_server+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00d feb9 	bl	800e824 <lwip_close>
        return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e019      	b.n	8000aec <tcp_server+0xc4>
    }

    new_sock  =  accept(server_socket,  (struct  sockaddr  *)&client_addr,  &client_len);
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <tcp_server+0xcc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	463a      	mov	r2, r7
 8000abe:	1d39      	adds	r1, r7, #4
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00d fd23 	bl	800e50c <lwip_accept>
 8000ac6:	6278      	str	r0, [r7, #36]	; 0x24
    printf("new_sock: %d\r\n", new_sock);
 8000ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <tcp_server+0xd8>)
 8000acc:	f01a fb44 	bl	801b158 <iprintf>
    if  (new_sock  <  0)  {
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	da05      	bge.n	8000ae2 <tcp_server+0xba>
        printf("accept error!!!\r\n");
 8000ad6:	480b      	ldr	r0, [pc, #44]	; (8000b04 <tcp_server+0xdc>)
 8000ad8:	f01a fba4 	bl	801b224 <puts>
        return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	e004      	b.n	8000aec <tcp_server+0xc4>
    }
    else{
      print_addr(&client_addr);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff79 	bl	80009dc <print_addr>
      //   // const  char  *err_str  =  strerror(errno);
      //   // printf("Error  occurred:  %s\r\n",  err_str);
      //   close(new_sock);
      //   return -1;
      // }
        return new_sock;
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200022a8 	.word	0x200022a8
 8000af8:	0801c238 	.word	0x0801c238
 8000afc:	0801c248 	.word	0x0801c248
 8000b00:	0801c258 	.word	0x0801c258
 8000b04:	0801c268 	.word	0x0801c268

08000b08 <messageAnalysis>:

int messageAnalysis(uint8_t *buf, int len, frame *message){
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  if(len < 2) return -1;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	dc02      	bgt.n	8000b20 <messageAnalysis+0x18>
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e014      	b.n	8000b4a <messageAnalysis+0x42>
  
  // message->cmd = (uint16_t)( (((uint16_t)(buf[0]<<8)) && 0xFF00) | (((uint16_t)(buf[1])) && 0x00FF) );
  // message->subfunc = (uint16_t)( (((uint16_t)(buf[2]<<8)) && 0xFF00) | (((uint16_t)(buf[3])) && 0x00FF) );

  message->cmd = buf[0];
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	701a      	strb	r2, [r3, #0]
  message->subfunc = buf[1];
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	785a      	ldrb	r2, [r3, #1]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	705a      	strb	r2, [r3, #1]

  if(len > 2){
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	dd08      	ble.n	8000b48 <messageAnalysis+0x40>
    message->data = buf+2;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	1c9a      	adds	r2, r3, #2
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
    message->len = len-2;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3b02      	subs	r3, #2
 8000b42:	461a      	mov	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
  }

  return 0;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <StartTask03>:

void StartTask03(void const * argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	; 0x50
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /*
      单线程：接收、处理、发送
      多线程：接收线程、发送线程、服务处理，并不是异步，因为上位机是同步的，即使多线程下位机也相当于同步
  */
  int sock = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sock = ( ulTaskNotifyTake(pdFALSE,  portMAX_DELAY) )+1;
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f00a faf3 	bl	800b154 <ulTaskNotifyTake>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	3301      	adds	r3, #1
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c

  osDelay(2000);
 8000b74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b78:	f007 ff0d 	bl	8008996 <osDelay>

  uint8_t *rxbuffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * 1048);
 8000b7c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000b80:	f00a fe98 	bl	800b8b4 <pvPortMalloc>
 8000b84:	64b8      	str	r0, [r7, #72]	; 0x48
  uint8_t *txbuffer = (uint8_t *)pvPortMalloc(sizeof(uint8_t) * 32);
 8000b86:	2020      	movs	r0, #32
 8000b88:	f00a fe94 	bl	800b8b4 <pvPortMalloc>
 8000b8c:	6478      	str	r0, [r7, #68]	; 0x44

  while(1){
    int len = recv(sock, rxbuffer, 1048, 0);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8000b94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000b98:	f00e fa04 	bl	800efa4 <lwip_recv>
 8000b9c:	6438      	str	r0, [r7, #64]	; 0x40

    if(len>0){
 8000b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dc06      	bgt.n	8000bb2 <StartTask03+0x5a>
      //printf("receive from client %d bytes\r\n", len);
    }
    else{
      printf("receive nothing \r\n");
 8000ba4:	4824      	ldr	r0, [pc, #144]	; (8000c38 <StartTask03+0xe0>)
 8000ba6:	f01a fb3d 	bl	801b224 <puts>
      close(sock);
 8000baa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000bac:	f00d fe3a 	bl	800e824 <lwip_close>
      break;
 8000bb0:	e03f      	b.n	8000c32 <StartTask03+0xda>
    }

    //analysis message
    frame message;

    if(messageAnalysis(rxbuffer, len, &message) < 0){
 8000bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000bba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bbc:	f7ff ffa4 	bl	8000b08 <messageAnalysis>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	da03      	bge.n	8000bce <StartTask03+0x76>
      printf("message analysis failed!!!\r\n");
 8000bc6:	481d      	ldr	r0, [pc, #116]	; (8000c3c <StartTask03+0xe4>)
 8000bc8:	f01a fb2c 	bl	801b224 <puts>
      //send error frame warning...
      continue;
 8000bcc:	e032      	b.n	8000c34 <StartTask03+0xdc>
    else{

    }

    //service analysis
    int lensend = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    errorCode err = servicesAnalysis(&message, txbuffer, &lensend);
 8000bd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000bd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fdd7 	bl	8001790 <servicesAnalysis>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(err != NOERR){
 8000be8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00e      	beq.n	8000c0e <StartTask03+0xb6>
      char errstr[30];
      analysisErr(err, errstr, 30);
 8000bf0:	f107 010c 	add.w	r1, r7, #12
 8000bf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bf8:	221e      	movs	r2, #30
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 ff44 	bl	8001a88 <analysisErr>
      printf("service err: %s!!!\r\n", errstr);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <StartTask03+0xe8>)
 8000c08:	f01a faa6 	bl	801b158 <iprintf>
      continue;
 8000c0c:	e012      	b.n	8000c34 <StartTask03+0xdc>
    }

    //send response
    if(send(sock, txbuffer, lensend, 0) < 0 ){
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	461a      	mov	r2, r3
 8000c12:	2300      	movs	r3, #0
 8000c14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000c16:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c18:	f00e f9da 	bl	800efd0 <lwip_send>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da02      	bge.n	8000c28 <StartTask03+0xd0>
      printf("send faild!!!\r\n");
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <StartTask03+0xec>)
 8000c24:	f01a fafe 	bl	801b224 <puts>
    }

    if(APPValid) break;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <StartTask03+0xf0>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0ae      	beq.n	8000b8e <StartTask03+0x36>
 8000c30:	bf00      	nop
 8000c32:	e000      	b.n	8000c36 <StartTask03+0xde>
  while(1){
 8000c34:	e7ab      	b.n	8000b8e <StartTask03+0x36>

  }

  while (1)
 8000c36:	e7fe      	b.n	8000c36 <StartTask03+0xde>
 8000c38:	0801c27c 	.word	0x0801c27c
 8000c3c:	0801c290 	.word	0x0801c290
 8000c40:	0801c2ac 	.word	0x0801c2ac
 8000c44:	0801c2c4 	.word	0x0801c2c4
 8000c48:	200001f8 	.word	0x200001f8

08000c4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a33      	ldr	r2, [pc, #204]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a27      	ldr	r2, [pc, #156]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_GPIO_Init+0x118>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	4816      	ldr	r0, [pc, #88]	; (8000d68 <MX_GPIO_Init+0x11c>)
 8000d10:	f004 f898 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000d14:	2308      	movs	r3, #8
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <MX_GPIO_Init+0x120>)
 8000d2a:	f003 fec7 	bl	8004abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <MX_GPIO_Init+0x11c>)
 8000d46:	f003 feb9 	bl	8004abc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2105      	movs	r1, #5
 8000d4e:	2009      	movs	r0, #9
 8000d50:	f001 fd76 	bl	8002840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d54:	2009      	movs	r0, #9
 8000d56:	f001 fd8f 	bl	8002878 <HAL_NVIC_EnableIRQ>

}
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	; 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40021c00 	.word	0x40021c00

08000d70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
    delay_ms(200);  //延时消抖
 8000d7a:	20c8      	movs	r0, #200	; 0xc8
 8000d7c:	f7ff fc9c 	bl	80006b8 <delay_ms>

    switch (GPIO_Pin)
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d10b      	bne.n	8000d9e <HAL_GPIO_EXTI_Callback+0x2e>
    {
    case KEY0_Pin:
      //don't allowed printf here!
      if(APPValid) jumpflag = 1;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_EXTI_Callback+0x26>
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_GPIO_EXTI_Callback+0x3c>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
      else jumpflag = 0;
      
      break;
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_EXTI_Callback+0x30>
      else jumpflag = 0;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_GPIO_EXTI_Callback+0x3c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
      break;
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_EXTI_Callback+0x30>
    
    default:
      break;
 8000d9e:	bf00      	nop
    }

    return;
 8000da0:	bf00      	nop
}
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001f8 	.word	0x200001f8
 8000dac:	200001f9 	.word	0x200001f9

08000db0 <MSR_MSP>:
*/
uint8_t endflag = 0;

//设置栈顶地址
//addr:栈顶地址
void MSR_MSP(uint32_t addr){
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    asm("MSR MSP, r0");			//set Main Stack value
 8000db8:	f380 8808 	msr	MSP, r0
    asm("BX r14");
 8000dbc:	4770      	bx	lr
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <iap_load_app>:

void iap_load_app(u32 appxaddr){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	if(((*(u32*)appxaddr)&0x2FF00000)==0x20000000)	//检查主堆栈指针指向位置是否合法，RAM的起始地址0x20000000
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <iap_load_app+0x54>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000de0:	d119      	bne.n	8000e16 <iap_load_app+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de6:	b672      	cpsid	i
 8000de8:	f383 8811 	msr	BASEPRI, r3
 8000dec:	f3bf 8f6f 	isb	sy
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	b662      	cpsie	i
 8000df6:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000df8:	bf00      	nop

		//__disable_irq();

		portDISABLE_INTERRUPTS();	//如果开启rtos

		jump2app=(iapfun)*(__IO u32*)(appxaddr+4);		//�û��������ڶ�����Ϊ����ʼ��ַ(��λ��ַ)		
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <iap_load_app+0x58>)
 8000e04:	601a      	str	r2, [r3, #0]

		MSR_MSP(*(u32*)appxaddr);					//设置APP的主堆栈指针
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffd0 	bl	8000db0 <MSR_MSP>

		//__set_MSP(*(__IO uint32_t*) appxaddr);
		jump2app();									//��ת��APP.
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <iap_load_app+0x58>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4798      	blx	r3

	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2ff00000 	.word	0x2ff00000
 8000e24:	200022ac 	.word	0x200022ac

08000e28 <flash_write>:

extern uint32_t filesize;

extern uint32_t bytessum;

uint32_t flash_write(u32 addr, u8 *buf, u32 sz){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
	u32 t;

	u32 temp;

	u32 fwaddr=addr;//当前写入地址
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	617b      	str	r3, [r7, #20]

	u8 *dfu=buf;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]

	for(t=0;t<sz;t+=4)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	e027      	b.n	8000e92 <flash_write+0x6a>
	{
		temp=(u32)dfu[3]<<24;   
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	3303      	adds	r3, #3
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	061b      	lsls	r3, r3, #24
 8000e4a:	613b      	str	r3, [r7, #16]

		temp|=(u32)dfu[2]<<16;    
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	041b      	lsls	r3, r3, #16
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]

		temp|=(u32)dfu[1]<<8;
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

		temp|=(u32)dfu[0];	  
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

		dfu+=4;//偏移四个字节
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	3304      	adds	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]

		iapbuf[flashbytes++]=temp;	    
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <flash_write+0xc8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	491b      	ldr	r1, [pc, #108]	; (8000ef0 <flash_write+0xc8>)
 8000e82:	600a      	str	r2, [r1, #0]
 8000e84:	491b      	ldr	r1, [pc, #108]	; (8000ef4 <flash_write+0xcc>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(t=0;t<sz;t+=4)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	3304      	adds	r3, #4
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3d3      	bcc.n	8000e42 <flash_write+0x1a>

	} 

	if(flashbytes == 512){
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <flash_write+0xc8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ea2:	d10c      	bne.n	8000ebe <flash_write+0x96>
		flashbytes = 0;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <flash_write+0xc8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]

		//printf("fwaddr: %d\r\n", fwaddr);

		STMFLASH_Write(fwaddr,iapbuf,512);
 8000eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eae:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <flash_write+0xcc>)
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f000 ffe7 	bl	8001e84 <STMFLASH_Write>

		return (fwaddr + 2048);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ebc:	e013      	b.n	8000ee6 <flash_write+0xbe>
		
	}
	else if(bytessum == filesize){
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <flash_write+0xd0>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <flash_write+0xd4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d10c      	bne.n	8000ee4 <flash_write+0xbc>
		//printf("last fwaddr: %d\r\n", fwaddr);

		STMFLASH_Write(fwaddr,iapbuf,flashbytes);//将剩余字节写入
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <flash_write+0xc8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <flash_write+0xcc>)
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f000 ffd6 	bl	8001e84 <STMFLASH_Write>
		
		return (fwaddr + flashbytes);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <flash_write+0xc8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	e000      	b.n	8000ee6 <flash_write+0xbe>
	}
	else{
		return fwaddr;
 8000ee4:	697b      	ldr	r3, [r7, #20]
	}

	return;

}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20002ab0 	.word	0x20002ab0
 8000ef4:	200022b0 	.word	0x200022b0
 8000ef8:	20002b04 	.word	0x20002b04
 8000efc:	20002b00 	.word	0x20002b00

08000f00 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
}
 8000f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
}
 8000f0e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
}
 8000f1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1e:	f3bf 8f6f 	isb	sy
}
 8000f22:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SCB_EnableICache+0x48>)
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f66:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0b5b      	lsrs	r3, r3, #13
 8000f6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f70:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f7a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	015a      	lsls	r2, r3, #5
 8000f80:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f84:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f8a:	4911      	ldr	r1, [pc, #68]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ef      	bne.n	8000f7c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	60fa      	str	r2, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e5      	bne.n	8000f72 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SCB_EnableDCache+0x84>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb8:	f3bf 8f4f 	dsb	sy
}
 8000fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fbe:	f3bf 8f6f 	isb	sy
}
 8000fc2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000fd8:	f7ff ff92 	bl	8000f00 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000fdc:	f7ff ffb6 	bl	8000f4c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f001 fb18 	bl	8002614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f82a 	bl	800103c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->CACR|=1<<2;  //强制D-Cache�?写,如�?开�?�,实际使用中�?�能�?�到�?��?问题
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <main+0x64>)
 8000fea:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <main+0x64>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
  delay_init();
 8000ff8:	f7ff faf8 	bl	80005ec <delay_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f7ff fe26 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001000:	f7ff fba4 	bl	800074c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001004:	f001 f880 	bl	8002108 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8001008:	f000 faea 	bl	80015e0 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  PCF8574_Init();
 800100c:	f000 fa4c 	bl	80014a8 <PCF8574_Init>
	PCF8574_WriteBit(ETH_RESET_IO,1);
 8001010:	2101      	movs	r1, #1
 8001012:	2007      	movs	r0, #7
 8001014:	f000 fab5 	bl	8001582 <PCF8574_WriteBit>
	delay_ms(100);
 8001018:	2064      	movs	r0, #100	; 0x64
 800101a:	f7ff fb4d 	bl	80006b8 <delay_ms>
	PCF8574_WriteBit(ETH_RESET_IO,0);
 800101e:	2100      	movs	r1, #0
 8001020:	2007      	movs	r0, #7
 8001022:	f000 faae 	bl	8001582 <PCF8574_WriteBit>
	delay_ms(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f7ff fb46 	bl	80006b8 <delay_ms>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800102c:	f7ff fbce 	bl	80007cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001030:	f007 fc42 	bl	80088b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001034:	e7fe      	b.n	8001034 <main+0x60>
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2234      	movs	r2, #52	; 0x34
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f01a f9da 	bl	801b404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001060:	f003 ff22 	bl	8004ea8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <SystemClock_Config+0xd8>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <SystemClock_Config+0xd8>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <SystemClock_Config+0xd8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <SystemClock_Config+0xdc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a25      	ldr	r2, [pc, #148]	; (8001118 <SystemClock_Config+0xdc>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <SystemClock_Config+0xdc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a8:	2308      	movs	r3, #8
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010ac:	23d8      	movs	r3, #216	; 0xd8
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f813 	bl	80050ec <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010cc:	f000 f838 	bl	8001140 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010d0:	f003 fefa 	bl	8004ec8 <HAL_PWREx_EnableOverDrive>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010da:	f000 f831 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	230f      	movs	r3, #15
 80010e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e2:	2302      	movs	r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2107      	movs	r1, #7
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 faa3 	bl	8005648 <HAL_RCC_ClockConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001108:	f000 f81a 	bl	8001140 <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3750      	adds	r7, #80	; 0x50
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112e:	f001 fa7f 	bl	8002630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40014400 	.word	0x40014400

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <IIC_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//IIC初始化
void IIC_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    
    __HAL_RCC_GPIOH_CLK_ENABLE();   //使能GPIOH时钟
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <IIC_Init+0x54>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <IIC_Init+0x54>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <IIC_Init+0x54>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
    
    //PH4,5初始化设置
    GPIO_Initure.Pin=GPIO_PIN_4|GPIO_PIN_5;
 800116a:	2330      	movs	r3, #48	; 0x30
 800116c:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 800116e:	2301      	movs	r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8001172:	2301      	movs	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FAST;     //快速
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOH,&GPIO_Initure);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <IIC_Init+0x58>)
 8001180:	f003 fc9c 	bl	8004abc <HAL_GPIO_Init>
    
    IIC_SDA(1);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <IIC_Init+0x58>)
 800118a:	f003 fe5b 	bl	8004e44 <HAL_GPIO_WritePin>
    IIC_SCL(1);  
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	4804      	ldr	r0, [pc, #16]	; (80011a4 <IIC_Init+0x58>)
 8001194:	f003 fe56 	bl	8004e44 <HAL_GPIO_WritePin>
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40021c00 	.word	0x40021c00

080011a8 <IIC_Start>:

//产生IIC起始信号
void IIC_Start(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <IIC_Start+0x54>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <IIC_Start+0x54>)
 80011b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <IIC_Start+0x54>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <IIC_Start+0x54>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c2:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);	  	  
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <IIC_Start+0x54>)
 80011ca:	f003 fe3b 	bl	8004e44 <HAL_GPIO_WritePin>
	IIC_SCL(1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2110      	movs	r1, #16
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <IIC_Start+0x54>)
 80011d4:	f003 fe36 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(4);
 80011d8:	2004      	movs	r0, #4
 80011da:	f7ff fa23 	bl	8000624 <delay_us>
 	IIC_SDA(0);//START:when CLK is high,DATA change form high to low 
 80011de:	2200      	movs	r2, #0
 80011e0:	2120      	movs	r1, #32
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <IIC_Start+0x54>)
 80011e4:	f003 fe2e 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(4);
 80011e8:	2004      	movs	r0, #4
 80011ea:	f7ff fa1b 	bl	8000624 <delay_us>
	IIC_SCL(0);//钳住I2C总线，准备发送或接收数据 
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	4802      	ldr	r0, [pc, #8]	; (80011fc <IIC_Start+0x54>)
 80011f4:	f003 fe26 	bl	8004e44 <HAL_GPIO_WritePin>
}	  
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021c00 	.word	0x40021c00

08001200 <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <IIC_Stop+0x54>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <IIC_Stop+0x54>)
 800120a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <IIC_Stop+0x54>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <IIC_Stop+0x54>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
	IIC_SCL(0);
 800121c:	2200      	movs	r2, #0
 800121e:	2110      	movs	r1, #16
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <IIC_Stop+0x54>)
 8001222:	f003 fe0f 	bl	8004e44 <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 8001226:	2200      	movs	r2, #0
 8001228:	2120      	movs	r1, #32
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <IIC_Stop+0x54>)
 800122c:	f003 fe0a 	bl	8004e44 <HAL_GPIO_WritePin>
 	delay_us(4);
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff f9f7 	bl	8000624 <delay_us>
	IIC_SCL(1); 
 8001236:	2201      	movs	r2, #1
 8001238:	2110      	movs	r1, #16
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <IIC_Stop+0x54>)
 800123c:	f003 fe02 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(4);			
 8001240:	2004      	movs	r0, #4
 8001242:	f7ff f9ef 	bl	8000624 <delay_us>
	IIC_SDA(1);//发送I2C总线结束信号				   	
 8001246:	2201      	movs	r2, #1
 8001248:	2120      	movs	r1, #32
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <IIC_Stop+0x54>)
 800124c:	f003 fdfa 	bl	8004e44 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021c00 	.word	0x40021c00

08001258 <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 800125e:	2300      	movs	r3, #0
 8001260:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入  
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <IIC_Wait_Ack+0x78>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <IIC_Wait_Ack+0x78>)
 8001268:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <IIC_Wait_Ack+0x78>)
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <IIC_Wait_Ack+0x78>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);delay_us(1);	   
 8001276:	2201      	movs	r2, #1
 8001278:	2120      	movs	r1, #32
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <IIC_Wait_Ack+0x78>)
 800127c:	f003 fde2 	bl	8004e44 <HAL_GPIO_WritePin>
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff f9cf 	bl	8000624 <delay_us>
	IIC_SCL(1);delay_us(1);	 
 8001286:	2201      	movs	r2, #1
 8001288:	2110      	movs	r1, #16
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <IIC_Wait_Ack+0x78>)
 800128c:	f003 fdda 	bl	8004e44 <HAL_GPIO_WritePin>
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff f9c7 	bl	8000624 <delay_us>
	while(READ_SDA)
 8001296:	e009      	b.n	80012ac <IIC_Wait_Ack+0x54>
	{
		ucErrTime++;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	3301      	adds	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2bfa      	cmp	r3, #250	; 0xfa
 80012a2:	d903      	bls.n	80012ac <IIC_Wait_Ack+0x54>
		{
			IIC_Stop();
 80012a4:	f7ff ffac 	bl	8001200 <IIC_Stop>
			return 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e00c      	b.n	80012c6 <IIC_Wait_Ack+0x6e>
	while(READ_SDA)
 80012ac:	2120      	movs	r1, #32
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <IIC_Wait_Ack+0x78>)
 80012b0:	f003 fdb0 	bl	8004e14 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ee      	bne.n	8001298 <IIC_Wait_Ack+0x40>
		}
	}
	IIC_SCL(0);//时钟输出0 	   
 80012ba:	2200      	movs	r2, #0
 80012bc:	2110      	movs	r1, #16
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <IIC_Wait_Ack+0x78>)
 80012c0:	f003 fdc0 	bl	8004e44 <HAL_GPIO_WritePin>
	return 0;  
 80012c4:	2300      	movs	r3, #0
} 
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021c00 	.word	0x40021c00

080012d4 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2110      	movs	r1, #16
 80012dc:	4812      	ldr	r0, [pc, #72]	; (8001328 <IIC_Ack+0x54>)
 80012de:	f003 fdb1 	bl	8004e44 <HAL_GPIO_WritePin>
	SDA_OUT();
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <IIC_Ack+0x54>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <IIC_Ack+0x54>)
 80012e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <IIC_Ack+0x54>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <IIC_Ack+0x54>)
 80012f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f8:	6013      	str	r3, [r2, #0]
	IIC_SDA(0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	480a      	ldr	r0, [pc, #40]	; (8001328 <IIC_Ack+0x54>)
 8001300:	f003 fda0 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(2);
 8001304:	2002      	movs	r0, #2
 8001306:	f7ff f98d 	bl	8000624 <delay_us>
	IIC_SCL(1);
 800130a:	2201      	movs	r2, #1
 800130c:	2110      	movs	r1, #16
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <IIC_Ack+0x54>)
 8001310:	f003 fd98 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(2);
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff f985 	bl	8000624 <delay_us>
	IIC_SCL(0);
 800131a:	2200      	movs	r2, #0
 800131c:	2110      	movs	r1, #16
 800131e:	4802      	ldr	r0, [pc, #8]	; (8001328 <IIC_Ack+0x54>)
 8001320:	f003 fd90 	bl	8004e44 <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021c00 	.word	0x40021c00

0800132c <IIC_NAck>:
//不产生ACK应答		    
void IIC_NAck(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <IIC_NAck+0x54>)
 8001336:	f003 fd85 	bl	8004e44 <HAL_GPIO_WritePin>
	SDA_OUT();
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <IIC_NAck+0x54>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <IIC_NAck+0x54>)
 8001340:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <IIC_NAck+0x54>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <IIC_NAck+0x54>)
 800134c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001350:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);
 8001352:	2201      	movs	r2, #1
 8001354:	2120      	movs	r1, #32
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <IIC_NAck+0x54>)
 8001358:	f003 fd74 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(2);
 800135c:	2002      	movs	r0, #2
 800135e:	f7ff f961 	bl	8000624 <delay_us>
	IIC_SCL(1);
 8001362:	2201      	movs	r2, #1
 8001364:	2110      	movs	r1, #16
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <IIC_NAck+0x54>)
 8001368:	f003 fd6c 	bl	8004e44 <HAL_GPIO_WritePin>
	delay_us(2);
 800136c:	2002      	movs	r0, #2
 800136e:	f7ff f959 	bl	8000624 <delay_us>
	IIC_SCL(0);
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4802      	ldr	r0, [pc, #8]	; (8001380 <IIC_NAck+0x54>)
 8001378:	f003 fd64 	bl	8004e44 <HAL_GPIO_WritePin>
}					 				     
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021c00 	.word	0x40021c00

08001384 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答			  
void IIC_Send_Byte(u8 txd)
{                        
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
    u8 t;   
	SDA_OUT(); 	    
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <IIC_Send_Byte+0x94>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <IIC_Send_Byte+0x94>)
 8001394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <IIC_Send_Byte+0x94>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <IIC_Send_Byte+0x94>)
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a4:	6013      	str	r3, [r2, #0]
    IIC_SCL(0);//拉低时钟开始数据传输
 80013a6:	2200      	movs	r2, #0
 80013a8:	2110      	movs	r1, #16
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <IIC_Send_Byte+0x94>)
 80013ac:	f003 fd4a 	bl	8004e44 <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e027      	b.n	8001406 <IIC_Send_Byte+0x82>
    {              
        IIC_SDA((txd&0x80)>>7);
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da05      	bge.n	80013ca <IIC_Send_Byte+0x46>
 80013be:	2201      	movs	r2, #1
 80013c0:	2120      	movs	r1, #32
 80013c2:	4815      	ldr	r0, [pc, #84]	; (8001418 <IIC_Send_Byte+0x94>)
 80013c4:	f003 fd3e 	bl	8004e44 <HAL_GPIO_WritePin>
 80013c8:	e004      	b.n	80013d4 <IIC_Send_Byte+0x50>
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <IIC_Send_Byte+0x94>)
 80013d0:	f003 fd38 	bl	8004e44 <HAL_GPIO_WritePin>
        txd<<=1; 	  
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 80013da:	2002      	movs	r0, #2
 80013dc:	f7ff f922 	bl	8000624 <delay_us>
		IIC_SCL(1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2110      	movs	r1, #16
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <IIC_Send_Byte+0x94>)
 80013e6:	f003 fd2d 	bl	8004e44 <HAL_GPIO_WritePin>
		delay_us(2); 
 80013ea:	2002      	movs	r0, #2
 80013ec:	f7ff f91a 	bl	8000624 <delay_us>
		IIC_SCL(0);	
 80013f0:	2200      	movs	r2, #0
 80013f2:	2110      	movs	r1, #16
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <IIC_Send_Byte+0x94>)
 80013f6:	f003 fd25 	bl	8004e44 <HAL_GPIO_WritePin>
		delay_us(2);
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff f912 	bl	8000624 <delay_us>
    for(t=0;t<8;t++)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3301      	adds	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b07      	cmp	r3, #7
 800140a:	d9d4      	bls.n	80013b6 <IIC_Send_Byte+0x32>
    }	 
} 	    
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021c00 	.word	0x40021c00

0800141c <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
u8 IIC_Read_Byte(unsigned char ack)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <IIC_Read_Byte+0x88>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <IIC_Read_Byte+0x88>)
 8001430:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <IIC_Read_Byte+0x88>)
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <IIC_Read_Byte+0x88>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e01f      	b.n	8001484 <IIC_Read_Byte+0x68>
	{
        IIC_SCL(0); 
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <IIC_Read_Byte+0x88>)
 800144a:	f003 fcfb 	bl	8004e44 <HAL_GPIO_WritePin>
        delay_us(2);
 800144e:	2002      	movs	r0, #2
 8001450:	f7ff f8e8 	bl	8000624 <delay_us>
		IIC_SCL(1);
 8001454:	2201      	movs	r2, #1
 8001456:	2110      	movs	r1, #16
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <IIC_Read_Byte+0x88>)
 800145a:	f003 fcf3 	bl	8004e44 <HAL_GPIO_WritePin>
        receive<<=1;
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;   
 8001464:	2120      	movs	r1, #32
 8001466:	480f      	ldr	r0, [pc, #60]	; (80014a4 <IIC_Read_Byte+0x88>)
 8001468:	f003 fcd4 	bl	8004e14 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <IIC_Read_Byte+0x5c>
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	3301      	adds	r3, #1
 8001476:	73bb      	strb	r3, [r7, #14]
		delay_us(1); 
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff f8d3 	bl	8000624 <delay_us>
    for(i=0;i<8;i++ )
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3301      	adds	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9dc      	bls.n	8001444 <IIC_Read_Byte+0x28>
    }					 
    if (!ack)
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <IIC_Read_Byte+0x7a>
        IIC_NAck();//发送nACK
 8001490:	f7ff ff4c 	bl	800132c <IIC_NAck>
 8001494:	e001      	b.n	800149a <IIC_Read_Byte+0x7e>
    else
        IIC_Ack(); //发送ACK   
 8001496:	f7ff ff1d 	bl	80012d4 <IIC_Ack>
    return receive;
 800149a:	7bbb      	ldrb	r3, [r7, #14]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021c00 	.word	0x40021c00

080014a8 <PCF8574_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//初始化PCF8574
u8 PCF8574_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
    u8 temp=0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef GPIO_Initure;
    __HAL_RCC_GPIOB_CLK_ENABLE();           //使能GPIOB时钟
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <PCF8574_Init+0x6c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <PCF8574_Init+0x6c>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <PCF8574_Init+0x6c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
	
    GPIO_Initure.Pin=GPIO_PIN_12;           //PB12
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_INPUT;      //输入
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 80014d4:	2301      	movs	r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;     //高速
 80014d8:	2303      	movs	r3, #3
 80014da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <PCF8574_Init+0x70>)
 80014e4:	f003 faea 	bl	8004abc <HAL_GPIO_Init>
    IIC_Init();					            //IIC初始化 	
 80014e8:	f7ff fe30 	bl	800114c <IIC_Init>
	//检查PCF8574是否在位
    IIC_Start();    	 	   
 80014ec:	f7ff fe5c 	bl	80011a8 <IIC_Start>
	IIC_Send_Byte(PCF8574_ADDR);            //写地址			   
 80014f0:	2040      	movs	r0, #64	; 0x40
 80014f2:	f7ff ff47 	bl	8001384 <IIC_Send_Byte>
	temp=IIC_Wait_Ack();		            //等待应答,通过判断是否有ACK应答,来判断PCF8574的状态
 80014f6:	f7ff feaf 	bl	8001258 <IIC_Wait_Ack>
 80014fa:	4603      	mov	r3, r0
 80014fc:	77fb      	strb	r3, [r7, #31]
    IIC_Stop();					            //产生一个停止条件
 80014fe:	f7ff fe7f 	bl	8001200 <IIC_Stop>
    PCF8574_WriteOneByte(0XFF);	            //默认情况下所有IO输出高电平
 8001502:	20ff      	movs	r0, #255	; 0xff
 8001504:	f000 f822 	bl	800154c <PCF8574_WriteOneByte>
	return temp;
 8001508:	7ffb      	ldrb	r3, [r7, #31]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <PCF8574_ReadOneByte>:

//读取PCF8574的8位IO值
//返回值:读到的数据
u8 PCF8574_ReadOneByte(void)
{				  
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	u8 temp=0;		  	    																 
 8001522:	2300      	movs	r3, #0
 8001524:	71fb      	strb	r3, [r7, #7]
    IIC_Start();    	 	   
 8001526:	f7ff fe3f 	bl	80011a8 <IIC_Start>
	IIC_Send_Byte(PCF8574_ADDR|0X01);   //进入接收模式			   
 800152a:	2041      	movs	r0, #65	; 0x41
 800152c:	f7ff ff2a 	bl	8001384 <IIC_Send_Byte>
	IIC_Wait_Ack();	 
 8001530:	f7ff fe92 	bl	8001258 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);		   
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff ff71 	bl	800141c <IIC_Read_Byte>
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
    IIC_Stop();							//产生一个停止条件	    
 800153e:	f7ff fe5f 	bl	8001200 <IIC_Stop>
	return temp;
 8001542:	79fb      	ldrb	r3, [r7, #7]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <PCF8574_WriteOneByte>:
//向PCF8574写入8位IO值  
//DataToWrite:要写入的数据
void PCF8574_WriteOneByte(u8 DataToWrite)
{				   	  	    																 
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
    IIC_Start();  
 8001556:	f7ff fe27 	bl	80011a8 <IIC_Start>
    IIC_Send_Byte(PCF8574_ADDR|0X00);   //发送器件地址0X40,写数据 	 
 800155a:	2040      	movs	r0, #64	; 0x40
 800155c:	f7ff ff12 	bl	8001384 <IIC_Send_Byte>
	IIC_Wait_Ack();	    										  		   
 8001560:	f7ff fe7a 	bl	8001258 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);    	 	//发送字节							   
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff0c 	bl	8001384 <IIC_Send_Byte>
	IIC_Wait_Ack();      
 800156c:	f7ff fe74 	bl	8001258 <IIC_Wait_Ack>
    IIC_Stop();							//产生一个停止条件 
 8001570:	f7ff fe46 	bl	8001200 <IIC_Stop>
	delay_ms(10);	 
 8001574:	200a      	movs	r0, #10
 8001576:	f7ff f89f 	bl	80006b8 <delay_ms>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <PCF8574_WriteBit>:

//设置PCF8574某个IO的高低电平
//bit:要设置的IO编号,0~7
//sta:IO的状态;0或1
void PCF8574_WriteBit(u8 bit,u8 sta)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	460a      	mov	r2, r1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	4613      	mov	r3, r2
 8001590:	71bb      	strb	r3, [r7, #6]
    u8 data;
    data=PCF8574_ReadOneByte(); //先读出原来的设置
 8001592:	f7ff ffc3 	bl	800151c <PCF8574_ReadOneByte>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
    if(sta==0)data&=~(1<<bit);     
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10c      	bne.n	80015ba <PCF8574_WriteBit+0x38>
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2201      	movs	r2, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	b25a      	sxtb	r2, r3
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4013      	ands	r3, r2
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e009      	b.n	80015ce <PCF8574_WriteBit+0x4c>
    else data|=1<<bit;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2201      	movs	r2, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	73fb      	strb	r3, [r7, #15]
    PCF8574_WriteOneByte(data); //写入新的数据
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffbb 	bl	800154c <PCF8574_WriteOneByte>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_QUADSPI_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <MX_QUADSPI_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_QUADSPI_Init+0x50>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_QUADSPI_Init+0x50>)
 80015f2:	2220      	movs	r2, #32
 80015f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_QUADSPI_Init+0x50>)
 80015f8:	2210      	movs	r2, #16
 80015fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_QUADSPI_Init+0x50>)
 80015fe:	2218      	movs	r2, #24
 8001600:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_QUADSPI_Init+0x50>)
 8001604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001608:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_QUADSPI_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_QUADSPI_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_QUADSPI_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_QUADSPI_Init+0x50>)
 800161e:	f003 fca3 	bl	8004f68 <HAL_QSPI_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001628:	f7ff fd8a 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20002ab4 	.word	0x20002ab4
 8001634:	a0001000 	.word	0xa0001000

08001638 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a35      	ldr	r2, [pc, #212]	; (800172c <HAL_QSPI_MspInit+0xf4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d164      	bne.n	8001724 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	4a34      	ldr	r2, [pc, #208]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6393      	str	r3, [r2, #56]	; 0x38
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a28      	ldr	r2, [pc, #160]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_QSPI_MspInit+0xf8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b2:	2309      	movs	r3, #9
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	481d      	ldr	r0, [pc, #116]	; (8001734 <HAL_QSPI_MspInit+0xfc>)
 80016be:	f003 f9fd 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016d4:	230a      	movs	r3, #10
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4815      	ldr	r0, [pc, #84]	; (8001734 <HAL_QSPI_MspInit+0xfc>)
 80016e0:	f003 f9ec 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e4:	2304      	movs	r3, #4
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016f4:	2309      	movs	r3, #9
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480e      	ldr	r0, [pc, #56]	; (8001738 <HAL_QSPI_MspInit+0x100>)
 8001700:	f003 f9dc 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001704:	2340      	movs	r3, #64	; 0x40
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001714:	230a      	movs	r3, #10
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <HAL_QSPI_MspInit+0x100>)
 8001720:	f003 f9cc 	bl	8004abc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	a0001000 	.word	0xa0001000
 8001730:	40023800 	.word	0x40023800
 8001734:	40021400 	.word	0x40021400
 8001738:	40020400 	.word	0x40020400

0800173c <UART_GetTXState>:
 * 
 * @param huart 
 * @return HAL_UART_StateTypeDef 
 */
HAL_UART_StateTypeDef UART_GetTXState(const UART_HandleTypeDef *huart)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  temp1 = huart->gState;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001748:	60fb      	str	r3, [r7, #12]

  return (HAL_UART_StateTypeDef)(temp1);
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_write>:

int _write(int file, char *ptr, int len){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	//阻塞发送
	//HAL_UART_Transmit(&huart1,(uint8_t*)ptr, len, 0xFFFF);

	//DMA发送
	//SCB_CleanDCache_by_Addr(ptr, len);	//更新cache到内存（如果未开启透写）
	HAL_UART_Transmit_DMA(&huart1, ptr, len);	//DMA发送
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	b29b      	uxth	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <_write+0x34>)
 800176e:	f005 f8d9 	bl	8006924 <HAL_UART_Transmit_DMA>
	
	while (UART_GetTXState(&huart1) != HAL_UART_STATE_READY)
 8001772:	bf00      	nop
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <_write+0x34>)
 8001776:	f7ff ffe1 	bl	800173c <UART_GetTXState>
 800177a:	4603      	mov	r3, r0
 800177c:	2b20      	cmp	r3, #32
 800177e:	d1f9      	bne.n	8001774 <_write+0x1c>

	//not work
	// while (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_READY)
	// {
	// }
	return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20002b58 	.word	0x20002b58

08001790 <servicesAnalysis>:

uint32_t filesize;

uint32_t bytessum;

errorCode servicesAnalysis(frame *message, uint8_t *txbuf, int *plen){
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
    uint8_t service = message->cmd;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	75bb      	strb	r3, [r7, #22]
    
    errorCode ret = NOERR;  //must must be initailized, carefully!!!
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]

    switch (service)
 80017a6:	7dbb      	ldrb	r3, [r7, #22]
 80017a8:	2b37      	cmp	r3, #55	; 0x37
 80017aa:	d022      	beq.n	80017f2 <servicesAnalysis+0x62>
 80017ac:	2b37      	cmp	r3, #55	; 0x37
 80017ae:	dc28      	bgt.n	8001802 <servicesAnalysis+0x72>
 80017b0:	2b36      	cmp	r3, #54	; 0x36
 80017b2:	d016      	beq.n	80017e2 <servicesAnalysis+0x52>
 80017b4:	2b36      	cmp	r3, #54	; 0x36
 80017b6:	dc24      	bgt.n	8001802 <servicesAnalysis+0x72>
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d002      	beq.n	80017c2 <servicesAnalysis+0x32>
 80017bc:	2b34      	cmp	r3, #52	; 0x34
 80017be:	d008      	beq.n	80017d2 <servicesAnalysis+0x42>
 80017c0:	e01f      	b.n	8001802 <servicesAnalysis+0x72>
    {
    case CMD10:
        ret = diagControl(message, txbuf, plen);
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f824 	bl	8001814 <diagControl>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
        break;
 80017d0:	e01a      	b.n	8001808 <servicesAnalysis+0x78>
    
    case CMD34:
        ret = requestDownload(message, txbuf, plen);
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f842 	bl	8001860 <requestDownload>
 80017dc:	4603      	mov	r3, r0
 80017de:	75fb      	strb	r3, [r7, #23]
        break;
 80017e0:	e012      	b.n	8001808 <servicesAnalysis+0x78>

    case CMD36:
        ret = transfer(message, txbuf, plen);
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f880 	bl	80018ec <transfer>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
        break;
 80017f0:	e00a      	b.n	8001808 <servicesAnalysis+0x78>

    case CMD37:
        ret = transferExit(message, txbuf, plen);
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f8f8 	bl	80019ec <transferExit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	75fb      	strb	r3, [r7, #23]
        break;
 8001800:	e002      	b.n	8001808 <servicesAnalysis+0x78>

    default:
        ret = WRONGSERV;
 8001802:	2305      	movs	r3, #5
 8001804:	75fb      	strb	r3, [r7, #23]
        break;
 8001806:	bf00      	nop
    }

    return ret;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <diagControl>:

errorCode diagControl(frame *message, uint8_t *txbuf, int *len){
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
    uint8_t subfunc = message->subfunc;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	75bb      	strb	r3, [r7, #22]

    errorCode ret = NOERR;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]

    switch (subfunc)
 800182a:	7dbb      	ldrb	r3, [r7, #22]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d10d      	bne.n	800184c <diagControl+0x38>
    {
    case 0x02:
        /* code */
        printf("enter into program session\r\n");
 8001830:	480a      	ldr	r0, [pc, #40]	; (800185c <diagControl+0x48>)
 8001832:	f019 fcf7 	bl	801b224 <puts>
        txbuf[0] = 0x50;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2250      	movs	r2, #80	; 0x50
 800183a:	701a      	strb	r2, [r3, #0]
        txbuf[1] = 0x02;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	3301      	adds	r3, #1
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]
        *len = 2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	601a      	str	r2, [r3, #0]
        break;
 800184a:	e002      	b.n	8001852 <diagControl+0x3e>
    
    default:
        ret = ERR10;
 800184c:	2301      	movs	r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
        break;
 8001850:	bf00      	nop
    }

    return ret;
 8001852:	7dfb      	ldrb	r3, [r7, #23]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0801c2d4 	.word	0x0801c2d4

08001860 <requestDownload>:

errorCode requestDownload(frame *message, uint8_t *txbuf, int *len){
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
    uint8_t subfunc = message->subfunc;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	75bb      	strb	r3, [r7, #22]

    errorCode ret = NOERR;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]

    switch (subfunc)
 8001876:	7dbb      	ldrb	r3, [r7, #22]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d12a      	bne.n	80018d2 <requestDownload+0x72>
    {
    case 0x01:
        /* code */
        uint8_t *data = message->data;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        //printf("file size byte: %02X %02X %02X %02X \r\n", data[0], data[1], data[2], data[3]);

        filesize = (uint32_t)( ( (uint32_t)(data[0]) & 0x000000FF) | ( (uint32_t)(data[1]<<8) & 0x0000FF00)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	3301      	adds	r3, #1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	431a      	orrs	r2, r3
                                        | ( (uint32_t)(data[2]<<16) & 0x00FF0000) | ( (uint32_t)(data[3]<<24) & 0xFF000000) );
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	3302      	adds	r3, #2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80018a0:	4313      	orrs	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	3203      	adds	r2, #3
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	0612      	lsls	r2, r2, #24
        filesize = (uint32_t)( ( (uint32_t)(data[0]) & 0x000000FF) | ( (uint32_t)(data[1]<<8) & 0x0000FF00)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <requestDownload+0x84>)
 80018ae:	6013      	str	r3, [r2, #0]
        printf("34 request download file size: %d\r\n", filesize);
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <requestDownload+0x84>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <requestDownload+0x88>)
 80018b8:	f019 fc4e 	bl	801b158 <iprintf>

        txbuf[0] = 0x74;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2274      	movs	r2, #116	; 0x74
 80018c0:	701a      	strb	r2, [r3, #0]
        txbuf[1] = 0x01;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
        *len = 2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	601a      	str	r2, [r3, #0]
        break;
 80018d0:	e002      	b.n	80018d8 <requestDownload+0x78>
    
    default:
        ret = ERR34;
 80018d2:	2302      	movs	r3, #2
 80018d4:	75fb      	strb	r3, [r7, #23]
        break;
 80018d6:	bf00      	nop
    }

    return ret;
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20002b00 	.word	0x20002b00
 80018e8:	0801c2f0 	.word	0x0801c2f0

080018ec <transfer>:

errorCode transfer(frame *message, uint8_t *txbuf, int *len){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
    uint8_t subfunc = message->subfunc;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	785b      	ldrb	r3, [r3, #1]
 80018fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    errorCode ret = NOERR;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    flashItem item_send;

    switch (subfunc)
 8001906:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800190a:	2b01      	cmp	r3, #1
 800190c:	d159      	bne.n	80019c2 <transfer+0xd6>
    {
    case 0x01:
        //build flashitem
        uint8_t *data = message->data;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	623b      	str	r3, [r7, #32]
        uint32_t packnum = (uint32_t)( ((uint32_t)(data[0]) & 0x000000FF) | ((uint32_t)(data[1]<<8) & 0x0000FF00)
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	3301      	adds	r3, #1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	431a      	orrs	r2, r3
                                        | ((uint32_t)(data[2]<<16) & 0x00FF0000) | ((uint32_t)(data[3]<<24) & 0xFF000000) );
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	3302      	adds	r3, #2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	041b      	lsls	r3, r3, #16
 800192e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001932:	4313      	orrs	r3, r2
 8001934:	6a3a      	ldr	r2, [r7, #32]
 8001936:	3203      	adds	r2, #3
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	0612      	lsls	r2, r2, #24
        uint32_t packnum = (uint32_t)( ((uint32_t)(data[0]) & 0x000000FF) | ((uint32_t)(data[1]<<8) & 0x0000FF00)
 800193c:	4313      	orrs	r3, r2
 800193e:	61fb      	str	r3, [r7, #28]

        printf("receive NO.%d pack\r\n", packnum);
 8001940:	69f9      	ldr	r1, [r7, #28]
 8001942:	4825      	ldr	r0, [pc, #148]	; (80019d8 <transfer+0xec>)
 8001944:	f019 fc08 	bl	801b158 <iprintf>
        
        int datalen = message->len - 4;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	3b04      	subs	r3, #4
 800194e:	61bb      	str	r3, [r7, #24]

        item_send.buf = data+4;
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	3304      	adds	r3, #4
 8001954:	613b      	str	r3, [r7, #16]
        item_send.len = datalen;
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	617b      	str	r3, [r7, #20]

        bytessum += datalen;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <transfer+0xf0>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4413      	add	r3, r2
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <transfer+0xf0>)
 8001964:	6013      	str	r3, [r2, #0]

        if(xSemaphoreTake(flash_mutex,  portMAX_DELAY)  ==  pdTRUE)  {
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <transfer+0xf4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	4618      	mov	r0, r3
 8001970:	f008 f802 	bl	8009978 <xQueueSemaphoreTake>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d118      	bne.n	80019ac <transfer+0xc0>
            //  访问共享资源
            
            if  (xQueueSend(flashQueue,  &item_send,  portMAX_DELAY)  !=  pdPASS)  {
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <transfer+0xf8>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f107 0110 	add.w	r1, r7, #16
 8001982:	2300      	movs	r3, #0
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	f007 fcd4 	bl	8009334 <xQueueGenericSend>
 800198c:	4603      	mov	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <transfer+0xb2>
              //  发送失败处理
              printf("Failed  to  send  item  to  the  queue\r\n");
 8001992:	4815      	ldr	r0, [pc, #84]	; (80019e8 <transfer+0xfc>)
 8001994:	f019 fc46 	bl	801b224 <puts>
                ret = ERR36;
 8001998:	2303      	movs	r3, #3
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            //  延时一段时间
            //vTaskDelay(pdMS_TO_TICKS(1000));

            //  释放互斥量
            xSemaphoreGive(flash_mutex);
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <transfer+0xf4>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	f007 fcc4 	bl	8009334 <xQueueGenericSend>
        }

        txbuf[0] = 0x76;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2276      	movs	r2, #118	; 0x76
 80019b0:	701a      	strb	r2, [r3, #0]
        txbuf[1] = 0x01;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3301      	adds	r3, #1
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
        *len = 2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
        break;
 80019c0:	e003      	b.n	80019ca <transfer+0xde>
    
    default:
        ret = ERR36;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        break;
 80019c8:	bf00      	nop
    }

    return ret;
 80019ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	0801c314 	.word	0x0801c314
 80019dc:	20002b04 	.word	0x20002b04
 80019e0:	200001f4 	.word	0x200001f4
 80019e4:	200001fc 	.word	0x200001fc
 80019e8:	0801c32c 	.word	0x0801c32c

080019ec <transferExit>:

errorCode transferExit(frame *message, uint8_t *txbuf, int *len){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
    uint8_t subfunc = message->subfunc;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	75bb      	strb	r3, [r7, #22]

    errorCode ret = NOERR;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]

    switch (subfunc)
 8001a02:	7dbb      	ldrb	r3, [r7, #22]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d12a      	bne.n	8001a5e <transferExit+0x72>
    {
    case 0x01:
        printf("transfer over\r\n");
 8001a08:	4819      	ldr	r0, [pc, #100]	; (8001a70 <transferExit+0x84>)
 8001a0a:	f019 fc0b 	bl	801b224 <puts>
        //简化的校验操作，可单独写服务校验
        if(filesize == bytessum){
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <transferExit+0x88>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <transferExit+0x8c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d110      	bne.n	8001a3c <transferExit+0x50>
            printf("APP is valid\r\n");
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <transferExit+0x90>)
 8001a1c:	f019 fc02 	bl	801b224 <puts>
            APPValid = 1;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <transferExit+0x94>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
            txbuf[0] = 0x77;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2277      	movs	r2, #119	; 0x77
 8001a2a:	701a      	strb	r2, [r3, #0]
            txbuf[1] = 0x01;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
            *len = 2;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	601a      	str	r2, [r3, #0]
            txbuf[0] = 0x7F;
            txbuf[1] = 0x37;
            *len = 2;
        }
        
        break;
 8001a3a:	e013      	b.n	8001a64 <transferExit+0x78>
            printf("APP is not valid\r\n");
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <transferExit+0x98>)
 8001a3e:	f019 fbf1 	bl	801b224 <puts>
            APPValid = 0;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <transferExit+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
            txbuf[0] = 0x7F;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	227f      	movs	r2, #127	; 0x7f
 8001a4c:	701a      	strb	r2, [r3, #0]
            txbuf[1] = 0x37;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	2237      	movs	r2, #55	; 0x37
 8001a54:	701a      	strb	r2, [r3, #0]
            *len = 2;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
        break;
 8001a5c:	e002      	b.n	8001a64 <transferExit+0x78>
    
    default:
        ret = ERR37;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	75fb      	strb	r3, [r7, #23]
        break;
 8001a62:	bf00      	nop
    }

    return ret;
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0801c354 	.word	0x0801c354
 8001a74:	20002b00 	.word	0x20002b00
 8001a78:	20002b04 	.word	0x20002b04
 8001a7c:	0801c364 	.word	0x0801c364
 8001a80:	200001f8 	.word	0x200001f8
 8001a84:	0801c374 	.word	0x0801c374

08001a88 <analysisErr>:

void analysisErr(errorCode code, uint8_t *buf, int len){
 8001a88:	b5b0      	push	{r4, r5, r7, lr}
 8001a8a:	b096      	sub	sp, #88	; 0x58
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	73fb      	strb	r3, [r7, #15]
    if(code == ERR10){
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d113      	bne.n	8001ac4 <analysisErr+0x3c>
        char str[] = "10 failed";
 8001a9c:	4a39      	ldr	r2, [pc, #228]	; (8001b84 <analysisErr+0xfc>)
 8001a9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aa4:	c303      	stmia	r3!, {r0, r1}
 8001aa6:	801a      	strh	r2, [r3, #0]
        memcpy(buf, str, strlen(str)+1);
 8001aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fbc7 	bl	8000240 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aba:	4619      	mov	r1, r3
 8001abc:	68b8      	ldr	r0, [r7, #8]
 8001abe:	f019 fd6c 	bl	801b59a <memcpy>
 8001ac2:	e05c      	b.n	8001b7e <analysisErr+0xf6>
        return;
    }
    else if(code == ERR34){
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d113      	bne.n	8001af2 <analysisErr+0x6a>
        char str[] = "34 failed";
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <analysisErr+0x100>)
 8001acc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad2:	c303      	stmia	r3!, {r0, r1}
 8001ad4:	801a      	strh	r2, [r3, #0]
        memcpy(buf, str, strlen(str)+1);
 8001ad6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fbb0 	bl	8000240 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ae8:	4619      	mov	r1, r3
 8001aea:	68b8      	ldr	r0, [r7, #8]
 8001aec:	f019 fd55 	bl	801b59a <memcpy>
 8001af0:	e045      	b.n	8001b7e <analysisErr+0xf6>
        return;
    }
    else if(code == ERR36){
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d113      	bne.n	8001b20 <analysisErr+0x98>
        char str[] = "36 failed";
 8001af8:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <analysisErr+0x104>)
 8001afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b00:	c303      	stmia	r3!, {r0, r1}
 8001b02:	801a      	strh	r2, [r3, #0]
        memcpy(buf, str, strlen(str)+1);
 8001b04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fb99 	bl	8000240 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b16:	4619      	mov	r1, r3
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f019 fd3e 	bl	801b59a <memcpy>
 8001b1e:	e02e      	b.n	8001b7e <analysisErr+0xf6>
        return;
    }
    else if(code == ERR37){
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d113      	bne.n	8001b4e <analysisErr+0xc6>
        char str[] = "37 failed";
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <analysisErr+0x108>)
 8001b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b2e:	c303      	stmia	r3!, {r0, r1}
 8001b30:	801a      	strh	r2, [r3, #0]
        memcpy(buf, str, strlen(str)+1);
 8001b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fb82 	bl	8000240 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b44:	4619      	mov	r1, r3
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	f019 fd27 	bl	801b59a <memcpy>
 8001b4c:	e017      	b.n	8001b7e <analysisErr+0xf6>
        return;
    }
    else{
        char str[] = "errcode not exited!!!";
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <analysisErr+0x10c>)
 8001b50:	f107 0410 	add.w	r4, r7, #16
 8001b54:	461d      	mov	r5, r3
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b5e:	6020      	str	r0, [r4, #0]
 8001b60:	3404      	adds	r4, #4
 8001b62:	8021      	strh	r1, [r4, #0]
        memcpy(buf, str, strlen(str)+1);
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fb69 	bl	8000240 <strlen>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4619      	mov	r1, r3
 8001b78:	68b8      	ldr	r0, [r7, #8]
 8001b7a:	f019 fd0e 	bl	801b59a <memcpy>
        return;
    }
 8001b7e:	3758      	adds	r7, #88	; 0x58
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bdb0      	pop	{r4, r5, r7, pc}
 8001b84:	0801c388 	.word	0x0801c388
 8001b88:	0801c394 	.word	0x0801c394
 8001b8c:	0801c3a0 	.word	0x0801c3a0
 8001b90:	0801c3ac 	.word	0x0801c3ac
 8001b94:	0801c3b8 	.word	0x0801c3b8

08001b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_MspInit+0x4c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_MspInit+0x4c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	f06f 0001 	mvn.w	r0, #1
 8001bd6:	f000 fe33 	bl	8002840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c02:	6453      	str	r3, [r2, #68]	; 0x44
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_InitTick+0xd0>)
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fefa 	bl	8005a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c20:	f003 fee4 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 8001c24:	4603      	mov	r3, r0
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_InitTick+0xd4>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9b      	lsrs	r3, r3, #18
 8001c34:	3b01      	subs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <HAL_InitTick+0xdc>)
 8001c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c44:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001c5e:	4818      	ldr	r0, [pc, #96]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c60:	f004 fb32 	bl	80062c8 <HAL_TIM_Base_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11b      	bne.n	8001caa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <HAL_InitTick+0xd8>)
 8001c74:	f004 fb8a 	bl	800638c <HAL_TIM_Base_Start_IT>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d111      	bne.n	8001caa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c86:	2019      	movs	r0, #25
 8001c88:	f000 fdf6 	bl	8002878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	d808      	bhi.n	8001ca4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c92:	2200      	movs	r2, #0
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	2019      	movs	r0, #25
 8001c98:	f000 fdd2 	bl	8002840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <HAL_InitTick+0xe0>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e002      	b.n	8001caa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	431bde83 	.word	0x431bde83
 8001cc0:	20002b08 	.word	0x20002b08
 8001cc4:	40014400 	.word	0x40014400
 8001cc8:	20000004 	.word	0x20000004

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8001cfc:	2008      	movs	r0, #8
 8001cfe:	f003 f8bb 	bl	8004e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d0e:	f004 fbb5 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20002b08 	.word	0x20002b08

08001d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART1_IRQHandler+0x10>)
 8001d22:	f004 fe7b 	bl	8006a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20002b58 	.word	0x20002b58

08001d30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA2_Stream2_IRQHandler+0x10>)
 8001d36:	f000 ff4d 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20002c40 	.word	0x20002c40

08001d44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <ETH_IRQHandler+0x10>)
 8001d4a:	f001 fd27 	bl	800379c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200076a0 	.word	0x200076a0

08001d58 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA2_Stream7_IRQHandler+0x10>)
 8001d5e:	f000 ff39 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20002be0 	.word	0x20002be0

08001d6c <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <SCB_CleanInvalidateDCache+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7a:	f3bf 8f4f 	dsb	sy
}
 8001d7e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <SCB_CleanInvalidateDCache+0x74>)
 8001d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d86:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	0b5b      	lsrs	r3, r3, #13
 8001d8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d90:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001da4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001daa:	490d      	ldr	r1, [pc, #52]	; (8001de0 <SCB_CleanInvalidateDCache+0x74>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ef      	bne.n	8001d9c <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	60fa      	str	r2, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1e5      	bne.n	8001d92 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc6:	f3bf 8f4f 	dsb	sy
}
 8001dca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dcc:	f3bf 8f6f 	isb	sy
}
 8001dd0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <STMFLASH_ReadWord>:

//返回值:对应数据.

u32 STMFLASH_ReadWord(u32 faddr)

{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t *)faddr;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <STMFLASH_GetFlashSector>:

//返回值:0~11,即addr所在的扇区

uint16_t STMFLASH_GetFlashSector(u32 addr)

{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

	if(addr<ADDR_FLASH_SECTOR_1)return FLASH_SECTOR_0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <STMFLASH_GetFlashSector+0x6c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d201      	bcs.n	8001e10 <STMFLASH_GetFlashSector+0x14>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e024      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_SECTOR_1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <STMFLASH_GetFlashSector+0x70>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d801      	bhi.n	8001e1c <STMFLASH_GetFlashSector+0x20>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01e      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_SECTOR_2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <STMFLASH_GetFlashSector+0x74>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d201      	bcs.n	8001e28 <STMFLASH_GetFlashSector+0x2c>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e018      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_SECTOR_3;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <STMFLASH_GetFlashSector+0x78>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d801      	bhi.n	8001e34 <STMFLASH_GetFlashSector+0x38>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e012      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_SECTOR_4;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <STMFLASH_GetFlashSector+0x7c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d801      	bhi.n	8001e40 <STMFLASH_GetFlashSector+0x44>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	e00c      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_SECTOR_5;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <STMFLASH_GetFlashSector+0x80>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d801      	bhi.n	8001e4c <STMFLASH_GetFlashSector+0x50>
 8001e48:	2305      	movs	r3, #5
 8001e4a:	e006      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_SECTOR_6;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <STMFLASH_GetFlashSector+0x84>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d801      	bhi.n	8001e58 <STMFLASH_GetFlashSector+0x5c>
 8001e54:	2306      	movs	r3, #6
 8001e56:	e000      	b.n	8001e5a <STMFLASH_GetFlashSector+0x5e>

	return FLASH_SECTOR_7;
 8001e58:	2307      	movs	r3, #7

}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	08008000 	.word	0x08008000
 8001e6c:	0800ffff 	.word	0x0800ffff
 8001e70:	08018000 	.word	0x08018000
 8001e74:	0801ffff 	.word	0x0801ffff
 8001e78:	0803ffff 	.word	0x0803ffff
 8001e7c:	0807ffff 	.word	0x0807ffff
 8001e80:	080bffff 	.word	0x080bffff

08001e84 <STMFLASH_Write>:

//NumToWrite:字(32位)数(就是要写入的32位数据的个数.)

void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)

{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]

    FLASH_EraseInitTypeDef FlashEraseInit;

    HAL_StatusTypeDef FlashStatus=HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    u32 SectorError=0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]

	u32 addrx=0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34

	u32 endaddr=0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ea8:	d368      	bcc.n	8001f7c <STMFLASH_Write+0xf8>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d163      	bne.n	8001f7c <STMFLASH_Write+0xf8>



 	HAL_FLASH_Unlock();             //解锁
 8001eb4:	f002 fba2 	bl	80045fc <HAL_FLASH_Unlock>

	addrx=WriteAddr;				//写入的起始地址
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34

	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c



    if(addrx<0X1FF00000)
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	4a2e      	ldr	r2, [pc, #184]	; (8001f84 <STMFLASH_Write+0x100>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d82d      	bhi.n	8001f2a <STMFLASH_Write+0xa6>

    {

        while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
 8001ece:	e026      	b.n	8001f1e <STMFLASH_Write+0x9a>

		{

			if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
 8001ed0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ed2:	f7ff ff87 	bl	8001de4 <STMFLASH_ReadWord>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d018      	beq.n	8001f10 <STMFLASH_Write+0x8c>

			{

                FlashEraseInit.TypeErase=FLASH_TYPEERASE_SECTORS;       //擦除类型，扇区擦除
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]

                FlashEraseInit.Sector=STMFLASH_GetFlashSector(addrx);   //要擦除的扇区
 8001ee2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ee4:	f7ff ff8a 	bl	8001dfc <STMFLASH_GetFlashSector>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	623b      	str	r3, [r7, #32]

                FlashEraseInit.NbSectors=1;                             //一次只擦除一个扇区
 8001eec:	2301      	movs	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24

                FlashEraseInit.VoltageRange=FLASH_VOLTAGE_RANGE_3;      //电压范围，VCC=2.7~3.6V之间!!
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28

                if(HAL_FLASHEx_Erase(&FlashEraseInit,&SectorError)!=HAL_OK)
 8001ef4:	f107 0214 	add.w	r2, r7, #20
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fcde 	bl	80048c0 <HAL_FLASHEx_Erase>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10e      	bne.n	8001f28 <STMFLASH_Write+0xa4>

                    break;//发生错误了

                }

                SCB_CleanInvalidateDCache();                            //清除无效的D-Cache
 8001f0a:	f7ff ff2f 	bl	8001d6c <SCB_CleanInvalidateDCache>
 8001f0e:	e002      	b.n	8001f16 <STMFLASH_Write+0x92>

			}else addrx+=4;
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3304      	adds	r3, #4
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34

            FLASH_WaitForLastOperation(FLASH_WAITETIME);                //等待上次操作完成
 8001f16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f1a:	f002 fba1 	bl	8004660 <FLASH_WaitForLastOperation>
        while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
 8001f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d3d4      	bcc.n	8001ed0 <STMFLASH_Write+0x4c>
 8001f26:	e000      	b.n	8001f2a <STMFLASH_Write+0xa6>
                    break;//发生错误了
 8001f28:	bf00      	nop

        }

    }

    FlashStatus=FLASH_WaitForLastOperation(FLASH_WAITETIME);            //等待上次操作完成
 8001f2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f2e:	f002 fb97 	bl	8004660 <FLASH_WaitForLastOperation>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(FlashStatus==HAL_OK)
 8001f38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11a      	bne.n	8001f76 <STMFLASH_Write+0xf2>

	{

		while(WriteAddr<endaddr)//写数据
 8001f40:	e013      	b.n	8001f6a <STMFLASH_Write+0xe6>

		{

            if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,WriteAddr,*pBuffer)!=HAL_OK)//写入数据
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	461c      	mov	r4, r3
 8001f4a:	4615      	mov	r5, r2
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	462b      	mov	r3, r5
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	2002      	movs	r0, #2
 8001f54:	f002 faf6 	bl	8004544 <HAL_FLASH_Program>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <STMFLASH_Write+0xf0>

				break;	//写入异常

			}

			WriteAddr+=4;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]

			pBuffer++;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3304      	adds	r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
		while(WriteAddr<endaddr)//写数据
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3e7      	bcc.n	8001f42 <STMFLASH_Write+0xbe>
 8001f72:	e000      	b.n	8001f76 <STMFLASH_Write+0xf2>
				break;	//写入异常
 8001f74:	bf00      	nop

		}

	}

	HAL_FLASH_Lock();           //上锁
 8001f76:	f002 fb63 	bl	8004640 <HAL_FLASH_Lock>
 8001f7a:	e000      	b.n	8001f7e <STMFLASH_Write+0xfa>
    if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 8001f7c:	bf00      	nop

}
 8001f7e:	3738      	adds	r7, #56	; 0x38
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bdb0      	pop	{r4, r5, r7, pc}
 8001f84:	1fefffff 	.word	0x1fefffff

08001f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return 1;
 8001f8c:	2301      	movs	r3, #1
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_kill>:

int _kill(int pid, int sig)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <_kill+0x20>)
 8001fa4:	2216      	movs	r2, #22
 8001fa6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	2003d378 	.word	0x2003d378

08001fbc <_exit>:

void _exit (int status)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ffe5 	bl	8001f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fce:	e7fe      	b.n	8001fce <_exit+0x12>

08001fd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	e00a      	b.n	8001ff8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe2:	f3af 8000 	nop.w
 8001fe6:	4601      	mov	r1, r0
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	60ba      	str	r2, [r7, #8]
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dbf0      	blt.n	8001fe2 <_read+0x12>
  }

  return len;
 8002000:	687b      	ldr	r3, [r7, #4]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <_close>:
  }
  return len;
}

int _close(int file)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002032:	605a      	str	r2, [r3, #4]
  return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_isatty>:

int _isatty(int file)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d205      	bcs.n	80020b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <_sbrk+0x6c>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	e009      	b.n	80020c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <_sbrk+0x64>)
 80020c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20080000 	.word	0x20080000
 80020d4:	00002000 	.word	0x00002000
 80020d8:	20002b54 	.word	0x20002b54
 80020dc:	2003d388 	.word	0x2003d388
 80020e0:	2003d378 	.word	0x2003d378

080020e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <MX_USART1_UART_Init+0x5c>)
 8002110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_USART1_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_USART1_UART_Init+0x58>)
 800214c:	f004 fb9c 	bl	8006888 <HAL_UART_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002156:	f7fe fff3 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20002b58 	.word	0x20002b58
 8002164:	40011000 	.word	0x40011000

08002168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0ae      	sub	sp, #184	; 0xb8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	2290      	movs	r2, #144	; 0x90
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f019 f93b 	bl	801b404 <memset>
  if(uartHandle->Instance==USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a54      	ldr	r2, [pc, #336]	; (80022e4 <HAL_UART_MspInit+0x17c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	f040 80a0 	bne.w	80022da <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800219e:	2301      	movs	r3, #1
 80021a0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fc66 	bl	8005a78 <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021b2:	f7fe ffc5 	bl	8001140 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_UART_MspInit+0x180>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_UART_MspInit+0x180>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_UART_MspInit+0x180>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_UART_MspInit+0x180>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_UART_MspInit+0x180>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_UART_MspInit+0x180>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002200:	2307      	movs	r3, #7
 8002202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800220a:	4619      	mov	r1, r3
 800220c:	4837      	ldr	r0, [pc, #220]	; (80022ec <HAL_UART_MspInit+0x184>)
 800220e:	f002 fc55 	bl	8004abc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002214:	4a37      	ldr	r2, [pc, #220]	; (80022f4 <HAL_UART_MspInit+0x18c>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_UART_MspInit+0x188>)
 800221a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800221e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_UART_MspInit+0x188>)
 800222e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002232:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_UART_MspInit+0x188>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_UART_MspInit+0x188>)
 800224e:	2200      	movs	r2, #0
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002252:	4827      	ldr	r0, [pc, #156]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002254:	f000 fb1e 	bl	8002894 <HAL_DMA_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800225e:	f7fe ff6f 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_UART_MspInit+0x188>)
 8002266:	671a      	str	r2, [r3, #112]	; 0x70
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_UART_MspInit+0x188>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_UART_MspInit+0x190>)
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_UART_MspInit+0x194>)
 8002272:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <HAL_UART_MspInit+0x190>)
 8002276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800227a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_UART_MspInit+0x190>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_UART_MspInit+0x190>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_UART_MspInit+0x190>)
 800228a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_UART_MspInit+0x190>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_UART_MspInit+0x190>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_UART_MspInit+0x190>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_UART_MspInit+0x190>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_UART_MspInit+0x190>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022ae:	4812      	ldr	r0, [pc, #72]	; (80022f8 <HAL_UART_MspInit+0x190>)
 80022b0:	f000 faf0 	bl	8002894 <HAL_DMA_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80022ba:	f7fe ff41 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_UART_MspInit+0x190>)
 80022c2:	675a      	str	r2, [r3, #116]	; 0x74
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <HAL_UART_MspInit+0x190>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2105      	movs	r1, #5
 80022ce:	2025      	movs	r0, #37	; 0x25
 80022d0:	f000 fab6 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022d4:	2025      	movs	r0, #37	; 0x25
 80022d6:	f000 facf 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    // hdma_usart1_tx.XferCpltCallback = usart_transfer_complete_callback;
  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022da:	bf00      	nop
 80022dc:	37b8      	adds	r7, #184	; 0xb8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40011000 	.word	0x40011000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	20002be0 	.word	0x20002be0
 80022f4:	400264b8 	.word	0x400264b8
 80022f8:	20002c40 	.word	0x20002c40
 80022fc:	40026440 	.word	0x40026440

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002306:	490e      	ldr	r1, [pc, #56]	; (8002340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800231c:	4c0b      	ldr	r4, [pc, #44]	; (800234c <LoopFillZerobss+0x26>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232a:	f7ff fedb 	bl	80020e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f019 f90d 	bl	801b54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7fe fe4f 	bl	8000fd4 <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002344:	0801ffd0 	.word	0x0801ffd0
  ldr r2, =_sbss
 8002348:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800234c:	2003d388 	.word	0x2003d388

08002350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>

08002352 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <LAN8742_RegisterBusIO+0x28>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <LAN8742_RegisterBusIO+0x28>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <LAN8742_RegisterBusIO+0x28>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e014      	b.n	80023aa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d17c      	bne.n	80024d0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e01c      	b.n	800242a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f107 0208 	add.w	r2, r7, #8
 80023f8:	2112      	movs	r1, #18
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	4798      	blx	r3
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	da03      	bge.n	800240c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002404:	f06f 0304 	mvn.w	r3, #4
 8002408:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800240a:	e00b      	b.n	8002424 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d105      	bne.n	8002424 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
         break;
 8002422:	e005      	b.n	8002430 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3301      	adds	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b1f      	cmp	r3, #31
 800242e:	d9df      	bls.n	80023f0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b1f      	cmp	r3, #31
 8002436:	d902      	bls.n	800243e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002438:	f06f 0302 	mvn.w	r3, #2
 800243c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d145      	bne.n	80024d0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6810      	ldr	r0, [r2, #0]
 800244c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002450:	2100      	movs	r1, #0
 8002452:	4798      	blx	r3
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	db37      	blt.n	80024ca <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6810      	ldr	r0, [r2, #0]
 8002462:	f107 0208 	add.w	r2, r7, #8
 8002466:	2100      	movs	r1, #0
 8002468:	4798      	blx	r3
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	db28      	blt.n	80024c2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4798      	blx	r3
 8002476:	4603      	mov	r3, r0
 8002478:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800247a:	e01c      	b.n	80024b6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4798      	blx	r3
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800248e:	d80e      	bhi.n	80024ae <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6810      	ldr	r0, [r2, #0]
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	2100      	movs	r1, #0
 800249e:	4798      	blx	r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da07      	bge.n	80024b6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80024a6:	f06f 0304 	mvn.w	r3, #4
 80024aa:	613b      	str	r3, [r7, #16]
                 break;
 80024ac:	e010      	b.n	80024d0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80024ae:	f06f 0301 	mvn.w	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
               break;
 80024b4:	e00c      	b.n	80024d0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1dd      	bne.n	800247c <LAN8742_Init+0xc6>
 80024c0:	e006      	b.n	80024d0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80024c2:	f06f 0304 	mvn.w	r3, #4
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e002      	b.n	80024d0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80024ca:	f06f 0303 	mvn.w	r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d112      	bne.n	80024fc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4798      	blx	r3
 80024dc:	4603      	mov	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80024e0:	bf00      	nop
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	4798      	blx	r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024f4:	d9f5      	bls.n	80024e2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80024fc:	693b      	ldr	r3, [r7, #16]
 }
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6810      	ldr	r0, [r2, #0]
 800251a:	f107 020c 	add.w	r2, r7, #12
 800251e:	2101      	movs	r1, #1
 8002520:	4798      	blx	r3
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	da02      	bge.n	800252e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002528:	f06f 0304 	mvn.w	r3, #4
 800252c:	e06e      	b.n	800260c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6810      	ldr	r0, [r2, #0]
 8002536:	f107 020c 	add.w	r2, r7, #12
 800253a:	2101      	movs	r1, #1
 800253c:	4798      	blx	r3
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	da02      	bge.n	800254a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002544:	f06f 0304 	mvn.w	r3, #4
 8002548:	e060      	b.n	800260c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002554:	2301      	movs	r3, #1
 8002556:	e059      	b.n	800260c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6810      	ldr	r0, [r2, #0]
 8002560:	f107 020c 	add.w	r2, r7, #12
 8002564:	2100      	movs	r1, #0
 8002566:	4798      	blx	r3
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	da02      	bge.n	8002574 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800256e:	f06f 0304 	mvn.w	r3, #4
 8002572:	e04b      	b.n	800260c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11b      	bne.n	80025b6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <LAN8742_GetLinkState+0x90>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002592:	2302      	movs	r3, #2
 8002594:	e03a      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e033      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80025ae:	2304      	movs	r3, #4
 80025b0:	e02c      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80025b2:	2305      	movs	r3, #5
 80025b4:	e02a      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6810      	ldr	r0, [r2, #0]
 80025be:	f107 020c 	add.w	r2, r7, #12
 80025c2:	211f      	movs	r1, #31
 80025c4:	4798      	blx	r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da02      	bge.n	80025d2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80025cc:	f06f 0304 	mvn.w	r3, #4
 80025d0:	e01c      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80025dc:	2306      	movs	r3, #6
 80025de:	e015      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	2b18      	cmp	r3, #24
 80025e8:	d101      	bne.n	80025ee <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025ea:	2302      	movs	r3, #2
 80025ec:	e00e      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 031c 	and.w	r3, r3, #28
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d101      	bne.n	80025fc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e007      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 031c 	and.w	r3, r3, #28
 8002602:	2b14      	cmp	r3, #20
 8002604:	d101      	bne.n	800260a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002606:	2304      	movs	r3, #4
 8002608:	e000      	b.n	800260c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800260a:	2305      	movs	r3, #5
    }				
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
 800261a:	f000 f906 	bl	800282a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261e:	200f      	movs	r0, #15
 8002620:	f7ff fae2 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002624:	f7ff fab8 	bl	8001b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008
 8002654:	20002ca0 	.word	0x20002ca0

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20002ca0 	.word	0x20002ca0

08002670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff ffee 	bl	8002658 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d005      	beq.n	8002696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_Delay+0x44>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002696:	bf00      	nop
 8002698:	f7ff ffde 	bl	8002658 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d8f7      	bhi.n	8002698 <HAL_Delay+0x28>
  {
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_GetREVID+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0c1b      	lsrs	r3, r3, #16
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e0042000 	.word	0xe0042000

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <__NVIC_SetPriorityGrouping+0x40>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <__NVIC_SetPriorityGrouping+0x40>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	05fa0000 	.word	0x05fa0000

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff4c 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002852:	f7ff ff61 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff ffb1 	bl	80027c4 <NVIC_EncodePriority>
 8002862:	4602      	mov	r2, r0
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff80 	bl	8002770 <__NVIC_SetPriority>
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff54 	bl	8002734 <__NVIC_EnableIRQ>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff feda 	bl	8002658 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e099      	b.n	80029e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	e00f      	b.n	80028f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d2:	f7ff fec1 	bl	8002658 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d908      	bls.n	80028f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2203      	movs	r2, #3
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e078      	b.n	80029e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e8      	bne.n	80028d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4b38      	ldr	r3, [pc, #224]	; (80029ec <HAL_DMA_Init+0x158>)
 800290c:	4013      	ands	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	2b04      	cmp	r3, #4
 800294a:	d107      	bne.n	800295c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	4313      	orrs	r3, r2
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2b04      	cmp	r3, #4
 8002984:	d117      	bne.n	80029b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fb09 	bl	8002fb0 <DMA_CheckFifoParam>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029b2:	2301      	movs	r3, #1
 80029b4:	e016      	b.n	80029e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fac0 	bl	8002f44 <DMA_CalcBaseAndBitshift>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029cc:	223f      	movs	r2, #63	; 0x3f
 80029ce:	409a      	lsls	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	e010803f 	.word	0xe010803f

080029f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Start_IT+0x26>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e048      	b.n	8002aa8 <HAL_DMA_Start_IT+0xb8>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d137      	bne.n	8002a9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fa52 	bl	8002ee8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	223f      	movs	r2, #63	; 0x3f
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0216 	orr.w	r2, r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e005      	b.n	8002aa6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002abe:	f7ff fdcb 	bl	8002658 <HAL_GetTick>
 8002ac2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d008      	beq.n	8002ae2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e052      	b.n	8002b88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0216 	bic.w	r2, r2, #22
 8002af0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <HAL_DMA_Abort+0x62>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0208 	bic.w	r2, r2, #8
 8002b20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b32:	e013      	b.n	8002b5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b34:	f7ff fd90 	bl	8002658 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b05      	cmp	r3, #5
 8002b40:	d90c      	bls.n	8002b5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e015      	b.n	8002b88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e4      	bne.n	8002b34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	223f      	movs	r2, #63	; 0x3f
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d004      	beq.n	8002bae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00c      	b.n	8002bc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002be0:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <HAL_DMA_IRQHandler+0x248>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a8e      	ldr	r2, [pc, #568]	; (8002e20 <HAL_DMA_IRQHandler+0x24c>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0a9b      	lsrs	r3, r3, #10
 8002bec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2208      	movs	r2, #8
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2201      	movs	r2, #1
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2204      	movs	r2, #4
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d043      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03c      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	2210      	movs	r2, #16
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d018      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d024      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
 8002d02:	e01f      	b.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	e016      	b.n	8002d44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0208 	bic.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2220      	movs	r2, #32
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 808f 	beq.w	8002e74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8087 	beq.w	8002e74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d136      	bne.n	8002dec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0216 	bic.w	r2, r2, #22
 8002d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_DMA_IRQHandler+0x1da>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0208 	bic.w	r2, r2, #8
 8002dbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	223f      	movs	r2, #63	; 0x3f
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d07e      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
        }
        return;
 8002dea:	e079      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d031      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e02c      	b.n	8002e74 <HAL_DMA_IRQHandler+0x2a0>
 8002e1a:	bf00      	nop
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d023      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
 8002e34:	e01e      	b.n	8002e74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10f      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0210 	bic.w	r2, r2, #16
 8002e52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d032      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2205      	movs	r2, #5
 8002e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d307      	bcc.n	8002ebc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f2      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x2cc>
 8002eba:	e000      	b.n	8002ebe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ebc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e000      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ee0:	bf00      	nop
    }
  }
}
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d108      	bne.n	8002f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f26:	e007      	b.n	8002f38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3b10      	subs	r3, #16
 8002f54:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <DMA_CalcBaseAndBitshift+0x60>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d908      	bls.n	8002f84 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <DMA_CalcBaseAndBitshift+0x68>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	1d1a      	adds	r2, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	659a      	str	r2, [r3, #88]	; 0x58
 8002f82:	e006      	b.n	8002f92 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <DMA_CalcBaseAndBitshift+0x68>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	aaaaaaab 	.word	0xaaaaaaab
 8002fa8:	0801fd58 	.word	0x0801fd58
 8002fac:	fffffc00 	.word	0xfffffc00

08002fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d856      	bhi.n	800307e <DMA_CheckFifoParam+0xce>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <DMA_CheckFifoParam+0x28>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08002ffb 	.word	0x08002ffb
 8002fe0:	08002fe9 	.word	0x08002fe9
 8002fe4:	0800307f 	.word	0x0800307f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d046      	beq.n	8003082 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff8:	e043      	b.n	8003082 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003002:	d140      	bne.n	8003086 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e03d      	b.n	8003086 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d121      	bne.n	8003058 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d837      	bhi.n	800308a <DMA_CheckFifoParam+0xda>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <DMA_CheckFifoParam+0x70>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003031 	.word	0x08003031
 8003024:	08003037 	.word	0x08003037
 8003028:	08003031 	.word	0x08003031
 800302c:	08003049 	.word	0x08003049
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e030      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d025      	beq.n	800308e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e022      	b.n	800308e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003050:	d11f      	bne.n	8003092 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003056:	e01c      	b.n	8003092 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d903      	bls.n	8003066 <DMA_CheckFifoParam+0xb6>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d003      	beq.n	800306c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003064:	e018      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      break;
 800306a:	e015      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e00b      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 800307e:	bf00      	nop
 8003080:	e00a      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 8003082:	bf00      	nop
 8003084:	e008      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 8003086:	bf00      	nop
 8003088:	e006      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 800308a:	bf00      	nop
 800308c:	e004      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;   
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
    }
  } 
  
  return status; 
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop

080030a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06a      	b.n	8003190 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2223      	movs	r2, #35	; 0x23
 80030c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f005 f97b 	bl	80083c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_ETH_Init+0xf0>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a30      	ldr	r2, [pc, #192]	; (8003198 <HAL_ETH_Init+0xf0>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_ETH_Init+0xf0>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80030ea:	4b2c      	ldr	r3, [pc, #176]	; (800319c <HAL_ETH_Init+0xf4>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_ETH_Init+0xf4>)
 80030f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_ETH_Init+0xf4>)
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4927      	ldr	r1, [pc, #156]	; (800319c <HAL_ETH_Init+0xf4>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_ETH_Init+0xf4>)
 8003106:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800311e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003120:	f7ff fa9a 	bl	8002658 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003126:	e011      	b.n	800314c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003128:	f7ff fa96 	bl	8002658 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003136:	d909      	bls.n	800314c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2204      	movs	r2, #4
 800313c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	22e0      	movs	r2, #224	; 0xe0
 8003144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e021      	b.n	8003190 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e4      	bne.n	8003128 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 ff4c 	bl	8003ffc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fff3 	bl	8004150 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f001 f849 	bl	8004202 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	461a      	mov	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ffb1 	bl	80040e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2210      	movs	r2, #16
 800318a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	40013800 	.word	0x40013800

080031a0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d17b      	bne.n	80032aa <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2223      	movs	r2, #35	; 0x23
 80031b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <HAL_ETH_Start_IT+0x114>)
 80031de:	430b      	orrs	r3, r1
 80031e0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80031f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2204      	movs	r2, #4
 80031fc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f9fc 	bl	80035fc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800321c:	2001      	movs	r0, #1
 800321e:	f7ff fa27 	bl	8002670 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0204 	orr.w	r2, r2, #4
 8003238:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003242:	2001      	movs	r0, #1
 8003244:	f7ff fa14 	bl	8002670 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fd74 	bl	8003d3e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003268:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800326c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003284:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_ETH_Start_IT+0x118>)
 8003296:	430b      	orrs	r3, r1
 8003298:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800329c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2223      	movs	r2, #35	; 0x23
 80032a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00020060 	.word	0x00020060
 80032b8:	0001a0c1 	.word	0x0001a0c1

080032bc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	2b23      	cmp	r3, #35	; 0x23
 80032cc:	d16e      	bne.n	80033ac <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2223      	movs	r2, #35	; 0x23
 80032d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032de:	69d9      	ldr	r1, [r3, #28]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_ETH_Stop_IT+0xfc>)
 80032e6:	400b      	ands	r3, r1
 80032e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032ec:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003304:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	f023 0302 	bic.w	r3, r3, #2
 8003318:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800331c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0204 	bic.w	r2, r2, #4
 800332c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003336:	2001      	movs	r0, #1
 8003338:	f7ff f99a 	bl	8002670 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fcfa 	bl	8003d3e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0208 	bic.w	r2, r2, #8
 8003358:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003362:	2001      	movs	r0, #1
 8003364:	f7ff f984 	bl	8002670 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e00e      	b.n	8003394 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	3212      	adds	r2, #18
 800337c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003380:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3301      	adds	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d9ed      	bls.n	8003376 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2210      	movs	r2, #16
 80033a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	fffe5f3e 	.word	0xfffe5f3e

080033bc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e045      	b.n	800346c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e6:	2b23      	cmp	r3, #35	; 0x23
 80033e8:	d13f      	bne.n	800346a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80033f2:	2201      	movs	r2, #1
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 ff70 	bl	80042dc <ETH_Prepare_Tx_Descriptors>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f043 0202 	orr.w	r2, r3, #2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e02a      	b.n	800346c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003416:	f3bf 8f4f 	dsb	sy
}
 800341a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	2b03      	cmp	r3, #3
 800342c:	d904      	bls.n	8003438 <HAL_ETH_Transmit_IT+0x7c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	1f1a      	subs	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003452:	461a      	mov	r2, r3
 8003454:	2304      	movs	r3, #4
 8003456:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003460:	461a      	mov	r2, r3
 8003462:	2300      	movs	r3, #0
 8003464:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0a8      	b.n	80035f2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a6:	2b23      	cmp	r3, #35	; 0x23
 80034a8:	d001      	beq.n	80034ae <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a1      	b.n	80035f2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	3212      	adds	r2, #18
 80034ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034be:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c4:	f1c3 0304 	rsb	r3, r3, #4
 80034c8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80034ca:	e06a      	b.n	80035a2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <HAL_ETH_ReadData+0x88>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d040      	beq.n	800357e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003530:	3b04      	subs	r3, #4
 8003532:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003558:	461a      	mov	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f005 f8ff 	bl	8008760 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2200      	movs	r2, #0
 800357c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d902      	bls.n	8003590 <HAL_ETH_ReadData+0x11c>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3b04      	subs	r3, #4
 800358e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	3212      	adds	r2, #18
 8003596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3301      	adds	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	db06      	blt.n	80035b8 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d202      	bcs.n	80035b8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d089      	beq.n	80034cc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	441a      	add	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f815 	bl	80035fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003608:	2301      	movs	r3, #1
 800360a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	3212      	adds	r2, #18
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003622:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003624:	e040      	b.n	80036a8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d112      	bne.n	8003654 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	4618      	mov	r0, r3
 8003634:	f005 f864 	bl	8008700 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	74fb      	strb	r3, [r7, #19]
 8003642:	e007      	b.n	8003654 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d026      	beq.n	80036a8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <ETH_UpdateDescriptor+0xe4>)
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	e003      	b.n	8003672 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003670:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003672:	f3bf 8f5f 	dmb	sy
}
 8003676:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3301      	adds	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d902      	bls.n	8003696 <ETH_UpdateDescriptor+0x9a>
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3b04      	subs	r3, #4
 8003694:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	3212      	adds	r2, #18
 800369c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a0:	617b      	str	r3, [r7, #20]
      desccount--;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <ETH_UpdateDescriptor+0xb8>
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1b8      	bne.n	8003626 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d00c      	beq.n	80036d8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c6:	461a      	mov	r2, r3
 80036c8:	2300      	movs	r3, #0
 80036ca:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80036d8:	bf00      	nop
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	80004600 	.word	0x80004600

080036e4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3318      	adds	r3, #24
 80036f0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003702:	e03f      	b.n	8003784 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8003704:	2301      	movs	r3, #1
 8003706:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3b01      	subs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3304      	adds	r3, #4
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3301      	adds	r3, #1
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800372c:	7bbb      	ldrb	r3, [r7, #14]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d028      	beq.n	8003784 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68d9      	ldr	r1, [r3, #12]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	440b      	add	r3, r1
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db1b      	blt.n	8003780 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	3304      	adds	r3, #4
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	f005 f845 	bl	80087e4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3304      	adds	r3, #4
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	2200      	movs	r2, #0
 8003766:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3301      	adds	r3, #1
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
 800377e:	e001      	b.n	8003784 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_ETH_ReleaseTxPacket+0xac>
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1b9      	bne.n	8003704 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d112      	bne.n	80037dc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d109      	bne.n	80037dc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_ETH_IRQHandler+0x178>)
 80037d4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f004 fb26 	bl	8007e28 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d113      	bne.n	8003816 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10a      	bne.n	8003816 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003808:	461a      	mov	r2, r3
 800380a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800380e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f004 fb19 	bl	8007e48 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003828:	d14c      	bne.n	80038c4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383c:	d142      	bne.n	80038c4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f043 0208 	orr.w	r2, r3, #8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003860:	d11a      	bne.n	8003898 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_ETH_IRQHandler+0x17c>)
 800386e:	4013      	ands	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800388c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	22e0      	movs	r2, #224	; 0xe0
 8003892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003896:	e012      	b.n	80038be <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	f248 6380 	movw	r3, #34432	; 0x8680
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b6:	461a      	mov	r2, r3
 80038b8:	f248 6380 	movw	r3, #34432	; 0x8680
 80038bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f004 fad2 	bl	8007e68 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d10e      	bne.n	80038f0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f81c 	bl	8003920 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_ETH_IRQHandler+0x180>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_ETH_IRQHandler+0x180>)
 80038fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003902:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f815 	bl	8003934 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00010040 	.word	0x00010040
 8003918:	007e2000 	.word	0x007e2000
 800391c:	40013c00 	.word	0x40013c00

08003920 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 031c 	and.w	r3, r3, #28
 8003964:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	02db      	lsls	r3, r3, #11
 800396a:	b29b      	uxth	r3, r3
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 0302 	bic.w	r3, r3, #2
 8003986:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003998:	f7fe fe5e 	bl	8002658 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800399e:	e00d      	b.n	80039bc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80039a0:	f7fe fe5a 	bl	8002658 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ae:	d301      	bcc.n	80039b4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e010      	b.n	80039d6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ec      	bne.n	80039a0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 031c 	and.w	r3, r3, #28
 80039fa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	02db      	lsls	r3, r3, #11
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	019b      	lsls	r3, r3, #6
 8003a0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a38:	f7fe fe0e 	bl	8002658 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a3e:	e00d      	b.n	8003a5c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003a40:	f7fe fe0a 	bl	8002658 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d301      	bcc.n	8003a54 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e009      	b.n	8003a68 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ec      	bne.n	8003a40 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0d9      	b.n	8003c38 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bf14      	ite	ne
 8003b76:	2301      	movne	r3, #1
 8003b78:	2300      	moveq	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e00b      	b.n	8003c70 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d105      	bne.n	8003c6e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003c62:	6839      	ldr	r1, [r7, #0]
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f88f 	bl	8003d88 <ETH_SetMACConfig>

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 031c 	bic.w	r3, r3, #28
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c90:	f001 fe8c 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 8003c94:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4a1d      	ldr	r2, [pc, #116]	; (8003d10 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d908      	bls.n	8003cb0 <HAL_ETH_SetMDIOClockRange+0x38>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d804      	bhi.n	8003cb0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f043 0308 	orr.w	r3, r3, #8
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e027      	b.n	8003d00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d908      	bls.n	8003cca <HAL_ETH_SetMDIOClockRange+0x52>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d204      	bcs.n	8003cca <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f043 030c 	orr.w	r3, r3, #12
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e01a      	b.n	8003d00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d303      	bcc.n	8003cda <HAL_ETH_SetMDIOClockRange+0x62>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d911      	bls.n	8003cfe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d908      	bls.n	8003cf4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d804      	bhi.n	8003cf4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e005      	b.n	8003d00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f043 0310 	orr.w	r3, r3, #16
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e000      	b.n	8003d00 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003cfe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	611a      	str	r2, [r3, #16]
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	01312cff 	.word	0x01312cff
 8003d14:	02160ebf 	.word	0x02160ebf
 8003d18:	03938700 	.word	0x03938700
 8003d1c:	05f5e0ff 	.word	0x05f5e0ff
 8003d20:	08f0d17f 	.word	0x08f0d17f

08003d24 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe fc7e 	bl	8002670 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d7e:	6193      	str	r3, [r2, #24]
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <ETH_SetMACConfig+0x15c>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	7c1b      	ldrb	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <ETH_SetMACConfig+0x28>
 8003daa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003dae:	e000      	b.n	8003db2 <ETH_SetMACConfig+0x2a>
 8003db0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	7c5b      	ldrb	r3, [r3, #17]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <ETH_SetMACConfig+0x38>
 8003dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003dbe:	e000      	b.n	8003dc2 <ETH_SetMACConfig+0x3a>
 8003dc0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003dc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003dc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7fdb      	ldrb	r3, [r3, #31]
 8003dce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003dd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003dd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	7f92      	ldrb	r2, [r2, #30]
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d102      	bne.n	8003de6 <ETH_SetMACConfig+0x5e>
 8003de0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003de4:	e000      	b.n	8003de8 <ETH_SetMACConfig+0x60>
 8003de6:	2200      	movs	r2, #0
                        macconf->Speed |
 8003de8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7f1b      	ldrb	r3, [r3, #28]
 8003dee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003df0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003df6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	791b      	ldrb	r3, [r3, #4]
 8003dfc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003dfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d102      	bne.n	8003e10 <ETH_SetMACConfig+0x88>
 8003e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0e:	e000      	b.n	8003e12 <ETH_SetMACConfig+0x8a>
 8003e10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003e12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	7bdb      	ldrb	r3, [r3, #15]
 8003e18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003e1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003e20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7fe fc14 	bl	8002670 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	d101      	bne.n	8003e76 <ETH_SetMACConfig+0xee>
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	e000      	b.n	8003e78 <ETH_SetMACConfig+0xf0>
 8003e76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003e86:	2a01      	cmp	r2, #1
 8003e88:	d101      	bne.n	8003e8e <ETH_SetMACConfig+0x106>
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	e000      	b.n	8003e90 <ETH_SetMACConfig+0x108>
 8003e8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003e90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003e98:	2a01      	cmp	r2, #1
 8003e9a:	d101      	bne.n	8003ea0 <ETH_SetMACConfig+0x118>
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	e000      	b.n	8003ea2 <ETH_SetMACConfig+0x11a>
 8003ea0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003ea2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003eaa:	2a01      	cmp	r2, #1
 8003eac:	d101      	bne.n	8003eb2 <ETH_SetMACConfig+0x12a>
 8003eae:	2202      	movs	r2, #2
 8003eb0:	e000      	b.n	8003eb4 <ETH_SetMACConfig+0x12c>
 8003eb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7fe fbcf 	bl	8002670 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	619a      	str	r2, [r3, #24]
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	ff20810f 	.word	0xff20810f

08003ee8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <ETH_SetDMAConfig+0x110>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	7b1b      	ldrb	r3, [r3, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <ETH_SetDMAConfig+0x2c>
 8003f0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003f12:	e000      	b.n	8003f16 <ETH_SetDMAConfig+0x2e>
 8003f14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	7b5b      	ldrb	r3, [r3, #13]
 8003f1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	7f52      	ldrb	r2, [r2, #29]
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	d102      	bne.n	8003f2c <ETH_SetDMAConfig+0x44>
 8003f26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f2a:	e000      	b.n	8003f2e <ETH_SetDMAConfig+0x46>
 8003f2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003f2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	7b9b      	ldrb	r3, [r3, #14]
 8003f34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003f36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003f3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	7f1b      	ldrb	r3, [r3, #28]
 8003f42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003f44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	7f9b      	ldrb	r3, [r3, #30]
 8003f4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003f4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003f52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7fe fb76 	bl	8002670 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	791b      	ldrb	r3, [r3, #4]
 8003f96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003fa2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003fa8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fb0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003fb2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003fba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003fc0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f7fe fb47 	bl	8002670 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	f8de3f23 	.word	0xf8de3f23

08003ffc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b0a6      	sub	sp, #152	; 0x98
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004010:	2300      	movs	r3, #0
 8004012:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004014:	2300      	movs	r3, #0
 8004016:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800402c:	2300      	movs	r3, #0
 800402e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004038:	2300      	movs	r3, #0
 800403a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004042:	2300      	movs	r3, #0
 8004044:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004046:	2300      	movs	r3, #0
 8004048:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800405e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004062:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004068:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fe86 	bl	8003d88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800407c:	2301      	movs	r3, #1
 800407e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004080:	2301      	movs	r3, #1
 8004082:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800408a:	2301      	movs	r3, #1
 800408c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004092:	2300      	movs	r3, #0
 8004094:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800409e:	2300      	movs	r3, #0
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80040ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80040b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80040b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80040cc:	f107 0308 	add.w	r3, r7, #8
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ff08 	bl	8003ee8 <ETH_SetDMAConfig>
}
 80040d8:	bf00      	nop
 80040da:	3798      	adds	r7, #152	; 0x98
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3305      	adds	r3, #5
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	3204      	adds	r2, #4
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <ETH_MACAddressConfig+0x68>)
 8004102:	4413      	add	r3, r2
 8004104:	461a      	mov	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3303      	adds	r3, #3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	061a      	lsls	r2, r3, #24
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3302      	adds	r3, #2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3301      	adds	r3, #1
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	4313      	orrs	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <ETH_MACAddressConfig+0x6c>)
 8004132:	4413      	add	r3, r2
 8004134:	461a      	mov	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6013      	str	r3, [r2, #0]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40028040 	.word	0x40028040
 800414c:	40028044 	.word	0x40028044

08004150 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e03e      	b.n	80041dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68d9      	ldr	r1, [r3, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2200      	movs	r2, #0
 8004186:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	3206      	adds	r2, #6
 8004190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d80c      	bhi.n	80041c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68d9      	ldr	r1, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	e004      	b.n	80041ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3301      	adds	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d9bd      	bls.n	800415e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	611a      	str	r2, [r3, #16]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e046      	b.n	800429e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6919      	ldr	r1, [r3, #16]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800424c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004254:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	3212      	adds	r2, #18
 800426a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d80c      	bhi.n	800428e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6919      	ldr	r1, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e004      	b.n	8004298 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	461a      	mov	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3301      	adds	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d9b5      	bls.n	8004210 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ce:	60da      	str	r2, [r3, #12]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80042dc:	b480      	push	{r7}
 80042de:	b08d      	sub	sp, #52	; 0x34
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3318      	adds	r3, #24
 80042ec:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004306:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431e:	d007      	beq.n	8004330 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	3304      	adds	r3, #4
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004330:	2302      	movs	r3, #2
 8004332:	e0ff      	b.n	8004534 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	3301      	adds	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	4b7d      	ldr	r3, [pc, #500]	; (8004540 <ETH_Prepare_Tx_Descriptors+0x264>)
 800434a:	4013      	ands	r3, r2
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	431a      	orrs	r2, r3
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	431a      	orrs	r2, r3
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80043b6:	f3bf 8f5f 	dmb	sy
}
 80043ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80043c8:	e082      	b.n	80044d0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e005      	b.n	80043f6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	3301      	adds	r3, #1
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d902      	bls.n	8004408 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	3b04      	subs	r3, #4
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004410:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800442a:	d007      	beq.n	800443c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	3304      	adds	r3, #4
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d029      	beq.n	8004490 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004448:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800444a:	2300      	movs	r3, #0
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	e019      	b.n	8004484 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004450:	f3bf 8f5f 	dmb	sy
}
 8004454:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	3301      	adds	r3, #1
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	2b03      	cmp	r3, #3
 800446c:	d902      	bls.n	8004474 <ETH_Prepare_Tx_Descriptors+0x198>
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	3b04      	subs	r3, #4
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	3301      	adds	r3, #1
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
 8004484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	429a      	cmp	r2, r3
 800448a:	d3e1      	bcc.n	8004450 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800448c:	2302      	movs	r3, #2
 800448e:	e051      	b.n	8004534 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	3301      	adds	r3, #1
 8004494:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <ETH_Prepare_Tx_Descriptors+0x264>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	6852      	ldr	r2, [r2, #4]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80044be:	f3bf 8f5f 	dmb	sy
}
 80044c2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f af78 	bne.w	80043ca <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e005      	b.n	80044fa <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	3304      	adds	r3, #4
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800451a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800451c:	b672      	cpsid	i
}
 800451e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800452e:	b662      	cpsie	i
}
 8004530:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3734      	adds	r7, #52	; 0x34
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	ffffe000 	.word	0xffffe000

08004544 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004556:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <HAL_FLASH_Program+0xb0>)
 8004558:	7d1b      	ldrb	r3, [r3, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_FLASH_Program+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e043      	b.n	80045ea <HAL_FLASH_Program+0xa6>
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_FLASH_Program+0xb0>)
 8004564:	2201      	movs	r2, #1
 8004566:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004568:	f24c 3050 	movw	r0, #50000	; 0xc350
 800456c:	f000 f878 	bl	8004660 <FLASH_WaitForLastOperation>
 8004570:	4603      	mov	r3, r0
 8004572:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d133      	bne.n	80045e2 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d823      	bhi.n	80045c8 <HAL_FLASH_Program+0x84>
 8004580:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <HAL_FLASH_Program+0x44>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	08004599 	.word	0x08004599
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045b1 	.word	0x080045b1
 8004594:	080045bd 	.word	0x080045bd
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8004598:	783b      	ldrb	r3, [r7, #0]
 800459a:	4619      	mov	r1, r3
 800459c:	68b8      	ldr	r0, [r7, #8]
 800459e:	f000 f921 	bl	80047e4 <FLASH_Program_Byte>
        break;
 80045a2:	e012      	b.n	80045ca <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80045a4:	883b      	ldrh	r3, [r7, #0]
 80045a6:	4619      	mov	r1, r3
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f000 f8f5 	bl	8004798 <FLASH_Program_HalfWord>
        break;
 80045ae:	e00c      	b.n	80045ca <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4619      	mov	r1, r3
 80045b4:	68b8      	ldr	r0, [r7, #8]
 80045b6:	f000 f8c9 	bl	800474c <FLASH_Program_Word>
        break;
 80045ba:	e006      	b.n	80045ca <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80045bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c0:	68b8      	ldr	r0, [r7, #8]
 80045c2:	f000 f88d 	bl	80046e0 <FLASH_Program_DoubleWord>
        break;
 80045c6:	e000      	b.n	80045ca <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80045c8:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80045ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045ce:	f000 f847 	bl	8004660 <FLASH_WaitForLastOperation>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_FLASH_Program+0xb4>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <HAL_FLASH_Program+0xb4>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <HAL_FLASH_Program+0xb0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	751a      	strb	r2, [r3, #20]

  return status;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20002ca4 	.word	0x20002ca4
 80045f8:	40023c00 	.word	0x40023c00

080045fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_FLASH_Unlock+0x38>)
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	da0b      	bge.n	8004626 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_FLASH_Unlock+0x38>)
 8004610:	4a09      	ldr	r2, [pc, #36]	; (8004638 <HAL_FLASH_Unlock+0x3c>)
 8004612:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <HAL_FLASH_Unlock+0x38>)
 8004616:	4a09      	ldr	r2, [pc, #36]	; (800463c <HAL_FLASH_Unlock+0x40>)
 8004618:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_FLASH_Unlock+0x38>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da01      	bge.n	8004626 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004626:	79fb      	ldrb	r3, [r7, #7]
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40023c00 	.word	0x40023c00
 8004638:	45670123 	.word	0x45670123
 800463c:	cdef89ab 	.word	0xcdef89ab

08004640 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_FLASH_Lock+0x1c>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	4a04      	ldr	r2, [pc, #16]	; (800465c <HAL_FLASH_Lock+0x1c>)
 800464a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800464e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40023c00 	.word	0x40023c00

08004660 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <FLASH_WaitForLastOperation+0x78>)
 800466e:	2200      	movs	r2, #0
 8004670:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004672:	f7fd fff1 	bl	8002658 <HAL_GetTick>
 8004676:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004678:	e010      	b.n	800469c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d00c      	beq.n	800469c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <FLASH_WaitForLastOperation+0x38>
 8004688:	f7fd ffe6 	bl	8002658 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d201      	bcs.n	800469c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e019      	b.n	80046d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <FLASH_WaitForLastOperation+0x7c>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e8      	bne.n	800467a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <FLASH_WaitForLastOperation+0x7c>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80046b4:	f000 f8ba 	bl	800482c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e009      	b.n	80046d0 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <FLASH_WaitForLastOperation+0x7c>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <FLASH_WaitForLastOperation+0x7c>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
  
}  
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20002ca4 	.word	0x20002ca4
 80046dc:	40023c00 	.word	0x40023c00

080046e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <FLASH_Program_DoubleWord+0x68>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <FLASH_Program_DoubleWord+0x68>)
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <FLASH_Program_DoubleWord+0x68>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	4a12      	ldr	r2, [pc, #72]	; (8004748 <FLASH_Program_DoubleWord+0x68>)
 80046fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <FLASH_Program_DoubleWord+0x68>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <FLASH_Program_DoubleWord+0x68>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004716:	f3bf 8f6f 	isb	sy
}
 800471a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800471c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	000a      	movs	r2, r1
 800472a:	2300      	movs	r3, #0
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	3104      	adds	r1, #4
 8004730:	4613      	mov	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004734:	f3bf 8f4f 	dsb	sy
}
 8004738:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00

0800474c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <FLASH_Program_Word+0x48>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <FLASH_Program_Word+0x48>)
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <FLASH_Program_Word+0x48>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <FLASH_Program_Word+0x48>)
 8004768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800476c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <FLASH_Program_Word+0x48>)
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <FLASH_Program_Word+0x48>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004780:	f3bf 8f4f 	dsb	sy
}
 8004784:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023c00 	.word	0x40023c00

08004798 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <FLASH_Program_HalfWord+0x48>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <FLASH_Program_HalfWord+0x48>)
 80047aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <FLASH_Program_HalfWord+0x48>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <FLASH_Program_HalfWord+0x48>)
 80047b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <FLASH_Program_HalfWord+0x48>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <FLASH_Program_HalfWord+0x48>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80047ce:	f3bf 8f4f 	dsb	sy
}
 80047d2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	40023c00 	.word	0x40023c00

080047e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <FLASH_Program_Byte+0x44>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <FLASH_Program_Byte+0x44>)
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <FLASH_Program_Byte+0x44>)
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <FLASH_Program_Byte+0x44>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <FLASH_Program_Byte+0x44>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <FLASH_Program_Byte+0x44>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004816:	f3bf 8f4f 	dsb	sy
}
 800481a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40023c00 	.word	0x40023c00

0800482c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <FLASH_SetErrorCode+0x8c>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <FLASH_SetErrorCode+0x90>)
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f043 0320 	orr.w	r3, r3, #32
 8004844:	4a1d      	ldr	r2, [pc, #116]	; (80048bc <FLASH_SetErrorCode+0x90>)
 8004846:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004848:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <FLASH_SetErrorCode+0x8c>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <FLASH_SetErrorCode+0x90>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f043 0310 	orr.w	r3, r3, #16
 800485c:	4a17      	ldr	r2, [pc, #92]	; (80048bc <FLASH_SetErrorCode+0x90>)
 800485e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004860:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <FLASH_SetErrorCode+0x8c>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <FLASH_SetErrorCode+0x90>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <FLASH_SetErrorCode+0x90>)
 8004876:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <FLASH_SetErrorCode+0x8c>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <FLASH_SetErrorCode+0x90>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f043 0304 	orr.w	r3, r3, #4
 800488c:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <FLASH_SetErrorCode+0x90>)
 800488e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <FLASH_SetErrorCode+0x8c>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800489c:	4b07      	ldr	r3, [pc, #28]	; (80048bc <FLASH_SetErrorCode+0x90>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f043 0302 	orr.w	r3, r3, #2
 80048a4:	4a05      	ldr	r2, [pc, #20]	; (80048bc <FLASH_SetErrorCode+0x90>)
 80048a6:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <FLASH_SetErrorCode+0x8c>)
 80048aa:	22f2      	movs	r2, #242	; 0xf2
 80048ac:	60da      	str	r2, [r3, #12]
}
 80048ae:	bf00      	nop
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40023c00 	.word	0x40023c00
 80048bc:	20002ca4 	.word	0x20002ca4

080048c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_FLASHEx_Erase+0xd4>)
 80048d4:	7d1b      	ldrb	r3, [r3, #20]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_FLASHEx_Erase+0x1e>
 80048da:	2302      	movs	r3, #2
 80048dc:	e056      	b.n	800498c <HAL_FLASHEx_Erase+0xcc>
 80048de:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <HAL_FLASHEx_Erase+0xd4>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048e8:	f7ff feba 	bl	8004660 <FLASH_WaitForLastOperation>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d146      	bne.n	8004984 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 f844 	bl	80049a0 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800491c:	f7ff fea0 	bl	8004660 <FLASH_WaitForLastOperation>
 8004920:	4603      	mov	r3, r0
 8004922:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004924:	4b1c      	ldr	r3, [pc, #112]	; (8004998 <HAL_FLASHEx_Erase+0xd8>)
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	491b      	ldr	r1, [pc, #108]	; (8004998 <HAL_FLASHEx_Erase+0xd8>)
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <HAL_FLASHEx_Erase+0xdc>)
 800492c:	4013      	ands	r3, r2
 800492e:	610b      	str	r3, [r1, #16]
 8004930:	e028      	b.n	8004984 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	e01c      	b.n	8004974 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	68b8      	ldr	r0, [r7, #8]
 8004944:	f000 f868 	bl	8004a18 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004948:	f24c 3050 	movw	r0, #50000	; 0xc350
 800494c:	f7ff fe88 	bl	8004660 <FLASH_WaitForLastOperation>
 8004950:	4603      	mov	r3, r0
 8004952:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_FLASHEx_Erase+0xd8>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <HAL_FLASHEx_Erase+0xd8>)
 800495a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800495e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	601a      	str	r2, [r3, #0]
          break;
 800496c:	e00a      	b.n	8004984 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	3301      	adds	r3, #1
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4413      	add	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	d3da      	bcc.n	800493a <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <HAL_FLASHEx_Erase+0xd4>)
 8004986:	2200      	movs	r2, #0
 8004988:	751a      	strb	r2, [r3, #20]

  return status;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20002ca4 	.word	0x20002ca4
 8004998:	40023c00 	.word	0x40023c00
 800499c:	ffff7ffb 	.word	0xffff7ffb

080049a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <FLASH_MassErase+0x74>)
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <FLASH_MassErase+0x74>)
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d107      	bne.n	80049ce <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <FLASH_MassErase+0x74>)
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	4914      	ldr	r1, [pc, #80]	; (8004a14 <FLASH_MassErase+0x74>)
 80049c4:	f248 0304 	movw	r3, #32772	; 0x8004
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
 80049cc:	e00f      	b.n	80049ee <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d106      	bne.n	80049e2 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80049d4:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <FLASH_MassErase+0x74>)
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <FLASH_MassErase+0x74>)
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	6113      	str	r3, [r2, #16]
 80049e0:	e005      	b.n	80049ee <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <FLASH_MassErase+0x74>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <FLASH_MassErase+0x74>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <FLASH_MassErase+0x74>)
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	4313      	orrs	r3, r2
 80049f8:	4a06      	ldr	r2, [pc, #24]	; (8004a14 <FLASH_MassErase+0x74>)
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a00:	f3bf 8f4f 	dsb	sy
}
 8004a04:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40023c00 	.word	0x40023c00

08004a18 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e010      	b.n	8004a56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d103      	bne.n	8004a42 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e009      	b.n	8004a56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d103      	bne.n	8004a50 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e002      	b.n	8004a56 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004a50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b0b      	cmp	r3, #11
 8004a5a:	d902      	bls.n	8004a62 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	4911      	ldr	r1, [pc, #68]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	4a0e      	ldr	r2, [pc, #56]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a92:	f043 0302 	orr.w	r3, r3, #2
 8004a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004a98:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	4a06      	ldr	r2, [pc, #24]	; (8004ab8 <FLASH_Erase_Sector+0xa0>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004aa4:	f3bf 8f4f 	dsb	sy
}
 8004aa8:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40023c00 	.word	0x40023c00

08004abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	e175      	b.n	8004dc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004adc:	2201      	movs	r2, #1
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	f040 8164 	bne.w	8004dc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d005      	beq.n	8004b12 <HAL_GPIO_Init+0x56>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d130      	bne.n	8004b74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b48:	2201      	movs	r2, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 0201 	and.w	r2, r3, #1
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d017      	beq.n	8004bb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d123      	bne.n	8004c04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	08da      	lsrs	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3208      	adds	r2, #8
 8004bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	220f      	movs	r2, #15
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	08da      	lsrs	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3208      	adds	r2, #8
 8004bfe:	69b9      	ldr	r1, [r7, #24]
 8004c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	2203      	movs	r2, #3
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0203 	and.w	r2, r3, #3
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 80be 	beq.w	8004dc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c46:	4b66      	ldr	r3, [pc, #408]	; (8004de0 <HAL_GPIO_Init+0x324>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	4a65      	ldr	r2, [pc, #404]	; (8004de0 <HAL_GPIO_Init+0x324>)
 8004c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c50:	6453      	str	r3, [r2, #68]	; 0x44
 8004c52:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_GPIO_Init+0x324>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c5e:	4a61      	ldr	r2, [pc, #388]	; (8004de4 <HAL_GPIO_Init+0x328>)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3302      	adds	r3, #2
 8004c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	220f      	movs	r2, #15
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a58      	ldr	r2, [pc, #352]	; (8004de8 <HAL_GPIO_Init+0x32c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d037      	beq.n	8004cfa <HAL_GPIO_Init+0x23e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a57      	ldr	r2, [pc, #348]	; (8004dec <HAL_GPIO_Init+0x330>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d031      	beq.n	8004cf6 <HAL_GPIO_Init+0x23a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a56      	ldr	r2, [pc, #344]	; (8004df0 <HAL_GPIO_Init+0x334>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02b      	beq.n	8004cf2 <HAL_GPIO_Init+0x236>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a55      	ldr	r2, [pc, #340]	; (8004df4 <HAL_GPIO_Init+0x338>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d025      	beq.n	8004cee <HAL_GPIO_Init+0x232>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a54      	ldr	r2, [pc, #336]	; (8004df8 <HAL_GPIO_Init+0x33c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01f      	beq.n	8004cea <HAL_GPIO_Init+0x22e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a53      	ldr	r2, [pc, #332]	; (8004dfc <HAL_GPIO_Init+0x340>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d019      	beq.n	8004ce6 <HAL_GPIO_Init+0x22a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a52      	ldr	r2, [pc, #328]	; (8004e00 <HAL_GPIO_Init+0x344>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_GPIO_Init+0x226>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a51      	ldr	r2, [pc, #324]	; (8004e04 <HAL_GPIO_Init+0x348>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00d      	beq.n	8004cde <HAL_GPIO_Init+0x222>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a50      	ldr	r2, [pc, #320]	; (8004e08 <HAL_GPIO_Init+0x34c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <HAL_GPIO_Init+0x21e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a4f      	ldr	r2, [pc, #316]	; (8004e0c <HAL_GPIO_Init+0x350>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_GPIO_Init+0x21a>
 8004cd2:	2309      	movs	r3, #9
 8004cd4:	e012      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e010      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cda:	2308      	movs	r3, #8
 8004cdc:	e00e      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cde:	2307      	movs	r3, #7
 8004ce0:	e00c      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004ce2:	2306      	movs	r3, #6
 8004ce4:	e00a      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004ce6:	2305      	movs	r3, #5
 8004ce8:	e008      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cea:	2304      	movs	r3, #4
 8004cec:	e006      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e004      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e002      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_GPIO_Init+0x240>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	f002 0203 	and.w	r2, r2, #3
 8004d02:	0092      	lsls	r2, r2, #2
 8004d04:	4093      	lsls	r3, r2
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d0c:	4935      	ldr	r1, [pc, #212]	; (8004de4 <HAL_GPIO_Init+0x328>)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	3302      	adds	r3, #2
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d1a:	4b3d      	ldr	r3, [pc, #244]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d3e:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d44:	4b32      	ldr	r3, [pc, #200]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d68:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d92:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <HAL_GPIO_Init+0x354>)
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	f67f ae86 	bls.w	8004adc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3724      	adds	r7, #36	; 0x24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40013800 	.word	0x40013800
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40020400 	.word	0x40020400
 8004df0:	40020800 	.word	0x40020800
 8004df4:	40020c00 	.word	0x40020c00
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40021400 	.word	0x40021400
 8004e00:	40021800 	.word	0x40021800
 8004e04:	40021c00 	.word	0x40021c00
 8004e08:	40022000 	.word	0x40022000
 8004e0c:	40022400 	.word	0x40022400
 8004e10:	40013c00 	.word	0x40013c00

08004e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	887b      	ldrh	r3, [r7, #2]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
 8004e30:	e001      	b.n	8004e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
 8004e50:	4613      	mov	r3, r2
 8004e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e54:	787b      	ldrb	r3, [r7, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e60:	e003      	b.n	8004e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	041a      	lsls	r2, r3, #16
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	619a      	str	r2, [r3, #24]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8e:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb ff6a 	bl	8000d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40013c00 	.word	0x40013c00

08004ea8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40007000 	.word	0x40007000

08004ec8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	4b23      	ldr	r3, [pc, #140]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004edc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ede:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef6:	f7fd fbaf 	bl	8002658 <HAL_GetTick>
 8004efa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004efc:	e009      	b.n	8004f12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004efe:	f7fd fbab 	bl	8002658 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0c:	d901      	bls.n	8004f12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e022      	b.n	8004f58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f12:	4b14      	ldr	r3, [pc, #80]	; (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1e:	d1ee      	bne.n	8004efe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f20:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0f      	ldr	r2, [pc, #60]	; (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f2c:	f7fd fb94 	bl	8002658 <HAL_GetTick>
 8004f30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f32:	e009      	b.n	8004f48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f34:	f7fd fb90 	bl	8002658 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f42:	d901      	bls.n	8004f48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e007      	b.n	8004f58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f54:	d1ee      	bne.n	8004f34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	40007000 	.word	0x40007000

08004f68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f70:	f7fd fb72 	bl	8002658 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e067      	b.n	8005050 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fc fb4f 	bl	8001638 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f85e 	bl	8005060 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	021a      	lsls	r2, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2120      	movs	r1, #32
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f856 	bl	800507c <QSPI_WaitFlagStateUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d135      	bne.n	8005046 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <HAL_QSPI_Init+0xf0>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6852      	ldr	r2, [r2, #4]
 8004fe8:	0611      	lsls	r1, r2, #24
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	69d2      	ldr	r2, [r2, #28]
 8004ff4:	4311      	orrs	r1, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6a12      	ldr	r2, [r2, #32]
 8004ffa:	4311      	orrs	r1, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4b14      	ldr	r3, [pc, #80]	; (800505c <HAL_QSPI_Init+0xf4>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6912      	ldr	r2, [r2, #16]
 8005012:	0411      	lsls	r1, r2, #16
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6952      	ldr	r2, [r2, #20]
 8005018:	4311      	orrs	r1, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6992      	ldr	r2, [r2, #24]
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	430b      	orrs	r3, r1
 8005026:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800504e:	7afb      	ldrb	r3, [r7, #11]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	00ffff2f 	.word	0x00ffff2f
 800505c:	ffe0f8fe 	.word	0xffe0f8fe

08005060 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800508c:	e01a      	b.n	80050c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d016      	beq.n	80050c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fd fadf 	bl	8002658 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2204      	movs	r2, #4
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	f043 0201 	orr.w	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e00e      	b.n	80050e2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf14      	ite	ne
 80050d2:	2301      	movne	r3, #1
 80050d4:	2300      	moveq	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d1d6      	bne.n	800508e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80050f4:	2300      	movs	r3, #0
 80050f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e29b      	b.n	800563a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8087 	beq.w	800521e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005110:	4b96      	ldr	r3, [pc, #600]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b04      	cmp	r3, #4
 800511a:	d00c      	beq.n	8005136 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800511c:	4b93      	ldr	r3, [pc, #588]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 030c 	and.w	r3, r3, #12
 8005124:	2b08      	cmp	r3, #8
 8005126:	d112      	bne.n	800514e <HAL_RCC_OscConfig+0x62>
 8005128:	4b90      	ldr	r3, [pc, #576]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005134:	d10b      	bne.n	800514e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005136:	4b8d      	ldr	r3, [pc, #564]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d06c      	beq.n	800521c <HAL_RCC_OscConfig+0x130>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d168      	bne.n	800521c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e275      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x7a>
 8005158:	4b84      	ldr	r3, [pc, #528]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a83      	ldr	r2, [pc, #524]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800515e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e02e      	b.n	80051c4 <HAL_RCC_OscConfig+0xd8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0x9c>
 800516e:	4b7f      	ldr	r3, [pc, #508]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7e      	ldr	r2, [pc, #504]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b7c      	ldr	r3, [pc, #496]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7b      	ldr	r2, [pc, #492]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e01d      	b.n	80051c4 <HAL_RCC_OscConfig+0xd8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0xc0>
 8005192:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a75      	ldr	r2, [pc, #468]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b73      	ldr	r3, [pc, #460]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a72      	ldr	r2, [pc, #456]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0xd8>
 80051ac:	4b6f      	ldr	r3, [pc, #444]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6e      	ldr	r2, [pc, #440]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b6c      	ldr	r3, [pc, #432]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a6b      	ldr	r2, [pc, #428]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd fa44 	bl	8002658 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fd fa40 	bl	8002658 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e229      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e6:	4b61      	ldr	r3, [pc, #388]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe8>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fd fa30 	bl	8002658 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fd fa2c 	bl	8002658 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e215      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520e:	4b57      	ldr	r3, [pc, #348]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x110>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d069      	beq.n	80052fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800522a:	4b50      	ldr	r3, [pc, #320]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005236:	4b4d      	ldr	r3, [pc, #308]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b08      	cmp	r3, #8
 8005240:	d11c      	bne.n	800527c <HAL_RCC_OscConfig+0x190>
 8005242:	4b4a      	ldr	r3, [pc, #296]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d116      	bne.n	800527c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524e:	4b47      	ldr	r3, [pc, #284]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_RCC_OscConfig+0x17a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e1e9      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	493d      	ldr	r1, [pc, #244]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527a:	e040      	b.n	80052fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d023      	beq.n	80052cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005284:	4b39      	ldr	r3, [pc, #228]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a38      	ldr	r2, [pc, #224]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd f9e2 	bl	8002658 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005298:	f7fd f9de 	bl	8002658 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1c7      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052aa:	4b30      	ldr	r3, [pc, #192]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b2d      	ldr	r3, [pc, #180]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4929      	ldr	r1, [pc, #164]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
 80052ca:	e018      	b.n	80052fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052cc:	4b27      	ldr	r3, [pc, #156]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a26      	ldr	r2, [pc, #152]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd f9be 	bl	8002658 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e0:	f7fd f9ba 	bl	8002658 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e1a3      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCC_OscConfig+0x280>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f0      	bne.n	80052e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d038      	beq.n	800537c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d019      	beq.n	8005346 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005312:	4b16      	ldr	r3, [pc, #88]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531e:	f7fd f99b 	bl	8002658 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005326:	f7fd f997 	bl	8002658 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e180      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x23a>
 8005344:	e01a      	b.n	800537c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RCC_OscConfig+0x280>)
 8005348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <HAL_RCC_OscConfig+0x280>)
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fd f981 	bl	8002658 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005358:	e00a      	b.n	8005370 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535a:	f7fd f97d 	bl	8002658 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d903      	bls.n	8005370 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e166      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
 800536c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005370:	4b92      	ldr	r3, [pc, #584]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1ee      	bne.n	800535a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80a4 	beq.w	80054d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538a:	4b8c      	ldr	r3, [pc, #560]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	4b89      	ldr	r3, [pc, #548]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a88      	ldr	r2, [pc, #544]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b86      	ldr	r3, [pc, #536]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b2:	4b83      	ldr	r3, [pc, #524]	; (80055c0 <HAL_RCC_OscConfig+0x4d4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d118      	bne.n	80053f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053be:	4b80      	ldr	r3, [pc, #512]	; (80055c0 <HAL_RCC_OscConfig+0x4d4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7f      	ldr	r2, [pc, #508]	; (80055c0 <HAL_RCC_OscConfig+0x4d4>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ca:	f7fd f945 	bl	8002658 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d2:	f7fd f941 	bl	8002658 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b64      	cmp	r3, #100	; 0x64
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e12a      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e4:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCC_OscConfig+0x4d4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <HAL_RCC_OscConfig+0x31a>
 80053f8:	4b70      	ldr	r3, [pc, #448]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a6f      	ldr	r2, [pc, #444]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	e02d      	b.n	8005462 <HAL_RCC_OscConfig+0x376>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x33c>
 800540e:	4b6b      	ldr	r3, [pc, #428]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a6a      	ldr	r2, [pc, #424]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	4b68      	ldr	r3, [pc, #416]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a67      	ldr	r2, [pc, #412]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
 8005426:	e01c      	b.n	8005462 <HAL_RCC_OscConfig+0x376>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b05      	cmp	r3, #5
 800542e:	d10c      	bne.n	800544a <HAL_RCC_OscConfig+0x35e>
 8005430:	4b62      	ldr	r3, [pc, #392]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a61      	ldr	r2, [pc, #388]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005436:	f043 0304 	orr.w	r3, r3, #4
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
 800543c:	4b5f      	ldr	r3, [pc, #380]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005440:	4a5e      	ldr	r2, [pc, #376]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6713      	str	r3, [r2, #112]	; 0x70
 8005448:	e00b      	b.n	8005462 <HAL_RCC_OscConfig+0x376>
 800544a:	4b5c      	ldr	r3, [pc, #368]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a5b      	ldr	r2, [pc, #364]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005450:	f023 0301 	bic.w	r3, r3, #1
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
 8005456:	4b59      	ldr	r3, [pc, #356]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	4a58      	ldr	r2, [pc, #352]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800545c:	f023 0304 	bic.w	r3, r3, #4
 8005460:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d015      	beq.n	8005496 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546a:	f7fd f8f5 	bl	8002658 <HAL_GetTick>
 800546e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	e00a      	b.n	8005488 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fd f8f1 	bl	8002658 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e0d8      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005488:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ee      	beq.n	8005472 <HAL_RCC_OscConfig+0x386>
 8005494:	e014      	b.n	80054c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005496:	f7fd f8df 	bl	8002658 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549c:	e00a      	b.n	80054b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549e:	f7fd f8db 	bl	8002658 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e0c2      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b4:	4b41      	ldr	r3, [pc, #260]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ee      	bne.n	800549e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c6:	4b3d      	ldr	r3, [pc, #244]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	4a3c      	ldr	r2, [pc, #240]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80054cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80ae 	beq.w	8005638 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054dc:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d06d      	beq.n	80055c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d14b      	bne.n	8005588 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f0:	4b32      	ldr	r3, [pc, #200]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a31      	ldr	r2, [pc, #196]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80054f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd f8ac 	bl	8002658 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fd f8a8 	bl	8002658 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e091      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005516:	4b29      	ldr	r3, [pc, #164]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	3b01      	subs	r3, #1
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	491b      	ldr	r1, [pc, #108]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800555e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fd f87a 	bl	8002658 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005568:	f7fd f876 	bl	8002658 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e05f      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x47c>
 8005586:	e057      	b.n	8005638 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 800558e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd f860 	bl	8002658 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fd f85c 	bl	8002658 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e045      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_RCC_OscConfig+0x4d0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x4b0>
 80055ba:	e03d      	b.n	8005638 <HAL_RCC_OscConfig+0x54c>
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80055c4:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <HAL_RCC_OscConfig+0x558>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d030      	beq.n	8005634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d129      	bne.n	8005634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d122      	bne.n	8005634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d119      	bne.n	8005634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d10f      	bne.n	8005634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d107      	bne.n	8005634 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800

08005648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0d0      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005660:	4b6a      	ldr	r3, [pc, #424]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d910      	bls.n	8005690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b67      	ldr	r3, [pc, #412]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 020f 	bic.w	r2, r3, #15
 8005676:	4965      	ldr	r1, [pc, #404]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567e:	4b63      	ldr	r3, [pc, #396]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0b8      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d020      	beq.n	80056de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a8:	4b59      	ldr	r3, [pc, #356]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4a58      	ldr	r2, [pc, #352]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056c0:	4b53      	ldr	r3, [pc, #332]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4a52      	ldr	r2, [pc, #328]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056cc:	4b50      	ldr	r3, [pc, #320]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	494d      	ldr	r1, [pc, #308]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d040      	beq.n	800576c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d107      	bne.n	8005702 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b47      	ldr	r3, [pc, #284]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d115      	bne.n	800572a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e07f      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e073      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571a:	4b3d      	ldr	r3, [pc, #244]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e06b      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572a:	4b39      	ldr	r3, [pc, #228]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 0203 	bic.w	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4936      	ldr	r1, [pc, #216]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fc ff8c 	bl	8002658 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005742:	e00a      	b.n	800575a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005744:	f7fc ff88 	bl	8002658 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e053      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	4b2d      	ldr	r3, [pc, #180]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 020c 	and.w	r2, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	429a      	cmp	r2, r3
 800576a:	d1eb      	bne.n	8005744 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800576c:	4b27      	ldr	r3, [pc, #156]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d210      	bcs.n	800579c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 020f 	bic.w	r2, r3, #15
 8005782:	4922      	ldr	r1, [pc, #136]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b20      	ldr	r3, [pc, #128]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e032      	b.n	8005802 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a8:	4b19      	ldr	r3, [pc, #100]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4916      	ldr	r1, [pc, #88]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057c6:	4b12      	ldr	r3, [pc, #72]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	490e      	ldr	r1, [pc, #56]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057da:	f000 f821 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80057de:	4602      	mov	r2, r0
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	490a      	ldr	r1, [pc, #40]	; (8005814 <HAL_RCC_ClockConfig+0x1cc>)
 80057ec:	5ccb      	ldrb	r3, [r1, r3]
 80057ee:	fa22 f303 	lsr.w	r3, r2, r3
 80057f2:	4a09      	ldr	r2, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x1d0>)
 80057f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_RCC_ClockConfig+0x1d4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fc f9f4 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023c00 	.word	0x40023c00
 8005810:	40023800 	.word	0x40023800
 8005814:	0801fd40 	.word	0x0801fd40
 8005818:	20000000 	.word	0x20000000
 800581c:	20000004 	.word	0x20000004

08005820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005824:	b090      	sub	sp, #64	; 0x40
 8005826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	2300      	movs	r3, #0
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005830:	2300      	movs	r3, #0
 8005832:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005838:	4b59      	ldr	r3, [pc, #356]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	2b08      	cmp	r3, #8
 8005842:	d00d      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0x40>
 8005844:	2b08      	cmp	r3, #8
 8005846:	f200 80a1 	bhi.w	800598c <HAL_RCC_GetSysClockFreq+0x16c>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x34>
 800584e:	2b04      	cmp	r3, #4
 8005850:	d003      	beq.n	800585a <HAL_RCC_GetSysClockFreq+0x3a>
 8005852:	e09b      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005854:	4b53      	ldr	r3, [pc, #332]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005858:	e09b      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800585a:	4b53      	ldr	r3, [pc, #332]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800585e:	e098      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005860:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800586a:	4b4d      	ldr	r3, [pc, #308]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d028      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005876:	4b4a      	ldr	r3, [pc, #296]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	2200      	movs	r2, #0
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	627a      	str	r2, [r7, #36]	; 0x24
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005888:	2100      	movs	r1, #0
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800588c:	fb03 f201 	mul.w	r2, r3, r1
 8005890:	2300      	movs	r3, #0
 8005892:	fb00 f303 	mul.w	r3, r0, r3
 8005896:	4413      	add	r3, r2
 8005898:	4a43      	ldr	r2, [pc, #268]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800589a:	fba0 1202 	umull	r1, r2, r0, r2
 800589e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a0:	460a      	mov	r2, r1
 80058a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80058a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a6:	4413      	add	r3, r2
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	2200      	movs	r2, #0
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	61fa      	str	r2, [r7, #28]
 80058b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80058ba:	f7fa fd19 	bl	80002f0 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4613      	mov	r3, r2
 80058c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c6:	e053      	b.n	8005970 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c8:	4b35      	ldr	r3, [pc, #212]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	099b      	lsrs	r3, r3, #6
 80058ce:	2200      	movs	r2, #0
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	617a      	str	r2, [r7, #20]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80058da:	f04f 0b00 	mov.w	fp, #0
 80058de:	4652      	mov	r2, sl
 80058e0:	465b      	mov	r3, fp
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	0159      	lsls	r1, r3, #5
 80058ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058f0:	0150      	lsls	r0, r2, #5
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	ebb2 080a 	subs.w	r8, r2, sl
 80058fa:	eb63 090b 	sbc.w	r9, r3, fp
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800590a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800590e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005912:	ebb2 0408 	subs.w	r4, r2, r8
 8005916:	eb63 0509 	sbc.w	r5, r3, r9
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	00eb      	lsls	r3, r5, #3
 8005924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005928:	00e2      	lsls	r2, r4, #3
 800592a:	4614      	mov	r4, r2
 800592c:	461d      	mov	r5, r3
 800592e:	eb14 030a 	adds.w	r3, r4, sl
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	eb45 030b 	adc.w	r3, r5, fp
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005946:	4629      	mov	r1, r5
 8005948:	028b      	lsls	r3, r1, #10
 800594a:	4621      	mov	r1, r4
 800594c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005950:	4621      	mov	r1, r4
 8005952:	028a      	lsls	r2, r1, #10
 8005954:	4610      	mov	r0, r2
 8005956:	4619      	mov	r1, r3
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	2200      	movs	r2, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	60fa      	str	r2, [r7, #12]
 8005960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005964:	f7fa fcc4 	bl	80002f0 <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4613      	mov	r3, r2
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	3301      	adds	r3, #1
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005994:	4618      	mov	r0, r3
 8005996:	3740      	adds	r7, #64	; 0x40
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599e:	bf00      	nop
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	017d7840 	.word	0x017d7840

080059ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059b2:	681b      	ldr	r3, [r3, #0]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000000 	.word	0x20000000

080059c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059c8:	f7ff fff0 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0a9b      	lsrs	r3, r3, #10
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40023800 	.word	0x40023800
 80059e8:	0801fd50 	.word	0x0801fd50

080059ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059f0:	f7ff ffdc 	bl	80059ac <HAL_RCC_GetHCLKFreq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0b5b      	lsrs	r3, r3, #13
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4903      	ldr	r1, [pc, #12]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a02:	5ccb      	ldrb	r3, [r1, r3]
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	0801fd50 	.word	0x0801fd50

08005a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	220f      	movs	r2, #15
 8005a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_RCC_GetClockConfig+0x5c>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0203 	and.w	r2, r3, #3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RCC_GetClockConfig+0x5c>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_GetClockConfig+0x5c>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_GetClockConfig+0x5c>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	08db      	lsrs	r3, r3, #3
 8005a4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <HAL_RCC_GetClockConfig+0x60>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 020f 	and.w	r2, r3, #15
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	601a      	str	r2, [r3, #0]
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40023c00 	.word	0x40023c00

08005a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aa0:	4b69      	ldr	r3, [pc, #420]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	4a68      	ldr	r2, [pc, #416]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005aaa:	6093      	str	r3, [r2, #8]
 8005aac:	4b66      	ldr	r3, [pc, #408]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab4:	4964      	ldr	r1, [pc, #400]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d017      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae0:	4959      	ldr	r1, [pc, #356]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af0:	d101      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005afe:	2301      	movs	r3, #1
 8005b00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d017      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b0e:	4b4e      	ldr	r3, [pc, #312]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	494a      	ldr	r1, [pc, #296]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 808b 	beq.w	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b5c:	4b3a      	ldr	r3, [pc, #232]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	4a39      	ldr	r2, [pc, #228]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b66:	6413      	str	r3, [r2, #64]	; 0x40
 8005b68:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b74:	4b35      	ldr	r3, [pc, #212]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a34      	ldr	r2, [pc, #208]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b80:	f7fc fd6a 	bl	8002658 <HAL_GetTick>
 8005b84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b88:	f7fc fd66 	bl	8002658 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	; 0x64
 8005b94:	d901      	bls.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e38f      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ba6:	4b28      	ldr	r3, [pc, #160]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d035      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d02e      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bc4:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bde:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005be6:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d114      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc fd2e 	bl	8002658 <HAL_GetTick>
 8005bfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c00:	f7fc fd2a 	bl	8002658 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e351      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0ee      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2e:	d111      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c3e:	400b      	ands	r3, r1
 8005c40:	4901      	ldr	r1, [pc, #4]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
 8005c46:	e00b      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	0ffffcff 	.word	0x0ffffcff
 8005c54:	4bac      	ldr	r3, [pc, #688]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4aab      	ldr	r2, [pc, #684]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c5e:	6093      	str	r3, [r2, #8]
 8005c60:	4ba9      	ldr	r3, [pc, #676]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6c:	49a6      	ldr	r1, [pc, #664]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d010      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c7e:	4ba2      	ldr	r3, [pc, #648]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c84:	4aa0      	ldr	r2, [pc, #640]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c8e:	4b9e      	ldr	r3, [pc, #632]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	499b      	ldr	r1, [pc, #620]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cac:	4b96      	ldr	r3, [pc, #600]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cba:	4993      	ldr	r1, [pc, #588]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cce:	4b8e      	ldr	r3, [pc, #568]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cdc:	498a      	ldr	r1, [pc, #552]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cf0:	4b85      	ldr	r3, [pc, #532]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfe:	4982      	ldr	r1, [pc, #520]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d12:	4b7d      	ldr	r3, [pc, #500]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4979      	ldr	r1, [pc, #484]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d34:	4b74      	ldr	r3, [pc, #464]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f023 0203 	bic.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	4971      	ldr	r1, [pc, #452]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d56:	4b6c      	ldr	r3, [pc, #432]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f023 020c 	bic.w	r2, r3, #12
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	4968      	ldr	r1, [pc, #416]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d78:	4b63      	ldr	r3, [pc, #396]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d86:	4960      	ldr	r1, [pc, #384]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d9a:	4b5b      	ldr	r3, [pc, #364]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	4957      	ldr	r1, [pc, #348]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dbc:	4b52      	ldr	r3, [pc, #328]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	494f      	ldr	r1, [pc, #316]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005dde:	4b4a      	ldr	r3, [pc, #296]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	4946      	ldr	r1, [pc, #280]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e00:	4b41      	ldr	r3, [pc, #260]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0e:	493e      	ldr	r1, [pc, #248]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e22:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e30:	4935      	ldr	r1, [pc, #212]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e44:	4b30      	ldr	r3, [pc, #192]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e52:	492d      	ldr	r1, [pc, #180]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d011      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e66:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e74:	4924      	ldr	r1, [pc, #144]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e84:	d101      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	4914      	ldr	r1, [pc, #80]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ec8:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ed8:	490b      	ldr	r1, [pc, #44]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00f      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efc:	4902      	ldr	r1, [pc, #8]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f04:	e002      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005f06:	bf00      	nop
 8005f08:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00b      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f18:	4b8a      	ldr	r3, [pc, #552]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	4986      	ldr	r1, [pc, #536]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f3c:	4b81      	ldr	r3, [pc, #516]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4c:	497d      	ldr	r1, [pc, #500]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d006      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80d6 	beq.w	8006114 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f68:	4b76      	ldr	r3, [pc, #472]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a75      	ldr	r2, [pc, #468]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f74:	f7fc fb70 	bl	8002658 <HAL_GetTick>
 8005f78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f7c:	f7fc fb6c 	bl	8002658 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e195      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f8e:	4b6d      	ldr	r3, [pc, #436]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d021      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11d      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fae:	4b65      	ldr	r3, [pc, #404]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb4:	0c1b      	lsrs	r3, r3, #16
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fbc:	4b61      	ldr	r3, [pc, #388]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc2:	0e1b      	lsrs	r3, r3, #24
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	019a      	lsls	r2, r3, #6
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	061b      	lsls	r3, r3, #24
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	071b      	lsls	r3, r3, #28
 8005fe2:	4958      	ldr	r1, [pc, #352]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02e      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006014:	d129      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006016:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006024:	4b47      	ldr	r3, [pc, #284]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602a:	0f1b      	lsrs	r3, r3, #28
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	019a      	lsls	r2, r3, #6
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	061b      	lsls	r3, r3, #24
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	071b      	lsls	r3, r3, #28
 800604a:	493e      	ldr	r1, [pc, #248]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006052:	4b3c      	ldr	r3, [pc, #240]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006058:	f023 021f 	bic.w	r2, r3, #31
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	3b01      	subs	r3, #1
 8006062:	4938      	ldr	r1, [pc, #224]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01d      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006076:	4b33      	ldr	r3, [pc, #204]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607c:	0e1b      	lsrs	r3, r3, #24
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006084:	4b2f      	ldr	r3, [pc, #188]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608a:	0f1b      	lsrs	r3, r3, #28
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	019a      	lsls	r2, r3, #6
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	431a      	orrs	r2, r3
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	071b      	lsls	r3, r3, #28
 80060aa:	4926      	ldr	r1, [pc, #152]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d011      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	019a      	lsls	r2, r3, #6
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	041b      	lsls	r3, r3, #16
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	061b      	lsls	r3, r3, #24
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	071b      	lsls	r3, r3, #28
 80060da:	491a      	ldr	r1, [pc, #104]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060e2:	4b18      	ldr	r3, [pc, #96]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a17      	ldr	r2, [pc, #92]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ee:	f7fc fab3 	bl	8002658 <HAL_GetTick>
 80060f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f4:	e008      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060f6:	f7fc faaf 	bl	8002658 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b64      	cmp	r3, #100	; 0x64
 8006102:	d901      	bls.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e0d8      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f0      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	f040 80ce 	bne.w	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a08      	ldr	r2, [pc, #32]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006128:	f7fc fa96 	bl	8002658 <HAL_GetTick>
 800612c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800612e:	e00b      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006130:	f7fc fa92 	bl	8002658 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b64      	cmp	r3, #100	; 0x64
 800613c:	d904      	bls.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e0bb      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006148:	4b5e      	ldr	r3, [pc, #376]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006154:	d0ec      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006172:	2b00      	cmp	r3, #0
 8006174:	d02e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d12a      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800617e:	4b51      	ldr	r3, [pc, #324]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800618c:	4b4d      	ldr	r3, [pc, #308]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	0f1b      	lsrs	r3, r3, #28
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	019a      	lsls	r2, r3, #6
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	061b      	lsls	r3, r3, #24
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	071b      	lsls	r3, r3, #28
 80061b2:	4944      	ldr	r1, [pc, #272]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061ba:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	3b01      	subs	r3, #1
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	493d      	ldr	r1, [pc, #244]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d022      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e8:	d11d      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061ea:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061f8:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	019a      	lsls	r2, r3, #6
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	431a      	orrs	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	071b      	lsls	r3, r3, #28
 800621e:	4929      	ldr	r1, [pc, #164]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d028      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006232:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006240:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	0c1b      	lsrs	r3, r3, #16
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	019a      	lsls	r2, r3, #6
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	431a      	orrs	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	071b      	lsls	r3, r3, #28
 8006266:	4917      	ldr	r1, [pc, #92]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800626e:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	4911      	ldr	r1, [pc, #68]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006284:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006290:	f7fc f9e2 	bl	8002658 <HAL_GetTick>
 8006294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006298:	f7fc f9de 	bl	8002658 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e007      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b6:	d1ef      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40023800 	.word	0x40023800

080062c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e049      	b.n	800636e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f841 	bl	8006376 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f000 fa00 	bl	800670c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b01      	cmp	r3, #1
 800639e:	d001      	beq.n	80063a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e054      	b.n	800644e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a26      	ldr	r2, [pc, #152]	; (800645c <HAL_TIM_Base_Start_IT+0xd0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d022      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ce:	d01d      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a22      	ldr	r2, [pc, #136]	; (8006460 <HAL_TIM_Base_Start_IT+0xd4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d018      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a21      	ldr	r2, [pc, #132]	; (8006464 <HAL_TIM_Base_Start_IT+0xd8>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d013      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1f      	ldr	r2, [pc, #124]	; (8006468 <HAL_TIM_Base_Start_IT+0xdc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00e      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1e      	ldr	r2, [pc, #120]	; (800646c <HAL_TIM_Base_Start_IT+0xe0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d009      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1c      	ldr	r2, [pc, #112]	; (8006470 <HAL_TIM_Base_Start_IT+0xe4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x80>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <HAL_TIM_Base_Start_IT+0xe8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d115      	bne.n	8006438 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	4b19      	ldr	r3, [pc, #100]	; (8006478 <HAL_TIM_Base_Start_IT+0xec>)
 8006414:	4013      	ands	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b06      	cmp	r3, #6
 800641c:	d015      	beq.n	800644a <HAL_TIM_Base_Start_IT+0xbe>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006424:	d011      	beq.n	800644a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	e008      	b.n	800644a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e000      	b.n	800644c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40010000 	.word	0x40010000
 8006460:	40000400 	.word	0x40000400
 8006464:	40000800 	.word	0x40000800
 8006468:	40000c00 	.word	0x40000c00
 800646c:	40010400 	.word	0x40010400
 8006470:	40014000 	.word	0x40014000
 8006474:	40001800 	.word	0x40001800
 8006478:	00010007 	.word	0x00010007

0800647c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d122      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d11b      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0202 	mvn.w	r2, #2
 80064a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f905 	bl	80066ce <HAL_TIM_IC_CaptureCallback>
 80064c4:	e005      	b.n	80064d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8f7 	bl	80066ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f908 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d122      	bne.n	800652c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d11b      	bne.n	800652c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0204 	mvn.w	r2, #4
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8db 	bl	80066ce <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8cd 	bl	80066ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f8de 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b08      	cmp	r3, #8
 8006538:	d122      	bne.n	8006580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b08      	cmp	r3, #8
 8006546:	d11b      	bne.n	8006580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0208 	mvn.w	r2, #8
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2204      	movs	r2, #4
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f8b1 	bl	80066ce <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8a3 	bl	80066ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f8b4 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d122      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b10      	cmp	r3, #16
 800659a:	d11b      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f06f 0210 	mvn.w	r2, #16
 80065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2208      	movs	r2, #8
 80065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f887 	bl	80066ce <HAL_TIM_IC_CaptureCallback>
 80065c0:	e005      	b.n	80065ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f879 	bl	80066ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f88a 	bl	80066e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0201 	mvn.w	r2, #1
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fa fd8e 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f91a 	bl	8006860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d10e      	bne.n	800665a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f90d 	bl	8006874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d10e      	bne.n	8006686 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d107      	bne.n	8006686 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800667e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f838 	bl	80066f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b20      	cmp	r3, #32
 8006692:	d10e      	bne.n	80066b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d107      	bne.n	80066b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f06f 0220 	mvn.w	r2, #32
 80066aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f8cd 	bl	800684c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a40      	ldr	r2, [pc, #256]	; (8006820 <TIM_Base_SetConfig+0x114>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d013      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672a:	d00f      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a3d      	ldr	r2, [pc, #244]	; (8006824 <TIM_Base_SetConfig+0x118>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00b      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <TIM_Base_SetConfig+0x11c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d007      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3b      	ldr	r2, [pc, #236]	; (800682c <TIM_Base_SetConfig+0x120>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <TIM_Base_SetConfig+0x124>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d108      	bne.n	800675e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <TIM_Base_SetConfig+0x114>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d02b      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676c:	d027      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2c      	ldr	r2, [pc, #176]	; (8006824 <TIM_Base_SetConfig+0x118>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d023      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <TIM_Base_SetConfig+0x11c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d01f      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <TIM_Base_SetConfig+0x120>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01b      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a29      	ldr	r2, [pc, #164]	; (8006830 <TIM_Base_SetConfig+0x124>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d017      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a28      	ldr	r2, [pc, #160]	; (8006834 <TIM_Base_SetConfig+0x128>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a27      	ldr	r2, [pc, #156]	; (8006838 <TIM_Base_SetConfig+0x12c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a26      	ldr	r2, [pc, #152]	; (800683c <TIM_Base_SetConfig+0x130>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a25      	ldr	r2, [pc, #148]	; (8006840 <TIM_Base_SetConfig+0x134>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a24      	ldr	r2, [pc, #144]	; (8006844 <TIM_Base_SetConfig+0x138>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a23      	ldr	r2, [pc, #140]	; (8006848 <TIM_Base_SetConfig+0x13c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d108      	bne.n	80067d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a0a      	ldr	r2, [pc, #40]	; (8006820 <TIM_Base_SetConfig+0x114>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0xf8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <TIM_Base_SetConfig+0x124>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d103      	bne.n	800680c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	615a      	str	r2, [r3, #20]
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40010400 	.word	0x40010400
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	40001800 	.word	0x40001800
 8006844:	40001c00 	.word	0x40001c00
 8006848:	40002000 	.word	0x40002000

0800684c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e040      	b.n	800691c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fb fc5c 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0201 	bic.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fbc4 	bl	8007054 <UART_SetConfig>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e022      	b.n	800691c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fe1c 	bl	800751c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fea3 	bl	8007660 <UART_CheckIdleState>
 800691a:	4603      	mov	r3, r0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006936:	2b20      	cmp	r3, #32
 8006938:	d165      	bne.n	8006a06 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <HAL_UART_Transmit_DMA+0x22>
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e05e      	b.n	8006a08 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2221      	movs	r2, #33	; 0x21
 800696c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006972:	2b00      	cmp	r3, #0
 8006974:	d027      	beq.n	80069c6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	4a25      	ldr	r2, [pc, #148]	; (8006a10 <HAL_UART_Transmit_DMA+0xec>)
 800697c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a24      	ldr	r2, [pc, #144]	; (8006a14 <HAL_UART_Transmit_DMA+0xf0>)
 8006984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a23      	ldr	r2, [pc, #140]	; (8006a18 <HAL_UART_Transmit_DMA+0xf4>)
 800698c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	2200      	movs	r2, #0
 8006994:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699e:	4619      	mov	r1, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3328      	adds	r3, #40	; 0x28
 80069a6:	461a      	mov	r2, r3
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	f7fc f821 	bl	80029f0 <HAL_DMA_Start_IT>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2210      	movs	r2, #16
 80069b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e020      	b.n	8006a08 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	613b      	str	r3, [r7, #16]
   return(result);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3308      	adds	r3, #8
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	623a      	str	r2, [r7, #32]
 80069f0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	69f9      	ldr	r1, [r7, #28]
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e5      	bne.n	80069ce <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006a06:	2302      	movs	r3, #2
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3728      	adds	r7, #40	; 0x28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	0800799b 	.word	0x0800799b
 8006a14:	08007a31 	.word	0x08007a31
 8006a18:	08007a4d 	.word	0x08007a4d

08006a1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b0ba      	sub	sp, #232	; 0xe8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a46:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d115      	bne.n	8006a84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00f      	beq.n	8006a84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 82ac 	beq.w	8006fd2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
      }
      return;
 8006a82:	e2a6      	b.n	8006fd2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8117 	beq.w	8006cbc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a9e:	4b85      	ldr	r3, [pc, #532]	; (8006cb4 <HAL_UART_IRQHandler+0x298>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 810a 	beq.w	8006cbc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xbc>
 8006ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ace:	f043 0201 	orr.w	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d011      	beq.n	8006b08 <HAL_UART_IRQHandler+0xec>
 8006ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2202      	movs	r2, #2
 8006af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006afe:	f043 0204 	orr.w	r2, r3, #4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d011      	beq.n	8006b38 <HAL_UART_IRQHandler+0x11c>
 8006b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2204      	movs	r2, #4
 8006b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2e:	f043 0202 	orr.w	r2, r3, #2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d017      	beq.n	8006b74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2208      	movs	r2, #8
 8006b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6a:	f043 0208 	orr.w	r2, r3, #8
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d012      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x18a>
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00c      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9c:	f043 0220 	orr.w	r2, r3, #32
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8212 	beq.w	8006fd6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d005      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d04f      	beq.n	8006c9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fe67 	bl	80078d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	d141      	bne.n	8006c96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3308      	adds	r3, #8
 8006c18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1d9      	bne.n	8006c12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d013      	beq.n	8006c8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <HAL_UART_IRQHandler+0x29c>)
 8006c6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fb ff8c 	bl	8002b90 <HAL_DMA_Abort_IT>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d017      	beq.n	8006cae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8c:	e00f      	b.n	8006cae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9c0 	bl	8007014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c94:	e00b      	b.n	8006cae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9bc 	bl	8007014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	e007      	b.n	8006cae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f9b8 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006cac:	e193      	b.n	8006fd6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cae:	bf00      	nop
    return;
 8006cb0:	e191      	b.n	8006fd6 <HAL_UART_IRQHandler+0x5ba>
 8006cb2:	bf00      	nop
 8006cb4:	04000120 	.word	0x04000120
 8006cb8:	08007acb 	.word	0x08007acb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	f040 814c 	bne.w	8006f5e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8145 	beq.w	8006f5e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 813e 	beq.w	8006f5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2210      	movs	r2, #16
 8006ce8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	f040 80b6 	bne.w	8006e66 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 8165 	beq.w	8006fda <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	f080 815d 	bcs.w	8006fda <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d34:	f000 8086 	beq.w	8006e44 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1da      	bne.n	8006d38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006da6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006daa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e1      	bne.n	8006d82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006de2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006de4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006de8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e3      	bne.n	8006dbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e14:	f023 0310 	bic.w	r3, r3, #16
 8006e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e4      	bne.n	8006e04 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fb fe36 	bl	8002ab0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8e2 	bl	8007028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e64:	e0b9      	b.n	8006fda <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80ab 	beq.w	8006fde <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80a6 	beq.w	8006fde <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e4      	bne.n	8006e92 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3308      	adds	r3, #8
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006eec:	633a      	str	r2, [r7, #48]	; 0x30
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e3      	bne.n	8006ec8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f023 0310 	bic.w	r3, r3, #16
 8006f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	461a      	mov	r2, r3
 8006f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	69b9      	ldr	r1, [r7, #24]
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	617b      	str	r3, [r7, #20]
   return(result);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e4      	bne.n	8006f14 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f866 	bl	8007028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f5c:	e03f      	b.n	8006fde <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00e      	beq.n	8006f88 <HAL_UART_IRQHandler+0x56c>
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f85d 	bl	8007040 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f86:	e02d      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00e      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01c      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
    }
    return;
 8006fb0:	e017      	b.n	8006fe2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d012      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
 8006fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fd93 	bl	8007af6 <UART_EndTransmit_IT>
    return;
 8006fd0:	e008      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006fd2:	bf00      	nop
 8006fd4:	e006      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006fd6:	bf00      	nop
 8006fd8:	e004      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006fe2:	bf00      	nop
  }

}
 8006fe4:	37e8      	adds	r7, #232	; 0xe8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop

08006fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4ba6      	ldr	r3, [pc, #664]	; (8007318 <UART_SetConfig+0x2c4>)
 8007080:	4013      	ands	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	6979      	ldr	r1, [r7, #20]
 8007088:	430b      	orrs	r3, r1
 800708a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a94      	ldr	r2, [pc, #592]	; (800731c <UART_SetConfig+0x2c8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d120      	bne.n	8007112 <UART_SetConfig+0xbe>
 80070d0:	4b93      	ldr	r3, [pc, #588]	; (8007320 <UART_SetConfig+0x2cc>)
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d816      	bhi.n	800710c <UART_SetConfig+0xb8>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <UART_SetConfig+0x90>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070f5 	.word	0x080070f5
 80070e8:	08007101 	.word	0x08007101
 80070ec:	080070fb 	.word	0x080070fb
 80070f0:	08007107 	.word	0x08007107
 80070f4:	2301      	movs	r3, #1
 80070f6:	77fb      	strb	r3, [r7, #31]
 80070f8:	e150      	b.n	800739c <UART_SetConfig+0x348>
 80070fa:	2302      	movs	r3, #2
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e14d      	b.n	800739c <UART_SetConfig+0x348>
 8007100:	2304      	movs	r3, #4
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e14a      	b.n	800739c <UART_SetConfig+0x348>
 8007106:	2308      	movs	r3, #8
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e147      	b.n	800739c <UART_SetConfig+0x348>
 800710c:	2310      	movs	r3, #16
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e144      	b.n	800739c <UART_SetConfig+0x348>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a83      	ldr	r2, [pc, #524]	; (8007324 <UART_SetConfig+0x2d0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d132      	bne.n	8007182 <UART_SetConfig+0x12e>
 800711c:	4b80      	ldr	r3, [pc, #512]	; (8007320 <UART_SetConfig+0x2cc>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	2b0c      	cmp	r3, #12
 8007128:	d828      	bhi.n	800717c <UART_SetConfig+0x128>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <UART_SetConfig+0xdc>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007165 	.word	0x08007165
 8007134:	0800717d 	.word	0x0800717d
 8007138:	0800717d 	.word	0x0800717d
 800713c:	0800717d 	.word	0x0800717d
 8007140:	08007171 	.word	0x08007171
 8007144:	0800717d 	.word	0x0800717d
 8007148:	0800717d 	.word	0x0800717d
 800714c:	0800717d 	.word	0x0800717d
 8007150:	0800716b 	.word	0x0800716b
 8007154:	0800717d 	.word	0x0800717d
 8007158:	0800717d 	.word	0x0800717d
 800715c:	0800717d 	.word	0x0800717d
 8007160:	08007177 	.word	0x08007177
 8007164:	2300      	movs	r3, #0
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e118      	b.n	800739c <UART_SetConfig+0x348>
 800716a:	2302      	movs	r3, #2
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e115      	b.n	800739c <UART_SetConfig+0x348>
 8007170:	2304      	movs	r3, #4
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e112      	b.n	800739c <UART_SetConfig+0x348>
 8007176:	2308      	movs	r3, #8
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e10f      	b.n	800739c <UART_SetConfig+0x348>
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e10c      	b.n	800739c <UART_SetConfig+0x348>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a68      	ldr	r2, [pc, #416]	; (8007328 <UART_SetConfig+0x2d4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d120      	bne.n	80071ce <UART_SetConfig+0x17a>
 800718c:	4b64      	ldr	r3, [pc, #400]	; (8007320 <UART_SetConfig+0x2cc>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007196:	2b30      	cmp	r3, #48	; 0x30
 8007198:	d013      	beq.n	80071c2 <UART_SetConfig+0x16e>
 800719a:	2b30      	cmp	r3, #48	; 0x30
 800719c:	d814      	bhi.n	80071c8 <UART_SetConfig+0x174>
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d009      	beq.n	80071b6 <UART_SetConfig+0x162>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d810      	bhi.n	80071c8 <UART_SetConfig+0x174>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <UART_SetConfig+0x15c>
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d006      	beq.n	80071bc <UART_SetConfig+0x168>
 80071ae:	e00b      	b.n	80071c8 <UART_SetConfig+0x174>
 80071b0:	2300      	movs	r3, #0
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e0f2      	b.n	800739c <UART_SetConfig+0x348>
 80071b6:	2302      	movs	r3, #2
 80071b8:	77fb      	strb	r3, [r7, #31]
 80071ba:	e0ef      	b.n	800739c <UART_SetConfig+0x348>
 80071bc:	2304      	movs	r3, #4
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e0ec      	b.n	800739c <UART_SetConfig+0x348>
 80071c2:	2308      	movs	r3, #8
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e0e9      	b.n	800739c <UART_SetConfig+0x348>
 80071c8:	2310      	movs	r3, #16
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e0e6      	b.n	800739c <UART_SetConfig+0x348>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a56      	ldr	r2, [pc, #344]	; (800732c <UART_SetConfig+0x2d8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d120      	bne.n	800721a <UART_SetConfig+0x1c6>
 80071d8:	4b51      	ldr	r3, [pc, #324]	; (8007320 <UART_SetConfig+0x2cc>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071e2:	2bc0      	cmp	r3, #192	; 0xc0
 80071e4:	d013      	beq.n	800720e <UART_SetConfig+0x1ba>
 80071e6:	2bc0      	cmp	r3, #192	; 0xc0
 80071e8:	d814      	bhi.n	8007214 <UART_SetConfig+0x1c0>
 80071ea:	2b80      	cmp	r3, #128	; 0x80
 80071ec:	d009      	beq.n	8007202 <UART_SetConfig+0x1ae>
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d810      	bhi.n	8007214 <UART_SetConfig+0x1c0>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <UART_SetConfig+0x1a8>
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d006      	beq.n	8007208 <UART_SetConfig+0x1b4>
 80071fa:	e00b      	b.n	8007214 <UART_SetConfig+0x1c0>
 80071fc:	2300      	movs	r3, #0
 80071fe:	77fb      	strb	r3, [r7, #31]
 8007200:	e0cc      	b.n	800739c <UART_SetConfig+0x348>
 8007202:	2302      	movs	r3, #2
 8007204:	77fb      	strb	r3, [r7, #31]
 8007206:	e0c9      	b.n	800739c <UART_SetConfig+0x348>
 8007208:	2304      	movs	r3, #4
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e0c6      	b.n	800739c <UART_SetConfig+0x348>
 800720e:	2308      	movs	r3, #8
 8007210:	77fb      	strb	r3, [r7, #31]
 8007212:	e0c3      	b.n	800739c <UART_SetConfig+0x348>
 8007214:	2310      	movs	r3, #16
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e0c0      	b.n	800739c <UART_SetConfig+0x348>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a44      	ldr	r2, [pc, #272]	; (8007330 <UART_SetConfig+0x2dc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d125      	bne.n	8007270 <UART_SetConfig+0x21c>
 8007224:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <UART_SetConfig+0x2cc>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007232:	d017      	beq.n	8007264 <UART_SetConfig+0x210>
 8007234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007238:	d817      	bhi.n	800726a <UART_SetConfig+0x216>
 800723a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723e:	d00b      	beq.n	8007258 <UART_SetConfig+0x204>
 8007240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007244:	d811      	bhi.n	800726a <UART_SetConfig+0x216>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <UART_SetConfig+0x1fe>
 800724a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724e:	d006      	beq.n	800725e <UART_SetConfig+0x20a>
 8007250:	e00b      	b.n	800726a <UART_SetConfig+0x216>
 8007252:	2300      	movs	r3, #0
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e0a1      	b.n	800739c <UART_SetConfig+0x348>
 8007258:	2302      	movs	r3, #2
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e09e      	b.n	800739c <UART_SetConfig+0x348>
 800725e:	2304      	movs	r3, #4
 8007260:	77fb      	strb	r3, [r7, #31]
 8007262:	e09b      	b.n	800739c <UART_SetConfig+0x348>
 8007264:	2308      	movs	r3, #8
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e098      	b.n	800739c <UART_SetConfig+0x348>
 800726a:	2310      	movs	r3, #16
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e095      	b.n	800739c <UART_SetConfig+0x348>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a2f      	ldr	r2, [pc, #188]	; (8007334 <UART_SetConfig+0x2e0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d125      	bne.n	80072c6 <UART_SetConfig+0x272>
 800727a:	4b29      	ldr	r3, [pc, #164]	; (8007320 <UART_SetConfig+0x2cc>)
 800727c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007288:	d017      	beq.n	80072ba <UART_SetConfig+0x266>
 800728a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800728e:	d817      	bhi.n	80072c0 <UART_SetConfig+0x26c>
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007294:	d00b      	beq.n	80072ae <UART_SetConfig+0x25a>
 8007296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729a:	d811      	bhi.n	80072c0 <UART_SetConfig+0x26c>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <UART_SetConfig+0x254>
 80072a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a4:	d006      	beq.n	80072b4 <UART_SetConfig+0x260>
 80072a6:	e00b      	b.n	80072c0 <UART_SetConfig+0x26c>
 80072a8:	2301      	movs	r3, #1
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e076      	b.n	800739c <UART_SetConfig+0x348>
 80072ae:	2302      	movs	r3, #2
 80072b0:	77fb      	strb	r3, [r7, #31]
 80072b2:	e073      	b.n	800739c <UART_SetConfig+0x348>
 80072b4:	2304      	movs	r3, #4
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e070      	b.n	800739c <UART_SetConfig+0x348>
 80072ba:	2308      	movs	r3, #8
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e06d      	b.n	800739c <UART_SetConfig+0x348>
 80072c0:	2310      	movs	r3, #16
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e06a      	b.n	800739c <UART_SetConfig+0x348>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <UART_SetConfig+0x2e4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d138      	bne.n	8007342 <UART_SetConfig+0x2ee>
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <UART_SetConfig+0x2cc>)
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80072da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072de:	d017      	beq.n	8007310 <UART_SetConfig+0x2bc>
 80072e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072e4:	d82a      	bhi.n	800733c <UART_SetConfig+0x2e8>
 80072e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ea:	d00b      	beq.n	8007304 <UART_SetConfig+0x2b0>
 80072ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f0:	d824      	bhi.n	800733c <UART_SetConfig+0x2e8>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <UART_SetConfig+0x2aa>
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d006      	beq.n	800730a <UART_SetConfig+0x2b6>
 80072fc:	e01e      	b.n	800733c <UART_SetConfig+0x2e8>
 80072fe:	2300      	movs	r3, #0
 8007300:	77fb      	strb	r3, [r7, #31]
 8007302:	e04b      	b.n	800739c <UART_SetConfig+0x348>
 8007304:	2302      	movs	r3, #2
 8007306:	77fb      	strb	r3, [r7, #31]
 8007308:	e048      	b.n	800739c <UART_SetConfig+0x348>
 800730a:	2304      	movs	r3, #4
 800730c:	77fb      	strb	r3, [r7, #31]
 800730e:	e045      	b.n	800739c <UART_SetConfig+0x348>
 8007310:	2308      	movs	r3, #8
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e042      	b.n	800739c <UART_SetConfig+0x348>
 8007316:	bf00      	nop
 8007318:	efff69f3 	.word	0xefff69f3
 800731c:	40011000 	.word	0x40011000
 8007320:	40023800 	.word	0x40023800
 8007324:	40004400 	.word	0x40004400
 8007328:	40004800 	.word	0x40004800
 800732c:	40004c00 	.word	0x40004c00
 8007330:	40005000 	.word	0x40005000
 8007334:	40011400 	.word	0x40011400
 8007338:	40007800 	.word	0x40007800
 800733c:	2310      	movs	r3, #16
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e02c      	b.n	800739c <UART_SetConfig+0x348>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a72      	ldr	r2, [pc, #456]	; (8007510 <UART_SetConfig+0x4bc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d125      	bne.n	8007398 <UART_SetConfig+0x344>
 800734c:	4b71      	ldr	r3, [pc, #452]	; (8007514 <UART_SetConfig+0x4c0>)
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007352:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007356:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800735a:	d017      	beq.n	800738c <UART_SetConfig+0x338>
 800735c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007360:	d817      	bhi.n	8007392 <UART_SetConfig+0x33e>
 8007362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007366:	d00b      	beq.n	8007380 <UART_SetConfig+0x32c>
 8007368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736c:	d811      	bhi.n	8007392 <UART_SetConfig+0x33e>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <UART_SetConfig+0x326>
 8007372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007376:	d006      	beq.n	8007386 <UART_SetConfig+0x332>
 8007378:	e00b      	b.n	8007392 <UART_SetConfig+0x33e>
 800737a:	2300      	movs	r3, #0
 800737c:	77fb      	strb	r3, [r7, #31]
 800737e:	e00d      	b.n	800739c <UART_SetConfig+0x348>
 8007380:	2302      	movs	r3, #2
 8007382:	77fb      	strb	r3, [r7, #31]
 8007384:	e00a      	b.n	800739c <UART_SetConfig+0x348>
 8007386:	2304      	movs	r3, #4
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e007      	b.n	800739c <UART_SetConfig+0x348>
 800738c:	2308      	movs	r3, #8
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e004      	b.n	800739c <UART_SetConfig+0x348>
 8007392:	2310      	movs	r3, #16
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e001      	b.n	800739c <UART_SetConfig+0x348>
 8007398:	2310      	movs	r3, #16
 800739a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a4:	d15b      	bne.n	800745e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80073a6:	7ffb      	ldrb	r3, [r7, #31]
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d828      	bhi.n	80073fe <UART_SetConfig+0x3aa>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <UART_SetConfig+0x360>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073e9 	.word	0x080073e9
 80073c0:	080073ff 	.word	0x080073ff
 80073c4:	080073ef 	.word	0x080073ef
 80073c8:	080073ff 	.word	0x080073ff
 80073cc:	080073ff 	.word	0x080073ff
 80073d0:	080073ff 	.word	0x080073ff
 80073d4:	080073f7 	.word	0x080073f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fe faf4 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 80073dc:	61b8      	str	r0, [r7, #24]
        break;
 80073de:	e013      	b.n	8007408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e0:	f7fe fb04 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 80073e4:	61b8      	str	r0, [r7, #24]
        break;
 80073e6:	e00f      	b.n	8007408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e8:	4b4b      	ldr	r3, [pc, #300]	; (8007518 <UART_SetConfig+0x4c4>)
 80073ea:	61bb      	str	r3, [r7, #24]
        break;
 80073ec:	e00c      	b.n	8007408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ee:	f7fe fa17 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80073f2:	61b8      	str	r0, [r7, #24]
        break;
 80073f4:	e008      	b.n	8007408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fa:	61bb      	str	r3, [r7, #24]
        break;
 80073fc:	e004      	b.n	8007408 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	77bb      	strb	r3, [r7, #30]
        break;
 8007406:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d074      	beq.n	80074f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	005a      	lsls	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	441a      	add	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007422:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2b0f      	cmp	r3, #15
 8007428:	d916      	bls.n	8007458 <UART_SetConfig+0x404>
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007430:	d212      	bcs.n	8007458 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	b29b      	uxth	r3, r3
 8007436:	f023 030f 	bic.w	r3, r3, #15
 800743a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	b29b      	uxth	r3, r3
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	b29a      	uxth	r2, r3
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	4313      	orrs	r3, r2
 800744c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	89fa      	ldrh	r2, [r7, #14]
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	e04f      	b.n	80074f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	77bb      	strb	r3, [r7, #30]
 800745c:	e04c      	b.n	80074f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800745e:	7ffb      	ldrb	r3, [r7, #31]
 8007460:	2b08      	cmp	r3, #8
 8007462:	d828      	bhi.n	80074b6 <UART_SetConfig+0x462>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <UART_SetConfig+0x418>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	080074b7 	.word	0x080074b7
 800747c:	080074a7 	.word	0x080074a7
 8007480:	080074b7 	.word	0x080074b7
 8007484:	080074b7 	.word	0x080074b7
 8007488:	080074b7 	.word	0x080074b7
 800748c:	080074af 	.word	0x080074af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007490:	f7fe fa98 	bl	80059c4 <HAL_RCC_GetPCLK1Freq>
 8007494:	61b8      	str	r0, [r7, #24]
        break;
 8007496:	e013      	b.n	80074c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007498:	f7fe faa8 	bl	80059ec <HAL_RCC_GetPCLK2Freq>
 800749c:	61b8      	str	r0, [r7, #24]
        break;
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a0:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <UART_SetConfig+0x4c4>)
 80074a2:	61bb      	str	r3, [r7, #24]
        break;
 80074a4:	e00c      	b.n	80074c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a6:	f7fe f9bb 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80074aa:	61b8      	str	r0, [r7, #24]
        break;
 80074ac:	e008      	b.n	80074c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074b2:	61bb      	str	r3, [r7, #24]
        break;
 80074b4:	e004      	b.n	80074c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	77bb      	strb	r3, [r7, #30]
        break;
 80074be:	bf00      	nop
    }

    if (pclk != 0U)
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	085a      	lsrs	r2, r3, #1
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b0f      	cmp	r3, #15
 80074de:	d909      	bls.n	80074f4 <UART_SetConfig+0x4a0>
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e6:	d205      	bcs.n	80074f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e001      	b.n	80074f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007504:	7fbb      	ldrb	r3, [r7, #30]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3720      	adds	r7, #32
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40007c00 	.word	0x40007c00
 8007514:	40023800 	.word	0x40023800
 8007518:	00f42400 	.word	0x00f42400

0800751c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01a      	beq.n	8007632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761a:	d10a      	bne.n	8007632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	430a      	orrs	r2, r1
 8007630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]
  }
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af02      	add	r7, sp, #8
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007670:	f7fa fff2 	bl	8002658 <HAL_GetTick>
 8007674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b08      	cmp	r3, #8
 8007682:	d10e      	bne.n	80076a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f831 	bl	80076fa <UART_WaitOnFlagUntilTimeout>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e027      	b.n	80076f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d10e      	bne.n	80076ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f81b 	bl	80076fa <UART_WaitOnFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e011      	b.n	80076f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b09c      	sub	sp, #112	; 0x70
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4613      	mov	r3, r2
 8007708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770a:	e0a7      	b.n	800785c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	f000 80a3 	beq.w	800785c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007716:	f7fa ff9f 	bl	8002658 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <UART_WaitOnFlagUntilTimeout+0x32>
 8007726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007728:	2b00      	cmp	r3, #0
 800772a:	d13f      	bne.n	80077ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800773a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007740:	667b      	str	r3, [r7, #100]	; 0x64
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800774c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e6      	bne.n	800772c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	663b      	str	r3, [r7, #96]	; 0x60
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800777e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800778c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e5      	bne.n	800775e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2220      	movs	r2, #32
 8007796:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2220      	movs	r2, #32
 800779c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e068      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d050      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c8:	d148      	bne.n	800785c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
 80077f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e6      	bne.n	80077d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	613b      	str	r3, [r7, #16]
   return(result);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f023 0301 	bic.w	r3, r3, #1
 800781c:	66bb      	str	r3, [r7, #104]	; 0x68
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007826:	623a      	str	r2, [r7, #32]
 8007828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	69f9      	ldr	r1, [r7, #28]
 800782c:	6a3a      	ldr	r2, [r7, #32]
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	61bb      	str	r3, [r7, #24]
   return(result);
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e5      	bne.n	8007806 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e010      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4013      	ands	r3, r2
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	429a      	cmp	r2, r3
 8007878:	f43f af48 	beq.w	800770c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3770      	adds	r7, #112	; 0x70
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007886:	b480      	push	{r7}
 8007888:	b089      	sub	sp, #36	; 0x24
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	60bb      	str	r3, [r7, #8]
   return(result);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6979      	ldr	r1, [r7, #20]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80078c6:	bf00      	nop
 80078c8:	3724      	adds	r7, #36	; 0x24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b095      	sub	sp, #84	; 0x54
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f8:	643b      	str	r3, [r7, #64]	; 0x40
 80078fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e6      	bne.n	80078da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	61fb      	str	r3, [r7, #28]
   return(result);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	64bb      	str	r3, [r7, #72]	; 0x48
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3308      	adds	r3, #8
 800792a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007934:	e841 2300 	strex	r3, r2, [r1]
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e5      	bne.n	800790c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007944:	2b01      	cmp	r3, #1
 8007946:	d118      	bne.n	800797a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	60bb      	str	r3, [r7, #8]
   return(result);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f023 0310 	bic.w	r3, r3, #16
 800795c:	647b      	str	r3, [r7, #68]	; 0x44
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007966:	61bb      	str	r3, [r7, #24]
 8007968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6979      	ldr	r1, [r7, #20]
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	613b      	str	r3, [r7, #16]
   return(result);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e6      	bne.n	8007948 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800798e:	bf00      	nop
 8007990:	3754      	adds	r7, #84	; 0x54
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b090      	sub	sp, #64	; 0x40
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b0:	d037      	beq.n	8007a22 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80079b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b4:	2200      	movs	r2, #0
 80079b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80079d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079da:	633a      	str	r2, [r7, #48]	; 0x30
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e5      	bne.n	80079ba <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a02:	637b      	str	r3, [r7, #52]	; 0x34
 8007a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e6      	bne.n	80079ee <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a20:	e002      	b.n	8007a28 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007a22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a24:	f7ff fae2 	bl	8006fec <HAL_UART_TxCpltCallback>
}
 8007a28:	bf00      	nop
 8007a2a:	3740      	adds	r7, #64	; 0x40
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff fade 	bl	8007000 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d109      	bne.n	8007a8a <UART_DMAError+0x3e>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b21      	cmp	r3, #33	; 0x21
 8007a7a:	d106      	bne.n	8007a8a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007a84:	6978      	ldr	r0, [r7, #20]
 8007a86:	f7ff fefe 	bl	8007886 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d109      	bne.n	8007aac <UART_DMAError+0x60>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b22      	cmp	r3, #34	; 0x22
 8007a9c:	d106      	bne.n	8007aac <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007aa6:	6978      	ldr	r0, [r7, #20]
 8007aa8:	f7ff ff13 	bl	80078d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab2:	f043 0210 	orr.w	r2, r3, #16
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007abc:	6978      	ldr	r0, [r7, #20]
 8007abe:	f7ff faa9 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f7ff fa93 	bl	8007014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b088      	sub	sp, #32
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6979      	ldr	r1, [r7, #20]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e6      	bne.n	8007afe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fa55 	bl	8006fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b42:	bf00      	nop
 8007b44:	3720      	adds	r7, #32
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007b4c:	b5b0      	push	{r4, r5, r7, lr}
 8007b4e:	b08c      	sub	sp, #48	; 0x30
 8007b50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007b52:	4b8f      	ldr	r3, [pc, #572]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007b54:	22c0      	movs	r2, #192	; 0xc0
 8007b56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007b58:	4b8d      	ldr	r3, [pc, #564]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007b5a:	22a8      	movs	r2, #168	; 0xa8
 8007b5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007b5e:	4b8c      	ldr	r3, [pc, #560]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8007b64:	4b8a      	ldr	r3, [pc, #552]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007b66:	220a      	movs	r2, #10
 8007b68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007b6a:	4b8a      	ldr	r3, [pc, #552]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007b6c:	22ff      	movs	r2, #255	; 0xff
 8007b6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007b70:	4b88      	ldr	r3, [pc, #544]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007b72:	22ff      	movs	r2, #255	; 0xff
 8007b74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007b76:	4b87      	ldr	r3, [pc, #540]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007b78:	22ff      	movs	r2, #255	; 0xff
 8007b7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007b7c:	4b85      	ldr	r3, [pc, #532]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007b82:	4b85      	ldr	r3, [pc, #532]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007b84:	22c0      	movs	r2, #192	; 0xc0
 8007b86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007b88:	4b83      	ldr	r3, [pc, #524]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007b8a:	22a8      	movs	r2, #168	; 0xa8
 8007b8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007b8e:	4b82      	ldr	r3, [pc, #520]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007b94:	4b80      	ldr	r3, [pc, #512]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f007 feb1 	bl	800f904 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007ba2:	4b7b      	ldr	r3, [pc, #492]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	061a      	lsls	r2, r3, #24
 8007ba8:	4b79      	ldr	r3, [pc, #484]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	041b      	lsls	r3, r3, #16
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	4b77      	ldr	r3, [pc, #476]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bb2:	789b      	ldrb	r3, [r3, #2]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	4a75      	ldr	r2, [pc, #468]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bba:	78d2      	ldrb	r2, [r2, #3]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	061a      	lsls	r2, r3, #24
 8007bc0:	4b73      	ldr	r3, [pc, #460]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	0619      	lsls	r1, r3, #24
 8007bc6:	4b72      	ldr	r3, [pc, #456]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	4319      	orrs	r1, r3
 8007bce:	4b70      	ldr	r3, [pc, #448]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bd0:	789b      	ldrb	r3, [r3, #2]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	496e      	ldr	r1, [pc, #440]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bd8:	78c9      	ldrb	r1, [r1, #3]
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007be2:	431a      	orrs	r2, r3
 8007be4:	4b6a      	ldr	r3, [pc, #424]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	0619      	lsls	r1, r3, #24
 8007bea:	4b69      	ldr	r3, [pc, #420]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	041b      	lsls	r3, r3, #16
 8007bf0:	4319      	orrs	r1, r3
 8007bf2:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bf4:	789b      	ldrb	r3, [r3, #2]
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	4965      	ldr	r1, [pc, #404]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007bfc:	78c9      	ldrb	r1, [r1, #3]
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c06:	431a      	orrs	r2, r3
 8007c08:	4b61      	ldr	r3, [pc, #388]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	0619      	lsls	r1, r3, #24
 8007c0e:	4b60      	ldr	r3, [pc, #384]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	041b      	lsls	r3, r3, #16
 8007c14:	4319      	orrs	r1, r3
 8007c16:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007c18:	789b      	ldrb	r3, [r3, #2]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	495c      	ldr	r1, [pc, #368]	; (8007d90 <MX_LWIP_Init+0x244>)
 8007c20:	78c9      	ldrb	r1, [r1, #3]
 8007c22:	430b      	orrs	r3, r1
 8007c24:	0e1b      	lsrs	r3, r3, #24
 8007c26:	4313      	orrs	r3, r2
 8007c28:	4a5c      	ldr	r2, [pc, #368]	; (8007d9c <MX_LWIP_Init+0x250>)
 8007c2a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007c2c:	4b59      	ldr	r3, [pc, #356]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	061a      	lsls	r2, r3, #24
 8007c32:	4b58      	ldr	r3, [pc, #352]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	041b      	lsls	r3, r3, #16
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	4b56      	ldr	r3, [pc, #344]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c3c:	789b      	ldrb	r3, [r3, #2]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	4313      	orrs	r3, r2
 8007c42:	4a54      	ldr	r2, [pc, #336]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c44:	78d2      	ldrb	r2, [r2, #3]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	061a      	lsls	r2, r3, #24
 8007c4a:	4b52      	ldr	r3, [pc, #328]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	0619      	lsls	r1, r3, #24
 8007c50:	4b50      	ldr	r3, [pc, #320]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	4319      	orrs	r1, r3
 8007c58:	4b4e      	ldr	r3, [pc, #312]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c5a:	789b      	ldrb	r3, [r3, #2]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	494c      	ldr	r1, [pc, #304]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c62:	78c9      	ldrb	r1, [r1, #3]
 8007c64:	430b      	orrs	r3, r1
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	4b49      	ldr	r3, [pc, #292]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	0619      	lsls	r1, r3, #24
 8007c74:	4b47      	ldr	r3, [pc, #284]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	041b      	lsls	r3, r3, #16
 8007c7a:	4319      	orrs	r1, r3
 8007c7c:	4b45      	ldr	r3, [pc, #276]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c7e:	789b      	ldrb	r3, [r3, #2]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	430b      	orrs	r3, r1
 8007c84:	4943      	ldr	r1, [pc, #268]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c86:	78c9      	ldrb	r1, [r1, #3]
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	0a1b      	lsrs	r3, r3, #8
 8007c8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c90:	431a      	orrs	r2, r3
 8007c92:	4b40      	ldr	r3, [pc, #256]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	0619      	lsls	r1, r3, #24
 8007c98:	4b3e      	ldr	r3, [pc, #248]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	041b      	lsls	r3, r3, #16
 8007c9e:	4319      	orrs	r1, r3
 8007ca0:	4b3c      	ldr	r3, [pc, #240]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007ca2:	789b      	ldrb	r3, [r3, #2]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	493a      	ldr	r1, [pc, #232]	; (8007d94 <MX_LWIP_Init+0x248>)
 8007caa:	78c9      	ldrb	r1, [r1, #3]
 8007cac:	430b      	orrs	r3, r1
 8007cae:	0e1b      	lsrs	r3, r3, #24
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	4a3b      	ldr	r2, [pc, #236]	; (8007da0 <MX_LWIP_Init+0x254>)
 8007cb4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007cb6:	4b38      	ldr	r3, [pc, #224]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	061a      	lsls	r2, r3, #24
 8007cbc:	4b36      	ldr	r3, [pc, #216]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	4b34      	ldr	r3, [pc, #208]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cc6:	789b      	ldrb	r3, [r3, #2]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	4a32      	ldr	r2, [pc, #200]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cce:	78d2      	ldrb	r2, [r2, #3]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	061a      	lsls	r2, r3, #24
 8007cd4:	4b30      	ldr	r3, [pc, #192]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	0619      	lsls	r1, r3, #24
 8007cda:	4b2f      	ldr	r3, [pc, #188]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	4319      	orrs	r1, r3
 8007ce2:	4b2d      	ldr	r3, [pc, #180]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007ce4:	789b      	ldrb	r3, [r3, #2]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	492b      	ldr	r1, [pc, #172]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cec:	78c9      	ldrb	r1, [r1, #3]
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	0619      	lsls	r1, r3, #24
 8007cfe:	4b26      	ldr	r3, [pc, #152]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	041b      	lsls	r3, r3, #16
 8007d04:	4319      	orrs	r1, r3
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d08:	789b      	ldrb	r3, [r3, #2]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	4922      	ldr	r1, [pc, #136]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d10:	78c9      	ldrb	r1, [r1, #3]
 8007d12:	430b      	orrs	r3, r1
 8007d14:	0a1b      	lsrs	r3, r3, #8
 8007d16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	0619      	lsls	r1, r3, #24
 8007d22:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	041b      	lsls	r3, r3, #16
 8007d28:	4319      	orrs	r1, r3
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d2c:	789b      	ldrb	r3, [r3, #2]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	430b      	orrs	r3, r1
 8007d32:	4919      	ldr	r1, [pc, #100]	; (8007d98 <MX_LWIP_Init+0x24c>)
 8007d34:	78c9      	ldrb	r1, [r1, #3]
 8007d36:	430b      	orrs	r3, r1
 8007d38:	0e1b      	lsrs	r3, r3, #24
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	4a19      	ldr	r2, [pc, #100]	; (8007da4 <MX_LWIP_Init+0x258>)
 8007d3e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007d40:	4b19      	ldr	r3, [pc, #100]	; (8007da8 <MX_LWIP_Init+0x25c>)
 8007d42:	9302      	str	r3, [sp, #8]
 8007d44:	4b19      	ldr	r3, [pc, #100]	; (8007dac <MX_LWIP_Init+0x260>)
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <MX_LWIP_Init+0x258>)
 8007d4e:	4a14      	ldr	r2, [pc, #80]	; (8007da0 <MX_LWIP_Init+0x254>)
 8007d50:	4912      	ldr	r1, [pc, #72]	; (8007d9c <MX_LWIP_Init+0x250>)
 8007d52:	4817      	ldr	r0, [pc, #92]	; (8007db0 <MX_LWIP_Init+0x264>)
 8007d54:	f008 fba0 	bl	8010498 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007d58:	4815      	ldr	r0, [pc, #84]	; (8007db0 <MX_LWIP_Init+0x264>)
 8007d5a:	f008 fd4f 	bl	80107fc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007d5e:	4814      	ldr	r0, [pc, #80]	; (8007db0 <MX_LWIP_Init+0x264>)
 8007d60:	f008 fd5c 	bl	801081c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007d64:	4913      	ldr	r1, [pc, #76]	; (8007db4 <MX_LWIP_Init+0x268>)
 8007d66:	4812      	ldr	r0, [pc, #72]	; (8007db0 <MX_LWIP_Init+0x264>)
 8007d68:	f008 fe5a 	bl	8010a20 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007d6c:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <MX_LWIP_Init+0x26c>)
 8007d6e:	1d3c      	adds	r4, r7, #4
 8007d70:	461d      	mov	r5, r3
 8007d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007d7e:	1d3b      	adds	r3, r7, #4
 8007d80:	490b      	ldr	r1, [pc, #44]	; (8007db0 <MX_LWIP_Init+0x264>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fdaf 	bl	80088e6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007d88:	bf00      	nop
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d90:	20002d00 	.word	0x20002d00
 8007d94:	20002d04 	.word	0x20002d04
 8007d98:	20002d08 	.word	0x20002d08
 8007d9c:	20002cf4 	.word	0x20002cf4
 8007da0:	20002cf8 	.word	0x20002cf8
 8007da4:	20002cfc 	.word	0x20002cfc
 8007da8:	0800f815 	.word	0x0800f815
 8007dac:	0800831d 	.word	0x0800831d
 8007db0:	20002cc0 	.word	0x20002cc0
 8007db4:	08007dbd 	.word	0x08007dbd
 8007db8:	0801c3d8 	.word	0x0801c3d8

08007dbc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007de2:	2320      	movs	r3, #32
 8007de4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007de6:	f3bf 8f4f 	dsb	sy
}
 8007dea:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007dec:	e00b      	b.n	8007e06 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007dee:	4a0d      	ldr	r2, [pc, #52]	; (8007e24 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dcf0      	bgt.n	8007dee <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007e0c:	f3bf 8f4f 	dsb	sy
}
 8007e10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e12:	f3bf 8f6f 	isb	sy
}
 8007e16:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	e000ed00 	.word	0xe000ed00

08007e28 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <HAL_ETH_RxCpltCallback+0x1c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 fedf 	bl	8008bf8 <osSemaphoreRelease>
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20007698 	.word	0x20007698

08007e48 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007e50:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <HAL_ETH_TxCpltCallback+0x1c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fecf 	bl	8008bf8 <osSemaphoreRelease>
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	2000769c 	.word	0x2000769c

08007e68 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7fb ff57 	bl	8003d24 <HAL_ETH_GetDMAError>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	d104      	bne.n	8007e8a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <HAL_ETH_ErrorCallback+0x2c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 feb7 	bl	8008bf8 <osSemaphoreRelease>
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20007698 	.word	0x20007698

08007e98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e98:	b5b0      	push	{r4, r5, r7, lr}
 8007e9a:	b0b4      	sub	sp, #208	; 0xd0
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t duplex, speed = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int32_t PHYLinkState = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8007eb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007eb6:	2264      	movs	r2, #100	; 0x64
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f013 faa2 	bl	801b404 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007ec0:	4b9b      	ldr	r3, [pc, #620]	; (8008130 <low_level_init+0x298>)
 8007ec2:	4a9c      	ldr	r2, [pc, #624]	; (8008134 <low_level_init+0x29c>)
 8007ec4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  MACAddr[1] = 0x80;
 8007ecc:	2380      	movs	r3, #128	; 0x80
 8007ece:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  MACAddr[2] = 0xE1;
 8007ed2:	23e1      	movs	r3, #225	; 0xe1
 8007ed4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  MACAddr[3] = 0x00;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  MACAddr[4] = 0x00;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  MACAddr[5] = 0x00;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8007eea:	4a91      	ldr	r2, [pc, #580]	; (8008130 <low_level_init+0x298>)
 8007eec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ef0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007ef2:	4b8f      	ldr	r3, [pc, #572]	; (8008130 <low_level_init+0x298>)
 8007ef4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007ef8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007efa:	4b8d      	ldr	r3, [pc, #564]	; (8008130 <low_level_init+0x298>)
 8007efc:	4a8e      	ldr	r2, [pc, #568]	; (8008138 <low_level_init+0x2a0>)
 8007efe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007f00:	4b8b      	ldr	r3, [pc, #556]	; (8008130 <low_level_init+0x298>)
 8007f02:	4a8e      	ldr	r2, [pc, #568]	; (800813c <low_level_init+0x2a4>)
 8007f04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007f06:	4b8a      	ldr	r3, [pc, #552]	; (8008130 <low_level_init+0x298>)
 8007f08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007f0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007f0e:	4888      	ldr	r0, [pc, #544]	; (8008130 <low_level_init+0x298>)
 8007f10:	f7fb f8ca 	bl	80030a8 <HAL_ETH_Init>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007f1a:	2238      	movs	r2, #56	; 0x38
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4888      	ldr	r0, [pc, #544]	; (8008140 <low_level_init+0x2a8>)
 8007f20:	f013 fa70 	bl	801b404 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007f24:	4b86      	ldr	r3, [pc, #536]	; (8008140 <low_level_init+0x2a8>)
 8007f26:	2221      	movs	r2, #33	; 0x21
 8007f28:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007f2a:	4b85      	ldr	r3, [pc, #532]	; (8008140 <low_level_init+0x2a8>)
 8007f2c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007f30:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007f32:	4b83      	ldr	r3, [pc, #524]	; (8008140 <low_level_init+0x2a8>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007f38:	4882      	ldr	r0, [pc, #520]	; (8008144 <low_level_init+0x2ac>)
 8007f3a:	f008 f967 	bl	801020c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2206      	movs	r2, #6
 8007f42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f46:	4b7a      	ldr	r3, [pc, #488]	; (8008130 <low_level_init+0x298>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f52:	4b77      	ldr	r3, [pc, #476]	; (8008130 <low_level_init+0x298>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	785a      	ldrb	r2, [r3, #1]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f5e:	4b74      	ldr	r3, [pc, #464]	; (8008130 <low_level_init+0x298>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	789a      	ldrb	r2, [r3, #2]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f6a:	4b71      	ldr	r3, [pc, #452]	; (8008130 <low_level_init+0x298>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	78da      	ldrb	r2, [r3, #3]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f76:	4b6e      	ldr	r3, [pc, #440]	; (8008130 <low_level_init+0x298>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	791a      	ldrb	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f82:	4b6b      	ldr	r3, [pc, #428]	; (8008130 <low_level_init+0x298>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	795a      	ldrb	r2, [r3, #5]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f94:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f9c:	f043 030a 	orr.w	r3, r3, #10
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fac:	2300      	movs	r3, #0
 8007fae:	653b      	str	r3, [r7, #80]	; 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8007fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fd9e 	bl	8008af8 <osSemaphoreCreate>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	4a62      	ldr	r2, [pc, #392]	; (8008148 <low_level_init+0x2b0>)
 8007fc0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8007fca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fce:	2101      	movs	r1, #1
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fd91 	bl	8008af8 <osSemaphoreCreate>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4a5c      	ldr	r2, [pc, #368]	; (800814c <low_level_init+0x2b4>)
 8007fda:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8007fdc:	4b5a      	ldr	r3, [pc, #360]	; (8008148 <low_level_init+0x2b0>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fdba 	bl	8008b5c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8007fe8:	4b58      	ldr	r3, [pc, #352]	; (800814c <low_level_init+0x2b4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 fdb4 	bl	8008b5c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007ff4:	4b56      	ldr	r3, [pc, #344]	; (8008150 <low_level_init+0x2b8>)
 8007ff6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007ffa:	461d      	mov	r5, r3
 8007ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008000:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008004:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fc69 	bl	80088e6 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008014:	494f      	ldr	r1, [pc, #316]	; (8008154 <low_level_init+0x2bc>)
 8008016:	4850      	ldr	r0, [pc, #320]	; (8008158 <low_level_init+0x2c0>)
 8008018:	f7fa f99b 	bl	8002352 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800801c:	484e      	ldr	r0, [pc, #312]	; (8008158 <low_level_init+0x2c0>)
 800801e:	f7fa f9ca 	bl	80023b6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008022:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d165      	bne.n	80080f6 <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800802a:	484b      	ldr	r0, [pc, #300]	; (8008158 <low_level_init+0x2c0>)
 800802c:	f7fa fa6b 	bl	8002506 <LAN8742_GetLinkState>
 8008030:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008038:	2b01      	cmp	r3, #1
 800803a:	dc06      	bgt.n	800804a <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f008 fcbf 	bl	80109c0 <netif_set_link_down>
      netif_set_down(netif);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f008 fc56 	bl	80108f4 <netif_set_down>
 8008048:	e057      	b.n	80080fa <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 800804a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800804e:	3b02      	subs	r3, #2
 8008050:	2b03      	cmp	r3, #3
 8008052:	d82b      	bhi.n	80080ac <low_level_init+0x214>
 8008054:	a201      	add	r2, pc, #4	; (adr r2, 800805c <low_level_init+0x1c4>)
 8008056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805a:	bf00      	nop
 800805c:	0800806d 	.word	0x0800806d
 8008060:	0800807f 	.word	0x0800807f
 8008064:	0800808f 	.word	0x0800808f
 8008068:	0800809f 	.word	0x0800809f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800806c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008070:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8008074:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800807c:	e01f      	b.n	80080be <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800807e:	2300      	movs	r3, #0
 8008080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8008084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800808c:	e017      	b.n	80080be <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800808e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 8008096:	2300      	movs	r3, #0
 8008098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800809c:	e00f      	b.n	80080be <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800809e:	2300      	movs	r3, #0
 80080a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 80080a4:	2300      	movs	r3, #0
 80080a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 80080aa:	e008      	b.n	80080be <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80080ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 80080b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80080b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 80080bc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80080be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80080c2:	4619      	mov	r1, r3
 80080c4:	481a      	ldr	r0, [pc, #104]	; (8008130 <low_level_init+0x298>)
 80080c6:	f7fb fcd3 	bl	8003a70 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80080ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080ce:	677b      	str	r3, [r7, #116]	; 0x74
    MACConf.Speed = speed;
 80080d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080d4:	673b      	str	r3, [r7, #112]	; 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80080d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80080da:	4619      	mov	r1, r3
 80080dc:	4814      	ldr	r0, [pc, #80]	; (8008130 <low_level_init+0x298>)
 80080de:	f7fb fdb1 	bl	8003c44 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80080e2:	4813      	ldr	r0, [pc, #76]	; (8008130 <low_level_init+0x298>)
 80080e4:	f7fb f85c 	bl	80031a0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f008 fb97 	bl	801081c <netif_set_up>
    netif_set_link_up(netif);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f008 fc32 	bl	8010958 <netif_set_link_up>
 80080f4:	e001      	b.n	80080fa <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 80080f6:	f7f9 f823 	bl	8001140 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 80080fa:	f7fa fadd 	bl	80026b8 <HAL_GetREVID>
 80080fe:	4603      	mov	r3, r0
 8008100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008104:	d10f      	bne.n	8008126 <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8008106:	4b15      	ldr	r3, [pc, #84]	; (800815c <low_level_init+0x2c4>)
 8008108:	f107 040c 	add.w	r4, r7, #12
 800810c:	461d      	mov	r5, r3
 800810e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800811a:	f107 030c 	add.w	r3, r7, #12
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fbe0 	bl	80088e6 <osThreadCreate>
  }
}
 8008126:	bf00      	nop
 8008128:	37d0      	adds	r7, #208	; 0xd0
 800812a:	46bd      	mov	sp, r7
 800812c:	bdb0      	pop	{r4, r5, r7, pc}
 800812e:	bf00      	nop
 8008130:	200076a0 	.word	0x200076a0
 8008134:	40028000 	.word	0x40028000
 8008138:	2000012c 	.word	0x2000012c
 800813c:	2000008c 	.word	0x2000008c
 8008140:	20007750 	.word	0x20007750
 8008144:	0801fd60 	.word	0x0801fd60
 8008148:	20007698 	.word	0x20007698
 800814c:	2000769c 	.word	0x2000769c
 8008150:	0801c3fc 	.word	0x0801c3fc
 8008154:	2000000c 	.word	0x2000000c
 8008158:	20007788 	.word	0x20007788
 800815c:	0801c428 	.word	0x0801c428

08008160 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b092      	sub	sp, #72	; 0x48
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008178:	f107 030c 	add.w	r3, r7, #12
 800817c:	2230      	movs	r2, #48	; 0x30
 800817e:	2100      	movs	r1, #0
 8008180:	4618      	mov	r0, r3
 8008182:	f013 f93f 	bl	801b404 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008186:	f107 030c 	add.w	r3, r7, #12
 800818a:	2230      	movs	r2, #48	; 0x30
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f013 f938 	bl	801b404 <memset>

  for(q = p; q != NULL; q = q->next)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	643b      	str	r3, [r7, #64]	; 0x40
 8008198:	e045      	b.n	8008226 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800819a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800819c:	2b03      	cmp	r3, #3
 800819e:	d902      	bls.n	80081a6 <low_level_output+0x46>
      return ERR_IF;
 80081a0:	f06f 030b 	mvn.w	r3, #11
 80081a4:	e06c      	b.n	8008280 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80081a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a8:	6859      	ldr	r1, [r3, #4]
 80081aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ac:	4613      	mov	r3, r2
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	4413      	add	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	3348      	adds	r3, #72	; 0x48
 80081b6:	443b      	add	r3, r7
 80081b8:	3b3c      	subs	r3, #60	; 0x3c
 80081ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80081bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	4619      	mov	r1, r3
 80081c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081c4:	4613      	mov	r3, r2
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	4413      	add	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	3348      	adds	r3, #72	; 0x48
 80081ce:	443b      	add	r3, r7
 80081d0:	3b38      	subs	r3, #56	; 0x38
 80081d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d011      	beq.n	80081fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80081da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081dc:	1e5a      	subs	r2, r3, #1
 80081de:	f107 000c 	add.w	r0, r7, #12
 80081e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081e4:	460b      	mov	r3, r1
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	440b      	add	r3, r1
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	18c1      	adds	r1, r0, r3
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	3348      	adds	r3, #72	; 0x48
 80081f8:	443b      	add	r3, r7
 80081fa:	3b34      	subs	r3, #52	; 0x34
 80081fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80081fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	4613      	mov	r3, r2
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	4413      	add	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	3348      	adds	r3, #72	; 0x48
 8008212:	443b      	add	r3, r7
 8008214:	3b34      	subs	r3, #52	; 0x34
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
    }

    i++;
 800821a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821c:	3301      	adds	r3, #1
 800821e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	643b      	str	r3, [r7, #64]	; 0x40
 8008226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1b6      	bne.n	800819a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	891b      	ldrh	r3, [r3, #8]
 8008230:	461a      	mov	r2, r3
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <low_level_output+0x128>)
 8008234:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008236:	4a14      	ldr	r2, [pc, #80]	; (8008288 <low_level_output+0x128>)
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800823e:	4a12      	ldr	r2, [pc, #72]	; (8008288 <low_level_output+0x128>)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008244:	6838      	ldr	r0, [r7, #0]
 8008246:	f009 f871 	bl	801132c <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800824a:	490f      	ldr	r1, [pc, #60]	; (8008288 <low_level_output+0x128>)
 800824c:	480f      	ldr	r0, [pc, #60]	; (800828c <low_level_output+0x12c>)
 800824e:	f7fb f8b5 	bl	80033bc <HAL_ETH_Transmit_IT>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10e      	bne.n	8008276 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008258:	bf00      	nop
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <low_level_output+0x130>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f04f 31ff 	mov.w	r1, #4294967295
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fc7a 	bl	8008b5c <osSemaphoreWait>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f5      	bne.n	800825a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800826e:	4807      	ldr	r0, [pc, #28]	; (800828c <low_level_output+0x12c>)
 8008270:	f7fb fa38 	bl	80036e4 <HAL_ETH_ReleaseTxPacket>
 8008274:	e002      	b.n	800827c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8008276:	6838      	ldr	r0, [r7, #0]
 8008278:	f008 ffb2 	bl	80111e0 <pbuf_free>
  }

  return errval;
 800827c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008280:	4618      	mov	r0, r3
 8008282:	3748      	adds	r7, #72	; 0x48
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20007750 	.word	0x20007750
 800828c:	200076a0 	.word	0x200076a0
 8008290:	2000769c 	.word	0x2000769c

08008294 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <low_level_input+0x2c>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	4619      	mov	r1, r3
 80082ae:	4805      	ldr	r0, [pc, #20]	; (80082c4 <low_level_input+0x30>)
 80082b0:	f7fb f8e0 	bl	8003474 <HAL_ETH_ReadData>
  }

  return p;
 80082b4:	68fb      	ldr	r3, [r7, #12]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20007694 	.word	0x20007694
 80082c4:	200076a0 	.word	0x200076a0

080082c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80082d8:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <ethernetif_input+0x50>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f04f 31ff 	mov.w	r1, #4294967295
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fc3b 	bl	8008b5c <osSemaphoreWait>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1f5      	bne.n	80082d8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80082ec:	68b8      	ldr	r0, [r7, #8]
 80082ee:	f7ff ffd1 	bl	8008294 <low_level_input>
 80082f2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	68b9      	ldr	r1, [r7, #8]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	4798      	blx	r3
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f008 ff68 	bl	80111e0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1ea      	bne.n	80082ec <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008316:	e7df      	b.n	80082d8 <ethernetif_input+0x10>
 8008318:	20007698 	.word	0x20007698

0800831c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <ethernetif_init+0x1c>
 800832a:	4b0e      	ldr	r3, [pc, #56]	; (8008364 <ethernetif_init+0x48>)
 800832c:	f240 2202 	movw	r2, #514	; 0x202
 8008330:	490d      	ldr	r1, [pc, #52]	; (8008368 <ethernetif_init+0x4c>)
 8008332:	480e      	ldr	r0, [pc, #56]	; (800836c <ethernetif_init+0x50>)
 8008334:	f012 ff10 	bl	801b158 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2273      	movs	r2, #115	; 0x73
 800833c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2274      	movs	r2, #116	; 0x74
 8008344:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a09      	ldr	r2, [pc, #36]	; (8008370 <ethernetif_init+0x54>)
 800834c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a08      	ldr	r2, [pc, #32]	; (8008374 <ethernetif_init+0x58>)
 8008352:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fd9f 	bl	8007e98 <low_level_init>

  return ERR_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	0801c444 	.word	0x0801c444
 8008368:	0801c460 	.word	0x0801c460
 800836c:	0801c470 	.word	0x0801c470
 8008370:	08018da1 	.word	0x08018da1
 8008374:	08008161 	.word	0x08008161

08008378 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008384:	68f9      	ldr	r1, [r7, #12]
 8008386:	4809      	ldr	r0, [pc, #36]	; (80083ac <pbuf_free_custom+0x34>)
 8008388:	f008 f830 	bl	80103ec <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800838c:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <pbuf_free_custom+0x38>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d107      	bne.n	80083a4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <pbuf_free_custom+0x38>)
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <pbuf_free_custom+0x3c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fc2a 	bl	8008bf8 <osSemaphoreRelease>
  }
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	0801fd60 	.word	0x0801fd60
 80083b0:	20007694 	.word	0x20007694
 80083b4:	20007698 	.word	0x20007698

080083b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
uint32_t sys_now(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083bc:	f7fa f94c 	bl	8002658 <HAL_GetTick>
 80083c0:	4603      	mov	r3, r0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08e      	sub	sp, #56	; 0x38
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	605a      	str	r2, [r3, #4]
 80083da:	609a      	str	r2, [r3, #8]
 80083dc:	60da      	str	r2, [r3, #12]
 80083de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a52      	ldr	r2, [pc, #328]	; (8008530 <HAL_ETH_MspInit+0x168>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f040 809e 	bne.w	8008528 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80083ec:	4b51      	ldr	r3, [pc, #324]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	4a50      	ldr	r2, [pc, #320]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 80083f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083f6:	6313      	str	r3, [r2, #48]	; 0x30
 80083f8:	4b4e      	ldr	r3, [pc, #312]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008400:	623b      	str	r3, [r7, #32]
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	4b4b      	ldr	r3, [pc, #300]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	4a4a      	ldr	r2, [pc, #296]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800840a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800840e:	6313      	str	r3, [r2, #48]	; 0x30
 8008410:	4b48      	ldr	r3, [pc, #288]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4b45      	ldr	r3, [pc, #276]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	4a44      	ldr	r2, [pc, #272]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008426:	6313      	str	r3, [r2, #48]	; 0x30
 8008428:	4b42      	ldr	r3, [pc, #264]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008434:	4b3f      	ldr	r3, [pc, #252]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008438:	4a3e      	ldr	r2, [pc, #248]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800843a:	f043 0304 	orr.w	r3, r3, #4
 800843e:	6313      	str	r3, [r2, #48]	; 0x30
 8008440:	4b3c      	ldr	r3, [pc, #240]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800844c:	4b39      	ldr	r3, [pc, #228]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	4a38      	ldr	r2, [pc, #224]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	6313      	str	r3, [r2, #48]	; 0x30
 8008458:	4b36      	ldr	r3, [pc, #216]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008464:	4b33      	ldr	r3, [pc, #204]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	4a32      	ldr	r2, [pc, #200]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	6313      	str	r3, [r2, #48]	; 0x30
 8008470:	4b30      	ldr	r3, [pc, #192]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800847c:	4b2d      	ldr	r3, [pc, #180]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	4a2c      	ldr	r2, [pc, #176]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 8008482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008486:	6313      	str	r3, [r2, #48]	; 0x30
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <HAL_ETH_MspInit+0x16c>)
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	60bb      	str	r3, [r7, #8]
 8008492:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008494:	2332      	movs	r3, #50	; 0x32
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008498:	2302      	movs	r3, #2
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849c:	2300      	movs	r3, #0
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084a0:	2303      	movs	r3, #3
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084a4:	230b      	movs	r3, #11
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ac:	4619      	mov	r1, r3
 80084ae:	4822      	ldr	r0, [pc, #136]	; (8008538 <HAL_ETH_MspInit+0x170>)
 80084b0:	f7fc fb04 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80084b4:	2386      	movs	r3, #134	; 0x86
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b8:	2302      	movs	r3, #2
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084bc:	2300      	movs	r3, #0
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c0:	2303      	movs	r3, #3
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084c4:	230b      	movs	r3, #11
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084cc:	4619      	mov	r1, r3
 80084ce:	481b      	ldr	r0, [pc, #108]	; (800853c <HAL_ETH_MspInit+0x174>)
 80084d0:	f7fc faf4 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80084d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084da:	2302      	movs	r3, #2
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084e2:	2303      	movs	r3, #3
 80084e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084e6:	230b      	movs	r3, #11
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ee:	4619      	mov	r1, r3
 80084f0:	4813      	ldr	r0, [pc, #76]	; (8008540 <HAL_ETH_MspInit+0x178>)
 80084f2:	f7fc fae3 	bl	8004abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80084f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fc:	2302      	movs	r3, #2
 80084fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008500:	2300      	movs	r3, #0
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008504:	2303      	movs	r3, #3
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008508:	230b      	movs	r3, #11
 800850a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800850c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008510:	4619      	mov	r1, r3
 8008512:	480c      	ldr	r0, [pc, #48]	; (8008544 <HAL_ETH_MspInit+0x17c>)
 8008514:	f7fc fad2 	bl	8004abc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008518:	2200      	movs	r2, #0
 800851a:	2105      	movs	r1, #5
 800851c:	203d      	movs	r0, #61	; 0x3d
 800851e:	f7fa f98f 	bl	8002840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008522:	203d      	movs	r0, #61	; 0x3d
 8008524:	f7fa f9a8 	bl	8002878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008528:	bf00      	nop
 800852a:	3738      	adds	r7, #56	; 0x38
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40028000 	.word	0x40028000
 8008534:	40023800 	.word	0x40023800
 8008538:	40020800 	.word	0x40020800
 800853c:	40020000 	.word	0x40020000
 8008540:	40020400 	.word	0x40020400
 8008544:	40021800 	.word	0x40021800

08008548 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800854c:	4802      	ldr	r0, [pc, #8]	; (8008558 <ETH_PHY_IO_Init+0x10>)
 800854e:	f7fb fb93 	bl	8003c78 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	200076a0 	.word	0x200076a0

0800855c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  return 0;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	68f9      	ldr	r1, [r7, #12]
 800857e:	4807      	ldr	r0, [pc, #28]	; (800859c <ETH_PHY_IO_ReadReg+0x30>)
 8008580:	f7fb f9e2 	bl	8003948 <HAL_ETH_ReadPHYRegister>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800858a:	f04f 33ff 	mov.w	r3, #4294967295
 800858e:	e000      	b.n	8008592 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	200076a0 	.word	0x200076a0

080085a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	68f9      	ldr	r1, [r7, #12]
 80085b2:	4807      	ldr	r0, [pc, #28]	; (80085d0 <ETH_PHY_IO_WriteReg+0x30>)
 80085b4:	f7fb fa13 	bl	80039de <HAL_ETH_WritePHYRegister>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295
 80085c2:	e000      	b.n	80085c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	200076a0 	.word	0x200076a0

080085d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085d8:	f7fa f83e 	bl	8002658 <HAL_GetTick>
 80085dc:	4603      	mov	r3, r0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b0a0      	sub	sp, #128	; 0x80
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	2264      	movs	r2, #100	; 0x64
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f012 ff05 	bl	801b404 <memset>
  int32_t PHYLinkState = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008602:	2300      	movs	r3, #0
 8008604:	67bb      	str	r3, [r7, #120]	; 0x78
 8008606:	2300      	movs	r3, #0
 8008608:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800860e:	483a      	ldr	r0, [pc, #232]	; (80086f8 <ethernet_link_thread+0x114>)
 8008610:	f7f9 ff79 	bl	8002506 <LAN8742_GetLinkState>
 8008614:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800861c:	089b      	lsrs	r3, r3, #2
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <ethernet_link_thread+0x5e>
 8008628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800862a:	2b01      	cmp	r3, #1
 800862c:	dc09      	bgt.n	8008642 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800862e:	4833      	ldr	r0, [pc, #204]	; (80086fc <ethernet_link_thread+0x118>)
 8008630:	f7fa fe44 	bl	80032bc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008634:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008636:	f008 f95d 	bl	80108f4 <netif_set_down>
    netif_set_link_down(netif);
 800863a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800863c:	f008 f9c0 	bl	80109c0 <netif_set_link_down>
 8008640:	e055      	b.n	80086ee <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d14e      	bne.n	80086ee <ethernet_link_thread+0x10a>
 8008650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008652:	2b01      	cmp	r3, #1
 8008654:	dd4b      	ble.n	80086ee <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008658:	3b02      	subs	r3, #2
 800865a:	2b03      	cmp	r3, #3
 800865c:	d82a      	bhi.n	80086b4 <ethernet_link_thread+0xd0>
 800865e:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <ethernet_link_thread+0x80>)
 8008660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008664:	08008675 	.word	0x08008675
 8008668:	08008687 	.word	0x08008687
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a7 	.word	0x080086a7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008678:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800867a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800867e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008680:	2301      	movs	r3, #1
 8008682:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008684:	e017      	b.n	80086b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008686:	2300      	movs	r3, #0
 8008688:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800868a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800868e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008690:	2301      	movs	r3, #1
 8008692:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008694:	e00f      	b.n	80086b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008696:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800869a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800869c:	2300      	movs	r3, #0
 800869e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80086a0:	2301      	movs	r3, #1
 80086a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80086a4:	e007      	b.n	80086b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80086aa:	2300      	movs	r3, #0
 80086ac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80086ae:	2301      	movs	r3, #1
 80086b0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80086b2:	e000      	b.n	80086b6 <ethernet_link_thread+0xd2>
    default:
      break;
 80086b4:	bf00      	nop
    }

    if(linkchanged)
 80086b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d018      	beq.n	80086ee <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80086bc:	f107 0308 	add.w	r3, r7, #8
 80086c0:	4619      	mov	r1, r3
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <ethernet_link_thread+0x118>)
 80086c4:	f7fb f9d4 	bl	8003a70 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80086c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80086cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80086d0:	f107 0308 	add.w	r3, r7, #8
 80086d4:	4619      	mov	r1, r3
 80086d6:	4809      	ldr	r0, [pc, #36]	; (80086fc <ethernet_link_thread+0x118>)
 80086d8:	f7fb fab4 	bl	8003c44 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80086dc:	4807      	ldr	r0, [pc, #28]	; (80086fc <ethernet_link_thread+0x118>)
 80086de:	f7fa fd5f 	bl	80031a0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80086e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086e4:	f008 f89a 	bl	801081c <netif_set_up>
      netif_set_link_up(netif);
 80086e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ea:	f008 f935 	bl	8010958 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80086ee:	2064      	movs	r0, #100	; 0x64
 80086f0:	f000 f951 	bl	8008996 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80086f4:	e78b      	b.n	800860e <ethernet_link_thread+0x2a>
 80086f6:	bf00      	nop
 80086f8:	20007788 	.word	0x20007788
 80086fc:	200076a0 	.word	0x200076a0

08008700 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af02      	add	r7, sp, #8
 8008706:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008708:	4812      	ldr	r0, [pc, #72]	; (8008754 <HAL_ETH_RxAllocateCallback+0x54>)
 800870a:	f007 fdfb 	bl	8010304 <memp_malloc_pool>
 800870e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d014      	beq.n	8008740 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f103 0220 	add.w	r2, r3, #32
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <HAL_ETH_RxAllocateCallback+0x58>)
 8008724:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800872e:	9201      	str	r2, [sp, #4]
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2241      	movs	r2, #65	; 0x41
 8008736:	2100      	movs	r1, #0
 8008738:	2000      	movs	r0, #0
 800873a:	f008 fb65 	bl	8010e08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800873e:	e005      	b.n	800874c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008740:	4b06      	ldr	r3, [pc, #24]	; (800875c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	0801fd60 	.word	0x0801fd60
 8008758:	08008379 	.word	0x08008379
 800875c:	20007694 	.word	0x20007694

08008760 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3b20      	subs	r3, #32
 800877e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	2200      	movs	r2, #0
 800878a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	887a      	ldrh	r2, [r7, #2]
 8008790:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	e003      	b.n	80087aa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	e009      	b.n	80087cc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	891a      	ldrh	r2, [r3, #8]
 80087bc:	887b      	ldrh	r3, [r7, #2]
 80087be:	4413      	add	r3, r2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f2      	bne.n	80087b8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80087d2:	887b      	ldrh	r3, [r7, #2]
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7ff fafa 	bl	8007dd0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80087dc:	bf00      	nop
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f008 fcf7 	bl	80111e0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8008804:	4b15      	ldr	r3, [pc, #84]	; (800885c <RMII_Thread+0x60>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8008810:	2000      	movs	r0, #0
 8008812:	f000 f8b4 	bl	800897e <osThreadTerminate>
 8008816:	e7f5      	b.n	8008804 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8008818:	4b10      	ldr	r3, [pc, #64]	; (800885c <RMII_Thread+0x60>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8008820:	2b0a      	cmp	r3, #10
 8008822:	d916      	bls.n	8008852 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8008824:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <RMII_Thread+0x64>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a0d      	ldr	r2, [pc, #52]	; (8008860 <RMII_Thread+0x64>)
 800882a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800882e:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8008830:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <RMII_Thread+0x64>)
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	4a0a      	ldr	r2, [pc, #40]	; (8008860 <RMII_Thread+0x64>)
 8008836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800883a:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <RMII_Thread+0x60>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <RMII_Thread+0x60>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0201 	orr.w	r2, r2, #1
 800884c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008850:	e7d8      	b.n	8008804 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 8008852:	20c8      	movs	r0, #200	; 0xc8
 8008854:	f000 f89f 	bl	8008996 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8008858:	e7d4      	b.n	8008804 <RMII_Thread+0x8>
 800885a:	bf00      	nop
 800885c:	200076a0 	.word	0x200076a0
 8008860:	40013800 	.word	0x40013800

08008864 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008876:	2b84      	cmp	r3, #132	; 0x84
 8008878:	d005      	beq.n	8008886 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800887a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	3303      	adds	r3, #3
 8008884:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008886:	68fb      	ldr	r3, [r7, #12]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800889a:	f3ef 8305 	mrs	r3, IPSR
 800889e:	607b      	str	r3, [r7, #4]
  return(result);
 80088a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bf14      	ite	ne
 80088a6:	2301      	movne	r3, #1
 80088a8:	2300      	moveq	r3, #0
 80088aa:	b2db      	uxtb	r3, r3
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80088bc:	f001 fe28 	bl	800a510 <vTaskStartScheduler>
  
  return osOK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80088ca:	f7ff ffe3 	bl	8008894 <inHandlerMode>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80088d4:	f001 ff46 	bl	800a764 <xTaskGetTickCountFromISR>
 80088d8:	4603      	mov	r3, r0
 80088da:	e002      	b.n	80088e2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80088dc:	f001 ff32 	bl	800a744 <xTaskGetTickCount>
 80088e0:	4603      	mov	r3, r0
  }
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80088e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e8:	b089      	sub	sp, #36	; 0x24
 80088ea:	af04      	add	r7, sp, #16
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d020      	beq.n	800893a <osThreadCreate+0x54>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01c      	beq.n	800893a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685c      	ldr	r4, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691e      	ldr	r6, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff ffa6 	bl	8008864 <makeFreeRtosPriority>
 8008918:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	9100      	str	r1, [sp, #0]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	4632      	mov	r2, r6
 800892c:	4629      	mov	r1, r5
 800892e:	4620      	mov	r0, r4
 8008930:	f001 fb74 	bl	800a01c <xTaskCreateStatic>
 8008934:	4603      	mov	r3, r0
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e01c      	b.n	8008974 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685c      	ldr	r4, [r3, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008946:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff ff88 	bl	8008864 <makeFreeRtosPriority>
 8008954:	4602      	mov	r2, r0
 8008956:	f107 030c 	add.w	r3, r7, #12
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	9200      	str	r2, [sp, #0]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	4632      	mov	r2, r6
 8008962:	4629      	mov	r1, r5
 8008964:	4620      	mov	r0, r4
 8008966:	f001 fbbc 	bl	800a0e2 <xTaskCreate>
 800896a:	4603      	mov	r3, r0
 800896c:	2b01      	cmp	r3, #1
 800896e:	d001      	beq.n	8008974 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008970:	2300      	movs	r3, #0
 8008972:	e000      	b.n	8008976 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008974:	68fb      	ldr	r3, [r7, #12]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800897e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 fcfa 	bl	800a380 <vTaskDelete>
  return osOK;
 800898c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <osDelay+0x16>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	e000      	b.n	80089ae <osDelay+0x18>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 fd78 	bl	800a4a4 <vTaskDelay>
  
  return osOK;
 80089b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4619      	mov	r1, r3
 80089d4:	2001      	movs	r0, #1
 80089d6:	f000 fc92 	bl	80092fe <xQueueCreateMutexStatic>
 80089da:	4603      	mov	r3, r0
 80089dc:	e003      	b.n	80089e6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80089de:	2001      	movs	r0, #1
 80089e0:	f000 fc75 	bl	80092ce <xQueueCreateMutex>
 80089e4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <osMutexWait+0x18>
    return osErrorParameter;
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	e03a      	b.n	8008a7e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d103      	bne.n	8008a1c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008a14:	f04f 33ff 	mov.w	r3, #4294967295
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	e009      	b.n	8008a30 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d006      	beq.n	8008a30 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <osMutexWait+0x40>
      ticks = 1;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008a30:	f7ff ff30 	bl	8008894 <inHandlerMode>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d017      	beq.n	8008a6a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008a3a:	f107 0308 	add.w	r3, r7, #8
 8008a3e:	461a      	mov	r2, r3
 8008a40:	2100      	movs	r1, #0
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 f8ac 	bl	8009ba0 <xQueueReceiveFromISR>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d001      	beq.n	8008a52 <osMutexWait+0x62>
      return osErrorOS;
 8008a4e:	23ff      	movs	r3, #255	; 0xff
 8008a50:	e015      	b.n	8008a7e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d011      	beq.n	8008a7c <osMutexWait+0x8c>
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <osMutexWait+0x98>)
 8008a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	e008      	b.n	8008a7c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008a6a:	68f9      	ldr	r1, [r7, #12]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 ff83 	bl	8009978 <xQueueSemaphoreTake>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d001      	beq.n	8008a7c <osMutexWait+0x8c>
    return osErrorOS;
 8008a78:	23ff      	movs	r3, #255	; 0xff
 8008a7a:	e000      	b.n	8008a7e <osMutexWait+0x8e>
  }
  
  return osOK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008a9c:	f7ff fefa 	bl	8008894 <inHandlerMode>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d016      	beq.n	8008ad4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fde7 	bl	8009680 <xQueueGiveFromISR>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d001      	beq.n	8008abc <osMutexRelease+0x30>
      return osErrorOS;
 8008ab8:	23ff      	movs	r3, #255	; 0xff
 8008aba:	e017      	b.n	8008aec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d013      	beq.n	8008aea <osMutexRelease+0x5e>
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <osMutexRelease+0x68>)
 8008ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	e00a      	b.n	8008aea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc2a 	bl	8009334 <xQueueGenericSend>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d001      	beq.n	8008aea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008ae6:	23ff      	movs	r3, #255	; 0xff
 8008ae8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008aea:	68fb      	ldr	r3, [r7, #12]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	e000ed04 	.word	0xe000ed04

08008af8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00f      	beq.n	8008b2a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d10a      	bne.n	8008b26 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2203      	movs	r2, #3
 8008b16:	9200      	str	r2, [sp, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	f000 fad9 	bl	80090d4 <xQueueGenericCreateStatic>
 8008b22:	4603      	mov	r3, r0
 8008b24:	e016      	b.n	8008b54 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e014      	b.n	8008b54 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d110      	bne.n	8008b52 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008b30:	2203      	movs	r2, #3
 8008b32:	2100      	movs	r1, #0
 8008b34:	2001      	movs	r0, #1
 8008b36:	f000 fb4f 	bl	80091d8 <xQueueGenericCreate>
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <osSemaphoreCreate+0x56>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2200      	movs	r2, #0
 8008b46:	2100      	movs	r1, #0
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fbf3 	bl	8009334 <xQueueGenericSend>
      return sema;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	e000      	b.n	8008b54 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008b52:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008b66:	2300      	movs	r3, #0
 8008b68:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	e03a      	b.n	8008bea <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d103      	bne.n	8008b88 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	e009      	b.n	8008b9c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <osSemaphoreWait+0x40>
      ticks = 1;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008b9c:	f7ff fe7a 	bl	8008894 <inHandlerMode>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d017      	beq.n	8008bd6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ba6:	f107 0308 	add.w	r3, r7, #8
 8008baa:	461a      	mov	r2, r3
 8008bac:	2100      	movs	r1, #0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fff6 	bl	8009ba0 <xQueueReceiveFromISR>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d001      	beq.n	8008bbe <osSemaphoreWait+0x62>
      return osErrorOS;
 8008bba:	23ff      	movs	r3, #255	; 0xff
 8008bbc:	e015      	b.n	8008bea <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d011      	beq.n	8008be8 <osSemaphoreWait+0x8c>
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <osSemaphoreWait+0x98>)
 8008bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	e008      	b.n	8008be8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fecd 	bl	8009978 <xQueueSemaphoreTake>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d001      	beq.n	8008be8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008be4:	23ff      	movs	r3, #255	; 0xff
 8008be6:	e000      	b.n	8008bea <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	e000ed04 	.word	0xe000ed04

08008bf8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008c08:	f7ff fe44 	bl	8008894 <inHandlerMode>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d016      	beq.n	8008c40 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008c12:	f107 0308 	add.w	r3, r7, #8
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fd31 	bl	8009680 <xQueueGiveFromISR>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d001      	beq.n	8008c28 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008c24:	23ff      	movs	r3, #255	; 0xff
 8008c26:	e017      	b.n	8008c58 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d013      	beq.n	8008c56 <osSemaphoreRelease+0x5e>
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	; (8008c60 <osSemaphoreRelease+0x68>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	e00a      	b.n	8008c56 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008c40:	2300      	movs	r3, #0
 8008c42:	2200      	movs	r2, #0
 8008c44:	2100      	movs	r1, #0
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fb74 	bl	8009334 <xQueueGenericSend>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d001      	beq.n	8008c56 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008c52:	23ff      	movs	r3, #255	; 0xff
 8008c54:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008c56:	68fb      	ldr	r3, [r7, #12]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	e000ed04 	.word	0xe000ed04

08008c64 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008c6c:	f7ff fe12 	bl	8008894 <inHandlerMode>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008c76:	2382      	movs	r3, #130	; 0x82
 8008c78:	e003      	b.n	8008c82 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f856 	bl	8009d2c <vQueueDelete>

  return osOK; 
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008c8a:	b590      	push	{r4, r7, lr}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af02      	add	r7, sp, #8
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d011      	beq.n	8008cc0 <osMessageCreate+0x36>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00d      	beq.n	8008cc0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6859      	ldr	r1, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	2400      	movs	r4, #0
 8008cb6:	9400      	str	r4, [sp, #0]
 8008cb8:	f000 fa0c 	bl	80090d4 <xQueueGenericCreateStatic>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	e008      	b.n	8008cd2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4619      	mov	r1, r3
 8008ccc:	f000 fa84 	bl	80091d8 <xQueueGenericCreate>
 8008cd0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd90      	pop	{r4, r7, pc}
	...

08008cdc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <osMessagePut+0x1e>
    ticks = 1;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008cfa:	f7ff fdcb 	bl	8008894 <inHandlerMode>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d018      	beq.n	8008d36 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008d04:	f107 0210 	add.w	r2, r7, #16
 8008d08:	f107 0108 	add.w	r1, r7, #8
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fc16 	bl	8009540 <xQueueGenericSendFromISR>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d001      	beq.n	8008d1e <osMessagePut+0x42>
      return osErrorOS;
 8008d1a:	23ff      	movs	r3, #255	; 0xff
 8008d1c:	e018      	b.n	8008d50 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d014      	beq.n	8008d4e <osMessagePut+0x72>
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <osMessagePut+0x7c>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	e00b      	b.n	8008d4e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008d36:	f107 0108 	add.w	r1, r7, #8
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 faf8 	bl	8009334 <xQueueGenericSend>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d001      	beq.n	8008d4e <osMessagePut+0x72>
      return osErrorOS;
 8008d4a:	23ff      	movs	r3, #255	; 0xff
 8008d4c:	e000      	b.n	8008d50 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008d5c:	b590      	push	{r4, r7, lr}
 8008d5e:	b08b      	sub	sp, #44	; 0x2c
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10a      	bne.n	8008d8c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	617b      	str	r3, [r7, #20]
    return event;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	461c      	mov	r4, r3
 8008d7e:	f107 0314 	add.w	r3, r7, #20
 8008d82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d8a:	e054      	b.n	8008e36 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9a:	d103      	bne.n	8008da4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
 8008da2:	e009      	b.n	8008db8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <osMessageGet+0x5c>
      ticks = 1;
 8008db4:	2301      	movs	r3, #1
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008db8:	f7ff fd6c 	bl	8008894 <inHandlerMode>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01c      	beq.n	8008dfc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008dc2:	f107 0220 	add.w	r2, r7, #32
 8008dc6:	f107 0314 	add.w	r3, r7, #20
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	68b8      	ldr	r0, [r7, #8]
 8008dd0:	f000 fee6 	bl	8009ba0 <xQueueReceiveFromISR>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d102      	bne.n	8008de0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008dda:	2310      	movs	r3, #16
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	e001      	b.n	8008de4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01d      	beq.n	8008e26 <osMessageGet+0xca>
 8008dea:	4b15      	ldr	r3, [pc, #84]	; (8008e40 <osMessageGet+0xe4>)
 8008dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	e014      	b.n	8008e26 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008dfc:	f107 0314 	add.w	r3, r7, #20
 8008e00:	3304      	adds	r3, #4
 8008e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e04:	4619      	mov	r1, r3
 8008e06:	68b8      	ldr	r0, [r7, #8]
 8008e08:	f000 fcd0 	bl	80097ac <xQueueReceive>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d102      	bne.n	8008e18 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008e12:	2310      	movs	r3, #16
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e006      	b.n	8008e26 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <osMessageGet+0xc6>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e000      	b.n	8008e24 <osMessageGet+0xc8>
 8008e22:	2340      	movs	r3, #64	; 0x40
 8008e24:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	461c      	mov	r4, r3
 8008e2a:	f107 0314 	add.w	r3, r7, #20
 8008e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	372c      	adds	r7, #44	; 0x2c
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd90      	pop	{r4, r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	e000ed04 	.word	0xe000ed04

08008e44 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008e4c:	f7ff fd22 	bl	8008894 <inHandlerMode>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d004      	beq.n	8008e60 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 ff48 	bl	8009cec <uxQueueMessagesWaitingFromISR>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	e003      	b.n	8008e68 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 ff23 	bl	8009cac <uxQueueMessagesWaiting>
 8008e66:	4603      	mov	r3, r0
  }
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008e78:	f7ff fd0c 	bl	8008894 <inHandlerMode>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <osMessageDelete+0x16>
    return osErrorISR;
 8008e82:	2382      	movs	r3, #130	; 0x82
 8008e84:	e003      	b.n	8008e8e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 ff50 	bl	8009d2c <vQueueDelete>

  return osOK; 
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f103 0208 	add.w	r2, r3, #8
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f103 0208 	add.w	r2, r3, #8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f103 0208 	add.w	r2, r3, #8
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689a      	ldr	r2, [r3, #8]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	601a      	str	r2, [r3, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d103      	bne.n	8008f58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	e00c      	b.n	8008f72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	e002      	b.n	8008f66 <vListInsert+0x2e>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d2f6      	bcs.n	8008f60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	601a      	str	r2, [r3, #0]
}
 8008f9e:	bf00      	nop
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6892      	ldr	r2, [r2, #8]
 8008fc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	6852      	ldr	r2, [r2, #4]
 8008fca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d103      	bne.n	8008fde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	1e5a      	subs	r2, r3, #1
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10c      	bne.n	800902e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	b672      	cpsid	i
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	b662      	cpsie	i
 8009028:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800902a:	bf00      	nop
 800902c:	e7fe      	b.n	800902c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800902e:	f002 fb15 	bl	800b65c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903a:	68f9      	ldr	r1, [r7, #12]
 800903c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800903e:	fb01 f303 	mul.w	r3, r1, r3
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	3b01      	subs	r3, #1
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	441a      	add	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	22ff      	movs	r2, #255	; 0xff
 8009072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	22ff      	movs	r2, #255	; 0xff
 800907a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d114      	bne.n	80090ae <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01a      	beq.n	80090c2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3310      	adds	r3, #16
 8009090:	4618      	mov	r0, r3
 8009092:	f001 fcbd 	bl	800aa10 <xTaskRemoveFromEventList>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d012      	beq.n	80090c2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800909c:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <xQueueGenericReset+0xd0>)
 800909e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	e009      	b.n	80090c2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3310      	adds	r3, #16
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff feef 	bl	8008e96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	4618      	mov	r0, r3
 80090be:	f7ff feea 	bl	8008e96 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090c2:	f002 faff 	bl	800b6c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090c6:	2301      	movs	r3, #1
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	e000ed04 	.word	0xe000ed04

080090d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08e      	sub	sp, #56	; 0x38
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10c      	bne.n	8009102 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	b672      	cpsid	i
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	b662      	cpsie	i
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10c      	bne.n	8009122 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	b672      	cpsid	i
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	b662      	cpsie	i
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <xQueueGenericCreateStatic+0x5a>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <xQueueGenericCreateStatic+0x5e>
 800912e:	2301      	movs	r3, #1
 8009130:	e000      	b.n	8009134 <xQueueGenericCreateStatic+0x60>
 8009132:	2300      	movs	r3, #0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10c      	bne.n	8009152 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	623b      	str	r3, [r7, #32]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <xQueueGenericCreateStatic+0x8a>
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <xQueueGenericCreateStatic+0x8e>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <xQueueGenericCreateStatic+0x90>
 8009162:	2300      	movs	r3, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	b672      	cpsid	i
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	b662      	cpsie	i
 800917c:	61fb      	str	r3, [r7, #28]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009182:	2348      	movs	r3, #72	; 0x48
 8009184:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b48      	cmp	r3, #72	; 0x48
 800918a:	d00c      	beq.n	80091a6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	b672      	cpsid	i
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	b662      	cpsie	i
 80091a0:	61bb      	str	r3, [r7, #24]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	4613      	mov	r3, r2
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f847 	bl	800925c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3730      	adds	r7, #48	; 0x30
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08a      	sub	sp, #40	; 0x28
 80091dc:	af02      	add	r7, sp, #8
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10c      	bne.n	8009206 <xQueueGenericCreate+0x2e>
	__asm volatile
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	b672      	cpsid	i
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	b662      	cpsie	i
 8009200:	613b      	str	r3, [r7, #16]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d102      	bne.n	8009212 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	e004      	b.n	800921c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	fb02 f303 	mul.w	r3, r2, r3
 800921a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	3348      	adds	r3, #72	; 0x48
 8009220:	4618      	mov	r0, r3
 8009222:	f002 fb47 	bl	800b8b4 <pvPortMalloc>
 8009226:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d011      	beq.n	8009252 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3348      	adds	r3, #72	; 0x48
 8009236:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009240:	79fa      	ldrb	r2, [r7, #7]
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4613      	mov	r3, r2
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f805 	bl	800925c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009252:	69bb      	ldr	r3, [r7, #24]
	}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	e002      	b.n	800927e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800928a:	2101      	movs	r1, #1
 800928c:	69b8      	ldr	r0, [r7, #24]
 800928e:	f7ff feb7 	bl	8009000 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00e      	beq.n	80092c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80092ba:	2300      	movs	r3, #0
 80092bc:	2200      	movs	r2, #0
 80092be:	2100      	movs	r1, #0
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f837 	bl	8009334 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	4603      	mov	r3, r0
 80092d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	2300      	movs	r3, #0
 80092de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	461a      	mov	r2, r3
 80092e4:	6939      	ldr	r1, [r7, #16]
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f7ff ff76 	bl	80091d8 <xQueueGenericCreate>
 80092ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff ffd3 	bl	800929a <prvInitialiseMutex>

		return xNewQueue;
 80092f4:	68fb      	ldr	r3, [r7, #12]
	}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b088      	sub	sp, #32
 8009302:	af02      	add	r7, sp, #8
 8009304:	4603      	mov	r3, r0
 8009306:	6039      	str	r1, [r7, #0]
 8009308:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800930a:	2301      	movs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2200      	movs	r2, #0
 800931a:	6939      	ldr	r1, [r7, #16]
 800931c:	6978      	ldr	r0, [r7, #20]
 800931e:	f7ff fed9 	bl	80090d4 <xQueueGenericCreateStatic>
 8009322:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7ff ffb8 	bl	800929a <prvInitialiseMutex>

		return xNewQueue;
 800932a:	68fb      	ldr	r3, [r7, #12]
	}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08e      	sub	sp, #56	; 0x38
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009342:	2300      	movs	r3, #0
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10c      	bne.n	800936a <xQueueGenericSend+0x36>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	b672      	cpsid	i
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	b662      	cpsie	i
 8009364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <xQueueGenericSend+0x44>
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <xQueueGenericSend+0x48>
 8009378:	2301      	movs	r3, #1
 800937a:	e000      	b.n	800937e <xQueueGenericSend+0x4a>
 800937c:	2300      	movs	r3, #0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10c      	bne.n	800939c <xQueueGenericSend+0x68>
	__asm volatile
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	b672      	cpsid	i
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	b662      	cpsie	i
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d103      	bne.n	80093aa <xQueueGenericSend+0x76>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <xQueueGenericSend+0x7a>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <xQueueGenericSend+0x7c>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <xQueueGenericSend+0x9a>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	b672      	cpsid	i
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	b662      	cpsie	i
 80093c8:	623b      	str	r3, [r7, #32]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093ce:	f001 fce7 	bl	800ada0 <xTaskGetSchedulerState>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <xQueueGenericSend+0xaa>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <xQueueGenericSend+0xae>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <xQueueGenericSend+0xb0>
 80093e2:	2300      	movs	r3, #0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10c      	bne.n	8009402 <xQueueGenericSend+0xce>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	b672      	cpsid	i
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	b662      	cpsie	i
 80093fc:	61fb      	str	r3, [r7, #28]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009402:	f002 f92b 	bl	800b65c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940e:	429a      	cmp	r2, r3
 8009410:	d302      	bcc.n	8009418 <xQueueGenericSend+0xe4>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d129      	bne.n	800946c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941e:	f000 fcc2 	bl	8009da6 <prvCopyDataToQueue>
 8009422:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	2b00      	cmp	r3, #0
 800942a:	d010      	beq.n	800944e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	3324      	adds	r3, #36	; 0x24
 8009430:	4618      	mov	r0, r3
 8009432:	f001 faed 	bl	800aa10 <xTaskRemoveFromEventList>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d013      	beq.n	8009464 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800943c:	4b3f      	ldr	r3, [pc, #252]	; (800953c <xQueueGenericSend+0x208>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	e00a      	b.n	8009464 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d007      	beq.n	8009464 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009454:	4b39      	ldr	r3, [pc, #228]	; (800953c <xQueueGenericSend+0x208>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009464:	f002 f92e 	bl	800b6c4 <vPortExitCritical>
				return pdPASS;
 8009468:	2301      	movs	r3, #1
 800946a:	e063      	b.n	8009534 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009472:	f002 f927 	bl	800b6c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009476:	2300      	movs	r3, #0
 8009478:	e05c      	b.n	8009534 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800947a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947c:	2b00      	cmp	r3, #0
 800947e:	d106      	bne.n	800948e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	4618      	mov	r0, r3
 8009486:	f001 fb27 	bl	800aad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800948e:	f002 f919 	bl	800b6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009492:	f001 f8ab 	bl	800a5ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009496:	f002 f8e1 	bl	800b65c <vPortEnterCritical>
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094a0:	b25b      	sxtb	r3, r3
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d103      	bne.n	80094b0 <xQueueGenericSend+0x17c>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094b6:	b25b      	sxtb	r3, r3
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x192>
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094c6:	f002 f8fd 	bl	800b6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ca:	1d3a      	adds	r2, r7, #4
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fb16 	bl	800ab04 <xTaskCheckForTimeOut>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d124      	bne.n	8009528 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094e0:	f000 fd59 	bl	8009f96 <prvIsQueueFull>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d018      	beq.n	800951c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	3310      	adds	r3, #16
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fa66 	bl	800a9c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094fa:	f000 fce4 	bl	8009ec6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094fe:	f001 f883 	bl	800a608 <xTaskResumeAll>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f47f af7c 	bne.w	8009402 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <xQueueGenericSend+0x208>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	e772      	b.n	8009402 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800951c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800951e:	f000 fcd2 	bl	8009ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009522:	f001 f871 	bl	800a608 <xTaskResumeAll>
 8009526:	e76c      	b.n	8009402 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952a:	f000 fccc 	bl	8009ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800952e:	f001 f86b 	bl	800a608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009534:	4618      	mov	r0, r3
 8009536:	3738      	adds	r7, #56	; 0x38
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08e      	sub	sp, #56	; 0x38
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	b672      	cpsid	i
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	b662      	cpsie	i
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d103      	bne.n	8009580 <xQueueGenericSendFromISR+0x40>
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <xQueueGenericSendFromISR+0x44>
 8009580:	2301      	movs	r3, #1
 8009582:	e000      	b.n	8009586 <xQueueGenericSendFromISR+0x46>
 8009584:	2300      	movs	r3, #0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10c      	bne.n	80095a4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	b672      	cpsid	i
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	b662      	cpsie	i
 800959e:	623b      	str	r3, [r7, #32]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d103      	bne.n	80095b2 <xQueueGenericSendFromISR+0x72>
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <xQueueGenericSendFromISR+0x76>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <xQueueGenericSendFromISR+0x78>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10c      	bne.n	80095d6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	b672      	cpsid	i
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	b662      	cpsie	i
 80095d0:	61fb      	str	r3, [r7, #28]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095d6:	f002 f929 	bl	800b82c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095da:	f3ef 8211 	mrs	r2, BASEPRI
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	b672      	cpsid	i
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	b662      	cpsie	i
 80095f2:	61ba      	str	r2, [r7, #24]
 80095f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <xQueueGenericSendFromISR+0xcc>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d12c      	bne.n	8009666 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800961c:	f000 fbc3 	bl	8009da6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009620:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d112      	bne.n	8009650 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d016      	beq.n	8009660 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	4618      	mov	r0, r3
 8009638:	f001 f9ea 	bl	800aa10 <xTaskRemoveFromEventList>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00e      	beq.n	8009660 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e007      	b.n	8009660 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009654:	3301      	adds	r3, #1
 8009656:	b2db      	uxtb	r3, r3
 8009658:	b25a      	sxtb	r2, r3
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009660:	2301      	movs	r3, #1
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009664:	e001      	b.n	800966a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009666:	2300      	movs	r3, #0
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009674:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009678:	4618      	mov	r0, r3
 800967a:	3738      	adds	r7, #56	; 0x38
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08e      	sub	sp, #56	; 0x38
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10c      	bne.n	80096ae <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	b672      	cpsid	i
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	b662      	cpsie	i
 80096a8:	623b      	str	r3, [r7, #32]
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00c      	beq.n	80096d0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	b672      	cpsid	i
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	b662      	cpsie	i
 80096ca:	61fb      	str	r3, [r7, #28]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d103      	bne.n	80096e0 <xQueueGiveFromISR+0x60>
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <xQueueGiveFromISR+0x64>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <xQueueGiveFromISR+0x66>
 80096e4:	2300      	movs	r3, #0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10c      	bne.n	8009704 <xQueueGiveFromISR+0x84>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	b672      	cpsid	i
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	b662      	cpsie	i
 80096fe:	61bb      	str	r3, [r7, #24]
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009704:	f002 f892 	bl	800b82c <vPortValidateInterruptPriority>
	__asm volatile
 8009708:	f3ef 8211 	mrs	r2, BASEPRI
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	b672      	cpsid	i
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	b662      	cpsie	i
 8009720:	617a      	str	r2, [r7, #20]
 8009722:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009724:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009734:	429a      	cmp	r2, r3
 8009736:	d22b      	bcs.n	8009790 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800973e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800974a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d112      	bne.n	800977a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d016      	beq.n	800978a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	3324      	adds	r3, #36	; 0x24
 8009760:	4618      	mov	r0, r3
 8009762:	f001 f955 	bl	800aa10 <xTaskRemoveFromEventList>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00e      	beq.n	800978a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00b      	beq.n	800978a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2201      	movs	r2, #1
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	e007      	b.n	800978a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800977a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800977e:	3301      	adds	r3, #1
 8009780:	b2db      	uxtb	r3, r3
 8009782:	b25a      	sxtb	r2, r3
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800978a:	2301      	movs	r3, #1
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
 800978e:	e001      	b.n	8009794 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009790:	2300      	movs	r3, #0
 8009792:	637b      	str	r3, [r7, #52]	; 0x34
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f383 8811 	msr	BASEPRI, r3
}
 800979e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3738      	adds	r7, #56	; 0x38
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	; 0x30
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10c      	bne.n	80097e0 <xQueueReceive+0x34>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	b672      	cpsid	i
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	b662      	cpsie	i
 80097da:	623b      	str	r3, [r7, #32]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d103      	bne.n	80097ee <xQueueReceive+0x42>
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <xQueueReceive+0x46>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <xQueueReceive+0x48>
 80097f2:	2300      	movs	r3, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10c      	bne.n	8009812 <xQueueReceive+0x66>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	b672      	cpsid	i
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	b662      	cpsie	i
 800980c:	61fb      	str	r3, [r7, #28]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009812:	f001 fac5 	bl	800ada0 <xTaskGetSchedulerState>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <xQueueReceive+0x76>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <xQueueReceive+0x7a>
 8009822:	2301      	movs	r3, #1
 8009824:	e000      	b.n	8009828 <xQueueReceive+0x7c>
 8009826:	2300      	movs	r3, #0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10c      	bne.n	8009846 <xQueueReceive+0x9a>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	b672      	cpsid	i
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	b662      	cpsie	i
 8009840:	61bb      	str	r3, [r7, #24]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009846:	f001 ff09 	bl	800b65c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01f      	beq.n	8009896 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985a:	f000 fb0e 	bl	8009e7a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	1e5a      	subs	r2, r3, #1
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00f      	beq.n	800988e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	3310      	adds	r3, #16
 8009872:	4618      	mov	r0, r3
 8009874:	f001 f8cc 	bl	800aa10 <xTaskRemoveFromEventList>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800987e:	4b3d      	ldr	r3, [pc, #244]	; (8009974 <xQueueReceive+0x1c8>)
 8009880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800988e:	f001 ff19 	bl	800b6c4 <vPortExitCritical>
				return pdPASS;
 8009892:	2301      	movs	r3, #1
 8009894:	e069      	b.n	800996a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800989c:	f001 ff12 	bl	800b6c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098a0:	2300      	movs	r3, #0
 80098a2:	e062      	b.n	800996a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d106      	bne.n	80098b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098aa:	f107 0310 	add.w	r3, r7, #16
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 f912 	bl	800aad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098b8:	f001 ff04 	bl	800b6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098bc:	f000 fe96 	bl	800a5ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098c0:	f001 fecc 	bl	800b65c <vPortEnterCritical>
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098ca:	b25b      	sxtb	r3, r3
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d103      	bne.n	80098da <xQueueReceive+0x12e>
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098e0:	b25b      	sxtb	r3, r3
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d103      	bne.n	80098f0 <xQueueReceive+0x144>
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f0:	f001 fee8 	bl	800b6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098f4:	1d3a      	adds	r2, r7, #4
 80098f6:	f107 0310 	add.w	r3, r7, #16
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 f901 	bl	800ab04 <xTaskCheckForTimeOut>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d123      	bne.n	8009950 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800990a:	f000 fb2e 	bl	8009f6a <prvIsQueueEmpty>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d017      	beq.n	8009944 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	3324      	adds	r3, #36	; 0x24
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	4611      	mov	r1, r2
 800991c:	4618      	mov	r0, r3
 800991e:	f001 f851 	bl	800a9c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009924:	f000 facf 	bl	8009ec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009928:	f000 fe6e 	bl	800a608 <xTaskResumeAll>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d189      	bne.n	8009846 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009932:	4b10      	ldr	r3, [pc, #64]	; (8009974 <xQueueReceive+0x1c8>)
 8009934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	e780      	b.n	8009846 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009946:	f000 fabe 	bl	8009ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800994a:	f000 fe5d 	bl	800a608 <xTaskResumeAll>
 800994e:	e77a      	b.n	8009846 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009952:	f000 fab8 	bl	8009ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009956:	f000 fe57 	bl	800a608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800995a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995c:	f000 fb05 	bl	8009f6a <prvIsQueueEmpty>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	f43f af6f 	beq.w	8009846 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800996a:	4618      	mov	r0, r3
 800996c:	3730      	adds	r7, #48	; 0x30
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	e000ed04 	.word	0xe000ed04

08009978 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08e      	sub	sp, #56	; 0x38
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10c      	bne.n	80099ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	b672      	cpsid	i
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	b662      	cpsie	i
 80099a8:	623b      	str	r3, [r7, #32]
}
 80099aa:	bf00      	nop
 80099ac:	e7fe      	b.n	80099ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	b672      	cpsid	i
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	b662      	cpsie	i
 80099ca:	61fb      	str	r3, [r7, #28]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099d0:	f001 f9e6 	bl	800ada0 <xTaskGetSchedulerState>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d102      	bne.n	80099e0 <xQueueSemaphoreTake+0x68>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <xQueueSemaphoreTake+0x6c>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <xQueueSemaphoreTake+0x6e>
 80099e4:	2300      	movs	r3, #0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10c      	bne.n	8009a04 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	b672      	cpsid	i
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	b662      	cpsie	i
 80099fe:	61bb      	str	r3, [r7, #24]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a04:	f001 fe2a 	bl	800b65c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d024      	beq.n	8009a5e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	1e5a      	subs	r2, r3, #1
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d104      	bne.n	8009a2e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a24:	f001 fb82 	bl	800b12c <pvTaskIncrementMutexHeldCount>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00f      	beq.n	8009a56 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	3310      	adds	r3, #16
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 ffe8 	bl	800aa10 <xTaskRemoveFromEventList>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d007      	beq.n	8009a56 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a46:	4b55      	ldr	r3, [pc, #340]	; (8009b9c <xQueueSemaphoreTake+0x224>)
 8009a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a56:	f001 fe35 	bl	800b6c4 <vPortExitCritical>
				return pdPASS;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e099      	b.n	8009b92 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d113      	bne.n	8009a8c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00c      	beq.n	8009a84 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	b672      	cpsid	i
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	b662      	cpsie	i
 8009a7e:	617b      	str	r3, [r7, #20]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a84:	f001 fe1e 	bl	800b6c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e082      	b.n	8009b92 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 f81e 	bl	800aad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aa0:	f001 fe10 	bl	800b6c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009aa4:	f000 fda2 	bl	800a5ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa8:	f001 fdd8 	bl	800b65c <vPortEnterCritical>
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ab2:	b25b      	sxtb	r3, r3
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d103      	bne.n	8009ac2 <xQueueSemaphoreTake+0x14a>
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac8:	b25b      	sxtb	r3, r3
 8009aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ace:	d103      	bne.n	8009ad8 <xQueueSemaphoreTake+0x160>
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad8:	f001 fdf4 	bl	800b6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009adc:	463a      	mov	r2, r7
 8009ade:	f107 030c 	add.w	r3, r7, #12
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f80d 	bl	800ab04 <xTaskCheckForTimeOut>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d132      	bne.n	8009b56 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009af2:	f000 fa3a 	bl	8009f6a <prvIsQueueEmpty>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d026      	beq.n	8009b4a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009b04:	f001 fdaa 	bl	800b65c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 f965 	bl	800addc <xTaskPriorityInherit>
 8009b12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009b14:	f001 fdd6 	bl	800b6c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	3324      	adds	r3, #36	; 0x24
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f000 ff4f 	bl	800a9c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b28:	f000 f9cd 	bl	8009ec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b2c:	f000 fd6c 	bl	800a608 <xTaskResumeAll>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f47f af66 	bne.w	8009a04 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009b38:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <xQueueSemaphoreTake+0x224>)
 8009b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	e75c      	b.n	8009a04 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b4c:	f000 f9bb 	bl	8009ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b50:	f000 fd5a 	bl	800a608 <xTaskResumeAll>
 8009b54:	e756      	b.n	8009a04 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b58:	f000 f9b5 	bl	8009ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b5c:	f000 fd54 	bl	800a608 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b62:	f000 fa02 	bl	8009f6a <prvIsQueueEmpty>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f43f af4b 	beq.w	8009a04 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00d      	beq.n	8009b90 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009b74:	f001 fd72 	bl	800b65c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b7a:	f000 f8fc 	bl	8009d76 <prvGetDisinheritPriorityAfterTimeout>
 8009b7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b86:	4618      	mov	r0, r3
 8009b88:	f001 fa32 	bl	800aff0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b8c:	f001 fd9a 	bl	800b6c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3738      	adds	r7, #56	; 0x38
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	e000ed04 	.word	0xe000ed04

08009ba0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08e      	sub	sp, #56	; 0x38
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10c      	bne.n	8009bd0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	b672      	cpsid	i
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	b662      	cpsie	i
 8009bca:	623b      	str	r3, [r7, #32]
}
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <xQueueReceiveFromISR+0x3e>
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <xQueueReceiveFromISR+0x42>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e000      	b.n	8009be4 <xQueueReceiveFromISR+0x44>
 8009be2:	2300      	movs	r3, #0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10c      	bne.n	8009c02 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	b672      	cpsid	i
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	b662      	cpsie	i
 8009bfc:	61fb      	str	r3, [r7, #28]
}
 8009bfe:	bf00      	nop
 8009c00:	e7fe      	b.n	8009c00 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c02:	f001 fe13 	bl	800b82c <vPortValidateInterruptPriority>
	__asm volatile
 8009c06:	f3ef 8211 	mrs	r2, BASEPRI
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	b672      	cpsid	i
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	b662      	cpsie	i
 8009c1e:	61ba      	str	r2, [r7, #24]
 8009c20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d02f      	beq.n	8009c92 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c40:	f000 f91b 	bl	8009e7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	1e5a      	subs	r2, r3, #1
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c54:	d112      	bne.n	8009c7c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d016      	beq.n	8009c8c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	3310      	adds	r3, #16
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fed4 	bl	800aa10 <xTaskRemoveFromEventList>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00e      	beq.n	8009c8c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	e007      	b.n	8009c8c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c80:	3301      	adds	r3, #1
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	b25a      	sxtb	r2, r3
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c90:	e001      	b.n	8009c96 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f383 8811 	msr	BASEPRI, r3
}
 8009ca0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3738      	adds	r7, #56	; 0x38
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d10c      	bne.n	8009cd4 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	b672      	cpsid	i
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	b662      	cpsie	i
 8009cce:	60bb      	str	r3, [r7, #8]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8009cd4:	f001 fcc2 	bl	800b65c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009cde:	f001 fcf1 	bl	800b6c4 <vPortExitCritical>

	return uxReturn;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10c      	bne.n	8009d18 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	b672      	cpsid	i
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	b662      	cpsie	i
 8009d12:	60fb      	str	r3, [r7, #12]
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009d1e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009d20:	4618      	mov	r0, r3
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10c      	bne.n	8009d58 <vQueueDelete+0x2c>
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	b672      	cpsid	i
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	b662      	cpsie	i
 8009d52:	60bb      	str	r3, [r7, #8]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 f935 	bl	8009fc8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f001 fe6d 	bl	800ba48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d6e:	bf00      	nop
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f1c3 0307 	rsb	r3, r3, #7
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e001      	b.n	8009d98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d98:	68fb      	ldr	r3, [r7, #12]
	}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10d      	bne.n	8009de0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d14d      	bne.n	8009e68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 f883 	bl	800aedc <xTaskPriorityDisinherit>
 8009dd6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
 8009dde:	e043      	b.n	8009e68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d119      	bne.n	8009e1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6858      	ldr	r0, [r3, #4]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	461a      	mov	r2, r3
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	f011 fbd2 	bl	801b59a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	441a      	add	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d32b      	bcc.n	8009e68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	605a      	str	r2, [r3, #4]
 8009e18:	e026      	b.n	8009e68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68d8      	ldr	r0, [r3, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	461a      	mov	r2, r3
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	f011 fbb8 	bl	801b59a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	425b      	negs	r3, r3
 8009e34:	441a      	add	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d207      	bcs.n	8009e56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	425b      	negs	r3, r3
 8009e50:	441a      	add	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d105      	bne.n	8009e68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e70:	697b      	ldr	r3, [r7, #20]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d018      	beq.n	8009ebe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68da      	ldr	r2, [r3, #12]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e94:	441a      	add	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68da      	ldr	r2, [r3, #12]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d303      	bcc.n	8009eae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68d9      	ldr	r1, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6838      	ldr	r0, [r7, #0]
 8009eba:	f011 fb6e 	bl	801b59a <memcpy>
	}
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ece:	f001 fbc5 	bl	800b65c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009eda:	e011      	b.n	8009f00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d012      	beq.n	8009f0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3324      	adds	r3, #36	; 0x24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fd91 	bl	800aa10 <xTaskRemoveFromEventList>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ef4:	f000 fe6c 	bl	800abd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dce9      	bgt.n	8009edc <prvUnlockQueue+0x16>
 8009f08:	e000      	b.n	8009f0c <prvUnlockQueue+0x46>
					break;
 8009f0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	22ff      	movs	r2, #255	; 0xff
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f14:	f001 fbd6 	bl	800b6c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f18:	f001 fba0 	bl	800b65c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f24:	e011      	b.n	8009f4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d012      	beq.n	8009f54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fd6c 	bl	800aa10 <xTaskRemoveFromEventList>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f3e:	f000 fe47 	bl	800abd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dce9      	bgt.n	8009f26 <prvUnlockQueue+0x60>
 8009f52:	e000      	b.n	8009f56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	22ff      	movs	r2, #255	; 0xff
 8009f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f5e:	f001 fbb1 	bl	800b6c4 <vPortExitCritical>
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f72:	f001 fb73 	bl	800b65c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d102      	bne.n	8009f84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	e001      	b.n	8009f88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f88:	f001 fb9c 	bl	800b6c4 <vPortExitCritical>

	return xReturn;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f9e:	f001 fb5d 	bl	800b65c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d102      	bne.n	8009fb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	e001      	b.n	8009fb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f001 fb84 	bl	800b6c4 <vPortExitCritical>

	return xReturn;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e016      	b.n	800a004 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009fd6:	4a10      	ldr	r2, [pc, #64]	; (800a018 <vQueueUnregisterQueue+0x50>)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	4413      	add	r3, r2
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d10b      	bne.n	8009ffe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009fe6:	4a0c      	ldr	r2, [pc, #48]	; (800a018 <vQueueUnregisterQueue+0x50>)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2100      	movs	r1, #0
 8009fec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ff0:	4a09      	ldr	r2, [pc, #36]	; (800a018 <vQueueUnregisterQueue+0x50>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	605a      	str	r2, [r3, #4]
				break;
 8009ffc:	e006      	b.n	800a00c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3301      	adds	r3, #1
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b07      	cmp	r3, #7
 800a008:	d9e5      	bls.n	8009fd6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	200077a8 	.word	0x200077a8

0800a01c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08e      	sub	sp, #56	; 0x38
 800a020:	af04      	add	r7, sp, #16
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10c      	bne.n	800a04a <xTaskCreateStatic+0x2e>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	b672      	cpsid	i
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	b662      	cpsie	i
 800a044:	623b      	str	r3, [r7, #32]
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10c      	bne.n	800a06a <xTaskCreateStatic+0x4e>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	b672      	cpsid	i
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	b662      	cpsie	i
 800a064:	61fb      	str	r3, [r7, #28]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a06a:	23a0      	movs	r3, #160	; 0xa0
 800a06c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2ba0      	cmp	r3, #160	; 0xa0
 800a072:	d00c      	beq.n	800a08e <xTaskCreateStatic+0x72>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	b672      	cpsid	i
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	b662      	cpsie	i
 800a088:	61bb      	str	r3, [r7, #24]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a08e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	2b00      	cmp	r3, #0
 800a094:	d01e      	beq.n	800a0d4 <xTaskCreateStatic+0xb8>
 800a096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01b      	beq.n	800a0d4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	9303      	str	r3, [sp, #12]
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	9302      	str	r3, [sp, #8]
 800a0b6:	f107 0314 	add.w	r3, r7, #20
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 f850 	bl	800a16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0ce:	f000 f8ed 	bl	800a2ac <prvAddNewTaskToReadyList>
 800a0d2:	e001      	b.n	800a0d8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a0d8:	697b      	ldr	r3, [r7, #20]
	}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3728      	adds	r7, #40	; 0x28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b08c      	sub	sp, #48	; 0x30
 800a0e6:	af04      	add	r7, sp, #16
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	603b      	str	r3, [r7, #0]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a0f2:	88fb      	ldrh	r3, [r7, #6]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f001 fbdc 	bl	800b8b4 <pvPortMalloc>
 800a0fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00e      	beq.n	800a122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a104:	20a0      	movs	r0, #160	; 0xa0
 800a106:	f001 fbd5 	bl	800b8b4 <pvPortMalloc>
 800a10a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	631a      	str	r2, [r3, #48]	; 0x30
 800a118:	e005      	b.n	800a126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a11a:	6978      	ldr	r0, [r7, #20]
 800a11c:	f001 fc94 	bl	800ba48 <vPortFree>
 800a120:	e001      	b.n	800a126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d017      	beq.n	800a15c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a134:	88fa      	ldrh	r2, [r7, #6]
 800a136:	2300      	movs	r3, #0
 800a138:	9303      	str	r3, [sp, #12]
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	9302      	str	r3, [sp, #8]
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68b9      	ldr	r1, [r7, #8]
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 f80e 	bl	800a16c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a150:	69f8      	ldr	r0, [r7, #28]
 800a152:	f000 f8ab 	bl	800a2ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a156:	2301      	movs	r3, #1
 800a158:	61bb      	str	r3, [r7, #24]
 800a15a:	e002      	b.n	800a162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a15c:	f04f 33ff 	mov.w	r3, #4294967295
 800a160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a162:	69bb      	ldr	r3, [r7, #24]
	}
 800a164:	4618      	mov	r0, r3
 800a166:	3720      	adds	r7, #32
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a184:	440b      	add	r3, r1
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00c      	beq.n	800a1b8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	b672      	cpsid	i
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	b662      	cpsie	i
 800a1b2:	617b      	str	r3, [r7, #20]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d01f      	beq.n	800a1fe <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	e012      	b.n	800a1ea <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	7819      	ldrb	r1, [r3, #0]
 800a1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3334      	adds	r3, #52	; 0x34
 800a1d4:	460a      	mov	r2, r1
 800a1d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4413      	add	r3, r2
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d006      	beq.n	800a1f2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	2b0f      	cmp	r3, #15
 800a1ee:	d9e9      	bls.n	800a1c4 <prvInitialiseNewTask+0x58>
 800a1f0:	e000      	b.n	800a1f4 <prvInitialiseNewTask+0x88>
			{
				break;
 800a1f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1fc:	e003      	b.n	800a206 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	2b06      	cmp	r3, #6
 800a20a:	d901      	bls.n	800a210 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a20c:	2306      	movs	r3, #6
 800a20e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a214:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a21a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	2200      	movs	r2, #0
 800a220:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	3304      	adds	r3, #4
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fe55 	bl	8008ed6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	3318      	adds	r3, #24
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fe50 	bl	8008ed6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	f1c3 0207 	rsb	r2, r3, #7
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a24a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	2200      	movs	r2, #0
 800a258:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	334c      	adds	r3, #76	; 0x4c
 800a260:	224c      	movs	r2, #76	; 0x4c
 800a262:	2100      	movs	r1, #0
 800a264:	4618      	mov	r0, r3
 800a266:	f011 f8cd 	bl	801b404 <memset>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	4a0c      	ldr	r2, [pc, #48]	; (800a2a0 <prvInitialiseNewTask+0x134>)
 800a26e:	651a      	str	r2, [r3, #80]	; 0x50
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	4a0c      	ldr	r2, [pc, #48]	; (800a2a4 <prvInitialiseNewTask+0x138>)
 800a274:	655a      	str	r2, [r3, #84]	; 0x54
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	4a0b      	ldr	r2, [pc, #44]	; (800a2a8 <prvInitialiseNewTask+0x13c>)
 800a27a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	68f9      	ldr	r1, [r7, #12]
 800a280:	69b8      	ldr	r0, [r7, #24]
 800a282:	f001 f8dd 	bl	800b440 <pxPortInitialiseStack>
 800a286:	4602      	mov	r2, r0
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a296:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a298:	bf00      	nop
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	2003d23c 	.word	0x2003d23c
 800a2a4:	2003d2a4 	.word	0x2003d2a4
 800a2a8:	2003d30c 	.word	0x2003d30c

0800a2ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a2b4:	f001 f9d2 	bl	800b65c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a2b8:	4b2a      	ldr	r3, [pc, #168]	; (800a364 <prvAddNewTaskToReadyList+0xb8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	4a29      	ldr	r2, [pc, #164]	; (800a364 <prvAddNewTaskToReadyList+0xb8>)
 800a2c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a2c2:	4b29      	ldr	r3, [pc, #164]	; (800a368 <prvAddNewTaskToReadyList+0xbc>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d109      	bne.n	800a2de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a2ca:	4a27      	ldr	r2, [pc, #156]	; (800a368 <prvAddNewTaskToReadyList+0xbc>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a2d0:	4b24      	ldr	r3, [pc, #144]	; (800a364 <prvAddNewTaskToReadyList+0xb8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d110      	bne.n	800a2fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a2d8:	f000 fc9e 	bl	800ac18 <prvInitialiseTaskLists>
 800a2dc:	e00d      	b.n	800a2fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a2de:	4b23      	ldr	r3, [pc, #140]	; (800a36c <prvAddNewTaskToReadyList+0xc0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d109      	bne.n	800a2fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a2e6:	4b20      	ldr	r3, [pc, #128]	; (800a368 <prvAddNewTaskToReadyList+0xbc>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d802      	bhi.n	800a2fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a2f4:	4a1c      	ldr	r2, [pc, #112]	; (800a368 <prvAddNewTaskToReadyList+0xbc>)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a2fa:	4b1d      	ldr	r3, [pc, #116]	; (800a370 <prvAddNewTaskToReadyList+0xc4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	3301      	adds	r3, #1
 800a300:	4a1b      	ldr	r2, [pc, #108]	; (800a370 <prvAddNewTaskToReadyList+0xc4>)
 800a302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	2201      	movs	r2, #1
 800a30a:	409a      	lsls	r2, r3
 800a30c:	4b19      	ldr	r3, [pc, #100]	; (800a374 <prvAddNewTaskToReadyList+0xc8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4313      	orrs	r3, r2
 800a312:	4a18      	ldr	r2, [pc, #96]	; (800a374 <prvAddNewTaskToReadyList+0xc8>)
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4a15      	ldr	r2, [pc, #84]	; (800a378 <prvAddNewTaskToReadyList+0xcc>)
 800a324:	441a      	add	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3304      	adds	r3, #4
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7fe fddf 	bl	8008ef0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a332:	f001 f9c7 	bl	800b6c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a336:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <prvAddNewTaskToReadyList+0xc0>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00e      	beq.n	800a35c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a33e:	4b0a      	ldr	r3, [pc, #40]	; (800a368 <prvAddNewTaskToReadyList+0xbc>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a348:	429a      	cmp	r2, r3
 800a34a:	d207      	bcs.n	800a35c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a34c:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <prvAddNewTaskToReadyList+0xd0>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	200078e8 	.word	0x200078e8
 800a368:	200077e8 	.word	0x200077e8
 800a36c:	200078f4 	.word	0x200078f4
 800a370:	20007904 	.word	0x20007904
 800a374:	200078f0 	.word	0x200078f0
 800a378:	200077ec 	.word	0x200077ec
 800a37c:	e000ed04 	.word	0xe000ed04

0800a380 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a388:	f001 f968 	bl	800b65c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <vTaskDelete+0x18>
 800a392:	4b3a      	ldr	r3, [pc, #232]	; (800a47c <vTaskDelete+0xfc>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	e000      	b.n	800a39a <vTaskDelete+0x1a>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe fe02 	bl	8008faa <uxListRemove>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d115      	bne.n	800a3d8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	4933      	ldr	r1, [pc, #204]	; (800a480 <vTaskDelete+0x100>)
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	440b      	add	r3, r1
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <vTaskDelete+0x58>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	43da      	mvns	r2, r3
 800a3ce:	4b2d      	ldr	r3, [pc, #180]	; (800a484 <vTaskDelete+0x104>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	4a2b      	ldr	r2, [pc, #172]	; (800a484 <vTaskDelete+0x104>)
 800a3d6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3318      	adds	r3, #24
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fde0 	bl	8008faa <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a3ea:	4b27      	ldr	r3, [pc, #156]	; (800a488 <vTaskDelete+0x108>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	4a25      	ldr	r2, [pc, #148]	; (800a488 <vTaskDelete+0x108>)
 800a3f2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a3f4:	4b21      	ldr	r3, [pc, #132]	; (800a47c <vTaskDelete+0xfc>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d10b      	bne.n	800a416 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3304      	adds	r3, #4
 800a402:	4619      	mov	r1, r3
 800a404:	4821      	ldr	r0, [pc, #132]	; (800a48c <vTaskDelete+0x10c>)
 800a406:	f7fe fd73 	bl	8008ef0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a40a:	4b21      	ldr	r3, [pc, #132]	; (800a490 <vTaskDelete+0x110>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3301      	adds	r3, #1
 800a410:	4a1f      	ldr	r2, [pc, #124]	; (800a490 <vTaskDelete+0x110>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	e009      	b.n	800a42a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a416:	4b1f      	ldr	r3, [pc, #124]	; (800a494 <vTaskDelete+0x114>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	4a1d      	ldr	r2, [pc, #116]	; (800a494 <vTaskDelete+0x114>)
 800a41e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 fc67 	bl	800acf4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a426:	f000 fc9b 	bl	800ad60 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a42a:	f001 f94b 	bl	800b6c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a42e:	4b1a      	ldr	r3, [pc, #104]	; (800a498 <vTaskDelete+0x118>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d01d      	beq.n	800a472 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <vTaskDelete+0xfc>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d118      	bne.n	800a472 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a440:	4b16      	ldr	r3, [pc, #88]	; (800a49c <vTaskDelete+0x11c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00c      	beq.n	800a462 <vTaskDelete+0xe2>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	b672      	cpsid	i
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	b662      	cpsie	i
 800a45c:	60bb      	str	r3, [r7, #8]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800a462:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <vTaskDelete+0x120>)
 800a464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	200077e8 	.word	0x200077e8
 800a480:	200077ec 	.word	0x200077ec
 800a484:	200078f0 	.word	0x200078f0
 800a488:	20007904 	.word	0x20007904
 800a48c:	200078bc 	.word	0x200078bc
 800a490:	200078d0 	.word	0x200078d0
 800a494:	200078e8 	.word	0x200078e8
 800a498:	200078f4 	.word	0x200078f4
 800a49c:	20007910 	.word	0x20007910
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d019      	beq.n	800a4ea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <vTaskDelay+0x64>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00c      	beq.n	800a4d8 <vTaskDelay+0x34>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	b672      	cpsid	i
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	b662      	cpsie	i
 800a4d2:	60bb      	str	r3, [r7, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a4d8:	f000 f888 	bl	800a5ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 ff48 	bl	800b374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4e4:	f000 f890 	bl	800a608 <xTaskResumeAll>
 800a4e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d107      	bne.n	800a500 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <vTaskDelay+0x68>)
 800a4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a500:	bf00      	nop
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20007910 	.word	0x20007910
 800a50c:	e000ed04 	.word	0xe000ed04

0800a510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a51e:	463a      	mov	r2, r7
 800a520:	1d39      	adds	r1, r7, #4
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f7f6 f936 	bl	8000798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	9202      	str	r2, [sp, #8]
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	2300      	movs	r3, #0
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	2300      	movs	r3, #0
 800a53c:	460a      	mov	r2, r1
 800a53e:	4923      	ldr	r1, [pc, #140]	; (800a5cc <vTaskStartScheduler+0xbc>)
 800a540:	4823      	ldr	r0, [pc, #140]	; (800a5d0 <vTaskStartScheduler+0xc0>)
 800a542:	f7ff fd6b 	bl	800a01c <xTaskCreateStatic>
 800a546:	4603      	mov	r3, r0
 800a548:	4a22      	ldr	r2, [pc, #136]	; (800a5d4 <vTaskStartScheduler+0xc4>)
 800a54a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a54c:	4b21      	ldr	r3, [pc, #132]	; (800a5d4 <vTaskStartScheduler+0xc4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	e001      	b.n	800a55e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d11d      	bne.n	800a5a0 <vTaskStartScheduler+0x90>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	b672      	cpsid	i
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	b662      	cpsie	i
 800a578:	613b      	str	r3, [r7, #16]
}
 800a57a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a57c:	4b16      	ldr	r3, [pc, #88]	; (800a5d8 <vTaskStartScheduler+0xc8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	334c      	adds	r3, #76	; 0x4c
 800a582:	4a16      	ldr	r2, [pc, #88]	; (800a5dc <vTaskStartScheduler+0xcc>)
 800a584:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a586:	4b16      	ldr	r3, [pc, #88]	; (800a5e0 <vTaskStartScheduler+0xd0>)
 800a588:	f04f 32ff 	mov.w	r2, #4294967295
 800a58c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a58e:	4b15      	ldr	r3, [pc, #84]	; (800a5e4 <vTaskStartScheduler+0xd4>)
 800a590:	2201      	movs	r2, #1
 800a592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a594:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <vTaskStartScheduler+0xd8>)
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a59a:	f000 ffe1 	bl	800b560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a59e:	e010      	b.n	800a5c2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d10c      	bne.n	800a5c2 <vTaskStartScheduler+0xb2>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	b672      	cpsid	i
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	b662      	cpsie	i
 800a5bc:	60fb      	str	r3, [r7, #12]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <vTaskStartScheduler+0xb0>
}
 800a5c2:	bf00      	nop
 800a5c4:	3718      	adds	r7, #24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0801c498 	.word	0x0801c498
 800a5d0:	0800abe9 	.word	0x0800abe9
 800a5d4:	2000790c 	.word	0x2000790c
 800a5d8:	200077e8 	.word	0x200077e8
 800a5dc:	20000088 	.word	0x20000088
 800a5e0:	20007908 	.word	0x20007908
 800a5e4:	200078f4 	.word	0x200078f4
 800a5e8:	200078ec 	.word	0x200078ec

0800a5ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a5f0:	4b04      	ldr	r3, [pc, #16]	; (800a604 <vTaskSuspendAll+0x18>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	4a03      	ldr	r2, [pc, #12]	; (800a604 <vTaskSuspendAll+0x18>)
 800a5f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a5fa:	bf00      	nop
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	20007910 	.word	0x20007910

0800a608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a60e:	2300      	movs	r3, #0
 800a610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a612:	2300      	movs	r3, #0
 800a614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a616:	4b42      	ldr	r3, [pc, #264]	; (800a720 <xTaskResumeAll+0x118>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10c      	bne.n	800a638 <xTaskResumeAll+0x30>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	b672      	cpsid	i
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	b662      	cpsie	i
 800a632:	603b      	str	r3, [r7, #0]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a638:	f001 f810 	bl	800b65c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a63c:	4b38      	ldr	r3, [pc, #224]	; (800a720 <xTaskResumeAll+0x118>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3b01      	subs	r3, #1
 800a642:	4a37      	ldr	r2, [pc, #220]	; (800a720 <xTaskResumeAll+0x118>)
 800a644:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a646:	4b36      	ldr	r3, [pc, #216]	; (800a720 <xTaskResumeAll+0x118>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d161      	bne.n	800a712 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a64e:	4b35      	ldr	r3, [pc, #212]	; (800a724 <xTaskResumeAll+0x11c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d05d      	beq.n	800a712 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a656:	e02e      	b.n	800a6b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a658:	4b33      	ldr	r3, [pc, #204]	; (800a728 <xTaskResumeAll+0x120>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	3318      	adds	r3, #24
 800a664:	4618      	mov	r0, r3
 800a666:	f7fe fca0 	bl	8008faa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3304      	adds	r3, #4
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fc9b 	bl	8008faa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	2201      	movs	r2, #1
 800a67a:	409a      	lsls	r2, r3
 800a67c:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <xTaskResumeAll+0x124>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4313      	orrs	r3, r2
 800a682:	4a2a      	ldr	r2, [pc, #168]	; (800a72c <xTaskResumeAll+0x124>)
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4a27      	ldr	r2, [pc, #156]	; (800a730 <xTaskResumeAll+0x128>)
 800a694:	441a      	add	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3304      	adds	r3, #4
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f7fe fc27 	bl	8008ef0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a6:	4b23      	ldr	r3, [pc, #140]	; (800a734 <xTaskResumeAll+0x12c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d302      	bcc.n	800a6b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6b0:	4b21      	ldr	r3, [pc, #132]	; (800a738 <xTaskResumeAll+0x130>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6b6:	4b1c      	ldr	r3, [pc, #112]	; (800a728 <xTaskResumeAll+0x120>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1cc      	bne.n	800a658 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6c4:	f000 fb4c 	bl	800ad60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a6c8:	4b1c      	ldr	r3, [pc, #112]	; (800a73c <xTaskResumeAll+0x134>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d010      	beq.n	800a6f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6d4:	f000 f858 	bl	800a788 <xTaskIncrementTick>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a6de:	4b16      	ldr	r3, [pc, #88]	; (800a738 <xTaskResumeAll+0x130>)
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1f1      	bne.n	800a6d4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a6f0:	4b12      	ldr	r3, [pc, #72]	; (800a73c <xTaskResumeAll+0x134>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6f6:	4b10      	ldr	r3, [pc, #64]	; (800a738 <xTaskResumeAll+0x130>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6fe:	2301      	movs	r3, #1
 800a700:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a702:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <xTaskResumeAll+0x138>)
 800a704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a712:	f000 ffd7 	bl	800b6c4 <vPortExitCritical>

	return xAlreadyYielded;
 800a716:	68bb      	ldr	r3, [r7, #8]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	20007910 	.word	0x20007910
 800a724:	200078e8 	.word	0x200078e8
 800a728:	200078a8 	.word	0x200078a8
 800a72c:	200078f0 	.word	0x200078f0
 800a730:	200077ec 	.word	0x200077ec
 800a734:	200077e8 	.word	0x200077e8
 800a738:	200078fc 	.word	0x200078fc
 800a73c:	200078f8 	.word	0x200078f8
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <xTaskGetTickCount+0x1c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a750:	687b      	ldr	r3, [r7, #4]
}
 800a752:	4618      	mov	r0, r3
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	200078ec 	.word	0x200078ec

0800a764 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a76a:	f001 f85f 	bl	800b82c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a76e:	2300      	movs	r3, #0
 800a770:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a772:	4b04      	ldr	r3, [pc, #16]	; (800a784 <xTaskGetTickCountFromISR+0x20>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a778:	683b      	ldr	r3, [r7, #0]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	200078ec 	.word	0x200078ec

0800a788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b086      	sub	sp, #24
 800a78c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a78e:	2300      	movs	r3, #0
 800a790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a792:	4b4f      	ldr	r3, [pc, #316]	; (800a8d0 <xTaskIncrementTick+0x148>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f040 808a 	bne.w	800a8b0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a79c:	4b4d      	ldr	r3, [pc, #308]	; (800a8d4 <xTaskIncrementTick+0x14c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7a4:	4a4b      	ldr	r2, [pc, #300]	; (800a8d4 <xTaskIncrementTick+0x14c>)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d122      	bne.n	800a7f6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7b0:	4b49      	ldr	r3, [pc, #292]	; (800a8d8 <xTaskIncrementTick+0x150>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00c      	beq.n	800a7d4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	b672      	cpsid	i
 800a7c0:	f383 8811 	msr	BASEPRI, r3
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	b662      	cpsie	i
 800a7ce:	603b      	str	r3, [r7, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <xTaskIncrementTick+0x4a>
 800a7d4:	4b40      	ldr	r3, [pc, #256]	; (800a8d8 <xTaskIncrementTick+0x150>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	4b40      	ldr	r3, [pc, #256]	; (800a8dc <xTaskIncrementTick+0x154>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a3e      	ldr	r2, [pc, #248]	; (800a8d8 <xTaskIncrementTick+0x150>)
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	4a3e      	ldr	r2, [pc, #248]	; (800a8dc <xTaskIncrementTick+0x154>)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	4b3d      	ldr	r3, [pc, #244]	; (800a8e0 <xTaskIncrementTick+0x158>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	4a3c      	ldr	r2, [pc, #240]	; (800a8e0 <xTaskIncrementTick+0x158>)
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	f000 fab5 	bl	800ad60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7f6:	4b3b      	ldr	r3, [pc, #236]	; (800a8e4 <xTaskIncrementTick+0x15c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d348      	bcc.n	800a892 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a800:	4b35      	ldr	r3, [pc, #212]	; (800a8d8 <xTaskIncrementTick+0x150>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a80a:	4b36      	ldr	r3, [pc, #216]	; (800a8e4 <xTaskIncrementTick+0x15c>)
 800a80c:	f04f 32ff 	mov.w	r2, #4294967295
 800a810:	601a      	str	r2, [r3, #0]
					break;
 800a812:	e03e      	b.n	800a892 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a814:	4b30      	ldr	r3, [pc, #192]	; (800a8d8 <xTaskIncrementTick+0x150>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d203      	bcs.n	800a834 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a82c:	4a2d      	ldr	r2, [pc, #180]	; (800a8e4 <xTaskIncrementTick+0x15c>)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a832:	e02e      	b.n	800a892 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	3304      	adds	r3, #4
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe fbb6 	bl	8008faa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a842:	2b00      	cmp	r3, #0
 800a844:	d004      	beq.n	800a850 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3318      	adds	r3, #24
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fbad 	bl	8008faa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	2201      	movs	r2, #1
 800a856:	409a      	lsls	r2, r3
 800a858:	4b23      	ldr	r3, [pc, #140]	; (800a8e8 <xTaskIncrementTick+0x160>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	4a22      	ldr	r2, [pc, #136]	; (800a8e8 <xTaskIncrementTick+0x160>)
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4a1f      	ldr	r2, [pc, #124]	; (800a8ec <xTaskIncrementTick+0x164>)
 800a870:	441a      	add	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	3304      	adds	r3, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7fe fb39 	bl	8008ef0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a882:	4b1b      	ldr	r3, [pc, #108]	; (800a8f0 <xTaskIncrementTick+0x168>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a888:	429a      	cmp	r2, r3
 800a88a:	d3b9      	bcc.n	800a800 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a88c:	2301      	movs	r3, #1
 800a88e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a890:	e7b6      	b.n	800a800 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a892:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <xTaskIncrementTick+0x168>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	4914      	ldr	r1, [pc, #80]	; (800a8ec <xTaskIncrementTick+0x164>)
 800a89a:	4613      	mov	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	440b      	add	r3, r1
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d907      	bls.n	800a8ba <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e004      	b.n	800a8ba <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a8b0:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <xTaskIncrementTick+0x16c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	4a0f      	ldr	r2, [pc, #60]	; (800a8f4 <xTaskIncrementTick+0x16c>)
 800a8b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a8ba:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <xTaskIncrementTick+0x170>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a8c6:	697b      	ldr	r3, [r7, #20]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20007910 	.word	0x20007910
 800a8d4:	200078ec 	.word	0x200078ec
 800a8d8:	200078a0 	.word	0x200078a0
 800a8dc:	200078a4 	.word	0x200078a4
 800a8e0:	20007900 	.word	0x20007900
 800a8e4:	20007908 	.word	0x20007908
 800a8e8:	200078f0 	.word	0x200078f0
 800a8ec:	200077ec 	.word	0x200077ec
 800a8f0:	200077e8 	.word	0x200077e8
 800a8f4:	200078f8 	.word	0x200078f8
 800a8f8:	200078fc 	.word	0x200078fc

0800a8fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b087      	sub	sp, #28
 800a900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a902:	4b2a      	ldr	r3, [pc, #168]	; (800a9ac <vTaskSwitchContext+0xb0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a90a:	4b29      	ldr	r3, [pc, #164]	; (800a9b0 <vTaskSwitchContext+0xb4>)
 800a90c:	2201      	movs	r2, #1
 800a90e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a910:	e046      	b.n	800a9a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a912:	4b27      	ldr	r3, [pc, #156]	; (800a9b0 <vTaskSwitchContext+0xb4>)
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a918:	4b26      	ldr	r3, [pc, #152]	; (800a9b4 <vTaskSwitchContext+0xb8>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	fab3 f383 	clz	r3, r3
 800a924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	f1c3 031f 	rsb	r3, r3, #31
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	4922      	ldr	r1, [pc, #136]	; (800a9b8 <vTaskSwitchContext+0xbc>)
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	440b      	add	r3, r1
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10c      	bne.n	800a95c <vTaskSwitchContext+0x60>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	b672      	cpsid	i
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	b662      	cpsie	i
 800a956:	607b      	str	r3, [r7, #4]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <vTaskSwitchContext+0x5e>
 800a95c:	697a      	ldr	r2, [r7, #20]
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a14      	ldr	r2, [pc, #80]	; (800a9b8 <vTaskSwitchContext+0xbc>)
 800a968:	4413      	add	r3, r2
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	3308      	adds	r3, #8
 800a97e:	429a      	cmp	r2, r3
 800a980:	d104      	bne.n	800a98c <vTaskSwitchContext+0x90>
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	605a      	str	r2, [r3, #4]
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	4a0a      	ldr	r2, [pc, #40]	; (800a9bc <vTaskSwitchContext+0xc0>)
 800a994:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <vTaskSwitchContext+0xc0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	334c      	adds	r3, #76	; 0x4c
 800a99c:	4a08      	ldr	r2, [pc, #32]	; (800a9c0 <vTaskSwitchContext+0xc4>)
 800a99e:	6013      	str	r3, [r2, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20007910 	.word	0x20007910
 800a9b0:	200078fc 	.word	0x200078fc
 800a9b4:	200078f0 	.word	0x200078f0
 800a9b8:	200077ec 	.word	0x200077ec
 800a9bc:	200077e8 	.word	0x200077e8
 800a9c0:	20000088 	.word	0x20000088

0800a9c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10c      	bne.n	800a9ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	b672      	cpsid	i
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	b662      	cpsie	i
 800a9e8:	60fb      	str	r3, [r7, #12]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9ee:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <vTaskPlaceOnEventList+0x48>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3318      	adds	r3, #24
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7fe fa9e 	bl	8008f38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	6838      	ldr	r0, [r7, #0]
 800aa00:	f000 fcb8 	bl	800b374 <prvAddCurrentTaskToDelayedList>
}
 800aa04:	bf00      	nop
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	200077e8 	.word	0x200077e8

0800aa10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10c      	bne.n	800aa40 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	b672      	cpsid	i
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	b662      	cpsie	i
 800aa3a:	60fb      	str	r3, [r7, #12]
}
 800aa3c:	bf00      	nop
 800aa3e:	e7fe      	b.n	800aa3e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	3318      	adds	r3, #24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fab0 	bl	8008faa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa4a:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <xTaskRemoveFromEventList+0xb0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d11c      	bne.n	800aa8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3304      	adds	r3, #4
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe faa7 	bl	8008faa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	2201      	movs	r2, #1
 800aa62:	409a      	lsls	r2, r3
 800aa64:	4b17      	ldr	r3, [pc, #92]	; (800aac4 <xTaskRemoveFromEventList+0xb4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <xTaskRemoveFromEventList+0xb4>)
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa72:	4613      	mov	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4a13      	ldr	r2, [pc, #76]	; (800aac8 <xTaskRemoveFromEventList+0xb8>)
 800aa7c:	441a      	add	r2, r3
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	3304      	adds	r3, #4
 800aa82:	4619      	mov	r1, r3
 800aa84:	4610      	mov	r0, r2
 800aa86:	f7fe fa33 	bl	8008ef0 <vListInsertEnd>
 800aa8a:	e005      	b.n	800aa98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	3318      	adds	r3, #24
 800aa90:	4619      	mov	r1, r3
 800aa92:	480e      	ldr	r0, [pc, #56]	; (800aacc <xTaskRemoveFromEventList+0xbc>)
 800aa94:	f7fe fa2c 	bl	8008ef0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9c:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <xTaskRemoveFromEventList+0xc0>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d905      	bls.n	800aab2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aaaa:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <xTaskRemoveFromEventList+0xc4>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e001      	b.n	800aab6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aab6:	697b      	ldr	r3, [r7, #20]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20007910 	.word	0x20007910
 800aac4:	200078f0 	.word	0x200078f0
 800aac8:	200077ec 	.word	0x200077ec
 800aacc:	200078a8 	.word	0x200078a8
 800aad0:	200077e8 	.word	0x200077e8
 800aad4:	200078fc 	.word	0x200078fc

0800aad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aae0:	4b06      	ldr	r3, [pc, #24]	; (800aafc <vTaskInternalSetTimeOutState+0x24>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aae8:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <vTaskInternalSetTimeOutState+0x28>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	605a      	str	r2, [r3, #4]
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20007900 	.word	0x20007900
 800ab00:	200078ec 	.word	0x200078ec

0800ab04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10c      	bne.n	800ab2e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	b672      	cpsid	i
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	b662      	cpsie	i
 800ab28:	613b      	str	r3, [r7, #16]
}
 800ab2a:	bf00      	nop
 800ab2c:	e7fe      	b.n	800ab2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10c      	bne.n	800ab4e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	b672      	cpsid	i
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	b662      	cpsie	i
 800ab48:	60fb      	str	r3, [r7, #12]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ab4e:	f000 fd85 	bl	800b65c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab52:	4b1d      	ldr	r3, [pc, #116]	; (800abc8 <xTaskCheckForTimeOut+0xc4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d102      	bne.n	800ab72 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	e023      	b.n	800abba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4b15      	ldr	r3, [pc, #84]	; (800abcc <xTaskCheckForTimeOut+0xc8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d007      	beq.n	800ab8e <xTaskCheckForTimeOut+0x8a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d302      	bcc.n	800ab8e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	e015      	b.n	800abba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d20b      	bcs.n	800abb0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ff97 	bl	800aad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abaa:	2300      	movs	r3, #0
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e004      	b.n	800abba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abb6:	2301      	movs	r3, #1
 800abb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abba:	f000 fd83 	bl	800b6c4 <vPortExitCritical>

	return xReturn;
 800abbe:	69fb      	ldr	r3, [r7, #28]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	200078ec 	.word	0x200078ec
 800abcc:	20007900 	.word	0x20007900

0800abd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abd4:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <vTaskMissedYield+0x14>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
}
 800abda:	bf00      	nop
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	200078fc 	.word	0x200078fc

0800abe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800abf0:	f000 f852 	bl	800ac98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abf4:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <prvIdleTask+0x28>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d9f9      	bls.n	800abf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <prvIdleTask+0x2c>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac0c:	e7f0      	b.n	800abf0 <prvIdleTask+0x8>
 800ac0e:	bf00      	nop
 800ac10:	200077ec 	.word	0x200077ec
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e00c      	b.n	800ac3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4a12      	ldr	r2, [pc, #72]	; (800ac78 <prvInitialiseTaskLists+0x60>)
 800ac30:	4413      	add	r3, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe f92f 	bl	8008e96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2b06      	cmp	r3, #6
 800ac42:	d9ef      	bls.n	800ac24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac44:	480d      	ldr	r0, [pc, #52]	; (800ac7c <prvInitialiseTaskLists+0x64>)
 800ac46:	f7fe f926 	bl	8008e96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac4a:	480d      	ldr	r0, [pc, #52]	; (800ac80 <prvInitialiseTaskLists+0x68>)
 800ac4c:	f7fe f923 	bl	8008e96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac50:	480c      	ldr	r0, [pc, #48]	; (800ac84 <prvInitialiseTaskLists+0x6c>)
 800ac52:	f7fe f920 	bl	8008e96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac56:	480c      	ldr	r0, [pc, #48]	; (800ac88 <prvInitialiseTaskLists+0x70>)
 800ac58:	f7fe f91d 	bl	8008e96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac5c:	480b      	ldr	r0, [pc, #44]	; (800ac8c <prvInitialiseTaskLists+0x74>)
 800ac5e:	f7fe f91a 	bl	8008e96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac62:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <prvInitialiseTaskLists+0x78>)
 800ac64:	4a05      	ldr	r2, [pc, #20]	; (800ac7c <prvInitialiseTaskLists+0x64>)
 800ac66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <prvInitialiseTaskLists+0x7c>)
 800ac6a:	4a05      	ldr	r2, [pc, #20]	; (800ac80 <prvInitialiseTaskLists+0x68>)
 800ac6c:	601a      	str	r2, [r3, #0]
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	200077ec 	.word	0x200077ec
 800ac7c:	20007878 	.word	0x20007878
 800ac80:	2000788c 	.word	0x2000788c
 800ac84:	200078a8 	.word	0x200078a8
 800ac88:	200078bc 	.word	0x200078bc
 800ac8c:	200078d4 	.word	0x200078d4
 800ac90:	200078a0 	.word	0x200078a0
 800ac94:	200078a4 	.word	0x200078a4

0800ac98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac9e:	e019      	b.n	800acd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aca0:	f000 fcdc 	bl	800b65c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca4:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <prvCheckTasksWaitingTermination+0x50>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe f97a 	bl	8008faa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acb6:	4b0d      	ldr	r3, [pc, #52]	; (800acec <prvCheckTasksWaitingTermination+0x54>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3b01      	subs	r3, #1
 800acbc:	4a0b      	ldr	r2, [pc, #44]	; (800acec <prvCheckTasksWaitingTermination+0x54>)
 800acbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acc0:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	4a0a      	ldr	r2, [pc, #40]	; (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acca:	f000 fcfb 	bl	800b6c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f810 	bl	800acf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <prvCheckTasksWaitingTermination+0x58>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e1      	bne.n	800aca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	200078bc 	.word	0x200078bc
 800acec:	200078e8 	.word	0x200078e8
 800acf0:	200078d0 	.word	0x200078d0

0800acf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	334c      	adds	r3, #76	; 0x4c
 800ad00:	4618      	mov	r0, r3
 800ad02:	f010 fb97 	bl	801b434 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d108      	bne.n	800ad22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fe97 	bl	800ba48 <vPortFree>
				vPortFree( pxTCB );
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fe94 	bl	800ba48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad20:	e01a      	b.n	800ad58 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d103      	bne.n	800ad34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fe8b 	bl	800ba48 <vPortFree>
	}
 800ad32:	e011      	b.n	800ad58 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d00c      	beq.n	800ad58 <prvDeleteTCB+0x64>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	b672      	cpsid	i
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	b662      	cpsie	i
 800ad52:	60fb      	str	r3, [r7, #12]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <prvDeleteTCB+0x62>
	}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad66:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <prvResetNextTaskUnblockTime+0x38>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d104      	bne.n	800ad7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <prvResetNextTaskUnblockTime+0x3c>)
 800ad72:	f04f 32ff 	mov.w	r2, #4294967295
 800ad76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad78:	e008      	b.n	800ad8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7a:	4b07      	ldr	r3, [pc, #28]	; (800ad98 <prvResetNextTaskUnblockTime+0x38>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	4a04      	ldr	r2, [pc, #16]	; (800ad9c <prvResetNextTaskUnblockTime+0x3c>)
 800ad8a:	6013      	str	r3, [r2, #0]
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	200078a0 	.word	0x200078a0
 800ad9c:	20007908 	.word	0x20007908

0800ada0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ada6:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <xTaskGetSchedulerState+0x34>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adae:	2301      	movs	r3, #1
 800adb0:	607b      	str	r3, [r7, #4]
 800adb2:	e008      	b.n	800adc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adb4:	4b08      	ldr	r3, [pc, #32]	; (800add8 <xTaskGetSchedulerState+0x38>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adbc:	2302      	movs	r3, #2
 800adbe:	607b      	str	r3, [r7, #4]
 800adc0:	e001      	b.n	800adc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adc2:	2300      	movs	r3, #0
 800adc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adc6:	687b      	ldr	r3, [r7, #4]
	}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	200078f4 	.word	0x200078f4
 800add8:	20007910 	.word	0x20007910

0800addc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d069      	beq.n	800aec6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	4b36      	ldr	r3, [pc, #216]	; (800aed0 <xTaskPriorityInherit+0xf4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d259      	bcs.n	800aeb4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	db06      	blt.n	800ae16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae08:	4b31      	ldr	r3, [pc, #196]	; (800aed0 <xTaskPriorityInherit+0xf4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	f1c3 0207 	rsb	r2, r3, #7
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	6959      	ldr	r1, [r3, #20]
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4a2b      	ldr	r2, [pc, #172]	; (800aed4 <xTaskPriorityInherit+0xf8>)
 800ae28:	4413      	add	r3, r2
 800ae2a:	4299      	cmp	r1, r3
 800ae2c:	d13a      	bne.n	800aea4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3304      	adds	r3, #4
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe f8b9 	bl	8008faa <uxListRemove>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d115      	bne.n	800ae6a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae42:	4924      	ldr	r1, [pc, #144]	; (800aed4 <xTaskPriorityInherit+0xf8>)
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	440b      	add	r3, r1
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xTaskPriorityInherit+0x8e>
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae58:	2201      	movs	r2, #1
 800ae5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5e:	43da      	mvns	r2, r3
 800ae60:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <xTaskPriorityInherit+0xfc>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4013      	ands	r3, r2
 800ae66:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <xTaskPriorityInherit+0xfc>)
 800ae68:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae6a:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <xTaskPriorityInherit+0xf4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	2201      	movs	r2, #1
 800ae7a:	409a      	lsls	r2, r3
 800ae7c:	4b16      	ldr	r3, [pc, #88]	; (800aed8 <xTaskPriorityInherit+0xfc>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <xTaskPriorityInherit+0xfc>)
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4a10      	ldr	r2, [pc, #64]	; (800aed4 <xTaskPriorityInherit+0xf8>)
 800ae94:	441a      	add	r2, r3
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	3304      	adds	r3, #4
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	f7fe f827 	bl	8008ef0 <vListInsertEnd>
 800aea2:	e004      	b.n	800aeae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <xTaskPriorityInherit+0xf4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	e008      	b.n	800aec6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb8:	4b05      	ldr	r3, [pc, #20]	; (800aed0 <xTaskPriorityInherit+0xf4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d201      	bcs.n	800aec6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aec2:	2301      	movs	r3, #1
 800aec4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aec6:	68fb      	ldr	r3, [r7, #12]
	}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	200077e8 	.word	0x200077e8
 800aed4:	200077ec 	.word	0x200077ec
 800aed8:	200078f0 	.word	0x200078f0

0800aedc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aee8:	2300      	movs	r3, #0
 800aeea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d072      	beq.n	800afd8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aef2:	4b3c      	ldr	r3, [pc, #240]	; (800afe4 <xTaskPriorityDisinherit+0x108>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d00c      	beq.n	800af16 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	b672      	cpsid	i
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	b662      	cpsie	i
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10c      	bne.n	800af38 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	b672      	cpsid	i
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	b662      	cpsie	i
 800af32:	60bb      	str	r3, [r7, #8]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d044      	beq.n	800afd8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af52:	2b00      	cmp	r3, #0
 800af54:	d140      	bne.n	800afd8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	3304      	adds	r3, #4
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe f825 	bl	8008faa <uxListRemove>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d115      	bne.n	800af92 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6a:	491f      	ldr	r1, [pc, #124]	; (800afe8 <xTaskPriorityDisinherit+0x10c>)
 800af6c:	4613      	mov	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	4413      	add	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	440b      	add	r3, r1
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xTaskPriorityDisinherit+0xb6>
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	2201      	movs	r2, #1
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	43da      	mvns	r2, r3
 800af88:	4b18      	ldr	r3, [pc, #96]	; (800afec <xTaskPriorityDisinherit+0x110>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4013      	ands	r3, r2
 800af8e:	4a17      	ldr	r2, [pc, #92]	; (800afec <xTaskPriorityDisinherit+0x110>)
 800af90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9e:	f1c3 0207 	rsb	r2, r3, #7
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	2201      	movs	r2, #1
 800afac:	409a      	lsls	r2, r3
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <xTaskPriorityDisinherit+0x110>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	4a0d      	ldr	r2, [pc, #52]	; (800afec <xTaskPriorityDisinherit+0x110>)
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4a08      	ldr	r2, [pc, #32]	; (800afe8 <xTaskPriorityDisinherit+0x10c>)
 800afc6:	441a      	add	r2, r3
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	3304      	adds	r3, #4
 800afcc:	4619      	mov	r1, r3
 800afce:	4610      	mov	r0, r2
 800afd0:	f7fd ff8e 	bl	8008ef0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afd4:	2301      	movs	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afd8:	697b      	ldr	r3, [r7, #20]
	}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	200077e8 	.word	0x200077e8
 800afe8:	200077ec 	.word	0x200077ec
 800afec:	200078f0 	.word	0x200078f0

0800aff0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800affe:	2301      	movs	r3, #1
 800b000:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8087 	beq.w	800b118 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10c      	bne.n	800b02c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	b672      	cpsid	i
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	b662      	cpsie	i
 800b026:	60fb      	str	r3, [r7, #12]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d902      	bls.n	800b03c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	e002      	b.n	800b042 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b040:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	69fa      	ldr	r2, [r7, #28]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d065      	beq.n	800b118 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	429a      	cmp	r2, r3
 800b054:	d160      	bne.n	800b118 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b056:	4b32      	ldr	r3, [pc, #200]	; (800b120 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d10c      	bne.n	800b07a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	b672      	cpsid	i
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	b662      	cpsie	i
 800b074:	60bb      	str	r3, [r7, #8]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	db04      	blt.n	800b098 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	f1c3 0207 	rsb	r2, r3, #7
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	6959      	ldr	r1, [r3, #20]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4a1f      	ldr	r2, [pc, #124]	; (800b124 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b0a8:	4413      	add	r3, r2
 800b0aa:	4299      	cmp	r1, r3
 800b0ac:	d134      	bne.n	800b118 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fd ff79 	bl	8008faa <uxListRemove>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d115      	bne.n	800b0ea <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c2:	4918      	ldr	r1, [pc, #96]	; (800b124 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10a      	bne.n	800b0ea <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	2201      	movs	r2, #1
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	43da      	mvns	r2, r3
 800b0e0:	4b11      	ldr	r3, [pc, #68]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	4a10      	ldr	r2, [pc, #64]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b0e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	409a      	lsls	r2, r3
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	4a0b      	ldr	r2, [pc, #44]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4a06      	ldr	r2, [pc, #24]	; (800b124 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b10a:	441a      	add	r2, r3
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	3304      	adds	r3, #4
 800b110:	4619      	mov	r1, r3
 800b112:	4610      	mov	r0, r2
 800b114:	f7fd feec 	bl	8008ef0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b118:	bf00      	nop
 800b11a:	3720      	adds	r7, #32
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	200077e8 	.word	0x200077e8
 800b124:	200077ec 	.word	0x200077ec
 800b128:	200078f0 	.word	0x200078f0

0800b12c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b130:	4b07      	ldr	r3, [pc, #28]	; (800b150 <pvTaskIncrementMutexHeldCount+0x24>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d004      	beq.n	800b142 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <pvTaskIncrementMutexHeldCount+0x24>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b13e:	3201      	adds	r2, #1
 800b140:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b142:	4b03      	ldr	r3, [pc, #12]	; (800b150 <pvTaskIncrementMutexHeldCount+0x24>)
 800b144:	681b      	ldr	r3, [r3, #0]
	}
 800b146:	4618      	mov	r0, r3
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	200077e8 	.word	0x200077e8

0800b154 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b15e:	f000 fa7d 	bl	800b65c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b162:	4b20      	ldr	r3, [pc, #128]	; (800b1e4 <ulTaskNotifyTake+0x90>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d113      	bne.n	800b196 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b16e:	4b1d      	ldr	r3, [pc, #116]	; (800b1e4 <ulTaskNotifyTake+0x90>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00b      	beq.n	800b196 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b17e:	2101      	movs	r1, #1
 800b180:	6838      	ldr	r0, [r7, #0]
 800b182:	f000 f8f7 	bl	800b374 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b186:	4b18      	ldr	r3, [pc, #96]	; (800b1e8 <ulTaskNotifyTake+0x94>)
 800b188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b196:	f000 fa95 	bl	800b6c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b19a:	f000 fa5f 	bl	800b65c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b19e:	4b11      	ldr	r3, [pc, #68]	; (800b1e4 <ulTaskNotifyTake+0x90>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1a6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00e      	beq.n	800b1cc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b1b4:	4b0b      	ldr	r3, [pc, #44]	; (800b1e4 <ulTaskNotifyTake+0x90>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b1be:	e005      	b.n	800b1cc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b1c0:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <ulTaskNotifyTake+0x90>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	3a01      	subs	r2, #1
 800b1c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b1cc:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <ulTaskNotifyTake+0x90>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800b1d6:	f000 fa75 	bl	800b6c4 <vPortExitCritical>

		return ulReturn;
 800b1da:	68fb      	ldr	r3, [r7, #12]
	}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	200077e8 	.word	0x200077e8
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08a      	sub	sp, #40	; 0x28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10c      	bne.n	800b220 <xTaskGenericNotify+0x34>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20a:	b672      	cpsid	i
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	b662      	cpsie	i
 800b21a:	61bb      	str	r3, [r7, #24]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b224:	f000 fa1a 	bl	800b65c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d004      	beq.n	800b238 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b23e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	2202      	movs	r2, #2
 800b244:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	2b04      	cmp	r3, #4
 800b24c:	d82d      	bhi.n	800b2aa <xTaskGenericNotify+0xbe>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <xTaskGenericNotify+0x68>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b2d1 	.word	0x0800b2d1
 800b258:	0800b269 	.word	0x0800b269
 800b25c:	0800b27b 	.word	0x0800b27b
 800b260:	0800b28b 	.word	0x0800b28b
 800b264:	0800b295 	.word	0x0800b295
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	431a      	orrs	r2, r3
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b278:	e02d      	b.n	800b2d6 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b288:	e025      	b.n	800b2d6 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b292:	e020      	b.n	800b2d6 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b294:	7ffb      	ldrb	r3, [r7, #31]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d004      	beq.n	800b2a4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b2a2:	e018      	b.n	800b2d6 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b2a8:	e015      	b.n	800b2d6 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b2aa:	6a3b      	ldr	r3, [r7, #32]
 800b2ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b4:	d00e      	beq.n	800b2d4 <xTaskGenericNotify+0xe8>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	b672      	cpsid	i
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	b662      	cpsie	i
 800b2ca:	617b      	str	r3, [r7, #20]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <xTaskGenericNotify+0xe2>
					break;
 800b2d0:	bf00      	nop
 800b2d2:	e000      	b.n	800b2d6 <xTaskGenericNotify+0xea>

					break;
 800b2d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b2d6:	7ffb      	ldrb	r3, [r7, #31]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d13b      	bne.n	800b354 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fd fe62 	bl	8008faa <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	409a      	lsls	r2, r3
 800b2ee:	4b1d      	ldr	r3, [pc, #116]	; (800b364 <xTaskGenericNotify+0x178>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	4a1b      	ldr	r2, [pc, #108]	; (800b364 <xTaskGenericNotify+0x178>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a18      	ldr	r2, [pc, #96]	; (800b368 <xTaskGenericNotify+0x17c>)
 800b306:	441a      	add	r2, r3
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fd fdee 	bl	8008ef0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00c      	beq.n	800b336 <xTaskGenericNotify+0x14a>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	b672      	cpsid	i
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	b662      	cpsie	i
 800b330:	613b      	str	r3, [r7, #16]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33a:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <xTaskGenericNotify+0x180>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	429a      	cmp	r2, r3
 800b342:	d907      	bls.n	800b354 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <xTaskGenericNotify+0x184>)
 800b346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b354:	f000 f9b6 	bl	800b6c4 <vPortExitCritical>

		return xReturn;
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3728      	adds	r7, #40	; 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	200078f0 	.word	0x200078f0
 800b368:	200077ec 	.word	0x200077ec
 800b36c:	200077e8 	.word	0x200077e8
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b37e:	4b29      	ldr	r3, [pc, #164]	; (800b424 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b384:	4b28      	ldr	r3, [pc, #160]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3304      	adds	r3, #4
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fd fe0d 	bl	8008faa <uxListRemove>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	2201      	movs	r2, #1
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43da      	mvns	r2, r3
 800b3a4:	4b21      	ldr	r3, [pc, #132]	; (800b42c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	4a20      	ldr	r2, [pc, #128]	; (800b42c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b3ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d10a      	bne.n	800b3cc <prvAddCurrentTaskToDelayedList+0x58>
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d007      	beq.n	800b3cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3bc:	4b1a      	ldr	r3, [pc, #104]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	481a      	ldr	r0, [pc, #104]	; (800b430 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b3c6:	f7fd fd93 	bl	8008ef0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3ca:	e026      	b.n	800b41a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3d4:	4b14      	ldr	r3, [pc, #80]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68ba      	ldr	r2, [r7, #8]
 800b3da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d209      	bcs.n	800b3f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e4:	4b13      	ldr	r3, [pc, #76]	; (800b434 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f7fd fda1 	bl	8008f38 <vListInsert>
}
 800b3f6:	e010      	b.n	800b41a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3304      	adds	r3, #4
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f7fd fd97 	bl	8008f38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b40a:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	429a      	cmp	r2, r3
 800b412:	d202      	bcs.n	800b41a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b414:	4a09      	ldr	r2, [pc, #36]	; (800b43c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6013      	str	r3, [r2, #0]
}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200078ec 	.word	0x200078ec
 800b428:	200077e8 	.word	0x200077e8
 800b42c:	200078f0 	.word	0x200078f0
 800b430:	200078d4 	.word	0x200078d4
 800b434:	200078a4 	.word	0x200078a4
 800b438:	200078a0 	.word	0x200078a0
 800b43c:	20007908 	.word	0x20007908

0800b440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3b04      	subs	r3, #4
 800b450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3b04      	subs	r3, #4
 800b45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f023 0201 	bic.w	r2, r3, #1
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3b04      	subs	r3, #4
 800b46e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b470:	4a0c      	ldr	r2, [pc, #48]	; (800b4a4 <pxPortInitialiseStack+0x64>)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3b14      	subs	r3, #20
 800b47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3b04      	subs	r3, #4
 800b486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f06f 0202 	mvn.w	r2, #2
 800b48e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3b20      	subs	r3, #32
 800b494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b496:	68fb      	ldr	r3, [r7, #12]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	0800b4a9 	.word	0x0800b4a9

0800b4a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4b2:	4b14      	ldr	r3, [pc, #80]	; (800b504 <prvTaskExitError+0x5c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	d00c      	beq.n	800b4d6 <prvTaskExitError+0x2e>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	b672      	cpsid	i
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	b662      	cpsie	i
 800b4d0:	60fb      	str	r3, [r7, #12]
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <prvTaskExitError+0x2c>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	b672      	cpsid	i
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	b662      	cpsie	i
 800b4ea:	60bb      	str	r3, [r7, #8]
}
 800b4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4ee:	bf00      	nop
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0fc      	beq.n	800b4f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	20000020 	.word	0x20000020
	...

0800b510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <pxCurrentTCBConst2>)
 800b512:	6819      	ldr	r1, [r3, #0]
 800b514:	6808      	ldr	r0, [r1, #0]
 800b516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51a:	f380 8809 	msr	PSP, r0
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f04f 0000 	mov.w	r0, #0
 800b526:	f380 8811 	msr	BASEPRI, r0
 800b52a:	4770      	bx	lr
 800b52c:	f3af 8000 	nop.w

0800b530 <pxCurrentTCBConst2>:
 800b530:	200077e8 	.word	0x200077e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop

0800b538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b538:	4808      	ldr	r0, [pc, #32]	; (800b55c <prvPortStartFirstTask+0x24>)
 800b53a:	6800      	ldr	r0, [r0, #0]
 800b53c:	6800      	ldr	r0, [r0, #0]
 800b53e:	f380 8808 	msr	MSP, r0
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f380 8814 	msr	CONTROL, r0
 800b54a:	b662      	cpsie	i
 800b54c:	b661      	cpsie	f
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	df00      	svc	0
 800b558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b55a:	bf00      	nop
 800b55c:	e000ed08 	.word	0xe000ed08

0800b560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b566:	4b37      	ldr	r3, [pc, #220]	; (800b644 <xPortStartScheduler+0xe4>)
 800b568:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	22ff      	movs	r2, #255	; 0xff
 800b576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	4b2f      	ldr	r3, [pc, #188]	; (800b648 <xPortStartScheduler+0xe8>)
 800b58c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b58e:	4b2f      	ldr	r3, [pc, #188]	; (800b64c <xPortStartScheduler+0xec>)
 800b590:	2207      	movs	r2, #7
 800b592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b594:	e009      	b.n	800b5aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b596:	4b2d      	ldr	r3, [pc, #180]	; (800b64c <xPortStartScheduler+0xec>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	4a2b      	ldr	r2, [pc, #172]	; (800b64c <xPortStartScheduler+0xec>)
 800b59e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5a0:	78fb      	ldrb	r3, [r7, #3]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	005b      	lsls	r3, r3, #1
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b2:	2b80      	cmp	r3, #128	; 0x80
 800b5b4:	d0ef      	beq.n	800b596 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5b6:	4b25      	ldr	r3, [pc, #148]	; (800b64c <xPortStartScheduler+0xec>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f1c3 0307 	rsb	r3, r3, #7
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d00c      	beq.n	800b5dc <xPortStartScheduler+0x7c>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c6:	b672      	cpsid	i
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	b662      	cpsie	i
 800b5d6:	60bb      	str	r3, [r7, #8]
}
 800b5d8:	bf00      	nop
 800b5da:	e7fe      	b.n	800b5da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5dc:	4b1b      	ldr	r3, [pc, #108]	; (800b64c <xPortStartScheduler+0xec>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	021b      	lsls	r3, r3, #8
 800b5e2:	4a1a      	ldr	r2, [pc, #104]	; (800b64c <xPortStartScheduler+0xec>)
 800b5e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5e6:	4b19      	ldr	r3, [pc, #100]	; (800b64c <xPortStartScheduler+0xec>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5ee:	4a17      	ldr	r2, [pc, #92]	; (800b64c <xPortStartScheduler+0xec>)
 800b5f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5fa:	4b15      	ldr	r3, [pc, #84]	; (800b650 <xPortStartScheduler+0xf0>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a14      	ldr	r2, [pc, #80]	; (800b650 <xPortStartScheduler+0xf0>)
 800b600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b604:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b606:	4b12      	ldr	r3, [pc, #72]	; (800b650 <xPortStartScheduler+0xf0>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a11      	ldr	r2, [pc, #68]	; (800b650 <xPortStartScheduler+0xf0>)
 800b60c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b610:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b612:	f000 f8dd 	bl	800b7d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b616:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <xPortStartScheduler+0xf4>)
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b61c:	f000 f8fc 	bl	800b818 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <xPortStartScheduler+0xf8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a0c      	ldr	r2, [pc, #48]	; (800b658 <xPortStartScheduler+0xf8>)
 800b626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b62a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b62c:	f7ff ff84 	bl	800b538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b630:	f7ff f964 	bl	800a8fc <vTaskSwitchContext>
	prvTaskExitError();
 800b634:	f7ff ff38 	bl	800b4a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	e000e400 	.word	0xe000e400
 800b648:	20007914 	.word	0x20007914
 800b64c:	20007918 	.word	0x20007918
 800b650:	e000ed20 	.word	0xe000ed20
 800b654:	20000020 	.word	0x20000020
 800b658:	e000ef34 	.word	0xe000ef34

0800b65c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	b672      	cpsid	i
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	b662      	cpsie	i
 800b676:	607b      	str	r3, [r7, #4]
}
 800b678:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b67a:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <vPortEnterCritical+0x60>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3301      	adds	r3, #1
 800b680:	4a0e      	ldr	r2, [pc, #56]	; (800b6bc <vPortEnterCritical+0x60>)
 800b682:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b684:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <vPortEnterCritical+0x60>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d111      	bne.n	800b6b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b68c:	4b0c      	ldr	r3, [pc, #48]	; (800b6c0 <vPortEnterCritical+0x64>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00c      	beq.n	800b6b0 <vPortEnterCritical+0x54>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	b672      	cpsid	i
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	b662      	cpsie	i
 800b6aa:	603b      	str	r3, [r7, #0]
}
 800b6ac:	bf00      	nop
 800b6ae:	e7fe      	b.n	800b6ae <vPortEnterCritical+0x52>
	}
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20000020 	.word	0x20000020
 800b6c0:	e000ed04 	.word	0xe000ed04

0800b6c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6ca:	4b13      	ldr	r3, [pc, #76]	; (800b718 <vPortExitCritical+0x54>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10c      	bne.n	800b6ec <vPortExitCritical+0x28>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	b672      	cpsid	i
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	b662      	cpsie	i
 800b6e6:	607b      	str	r3, [r7, #4]
}
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b6ec:	4b0a      	ldr	r3, [pc, #40]	; (800b718 <vPortExitCritical+0x54>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	4a09      	ldr	r2, [pc, #36]	; (800b718 <vPortExitCritical+0x54>)
 800b6f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6f6:	4b08      	ldr	r3, [pc, #32]	; (800b718 <vPortExitCritical+0x54>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d105      	bne.n	800b70a <vPortExitCritical+0x46>
 800b6fe:	2300      	movs	r3, #0
 800b700:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	f383 8811 	msr	BASEPRI, r3
}
 800b708:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	20000020 	.word	0x20000020
 800b71c:	00000000 	.word	0x00000000

0800b720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b720:	f3ef 8009 	mrs	r0, PSP
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	4b15      	ldr	r3, [pc, #84]	; (800b780 <pxCurrentTCBConst>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	f01e 0f10 	tst.w	lr, #16
 800b730:	bf08      	it	eq
 800b732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73a:	6010      	str	r0, [r2, #0]
 800b73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b744:	b672      	cpsid	i
 800b746:	f380 8811 	msr	BASEPRI, r0
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	b662      	cpsie	i
 800b754:	f7ff f8d2 	bl	800a8fc <vTaskSwitchContext>
 800b758:	f04f 0000 	mov.w	r0, #0
 800b75c:	f380 8811 	msr	BASEPRI, r0
 800b760:	bc09      	pop	{r0, r3}
 800b762:	6819      	ldr	r1, [r3, #0]
 800b764:	6808      	ldr	r0, [r1, #0]
 800b766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76a:	f01e 0f10 	tst.w	lr, #16
 800b76e:	bf08      	it	eq
 800b770:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b774:	f380 8809 	msr	PSP, r0
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop

0800b780 <pxCurrentTCBConst>:
 800b780:	200077e8 	.word	0x200077e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop

0800b788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	b672      	cpsid	i
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	b662      	cpsie	i
 800b7a2:	607b      	str	r3, [r7, #4]
}
 800b7a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7a6:	f7fe ffef 	bl	800a788 <xTaskIncrementTick>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <SysTick_Handler+0x44>)
 800b7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b6:	601a      	str	r2, [r3, #0]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	f383 8811 	msr	BASEPRI, r3
}
 800b7c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7c4:	bf00      	nop
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	e000ed04 	.word	0xe000ed04

0800b7d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7d4:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <vPortSetupTimerInterrupt+0x34>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7da:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <vPortSetupTimerInterrupt+0x38>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7e0:	4b0a      	ldr	r3, [pc, #40]	; (800b80c <vPortSetupTimerInterrupt+0x3c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a0a      	ldr	r2, [pc, #40]	; (800b810 <vPortSetupTimerInterrupt+0x40>)
 800b7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ea:	099b      	lsrs	r3, r3, #6
 800b7ec:	4a09      	ldr	r2, [pc, #36]	; (800b814 <vPortSetupTimerInterrupt+0x44>)
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7f2:	4b04      	ldr	r3, [pc, #16]	; (800b804 <vPortSetupTimerInterrupt+0x34>)
 800b7f4:	2207      	movs	r2, #7
 800b7f6:	601a      	str	r2, [r3, #0]
}
 800b7f8:	bf00      	nop
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	e000e010 	.word	0xe000e010
 800b808:	e000e018 	.word	0xe000e018
 800b80c:	20000000 	.word	0x20000000
 800b810:	10624dd3 	.word	0x10624dd3
 800b814:	e000e014 	.word	0xe000e014

0800b818 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b818:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b828 <vPortEnableVFP+0x10>
 800b81c:	6801      	ldr	r1, [r0, #0]
 800b81e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b822:	6001      	str	r1, [r0, #0]
 800b824:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b826:	bf00      	nop
 800b828:	e000ed88 	.word	0xe000ed88

0800b82c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b832:	f3ef 8305 	mrs	r3, IPSR
 800b836:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b0f      	cmp	r3, #15
 800b83c:	d916      	bls.n	800b86c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b83e:	4a19      	ldr	r2, [pc, #100]	; (800b8a4 <vPortValidateInterruptPriority+0x78>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b848:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <vPortValidateInterruptPriority+0x7c>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	7afa      	ldrb	r2, [r7, #11]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d20c      	bcs.n	800b86c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	b672      	cpsid	i
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	b662      	cpsie	i
 800b866:	607b      	str	r3, [r7, #4]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b86c:	4b0f      	ldr	r3, [pc, #60]	; (800b8ac <vPortValidateInterruptPriority+0x80>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b874:	4b0e      	ldr	r3, [pc, #56]	; (800b8b0 <vPortValidateInterruptPriority+0x84>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d90c      	bls.n	800b896 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	b672      	cpsid	i
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	b662      	cpsie	i
 800b890:	603b      	str	r3, [r7, #0]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <vPortValidateInterruptPriority+0x68>
	}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	e000e3f0 	.word	0xe000e3f0
 800b8a8:	20007914 	.word	0x20007914
 800b8ac:	e000ed0c 	.word	0xe000ed0c
 800b8b0:	20007918 	.word	0x20007918

0800b8b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08a      	sub	sp, #40	; 0x28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8c0:	f7fe fe94 	bl	800a5ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8c4:	4b5b      	ldr	r3, [pc, #364]	; (800ba34 <pvPortMalloc+0x180>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8cc:	f000 f91a 	bl	800bb04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8d0:	4b59      	ldr	r3, [pc, #356]	; (800ba38 <pvPortMalloc+0x184>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f040 8092 	bne.w	800ba02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d01f      	beq.n	800b924 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b8e4:	2208      	movs	r2, #8
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d016      	beq.n	800b924 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f023 0307 	bic.w	r3, r3, #7
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00c      	beq.n	800b924 <pvPortMalloc+0x70>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	b672      	cpsid	i
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	b662      	cpsie	i
 800b91e:	617b      	str	r3, [r7, #20]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d06b      	beq.n	800ba02 <pvPortMalloc+0x14e>
 800b92a:	4b44      	ldr	r3, [pc, #272]	; (800ba3c <pvPortMalloc+0x188>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d866      	bhi.n	800ba02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b934:	4b42      	ldr	r3, [pc, #264]	; (800ba40 <pvPortMalloc+0x18c>)
 800b936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b938:	4b41      	ldr	r3, [pc, #260]	; (800ba40 <pvPortMalloc+0x18c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b93e:	e004      	b.n	800b94a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	429a      	cmp	r2, r3
 800b952:	d903      	bls.n	800b95c <pvPortMalloc+0xa8>
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f1      	bne.n	800b940 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b95c:	4b35      	ldr	r3, [pc, #212]	; (800ba34 <pvPortMalloc+0x180>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b962:	429a      	cmp	r2, r3
 800b964:	d04d      	beq.n	800ba02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2208      	movs	r2, #8
 800b96c:	4413      	add	r3, r2
 800b96e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	1ad2      	subs	r2, r2, r3
 800b980:	2308      	movs	r3, #8
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	429a      	cmp	r2, r3
 800b986:	d921      	bls.n	800b9cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4413      	add	r3, r2
 800b98e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00c      	beq.n	800b9b4 <pvPortMalloc+0x100>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	b672      	cpsid	i
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	b662      	cpsie	i
 800b9ae:	613b      	str	r3, [r7, #16]
}
 800b9b0:	bf00      	nop
 800b9b2:	e7fe      	b.n	800b9b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	685a      	ldr	r2, [r3, #4]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	1ad2      	subs	r2, r2, r3
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9c6:	69b8      	ldr	r0, [r7, #24]
 800b9c8:	f000 f8fe 	bl	800bbc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <pvPortMalloc+0x188>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	4a19      	ldr	r2, [pc, #100]	; (800ba3c <pvPortMalloc+0x188>)
 800b9d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9da:	4b18      	ldr	r3, [pc, #96]	; (800ba3c <pvPortMalloc+0x188>)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	4b19      	ldr	r3, [pc, #100]	; (800ba44 <pvPortMalloc+0x190>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d203      	bcs.n	800b9ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9e6:	4b15      	ldr	r3, [pc, #84]	; (800ba3c <pvPortMalloc+0x188>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a16      	ldr	r2, [pc, #88]	; (800ba44 <pvPortMalloc+0x190>)
 800b9ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	685a      	ldr	r2, [r3, #4]
 800b9f2:	4b11      	ldr	r3, [pc, #68]	; (800ba38 <pvPortMalloc+0x184>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	431a      	orrs	r2, r3
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba02:	f7fe fe01 	bl	800a608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	f003 0307 	and.w	r3, r3, #7
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00c      	beq.n	800ba2a <pvPortMalloc+0x176>
	__asm volatile
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	b672      	cpsid	i
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	b662      	cpsie	i
 800ba24:	60fb      	str	r3, [r7, #12]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <pvPortMalloc+0x174>
	return pvReturn;
 800ba2a:	69fb      	ldr	r3, [r7, #28]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3728      	adds	r7, #40	; 0x28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20039924 	.word	0x20039924
 800ba38:	20039930 	.word	0x20039930
 800ba3c:	20039928 	.word	0x20039928
 800ba40:	2003991c 	.word	0x2003991c
 800ba44:	2003992c 	.word	0x2003992c

0800ba48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d04c      	beq.n	800baf4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba5a:	2308      	movs	r3, #8
 800ba5c:	425b      	negs	r3, r3
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	4413      	add	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	4b23      	ldr	r3, [pc, #140]	; (800bafc <vPortFree+0xb4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4013      	ands	r3, r2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10c      	bne.n	800ba90 <vPortFree+0x48>
	__asm volatile
 800ba76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7a:	b672      	cpsid	i
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	b662      	cpsie	i
 800ba8a:	60fb      	str	r3, [r7, #12]
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00c      	beq.n	800bab2 <vPortFree+0x6a>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	b672      	cpsid	i
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	b662      	cpsie	i
 800baac:	60bb      	str	r3, [r7, #8]
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	4b11      	ldr	r3, [pc, #68]	; (800bafc <vPortFree+0xb4>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4013      	ands	r3, r2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d019      	beq.n	800baf4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d115      	bne.n	800baf4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	4b0b      	ldr	r3, [pc, #44]	; (800bafc <vPortFree+0xb4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	43db      	mvns	r3, r3
 800bad2:	401a      	ands	r2, r3
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bad8:	f7fe fd88 	bl	800a5ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	685a      	ldr	r2, [r3, #4]
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <vPortFree+0xb8>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4413      	add	r3, r2
 800bae6:	4a06      	ldr	r2, [pc, #24]	; (800bb00 <vPortFree+0xb8>)
 800bae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baea:	6938      	ldr	r0, [r7, #16]
 800baec:	f000 f86c 	bl	800bbc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800baf0:	f7fe fd8a 	bl	800a608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baf4:	bf00      	nop
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20039930 	.word	0x20039930
 800bb00:	20039928 	.word	0x20039928

0800bb04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb0a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800bb0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb10:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <prvHeapInit+0xac>)
 800bb12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f003 0307 	and.w	r3, r3, #7
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00c      	beq.n	800bb38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3307      	adds	r3, #7
 800bb22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f023 0307 	bic.w	r3, r3, #7
 800bb2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	4a1f      	ldr	r2, [pc, #124]	; (800bbb0 <prvHeapInit+0xac>)
 800bb34:	4413      	add	r3, r2
 800bb36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb3c:	4a1d      	ldr	r2, [pc, #116]	; (800bbb4 <prvHeapInit+0xb0>)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb42:	4b1c      	ldr	r3, [pc, #112]	; (800bbb4 <prvHeapInit+0xb0>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb50:	2208      	movs	r2, #8
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	1a9b      	subs	r3, r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 0307 	bic.w	r3, r3, #7
 800bb5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4a15      	ldr	r2, [pc, #84]	; (800bbb8 <prvHeapInit+0xb4>)
 800bb64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb66:	4b14      	ldr	r3, [pc, #80]	; (800bbb8 <prvHeapInit+0xb4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb6e:	4b12      	ldr	r3, [pc, #72]	; (800bbb8 <prvHeapInit+0xb4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2200      	movs	r2, #0
 800bb74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	1ad2      	subs	r2, r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb84:	4b0c      	ldr	r3, [pc, #48]	; (800bbb8 <prvHeapInit+0xb4>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	4a0a      	ldr	r2, [pc, #40]	; (800bbbc <prvHeapInit+0xb8>)
 800bb92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <prvHeapInit+0xbc>)
 800bb9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb9c:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <prvHeapInit+0xc0>)
 800bb9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bba2:	601a      	str	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	3714      	adds	r7, #20
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	2000791c 	.word	0x2000791c
 800bbb4:	2003991c 	.word	0x2003991c
 800bbb8:	20039924 	.word	0x20039924
 800bbbc:	2003992c 	.word	0x2003992c
 800bbc0:	20039928 	.word	0x20039928
 800bbc4:	20039930 	.word	0x20039930

0800bbc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbd0:	4b28      	ldr	r3, [pc, #160]	; (800bc74 <prvInsertBlockIntoFreeList+0xac>)
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	e002      	b.n	800bbdc <prvInsertBlockIntoFreeList+0x14>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d8f7      	bhi.n	800bbd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d108      	bne.n	800bc0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	441a      	add	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	441a      	add	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d118      	bne.n	800bc50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	4b15      	ldr	r3, [pc, #84]	; (800bc78 <prvInsertBlockIntoFreeList+0xb0>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d00d      	beq.n	800bc46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	441a      	add	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	e008      	b.n	800bc58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc46:	4b0c      	ldr	r3, [pc, #48]	; (800bc78 <prvInsertBlockIntoFreeList+0xb0>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	e003      	b.n	800bc58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d002      	beq.n	800bc66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc66:	bf00      	nop
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	2003991c 	.word	0x2003991c
 800bc78:	20039924 	.word	0x20039924

0800bc7c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	330c      	adds	r3, #12
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f003 fe21 	bl	800f8d8 <tcpip_send_msg_wait_sem>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bc9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d103      	bne.n	800bcaa <netconn_apimsg+0x2e>
    return apimsg->err;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bca8:	e001      	b.n	800bcae <netconn_apimsg+0x32>
  }
  return err;
 800bcaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08c      	sub	sp, #48	; 0x30
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	603a      	str	r2, [r7, #0]
 800bcc2:	71fb      	strb	r3, [r7, #7]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800bcc8:	79fb      	ldrb	r3, [r7, #7]
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f001 f999 	bl	800d004 <netconn_alloc>
 800bcd2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d054      	beq.n	800bd84 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800bcda:	79bb      	ldrb	r3, [r7, #6]
 800bcdc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800bce2:	f107 0308 	add.w	r3, r7, #8
 800bce6:	4619      	mov	r1, r3
 800bce8:	4829      	ldr	r0, [pc, #164]	; (800bd90 <netconn_new_with_proto_and_callback+0xd8>)
 800bcea:	f7ff ffc7 	bl	800bc7c <netconn_apimsg>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800bcf4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d043      	beq.n	800bd84 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d005      	beq.n	800bd10 <netconn_new_with_proto_and_callback+0x58>
 800bd04:	4b23      	ldr	r3, [pc, #140]	; (800bd94 <netconn_new_with_proto_and_callback+0xdc>)
 800bd06:	22a3      	movs	r2, #163	; 0xa3
 800bd08:	4923      	ldr	r1, [pc, #140]	; (800bd98 <netconn_new_with_proto_and_callback+0xe0>)
 800bd0a:	4824      	ldr	r0, [pc, #144]	; (800bd9c <netconn_new_with_proto_and_callback+0xe4>)
 800bd0c:	f00f fa24 	bl	801b158 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800bd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd12:	3310      	adds	r3, #16
 800bd14:	4618      	mov	r0, r3
 800bd16:	f00e ffe6 	bl	801ace6 <sys_mbox_valid>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d105      	bne.n	800bd2c <netconn_new_with_proto_and_callback+0x74>
 800bd20:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <netconn_new_with_proto_and_callback+0xdc>)
 800bd22:	22a4      	movs	r2, #164	; 0xa4
 800bd24:	491e      	ldr	r1, [pc, #120]	; (800bda0 <netconn_new_with_proto_and_callback+0xe8>)
 800bd26:	481d      	ldr	r0, [pc, #116]	; (800bd9c <netconn_new_with_proto_and_callback+0xe4>)
 800bd28:	f00f fa16 	bl	801b158 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2e:	3314      	adds	r3, #20
 800bd30:	4618      	mov	r0, r3
 800bd32:	f00e ffd8 	bl	801ace6 <sys_mbox_valid>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d005      	beq.n	800bd48 <netconn_new_with_proto_and_callback+0x90>
 800bd3c:	4b15      	ldr	r3, [pc, #84]	; (800bd94 <netconn_new_with_proto_and_callback+0xdc>)
 800bd3e:	22a6      	movs	r2, #166	; 0xa6
 800bd40:	4918      	ldr	r1, [pc, #96]	; (800bda4 <netconn_new_with_proto_and_callback+0xec>)
 800bd42:	4816      	ldr	r0, [pc, #88]	; (800bd9c <netconn_new_with_proto_and_callback+0xe4>)
 800bd44:	f00f fa08 	bl	801b158 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800bd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f00f f85b 	bl	801ae08 <sys_sem_valid>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <netconn_new_with_proto_and_callback+0xac>
 800bd58:	4b0e      	ldr	r3, [pc, #56]	; (800bd94 <netconn_new_with_proto_and_callback+0xdc>)
 800bd5a:	22a9      	movs	r2, #169	; 0xa9
 800bd5c:	4912      	ldr	r1, [pc, #72]	; (800bda8 <netconn_new_with_proto_and_callback+0xf0>)
 800bd5e:	480f      	ldr	r0, [pc, #60]	; (800bd9c <netconn_new_with_proto_and_callback+0xe4>)
 800bd60:	f00f f9fa 	bl	801b158 <iprintf>
      sys_sem_free(&conn->op_completed);
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	330c      	adds	r3, #12
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f00f f840 	bl	801adee <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	3310      	adds	r3, #16
 800bd72:	4618      	mov	r0, r3
 800bd74:	f00e ff30 	bl	801abd8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800bd78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd7a:	2007      	movs	r0, #7
 800bd7c:	f004 fb5a 	bl	8010434 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	e000      	b.n	800bd86 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3730      	adds	r7, #48	; 0x30
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	0800cfd9 	.word	0x0800cfd9
 800bd94:	0801c4a0 	.word	0x0801c4a0
 800bd98:	0801c4d4 	.word	0x0801c4d4
 800bd9c:	0801c4f8 	.word	0x0801c4f8
 800bda0:	0801c520 	.word	0x0801c520
 800bda4:	0801c538 	.word	0x0801c538
 800bda8:	0801c55c 	.word	0x0801c55c

0800bdac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b08c      	sub	sp, #48	; 0x30
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <netconn_prepare_delete+0x12>
    return ERR_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e016      	b.n	800bdec <netconn_prepare_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60fb      	str	r3, [r7, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 800bdc2:	f7fc faf9 	bl	80083b8 <sys_now>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	61bb      	str	r3, [r7, #24]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800bdca:	f107 030c 	add.w	r3, r7, #12
 800bdce:	4619      	mov	r1, r3
 800bdd0:	4808      	ldr	r0, [pc, #32]	; (800bdf4 <netconn_prepare_delete+0x48>)
 800bdd2:	f7ff ff53 	bl	800bc7c <netconn_apimsg>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800bddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <netconn_prepare_delete+0x3e>
    return err;
 800bde4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bde8:	e000      	b.n	800bdec <netconn_prepare_delete+0x40>
  }
  return ERR_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3730      	adds	r7, #48	; 0x30
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	0800d625 	.word	0x0800d625

0800bdf8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <netconn_delete+0x12>
    return ERR_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	e00d      	b.n	800be26 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7ff ffce 	bl	800bdac <netconn_prepare_delete>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800be14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <netconn_delete+0x2a>
    netconn_free(conn);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 f963 	bl	800d0e8 <netconn_free>
  }
  return err;
 800be22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b08e      	sub	sp, #56	; 0x38
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d109      	bne.n	800be58 <netconn_getaddr+0x28>
 800be44:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <netconn_getaddr+0x8c>)
 800be46:	f44f 7289 	mov.w	r2, #274	; 0x112
 800be4a:	491d      	ldr	r1, [pc, #116]	; (800bec0 <netconn_getaddr+0x90>)
 800be4c:	481d      	ldr	r0, [pc, #116]	; (800bec4 <netconn_getaddr+0x94>)
 800be4e:	f00f f983 	bl	801b158 <iprintf>
 800be52:	f06f 030f 	mvn.w	r3, #15
 800be56:	e02d      	b.n	800beb4 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <netconn_getaddr+0x42>
 800be5e:	4b17      	ldr	r3, [pc, #92]	; (800bebc <netconn_getaddr+0x8c>)
 800be60:	f240 1213 	movw	r2, #275	; 0x113
 800be64:	4918      	ldr	r1, [pc, #96]	; (800bec8 <netconn_getaddr+0x98>)
 800be66:	4817      	ldr	r0, [pc, #92]	; (800bec4 <netconn_getaddr+0x94>)
 800be68:	f00f f976 	bl	801b158 <iprintf>
 800be6c:	f06f 030f 	mvn.w	r3, #15
 800be70:	e020      	b.n	800beb4 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d109      	bne.n	800be8c <netconn_getaddr+0x5c>
 800be78:	4b10      	ldr	r3, [pc, #64]	; (800bebc <netconn_getaddr+0x8c>)
 800be7a:	f44f 728a 	mov.w	r2, #276	; 0x114
 800be7e:	4913      	ldr	r1, [pc, #76]	; (800becc <netconn_getaddr+0x9c>)
 800be80:	4810      	ldr	r0, [pc, #64]	; (800bec4 <netconn_getaddr+0x94>)
 800be82:	f00f f969 	bl	801b158 <iprintf>
 800be86:	f06f 030f 	mvn.w	r3, #15
 800be8a:	e013      	b.n	800beb4 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800be9e:	f107 0314 	add.w	r3, r7, #20
 800bea2:	4619      	mov	r1, r3
 800bea4:	480a      	ldr	r0, [pc, #40]	; (800bed0 <netconn_getaddr+0xa0>)
 800bea6:	f7ff fee9 	bl	800bc7c <netconn_apimsg>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800beb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3738      	adds	r7, #56	; 0x38
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	0801c4a0 	.word	0x0801c4a0
 800bec0:	0801c578 	.word	0x0801c578
 800bec4:	0801c4f8 	.word	0x0801c4f8
 800bec8:	0801c598 	.word	0x0801c598
 800becc:	0801c5b8 	.word	0x0801c5b8
 800bed0:	0800df45 	.word	0x0800df45

0800bed4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08e      	sub	sp, #56	; 0x38
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d109      	bne.n	800befc <netconn_bind+0x28>
 800bee8:	4b11      	ldr	r3, [pc, #68]	; (800bf30 <netconn_bind+0x5c>)
 800beea:	f44f 729c 	mov.w	r2, #312	; 0x138
 800beee:	4911      	ldr	r1, [pc, #68]	; (800bf34 <netconn_bind+0x60>)
 800bef0:	4811      	ldr	r0, [pc, #68]	; (800bf38 <netconn_bind+0x64>)
 800bef2:	f00f f931 	bl	801b158 <iprintf>
 800bef6:	f06f 030f 	mvn.w	r3, #15
 800befa:	e015      	b.n	800bf28 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800bf02:	4b0e      	ldr	r3, [pc, #56]	; (800bf3c <netconn_bind+0x68>)
 800bf04:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bf0e:	88fb      	ldrh	r3, [r7, #6]
 800bf10:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800bf12:	f107 0314 	add.w	r3, r7, #20
 800bf16:	4619      	mov	r1, r3
 800bf18:	4809      	ldr	r0, [pc, #36]	; (800bf40 <netconn_bind+0x6c>)
 800bf1a:	f7ff feaf 	bl	800bc7c <netconn_apimsg>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800bf24:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3738      	adds	r7, #56	; 0x38
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	0801c4a0 	.word	0x0801c4a0
 800bf34:	0801c5d8 	.word	0x0801c5d8
 800bf38:	0801c4f8 	.word	0x0801c4f8
 800bf3c:	0801fec4 	.word	0x0801fec4
 800bf40:	0800d7ed 	.word	0x0800d7ed

0800bf44 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08c      	sub	sp, #48	; 0x30
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d109      	bne.n	800bf6a <netconn_listen_with_backlog+0x26>
 800bf56:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <netconn_listen_with_backlog+0x48>)
 800bf58:	f240 12bb 	movw	r2, #443	; 0x1bb
 800bf5c:	490c      	ldr	r1, [pc, #48]	; (800bf90 <netconn_listen_with_backlog+0x4c>)
 800bf5e:	480d      	ldr	r0, [pc, #52]	; (800bf94 <netconn_listen_with_backlog+0x50>)
 800bf60:	f00f f8fa 	bl	801b158 <iprintf>
 800bf64:	f06f 030f 	mvn.w	r3, #15
 800bf68:	e00c      	b.n	800bf84 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800bf6e:	f107 030c 	add.w	r3, r7, #12
 800bf72:	4619      	mov	r1, r3
 800bf74:	4808      	ldr	r0, [pc, #32]	; (800bf98 <netconn_listen_with_backlog+0x54>)
 800bf76:	f7ff fe81 	bl	800bc7c <netconn_apimsg>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bf80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3730      	adds	r7, #48	; 0x30
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	0801c4a0 	.word	0x0801c4a0
 800bf90:	0801c658 	.word	0x0801c658
 800bf94:	0801c4f8 	.word	0x0801c4f8
 800bf98:	0800d861 	.word	0x0800d861

0800bf9c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <netconn_accept+0x24>
 800bfac:	4b3d      	ldr	r3, [pc, #244]	; (800c0a4 <netconn_accept+0x108>)
 800bfae:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bfb2:	493d      	ldr	r1, [pc, #244]	; (800c0a8 <netconn_accept+0x10c>)
 800bfb4:	483d      	ldr	r0, [pc, #244]	; (800c0ac <netconn_accept+0x110>)
 800bfb6:	f00f f8cf 	bl	801b158 <iprintf>
 800bfba:	f06f 030f 	mvn.w	r3, #15
 800bfbe:	e06c      	b.n	800c09a <netconn_accept+0xfe>
  *new_conn = NULL;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d109      	bne.n	800bfe0 <netconn_accept+0x44>
 800bfcc:	4b35      	ldr	r3, [pc, #212]	; (800c0a4 <netconn_accept+0x108>)
 800bfce:	f240 12e3 	movw	r2, #483	; 0x1e3
 800bfd2:	4937      	ldr	r1, [pc, #220]	; (800c0b0 <netconn_accept+0x114>)
 800bfd4:	4835      	ldr	r0, [pc, #212]	; (800c0ac <netconn_accept+0x110>)
 800bfd6:	f00f f8bf 	bl	801b158 <iprintf>
 800bfda:	f06f 030f 	mvn.w	r3, #15
 800bfde:	e05c      	b.n	800c09a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fb9b 	bl	800c71c <netconn_err>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800bfea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800bff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bff6:	e050      	b.n	800c09a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	3314      	adds	r3, #20
 800bffc:	4618      	mov	r0, r3
 800bffe:	f00e fe72 	bl	801ace6 <sys_mbox_valid>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d005      	beq.n	800c014 <netconn_accept+0x78>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	7f9b      	ldrb	r3, [r3, #30]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800c014:	f06f 030e 	mvn.w	r3, #14
 800c018:	e03f      	b.n	800c09a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	7f9b      	ldrb	r3, [r3, #30]
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00e      	beq.n	800c044 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3314      	adds	r3, #20
 800c02a:	f107 020c 	add.w	r2, r7, #12
 800c02e:	4611      	mov	r1, r2
 800c030:	4618      	mov	r0, r3
 800c032:	f00e fe3c 	bl	801acae <sys_arch_mbox_tryfetch>
 800c036:	4603      	mov	r3, r0
 800c038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03c:	d10a      	bne.n	800c054 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800c03e:	f06f 0306 	mvn.w	r3, #6
 800c042:	e02a      	b.n	800c09a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3314      	adds	r3, #20
 800c048:	f107 010c 	add.w	r1, r7, #12
 800c04c:	2200      	movs	r2, #0
 800c04e:	4618      	mov	r0, r3
 800c050:	f00e fdee 	bl	801ac30 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d005      	beq.n	800c068 <netconn_accept+0xcc>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	2200      	movs	r2, #0
 800c062:	2101      	movs	r1, #1
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f107 0213 	add.w	r2, r7, #19
 800c06e:	4611      	mov	r1, r2
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fba5 	bl	800c7c0 <lwip_netconn_is_err_msg>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d002      	beq.n	800c082 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800c07c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c080:	e00b      	b.n	800c09a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800c088:	f06f 030e 	mvn.w	r3, #14
 800c08c:	e005      	b.n	800c09a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c098:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	0801c4a0 	.word	0x0801c4a0
 800c0a8:	0801c678 	.word	0x0801c678
 800c0ac:	0801c4f8 	.word	0x0801c4f8
 800c0b0:	0801c698 	.word	0x0801c698

0800c0b4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d109      	bne.n	800c0e0 <netconn_recv_data+0x2c>
 800c0cc:	4b58      	ldr	r3, [pc, #352]	; (800c230 <netconn_recv_data+0x17c>)
 800c0ce:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c0d2:	4958      	ldr	r1, [pc, #352]	; (800c234 <netconn_recv_data+0x180>)
 800c0d4:	4858      	ldr	r0, [pc, #352]	; (800c238 <netconn_recv_data+0x184>)
 800c0d6:	f00f f83f 	bl	801b158 <iprintf>
 800c0da:	f06f 030f 	mvn.w	r3, #15
 800c0de:	e0a2      	b.n	800c226 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d109      	bne.n	800c100 <netconn_recv_data+0x4c>
 800c0ec:	4b50      	ldr	r3, [pc, #320]	; (800c230 <netconn_recv_data+0x17c>)
 800c0ee:	f240 224a 	movw	r2, #586	; 0x24a
 800c0f2:	4952      	ldr	r1, [pc, #328]	; (800c23c <netconn_recv_data+0x188>)
 800c0f4:	4850      	ldr	r0, [pc, #320]	; (800c238 <netconn_recv_data+0x184>)
 800c0f6:	f00f f82f 	bl	801b158 <iprintf>
 800c0fa:	f06f 030f 	mvn.w	r3, #15
 800c0fe:	e092      	b.n	800c226 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3310      	adds	r3, #16
 800c104:	4618      	mov	r0, r3
 800c106:	f00e fdee 	bl	801ace6 <sys_mbox_valid>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10e      	bne.n	800c12e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f000 fb03 	bl	800c71c <netconn_err>
 800c116:	4603      	mov	r3, r0
 800c118:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c11a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c122:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c126:	e07e      	b.n	800c226 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c128:	f06f 030a 	mvn.w	r3, #10
 800c12c:	e07b      	b.n	800c226 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	7f9b      	ldrb	r3, [r3, #30]
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10f      	bne.n	800c15a <netconn_recv_data+0xa6>
 800c13a:	79fb      	ldrb	r3, [r7, #7]
 800c13c:	f003 0304 	and.w	r3, r3, #4
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	7f9b      	ldrb	r3, [r3, #30]
 800c148:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d104      	bne.n	800c15a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d023      	beq.n	800c1a2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3310      	adds	r3, #16
 800c15e:	f107 0218 	add.w	r2, r7, #24
 800c162:	4611      	mov	r1, r2
 800c164:	4618      	mov	r0, r3
 800c166:	f00e fda2 	bl	801acae <sys_arch_mbox_tryfetch>
 800c16a:	4603      	mov	r3, r0
 800c16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c170:	d11f      	bne.n	800c1b2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fad2 	bl	800c71c <netconn_err>
 800c178:	4603      	mov	r3, r0
 800c17a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c17c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c184:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c188:	e04d      	b.n	800c226 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	7f9b      	ldrb	r3, [r3, #30]
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c196:	f06f 030a 	mvn.w	r3, #10
 800c19a:	e044      	b.n	800c226 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c19c:	f06f 0306 	mvn.w	r3, #6
 800c1a0:	e041      	b.n	800c226 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	3310      	adds	r3, #16
 800c1a6:	f107 0118 	add.w	r1, r7, #24
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f00e fd3f 	bl	801ac30 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1ba:	2b10      	cmp	r3, #16
 800c1bc:	d117      	bne.n	800c1ee <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	f107 0217 	add.w	r2, r7, #23
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 fafa 	bl	800c7c0 <lwip_netconn_is_err_msg>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d009      	beq.n	800c1e6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d6:	f113 0f0f 	cmn.w	r3, #15
 800c1da:	d101      	bne.n	800c1e0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e022      	b.n	800c226 <netconn_recv_data+0x172>
      }
      return err;
 800c1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1e4:	e01f      	b.n	800c226 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	891b      	ldrh	r3, [r3, #8]
 800c1ea:	83fb      	strh	r3, [r7, #30]
 800c1ec:	e00d      	b.n	800c20a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d106      	bne.n	800c202 <netconn_recv_data+0x14e>
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	; (800c230 <netconn_recv_data+0x17c>)
 800c1f6:	f240 2291 	movw	r2, #657	; 0x291
 800c1fa:	4911      	ldr	r1, [pc, #68]	; (800c240 <netconn_recv_data+0x18c>)
 800c1fc:	480e      	ldr	r0, [pc, #56]	; (800c238 <netconn_recv_data+0x184>)
 800c1fe:	f00e ffab 	bl	801b158 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	891b      	ldrh	r3, [r3, #8]
 800c208:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d005      	beq.n	800c21e <netconn_recv_data+0x16a>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	8bfa      	ldrh	r2, [r7, #30]
 800c218:	2101      	movs	r1, #1
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c21e:	69ba      	ldr	r2, [r7, #24]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3720      	adds	r7, #32
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	0801c4a0 	.word	0x0801c4a0
 800c234:	0801c6b8 	.word	0x0801c6b8
 800c238:	0801c4f8 	.word	0x0801c4f8
 800c23c:	0801c6d8 	.word	0x0801c6d8
 800c240:	0801c6f4 	.word	0x0801c6f4

0800c244 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d005      	beq.n	800c262 <netconn_tcp_recvd_msg+0x1e>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c25e:	2b10      	cmp	r3, #16
 800c260:	d009      	beq.n	800c276 <netconn_tcp_recvd_msg+0x32>
 800c262:	4b0c      	ldr	r3, [pc, #48]	; (800c294 <netconn_tcp_recvd_msg+0x50>)
 800c264:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c268:	490b      	ldr	r1, [pc, #44]	; (800c298 <netconn_tcp_recvd_msg+0x54>)
 800c26a:	480c      	ldr	r0, [pc, #48]	; (800c29c <netconn_tcp_recvd_msg+0x58>)
 800c26c:	f00e ff74 	bl	801b158 <iprintf>
 800c270:	f06f 030f 	mvn.w	r3, #15
 800c274:	e00a      	b.n	800c28c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	4806      	ldr	r0, [pc, #24]	; (800c2a0 <netconn_tcp_recvd_msg+0x5c>)
 800c286:	f7ff fcf9 	bl	800bc7c <netconn_apimsg>
 800c28a:	4603      	mov	r3, r0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	0801c4a0 	.word	0x0801c4a0
 800c298:	0801c700 	.word	0x0801c700
 800c29c:	0801c4f8 	.word	0x0801c4f8
 800c2a0:	0800da2b 	.word	0x0800da2b

0800c2a4 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08c      	sub	sp, #48	; 0x30
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d005      	beq.n	800c2c0 <netconn_tcp_recvd+0x1c>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2bc:	2b10      	cmp	r3, #16
 800c2be:	d009      	beq.n	800c2d4 <netconn_tcp_recvd+0x30>
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <netconn_tcp_recvd+0x50>)
 800c2c2:	f240 22b5 	movw	r2, #693	; 0x2b5
 800c2c6:	490c      	ldr	r1, [pc, #48]	; (800c2f8 <netconn_tcp_recvd+0x54>)
 800c2c8:	480c      	ldr	r0, [pc, #48]	; (800c2fc <netconn_tcp_recvd+0x58>)
 800c2ca:	f00e ff45 	bl	801b158 <iprintf>
 800c2ce:	f06f 030f 	mvn.w	r3, #15
 800c2d2:	e00b      	b.n	800c2ec <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800c2d4:	f107 030c 	add.w	r3, r7, #12
 800c2d8:	461a      	mov	r2, r3
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff ffb1 	bl	800c244 <netconn_tcp_recvd_msg>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800c2e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3730      	adds	r7, #48	; 0x30
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	0801c4a0 	.word	0x0801c4a0
 800c2f8:	0801c700 	.word	0x0801c700
 800c2fc:	0801c4f8 	.word	0x0801c4f8

0800c300 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b090      	sub	sp, #64	; 0x40
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	4613      	mov	r3, r2
 800c30c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3310      	adds	r3, #16
 800c312:	4618      	mov	r0, r3
 800c314:	f00e fce7 	bl	801ace6 <sys_mbox_valid>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d102      	bne.n	800c324 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c31e:	f06f 030a 	mvn.w	r3, #10
 800c322:	e06d      	b.n	800c400 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	7f9b      	ldrb	r3, [r3, #30]
 800c328:	b25b      	sxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	da07      	bge.n	800c33e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	7f9b      	ldrb	r3, [r3, #30]
 800c332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c336:	b2da      	uxtb	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	779a      	strb	r2, [r3, #30]
    goto handle_fin;
 800c33c:	e039      	b.n	800c3b2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	461a      	mov	r2, r3
 800c342:	68b9      	ldr	r1, [r7, #8]
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f7ff feb5 	bl	800c0b4 <netconn_recv_data>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c350:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c358:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c35c:	e050      	b.n	800c400 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c364:	79fb      	ldrb	r3, [r7, #7]
 800c366:	f003 0308 	and.w	r3, r3, #8
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10e      	bne.n	800c38c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <netconn_recv_data_tcp+0x7a>
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	891b      	ldrh	r3, [r3, #8]
 800c378:	e000      	b.n	800c37c <netconn_recv_data_tcp+0x7c>
 800c37a:	2301      	movs	r3, #1
 800c37c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c37e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c380:	f107 0214 	add.w	r2, r7, #20
 800c384:	4619      	mov	r1, r3
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff ff5c 	bl	800c244 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d134      	bne.n	800c3fc <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c392:	79fb      	ldrb	r3, [r7, #7]
 800c394:	f003 0310 	and.w	r3, r3, #16
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d009      	beq.n	800c3b0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	7f9b      	ldrb	r3, [r3, #30]
 800c3a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	779a      	strb	r2, [r3, #30]
      return ERR_WOULDBLOCK;
 800c3aa:	f06f 0306 	mvn.w	r3, #6
 800c3ae:	e027      	b.n	800c400 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c3b0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d005      	beq.n	800c3c6 <netconn_recv_data_tcp+0xc6>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10f      	bne.n	800c3ee <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 f9a4 	bl	800c71c <netconn_err>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800c3da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <netconn_recv_data_tcp+0xe8>
          return err;
 800c3e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3e6:	e00b      	b.n	800c400 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c3e8:	f06f 030d 	mvn.w	r3, #13
 800c3ec:	e008      	b.n	800c400 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f000 f961 	bl	800c6b8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c3f6:	f06f 030e 	mvn.w	r3, #14
 800c3fa:	e001      	b.n	800c400 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c3fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c400:	4618      	mov	r0, r3
 800c402:	3740      	adds	r7, #64	; 0x40
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	4613      	mov	r3, r2
 800c414:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <netconn_recv_tcp_pbuf_flags+0x20>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c424:	2b10      	cmp	r3, #16
 800c426:	d009      	beq.n	800c43c <netconn_recv_tcp_pbuf_flags+0x34>
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800c42a:	f240 3225 	movw	r2, #805	; 0x325
 800c42e:	490a      	ldr	r1, [pc, #40]	; (800c458 <netconn_recv_tcp_pbuf_flags+0x50>)
 800c430:	480a      	ldr	r0, [pc, #40]	; (800c45c <netconn_recv_tcp_pbuf_flags+0x54>)
 800c432:	f00e fe91 	bl	801b158 <iprintf>
 800c436:	f06f 030f 	mvn.w	r3, #15
 800c43a:	e006      	b.n	800c44a <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800c43c:	79fb      	ldrb	r3, [r7, #7]
 800c43e:	461a      	mov	r2, r3
 800c440:	68b9      	ldr	r1, [r7, #8]
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f7ff ff5c 	bl	800c300 <netconn_recv_data_tcp>
 800c448:	4603      	mov	r3, r0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	0801c4a0 	.word	0x0801c4a0
 800c458:	0801c700 	.word	0x0801c700
 800c45c:	0801c4f8 	.word	0x0801c4f8

0800c460 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d005      	beq.n	800c480 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c47c:	2b10      	cmp	r3, #16
 800c47e:	d109      	bne.n	800c494 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800c480:	4b0a      	ldr	r3, [pc, #40]	; (800c4ac <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800c482:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800c486:	490a      	ldr	r1, [pc, #40]	; (800c4b0 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800c488:	480a      	ldr	r0, [pc, #40]	; (800c4b4 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800c48a:	f00e fe65 	bl	801b158 <iprintf>
 800c48e:	f06f 030f 	mvn.w	r3, #15
 800c492:	e006      	b.n	800c4a2 <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c494:	79fb      	ldrb	r3, [r7, #7]
 800c496:	461a      	mov	r2, r3
 800c498:	68b9      	ldr	r1, [r7, #8]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff fe0a 	bl	800c0b4 <netconn_recv_data>
 800c4a0:	4603      	mov	r3, r0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0801c4a0 	.word	0x0801c4a0
 800c4b0:	0801c724 	.word	0x0801c724
 800c4b4:	0801c4f8 	.word	0x0801c4f8

0800c4b8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08c      	sub	sp, #48	; 0x30
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d109      	bne.n	800c4dc <netconn_send+0x24>
 800c4c8:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <netconn_send+0x4c>)
 800c4ca:	f240 32b2 	movw	r2, #946	; 0x3b2
 800c4ce:	490e      	ldr	r1, [pc, #56]	; (800c508 <netconn_send+0x50>)
 800c4d0:	480e      	ldr	r0, [pc, #56]	; (800c50c <netconn_send+0x54>)
 800c4d2:	f00e fe41 	bl	801b158 <iprintf>
 800c4d6:	f06f 030f 	mvn.w	r3, #15
 800c4da:	e00e      	b.n	800c4fa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800c4e4:	f107 030c 	add.w	r3, r7, #12
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	4809      	ldr	r0, [pc, #36]	; (800c510 <netconn_send+0x58>)
 800c4ec:	f7ff fbc6 	bl	800bc7c <netconn_apimsg>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c4f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3730      	adds	r7, #48	; 0x30
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	0801c4a0 	.word	0x0801c4a0
 800c508:	0801c75c 	.word	0x0801c75c
 800c50c:	0801c4f8 	.word	0x0801c4f8
 800c510:	0800d991 	.word	0x0800d991

0800c514 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af02      	add	r7, sp, #8
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c52a:	78fa      	ldrb	r2, [r7, #3]
 800c52c:	f107 0110 	add.w	r1, r7, #16
 800c530:	6a3b      	ldr	r3, [r7, #32]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	4613      	mov	r3, r2
 800c536:	2201      	movs	r2, #1
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f805 	bl	800c548 <netconn_write_vectors_partly>
 800c53e:	4603      	mov	r3, r0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b092      	sub	sp, #72	; 0x48
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	4611      	mov	r1, r2
 800c554:	461a      	mov	r2, r3
 800c556:	460b      	mov	r3, r1
 800c558:	80fb      	strh	r3, [r7, #6]
 800c55a:	4613      	mov	r3, r2
 800c55c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d109      	bne.n	800c578 <netconn_write_vectors_partly+0x30>
 800c564:	4b4e      	ldr	r3, [pc, #312]	; (800c6a0 <netconn_write_vectors_partly+0x158>)
 800c566:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c56a:	494e      	ldr	r1, [pc, #312]	; (800c6a4 <netconn_write_vectors_partly+0x15c>)
 800c56c:	484e      	ldr	r0, [pc, #312]	; (800c6a8 <netconn_write_vectors_partly+0x160>)
 800c56e:	f00e fdf3 	bl	801b158 <iprintf>
 800c572:	f06f 030f 	mvn.w	r3, #15
 800c576:	e08e      	b.n	800c696 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c580:	2b10      	cmp	r3, #16
 800c582:	d009      	beq.n	800c598 <netconn_write_vectors_partly+0x50>
 800c584:	4b46      	ldr	r3, [pc, #280]	; (800c6a0 <netconn_write_vectors_partly+0x158>)
 800c586:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c58a:	4948      	ldr	r1, [pc, #288]	; (800c6ac <netconn_write_vectors_partly+0x164>)
 800c58c:	4846      	ldr	r0, [pc, #280]	; (800c6a8 <netconn_write_vectors_partly+0x160>)
 800c58e:	f00e fde3 	bl	801b158 <iprintf>
 800c592:	f06f 0305 	mvn.w	r3, #5
 800c596:	e07e      	b.n	800c696 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	7f9b      	ldrb	r3, [r3, #30]
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d104      	bne.n	800c5ae <netconn_write_vectors_partly+0x66>
 800c5a4:	797b      	ldrb	r3, [r7, #5]
 800c5a6:	f003 0304 	and.w	r3, r3, #4
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <netconn_write_vectors_partly+0x6a>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e000      	b.n	800c5b4 <netconn_write_vectors_partly+0x6c>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c5b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <netconn_write_vectors_partly+0x84>
 800c5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d102      	bne.n	800c5cc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c5c6:	f06f 0305 	mvn.w	r3, #5
 800c5ca:	e064      	b.n	800c696 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	643b      	str	r3, [r7, #64]	; 0x40
 800c5d4:	e015      	b.n	800c602 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	4413      	add	r3, r2
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5e2:	4413      	add	r3, r2
 800c5e4:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800c5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d202      	bcs.n	800c5fc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c5f6:	f06f 0305 	mvn.w	r3, #5
 800c5fa:	e04c      	b.n	800c696 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c5fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fe:	3301      	adds	r3, #1
 800c600:	643b      	str	r3, [r7, #64]	; 0x40
 800c602:	88fb      	ldrh	r3, [r7, #6]
 800c604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c606:	429a      	cmp	r2, r3
 800c608:	dbe5      	blt.n	800c5d6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	e040      	b.n	800c696 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c616:	2b00      	cmp	r3, #0
 800c618:	da0a      	bge.n	800c630 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d102      	bne.n	800c626 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c620:	f06f 0305 	mvn.w	r3, #5
 800c624:	e037      	b.n	800c696 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c626:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c62a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c638:	88fb      	ldrh	r3, [r7, #6]
 800c63a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c640:	797b      	ldrb	r3, [r7, #5]
 800c642:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c648:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c64e:	f107 0314 	add.w	r3, r7, #20
 800c652:	4619      	mov	r1, r3
 800c654:	4816      	ldr	r0, [pc, #88]	; (800c6b0 <netconn_write_vectors_partly+0x168>)
 800c656:	f7ff fb11 	bl	800bc7c <netconn_apimsg>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800c660:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c664:	2b00      	cmp	r3, #0
 800c666:	d114      	bne.n	800c692 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c672:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c674:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10a      	bne.n	800c692 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c680:	429a      	cmp	r2, r3
 800c682:	d006      	beq.n	800c692 <netconn_write_vectors_partly+0x14a>
 800c684:	4b06      	ldr	r3, [pc, #24]	; (800c6a0 <netconn_write_vectors_partly+0x158>)
 800c686:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c68a:	490a      	ldr	r1, [pc, #40]	; (800c6b4 <netconn_write_vectors_partly+0x16c>)
 800c68c:	4806      	ldr	r0, [pc, #24]	; (800c6a8 <netconn_write_vectors_partly+0x160>)
 800c68e:	f00e fd63 	bl	801b158 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c692:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c696:	4618      	mov	r0, r3
 800c698:	3748      	adds	r7, #72	; 0x48
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	0801c4a0 	.word	0x0801c4a0
 800c6a4:	0801c778 	.word	0x0801c778
 800c6a8:	0801c4f8 	.word	0x0801c4f8
 800c6ac:	0801c794 	.word	0x0801c794
 800c6b0:	0800de2d 	.word	0x0800de2d
 800c6b4:	0801c7b8 	.word	0x0801c7b8

0800c6b8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b08c      	sub	sp, #48	; 0x30
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d109      	bne.n	800c6de <netconn_close_shutdown+0x26>
 800c6ca:	4b10      	ldr	r3, [pc, #64]	; (800c70c <netconn_close_shutdown+0x54>)
 800c6cc:	f240 4247 	movw	r2, #1095	; 0x447
 800c6d0:	490f      	ldr	r1, [pc, #60]	; (800c710 <netconn_close_shutdown+0x58>)
 800c6d2:	4810      	ldr	r0, [pc, #64]	; (800c714 <netconn_close_shutdown+0x5c>)
 800c6d4:	f00e fd40 	bl	801b158 <iprintf>
 800c6d8:	f06f 030f 	mvn.w	r3, #15
 800c6dc:	e012      	b.n	800c704 <netconn_close_shutdown+0x4c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c6e2:	78fb      	ldrb	r3, [r7, #3]
 800c6e4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 800c6e6:	f7fb fe67 	bl	80083b8 <sys_now>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	61bb      	str	r3, [r7, #24]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c6ee:	f107 030c 	add.w	r3, r7, #12
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4808      	ldr	r0, [pc, #32]	; (800c718 <netconn_close_shutdown+0x60>)
 800c6f6:	f7ff fac1 	bl	800bc7c <netconn_apimsg>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c700:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c704:	4618      	mov	r0, r3
 800c706:	3730      	adds	r7, #48	; 0x30
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	0801c4a0 	.word	0x0801c4a0
 800c710:	0801c7dc 	.word	0x0801c7dc
 800c714:	0801c4f8 	.word	0x0801c4f8
 800c718:	0800e051 	.word	0x0800e051

0800c71c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <netconn_err+0x12>
    return ERR_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	e00d      	b.n	800c74a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c72e:	f00e fbf5 	bl	801af1c <sys_arch_protect>
 800c732:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7a1b      	ldrb	r3, [r3, #8]
 800c738:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f00e fbf9 	bl	801af38 <sys_arch_unprotect>
  return err;
 800c746:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c762:	f113 0f0d 	cmn.w	r3, #13
 800c766:	d009      	beq.n	800c77c <lwip_netconn_err_to_msg+0x28>
 800c768:	f113 0f0d 	cmn.w	r3, #13
 800c76c:	dc0c      	bgt.n	800c788 <lwip_netconn_err_to_msg+0x34>
 800c76e:	f113 0f0f 	cmn.w	r3, #15
 800c772:	d007      	beq.n	800c784 <lwip_netconn_err_to_msg+0x30>
 800c774:	f113 0f0e 	cmn.w	r3, #14
 800c778:	d002      	beq.n	800c780 <lwip_netconn_err_to_msg+0x2c>
 800c77a:	e005      	b.n	800c788 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <lwip_netconn_err_to_msg+0x54>)
 800c77e:	e00e      	b.n	800c79e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c780:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <lwip_netconn_err_to_msg+0x58>)
 800c782:	e00c      	b.n	800c79e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c784:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <lwip_netconn_err_to_msg+0x5c>)
 800c786:	e00a      	b.n	800c79e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <lwip_netconn_err_to_msg+0x48>
 800c790:	4b08      	ldr	r3, [pc, #32]	; (800c7b4 <lwip_netconn_err_to_msg+0x60>)
 800c792:	227d      	movs	r2, #125	; 0x7d
 800c794:	4908      	ldr	r1, [pc, #32]	; (800c7b8 <lwip_netconn_err_to_msg+0x64>)
 800c796:	4809      	ldr	r0, [pc, #36]	; (800c7bc <lwip_netconn_err_to_msg+0x68>)
 800c798:	f00e fcde 	bl	801b158 <iprintf>
      return NULL;
 800c79c:	2300      	movs	r3, #0
  }
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	0801fd6c 	.word	0x0801fd6c
 800c7ac:	0801fd6d 	.word	0x0801fd6d
 800c7b0:	0801fd6e 	.word	0x0801fd6e
 800c7b4:	0801c7f8 	.word	0x0801c7f8
 800c7b8:	0801c82c 	.word	0x0801c82c
 800c7bc:	0801c83c 	.word	0x0801c83c

0800c7c0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d105      	bne.n	800c7dc <lwip_netconn_is_err_msg+0x1c>
 800c7d0:	4b12      	ldr	r3, [pc, #72]	; (800c81c <lwip_netconn_is_err_msg+0x5c>)
 800c7d2:	2285      	movs	r2, #133	; 0x85
 800c7d4:	4912      	ldr	r1, [pc, #72]	; (800c820 <lwip_netconn_is_err_msg+0x60>)
 800c7d6:	4813      	ldr	r0, [pc, #76]	; (800c824 <lwip_netconn_is_err_msg+0x64>)
 800c7d8:	f00e fcbe 	bl	801b158 <iprintf>

  if (msg == &netconn_aborted) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a12      	ldr	r2, [pc, #72]	; (800c828 <lwip_netconn_is_err_msg+0x68>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d104      	bne.n	800c7ee <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	22f3      	movs	r2, #243	; 0xf3
 800c7e8:	701a      	strb	r2, [r3, #0]
    return 1;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e012      	b.n	800c814 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a0e      	ldr	r2, [pc, #56]	; (800c82c <lwip_netconn_is_err_msg+0x6c>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d104      	bne.n	800c800 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	22f2      	movs	r2, #242	; 0xf2
 800c7fa:	701a      	strb	r2, [r3, #0]
    return 1;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e009      	b.n	800c814 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a0b      	ldr	r2, [pc, #44]	; (800c830 <lwip_netconn_is_err_msg+0x70>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d104      	bne.n	800c812 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	22f1      	movs	r2, #241	; 0xf1
 800c80c:	701a      	strb	r2, [r3, #0]
    return 1;
 800c80e:	2301      	movs	r3, #1
 800c810:	e000      	b.n	800c814 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	0801c7f8 	.word	0x0801c7f8
 800c820:	0801c864 	.word	0x0801c864
 800c824:	0801c83c 	.word	0x0801c83c
 800c828:	0801fd6c 	.word	0x0801fd6c
 800c82c:	0801fd6d 	.word	0x0801fd6d
 800c830:	0801fd6e 	.word	0x0801fd6e

0800c834 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d105      	bne.n	800c854 <recv_udp+0x20>
 800c848:	4b34      	ldr	r3, [pc, #208]	; (800c91c <recv_udp+0xe8>)
 800c84a:	22e5      	movs	r2, #229	; 0xe5
 800c84c:	4934      	ldr	r1, [pc, #208]	; (800c920 <recv_udp+0xec>)
 800c84e:	4835      	ldr	r0, [pc, #212]	; (800c924 <recv_udp+0xf0>)
 800c850:	f00e fc82 	bl	801b158 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d105      	bne.n	800c866 <recv_udp+0x32>
 800c85a:	4b30      	ldr	r3, [pc, #192]	; (800c91c <recv_udp+0xe8>)
 800c85c:	22e6      	movs	r2, #230	; 0xe6
 800c85e:	4932      	ldr	r1, [pc, #200]	; (800c928 <recv_udp+0xf4>)
 800c860:	4830      	ldr	r0, [pc, #192]	; (800c924 <recv_udp+0xf0>)
 800c862:	f00e fc79 	bl	801b158 <iprintf>
  conn = (struct netconn *)arg;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d103      	bne.n	800c878 <recv_udp+0x44>
    pbuf_free(p);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f004 fcb5 	bl	80111e0 <pbuf_free>
    return;
 800c876:	e04d      	b.n	800c914 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	68ba      	ldr	r2, [r7, #8]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d005      	beq.n	800c88e <recv_udp+0x5a>
 800c882:	4b26      	ldr	r3, [pc, #152]	; (800c91c <recv_udp+0xe8>)
 800c884:	22ee      	movs	r2, #238	; 0xee
 800c886:	4929      	ldr	r1, [pc, #164]	; (800c92c <recv_udp+0xf8>)
 800c888:	4826      	ldr	r0, [pc, #152]	; (800c924 <recv_udp+0xf0>)
 800c88a:	f00e fc65 	bl	801b158 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	3310      	adds	r3, #16
 800c892:	4618      	mov	r0, r3
 800c894:	f00e fa27 	bl	801ace6 <sys_mbox_valid>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f004 fc9e 	bl	80111e0 <pbuf_free>
    return;
 800c8a4:	e036      	b.n	800c914 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c8a6:	2006      	movs	r0, #6
 800c8a8:	f003 fd4e 	bl	8010348 <memp_malloc>
 800c8ac:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d103      	bne.n	800c8bc <recv_udp+0x88>
    pbuf_free(p);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f004 fc93 	bl	80111e0 <pbuf_free>
    return;
 800c8ba:	e02b      	b.n	800c914 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <recv_udp+0xa0>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	e000      	b.n	800c8d6 <recv_udp+0xa2>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	69ba      	ldr	r2, [r7, #24]
 800c8d8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c8de:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	891b      	ldrh	r3, [r3, #8]
 800c8e4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	3310      	adds	r3, #16
 800c8ea:	69b9      	ldr	r1, [r7, #24]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f00e f985 	bl	801abfc <sys_mbox_trypost>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c8f8:	69b8      	ldr	r0, [r7, #24]
 800c8fa:	f001 fc53 	bl	800e1a4 <netbuf_delete>
    return;
 800c8fe:	e009      	b.n	800c914 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <recv_udp+0xe0>
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	8afa      	ldrh	r2, [r7, #22]
 800c90e:	2100      	movs	r1, #0
 800c910:	69f8      	ldr	r0, [r7, #28]
 800c912:	4798      	blx	r3
  }
}
 800c914:	3720      	adds	r7, #32
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	0801c7f8 	.word	0x0801c7f8
 800c920:	0801c870 	.word	0x0801c870
 800c924:	0801c83c 	.word	0x0801c83c
 800c928:	0801c894 	.word	0x0801c894
 800c92c:	0801c8b4 	.word	0x0801c8b4

0800c930 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <recv_tcp+0x22>
 800c944:	4b36      	ldr	r3, [pc, #216]	; (800ca20 <recv_tcp+0xf0>)
 800c946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c94a:	4936      	ldr	r1, [pc, #216]	; (800ca24 <recv_tcp+0xf4>)
 800c94c:	4836      	ldr	r0, [pc, #216]	; (800ca28 <recv_tcp+0xf8>)
 800c94e:	f00e fc03 	bl	801b158 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d106      	bne.n	800c966 <recv_tcp+0x36>
 800c958:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <recv_tcp+0xf0>)
 800c95a:	f240 122d 	movw	r2, #301	; 0x12d
 800c95e:	4933      	ldr	r1, [pc, #204]	; (800ca2c <recv_tcp+0xfc>)
 800c960:	4831      	ldr	r0, [pc, #196]	; (800ca28 <recv_tcp+0xf8>)
 800c962:	f00e fbf9 	bl	801b158 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d006      	beq.n	800c97c <recv_tcp+0x4c>
 800c96e:	4b2c      	ldr	r3, [pc, #176]	; (800ca20 <recv_tcp+0xf0>)
 800c970:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c974:	492e      	ldr	r1, [pc, #184]	; (800ca30 <recv_tcp+0x100>)
 800c976:	482c      	ldr	r0, [pc, #176]	; (800ca28 <recv_tcp+0xf8>)
 800c978:	f00e fbee 	bl	801b158 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d102      	bne.n	800c98c <recv_tcp+0x5c>
    return ERR_VAL;
 800c986:	f06f 0305 	mvn.w	r3, #5
 800c98a:	e045      	b.n	800ca18 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	429a      	cmp	r2, r3
 800c994:	d006      	beq.n	800c9a4 <recv_tcp+0x74>
 800c996:	4b22      	ldr	r3, [pc, #136]	; (800ca20 <recv_tcp+0xf0>)
 800c998:	f240 1235 	movw	r2, #309	; 0x135
 800c99c:	4925      	ldr	r1, [pc, #148]	; (800ca34 <recv_tcp+0x104>)
 800c99e:	4822      	ldr	r0, [pc, #136]	; (800ca28 <recv_tcp+0xf8>)
 800c9a0:	f00e fbda 	bl	801b158 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	3310      	adds	r3, #16
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f00e f99c 	bl	801ace6 <sys_mbox_valid>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10d      	bne.n	800c9d0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d008      	beq.n	800c9cc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	891b      	ldrh	r3, [r3, #8]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	68b8      	ldr	r0, [r7, #8]
 800c9c2:	f005 fbd5 	bl	8012170 <tcp_recved>
      pbuf_free(p);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f004 fc0a 	bl	80111e0 <pbuf_free>
    }
    return ERR_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	e023      	b.n	800ca18 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d005      	beq.n	800c9e2 <recv_tcp+0xb2>
    msg = p;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	891b      	ldrh	r3, [r3, #8]
 800c9de:	83fb      	strh	r3, [r7, #30]
 800c9e0:	e003      	b.n	800c9ea <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c9e2:	4b15      	ldr	r3, [pc, #84]	; (800ca38 <recv_tcp+0x108>)
 800c9e4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	3310      	adds	r3, #16
 800c9ee:	69b9      	ldr	r1, [r7, #24]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f00e f903 	bl	801abfc <sys_mbox_trypost>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ca00:	e00a      	b.n	800ca18 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d005      	beq.n	800ca16 <recv_tcp+0xe6>
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0e:	8bfa      	ldrh	r2, [r7, #30]
 800ca10:	2100      	movs	r1, #0
 800ca12:	6978      	ldr	r0, [r7, #20]
 800ca14:	4798      	blx	r3
  }

  return ERR_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3720      	adds	r7, #32
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	0801c7f8 	.word	0x0801c7f8
 800ca24:	0801c8d4 	.word	0x0801c8d4
 800ca28:	0801c83c 	.word	0x0801c83c
 800ca2c:	0801c8f8 	.word	0x0801c8f8
 800ca30:	0801c918 	.word	0x0801c918
 800ca34:	0801c930 	.word	0x0801c930
 800ca38:	0801fd6e 	.word	0x0801fd6e

0800ca3c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <poll_tcp+0x22>
 800ca50:	4b22      	ldr	r3, [pc, #136]	; (800cadc <poll_tcp+0xa0>)
 800ca52:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ca56:	4922      	ldr	r1, [pc, #136]	; (800cae0 <poll_tcp+0xa4>)
 800ca58:	4822      	ldr	r0, [pc, #136]	; (800cae4 <poll_tcp+0xa8>)
 800ca5a:	f00e fb7d 	bl	801b158 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	785b      	ldrb	r3, [r3, #1]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d104      	bne.n	800ca70 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ca66:	2101      	movs	r1, #1
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f001 f813 	bl	800da94 <lwip_netconn_do_writemore>
 800ca6e:	e007      	b.n	800ca80 <poll_tcp+0x44>
  } else if (conn->state == NETCONN_CLOSE) {
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	785b      	ldrb	r3, [r3, #1]
 800ca74:	2b04      	cmp	r3, #4
 800ca76:	d103      	bne.n	800ca80 <poll_tcp+0x44>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ca78:	2101      	movs	r1, #1
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	f000 fbfc 	bl	800d278 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	7f9b      	ldrb	r3, [r3, #30]
 800ca84:	f003 0310 	and.w	r3, r3, #16
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d021      	beq.n	800cad0 <poll_tcp+0x94>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d01d      	beq.n	800cad0 <poll_tcp+0x94>
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca9c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800caa0:	d316      	bcc.n	800cad0 <poll_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d810      	bhi.n	800cad0 <poll_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	7f9b      	ldrb	r3, [r3, #30]
 800cab2:	f023 0310 	bic.w	r3, r3, #16
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	779a      	strb	r2, [r3, #30]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d005      	beq.n	800cad0 <poll_tcp+0x94>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac8:	2200      	movs	r2, #0
 800caca:	2102      	movs	r1, #2
 800cacc:	68f8      	ldr	r0, [r7, #12]
 800cace:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	0801c7f8 	.word	0x0801c7f8
 800cae0:	0801c950 	.word	0x0801c950
 800cae4:	0801c83c 	.word	0x0801c83c

0800cae8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4613      	mov	r3, r2
 800caf4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d106      	bne.n	800cb0e <sent_tcp+0x26>
 800cb00:	4b20      	ldr	r3, [pc, #128]	; (800cb84 <sent_tcp+0x9c>)
 800cb02:	f240 1293 	movw	r2, #403	; 0x193
 800cb06:	4920      	ldr	r1, [pc, #128]	; (800cb88 <sent_tcp+0xa0>)
 800cb08:	4820      	ldr	r0, [pc, #128]	; (800cb8c <sent_tcp+0xa4>)
 800cb0a:	f00e fb25 	bl	801b158 <iprintf>

  if (conn) {
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d032      	beq.n	800cb7a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	785b      	ldrb	r3, [r3, #1]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d104      	bne.n	800cb26 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	6978      	ldr	r0, [r7, #20]
 800cb20:	f000 ffb8 	bl	800da94 <lwip_netconn_do_writemore>
 800cb24:	e007      	b.n	800cb36 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	785b      	ldrb	r3, [r3, #1]
 800cb2a:	2b04      	cmp	r3, #4
 800cb2c:	d103      	bne.n	800cb36 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800cb2e:	2101      	movs	r1, #1
 800cb30:	6978      	ldr	r0, [r7, #20]
 800cb32:	f000 fba1 	bl	800d278 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d01d      	beq.n	800cb7a <sent_tcp+0x92>
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb46:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cb4a:	d316      	bcc.n	800cb7a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d810      	bhi.n	800cb7a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	7f9b      	ldrb	r3, [r3, #30]
 800cb5c:	f023 0310 	bic.w	r3, r3, #16
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	779a      	strb	r2, [r3, #30]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d005      	beq.n	800cb7a <sent_tcp+0x92>
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb72:	88fa      	ldrh	r2, [r7, #6]
 800cb74:	2102      	movs	r1, #2
 800cb76:	6978      	ldr	r0, [r7, #20]
 800cb78:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	0801c7f8 	.word	0x0801c7f8
 800cb88:	0801c950 	.word	0x0801c950
 800cb8c:	0801c83c 	.word	0x0801c83c

0800cb90 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	460b      	mov	r3, r1
 800cb9a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d106      	bne.n	800cbb4 <err_tcp+0x24>
 800cba6:	4b5f      	ldr	r3, [pc, #380]	; (800cd24 <err_tcp+0x194>)
 800cba8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800cbac:	495e      	ldr	r1, [pc, #376]	; (800cd28 <err_tcp+0x198>)
 800cbae:	485f      	ldr	r0, [pc, #380]	; (800cd2c <err_tcp+0x19c>)
 800cbb0:	f00e fad2 	bl	801b158 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800cbb4:	f00e f9b2 	bl	801af1c <sys_arch_protect>
 800cbb8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	78fa      	ldrb	r2, [r7, #3]
 800cbc4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	7f9b      	ldrb	r3, [r3, #30]
 800cbca:	f043 0301 	orr.w	r3, r3, #1
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	779a      	strb	r2, [r3, #30]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	785b      	ldrb	r3, [r3, #1]
 800cbd8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800cbe0:	69b8      	ldr	r0, [r7, #24]
 800cbe2:	f00e f9a9 	bl	801af38 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d005      	beq.n	800cbfa <err_tcp+0x6a>
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	2104      	movs	r1, #4
 800cbf6:	69f8      	ldr	r0, [r7, #28]
 800cbf8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d005      	beq.n	800cc0e <err_tcp+0x7e>
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc06:	2200      	movs	r2, #0
 800cc08:	2100      	movs	r1, #0
 800cc0a:	69f8      	ldr	r0, [r7, #28]
 800cc0c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d005      	beq.n	800cc22 <err_tcp+0x92>
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2102      	movs	r1, #2
 800cc1e:	69f8      	ldr	r0, [r7, #28]
 800cc20:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800cc22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7ff fd94 	bl	800c754 <lwip_netconn_err_to_msg>
 800cc2c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	3310      	adds	r3, #16
 800cc32:	4618      	mov	r0, r3
 800cc34:	f00e f857 	bl	801ace6 <sys_mbox_valid>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d005      	beq.n	800cc4a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	3310      	adds	r3, #16
 800cc42:	6939      	ldr	r1, [r7, #16]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f00d ffd9 	bl	801abfc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	3314      	adds	r3, #20
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f00e f849 	bl	801ace6 <sys_mbox_valid>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	6939      	ldr	r1, [r7, #16]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f00d ffcb 	bl	801abfc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d005      	beq.n	800cc78 <err_tcp+0xe8>
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	2b04      	cmp	r3, #4
 800cc70:	d002      	beq.n	800cc78 <err_tcp+0xe8>
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d143      	bne.n	800cd00 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	7f9b      	ldrb	r3, [r3, #30]
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	bf14      	ite	ne
 800cc84:	2301      	movne	r3, #1
 800cc86:	2300      	moveq	r3, #0
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	7f9b      	ldrb	r3, [r3, #30]
 800cc90:	f023 0304 	bic.w	r3, r3, #4
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	779a      	strb	r2, [r3, #30]

    if (!was_nonblocking_connect) {
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d13b      	bne.n	800cd18 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d106      	bne.n	800ccb6 <err_tcp+0x126>
 800cca8:	4b1e      	ldr	r3, [pc, #120]	; (800cd24 <err_tcp+0x194>)
 800ccaa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ccae:	4920      	ldr	r1, [pc, #128]	; (800cd30 <err_tcp+0x1a0>)
 800ccb0:	481e      	ldr	r0, [pc, #120]	; (800cd2c <err_tcp+0x19c>)
 800ccb2:	f00e fa51 	bl	801b158 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d104      	bne.n	800ccc6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	6a1b      	ldr	r3, [r3, #32]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	711a      	strb	r2, [r3, #4]
 800ccc4:	e003      	b.n	800ccce <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	78fa      	ldrb	r2, [r7, #3]
 800cccc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ccce:	69fb      	ldr	r3, [r7, #28]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	330c      	adds	r3, #12
 800ccd6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ccd8:	68b8      	ldr	r0, [r7, #8]
 800ccda:	f00e f895 	bl	801ae08 <sys_sem_valid>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <err_tcp+0x162>
 800cce4:	4b0f      	ldr	r3, [pc, #60]	; (800cd24 <err_tcp+0x194>)
 800cce6:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ccea:	4912      	ldr	r1, [pc, #72]	; (800cd34 <err_tcp+0x1a4>)
 800ccec:	480f      	ldr	r0, [pc, #60]	; (800cd2c <err_tcp+0x19c>)
 800ccee:	f00e fa33 	bl	801b158 <iprintf>
      conn->current_msg = NULL;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ccf8:	68b8      	ldr	r0, [r7, #8]
 800ccfa:	f00e f86b 	bl	801add4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ccfe:	e00b      	b.n	800cd18 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d008      	beq.n	800cd1a <err_tcp+0x18a>
 800cd08:	4b06      	ldr	r3, [pc, #24]	; (800cd24 <err_tcp+0x194>)
 800cd0a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800cd0e:	490a      	ldr	r1, [pc, #40]	; (800cd38 <err_tcp+0x1a8>)
 800cd10:	4806      	ldr	r0, [pc, #24]	; (800cd2c <err_tcp+0x19c>)
 800cd12:	f00e fa21 	bl	801b158 <iprintf>
  }
}
 800cd16:	e000      	b.n	800cd1a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800cd18:	bf00      	nop
}
 800cd1a:	bf00      	nop
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	0801c7f8 	.word	0x0801c7f8
 800cd28:	0801c950 	.word	0x0801c950
 800cd2c:	0801c83c 	.word	0x0801c83c
 800cd30:	0801c960 	.word	0x0801c960
 800cd34:	0801c97c 	.word	0x0801c97c
 800cd38:	0801c998 	.word	0x0801c998

0800cd3c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800cd4a:	6879      	ldr	r1, [r7, #4]
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f006 f8d5 	bl	8012efc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800cd52:	490a      	ldr	r1, [pc, #40]	; (800cd7c <setup_tcp+0x40>)
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f006 f8e3 	bl	8012f20 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800cd5a:	4909      	ldr	r1, [pc, #36]	; (800cd80 <setup_tcp+0x44>)
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f006 f901 	bl	8012f64 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800cd62:	2202      	movs	r2, #2
 800cd64:	4907      	ldr	r1, [pc, #28]	; (800cd84 <setup_tcp+0x48>)
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f006 f958 	bl	801301c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800cd6c:	4906      	ldr	r1, [pc, #24]	; (800cd88 <setup_tcp+0x4c>)
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f006 f91a 	bl	8012fa8 <tcp_err>
}
 800cd74:	bf00      	nop
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	0800c931 	.word	0x0800c931
 800cd80:	0800cae9 	.word	0x0800cae9
 800cd84:	0800ca3d 	.word	0x0800ca3d
 800cd88:	0800cb91 	.word	0x0800cb91

0800cd8c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800cd8c:	b590      	push	{r4, r7, lr}
 800cd8e:	b089      	sub	sp, #36	; 0x24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	4613      	mov	r3, r2
 800cd98:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <accept_function+0x1e>
    return ERR_VAL;
 800cda4:	f06f 0305 	mvn.w	r3, #5
 800cda8:	e0a1      	b.n	800ceee <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	3314      	adds	r3, #20
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f00d ff99 	bl	801ace6 <sys_mbox_valid>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d102      	bne.n	800cdc0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800cdba:	f06f 0305 	mvn.w	r3, #5
 800cdbe:	e096      	b.n	800ceee <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11b      	bne.n	800cdfe <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	f103 0414 	add.w	r4, r3, #20
 800cdcc:	f06f 000c 	mvn.w	r0, #12
 800cdd0:	f7ff fcc0 	bl	800c754 <lwip_netconn_err_to_msg>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f00d ff0f 	bl	801abfc <sys_mbox_trypost>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d109      	bne.n	800cdf8 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d005      	beq.n	800cdf8 <accept_function+0x6c>
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	69f8      	ldr	r0, [r7, #28]
 800cdf6:	4798      	blx	r3
    }
    return ERR_VAL;
 800cdf8:	f06f 0305 	mvn.w	r3, #5
 800cdfc:	e077      	b.n	800ceee <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800cdfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d006      	beq.n	800ce14 <accept_function+0x88>
 800ce06:	4b3c      	ldr	r3, [pc, #240]	; (800cef8 <accept_function+0x16c>)
 800ce08:	f240 222a 	movw	r2, #554	; 0x22a
 800ce0c:	493b      	ldr	r1, [pc, #236]	; (800cefc <accept_function+0x170>)
 800ce0e:	483c      	ldr	r0, [pc, #240]	; (800cf00 <accept_function+0x174>)
 800ce10:	f00e f9a2 	bl	801b158 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	781a      	ldrb	r2, [r3, #0]
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f000 f8f0 	bl	800d004 <netconn_alloc>
 800ce24:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d11b      	bne.n	800ce64 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ce2c:	69fb      	ldr	r3, [r7, #28]
 800ce2e:	f103 0414 	add.w	r4, r3, #20
 800ce32:	f06f 000c 	mvn.w	r0, #12
 800ce36:	f7ff fc8d 	bl	800c754 <lwip_netconn_err_to_msg>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f00d fedc 	bl	801abfc <sys_mbox_trypost>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d109      	bne.n	800ce5e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d005      	beq.n	800ce5e <accept_function+0xd2>
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce56:	2200      	movs	r2, #0
 800ce58:	2100      	movs	r1, #0
 800ce5a:	69f8      	ldr	r0, [r7, #28]
 800ce5c:	4798      	blx	r3
    }
    return ERR_MEM;
 800ce5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce62:	e044      	b.n	800ceee <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ce6a:	69b8      	ldr	r0, [r7, #24]
 800ce6c:	f7ff ff66 	bl	800cd3c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	3314      	adds	r3, #20
 800ce74:	69b9      	ldr	r1, [r7, #24]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f00d fec0 	bl	801abfc <sys_mbox_trypost>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d02a      	beq.n	800ced8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6978      	ldr	r0, [r7, #20]
 800ce8c:	f006 f836 	bl	8012efc <tcp_arg>
    tcp_recv(pcb, NULL);
 800ce90:	2100      	movs	r1, #0
 800ce92:	6978      	ldr	r0, [r7, #20]
 800ce94:	f006 f844 	bl	8012f20 <tcp_recv>
    tcp_sent(pcb, NULL);
 800ce98:	2100      	movs	r1, #0
 800ce9a:	6978      	ldr	r0, [r7, #20]
 800ce9c:	f006 f862 	bl	8012f64 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800cea0:	2200      	movs	r2, #0
 800cea2:	2100      	movs	r1, #0
 800cea4:	6978      	ldr	r0, [r7, #20]
 800cea6:	f006 f8b9 	bl	801301c <tcp_poll>
    tcp_err(pcb, NULL);
 800ceaa:	2100      	movs	r1, #0
 800ceac:	6978      	ldr	r0, [r7, #20]
 800ceae:	f006 f87b 	bl	8012fa8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	3310      	adds	r3, #16
 800cebc:	4618      	mov	r0, r3
 800cebe:	f00d fe8b 	bl	801abd8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	3310      	adds	r3, #16
 800cec6:	4618      	mov	r0, r3
 800cec8:	f00d ff1e 	bl	801ad08 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800cecc:	69b8      	ldr	r0, [r7, #24]
 800cece:	f000 f90b 	bl	800d0e8 <netconn_free>
    return ERR_MEM;
 800ced2:	f04f 33ff 	mov.w	r3, #4294967295
 800ced6:	e00a      	b.n	800ceee <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d005      	beq.n	800ceec <accept_function+0x160>
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	2200      	movs	r2, #0
 800cee6:	2100      	movs	r1, #0
 800cee8:	69f8      	ldr	r0, [r7, #28]
 800ceea:	4798      	blx	r3
  }

  return ERR_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3724      	adds	r7, #36	; 0x24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd90      	pop	{r4, r7, pc}
 800cef6:	bf00      	nop
 800cef8:	0801c7f8 	.word	0x0801c7f8
 800cefc:	0801c9b4 	.word	0x0801c9b4
 800cf00:	0801c83c 	.word	0x0801c83c

0800cf04 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800cf04:	b590      	push	{r4, r7, lr}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d006      	beq.n	800cf28 <pcb_new+0x24>
 800cf1a:	4b2b      	ldr	r3, [pc, #172]	; (800cfc8 <pcb_new+0xc4>)
 800cf1c:	f240 2265 	movw	r2, #613	; 0x265
 800cf20:	492a      	ldr	r1, [pc, #168]	; (800cfcc <pcb_new+0xc8>)
 800cf22:	482b      	ldr	r0, [pc, #172]	; (800cfd0 <pcb_new+0xcc>)
 800cf24:	f00e f918 	bl	801b158 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf32:	2b10      	cmp	r3, #16
 800cf34:	d022      	beq.n	800cf7c <pcb_new+0x78>
 800cf36:	2b20      	cmp	r3, #32
 800cf38:	d133      	bne.n	800cfa2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681c      	ldr	r4, [r3, #0]
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f00b faa4 	bl	801848e <udp_new_ip_type>
 800cf46:	4603      	mov	r3, r0
 800cf48:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d02a      	beq.n	800cfaa <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b22      	cmp	r3, #34	; 0x22
 800cf5c:	d104      	bne.n	800cf68 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6858      	ldr	r0, [r3, #4]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	4917      	ldr	r1, [pc, #92]	; (800cfd4 <pcb_new+0xd0>)
 800cf76:	f00b fa11 	bl	801839c <udp_recv>
      }
      break;
 800cf7a:	e016      	b.n	800cfaa <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681c      	ldr	r4, [r3, #0]
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f005 ffac 	bl	8012ee0 <tcp_new_ip_type>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00b      	beq.n	800cfae <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fece 	bl	800cd3c <setup_tcp>
      }
      break;
 800cfa0:	e005      	b.n	800cfae <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	22fa      	movs	r2, #250	; 0xfa
 800cfa6:	711a      	strb	r2, [r3, #4]
      return;
 800cfa8:	e00a      	b.n	800cfc0 <pcb_new+0xbc>
      break;
 800cfaa:	bf00      	nop
 800cfac:	e000      	b.n	800cfb0 <pcb_new+0xac>
      break;
 800cfae:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	22ff      	movs	r2, #255	; 0xff
 800cfbe:	711a      	strb	r2, [r3, #4]
  }
}
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd90      	pop	{r4, r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0801c7f8 	.word	0x0801c7f8
 800cfcc:	0801c9dc 	.word	0x0801c9dc
 800cfd0:	0801c83c 	.word	0x0801c83c
 800cfd4:	0800c835 	.word	0x0800c835

0800cfd8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff ff85 	bl	800cf04 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
	...

0800d004 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	6039      	str	r1, [r7, #0]
 800d00e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d010:	2300      	movs	r3, #0
 800d012:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d014:	2007      	movs	r0, #7
 800d016:	f003 f997 	bl	8010348 <memp_malloc>
 800d01a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d101      	bne.n	800d026 <netconn_alloc+0x22>
    return NULL;
 800d022:	2300      	movs	r3, #0
 800d024:	e056      	b.n	800d0d4 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	79fa      	ldrb	r2, [r7, #7]
 800d030:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d038:	79fb      	ldrb	r3, [r7, #7]
 800d03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d03e:	2b10      	cmp	r3, #16
 800d040:	d004      	beq.n	800d04c <netconn_alloc+0x48>
 800d042:	2b20      	cmp	r3, #32
 800d044:	d105      	bne.n	800d052 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d046:	2306      	movs	r3, #6
 800d048:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d04a:	e00a      	b.n	800d062 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d04c:	2306      	movs	r3, #6
 800d04e:	617b      	str	r3, [r7, #20]
      break;
 800d050:	e007      	b.n	800d062 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d052:	4b22      	ldr	r3, [pc, #136]	; (800d0dc <netconn_alloc+0xd8>)
 800d054:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d058:	4921      	ldr	r1, [pc, #132]	; (800d0e0 <netconn_alloc+0xdc>)
 800d05a:	4822      	ldr	r0, [pc, #136]	; (800d0e4 <netconn_alloc+0xe0>)
 800d05c:	f00e f87c 	bl	801b158 <iprintf>
      goto free_and_return;
 800d060:	e033      	b.n	800d0ca <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3310      	adds	r3, #16
 800d066:	6979      	ldr	r1, [r7, #20]
 800d068:	4618      	mov	r0, r3
 800d06a:	f00d fd93 	bl	801ab94 <sys_mbox_new>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d129      	bne.n	800d0c8 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	330c      	adds	r3, #12
 800d078:	2100      	movs	r1, #0
 800d07a:	4618      	mov	r0, r3
 800d07c:	f00d fe51 	bl	801ad22 <sys_sem_new>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d005      	beq.n	800d092 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3310      	adds	r3, #16
 800d08a:	4618      	mov	r0, r3
 800d08c:	f00d fda4 	bl	801abd8 <sys_mbox_free>
    goto free_and_return;
 800d090:	e01b      	b.n	800d0ca <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3314      	adds	r3, #20
 800d096:	4618      	mov	r0, r3
 800d098:	f00d fe36 	bl	801ad08 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	621a      	str	r2, [r3, #32]
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0bc:	839a      	strh	r2, [r3, #28]
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	7cfa      	ldrb	r2, [r7, #19]
 800d0c2:	779a      	strb	r2, [r3, #30]
  return conn;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	e005      	b.n	800d0d4 <netconn_alloc+0xd0>
    goto free_and_return;
 800d0c8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d0ca:	68f9      	ldr	r1, [r7, #12]
 800d0cc:	2007      	movs	r0, #7
 800d0ce:	f003 f9b1 	bl	8010434 <memp_free>
  return NULL;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	0801c7f8 	.word	0x0801c7f8
 800d0e0:	0801c9fc 	.word	0x0801c9fc
 800d0e4:	0801c83c 	.word	0x0801c83c

0800d0e8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d006      	beq.n	800d106 <netconn_free+0x1e>
 800d0f8:	4b1b      	ldr	r3, [pc, #108]	; (800d168 <netconn_free+0x80>)
 800d0fa:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d0fe:	491b      	ldr	r1, [pc, #108]	; (800d16c <netconn_free+0x84>)
 800d100:	481b      	ldr	r0, [pc, #108]	; (800d170 <netconn_free+0x88>)
 800d102:	f00e f829 	bl	801b158 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3310      	adds	r3, #16
 800d10a:	4618      	mov	r0, r3
 800d10c:	f00d fdeb 	bl	801ace6 <sys_mbox_valid>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d006      	beq.n	800d124 <netconn_free+0x3c>
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <netconn_free+0x80>)
 800d118:	f240 3223 	movw	r2, #803	; 0x323
 800d11c:	4915      	ldr	r1, [pc, #84]	; (800d174 <netconn_free+0x8c>)
 800d11e:	4814      	ldr	r0, [pc, #80]	; (800d170 <netconn_free+0x88>)
 800d120:	f00e f81a 	bl	801b158 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3314      	adds	r3, #20
 800d128:	4618      	mov	r0, r3
 800d12a:	f00d fddc 	bl	801ace6 <sys_mbox_valid>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d006      	beq.n	800d142 <netconn_free+0x5a>
 800d134:	4b0c      	ldr	r3, [pc, #48]	; (800d168 <netconn_free+0x80>)
 800d136:	f240 3226 	movw	r2, #806	; 0x326
 800d13a:	490f      	ldr	r1, [pc, #60]	; (800d178 <netconn_free+0x90>)
 800d13c:	480c      	ldr	r0, [pc, #48]	; (800d170 <netconn_free+0x88>)
 800d13e:	f00e f80b 	bl	801b158 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	330c      	adds	r3, #12
 800d146:	4618      	mov	r0, r3
 800d148:	f00d fe51 	bl	801adee <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	330c      	adds	r3, #12
 800d150:	4618      	mov	r0, r3
 800d152:	f00d fe6a 	bl	801ae2a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	2007      	movs	r0, #7
 800d15a:	f003 f96b 	bl	8010434 <memp_free>
}
 800d15e:	bf00      	nop
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	0801c7f8 	.word	0x0801c7f8
 800d16c:	0801ca24 	.word	0x0801ca24
 800d170:	0801c83c 	.word	0x0801c83c
 800d174:	0801ca54 	.word	0x0801ca54
 800d178:	0801ca90 	.word	0x0801ca90

0800d17c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3310      	adds	r3, #16
 800d188:	4618      	mov	r0, r3
 800d18a:	f00d fdac 	bl	801ace6 <sys_mbox_valid>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d02f      	beq.n	800d1f4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d194:	e018      	b.n	800d1c8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d19e:	2b10      	cmp	r3, #16
 800d1a0:	d10e      	bne.n	800d1c0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	f107 020f 	add.w	r2, r7, #15
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff fb08 	bl	800c7c0 <lwip_netconn_is_err_msg>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d108      	bne.n	800d1c8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f004 f811 	bl	80111e0 <pbuf_free>
 800d1be:	e003      	b.n	800d1c8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 ffee 	bl	800e1a4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3310      	adds	r3, #16
 800d1cc:	f107 0210 	add.w	r2, r7, #16
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f00d fd6b 	bl	801acae <sys_arch_mbox_tryfetch>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1de:	d1da      	bne.n	800d196 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3310      	adds	r3, #16
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f00d fcf7 	bl	801abd8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	3310      	adds	r3, #16
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f00d fd8a 	bl	801ad08 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	3314      	adds	r3, #20
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f00d fd74 	bl	801ace6 <sys_mbox_valid>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d034      	beq.n	800d26e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d204:	e01d      	b.n	800d242 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f107 020e 	add.w	r2, r7, #14
 800d20c:	4611      	mov	r1, r2
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff fad6 	bl	800c7c0 <lwip_netconn_is_err_msg>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d113      	bne.n	800d242 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d21e:	6978      	ldr	r0, [r7, #20]
 800d220:	f7ff ffac 	bl	800d17c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d007      	beq.n	800d23c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	f004 fdd5 	bl	8011de0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	2200      	movs	r2, #0
 800d23a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d23c:	6978      	ldr	r0, [r7, #20]
 800d23e:	f7ff ff53 	bl	800d0e8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3314      	adds	r3, #20
 800d246:	f107 0210 	add.w	r2, r7, #16
 800d24a:	4611      	mov	r1, r2
 800d24c:	4618      	mov	r0, r3
 800d24e:	f00d fd2e 	bl	801acae <sys_arch_mbox_tryfetch>
 800d252:	4603      	mov	r3, r0
 800d254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d258:	d1d5      	bne.n	800d206 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3314      	adds	r3, #20
 800d25e:	4618      	mov	r0, r3
 800d260:	f00d fcba 	bl	801abd8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	3314      	adds	r3, #20
 800d268:	4618      	mov	r0, r3
 800d26a:	f00d fd4d 	bl	801ad08 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d26e:	bf00      	nop
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b088      	sub	sp, #32
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
 800d288:	2300      	movs	r3, #0
 800d28a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <lwip_netconn_do_close_internal+0x28>
 800d292:	4b97      	ldr	r3, [pc, #604]	; (800d4f0 <lwip_netconn_do_close_internal+0x278>)
 800d294:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d298:	4996      	ldr	r1, [pc, #600]	; (800d4f4 <lwip_netconn_do_close_internal+0x27c>)
 800d29a:	4897      	ldr	r0, [pc, #604]	; (800d4f8 <lwip_netconn_do_close_internal+0x280>)
 800d29c:	f00d ff5c 	bl	801b158 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2a8:	2b10      	cmp	r3, #16
 800d2aa:	d006      	beq.n	800d2ba <lwip_netconn_do_close_internal+0x42>
 800d2ac:	4b90      	ldr	r3, [pc, #576]	; (800d4f0 <lwip_netconn_do_close_internal+0x278>)
 800d2ae:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d2b2:	4992      	ldr	r1, [pc, #584]	; (800d4fc <lwip_netconn_do_close_internal+0x284>)
 800d2b4:	4890      	ldr	r0, [pc, #576]	; (800d4f8 <lwip_netconn_do_close_internal+0x280>)
 800d2b6:	f00d ff4f 	bl	801b158 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	785b      	ldrb	r3, [r3, #1]
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d006      	beq.n	800d2d0 <lwip_netconn_do_close_internal+0x58>
 800d2c2:	4b8b      	ldr	r3, [pc, #556]	; (800d4f0 <lwip_netconn_do_close_internal+0x278>)
 800d2c4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d2c8:	498d      	ldr	r1, [pc, #564]	; (800d500 <lwip_netconn_do_close_internal+0x288>)
 800d2ca:	488b      	ldr	r0, [pc, #556]	; (800d4f8 <lwip_netconn_do_close_internal+0x280>)
 800d2cc:	f00d ff44 	bl	801b158 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d106      	bne.n	800d2e6 <lwip_netconn_do_close_internal+0x6e>
 800d2d8:	4b85      	ldr	r3, [pc, #532]	; (800d4f0 <lwip_netconn_do_close_internal+0x278>)
 800d2da:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d2de:	4989      	ldr	r1, [pc, #548]	; (800d504 <lwip_netconn_do_close_internal+0x28c>)
 800d2e0:	4885      	ldr	r0, [pc, #532]	; (800d4f8 <lwip_netconn_do_close_internal+0x280>)
 800d2e2:	f00d ff39 	bl	801b158 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d106      	bne.n	800d2fc <lwip_netconn_do_close_internal+0x84>
 800d2ee:	4b80      	ldr	r3, [pc, #512]	; (800d4f0 <lwip_netconn_do_close_internal+0x278>)
 800d2f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d2f4:	4984      	ldr	r1, [pc, #528]	; (800d508 <lwip_netconn_do_close_internal+0x290>)
 800d2f6:	4880      	ldr	r0, [pc, #512]	; (800d4f8 <lwip_netconn_do_close_internal+0x280>)
 800d2f8:	f00d ff2e 	bl	801b158 <iprintf>

  tpcb = conn->pcb.tcp;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	7a1b      	ldrb	r3, [r3, #8]
 800d308:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d312:	7bfb      	ldrb	r3, [r7, #15]
 800d314:	f003 0302 	and.w	r3, r3, #2
 800d318:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d31a:	7bfb      	ldrb	r3, [r7, #15]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d102      	bne.n	800d326 <lwip_netconn_do_close_internal+0xae>
    shut_close = 1;
 800d320:	2301      	movs	r3, #1
 800d322:	77bb      	strb	r3, [r7, #30]
 800d324:	e01f      	b.n	800d366 <lwip_netconn_do_close_internal+0xee>
  } else if (shut_rx &&
 800d326:	7bbb      	ldrb	r3, [r7, #14]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00e      	beq.n	800d34a <lwip_netconn_do_close_internal+0xd2>
             ((tpcb->state == FIN_WAIT_1) ||
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d330:	2b05      	cmp	r3, #5
 800d332:	d007      	beq.n	800d344 <lwip_netconn_do_close_internal+0xcc>
              (tpcb->state == FIN_WAIT_2) ||
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d338:	2b06      	cmp	r3, #6
 800d33a:	d003      	beq.n	800d344 <lwip_netconn_do_close_internal+0xcc>
              (tpcb->state == CLOSING))) {
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d340:	2b08      	cmp	r3, #8
 800d342:	d102      	bne.n	800d34a <lwip_netconn_do_close_internal+0xd2>
    shut_close = 1;
 800d344:	2301      	movs	r3, #1
 800d346:	77bb      	strb	r3, [r7, #30]
 800d348:	e00d      	b.n	800d366 <lwip_netconn_do_close_internal+0xee>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d34a:	7b7b      	ldrb	r3, [r7, #13]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d008      	beq.n	800d362 <lwip_netconn_do_close_internal+0xea>
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	8b5b      	ldrh	r3, [r3, #26]
 800d354:	f003 0310 	and.w	r3, r3, #16
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <lwip_netconn_do_close_internal+0xea>
    shut_close = 1;
 800d35c:	2301      	movs	r3, #1
 800d35e:	77bb      	strb	r3, [r7, #30]
 800d360:	e001      	b.n	800d366 <lwip_netconn_do_close_internal+0xee>
  } else {
    shut_close = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d366:	7fbb      	ldrb	r3, [r7, #30]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <lwip_netconn_do_close_internal+0xfc>
    tcp_arg(tpcb, NULL);
 800d36c:	2100      	movs	r1, #0
 800d36e:	69b8      	ldr	r0, [r7, #24]
 800d370:	f005 fdc4 	bl	8012efc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	7d1b      	ldrb	r3, [r3, #20]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d104      	bne.n	800d386 <lwip_netconn_do_close_internal+0x10e>
    tcp_accept(tpcb, NULL);
 800d37c:	2100      	movs	r1, #0
 800d37e:	69b8      	ldr	r0, [r7, #24]
 800d380:	f005 fe34 	bl	8012fec <tcp_accept>
 800d384:	e01d      	b.n	800d3c2 <lwip_netconn_do_close_internal+0x14a>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d386:	7bbb      	ldrb	r3, [r7, #14]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d007      	beq.n	800d39c <lwip_netconn_do_close_internal+0x124>
      tcp_recv(tpcb, NULL);
 800d38c:	2100      	movs	r1, #0
 800d38e:	69b8      	ldr	r0, [r7, #24]
 800d390:	f005 fdc6 	bl	8012f20 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d394:	2100      	movs	r1, #0
 800d396:	69b8      	ldr	r0, [r7, #24]
 800d398:	f005 fe28 	bl	8012fec <tcp_accept>
    }
    if (shut_tx) {
 800d39c:	7b7b      	ldrb	r3, [r7, #13]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <lwip_netconn_do_close_internal+0x132>
      tcp_sent(tpcb, NULL);
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	69b8      	ldr	r0, [r7, #24]
 800d3a6:	f005 fddd 	bl	8012f64 <tcp_sent>
    }
    if (shut_close) {
 800d3aa:	7fbb      	ldrb	r3, [r7, #30]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d008      	beq.n	800d3c2 <lwip_netconn_do_close_internal+0x14a>
      tcp_poll(tpcb, NULL, 0);
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	69b8      	ldr	r0, [r7, #24]
 800d3b6:	f005 fe31 	bl	801301c <tcp_poll>
      tcp_err(tpcb, NULL);
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	69b8      	ldr	r0, [r7, #24]
 800d3be:	f005 fdf3 	bl	8012fa8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d3c2:	7fbb      	ldrb	r3, [r7, #30]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d050      	beq.n	800d46a <lwip_netconn_do_close_internal+0x1f2>
#if LWIP_SO_LINGER
    /* check linger possibilites before calling tcp_close */
    err = ERR_OK;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	77fb      	strb	r3, [r7, #31]
    /* linger enabled/required at all? (i.e. is there untransmitted data left?) */
    if ((conn->linger >= 0) && (conn->pcb.tcp->unsent || conn->pcb.tcp->unacked)) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	db3c      	blt.n	800d450 <lwip_netconn_do_close_internal+0x1d8>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d104      	bne.n	800d3ea <lwip_netconn_do_close_internal+0x172>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d032      	beq.n	800d450 <lwip_netconn_do_close_internal+0x1d8>
      if ((conn->linger == 0)) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d105      	bne.n	800d400 <lwip_netconn_do_close_internal+0x188>
        /* data left but linger prevents waiting */
        tcp_abort(tpcb);
 800d3f4:	69b8      	ldr	r0, [r7, #24]
 800d3f6:	f004 fcf3 	bl	8011de0 <tcp_abort>
        tpcb = NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61bb      	str	r3, [r7, #24]
 800d3fe:	e027      	b.n	800d450 <lwip_netconn_do_close_internal+0x1d8>
      } else if (conn->linger > 0) {
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d406:	2b00      	cmp	r3, #0
 800d408:	dd22      	ble.n	800d450 <lwip_netconn_do_close_internal+0x1d8>
        /* data left and linger says we should wait */
        if (netconn_is_nonblocking(conn)) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	7f9b      	ldrb	r3, [r3, #30]
 800d40e:	f003 0302 	and.w	r3, r3, #2
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <lwip_netconn_do_close_internal+0x1a4>
          /* data left on a nonblocking netconn -> cannot linger */
          err = ERR_WOULDBLOCK;
 800d416:	23f9      	movs	r3, #249	; 0xf9
 800d418:	77fb      	strb	r3, [r7, #31]
 800d41a:	e019      	b.n	800d450 <lwip_netconn_do_close_internal+0x1d8>
        } else if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >=
 800d41c:	f7fa ffcc 	bl	80083b8 <sys_now>
 800d420:	4602      	mov	r2, r0
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	461a      	mov	r2, r3
                   (conn->linger * 1000)) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d432:	4619      	mov	r1, r3
 800d434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d438:	fb01 f303 	mul.w	r3, r1, r3
        } else if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >=
 800d43c:	429a      	cmp	r2, r3
 800d43e:	db05      	blt.n	800d44c <lwip_netconn_do_close_internal+0x1d4>
          /* data left but linger timeout has expired (this happens on further
             calls to this function through poll_tcp */
          tcp_abort(tpcb);
 800d440:	69b8      	ldr	r0, [r7, #24]
 800d442:	f004 fccd 	bl	8011de0 <tcp_abort>
          tpcb = NULL;
 800d446:	2300      	movs	r3, #0
 800d448:	61bb      	str	r3, [r7, #24]
 800d44a:	e001      	b.n	800d450 <lwip_netconn_do_close_internal+0x1d8>
        } else {
          /* data left -> need to wait for ACK after successful close */
          linger_wait_required = 1;
 800d44c:	2301      	movs	r3, #1
 800d44e:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
 800d450:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d110      	bne.n	800d47a <lwip_netconn_do_close_internal+0x202>
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00d      	beq.n	800d47a <lwip_netconn_do_close_internal+0x202>
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d45e:	69b8      	ldr	r0, [r7, #24]
 800d460:	f004 fb78 	bl	8011b54 <tcp_close>
 800d464:	4603      	mov	r3, r0
 800d466:	77fb      	strb	r3, [r7, #31]
 800d468:	e007      	b.n	800d47a <lwip_netconn_do_close_internal+0x202>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d46a:	7bbb      	ldrb	r3, [r7, #14]
 800d46c:	7b7a      	ldrb	r2, [r7, #13]
 800d46e:	4619      	mov	r1, r3
 800d470:	69b8      	ldr	r0, [r7, #24]
 800d472:	f004 fb9b 	bl	8011bac <tcp_shutdown>
 800d476:	4603      	mov	r3, r0
 800d478:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800d47a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d109      	bne.n	800d496 <lwip_netconn_do_close_internal+0x21e>
    close_finished = 1;
 800d482:	2301      	movs	r3, #1
 800d484:	777b      	strb	r3, [r7, #29]
#if LWIP_SO_LINGER
    if (linger_wait_required) {
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d041      	beq.n	800d510 <lwip_netconn_do_close_internal+0x298>
      /* wait for ACK of all unsent/unacked data by just getting called again */
      close_finished = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	777b      	strb	r3, [r7, #29]
      err = ERR_INPROGRESS;
 800d490:	23fb      	movs	r3, #251	; 0xfb
 800d492:	77fb      	strb	r3, [r7, #31]
 800d494:	e03c      	b.n	800d510 <lwip_netconn_do_close_internal+0x298>
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d496:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49e:	d135      	bne.n	800d50c <lwip_netconn_do_close_internal+0x294>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
 800d4a0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d4a4:	613b      	str	r3, [r7, #16]
      if (conn->send_timeout > 0) {
        close_timeout = conn->send_timeout;
      }
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_LINGER
      if (conn->linger >= 0) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	db08      	blt.n	800d4c2 <lwip_netconn_do_close_internal+0x24a>
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4bc:	fb02 f303 	mul.w	r3, r2, r3
 800d4c0:	613b      	str	r3, [r7, #16]
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
 800d4c2:	f7fa ff79 	bl	80083b8 <sys_now>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a1b      	ldr	r3, [r3, #32]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	1ad3      	subs	r3, r2, r3
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	dc1b      	bgt.n	800d510 <lwip_netconn_do_close_internal+0x298>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	777b      	strb	r3, [r7, #29]
        if (shut_close) {
 800d4dc:	7fbb      	ldrb	r3, [r7, #30]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d016      	beq.n	800d510 <lwip_netconn_do_close_internal+0x298>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d4e2:	69b8      	ldr	r0, [r7, #24]
 800d4e4:	f004 fc7c 	bl	8011de0 <tcp_abort>
          err = ERR_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	77fb      	strb	r3, [r7, #31]
 800d4ec:	e010      	b.n	800d510 <lwip_netconn_do_close_internal+0x298>
 800d4ee:	bf00      	nop
 800d4f0:	0801c7f8 	.word	0x0801c7f8
 800d4f4:	0801cacc 	.word	0x0801cacc
 800d4f8:	0801c83c 	.word	0x0801c83c
 800d4fc:	0801cadc 	.word	0x0801cadc
 800d500:	0801cafc 	.word	0x0801cafc
 800d504:	0801cb20 	.word	0x0801cb20
 800d508:	0801c960 	.word	0x0801c960
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d50c:	2301      	movs	r3, #1
 800d50e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800d510:	7f7b      	ldrb	r3, [r7, #29]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d044      	beq.n	800d5a0 <lwip_netconn_do_close_internal+0x328>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	330c      	adds	r3, #12
 800d51e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	7ffa      	ldrb	r2, [r7, #31]
 800d526:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d534:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d129      	bne.n	800d590 <lwip_netconn_do_close_internal+0x318>
      if (shut_close) {
 800d53c:	7fbb      	ldrb	r3, [r7, #30]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00c      	beq.n	800d55c <lwip_netconn_do_close_internal+0x2e4>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d005      	beq.n	800d55c <lwip_netconn_do_close_internal+0x2e4>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d554:	2200      	movs	r2, #0
 800d556:	2104      	movs	r1, #4
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	4798      	blx	r3
      }
      if (shut_rx) {
 800d55c:	7bbb      	ldrb	r3, [r7, #14]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d009      	beq.n	800d576 <lwip_netconn_do_close_internal+0x2fe>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d566:	2b00      	cmp	r3, #0
 800d568:	d005      	beq.n	800d576 <lwip_netconn_do_close_internal+0x2fe>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56e:	2200      	movs	r2, #0
 800d570:	2100      	movs	r1, #0
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	4798      	blx	r3
      }
      if (shut_tx) {
 800d576:	7b7b      	ldrb	r3, [r7, #13]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <lwip_netconn_do_close_internal+0x318>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d580:	2b00      	cmp	r3, #0
 800d582:	d005      	beq.n	800d590 <lwip_netconn_do_close_internal+0x318>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	2200      	movs	r2, #0
 800d58a:	2102      	movs	r1, #2
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <lwip_netconn_do_close_internal+0x324>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d596:	68b8      	ldr	r0, [r7, #8]
 800d598:	f00d fc1c 	bl	801add4 <sys_sem_signal>
    }
    return ERR_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e02e      	b.n	800d5fe <lwip_netconn_do_close_internal+0x386>
  }
  if (!close_finished) {
 800d5a0:	7f7b      	ldrb	r3, [r7, #29]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d11e      	bne.n	800d5e4 <lwip_netconn_do_close_internal+0x36c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	7d1b      	ldrb	r3, [r3, #20]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d106      	bne.n	800d5bc <lwip_netconn_do_close_internal+0x344>
 800d5ae:	4b16      	ldr	r3, [pc, #88]	; (800d608 <lwip_netconn_do_close_internal+0x390>)
 800d5b0:	f240 4241 	movw	r2, #1089	; 0x441
 800d5b4:	4915      	ldr	r1, [pc, #84]	; (800d60c <lwip_netconn_do_close_internal+0x394>)
 800d5b6:	4816      	ldr	r0, [pc, #88]	; (800d610 <lwip_netconn_do_close_internal+0x398>)
 800d5b8:	f00d fdce 	bl	801b158 <iprintf>
    if (shut_tx) {
 800d5bc:	7b7b      	ldrb	r3, [r7, #13]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <lwip_netconn_do_close_internal+0x352>
      tcp_sent(tpcb, sent_tcp);
 800d5c2:	4914      	ldr	r1, [pc, #80]	; (800d614 <lwip_netconn_do_close_internal+0x39c>)
 800d5c4:	69b8      	ldr	r0, [r7, #24]
 800d5c6:	f005 fccd 	bl	8012f64 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4912      	ldr	r1, [pc, #72]	; (800d618 <lwip_netconn_do_close_internal+0x3a0>)
 800d5ce:	69b8      	ldr	r0, [r7, #24]
 800d5d0:	f005 fd24 	bl	801301c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d5d4:	4911      	ldr	r1, [pc, #68]	; (800d61c <lwip_netconn_do_close_internal+0x3a4>)
 800d5d6:	69b8      	ldr	r0, [r7, #24]
 800d5d8:	f005 fce6 	bl	8012fa8 <tcp_err>
    tcp_arg(tpcb, conn);
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	69b8      	ldr	r0, [r7, #24]
 800d5e0:	f005 fc8c 	bl	8012efc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d5e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d106      	bne.n	800d5fa <lwip_netconn_do_close_internal+0x382>
 800d5ec:	4b06      	ldr	r3, [pc, #24]	; (800d608 <lwip_netconn_do_close_internal+0x390>)
 800d5ee:	f240 424d 	movw	r2, #1101	; 0x44d
 800d5f2:	490b      	ldr	r1, [pc, #44]	; (800d620 <lwip_netconn_do_close_internal+0x3a8>)
 800d5f4:	4806      	ldr	r0, [pc, #24]	; (800d610 <lwip_netconn_do_close_internal+0x398>)
 800d5f6:	f00d fdaf 	bl	801b158 <iprintf>
  return err;
 800d5fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3720      	adds	r7, #32
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	0801c7f8 	.word	0x0801c7f8
 800d60c:	0801cb34 	.word	0x0801cb34
 800d610:	0801c83c 	.word	0x0801c83c
 800d614:	0800cae9 	.word	0x0800cae9
 800d618:	0800ca3d 	.word	0x0800ca3d
 800d61c:	0800cb91 	.word	0x0800cb91
 800d620:	0801cb58 	.word	0x0801cb58

0800d624 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	785b      	ldrb	r3, [r3, #1]
 800d636:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d638:	7afb      	ldrb	r3, [r7, #11]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00d      	beq.n	800d65a <lwip_netconn_do_delconn+0x36>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d648:	2b10      	cmp	r3, #16
 800d64a:	d006      	beq.n	800d65a <lwip_netconn_do_delconn+0x36>
 800d64c:	4b60      	ldr	r3, [pc, #384]	; (800d7d0 <lwip_netconn_do_delconn+0x1ac>)
 800d64e:	f240 425e 	movw	r2, #1118	; 0x45e
 800d652:	4960      	ldr	r1, [pc, #384]	; (800d7d4 <lwip_netconn_do_delconn+0x1b0>)
 800d654:	4860      	ldr	r0, [pc, #384]	; (800d7d8 <lwip_netconn_do_delconn+0x1b4>)
 800d656:	f00d fd7f 	bl	801b158 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d65a:	7afb      	ldrb	r3, [r7, #11]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d005      	beq.n	800d66c <lwip_netconn_do_delconn+0x48>
 800d660:	7afb      	ldrb	r3, [r7, #11]
 800d662:	2b02      	cmp	r3, #2
 800d664:	d002      	beq.n	800d66c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d666:	7afb      	ldrb	r3, [r7, #11]
 800d668:	2b03      	cmp	r3, #3
 800d66a:	d109      	bne.n	800d680 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d10a      	bne.n	800d688 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	7f9b      	ldrb	r3, [r3, #30]
 800d678:	f003 0304 	and.w	r3, r3, #4
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d103      	bne.n	800d688 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	22fb      	movs	r2, #251	; 0xfb
 800d684:	711a      	strb	r2, [r3, #4]
 800d686:	e097      	b.n	800d7b8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d10d      	bne.n	800d6aa <lwip_netconn_do_delconn+0x86>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	7f9b      	ldrb	r3, [r3, #30]
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d106      	bne.n	800d6aa <lwip_netconn_do_delconn+0x86>
 800d69c:	4b4c      	ldr	r3, [pc, #304]	; (800d7d0 <lwip_netconn_do_delconn+0x1ac>)
 800d69e:	f240 427a 	movw	r2, #1146	; 0x47a
 800d6a2:	494e      	ldr	r1, [pc, #312]	; (800d7dc <lwip_netconn_do_delconn+0x1b8>)
 800d6a4:	484c      	ldr	r0, [pc, #304]	; (800d7d8 <lwip_netconn_do_delconn+0x1b4>)
 800d6a6:	f00d fd57 	bl	801b158 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff fd61 	bl	800d17c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d05f      	beq.n	800d784 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6ce:	2b10      	cmp	r3, #16
 800d6d0:	d00d      	beq.n	800d6ee <lwip_netconn_do_delconn+0xca>
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	d151      	bne.n	800d77a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f00a fe78 	bl	80183dc <udp_remove>
          break;
 800d6ec:	e046      	b.n	800d77c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	6a1b      	ldr	r3, [r3, #32]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d006      	beq.n	800d706 <lwip_netconn_do_delconn+0xe2>
 800d6f8:	4b35      	ldr	r3, [pc, #212]	; (800d7d0 <lwip_netconn_do_delconn+0x1ac>)
 800d6fa:	f240 4294 	movw	r2, #1172	; 0x494
 800d6fe:	4938      	ldr	r1, [pc, #224]	; (800d7e0 <lwip_netconn_do_delconn+0x1bc>)
 800d700:	4835      	ldr	r0, [pc, #212]	; (800d7d8 <lwip_netconn_do_delconn+0x1b4>)
 800d702:	f00d fd29 	bl	801b158 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2204      	movs	r2, #4
 800d70c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2203      	movs	r2, #3
 800d712:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68fa      	ldr	r2, [r7, #12]
 800d71a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2100      	movs	r1, #0
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff fda8 	bl	800d278 <lwip_netconn_do_close_internal>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d04b      	beq.n	800d7c6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	785b      	ldrb	r3, [r3, #1]
 800d734:	2b04      	cmp	r3, #4
 800d736:	d006      	beq.n	800d746 <lwip_netconn_do_delconn+0x122>
 800d738:	4b25      	ldr	r3, [pc, #148]	; (800d7d0 <lwip_netconn_do_delconn+0x1ac>)
 800d73a:	f240 429a 	movw	r2, #1178	; 0x49a
 800d73e:	4929      	ldr	r1, [pc, #164]	; (800d7e4 <lwip_netconn_do_delconn+0x1c0>)
 800d740:	4825      	ldr	r0, [pc, #148]	; (800d7d8 <lwip_netconn_do_delconn+0x1b4>)
 800d742:	f00d fd09 	bl	801b158 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d746:	4828      	ldr	r0, [pc, #160]	; (800d7e8 <lwip_netconn_do_delconn+0x1c4>)
 800d748:	f00d fbb5 	bl	801aeb6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	330c      	adds	r3, #12
 800d752:	2100      	movs	r1, #0
 800d754:	4618      	mov	r0, r3
 800d756:	f00d fb0c 	bl	801ad72 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d75a:	4823      	ldr	r0, [pc, #140]	; (800d7e8 <lwip_netconn_do_delconn+0x1c4>)
 800d75c:	f00d fb9c 	bl	801ae98 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	785b      	ldrb	r3, [r3, #1]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d02d      	beq.n	800d7c6 <lwip_netconn_do_delconn+0x1a2>
 800d76a:	4b19      	ldr	r3, [pc, #100]	; (800d7d0 <lwip_netconn_do_delconn+0x1ac>)
 800d76c:	f240 429e 	movw	r2, #1182	; 0x49e
 800d770:	491c      	ldr	r1, [pc, #112]	; (800d7e4 <lwip_netconn_do_delconn+0x1c0>)
 800d772:	4819      	ldr	r0, [pc, #100]	; (800d7d8 <lwip_netconn_do_delconn+0x1b4>)
 800d774:	f00d fcf0 	bl	801b158 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d778:	e025      	b.n	800d7c6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d77a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2200      	movs	r2, #0
 800d782:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d007      	beq.n	800d79e <lwip_netconn_do_delconn+0x17a>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	6810      	ldr	r0, [r2, #0]
 800d798:	2200      	movs	r2, #0
 800d79a:	2100      	movs	r1, #0
 800d79c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d007      	beq.n	800d7b8 <lwip_netconn_do_delconn+0x194>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	6810      	ldr	r0, [r2, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2102      	movs	r1, #2
 800d7b6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	330c      	adds	r3, #12
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f00d fb22 	bl	801ae08 <sys_sem_valid>
 800d7c4:	e000      	b.n	800d7c8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800d7c6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	0801c7f8 	.word	0x0801c7f8
 800d7d4:	0801cb68 	.word	0x0801cb68
 800d7d8:	0801c83c 	.word	0x0801c83c
 800d7dc:	0801cb7c 	.word	0x0801cb7c
 800d7e0:	0801cb9c 	.word	0x0801cb9c
 800d7e4:	0801cbb8 	.word	0x0801cbb8
 800d7e8:	20039984 	.word	0x20039984

0800d7ec <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d025      	beq.n	800d84e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d80c:	2b10      	cmp	r3, #16
 800d80e:	d00e      	beq.n	800d82e <lwip_netconn_do_bind+0x42>
 800d810:	2b20      	cmp	r3, #32
 800d812:	d119      	bne.n	800d848 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6858      	ldr	r0, [r3, #4]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	6899      	ldr	r1, [r3, #8]
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	899b      	ldrh	r3, [r3, #12]
 800d822:	461a      	mov	r2, r3
 800d824:	f00a fd32 	bl	801828c <udp_bind>
 800d828:	4603      	mov	r3, r0
 800d82a:	73fb      	strb	r3, [r7, #15]
        break;
 800d82c:	e011      	b.n	800d852 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6858      	ldr	r0, [r3, #4]
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	6899      	ldr	r1, [r3, #8]
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	899b      	ldrh	r3, [r3, #12]
 800d83c:	461a      	mov	r2, r3
 800d83e:	f004 fadb 	bl	8011df8 <tcp_bind>
 800d842:	4603      	mov	r3, r0
 800d844:	73fb      	strb	r3, [r7, #15]
        break;
 800d846:	e004      	b.n	800d852 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d848:	23fa      	movs	r3, #250	; 0xfa
 800d84a:	73fb      	strb	r3, [r7, #15]
        break;
 800d84c:	e001      	b.n	800d852 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d84e:	23fa      	movs	r3, #250	; 0xfa
 800d850:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	7bfa      	ldrb	r2, [r7, #15]
 800d856:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d858:	bf00      	nop
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d07f      	beq.n	800d976 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d880:	2b10      	cmp	r3, #16
 800d882:	d175      	bne.n	800d970 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	785b      	ldrb	r3, [r3, #1]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d165      	bne.n	800d95a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	7d1b      	ldrb	r3, [r3, #20]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800d89a:	23fa      	movs	r3, #250	; 0xfa
 800d89c:	72fb      	strb	r3, [r7, #11]
 800d89e:	e06c      	b.n	800d97a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d8a0:	23ff      	movs	r3, #255	; 0xff
 800d8a2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	f107 020b 	add.w	r2, r7, #11
 800d8ae:	7cf9      	ldrb	r1, [r7, #19]
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f004 fb59 	bl	8011f68 <tcp_listen_with_backlog_and_err>
 800d8b6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d05d      	beq.n	800d97a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3310      	adds	r3, #16
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f00d fa0e 	bl	801ace6 <sys_mbox_valid>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3310      	adds	r3, #16
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f00d f97e 	bl	801abd8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3310      	adds	r3, #16
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f00d fa10 	bl	801ad08 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3314      	adds	r3, #20
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f00d f9f7 	bl	801ace6 <sys_mbox_valid>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d108      	bne.n	800d910 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3314      	adds	r3, #20
 800d904:	2106      	movs	r1, #6
 800d906:	4618      	mov	r0, r3
 800d908:	f00d f944 	bl	801ab94 <sys_mbox_new>
 800d90c:	4603      	mov	r3, r0
 800d90e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800d910:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d118      	bne.n	800d94a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2202      	movs	r2, #2
 800d91e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4619      	mov	r1, r3
 800d934:	4610      	mov	r0, r2
 800d936:	f005 fae1 	bl	8012efc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	4912      	ldr	r1, [pc, #72]	; (800d98c <lwip_netconn_do_listen+0x12c>)
 800d942:	4618      	mov	r0, r3
 800d944:	f005 fb52 	bl	8012fec <tcp_accept>
 800d948:	e017      	b.n	800d97a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f004 f902 	bl	8011b54 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2200      	movs	r2, #0
 800d956:	605a      	str	r2, [r3, #4]
 800d958:	e00f      	b.n	800d97a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	785b      	ldrb	r3, [r3, #1]
 800d960:	2b02      	cmp	r3, #2
 800d962:	d102      	bne.n	800d96a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	72fb      	strb	r3, [r7, #11]
 800d968:	e007      	b.n	800d97a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800d96a:	23f5      	movs	r3, #245	; 0xf5
 800d96c:	72fb      	strb	r3, [r7, #11]
 800d96e:	e004      	b.n	800d97a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800d970:	23f0      	movs	r3, #240	; 0xf0
 800d972:	72fb      	strb	r3, [r7, #11]
 800d974:	e001      	b.n	800d97a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800d976:	23f5      	movs	r3, #245	; 0xf5
 800d978:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800d97a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d982:	bf00      	nop
 800d984:	3718      	adds	r7, #24
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	0800cd8d 	.word	0x0800cd8d

0800d990 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe febb 	bl	800c71c <netconn_err>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d9aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d134      	bne.n	800da1c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d02d      	beq.n	800da18 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	d123      	bne.n	800da12 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	689b      	ldr	r3, [r3, #8]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10c      	bne.n	800d9ee <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4610      	mov	r0, r2
 800d9e4:	f00a fa68 	bl	8017eb8 <udp_send>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800d9ec:	e016      	b.n	800da1c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6858      	ldr	r0, [r3, #4]
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	689b      	ldr	r3, [r3, #8]
 800d9f8:	6819      	ldr	r1, [r3, #0]
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	f103 0208 	add.w	r2, r3, #8
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	899b      	ldrh	r3, [r3, #12]
 800da08:	f00a fa8a 	bl	8017f20 <udp_sendto>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]
          break;
 800da10:	e004      	b.n	800da1c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800da12:	23f5      	movs	r3, #245	; 0xf5
 800da14:	73fb      	strb	r3, [r7, #15]
          break;
 800da16:	e001      	b.n	800da1c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800da18:	23f5      	movs	r3, #245	; 0xf5
 800da1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	7bfa      	ldrb	r2, [r7, #15]
 800da20:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800da22:	bf00      	nop
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b086      	sub	sp, #24
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	2200      	movs	r2, #0
 800da3a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d022      	beq.n	800da8c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da50:	2b10      	cmp	r3, #16
 800da52:	d11b      	bne.n	800da8c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da60:	d202      	bcs.n	800da68 <lwip_netconn_do_recv+0x3e>
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	b29b      	uxth	r3, r3
 800da66:	e001      	b.n	800da6c <lwip_netconn_do_recv+0x42>
 800da68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da6c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	89fa      	ldrh	r2, [r7, #14]
 800da76:	4611      	mov	r1, r2
 800da78:	4618      	mov	r0, r3
 800da7a:	f004 fb79 	bl	8012170 <tcp_recved>
        remaining -= recved;
 800da7e:	89fb      	ldrh	r3, [r7, #14]
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e6      	bne.n	800da5a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800da8c:	bf00      	nop
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b088      	sub	sp, #32
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <lwip_netconn_do_writemore+0x24>
 800daaa:	4b96      	ldr	r3, [pc, #600]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800daac:	f240 6273 	movw	r2, #1651	; 0x673
 800dab0:	4995      	ldr	r1, [pc, #596]	; (800dd08 <lwip_netconn_do_writemore+0x274>)
 800dab2:	4896      	ldr	r0, [pc, #600]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800dab4:	f00d fb50 	bl	801b158 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	785b      	ldrb	r3, [r3, #1]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d006      	beq.n	800dace <lwip_netconn_do_writemore+0x3a>
 800dac0:	4b90      	ldr	r3, [pc, #576]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800dac2:	f240 6274 	movw	r2, #1652	; 0x674
 800dac6:	4992      	ldr	r1, [pc, #584]	; (800dd10 <lwip_netconn_do_writemore+0x27c>)
 800dac8:	4890      	ldr	r0, [pc, #576]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800daca:	f00d fb45 	bl	801b158 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d106      	bne.n	800dae4 <lwip_netconn_do_writemore+0x50>
 800dad6:	4b8b      	ldr	r3, [pc, #556]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800dad8:	f240 6275 	movw	r2, #1653	; 0x675
 800dadc:	498d      	ldr	r1, [pc, #564]	; (800dd14 <lwip_netconn_do_writemore+0x280>)
 800dade:	488b      	ldr	r0, [pc, #556]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800dae0:	f00d fb3a 	bl	801b158 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d106      	bne.n	800dafa <lwip_netconn_do_writemore+0x66>
 800daec:	4b85      	ldr	r3, [pc, #532]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800daee:	f240 6276 	movw	r2, #1654	; 0x676
 800daf2:	4989      	ldr	r1, [pc, #548]	; (800dd18 <lwip_netconn_do_writemore+0x284>)
 800daf4:	4885      	ldr	r0, [pc, #532]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800daf6:	f00d fb2f 	bl	801b158 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a1b      	ldr	r3, [r3, #32]
 800dafe:	699a      	ldr	r2, [r3, #24]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a1b      	ldr	r3, [r3, #32]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	429a      	cmp	r2, r3
 800db08:	d306      	bcc.n	800db18 <lwip_netconn_do_writemore+0x84>
 800db0a:	4b7e      	ldr	r3, [pc, #504]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800db0c:	f240 6277 	movw	r2, #1655	; 0x677
 800db10:	4982      	ldr	r1, [pc, #520]	; (800dd1c <lwip_netconn_do_writemore+0x288>)
 800db12:	487e      	ldr	r0, [pc, #504]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800db14:	f00d fb20 	bl	801b158 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	899b      	ldrh	r3, [r3, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d106      	bne.n	800db30 <lwip_netconn_do_writemore+0x9c>
 800db22:	4b78      	ldr	r3, [pc, #480]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800db24:	f240 6279 	movw	r2, #1657	; 0x679
 800db28:	497d      	ldr	r1, [pc, #500]	; (800dd20 <lwip_netconn_do_writemore+0x28c>)
 800db2a:	4878      	ldr	r0, [pc, #480]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800db2c:	f00d fb14 	bl	801b158 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a1b      	ldr	r3, [r3, #32]
 800db34:	7f1b      	ldrb	r3, [r3, #28]
 800db36:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	7f9b      	ldrb	r3, [r3, #30]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d104      	bne.n	800db4e <lwip_netconn_do_writemore+0xba>
 800db44:	7ebb      	ldrb	r3, [r7, #26]
 800db46:	f003 0304 	and.w	r3, r3, #4
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <lwip_netconn_do_writemore+0xbe>
 800db4e:	2301      	movs	r3, #1
 800db50:	e000      	b.n	800db54 <lwip_netconn_do_writemore+0xc0>
 800db52:	2300      	movs	r3, #0
 800db54:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a1b      	ldr	r3, [r3, #32]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	4413      	add	r3, r2
 800db66:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a1b      	ldr	r3, [r3, #32]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db80:	d307      	bcc.n	800db92 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800db82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db86:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800db88:	7ebb      	ldrb	r3, [r7, #26]
 800db8a:	f043 0302 	orr.w	r3, r3, #2
 800db8e:	76bb      	strb	r3, [r7, #26]
 800db90:	e001      	b.n	800db96 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800db9e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800dba0:	89fa      	ldrh	r2, [r7, #14]
 800dba2:	8bbb      	ldrh	r3, [r7, #28]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d216      	bcs.n	800dbd6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800dba8:	89fb      	ldrh	r3, [r7, #14]
 800dbaa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800dbac:	7e3b      	ldrb	r3, [r7, #24]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00d      	beq.n	800dbce <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800dbb2:	8bbb      	ldrh	r3, [r7, #28]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10e      	bne.n	800dbd6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a1b      	ldr	r3, [r3, #32]
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <lwip_netconn_do_writemore+0x134>
 800dbc2:	f06f 0306 	mvn.w	r3, #6
 800dbc6:	e000      	b.n	800dbca <lwip_netconn_do_writemore+0x136>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800dbcc:	e07d      	b.n	800dcca <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800dbce:	7ebb      	ldrb	r3, [r7, #26]
 800dbd0:	f043 0302 	orr.w	r3, r3, #2
 800dbd4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	691a      	ldr	r2, [r3, #16]
 800dbdc:	8bbb      	ldrh	r3, [r7, #28]
 800dbde:	441a      	add	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d906      	bls.n	800dbfa <lwip_netconn_do_writemore+0x166>
 800dbec:	4b45      	ldr	r3, [pc, #276]	; (800dd04 <lwip_netconn_do_writemore+0x270>)
 800dbee:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800dbf2:	494c      	ldr	r1, [pc, #304]	; (800dd24 <lwip_netconn_do_writemore+0x290>)
 800dbf4:	4845      	ldr	r0, [pc, #276]	; (800dd0c <lwip_netconn_do_writemore+0x278>)
 800dbf6:	f00d faaf 	bl	801b158 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800dbfa:	8bbb      	ldrh	r3, [r7, #28]
 800dbfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d103      	bne.n	800dc0c <lwip_netconn_do_writemore+0x178>
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc0a:	d209      	bcs.n	800dc20 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800dc10:	8bba      	ldrh	r2, [r7, #28]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d10b      	bne.n	800dc2e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	899b      	ldrh	r3, [r3, #12]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d906      	bls.n	800dc2e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800dc20:	2301      	movs	r3, #1
 800dc22:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dc24:	7ebb      	ldrb	r3, [r7, #26]
 800dc26:	f043 0302 	orr.w	r3, r3, #2
 800dc2a:	76bb      	strb	r3, [r7, #26]
 800dc2c:	e001      	b.n	800dc32 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6858      	ldr	r0, [r3, #4]
 800dc36:	7ebb      	ldrb	r3, [r7, #26]
 800dc38:	8bba      	ldrh	r2, [r7, #28]
 800dc3a:	6979      	ldr	r1, [r7, #20]
 800dc3c:	f008 f8a0 	bl	8015d80 <tcp_write>
 800dc40:	4603      	mov	r3, r0
 800dc42:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800dc44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d12c      	bne.n	800dca6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a1b      	ldr	r3, [r3, #32]
 800dc50:	6999      	ldr	r1, [r3, #24]
 800dc52:	8bba      	ldrh	r2, [r7, #28]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a1b      	ldr	r3, [r3, #32]
 800dc58:	440a      	add	r2, r1
 800dc5a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	6919      	ldr	r1, [r3, #16]
 800dc62:	8bba      	ldrh	r2, [r7, #28]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a1b      	ldr	r3, [r3, #32]
 800dc68:	440a      	add	r2, r1
 800dc6a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6a1b      	ldr	r3, [r3, #32]
 800dc70:	691a      	ldr	r2, [r3, #16]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6a1b      	ldr	r3, [r3, #32]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d113      	bne.n	800dca6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a1b      	ldr	r3, [r3, #32]
 800dc82:	899a      	ldrh	r2, [r3, #12]
 800dc84:	3a01      	subs	r2, #1
 800dc86:	b292      	uxth	r2, r2
 800dc88:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	899b      	ldrh	r3, [r3, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d008      	beq.n	800dca6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	689a      	ldr	r2, [r3, #8]
 800dc9a:	3208      	adds	r2, #8
 800dc9c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	2200      	movs	r2, #0
 800dca4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800dca6:	7e7b      	ldrb	r3, [r7, #25]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <lwip_netconn_do_writemore+0x222>
 800dcac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f43f af50 	beq.w	800db56 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800dcb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d004      	beq.n	800dcc8 <lwip_netconn_do_writemore+0x234>
 800dcbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc6:	d146      	bne.n	800dd56 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dcc8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dcca:	7e3b      	ldrb	r3, [r7, #24]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d02b      	beq.n	800dd28 <lwip_netconn_do_writemore+0x294>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	699a      	ldr	r2, [r3, #24]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a1b      	ldr	r3, [r3, #32]
 800dcda:	695b      	ldr	r3, [r3, #20]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d223      	bcs.n	800dd28 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d005      	beq.n	800dcf4 <lwip_netconn_do_writemore+0x260>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcec:	2200      	movs	r2, #0
 800dcee:	2103      	movs	r1, #3
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	7f9b      	ldrb	r3, [r3, #30]
 800dcf8:	f043 0310 	orr.w	r3, r3, #16
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	779a      	strb	r2, [r3, #30]
 800dd02:	e028      	b.n	800dd56 <lwip_netconn_do_writemore+0x2c2>
 800dd04:	0801c7f8 	.word	0x0801c7f8
 800dd08:	0801c950 	.word	0x0801c950
 800dd0c:	0801c83c 	.word	0x0801c83c
 800dd10:	0801cc58 	.word	0x0801cc58
 800dd14:	0801c960 	.word	0x0801c960
 800dd18:	0801cc78 	.word	0x0801cc78
 800dd1c:	0801cc90 	.word	0x0801cc90
 800dd20:	0801ccd0 	.word	0x0801ccd0
 800dd24:	0801ccf8 	.word	0x0801ccf8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd30:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dd34:	d305      	bcc.n	800dd42 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d909      	bls.n	800dd56 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d005      	beq.n	800dd56 <lwip_netconn_do_writemore+0x2c2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2103      	movs	r1, #3
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800dd56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d11d      	bne.n	800dd9a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	699a      	ldr	r2, [r3, #24]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a1b      	ldr	r3, [r3, #32]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d002      	beq.n	800dd74 <lwip_netconn_do_writemore+0x2e0>
 800dd6e:	7e3b      	ldrb	r3, [r7, #24]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800dd74:	2301      	movs	r3, #1
 800dd76:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f008 fde9 	bl	8016954 <tcp_output>
 800dd82:	4603      	mov	r3, r0
 800dd84:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800dd86:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800dd8a:	f113 0f04 	cmn.w	r3, #4
 800dd8e:	d12c      	bne.n	800ddea <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dd90:	7b3b      	ldrb	r3, [r7, #12]
 800dd92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dd94:	2301      	movs	r3, #1
 800dd96:	76fb      	strb	r3, [r7, #27]
 800dd98:	e027      	b.n	800ddea <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800dd9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda2:	d120      	bne.n	800dde6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f008 fdd3 	bl	8016954 <tcp_output>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ddb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ddb6:	f113 0f04 	cmn.w	r3, #4
 800ddba:	d104      	bne.n	800ddc6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ddbc:	7b7b      	ldrb	r3, [r7, #13]
 800ddbe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	76fb      	strb	r3, [r7, #27]
 800ddc4:	e011      	b.n	800ddea <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ddc6:	7e3b      	ldrb	r3, [r7, #24]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00e      	beq.n	800ddea <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d102      	bne.n	800dddc <lwip_netconn_do_writemore+0x348>
 800ddd6:	f06f 0306 	mvn.w	r3, #6
 800ddda:	e000      	b.n	800ddde <lwip_netconn_do_writemore+0x34a>
 800dddc:	2300      	movs	r3, #0
 800ddde:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800dde0:	2301      	movs	r3, #1
 800dde2:	76fb      	strb	r3, [r7, #27]
 800dde4:	e001      	b.n	800ddea <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800dde6:	2301      	movs	r3, #1
 800dde8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ddea:	7efb      	ldrb	r3, [r7, #27]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d015      	beq.n	800de1c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a1b      	ldr	r3, [r3, #32]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	330c      	adds	r3, #12
 800ddf8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	7ffa      	ldrb	r2, [r7, #31]
 800de00:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800de0e:	78fb      	ldrb	r3, [r7, #3]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d006      	beq.n	800de22 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800de14:	68b8      	ldr	r0, [r7, #8]
 800de16:	f00c ffdd 	bl	801add4 <sys_sem_signal>
 800de1a:	e002      	b.n	800de22 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800de1c:	f04f 33ff 	mov.w	r3, #4294967295
 800de20:	e000      	b.n	800de24 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3720      	adds	r7, #32
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fe fc6d 	bl	800c71c <netconn_err>
 800de42:	4603      	mov	r3, r0
 800de44:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800de46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d166      	bne.n	800df1c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de58:	2b10      	cmp	r3, #16
 800de5a:	d15d      	bne.n	800df18 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800de66:	23fb      	movs	r3, #251	; 0xfb
 800de68:	73fb      	strb	r3, [r7, #15]
 800de6a:	e057      	b.n	800df1c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d04d      	beq.n	800df12 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2201      	movs	r2, #1
 800de7c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d006      	beq.n	800de96 <lwip_netconn_do_write+0x6a>
 800de88:	4b28      	ldr	r3, [pc, #160]	; (800df2c <lwip_netconn_do_write+0x100>)
 800de8a:	f240 7223 	movw	r2, #1827	; 0x723
 800de8e:	4928      	ldr	r1, [pc, #160]	; (800df30 <lwip_netconn_do_write+0x104>)
 800de90:	4828      	ldr	r0, [pc, #160]	; (800df34 <lwip_netconn_do_write+0x108>)
 800de92:	f00d f961 	bl	801b158 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d106      	bne.n	800deac <lwip_netconn_do_write+0x80>
 800de9e:	4b23      	ldr	r3, [pc, #140]	; (800df2c <lwip_netconn_do_write+0x100>)
 800dea0:	f240 7224 	movw	r2, #1828	; 0x724
 800dea4:	4924      	ldr	r1, [pc, #144]	; (800df38 <lwip_netconn_do_write+0x10c>)
 800dea6:	4823      	ldr	r0, [pc, #140]	; (800df34 <lwip_netconn_do_write+0x108>)
 800dea8:	f00d f956 	bl	801b158 <iprintf>
        msg->conn->current_msg = msg;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2100      	movs	r1, #0
 800deba:	4618      	mov	r0, r3
 800debc:	f7ff fdea 	bl	800da94 <lwip_netconn_do_writemore>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d02e      	beq.n	800df24 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	785b      	ldrb	r3, [r3, #1]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d006      	beq.n	800dede <lwip_netconn_do_write+0xb2>
 800ded0:	4b16      	ldr	r3, [pc, #88]	; (800df2c <lwip_netconn_do_write+0x100>)
 800ded2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ded6:	4919      	ldr	r1, [pc, #100]	; (800df3c <lwip_netconn_do_write+0x110>)
 800ded8:	4816      	ldr	r0, [pc, #88]	; (800df34 <lwip_netconn_do_write+0x108>)
 800deda:	f00d f93d 	bl	801b158 <iprintf>
          UNLOCK_TCPIP_CORE();
 800dede:	4818      	ldr	r0, [pc, #96]	; (800df40 <lwip_netconn_do_write+0x114>)
 800dee0:	f00c ffe9 	bl	801aeb6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	330c      	adds	r3, #12
 800deea:	2100      	movs	r1, #0
 800deec:	4618      	mov	r0, r3
 800deee:	f00c ff40 	bl	801ad72 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800def2:	4813      	ldr	r0, [pc, #76]	; (800df40 <lwip_netconn_do_write+0x114>)
 800def4:	f00c ffd0 	bl	801ae98 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	785b      	ldrb	r3, [r3, #1]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d110      	bne.n	800df24 <lwip_netconn_do_write+0xf8>
 800df02:	4b0a      	ldr	r3, [pc, #40]	; (800df2c <lwip_netconn_do_write+0x100>)
 800df04:	f240 722c 	movw	r2, #1836	; 0x72c
 800df08:	490c      	ldr	r1, [pc, #48]	; (800df3c <lwip_netconn_do_write+0x110>)
 800df0a:	480a      	ldr	r0, [pc, #40]	; (800df34 <lwip_netconn_do_write+0x108>)
 800df0c:	f00d f924 	bl	801b158 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800df10:	e008      	b.n	800df24 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800df12:	23f5      	movs	r3, #245	; 0xf5
 800df14:	73fb      	strb	r3, [r7, #15]
 800df16:	e001      	b.n	800df1c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800df18:	23fa      	movs	r3, #250	; 0xfa
 800df1a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	7bfa      	ldrb	r2, [r7, #15]
 800df20:	711a      	strb	r2, [r3, #4]
 800df22:	e000      	b.n	800df26 <lwip_netconn_do_write+0xfa>
        return;
 800df24:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	0801c7f8 	.word	0x0801c7f8
 800df30:	0801cb9c 	.word	0x0801cb9c
 800df34:	0801c83c 	.word	0x0801c83c
 800df38:	0801cd24 	.word	0x0801cd24
 800df3c:	0801cbb8 	.word	0x0801cbb8
 800df40:	20039984 	.word	0x20039984

0800df44 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d06b      	beq.n	800e032 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	7c1b      	ldrb	r3, [r3, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d007      	beq.n	800df72 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	6812      	ldr	r2, [r2, #0]
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	e006      	b.n	800df80 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	6852      	ldr	r2, [r2, #4]
 800df7e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2200      	movs	r2, #0
 800df84:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df90:	2b10      	cmp	r3, #16
 800df92:	d021      	beq.n	800dfd8 <lwip_netconn_do_getaddr+0x94>
 800df94:	2b20      	cmp	r3, #32
 800df96:	d144      	bne.n	800e022 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	7c1b      	ldrb	r3, [r3, #16]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d007      	beq.n	800dfb0 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	8a52      	ldrh	r2, [r2, #18]
 800dfac:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800dfae:	e044      	b.n	800e03a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	7c1b      	ldrb	r3, [r3, #16]
 800dfb8:	f003 0304 	and.w	r3, r3, #4
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d103      	bne.n	800dfc8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	22f5      	movs	r2, #245	; 0xf5
 800dfc4:	711a      	strb	r2, [r3, #4]
        break;
 800dfc6:	e038      	b.n	800e03a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	685a      	ldr	r2, [r3, #4]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	68db      	ldr	r3, [r3, #12]
 800dfd2:	8a92      	ldrh	r2, [r2, #20]
 800dfd4:	801a      	strh	r2, [r3, #0]
        break;
 800dfd6:	e030      	b.n	800e03a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	7c1b      	ldrb	r3, [r3, #16]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10f      	bne.n	800e000 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d005      	beq.n	800dff8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	7d1b      	ldrb	r3, [r3, #20]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d103      	bne.n	800e000 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	22f5      	movs	r2, #245	; 0xf5
 800dffc:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800dffe:	e01c      	b.n	800e03a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	7c1b      	ldrb	r3, [r3, #16]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d004      	beq.n	800e012 <lwip_netconn_do_getaddr+0xce>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	8adb      	ldrh	r3, [r3, #22]
 800e010:	e003      	b.n	800e01a <lwip_netconn_do_getaddr+0xd6>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	8b1b      	ldrh	r3, [r3, #24]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	68d2      	ldr	r2, [r2, #12]
 800e01e:	8013      	strh	r3, [r2, #0]
        break;
 800e020:	e00b      	b.n	800e03a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800e022:	4b08      	ldr	r3, [pc, #32]	; (800e044 <lwip_netconn_do_getaddr+0x100>)
 800e024:	f240 727d 	movw	r2, #1917	; 0x77d
 800e028:	4907      	ldr	r1, [pc, #28]	; (800e048 <lwip_netconn_do_getaddr+0x104>)
 800e02a:	4808      	ldr	r0, [pc, #32]	; (800e04c <lwip_netconn_do_getaddr+0x108>)
 800e02c:	f00d f894 	bl	801b158 <iprintf>
        break;
 800e030:	e003      	b.n	800e03a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	22f5      	movs	r2, #245	; 0xf5
 800e036:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	0801c7f8 	.word	0x0801c7f8
 800e048:	0801cd38 	.word	0x0801cd38
 800e04c:	0801c83c 	.word	0x0801c83c

0800e050 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	785b      	ldrb	r3, [r3, #1]
 800e062:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d069      	beq.n	800e142 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e078:	2b10      	cmp	r3, #16
 800e07a:	d162      	bne.n	800e142 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e080:	2b03      	cmp	r3, #3
 800e082:	d002      	beq.n	800e08a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e084:	7afb      	ldrb	r3, [r7, #11]
 800e086:	2b02      	cmp	r3, #2
 800e088:	d05b      	beq.n	800e142 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e08a:	7afb      	ldrb	r3, [r7, #11]
 800e08c:	2b03      	cmp	r3, #3
 800e08e:	d103      	bne.n	800e098 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	22f5      	movs	r2, #245	; 0xf5
 800e094:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e096:	e059      	b.n	800e14c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e098:	7afb      	ldrb	r3, [r7, #11]
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d103      	bne.n	800e0a6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	22fb      	movs	r2, #251	; 0xfb
 800e0a2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e0a4:	e052      	b.n	800e14c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	7a1b      	ldrb	r3, [r3, #8]
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d004      	beq.n	800e0bc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff f860 	bl	800d17c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <lwip_netconn_do_close+0x84>
 800e0c6:	4b23      	ldr	r3, [pc, #140]	; (800e154 <lwip_netconn_do_close+0x104>)
 800e0c8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e0cc:	4922      	ldr	r1, [pc, #136]	; (800e158 <lwip_netconn_do_close+0x108>)
 800e0ce:	4823      	ldr	r0, [pc, #140]	; (800e15c <lwip_netconn_do_close+0x10c>)
 800e0d0:	f00d f842 	bl	801b158 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2204      	movs	r2, #4
 800e0da:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7ff f8c4 	bl	800d278 <lwip_netconn_do_close_internal>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d029      	beq.n	800e14a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	785b      	ldrb	r3, [r3, #1]
 800e0fc:	2b04      	cmp	r3, #4
 800e0fe:	d006      	beq.n	800e10e <lwip_netconn_do_close+0xbe>
 800e100:	4b14      	ldr	r3, [pc, #80]	; (800e154 <lwip_netconn_do_close+0x104>)
 800e102:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e106:	4916      	ldr	r1, [pc, #88]	; (800e160 <lwip_netconn_do_close+0x110>)
 800e108:	4814      	ldr	r0, [pc, #80]	; (800e15c <lwip_netconn_do_close+0x10c>)
 800e10a:	f00d f825 	bl	801b158 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e10e:	4815      	ldr	r0, [pc, #84]	; (800e164 <lwip_netconn_do_close+0x114>)
 800e110:	f00c fed1 	bl	801aeb6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	330c      	adds	r3, #12
 800e11a:	2100      	movs	r1, #0
 800e11c:	4618      	mov	r0, r3
 800e11e:	f00c fe28 	bl	801ad72 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e122:	4810      	ldr	r0, [pc, #64]	; (800e164 <lwip_netconn_do_close+0x114>)
 800e124:	f00c feb8 	bl	801ae98 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	785b      	ldrb	r3, [r3, #1]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00b      	beq.n	800e14a <lwip_netconn_do_close+0xfa>
 800e132:	4b08      	ldr	r3, [pc, #32]	; (800e154 <lwip_netconn_do_close+0x104>)
 800e134:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e138:	4909      	ldr	r1, [pc, #36]	; (800e160 <lwip_netconn_do_close+0x110>)
 800e13a:	4808      	ldr	r0, [pc, #32]	; (800e15c <lwip_netconn_do_close+0x10c>)
 800e13c:	f00d f80c 	bl	801b158 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e140:	e003      	b.n	800e14a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	22f5      	movs	r2, #245	; 0xf5
 800e146:	711a      	strb	r2, [r3, #4]
 800e148:	e000      	b.n	800e14c <lwip_netconn_do_close+0xfc>
      return;
 800e14a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	0801c7f8 	.word	0x0801c7f8
 800e158:	0801cb9c 	.word	0x0801cb9c
 800e15c:	0801c83c 	.word	0x0801c83c
 800e160:	0801cbb8 	.word	0x0801cbb8
 800e164:	20039984 	.word	0x20039984

0800e168 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	4603      	mov	r3, r0
 800e170:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e176:	2b00      	cmp	r3, #0
 800e178:	dc04      	bgt.n	800e184 <err_to_errno+0x1c>
 800e17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e17e:	f113 0f10 	cmn.w	r3, #16
 800e182:	da01      	bge.n	800e188 <err_to_errno+0x20>
    return EIO;
 800e184:	2305      	movs	r3, #5
 800e186:	e005      	b.n	800e194 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e18c:	425b      	negs	r3, r3
 800e18e:	4a04      	ldr	r2, [pc, #16]	; (800e1a0 <err_to_errno+0x38>)
 800e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e194:	4618      	mov	r0, r3
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	0801fd70 	.word	0x0801fd70

0800e1a4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d013      	beq.n	800e1da <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00b      	beq.n	800e1d2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f003 f80e 	bl	80111e0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	605a      	str	r2, [r3, #4]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685a      	ldr	r2, [r3, #4]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	2006      	movs	r0, #6
 800e1d6:	f002 f92d 	bl	8010434 <memp_free>
  }
}
 800e1da:	bf00      	nop
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
	...

0800e1e4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <netbuf_free+0x1c>
 800e1f2:	4b0d      	ldr	r3, [pc, #52]	; (800e228 <netbuf_free+0x44>)
 800e1f4:	2281      	movs	r2, #129	; 0x81
 800e1f6:	490d      	ldr	r1, [pc, #52]	; (800e22c <netbuf_free+0x48>)
 800e1f8:	480d      	ldr	r0, [pc, #52]	; (800e230 <netbuf_free+0x4c>)
 800e1fa:	f00c ffad 	bl	801b158 <iprintf>
 800e1fe:	e00f      	b.n	800e220 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d004      	beq.n	800e212 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f002 ffe7 	bl	80111e0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	605a      	str	r2, [r3, #4]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	0801cd50 	.word	0x0801cd50
 800e22c:	0801cdec 	.word	0x0801cdec
 800e230:	0801cda0 	.word	0x0801cda0

0800e234 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	4613      	mov	r3, r2
 800e240:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d108      	bne.n	800e25a <netbuf_ref+0x26>
 800e248:	4b1c      	ldr	r3, [pc, #112]	; (800e2bc <netbuf_ref+0x88>)
 800e24a:	2299      	movs	r2, #153	; 0x99
 800e24c:	491c      	ldr	r1, [pc, #112]	; (800e2c0 <netbuf_ref+0x8c>)
 800e24e:	481d      	ldr	r0, [pc, #116]	; (800e2c4 <netbuf_ref+0x90>)
 800e250:	f00c ff82 	bl	801b158 <iprintf>
 800e254:	f06f 030f 	mvn.w	r3, #15
 800e258:	e02b      	b.n	800e2b2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d004      	beq.n	800e26c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4618      	mov	r0, r3
 800e268:	f002 ffba 	bl	80111e0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e26c:	2241      	movs	r2, #65	; 0x41
 800e26e:	2100      	movs	r1, #0
 800e270:	2036      	movs	r0, #54	; 0x36
 800e272:	f002 fc9f 	bl	8010bb4 <pbuf_alloc>
 800e276:	4602      	mov	r2, r0
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d105      	bne.n	800e290 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2200      	movs	r2, #0
 800e288:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e28a:	f04f 33ff 	mov.w	r3, #4294967295
 800e28e:	e010      	b.n	800e2b2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	88fa      	ldrh	r2, [r7, #6]
 800e29e:	811a      	strh	r2, [r3, #8]
 800e2a0:	68fa      	ldr	r2, [r7, #12]
 800e2a2:	6812      	ldr	r2, [r2, #0]
 800e2a4:	891b      	ldrh	r3, [r3, #8]
 800e2a6:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	0801cd50 	.word	0x0801cd50
 800e2c0:	0801ce08 	.word	0x0801ce08
 800e2c4:	0801cda0 	.word	0x0801cda0

0800e2c8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	db02      	blt.n	800e2e0 <tryget_socket_unconn_nouse+0x18>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b03      	cmp	r3, #3
 800e2de:	dd01      	ble.n	800e2e4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e003      	b.n	800e2ec <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	011b      	lsls	r3, r3, #4
 800e2e8:	4a03      	ldr	r2, [pc, #12]	; (800e2f8 <tryget_socket_unconn_nouse+0x30>)
 800e2ea:	4413      	add	r3, r2
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	20039934 	.word	0x20039934

0800e2fc <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff ffdf 	bl	800e2c8 <tryget_socket_unconn_nouse>
 800e30a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e30c:	68fb      	ldr	r3, [r7, #12]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff ffec 	bl	800e2fc <tryget_socket_unconn>
 800e324:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d005      	beq.n	800e338 <tryget_socket+0x22>
    if (sock->conn) {
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <tryget_socket+0x22>
      return sock;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	e000      	b.n	800e33a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
	...

0800e344 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7ff ffe2 	bl	800e316 <tryget_socket>
 800e352:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d104      	bne.n	800e364 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e35a:	4b05      	ldr	r3, [pc, #20]	; (800e370 <get_socket+0x2c>)
 800e35c:	2209      	movs	r2, #9
 800e35e:	601a      	str	r2, [r3, #0]
    return NULL;
 800e360:	2300      	movs	r3, #0
 800e362:	e000      	b.n	800e366 <get_socket+0x22>
  }
  return sock;
 800e364:	68fb      	ldr	r3, [r7, #12]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	2003d378 	.word	0x2003d378

0800e374 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	e052      	b.n	800e42a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e384:	f00c fdca 	bl	801af1c <sys_arch_protect>
 800e388:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e38a:	4a2c      	ldr	r2, [pc, #176]	; (800e43c <alloc_socket+0xc8>)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	011b      	lsls	r3, r3, #4
 800e390:	4413      	add	r3, r2
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d142      	bne.n	800e41e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e398:	4a28      	ldr	r2, [pc, #160]	; (800e43c <alloc_socket+0xc8>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	4413      	add	r3, r2
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e3a4:	68b8      	ldr	r0, [r7, #8]
 800e3a6:	f00c fdc7 	bl	801af38 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e3aa:	4a24      	ldr	r2, [pc, #144]	; (800e43c <alloc_socket+0xc8>)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	011b      	lsls	r3, r3, #4
 800e3b0:	4413      	add	r3, r2
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e3b8:	4a20      	ldr	r2, [pc, #128]	; (800e43c <alloc_socket+0xc8>)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	011b      	lsls	r3, r3, #4
 800e3be:	4413      	add	r3, r2
 800e3c0:	330e      	adds	r3, #14
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d006      	beq.n	800e3d6 <alloc_socket+0x62>
 800e3c8:	4b1d      	ldr	r3, [pc, #116]	; (800e440 <alloc_socket+0xcc>)
 800e3ca:	f240 220e 	movw	r2, #526	; 0x20e
 800e3ce:	491d      	ldr	r1, [pc, #116]	; (800e444 <alloc_socket+0xd0>)
 800e3d0:	481d      	ldr	r0, [pc, #116]	; (800e448 <alloc_socket+0xd4>)
 800e3d2:	f00c fec1 	bl	801b158 <iprintf>
      sockets[i].rcvevent   = 0;
 800e3d6:	4a19      	ldr	r2, [pc, #100]	; (800e43c <alloc_socket+0xc8>)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	011b      	lsls	r3, r3, #4
 800e3dc:	4413      	add	r3, r2
 800e3de:	3308      	adds	r3, #8
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3ec:	2b10      	cmp	r3, #16
 800e3ee:	d102      	bne.n	800e3f6 <alloc_socket+0x82>
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <alloc_socket+0x86>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <alloc_socket+0x88>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	b299      	uxth	r1, r3
 800e3fe:	4a0f      	ldr	r2, [pc, #60]	; (800e43c <alloc_socket+0xc8>)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	011b      	lsls	r3, r3, #4
 800e404:	4413      	add	r3, r2
 800e406:	330a      	adds	r3, #10
 800e408:	460a      	mov	r2, r1
 800e40a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e40c:	4a0b      	ldr	r2, [pc, #44]	; (800e43c <alloc_socket+0xc8>)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	011b      	lsls	r3, r3, #4
 800e412:	4413      	add	r3, r2
 800e414:	330c      	adds	r3, #12
 800e416:	2200      	movs	r2, #0
 800e418:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	e00a      	b.n	800e434 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e41e:	68b8      	ldr	r0, [r7, #8]
 800e420:	f00c fd8a 	bl	801af38 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3301      	adds	r3, #1
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b03      	cmp	r3, #3
 800e42e:	dda9      	ble.n	800e384 <alloc_socket+0x10>
  }
  return -1;
 800e430:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	20039934 	.word	0x20039934
 800e440:	0801cee8 	.word	0x0801cee8
 800e444:	0801cf1c 	.word	0x0801cf1c
 800e448:	0801cf3c 	.word	0x0801cf3c

0800e44c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	68fa      	ldr	r2, [r7, #12]
 800e45e:	6852      	ldr	r2, [r2, #4]
 800e460:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
  return 1;
 800e476:	2301      	movs	r3, #1
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00d      	beq.n	800e4b4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d005      	beq.n	800e4aa <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f002 fe9c 	bl	80111e0 <pbuf_free>
 800e4a8:	e004      	b.n	800e4b4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7ff fe78 	bl	800e1a4 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d002      	beq.n	800e4c0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800e4ba:	68b8      	ldr	r0, [r7, #8]
 800e4bc:	f7fd fc9c 	bl	800bdf8 <netconn_delete>
  }
}
 800e4c0:	bf00      	nop
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800e4d2:	f00c fd23 	bl	801af1c <sys_arch_protect>
 800e4d6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800e4d8:	f107 0308 	add.w	r3, r7, #8
 800e4dc:	f107 020c 	add.w	r2, r7, #12
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff ffb2 	bl	800e44c <free_socket_locked>
 800e4e8:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800e4ea:	6978      	ldr	r0, [r7, #20]
 800e4ec:	f00c fd24 	bl	801af38 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d006      	beq.n	800e504 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f107 0208 	add.w	r2, r7, #8
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	6838      	ldr	r0, [r7, #0]
 800e500:	f7ff ffc0 	bl	800e484 <free_socket_free_elements>
  }
}
 800e504:	bf00      	nop
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800e50c:	b590      	push	{r4, r7, lr}
 800e50e:	b099      	sub	sp, #100	; 0x64
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800e51c:	68f8      	ldr	r0, [r7, #12]
 800e51e:	f7ff ff11 	bl	800e344 <get_socket>
 800e522:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800e524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <lwip_accept+0x24>
    return -1;
 800e52a:	f04f 33ff 	mov.w	r3, #4294967295
 800e52e:	e0f8      	b.n	800e722 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800e530:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e538:	4611      	mov	r1, r2
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fd fd2e 	bl	800bf9c <netconn_accept>
 800e540:	4603      	mov	r3, r0
 800e542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800e546:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d02c      	beq.n	800e5a8 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e54e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d008      	beq.n	800e56e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800e55c:	235f      	movs	r3, #95	; 0x5f
 800e55e:	633b      	str	r3, [r7, #48]	; 0x30
 800e560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e562:	2b00      	cmp	r3, #0
 800e564:	d01d      	beq.n	800e5a2 <lwip_accept+0x96>
 800e566:	4a71      	ldr	r2, [pc, #452]	; (800e72c <lwip_accept+0x220>)
 800e568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	e019      	b.n	800e5a2 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800e56e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800e572:	f113 0f0f 	cmn.w	r3, #15
 800e576:	d108      	bne.n	800e58a <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800e578:	2316      	movs	r3, #22
 800e57a:	637b      	str	r3, [r7, #52]	; 0x34
 800e57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00f      	beq.n	800e5a2 <lwip_accept+0x96>
 800e582:	4a6a      	ldr	r2, [pc, #424]	; (800e72c <lwip_accept+0x220>)
 800e584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	e00b      	b.n	800e5a2 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800e58a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800e58e:	4618      	mov	r0, r3
 800e590:	f7ff fdea 	bl	800e168 <err_to_errno>
 800e594:	63b8      	str	r0, [r7, #56]	; 0x38
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <lwip_accept+0x96>
 800e59c:	4a63      	ldr	r2, [pc, #396]	; (800e72c <lwip_accept+0x220>)
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800e5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5a6:	e0bc      	b.n	800e722 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <lwip_accept+0xb0>
 800e5ae:	4b60      	ldr	r3, [pc, #384]	; (800e730 <lwip_accept+0x224>)
 800e5b0:	f240 228b 	movw	r2, #651	; 0x28b
 800e5b4:	495f      	ldr	r1, [pc, #380]	; (800e734 <lwip_accept+0x228>)
 800e5b6:	4860      	ldr	r0, [pc, #384]	; (800e738 <lwip_accept+0x22c>)
 800e5b8:	f00c fdce 	bl	801b158 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	2101      	movs	r1, #1
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7ff fed7 	bl	800e374 <alloc_socket>
 800e5c6:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800e5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ce:	d10e      	bne.n	800e5ee <lwip_accept+0xe2>
    netconn_delete(newconn);
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fd fc10 	bl	800bdf8 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800e5d8:	2317      	movs	r3, #23
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <lwip_accept+0xdc>
 800e5e2:	4a52      	ldr	r2, [pc, #328]	; (800e72c <lwip_accept+0x220>)
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ec:	e099      	b.n	800e722 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800e5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	db02      	blt.n	800e5fa <lwip_accept+0xee>
 800e5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5f6:	2b03      	cmp	r3, #3
 800e5f8:	dd06      	ble.n	800e608 <lwip_accept+0xfc>
 800e5fa:	4b4d      	ldr	r3, [pc, #308]	; (800e730 <lwip_accept+0x224>)
 800e5fc:	f44f 7225 	mov.w	r2, #660	; 0x294
 800e600:	494e      	ldr	r1, [pc, #312]	; (800e73c <lwip_accept+0x230>)
 800e602:	484d      	ldr	r0, [pc, #308]	; (800e738 <lwip_accept+0x22c>)
 800e604:	f00c fda8 	bl	801b158 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800e608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e60a:	011b      	lsls	r3, r3, #4
 800e60c:	4a4c      	ldr	r2, [pc, #304]	; (800e740 <lwip_accept+0x234>)
 800e60e:	4413      	add	r3, r2
 800e610:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800e612:	f00c fc83 	bl	801af1c <sys_arch_protect>
 800e616:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	699b      	ldr	r3, [r3, #24]
 800e61c:	b21b      	sxth	r3, r3
 800e61e:	43db      	mvns	r3, r3
 800e620:	b21b      	sxth	r3, r3
 800e622:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800e624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e628:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800e62a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e62c:	f00c fc84 	bl	801af38 <sys_arch_unprotect>

  if (newconn->callback) {
 800e630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e634:	2b00      	cmp	r3, #0
 800e636:	d012      	beq.n	800e65e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800e638:	4842      	ldr	r0, [pc, #264]	; (800e744 <lwip_accept+0x238>)
 800e63a:	f00c fc2d 	bl	801ae98 <sys_mutex_lock>
    while (recvevent > 0) {
 800e63e:	e008      	b.n	800e652 <lwip_accept+0x146>
      recvevent--;
 800e640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e642:	3b01      	subs	r3, #1
 800e644:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e64c:	2200      	movs	r2, #0
 800e64e:	2100      	movs	r1, #0
 800e650:	4798      	blx	r3
    while (recvevent > 0) {
 800e652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e654:	2b00      	cmp	r3, #0
 800e656:	dcf3      	bgt.n	800e640 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800e658:	483a      	ldr	r0, [pc, #232]	; (800e744 <lwip_accept+0x238>)
 800e65a:	f00c fc2c 	bl	801aeb6 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d055      	beq.n	800e710 <lwip_accept+0x204>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d052      	beq.n	800e710 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800e66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e66c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800e670:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e674:	2300      	movs	r3, #0
 800e676:	f7fd fbdb 	bl	800be30 <netconn_getaddr>
 800e67a:	4603      	mov	r3, r0
 800e67c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800e680:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800e684:	2b00      	cmp	r3, #0
 800e686:	d016      	beq.n	800e6b6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fd fbb4 	bl	800bdf8 <netconn_delete>
      free_socket(nsock, 1);
 800e690:	2101      	movs	r1, #1
 800e692:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e694:	f7ff ff18 	bl	800e4c8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800e698:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff fd63 	bl	800e168 <err_to_errno>
 800e6a2:	6478      	str	r0, [r7, #68]	; 0x44
 800e6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <lwip_accept+0x1a4>
 800e6aa:	4a20      	ldr	r2, [pc, #128]	; (800e72c <lwip_accept+0x220>)
 800e6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ae:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800e6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b4:	e035      	b.n	800e722 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800e6b6:	f107 0314 	add.w	r3, r7, #20
 800e6ba:	2210      	movs	r2, #16
 800e6bc:	701a      	strb	r2, [r3, #0]
 800e6be:	f107 0314 	add.w	r3, r7, #20
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	705a      	strb	r2, [r3, #1]
 800e6c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6c8:	f107 0414 	add.w	r4, r7, #20
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f001 f963 	bl	800f998 <lwip_htons>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	8063      	strh	r3, [r4, #2]
 800e6d6:	f107 0314 	add.w	r3, r7, #20
 800e6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6dc:	605a      	str	r2, [r3, #4]
 800e6de:	f107 0314 	add.w	r3, r7, #20
 800e6e2:	3308      	adds	r3, #8
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f00c fe8b 	bl	801b404 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	7d3a      	ldrb	r2, [r7, #20]
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d903      	bls.n	800e700 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800e6f8:	7d3b      	ldrb	r3, [r7, #20]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	f107 0314 	add.w	r3, r7, #20
 800e708:	4619      	mov	r1, r3
 800e70a:	68b8      	ldr	r0, [r7, #8]
 800e70c:	f00c ff45 	bl	801b59a <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800e710:	2300      	movs	r3, #0
 800e712:	643b      	str	r3, [r7, #64]	; 0x40
 800e714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <lwip_accept+0x214>
 800e71a:	4a04      	ldr	r2, [pc, #16]	; (800e72c <lwip_accept+0x220>)
 800e71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e71e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800e720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800e722:	4618      	mov	r0, r3
 800e724:	3764      	adds	r7, #100	; 0x64
 800e726:	46bd      	mov	sp, r7
 800e728:	bd90      	pop	{r4, r7, pc}
 800e72a:	bf00      	nop
 800e72c:	2003d378 	.word	0x2003d378
 800e730:	0801cee8 	.word	0x0801cee8
 800e734:	0801cf64 	.word	0x0801cf64
 800e738:	0801cf3c 	.word	0x0801cf3c
 800e73c:	0801cf74 	.word	0x0801cf74
 800e740:	20039934 	.word	0x20039934
 800e744:	20039984 	.word	0x20039984

0800e748 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08a      	sub	sp, #40	; 0x28
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff fdf5 	bl	800e344 <get_socket>
 800e75a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <lwip_bind+0x20>
    return -1;
 800e762:	f04f 33ff 	mov.w	r3, #4294967295
 800e766:	e051      	b.n	800e80c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b10      	cmp	r3, #16
 800e76c:	d108      	bne.n	800e780 <lwip_bind+0x38>
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	785b      	ldrb	r3, [r3, #1]
 800e772:	2b02      	cmp	r3, #2
 800e774:	d104      	bne.n	800e780 <lwip_bind+0x38>
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d014      	beq.n	800e7aa <lwip_bind+0x62>
 800e780:	4b24      	ldr	r3, [pc, #144]	; (800e814 <lwip_bind+0xcc>)
 800e782:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e786:	4924      	ldr	r1, [pc, #144]	; (800e818 <lwip_bind+0xd0>)
 800e788:	4824      	ldr	r0, [pc, #144]	; (800e81c <lwip_bind+0xd4>)
 800e78a:	f00c fce5 	bl	801b158 <iprintf>
 800e78e:	f06f 000f 	mvn.w	r0, #15
 800e792:	f7ff fce9 	bl	800e168 <err_to_errno>
 800e796:	6178      	str	r0, [r7, #20]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <lwip_bind+0x5c>
 800e79e:	4a20      	ldr	r2, [pc, #128]	; (800e820 <lwip_bind+0xd8>)
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	6013      	str	r3, [r2, #0]
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a8:	e030      	b.n	800e80c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	613b      	str	r3, [r7, #16]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	885b      	ldrh	r3, [r3, #2]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f001 f8ef 	bl	800f998 <lwip_htons>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e7c4:	f107 0110 	add.w	r1, r7, #16
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fd fb83 	bl	800bed4 <netconn_bind>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800e7d4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00e      	beq.n	800e7fa <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e7dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff fcc1 	bl	800e168 <err_to_errno>
 800e7e6:	61b8      	str	r0, [r7, #24]
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d002      	beq.n	800e7f4 <lwip_bind+0xac>
 800e7ee:	4a0c      	ldr	r2, [pc, #48]	; (800e820 <lwip_bind+0xd8>)
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f8:	e008      	b.n	800e80c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	61fb      	str	r3, [r7, #28]
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <lwip_bind+0xc2>
 800e804:	4a06      	ldr	r2, [pc, #24]	; (800e820 <lwip_bind+0xd8>)
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3728      	adds	r7, #40	; 0x28
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	0801cee8 	.word	0x0801cee8
 800e818:	0801cf8c 	.word	0x0801cf8c
 800e81c:	0801cf3c 	.word	0x0801cf3c
 800e820:	2003d378 	.word	0x2003d378

0800e824 <lwip_close>:

int
lwip_close(int s)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f7ff fd87 	bl	800e344 <get_socket>
 800e836:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d102      	bne.n	800e844 <lwip_close+0x20>
    return -1;
 800e83e:	f04f 33ff 	mov.w	r3, #4294967295
 800e842:	e039      	b.n	800e8b8 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d00b      	beq.n	800e864 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e856:	2b10      	cmp	r3, #16
 800e858:	bf0c      	ite	eq
 800e85a:	2301      	moveq	r3, #1
 800e85c:	2300      	movne	r3, #0
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	617b      	str	r3, [r7, #20]
 800e862:	e00a      	b.n	800e87a <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d006      	beq.n	800e87a <lwip_close+0x56>
 800e86c:	4b14      	ldr	r3, [pc, #80]	; (800e8c0 <lwip_close+0x9c>)
 800e86e:	f44f 7245 	mov.w	r2, #788	; 0x314
 800e872:	4914      	ldr	r1, [pc, #80]	; (800e8c4 <lwip_close+0xa0>)
 800e874:	4814      	ldr	r0, [pc, #80]	; (800e8c8 <lwip_close+0xa4>)
 800e876:	f00c fc6f 	bl	801b158 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fd fa94 	bl	800bdac <netconn_prepare_delete>
 800e884:	4603      	mov	r3, r0
 800e886:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00e      	beq.n	800e8ae <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800e890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff fc67 	bl	800e168 <err_to_errno>
 800e89a:	60b8      	str	r0, [r7, #8]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d002      	beq.n	800e8a8 <lwip_close+0x84>
 800e8a2:	4a0a      	ldr	r2, [pc, #40]	; (800e8cc <lwip_close+0xa8>)
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ac:	e004      	b.n	800e8b8 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800e8ae:	6979      	ldr	r1, [r7, #20]
 800e8b0:	6938      	ldr	r0, [r7, #16]
 800e8b2:	f7ff fe09 	bl	800e4c8 <free_socket>
  set_errno(0);
  return 0;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3718      	adds	r7, #24
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	0801cee8 	.word	0x0801cee8
 800e8c4:	0801cfa8 	.word	0x0801cfa8
 800e8c8:	0801cf3c 	.word	0x0801cf3c
 800e8cc:	2003d378 	.word	0x2003d378

0800e8d0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b088      	sub	sp, #32
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff fd32 	bl	800e344 <get_socket>
 800e8e0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <lwip_listen+0x1e>
    return -1;
 800e8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ec:	e03e      	b.n	800e96c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	2bfe      	cmp	r3, #254	; 0xfe
 800e8f2:	dc03      	bgt.n	800e8fc <lwip_listen+0x2c>
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e8fa:	e000      	b.n	800e8fe <lwip_listen+0x2e>
 800e8fc:	23ff      	movs	r3, #255	; 0xff
 800e8fe:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	683a      	ldr	r2, [r7, #0]
 800e906:	b2d2      	uxtb	r2, r2
 800e908:	4611      	mov	r1, r2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fd fb1a 	bl	800bf44 <netconn_listen_with_backlog>
 800e910:	4603      	mov	r3, r0
 800e912:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800e914:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d01e      	beq.n	800e95a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e926:	2b10      	cmp	r3, #16
 800e928:	d008      	beq.n	800e93c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800e92a:	235f      	movs	r3, #95	; 0x5f
 800e92c:	60fb      	str	r3, [r7, #12]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00f      	beq.n	800e954 <lwip_listen+0x84>
 800e934:	4a0f      	ldr	r2, [pc, #60]	; (800e974 <lwip_listen+0xa4>)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6013      	str	r3, [r2, #0]
 800e93a:	e00b      	b.n	800e954 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800e93c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e940:	4618      	mov	r0, r3
 800e942:	f7ff fc11 	bl	800e168 <err_to_errno>
 800e946:	6138      	str	r0, [r7, #16]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d002      	beq.n	800e954 <lwip_listen+0x84>
 800e94e:	4a09      	ldr	r2, [pc, #36]	; (800e974 <lwip_listen+0xa4>)
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	e008      	b.n	800e96c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800e95a:	2300      	movs	r3, #0
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <lwip_listen+0x9a>
 800e964:	4a03      	ldr	r2, [pc, #12]	; (800e974 <lwip_listen+0xa4>)
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	2003d378 	.word	0x2003d378

0800e978 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08c      	sub	sp, #48	; 0x30
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e986:	2308      	movs	r3, #8
 800e988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	db01      	blt.n	800e99a <lwip_recv_tcp+0x22>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	e001      	b.n	800e99e <lwip_recv_tcp+0x26>
 800e99a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e99e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <lwip_recv_tcp+0x3c>
 800e9a6:	4b74      	ldr	r3, [pc, #464]	; (800eb78 <lwip_recv_tcp+0x200>)
 800e9a8:	f240 329e 	movw	r2, #926	; 0x39e
 800e9ac:	4973      	ldr	r1, [pc, #460]	; (800eb7c <lwip_recv_tcp+0x204>)
 800e9ae:	4874      	ldr	r0, [pc, #464]	; (800eb80 <lwip_recv_tcp+0x208>)
 800e9b0:	f00c fbd2 	bl	801b158 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9be:	2b10      	cmp	r3, #16
 800e9c0:	d006      	beq.n	800e9d0 <lwip_recv_tcp+0x58>
 800e9c2:	4b6d      	ldr	r3, [pc, #436]	; (800eb78 <lwip_recv_tcp+0x200>)
 800e9c4:	f240 329f 	movw	r2, #927	; 0x39f
 800e9c8:	496e      	ldr	r1, [pc, #440]	; (800eb84 <lwip_recv_tcp+0x20c>)
 800e9ca:	486d      	ldr	r0, [pc, #436]	; (800eb80 <lwip_recv_tcp+0x208>)
 800e9cc:	f00c fbc4 	bl	801b158 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	f003 0308 	and.w	r3, r3, #8
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d005      	beq.n	800e9e6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9de:	f043 0304 	orr.w	r3, r3, #4
 800e9e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d003      	beq.n	800e9f6 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	e036      	b.n	800ea64 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e9fe:	f107 0114 	add.w	r1, r7, #20
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fd fd00 	bl	800c408 <netconn_recv_tcp_pbuf_flags>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800ea0e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d019      	beq.n	800ea4a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800ea16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f300 808d 	bgt.w	800eb38 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800ea1e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7ff fba0 	bl	800e168 <err_to_errno>
 800ea28:	61f8      	str	r0, [r7, #28]
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <lwip_recv_tcp+0xbe>
 800ea30:	4a55      	ldr	r2, [pc, #340]	; (800eb88 <lwip_recv_tcp+0x210>)
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800ea36:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ea3a:	f113 0f0f 	cmn.w	r3, #15
 800ea3e:	d101      	bne.n	800ea44 <lwip_recv_tcp+0xcc>
          return 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	e094      	b.n	800eb6e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800ea44:	f04f 33ff 	mov.w	r3, #4294967295
 800ea48:	e091      	b.n	800eb6e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d106      	bne.n	800ea5e <lwip_recv_tcp+0xe6>
 800ea50:	4b49      	ldr	r3, [pc, #292]	; (800eb78 <lwip_recv_tcp+0x200>)
 800ea52:	f240 32c5 	movw	r2, #965	; 0x3c5
 800ea56:	494d      	ldr	r1, [pc, #308]	; (800eb8c <lwip_recv_tcp+0x214>)
 800ea58:	4849      	ldr	r0, [pc, #292]	; (800eb80 <lwip_recv_tcp+0x208>)
 800ea5a:	f00c fb7d 	bl	801b158 <iprintf>
      sock->lastdata.pbuf = p;
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	891b      	ldrh	r3, [r3, #8]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	dd03      	ble.n	800ea78 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	891b      	ldrh	r3, [r3, #8]
 800ea74:	847b      	strh	r3, [r7, #34]	; 0x22
 800ea76:	e001      	b.n	800ea7c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800ea7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	4413      	add	r3, r2
 800ea82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea84:	429a      	cmp	r2, r3
 800ea86:	dd03      	ble.n	800ea90 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800ea88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	43db      	mvns	r3, r3
 800ea8e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800ea90:	6978      	ldr	r0, [r7, #20]
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	18d1      	adds	r1, r2, r3
 800ea98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	f002 fda6 	bl	80115ec <pbuf_copy_partial>

    recvd += copylen;
 800eaa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaa4:	4413      	add	r3, r2
 800eaa6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800eaa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaac:	429a      	cmp	r2, r3
 800eaae:	da06      	bge.n	800eabe <lwip_recv_tcp+0x146>
 800eab0:	4b31      	ldr	r3, [pc, #196]	; (800eb78 <lwip_recv_tcp+0x200>)
 800eab2:	f240 32dd 	movw	r2, #989	; 0x3dd
 800eab6:	4936      	ldr	r1, [pc, #216]	; (800eb90 <lwip_recv_tcp+0x218>)
 800eab8:	4831      	ldr	r0, [pc, #196]	; (800eb80 <lwip_recv_tcp+0x208>)
 800eaba:	f00c fb4d 	bl	801b158 <iprintf>
    recv_left -= copylen;
 800eabe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d123      	bne.n	800eb18 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	891b      	ldrh	r3, [r3, #8]
 800ead4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d906      	bls.n	800eae8 <lwip_recv_tcp+0x170>
 800eada:	4b27      	ldr	r3, [pc, #156]	; (800eb78 <lwip_recv_tcp+0x200>)
 800eadc:	f240 32e3 	movw	r2, #995	; 0x3e3
 800eae0:	492c      	ldr	r1, [pc, #176]	; (800eb94 <lwip_recv_tcp+0x21c>)
 800eae2:	4827      	ldr	r0, [pc, #156]	; (800eb80 <lwip_recv_tcp+0x208>)
 800eae4:	f00c fb38 	bl	801b158 <iprintf>
      if (p->tot_len - copylen > 0) {
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	891b      	ldrh	r3, [r3, #8]
 800eaec:	461a      	mov	r2, r3
 800eaee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dd09      	ble.n	800eb0a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eafa:	4611      	mov	r1, r2
 800eafc:	4618      	mov	r0, r3
 800eafe:	f002 fb3c 	bl	801117a <pbuf_free_header>
 800eb02:	4602      	mov	r2, r0
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	605a      	str	r2, [r3, #4]
 800eb08:	e006      	b.n	800eb18 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f002 fb64 	bl	80111e0 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800eb18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb1c:	f043 0314 	orr.w	r3, r3, #20
 800eb20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	dd08      	ble.n	800eb3c <lwip_recv_tcp+0x1c4>
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	f003 0301 	and.w	r3, r3, #1
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f43f af58 	beq.w	800e9e6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800eb36:	e001      	b.n	800eb3c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800eb38:	bf00      	nop
 800eb3a:	e000      	b.n	800eb3e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800eb3c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	dd0b      	ble.n	800eb5c <lwip_recv_tcp+0x1e4>
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	f003 0301 	and.w	r3, r3, #1
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d106      	bne.n	800eb5c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb54:	4611      	mov	r1, r2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fd fba4 	bl	800c2a4 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	61bb      	str	r3, [r7, #24]
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <lwip_recv_tcp+0x1f4>
 800eb66:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <lwip_recv_tcp+0x210>)
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	6013      	str	r3, [r2, #0]
  return recvd;
 800eb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3730      	adds	r7, #48	; 0x30
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	0801cee8 	.word	0x0801cee8
 800eb7c:	0801cfe0 	.word	0x0801cfe0
 800eb80:	0801cf3c 	.word	0x0801cf3c
 800eb84:	0801cff0 	.word	0x0801cff0
 800eb88:	2003d378 	.word	0x2003d378
 800eb8c:	0801d014 	.word	0x0801d014
 800eb90:	0801d020 	.word	0x0801d020
 800eb94:	0801d048 	.word	0x0801d048

0800eb98 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b08b      	sub	sp, #44	; 0x2c
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	603b      	str	r3, [r7, #0]
 800eba4:	4613      	mov	r3, r2
 800eba6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d106      	bne.n	800ebc0 <lwip_sock_make_addr+0x28>
 800ebb2:	4b2b      	ldr	r3, [pc, #172]	; (800ec60 <lwip_sock_make_addr+0xc8>)
 800ebb4:	f240 4207 	movw	r2, #1031	; 0x407
 800ebb8:	492a      	ldr	r1, [pc, #168]	; (800ec64 <lwip_sock_make_addr+0xcc>)
 800ebba:	482b      	ldr	r0, [pc, #172]	; (800ec68 <lwip_sock_make_addr+0xd0>)
 800ebbc:	f00c facc 	bl	801b158 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d106      	bne.n	800ebd4 <lwip_sock_make_addr+0x3c>
 800ebc6:	4b26      	ldr	r3, [pc, #152]	; (800ec60 <lwip_sock_make_addr+0xc8>)
 800ebc8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ebcc:	4927      	ldr	r1, [pc, #156]	; (800ec6c <lwip_sock_make_addr+0xd4>)
 800ebce:	4826      	ldr	r0, [pc, #152]	; (800ec68 <lwip_sock_make_addr+0xd0>)
 800ebd0:	f00c fac2 	bl	801b158 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d106      	bne.n	800ebe8 <lwip_sock_make_addr+0x50>
 800ebda:	4b21      	ldr	r3, [pc, #132]	; (800ec60 <lwip_sock_make_addr+0xc8>)
 800ebdc:	f240 4209 	movw	r2, #1033	; 0x409
 800ebe0:	4923      	ldr	r1, [pc, #140]	; (800ec70 <lwip_sock_make_addr+0xd8>)
 800ebe2:	4821      	ldr	r0, [pc, #132]	; (800ec68 <lwip_sock_make_addr+0xd0>)
 800ebe4:	f00c fab8 	bl	801b158 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ebe8:	f107 0314 	add.w	r3, r7, #20
 800ebec:	2210      	movs	r2, #16
 800ebee:	701a      	strb	r2, [r3, #0]
 800ebf0:	f107 0314 	add.w	r3, r7, #20
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	705a      	strb	r2, [r3, #1]
 800ebf8:	f107 0414 	add.w	r4, r7, #20
 800ebfc:	88fb      	ldrh	r3, [r7, #6]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 feca 	bl	800f998 <lwip_htons>
 800ec04:	4603      	mov	r3, r0
 800ec06:	8063      	strh	r3, [r4, #2]
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	6812      	ldr	r2, [r2, #0]
 800ec10:	605a      	str	r2, [r3, #4]
 800ec12:	f107 0314 	add.w	r3, r7, #20
 800ec16:	3308      	adds	r3, #8
 800ec18:	2208      	movs	r2, #8
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f00c fbf1 	bl	801b404 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800ec22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	7d3a      	ldrb	r2, [r7, #20]
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d202      	bcs.n	800ec32 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec30:	e008      	b.n	800ec44 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	7d3a      	ldrb	r2, [r7, #20]
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d903      	bls.n	800ec44 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800ec3c:	7d3b      	ldrb	r3, [r7, #20]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec42:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	f107 0314 	add.w	r3, r7, #20
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6838      	ldr	r0, [r7, #0]
 800ec50:	f00c fca3 	bl	801b59a <memcpy>
  return truncated;
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	372c      	adds	r7, #44	; 0x2c
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd90      	pop	{r4, r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	0801cee8 	.word	0x0801cee8
 800ec64:	0801d058 	.word	0x0801d058
 800ec68:	0801cf3c 	.word	0x0801cf3c
 800ec6c:	0801d06c 	.word	0x0801d06c
 800ec70:	0801d07c 	.word	0x0801d07c

0800ec74 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af02      	add	r7, sp, #8
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	607a      	str	r2, [r7, #4]
 800ec80:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <lwip_recv_tcp_from+0x18>
    return 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	e021      	b.n	800ecd0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d01d      	beq.n	800ecce <lwip_recv_tcp_from+0x5a>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d01a      	beq.n	800ecce <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	f107 0216 	add.w	r2, r7, #22
 800eca0:	f107 0110 	add.w	r1, r7, #16
 800eca4:	2300      	movs	r3, #0
 800eca6:	f7fd f8c3 	bl	800be30 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00e      	beq.n	800ecce <lwip_recv_tcp_from+0x5a>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00b      	beq.n	800ecce <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6818      	ldr	r0, [r3, #0]
 800ecba:	8afa      	ldrh	r2, [r7, #22]
 800ecbc:	f107 0110 	add.w	r1, r7, #16
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	f7ff ff67 	bl	800eb98 <lwip_sock_make_addr>
 800ecca:	4603      	mov	r3, r0
 800eccc:	e000      	b.n	800ecd0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800ecd8:	b590      	push	{r4, r7, lr}
 800ecda:	b08d      	sub	sp, #52	; 0x34
 800ecdc:	af02      	add	r7, sp, #8
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
 800ece4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d10d      	bne.n	800ed0a <lwip_recvfrom_udp_raw+0x32>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	dd09      	ble.n	800ed0a <lwip_recvfrom_udp_raw+0x32>
 800ecf6:	4b5e      	ldr	r3, [pc, #376]	; (800ee70 <lwip_recvfrom_udp_raw+0x198>)
 800ecf8:	f240 4249 	movw	r2, #1097	; 0x449
 800ecfc:	495d      	ldr	r1, [pc, #372]	; (800ee74 <lwip_recvfrom_udp_raw+0x19c>)
 800ecfe:	485e      	ldr	r0, [pc, #376]	; (800ee78 <lwip_recvfrom_udp_raw+0x1a0>)
 800ed00:	f00c fa2a 	bl	801b158 <iprintf>
 800ed04:	f06f 030f 	mvn.w	r3, #15
 800ed08:	e0ad      	b.n	800ee66 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f003 0308 	and.w	r3, r3, #8
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ed14:	2304      	movs	r3, #4
 800ed16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed1a:	e002      	b.n	800ed22 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d11e      	bne.n	800ed6c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ed36:	f107 0110 	add.w	r1, r7, #16
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fd fb90 	bl	800c460 <netconn_recv_udp_raw_netbuf_flags>
 800ed40:	4603      	mov	r3, r0
 800ed42:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ed44:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ed4c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed50:	e089      	b.n	800ee66 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d106      	bne.n	800ed66 <lwip_recvfrom_udp_raw+0x8e>
 800ed58:	4b45      	ldr	r3, [pc, #276]	; (800ee70 <lwip_recvfrom_udp_raw+0x198>)
 800ed5a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ed5e:	4947      	ldr	r1, [pc, #284]	; (800ee7c <lwip_recvfrom_udp_raw+0x1a4>)
 800ed60:	4845      	ldr	r0, [pc, #276]	; (800ee78 <lwip_recvfrom_udp_raw+0x1a0>)
 800ed62:	f00c f9f9 	bl	801b158 <iprintf>
    sock->lastdata.netbuf = buf;
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	891b      	ldrh	r3, [r3, #8]
 800ed72:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ed74:	2300      	movs	r3, #0
 800ed76:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ed78:	2300      	movs	r3, #0
 800ed7a:	61fb      	str	r3, [r7, #28]
 800ed7c:	e029      	b.n	800edd2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ed7e:	8b3a      	ldrh	r2, [r7, #24]
 800ed80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	689a      	ldr	r2, [r3, #8]
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	00db      	lsls	r3, r3, #3
 800ed8e:	4413      	add	r3, r2
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	8afb      	ldrh	r3, [r7, #22]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d902      	bls.n	800ed9e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ed98:	8afb      	ldrh	r3, [r7, #22]
 800ed9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ed9c:	e006      	b.n	800edac <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	689a      	ldr	r2, [r3, #8]
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	00db      	lsls	r3, r3, #3
 800eda6:	4413      	add	r3, r2
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	6818      	ldr	r0, [r3, #0]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	689a      	ldr	r2, [r3, #8]
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	00db      	lsls	r3, r3, #3
 800edb8:	4413      	add	r3, r2
 800edba:	6819      	ldr	r1, [r3, #0]
 800edbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800edc0:	f002 fc14 	bl	80115ec <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800edc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800edc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edc8:	4413      	add	r3, r2
 800edca:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	3301      	adds	r3, #1
 800edd0:	61fb      	str	r3, [r7, #28]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	69fa      	ldr	r2, [r7, #28]
 800edd8:	429a      	cmp	r2, r3
 800edda:	da03      	bge.n	800ede4 <lwip_recvfrom_udp_raw+0x10c>
 800eddc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800edde:	8b3b      	ldrh	r3, [r7, #24]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d3cc      	bcc.n	800ed7e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d01a      	beq.n	800ee22 <lwip_recvfrom_udp_raw+0x14a>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d016      	beq.n	800ee22 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d012      	beq.n	800ee22 <lwip_recvfrom_udp_raw+0x14a>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00e      	beq.n	800ee22 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6818      	ldr	r0, [r3, #0]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	f103 0108 	add.w	r1, r3, #8
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	3304      	adds	r3, #4
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4623      	mov	r3, r4
 800ee1e:	f7ff febb 	bl	800eb98 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d007      	beq.n	800ee40 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ee34:	7d7b      	ldrb	r3, [r7, #21]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f003 0301 	and.w	r3, r3, #1
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d106      	bne.n	800ee58 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff f9a6 	bl	800e1a4 <netbuf_delete>
  }
  if (datagram_len) {
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	8b3a      	ldrh	r2, [r7, #24]
 800ee62:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	372c      	adds	r7, #44	; 0x2c
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd90      	pop	{r4, r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	0801cee8 	.word	0x0801cee8
 800ee74:	0801d08c 	.word	0x0801d08c
 800ee78:	0801cf3c 	.word	0x0801cf3c
 800ee7c:	0801d0b8 	.word	0x0801d0b8

0800ee80 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b096      	sub	sp, #88	; 0x58
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f7ff fa58 	bl	800e344 <get_socket>
 800ee94:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800ee96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d102      	bne.n	800eea2 <lwip_recvfrom+0x22>
    return -1;
 800ee9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eea0:	e078      	b.n	800ef94 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800eea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eeac:	2b10      	cmp	r3, #16
 800eeae:	d112      	bne.n	800eed6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	68b9      	ldr	r1, [r7, #8]
 800eeb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eeb8:	f7ff fd5e 	bl	800e978 <lwip_recv_tcp>
 800eebc:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800eebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eec0:	9301      	str	r3, [sp, #4]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4b35      	ldr	r3, [pc, #212]	; (800ef9c <lwip_recvfrom+0x11c>)
 800eec8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eeca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eecc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eece:	f7ff fed1 	bl	800ec74 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800eed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eed4:	e05e      	b.n	800ef94 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800eeee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eef2:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800eef4:	2301      	movs	r3, #1
 800eef6:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800eef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eefa:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800eefc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d002      	beq.n	800ef08 <lwip_recvfrom+0x88>
 800ef02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	e000      	b.n	800ef0a <lwip_recvfrom+0x8a>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ef0c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800ef10:	f107 0214 	add.w	r2, r7, #20
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ef1e:	f7ff fedb 	bl	800ecd8 <lwip_recvfrom_udp_raw>
 800ef22:	4603      	mov	r3, r0
 800ef24:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800ef28:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00e      	beq.n	800ef4e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800ef30:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff f917 	bl	800e168 <err_to_errno>
 800ef3a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ef3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d002      	beq.n	800ef48 <lwip_recvfrom+0xc8>
 800ef42:	4a17      	ldr	r2, [pc, #92]	; (800efa0 <lwip_recvfrom+0x120>)
 800ef44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef46:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800ef48:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4c:	e022      	b.n	800ef94 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ef4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef50:	461a      	mov	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4293      	cmp	r3, r2
 800ef56:	bf28      	it	cs
 800ef58:	4613      	movcs	r3, r2
 800ef5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d206      	bcs.n	800ef70 <lwip_recvfrom+0xf0>
 800ef62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef64:	461a      	mov	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	bf28      	it	cs
 800ef6c:	4613      	movcs	r3, r2
 800ef6e:	e001      	b.n	800ef74 <lwip_recvfrom+0xf4>
 800ef70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef74:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800ef76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d002      	beq.n	800ef82 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ef7c:	69ba      	ldr	r2, [r7, #24]
 800ef7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef80:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ef82:	2300      	movs	r3, #0
 800ef84:	643b      	str	r3, [r7, #64]	; 0x40
 800ef86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d002      	beq.n	800ef92 <lwip_recvfrom+0x112>
 800ef8c:	4a04      	ldr	r2, [pc, #16]	; (800efa0 <lwip_recvfrom+0x120>)
 800ef8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef90:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800ef92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3750      	adds	r7, #80	; 0x50
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	0801d0c4 	.word	0x0801d0c4
 800efa0:	2003d378 	.word	0x2003d378

0800efa4 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800efb2:	2300      	movs	r3, #0
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	2300      	movs	r3, #0
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	68b9      	ldr	r1, [r7, #8]
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f7ff ff5d 	bl	800ee80 <lwip_recvfrom>
 800efc6:	4603      	mov	r3, r0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b08a      	sub	sp, #40	; 0x28
 800efd4:	af02      	add	r7, sp, #8
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
 800efdc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f7ff f9b0 	bl	800e344 <get_socket>
 800efe4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d102      	bne.n	800eff2 <lwip_send+0x22>
    return -1;
 800efec:	f04f 33ff 	mov.w	r3, #4294967295
 800eff0:	e046      	b.n	800f080 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800effc:	2b10      	cmp	r3, #16
 800effe:	d00b      	beq.n	800f018 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800f000:	2300      	movs	r3, #0
 800f002:	9301      	str	r3, [sp, #4]
 800f004:	2300      	movs	r3, #0
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	68b9      	ldr	r1, [r7, #8]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f000 f83c 	bl	800f08c <lwip_sendto>
 800f014:	4603      	mov	r3, r0
 800f016:	e033      	b.n	800f080 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <lwip_send+0x56>
 800f022:	2203      	movs	r2, #3
 800f024:	e000      	b.n	800f028 <lwip_send+0x58>
 800f026:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	105b      	asrs	r3, r3, #1
 800f02c:	b25b      	sxtb	r3, r3
 800f02e:	f003 0304 	and.w	r3, r3, #4
 800f032:	b25b      	sxtb	r3, r3
 800f034:	4313      	orrs	r3, r2
 800f036:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800f038:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	6818      	ldr	r0, [r3, #0]
 800f042:	7efa      	ldrb	r2, [r7, #27]
 800f044:	f107 0310 	add.w	r3, r7, #16
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	4613      	mov	r3, r2
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	68b9      	ldr	r1, [r7, #8]
 800f050:	f7fd fa60 	bl	800c514 <netconn_write_partly>
 800f054:	4603      	mov	r3, r0
 800f056:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800f058:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7ff f883 	bl	800e168 <err_to_errno>
 800f062:	6178      	str	r0, [r7, #20]
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <lwip_send+0xa0>
 800f06a:	4a07      	ldr	r2, [pc, #28]	; (800f088 <lwip_send+0xb8>)
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800f070:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d101      	bne.n	800f07c <lwip_send+0xac>
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	e001      	b.n	800f080 <lwip_send+0xb0>
 800f07c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f080:	4618      	mov	r0, r3
 800f082:	3720      	adds	r7, #32
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	2003d378 	.word	0x2003d378

0800f08c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08e      	sub	sp, #56	; 0x38
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
 800f098:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f7ff f952 	bl	800e344 <get_socket>
 800f0a0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d102      	bne.n	800f0ae <lwip_sendto+0x22>
    return -1;
 800f0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ac:	e093      	b.n	800f1d6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800f0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0b8:	2b10      	cmp	r3, #16
 800f0ba:	d107      	bne.n	800f0cc <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	68b9      	ldr	r1, [r7, #8]
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff ff84 	bl	800efd0 <lwip_send>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	e084      	b.n	800f1d6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0d2:	d30a      	bcc.n	800f0ea <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800f0d4:	235a      	movs	r3, #90	; 0x5a
 800f0d6:	623b      	str	r3, [r7, #32]
 800f0d8:	6a3b      	ldr	r3, [r7, #32]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <lwip_sendto+0x58>
 800f0de:	4a40      	ldr	r2, [pc, #256]	; (800f1e0 <lwip_sendto+0x154>)
 800f0e0:	6a3b      	ldr	r3, [r7, #32]
 800f0e2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800f0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e8:	e075      	b.n	800f1d6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800f0ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <lwip_sendto+0x6e>
 800f0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d023      	beq.n	800f142 <lwip_sendto+0xb6>
 800f0fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0fc:	2b10      	cmp	r3, #16
 800f0fe:	d10b      	bne.n	800f118 <lwip_sendto+0x8c>
 800f100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f102:	2b00      	cmp	r3, #0
 800f104:	d008      	beq.n	800f118 <lwip_sendto+0x8c>
 800f106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f108:	785b      	ldrb	r3, [r3, #1]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d104      	bne.n	800f118 <lwip_sendto+0x8c>
 800f10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f110:	f003 0303 	and.w	r3, r3, #3
 800f114:	2b00      	cmp	r3, #0
 800f116:	d014      	beq.n	800f142 <lwip_sendto+0xb6>
 800f118:	4b32      	ldr	r3, [pc, #200]	; (800f1e4 <lwip_sendto+0x158>)
 800f11a:	f240 6252 	movw	r2, #1618	; 0x652
 800f11e:	4932      	ldr	r1, [pc, #200]	; (800f1e8 <lwip_sendto+0x15c>)
 800f120:	4832      	ldr	r0, [pc, #200]	; (800f1ec <lwip_sendto+0x160>)
 800f122:	f00c f819 	bl	801b158 <iprintf>
 800f126:	f06f 000f 	mvn.w	r0, #15
 800f12a:	f7ff f81d 	bl	800e168 <err_to_errno>
 800f12e:	62b8      	str	r0, [r7, #40]	; 0x28
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <lwip_sendto+0xb0>
 800f136:	4a2a      	ldr	r2, [pc, #168]	; (800f1e0 <lwip_sendto+0x154>)
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	6013      	str	r3, [r2, #0]
 800f13c:	f04f 33ff 	mov.w	r3, #4294967295
 800f140:	e049      	b.n	800f1d6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800f142:	2300      	movs	r3, #0
 800f144:	617b      	str	r3, [r7, #20]
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800f14a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00a      	beq.n	800f166 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800f150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	61bb      	str	r3, [r7, #24]
 800f156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f158:	885b      	ldrh	r3, [r3, #2]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 fc1c 	bl	800f998 <lwip_htons>
 800f160:	4603      	mov	r3, r0
 800f162:	86bb      	strh	r3, [r7, #52]	; 0x34
 800f164:	e003      	b.n	800f16e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800f16a:	2300      	movs	r3, #0
 800f16c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800f16e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f170:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800f172:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f174:	f107 0310 	add.w	r3, r7, #16
 800f178:	68b9      	ldr	r1, [r7, #8]
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7ff f85a 	bl	800e234 <netbuf_ref>
 800f180:	4603      	mov	r3, r0
 800f182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800f186:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10a      	bne.n	800f1a4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800f18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f107 0210 	add.w	r2, r7, #16
 800f196:	4611      	mov	r1, r2
 800f198:	4618      	mov	r0, r3
 800f19a:	f7fd f98d 	bl	800c4b8 <netconn_send>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800f1a4:	f107 0310 	add.w	r3, r7, #16
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff f81b 	bl	800e1e4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800f1ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fe ffd8 	bl	800e168 <err_to_errno>
 800f1b8:	6278      	str	r0, [r7, #36]	; 0x24
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <lwip_sendto+0x13a>
 800f1c0:	4a07      	ldr	r2, [pc, #28]	; (800f1e0 <lwip_sendto+0x154>)
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800f1c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d101      	bne.n	800f1d2 <lwip_sendto+0x146>
 800f1ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f1d0:	e001      	b.n	800f1d6 <lwip_sendto+0x14a>
 800f1d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3738      	adds	r7, #56	; 0x38
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	2003d378 	.word	0x2003d378
 800f1e4:	0801cee8 	.word	0x0801cee8
 800f1e8:	0801d1c8 	.word	0x0801d1c8
 800f1ec:	0801cf3c 	.word	0x0801cf3c

0800f1f0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b086      	sub	sp, #24
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	2b03      	cmp	r3, #3
 800f200:	d009      	beq.n	800f216 <lwip_socket+0x26>
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b03      	cmp	r3, #3
 800f206:	dc23      	bgt.n	800f250 <lwip_socket+0x60>
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d019      	beq.n	800f242 <lwip_socket+0x52>
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	2b02      	cmp	r3, #2
 800f212:	d009      	beq.n	800f228 <lwip_socket+0x38>
 800f214:	e01c      	b.n	800f250 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	4a22      	ldr	r2, [pc, #136]	; (800f2a4 <lwip_socket+0xb4>)
 800f21c:	4619      	mov	r1, r3
 800f21e:	2040      	movs	r0, #64	; 0x40
 800f220:	f7fc fd4a 	bl	800bcb8 <netconn_new_with_proto_and_callback>
 800f224:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f226:	e019      	b.n	800f25c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b88      	cmp	r3, #136	; 0x88
 800f22c:	d101      	bne.n	800f232 <lwip_socket+0x42>
 800f22e:	2321      	movs	r3, #33	; 0x21
 800f230:	e000      	b.n	800f234 <lwip_socket+0x44>
 800f232:	2320      	movs	r3, #32
 800f234:	4a1b      	ldr	r2, [pc, #108]	; (800f2a4 <lwip_socket+0xb4>)
 800f236:	2100      	movs	r1, #0
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fc fd3d 	bl	800bcb8 <netconn_new_with_proto_and_callback>
 800f23e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f240:	e00c      	b.n	800f25c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f242:	4a18      	ldr	r2, [pc, #96]	; (800f2a4 <lwip_socket+0xb4>)
 800f244:	2100      	movs	r1, #0
 800f246:	2010      	movs	r0, #16
 800f248:	f7fc fd36 	bl	800bcb8 <netconn_new_with_proto_and_callback>
 800f24c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f24e:	e005      	b.n	800f25c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f250:	4b15      	ldr	r3, [pc, #84]	; (800f2a8 <lwip_socket+0xb8>)
 800f252:	2216      	movs	r2, #22
 800f254:	601a      	str	r2, [r3, #0]
      return -1;
 800f256:	f04f 33ff 	mov.w	r3, #4294967295
 800f25a:	e01e      	b.n	800f29a <lwip_socket+0xaa>
  }

  if (!conn) {
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d105      	bne.n	800f26e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f262:	4b11      	ldr	r3, [pc, #68]	; (800f2a8 <lwip_socket+0xb8>)
 800f264:	2269      	movs	r2, #105	; 0x69
 800f266:	601a      	str	r2, [r3, #0]
    return -1;
 800f268:	f04f 33ff 	mov.w	r3, #4294967295
 800f26c:	e015      	b.n	800f29a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f26e:	2100      	movs	r1, #0
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	f7ff f87f 	bl	800e374 <alloc_socket>
 800f276:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27e:	d108      	bne.n	800f292 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f280:	6978      	ldr	r0, [r7, #20]
 800f282:	f7fc fdb9 	bl	800bdf8 <netconn_delete>
    set_errno(ENFILE);
 800f286:	4b08      	ldr	r3, [pc, #32]	; (800f2a8 <lwip_socket+0xb8>)
 800f288:	2217      	movs	r2, #23
 800f28a:	601a      	str	r2, [r3, #0]
    return -1;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	e003      	b.n	800f29a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	693a      	ldr	r2, [r7, #16]
 800f296:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f298:	693b      	ldr	r3, [r7, #16]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	0800f335 	.word	0x0800f335
 800f2a8:	2003d378 	.word	0x2003d378

0800f2ac <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b087      	sub	sp, #28
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
 800f2b8:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	617b      	str	r3, [r7, #20]
 800f2be:	e02c      	b.n	800f31a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	695a      	ldr	r2, [r3, #20]
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	00db      	lsls	r3, r3, #3
 800f2c8:	4413      	add	r3, r2
 800f2ca:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d11e      	bne.n	800f314 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d009      	beq.n	800f2f0 <lwip_poll_should_wake+0x44>
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	f003 0301 	and.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d001      	beq.n	800f2f0 <lwip_poll_should_wake+0x44>
        return 1;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e01a      	b.n	800f326 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d009      	beq.n	800f30a <lwip_poll_should_wake+0x5e>
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <lwip_poll_should_wake+0x5e>
        return 1;
 800f306:	2301      	movs	r3, #1
 800f308:	e00d      	b.n	800f326 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d001      	beq.n	800f314 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800f310:	2301      	movs	r3, #1
 800f312:	e008      	b.n	800f326 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	3301      	adds	r3, #1
 800f318:	617b      	str	r3, [r7, #20]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	699b      	ldr	r3, [r3, #24]
 800f31e:	697a      	ldr	r2, [r7, #20]
 800f320:	429a      	cmp	r2, r3
 800f322:	d3cd      	bcc.n	800f2c0 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800f324:	2300      	movs	r3, #0
}
 800f326:	4618      	mov	r0, r3
 800f328:	371c      	adds	r7, #28
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
	...

0800f334 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b08a      	sub	sp, #40	; 0x28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	460b      	mov	r3, r1
 800f33e:	70fb      	strb	r3, [r7, #3]
 800f340:	4613      	mov	r3, r2
 800f342:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	f000 80a4 	beq.w	800f494 <event_callback+0x160>
    s = conn->socket;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	699b      	ldr	r3, [r3, #24]
 800f350:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	2b00      	cmp	r3, #0
 800f356:	da18      	bge.n	800f38a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800f358:	f00b fde0 	bl	801af1c <sys_arch_protect>
 800f35c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	699b      	ldr	r3, [r3, #24]
 800f362:	2b00      	cmp	r3, #0
 800f364:	da0b      	bge.n	800f37e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800f366:	78fb      	ldrb	r3, [r7, #3]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d104      	bne.n	800f376 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	699b      	ldr	r3, [r3, #24]
 800f370:	1e5a      	subs	r2, r3, #1
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800f376:	69f8      	ldr	r0, [r7, #28]
 800f378:	f00b fdde 	bl	801af38 <sys_arch_unprotect>
        return;
 800f37c:	e08d      	b.n	800f49a <event_callback+0x166>
      }
      s = conn->socket;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	699b      	ldr	r3, [r3, #24]
 800f382:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800f384:	69f8      	ldr	r0, [r7, #28]
 800f386:	f00b fdd7 	bl	801af38 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800f38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38c:	f7fe ffda 	bl	800e344 <get_socket>
 800f390:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d07f      	beq.n	800f498 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800f398:	2301      	movs	r3, #1
 800f39a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800f39c:	f00b fdbe 	bl	801af1c <sys_arch_protect>
 800f3a0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800f3a2:	78fb      	ldrb	r3, [r7, #3]
 800f3a4:	2b04      	cmp	r3, #4
 800f3a6:	d83e      	bhi.n	800f426 <event_callback+0xf2>
 800f3a8:	a201      	add	r2, pc, #4	; (adr r2, 800f3b0 <event_callback+0x7c>)
 800f3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ae:	bf00      	nop
 800f3b0:	0800f3c5 	.word	0x0800f3c5
 800f3b4:	0800f3e7 	.word	0x0800f3e7
 800f3b8:	0800f3ff 	.word	0x0800f3ff
 800f3bc:	0800f413 	.word	0x0800f413
 800f3c0:	0800f41f 	.word	0x0800f41f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	b21a      	sxth	r2, r3
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	dd2a      	ble.n	800f436 <event_callback+0x102>
        check_waiters = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	623b      	str	r3, [r7, #32]
      }
      break;
 800f3e4:	e027      	b.n	800f436 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	b21a      	sxth	r2, r3
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	623b      	str	r3, [r7, #32]
      break;
 800f3fc:	e01c      	b.n	800f438 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	895b      	ldrh	r3, [r3, #10]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <event_callback+0xd6>
        check_waiters = 0;
 800f406:	2300      	movs	r3, #0
 800f408:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	2201      	movs	r2, #1
 800f40e:	815a      	strh	r2, [r3, #10]
      break;
 800f410:	e012      	b.n	800f438 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	2200      	movs	r2, #0
 800f416:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	623b      	str	r3, [r7, #32]
      break;
 800f41c:	e00c      	b.n	800f438 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	2201      	movs	r2, #1
 800f422:	819a      	strh	r2, [r3, #12]
      break;
 800f424:	e008      	b.n	800f438 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800f426:	4b1e      	ldr	r3, [pc, #120]	; (800f4a0 <event_callback+0x16c>)
 800f428:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800f42c:	491d      	ldr	r1, [pc, #116]	; (800f4a4 <event_callback+0x170>)
 800f42e:	481e      	ldr	r0, [pc, #120]	; (800f4a8 <event_callback+0x174>)
 800f430:	f00b fe92 	bl	801b158 <iprintf>
      break;
 800f434:	e000      	b.n	800f438 <event_callback+0x104>
      break;
 800f436:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	7b9b      	ldrb	r3, [r3, #14]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d025      	beq.n	800f48c <event_callback+0x158>
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d022      	beq.n	800f48c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	bfcc      	ite	gt
 800f450:	2301      	movgt	r3, #1
 800f452:	2300      	movle	r3, #0
 800f454:	b2db      	uxtb	r3, r3
 800f456:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	895b      	ldrh	r3, [r3, #10]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	bf14      	ite	ne
 800f460:	2301      	movne	r3, #1
 800f462:	2300      	moveq	r3, #0
 800f464:	b2db      	uxtb	r3, r3
 800f466:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	899b      	ldrh	r3, [r3, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	bf14      	ite	ne
 800f470:	2301      	movne	r3, #1
 800f472:	2300      	moveq	r3, #0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800f478:	69f8      	ldr	r0, [r7, #28]
 800f47a:	f00b fd5d 	bl	801af38 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	693a      	ldr	r2, [r7, #16]
 800f482:	6979      	ldr	r1, [r7, #20]
 800f484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f486:	f000 f811 	bl	800f4ac <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800f48a:	e006      	b.n	800f49a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800f48c:	69f8      	ldr	r0, [r7, #28]
 800f48e:	f00b fd53 	bl	801af38 <sys_arch_unprotect>
 800f492:	e002      	b.n	800f49a <event_callback+0x166>
    return;
 800f494:	bf00      	nop
 800f496:	e000      	b.n	800f49a <event_callback+0x166>
      return;
 800f498:	bf00      	nop
  }
  done_socket(sock);
}
 800f49a:	3728      	adds	r7, #40	; 0x28
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	0801cee8 	.word	0x0801cee8
 800f4a4:	0801d264 	.word	0x0801d264
 800f4a8:	0801cf3c 	.word	0x0801cf3c

0800f4ac <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b088      	sub	sp, #32
 800f4b0:	af02      	add	r7, sp, #8
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	60b9      	str	r1, [r7, #8]
 800f4b6:	607a      	str	r2, [r7, #4]
 800f4b8:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f4ba:	4b42      	ldr	r3, [pc, #264]	; (800f5c4 <select_check_waiters+0x118>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	617b      	str	r3, [r7, #20]
 800f4c0:	e078      	b.n	800f5b4 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	69db      	ldr	r3, [r3, #28]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d171      	bne.n	800f5ae <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d009      	beq.n	800f4ea <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	68f9      	ldr	r1, [r7, #12]
 800f4e0:	6978      	ldr	r0, [r7, #20]
 800f4e2:	f7ff fee3 	bl	800f2ac <lwip_poll_should_wake>
 800f4e6:	6138      	str	r0, [r7, #16]
 800f4e8:	e056      	b.n	800f598 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d017      	beq.n	800f520 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d013      	beq.n	800f520 <select_check_waiters+0x74>
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	689a      	ldr	r2, [r3, #8]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	da00      	bge.n	800f504 <select_check_waiters+0x58>
 800f502:	331f      	adds	r3, #31
 800f504:	115b      	asrs	r3, r3, #5
 800f506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f003 031f 	and.w	r3, r3, #31
 800f510:	fa22 f303 	lsr.w	r3, r2, r3
 800f514:	f003 0301 	and.w	r3, r3, #1
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <select_check_waiters+0x74>
            do_signal = 1;
 800f51c:	2301      	movs	r3, #1
 800f51e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01a      	beq.n	800f55c <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d117      	bne.n	800f55c <select_check_waiters+0xb0>
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d013      	beq.n	800f55c <select_check_waiters+0xb0>
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	68da      	ldr	r2, [r3, #12]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	da00      	bge.n	800f540 <select_check_waiters+0x94>
 800f53e:	331f      	adds	r3, #31
 800f540:	115b      	asrs	r3, r3, #5
 800f542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f003 031f 	and.w	r3, r3, #31
 800f54c:	fa22 f303 	lsr.w	r3, r2, r3
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <select_check_waiters+0xb0>
            do_signal = 1;
 800f558:	2301      	movs	r3, #1
 800f55a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d01a      	beq.n	800f598 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d117      	bne.n	800f598 <select_check_waiters+0xec>
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d013      	beq.n	800f598 <select_check_waiters+0xec>
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	691a      	ldr	r2, [r3, #16]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b00      	cmp	r3, #0
 800f578:	da00      	bge.n	800f57c <select_check_waiters+0xd0>
 800f57a:	331f      	adds	r3, #31
 800f57c:	115b      	asrs	r3, r3, #5
 800f57e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f003 031f 	and.w	r3, r3, #31
 800f588:	fa22 f303 	lsr.w	r3, r2, r3
 800f58c:	f003 0301 	and.w	r3, r3, #1
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <select_check_waiters+0xec>
            do_signal = 1;
 800f594:	2301      	movs	r3, #1
 800f596:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d007      	beq.n	800f5ae <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	3320      	adds	r3, #32
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f00b fc13 	bl	801add4 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d183      	bne.n	800f4c2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800f5ba:	bf00      	nop
 800f5bc:	bf00      	nop
 800f5be:	3718      	adds	r7, #24
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20039974 	.word	0x20039974

0800f5c8 <lwip_inet_ntop>:
}
#endif

const char *
lwip_inet_ntop(int af, const void *src, char *dst, socklen_t size)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
  const char *ret = NULL;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	617b      	str	r3, [r7, #20]
  int size_int = (int)size;
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	613b      	str	r3, [r7, #16]
  if (size_int < 0) {
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	da04      	bge.n	800f5ee <lwip_inet_ntop+0x26>
    set_errno(ENOSPC);
 800f5e4:	4b0f      	ldr	r3, [pc, #60]	; (800f624 <lwip_inet_ntop+0x5c>)
 800f5e6:	221c      	movs	r2, #28
 800f5e8:	601a      	str	r2, [r3, #0]
    return NULL;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	e015      	b.n	800f61a <lwip_inet_ntop+0x52>
  }
  switch (af) {
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b02      	cmp	r3, #2
 800f5f2:	d10c      	bne.n	800f60e <lwip_inet_ntop+0x46>
#if LWIP_IPV4
    case AF_INET:
      ret = ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
 800f5f4:	693a      	ldr	r2, [r7, #16]
 800f5f6:	6879      	ldr	r1, [r7, #4]
 800f5f8:	68b8      	ldr	r0, [r7, #8]
 800f5fa:	f00a fb37 	bl	8019c6c <ip4addr_ntoa_r>
 800f5fe:	6178      	str	r0, [r7, #20]
      if (ret == NULL) {
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d107      	bne.n	800f616 <lwip_inet_ntop+0x4e>
        set_errno(ENOSPC);
 800f606:	4b07      	ldr	r3, [pc, #28]	; (800f624 <lwip_inet_ntop+0x5c>)
 800f608:	221c      	movs	r2, #28
 800f60a:	601a      	str	r2, [r3, #0]
      }
      break;
 800f60c:	e003      	b.n	800f616 <lwip_inet_ntop+0x4e>
        set_errno(ENOSPC);
      }
      break;
#endif
    default:
      set_errno(EAFNOSUPPORT);
 800f60e:	4b05      	ldr	r3, [pc, #20]	; (800f624 <lwip_inet_ntop+0x5c>)
 800f610:	2261      	movs	r2, #97	; 0x61
 800f612:	601a      	str	r2, [r3, #0]
      break;
 800f614:	e000      	b.n	800f618 <lwip_inet_ntop+0x50>
      break;
 800f616:	bf00      	nop
  }
  return ret;
 800f618:	697b      	ldr	r3, [r7, #20]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3718      	adds	r7, #24
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	2003d378 	.word	0x2003d378

0800f628 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f632:	f008 fa47 	bl	8017ac4 <sys_timeouts_sleeptime>
 800f636:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f63e:	d10b      	bne.n	800f658 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f640:	4813      	ldr	r0, [pc, #76]	; (800f690 <tcpip_timeouts_mbox_fetch+0x68>)
 800f642:	f00b fc38 	bl	801aeb6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f646:	2200      	movs	r2, #0
 800f648:	6839      	ldr	r1, [r7, #0]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f00b faf0 	bl	801ac30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f650:	480f      	ldr	r0, [pc, #60]	; (800f690 <tcpip_timeouts_mbox_fetch+0x68>)
 800f652:	f00b fc21 	bl	801ae98 <sys_mutex_lock>
    return;
 800f656:	e018      	b.n	800f68a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d102      	bne.n	800f664 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f65e:	f008 f9f7 	bl	8017a50 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f662:	e7e6      	b.n	800f632 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f664:	480a      	ldr	r0, [pc, #40]	; (800f690 <tcpip_timeouts_mbox_fetch+0x68>)
 800f666:	f00b fc26 	bl	801aeb6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	6839      	ldr	r1, [r7, #0]
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f00b fade 	bl	801ac30 <sys_arch_mbox_fetch>
 800f674:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f676:	4806      	ldr	r0, [pc, #24]	; (800f690 <tcpip_timeouts_mbox_fetch+0x68>)
 800f678:	f00b fc0e 	bl	801ae98 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f682:	d102      	bne.n	800f68a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f684:	f008 f9e4 	bl	8017a50 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f688:	e7d3      	b.n	800f632 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	20039984 	.word	0x20039984

0800f694 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f69c:	4810      	ldr	r0, [pc, #64]	; (800f6e0 <tcpip_thread+0x4c>)
 800f69e:	f00b fbfb 	bl	801ae98 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f6a2:	4b10      	ldr	r3, [pc, #64]	; (800f6e4 <tcpip_thread+0x50>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d005      	beq.n	800f6b6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f6aa:	4b0e      	ldr	r3, [pc, #56]	; (800f6e4 <tcpip_thread+0x50>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a0e      	ldr	r2, [pc, #56]	; (800f6e8 <tcpip_thread+0x54>)
 800f6b0:	6812      	ldr	r2, [r2, #0]
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f6b6:	f107 030c 	add.w	r3, r7, #12
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	480b      	ldr	r0, [pc, #44]	; (800f6ec <tcpip_thread+0x58>)
 800f6be:	f7ff ffb3 	bl	800f628 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d106      	bne.n	800f6d6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f6c8:	4b09      	ldr	r3, [pc, #36]	; (800f6f0 <tcpip_thread+0x5c>)
 800f6ca:	2291      	movs	r2, #145	; 0x91
 800f6cc:	4909      	ldr	r1, [pc, #36]	; (800f6f4 <tcpip_thread+0x60>)
 800f6ce:	480a      	ldr	r0, [pc, #40]	; (800f6f8 <tcpip_thread+0x64>)
 800f6d0:	f00b fd42 	bl	801b158 <iprintf>
      continue;
 800f6d4:	e003      	b.n	800f6de <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 f80f 	bl	800f6fc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f6de:	e7ea      	b.n	800f6b6 <tcpip_thread+0x22>
 800f6e0:	20039984 	.word	0x20039984
 800f6e4:	20039978 	.word	0x20039978
 800f6e8:	2003997c 	.word	0x2003997c
 800f6ec:	20039980 	.word	0x20039980
 800f6f0:	0801d2b8 	.word	0x0801d2b8
 800f6f4:	0801d2e8 	.word	0x0801d2e8
 800f6f8:	0801d308 	.word	0x0801d308

0800f6fc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d026      	beq.n	800f75a <tcpip_thread_handle_msg+0x5e>
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	dc2b      	bgt.n	800f768 <tcpip_thread_handle_msg+0x6c>
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <tcpip_thread_handle_msg+0x1e>
 800f714:	2b01      	cmp	r3, #1
 800f716:	d015      	beq.n	800f744 <tcpip_thread_handle_msg+0x48>
 800f718:	e026      	b.n	800f768 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	6850      	ldr	r0, [r2, #4]
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	6892      	ldr	r2, [r2, #8]
 800f726:	4611      	mov	r1, r2
 800f728:	4798      	blx	r3
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d004      	beq.n	800f73a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	4618      	mov	r0, r3
 800f736:	f001 fd53 	bl	80111e0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f73a:	6879      	ldr	r1, [r7, #4]
 800f73c:	2009      	movs	r0, #9
 800f73e:	f000 fe79 	bl	8010434 <memp_free>
      break;
 800f742:	e018      	b.n	800f776 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	687a      	ldr	r2, [r7, #4]
 800f74a:	6892      	ldr	r2, [r2, #8]
 800f74c:	4610      	mov	r0, r2
 800f74e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f750:	6879      	ldr	r1, [r7, #4]
 800f752:	2008      	movs	r0, #8
 800f754:	f000 fe6e 	bl	8010434 <memp_free>
      break;
 800f758:	e00d      	b.n	800f776 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	685b      	ldr	r3, [r3, #4]
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	6892      	ldr	r2, [r2, #8]
 800f762:	4610      	mov	r0, r2
 800f764:	4798      	blx	r3
      break;
 800f766:	e006      	b.n	800f776 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f768:	4b05      	ldr	r3, [pc, #20]	; (800f780 <tcpip_thread_handle_msg+0x84>)
 800f76a:	22cf      	movs	r2, #207	; 0xcf
 800f76c:	4905      	ldr	r1, [pc, #20]	; (800f784 <tcpip_thread_handle_msg+0x88>)
 800f76e:	4806      	ldr	r0, [pc, #24]	; (800f788 <tcpip_thread_handle_msg+0x8c>)
 800f770:	f00b fcf2 	bl	801b158 <iprintf>
      break;
 800f774:	bf00      	nop
  }
}
 800f776:	bf00      	nop
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	0801d2b8 	.word	0x0801d2b8
 800f784:	0801d2e8 	.word	0x0801d2e8
 800f788:	0801d308 	.word	0x0801d308

0800f78c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f798:	481a      	ldr	r0, [pc, #104]	; (800f804 <tcpip_inpkt+0x78>)
 800f79a:	f00b faa4 	bl	801ace6 <sys_mbox_valid>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d105      	bne.n	800f7b0 <tcpip_inpkt+0x24>
 800f7a4:	4b18      	ldr	r3, [pc, #96]	; (800f808 <tcpip_inpkt+0x7c>)
 800f7a6:	22fc      	movs	r2, #252	; 0xfc
 800f7a8:	4918      	ldr	r1, [pc, #96]	; (800f80c <tcpip_inpkt+0x80>)
 800f7aa:	4819      	ldr	r0, [pc, #100]	; (800f810 <tcpip_inpkt+0x84>)
 800f7ac:	f00b fcd4 	bl	801b158 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f7b0:	2009      	movs	r0, #9
 800f7b2:	f000 fdc9 	bl	8010348 <memp_malloc>
 800f7b6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d102      	bne.n	800f7c4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f7be:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c2:	e01a      	b.n	800f7fa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f7dc:	6979      	ldr	r1, [r7, #20]
 800f7de:	4809      	ldr	r0, [pc, #36]	; (800f804 <tcpip_inpkt+0x78>)
 800f7e0:	f00b fa0c 	bl	801abfc <sys_mbox_trypost>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d006      	beq.n	800f7f8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f7ea:	6979      	ldr	r1, [r7, #20]
 800f7ec:	2009      	movs	r0, #9
 800f7ee:	f000 fe21 	bl	8010434 <memp_free>
    return ERR_MEM;
 800f7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f6:	e000      	b.n	800f7fa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f7f8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3718      	adds	r7, #24
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20039980 	.word	0x20039980
 800f808:	0801d2b8 	.word	0x0801d2b8
 800f80c:	0801d330 	.word	0x0801d330
 800f810:	0801d308 	.word	0x0801d308

0800f814 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f824:	f003 0318 	and.w	r3, r3, #24
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d006      	beq.n	800f83a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f82c:	4a08      	ldr	r2, [pc, #32]	; (800f850 <tcpip_input+0x3c>)
 800f82e:	6839      	ldr	r1, [r7, #0]
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7ff ffab 	bl	800f78c <tcpip_inpkt>
 800f836:	4603      	mov	r3, r0
 800f838:	e005      	b.n	800f846 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f83a:	4a06      	ldr	r2, [pc, #24]	; (800f854 <tcpip_input+0x40>)
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff ffa4 	bl	800f78c <tcpip_inpkt>
 800f844:	4603      	mov	r3, r0
}
 800f846:	4618      	mov	r0, r3
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	0801a9e9 	.word	0x0801a9e9
 800f854:	080197f1 	.word	0x080197f1

0800f858 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f862:	4819      	ldr	r0, [pc, #100]	; (800f8c8 <tcpip_try_callback+0x70>)
 800f864:	f00b fa3f 	bl	801ace6 <sys_mbox_valid>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <tcpip_try_callback+0x24>
 800f86e:	4b17      	ldr	r3, [pc, #92]	; (800f8cc <tcpip_try_callback+0x74>)
 800f870:	f240 125d 	movw	r2, #349	; 0x15d
 800f874:	4916      	ldr	r1, [pc, #88]	; (800f8d0 <tcpip_try_callback+0x78>)
 800f876:	4817      	ldr	r0, [pc, #92]	; (800f8d4 <tcpip_try_callback+0x7c>)
 800f878:	f00b fc6e 	bl	801b158 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f87c:	2008      	movs	r0, #8
 800f87e:	f000 fd63 	bl	8010348 <memp_malloc>
 800f882:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f88a:	f04f 33ff 	mov.w	r3, #4294967295
 800f88e:	e017      	b.n	800f8c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2201      	movs	r2, #1
 800f894:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	683a      	ldr	r2, [r7, #0]
 800f8a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f8a2:	68f9      	ldr	r1, [r7, #12]
 800f8a4:	4808      	ldr	r0, [pc, #32]	; (800f8c8 <tcpip_try_callback+0x70>)
 800f8a6:	f00b f9a9 	bl	801abfc <sys_mbox_trypost>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d006      	beq.n	800f8be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f8b0:	68f9      	ldr	r1, [r7, #12]
 800f8b2:	2008      	movs	r0, #8
 800f8b4:	f000 fdbe 	bl	8010434 <memp_free>
    return ERR_MEM;
 800f8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8bc:	e000      	b.n	800f8c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	20039980 	.word	0x20039980
 800f8cc:	0801d2b8 	.word	0x0801d2b8
 800f8d0:	0801d330 	.word	0x0801d330
 800f8d4:	0801d308 	.word	0x0801d308

0800f8d8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f8e4:	4806      	ldr	r0, [pc, #24]	; (800f900 <tcpip_send_msg_wait_sem+0x28>)
 800f8e6:	f00b fad7 	bl	801ae98 <sys_mutex_lock>
  fn(apimsg);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	68b8      	ldr	r0, [r7, #8]
 800f8ee:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f8f0:	4803      	ldr	r0, [pc, #12]	; (800f900 <tcpip_send_msg_wait_sem+0x28>)
 800f8f2:	f00b fae0 	bl	801aeb6 <sys_mutex_unlock>
  return ERR_OK;
 800f8f6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3710      	adds	r7, #16
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	20039984 	.word	0x20039984

0800f904 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af02      	add	r7, sp, #8
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f90e:	f000 f871 	bl	800f9f4 <lwip_init>

  tcpip_init_done = initfunc;
 800f912:	4a17      	ldr	r2, [pc, #92]	; (800f970 <tcpip_init+0x6c>)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f918:	4a16      	ldr	r2, [pc, #88]	; (800f974 <tcpip_init+0x70>)
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f91e:	2106      	movs	r1, #6
 800f920:	4815      	ldr	r0, [pc, #84]	; (800f978 <tcpip_init+0x74>)
 800f922:	f00b f937 	bl	801ab94 <sys_mbox_new>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d006      	beq.n	800f93a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f92c:	4b13      	ldr	r3, [pc, #76]	; (800f97c <tcpip_init+0x78>)
 800f92e:	f240 2261 	movw	r2, #609	; 0x261
 800f932:	4913      	ldr	r1, [pc, #76]	; (800f980 <tcpip_init+0x7c>)
 800f934:	4813      	ldr	r0, [pc, #76]	; (800f984 <tcpip_init+0x80>)
 800f936:	f00b fc0f 	bl	801b158 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f93a:	4813      	ldr	r0, [pc, #76]	; (800f988 <tcpip_init+0x84>)
 800f93c:	f00b fa90 	bl	801ae60 <sys_mutex_new>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d006      	beq.n	800f954 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f946:	4b0d      	ldr	r3, [pc, #52]	; (800f97c <tcpip_init+0x78>)
 800f948:	f240 2265 	movw	r2, #613	; 0x265
 800f94c:	490f      	ldr	r1, [pc, #60]	; (800f98c <tcpip_init+0x88>)
 800f94e:	480d      	ldr	r0, [pc, #52]	; (800f984 <tcpip_init+0x80>)
 800f950:	f00b fc02 	bl	801b158 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f954:	2300      	movs	r3, #0
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f95c:	2200      	movs	r2, #0
 800f95e:	490c      	ldr	r1, [pc, #48]	; (800f990 <tcpip_init+0x8c>)
 800f960:	480c      	ldr	r0, [pc, #48]	; (800f994 <tcpip_init+0x90>)
 800f962:	f00b fab5 	bl	801aed0 <sys_thread_new>
}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20039978 	.word	0x20039978
 800f974:	2003997c 	.word	0x2003997c
 800f978:	20039980 	.word	0x20039980
 800f97c:	0801d2b8 	.word	0x0801d2b8
 800f980:	0801d340 	.word	0x0801d340
 800f984:	0801d308 	.word	0x0801d308
 800f988:	20039984 	.word	0x20039984
 800f98c:	0801d364 	.word	0x0801d364
 800f990:	0800f695 	.word	0x0800f695
 800f994:	0801d388 	.word	0x0801d388

0800f998 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f9a2:	88fb      	ldrh	r3, [r7, #6]
 800f9a4:	021b      	lsls	r3, r3, #8
 800f9a6:	b21a      	sxth	r2, r3
 800f9a8:	88fb      	ldrh	r3, [r7, #6]
 800f9aa:	0a1b      	lsrs	r3, r3, #8
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	b21b      	sxth	r3, r3
 800f9b0:	4313      	orrs	r3, r2
 800f9b2:	b21b      	sxth	r3, r3
 800f9b4:	b29b      	uxth	r3, r3
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	370c      	adds	r7, #12
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	061a      	lsls	r2, r3, #24
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	021b      	lsls	r3, r3, #8
 800f9d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f9d6:	431a      	orrs	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	0a1b      	lsrs	r3, r3, #8
 800f9dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f9e0:	431a      	orrs	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	0e1b      	lsrs	r3, r3, #24
 800f9e6:	4313      	orrs	r3, r2
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f9fe:	f00b fa21 	bl	801ae44 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fa02:	f000 f8d5 	bl	800fbb0 <mem_init>
  memp_init();
 800fa06:	f000 fc31 	bl	801026c <memp_init>
  pbuf_init();
  netif_init();
 800fa0a:	f000 fd3d 	bl	8010488 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa0e:	f008 f891 	bl	8017b34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa12:	f001 fe8f 	bl	8011734 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa16:	f007 ffd3 	bl	80179c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa1a:	bf00      	nop
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fa2e:	4b05      	ldr	r3, [pc, #20]	; (800fa44 <ptr_to_mem+0x20>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	88fb      	ldrh	r3, [r7, #6]
 800fa34:	4413      	add	r3, r2
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	370c      	adds	r7, #12
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	20039ff4 	.word	0x20039ff4

0800fa48 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fa50:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <mem_to_ptr+0x20>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	b29b      	uxth	r3, r3
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	20039ff4 	.word	0x20039ff4

0800fa6c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fa6c:	b590      	push	{r4, r7, lr}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fa74:	4b45      	ldr	r3, [pc, #276]	; (800fb8c <plug_holes+0x120>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d206      	bcs.n	800fa8c <plug_holes+0x20>
 800fa7e:	4b44      	ldr	r3, [pc, #272]	; (800fb90 <plug_holes+0x124>)
 800fa80:	f240 12df 	movw	r2, #479	; 0x1df
 800fa84:	4943      	ldr	r1, [pc, #268]	; (800fb94 <plug_holes+0x128>)
 800fa86:	4844      	ldr	r0, [pc, #272]	; (800fb98 <plug_holes+0x12c>)
 800fa88:	f00b fb66 	bl	801b158 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fa8c:	4b43      	ldr	r3, [pc, #268]	; (800fb9c <plug_holes+0x130>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d306      	bcc.n	800faa4 <plug_holes+0x38>
 800fa96:	4b3e      	ldr	r3, [pc, #248]	; (800fb90 <plug_holes+0x124>)
 800fa98:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fa9c:	4940      	ldr	r1, [pc, #256]	; (800fba0 <plug_holes+0x134>)
 800fa9e:	483e      	ldr	r0, [pc, #248]	; (800fb98 <plug_holes+0x12c>)
 800faa0:	f00b fb5a 	bl	801b158 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	791b      	ldrb	r3, [r3, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d006      	beq.n	800faba <plug_holes+0x4e>
 800faac:	4b38      	ldr	r3, [pc, #224]	; (800fb90 <plug_holes+0x124>)
 800faae:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fab2:	493c      	ldr	r1, [pc, #240]	; (800fba4 <plug_holes+0x138>)
 800fab4:	4838      	ldr	r0, [pc, #224]	; (800fb98 <plug_holes+0x12c>)
 800fab6:	f00b fb4f 	bl	801b158 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	881b      	ldrh	r3, [r3, #0]
 800fabe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fac2:	d906      	bls.n	800fad2 <plug_holes+0x66>
 800fac4:	4b32      	ldr	r3, [pc, #200]	; (800fb90 <plug_holes+0x124>)
 800fac6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800faca:	4937      	ldr	r1, [pc, #220]	; (800fba8 <plug_holes+0x13c>)
 800facc:	4832      	ldr	r0, [pc, #200]	; (800fb98 <plug_holes+0x12c>)
 800face:	f00b fb43 	bl	801b158 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7ff ffa4 	bl	800fa24 <ptr_to_mem>
 800fadc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d024      	beq.n	800fb30 <plug_holes+0xc4>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	791b      	ldrb	r3, [r3, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d120      	bne.n	800fb30 <plug_holes+0xc4>
 800faee:	4b2b      	ldr	r3, [pc, #172]	; (800fb9c <plug_holes+0x130>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d01b      	beq.n	800fb30 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800faf8:	4b2c      	ldr	r3, [pc, #176]	; (800fbac <plug_holes+0x140>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d102      	bne.n	800fb08 <plug_holes+0x9c>
      lfree = mem;
 800fb02:	4a2a      	ldr	r2, [pc, #168]	; (800fbac <plug_holes+0x140>)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	881a      	ldrh	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb18:	d00a      	beq.n	800fb30 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7ff ff80 	bl	800fa24 <ptr_to_mem>
 800fb24:	4604      	mov	r4, r0
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff ff8e 	bl	800fa48 <mem_to_ptr>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	885b      	ldrh	r3, [r3, #2]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f7ff ff75 	bl	800fa24 <ptr_to_mem>
 800fb3a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fb3c:	68ba      	ldr	r2, [r7, #8]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d01f      	beq.n	800fb84 <plug_holes+0x118>
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	791b      	ldrb	r3, [r3, #4]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d11b      	bne.n	800fb84 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fb4c:	4b17      	ldr	r3, [pc, #92]	; (800fbac <plug_holes+0x140>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d102      	bne.n	800fb5c <plug_holes+0xf0>
      lfree = pmem;
 800fb56:	4a15      	ldr	r2, [pc, #84]	; (800fbac <plug_holes+0x140>)
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	881a      	ldrh	r2, [r3, #0]
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fb6c:	d00a      	beq.n	800fb84 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff ff56 	bl	800fa24 <ptr_to_mem>
 800fb78:	4604      	mov	r4, r0
 800fb7a:	68b8      	ldr	r0, [r7, #8]
 800fb7c:	f7ff ff64 	bl	800fa48 <mem_to_ptr>
 800fb80:	4603      	mov	r3, r0
 800fb82:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fb84:	bf00      	nop
 800fb86:	3714      	adds	r7, #20
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd90      	pop	{r4, r7, pc}
 800fb8c:	20039ff4 	.word	0x20039ff4
 800fb90:	0801d398 	.word	0x0801d398
 800fb94:	0801d3c8 	.word	0x0801d3c8
 800fb98:	0801d3e0 	.word	0x0801d3e0
 800fb9c:	20039ff8 	.word	0x20039ff8
 800fba0:	0801d408 	.word	0x0801d408
 800fba4:	0801d424 	.word	0x0801d424
 800fba8:	0801d440 	.word	0x0801d440
 800fbac:	2003a000 	.word	0x2003a000

0800fbb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fbb6:	4b1f      	ldr	r3, [pc, #124]	; (800fc34 <mem_init+0x84>)
 800fbb8:	3303      	adds	r3, #3
 800fbba:	f023 0303 	bic.w	r3, r3, #3
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	4b1d      	ldr	r3, [pc, #116]	; (800fc38 <mem_init+0x88>)
 800fbc2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fbc4:	4b1c      	ldr	r3, [pc, #112]	; (800fc38 <mem_init+0x88>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fbd0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fbde:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800fbe2:	f7ff ff1f 	bl	800fa24 <ptr_to_mem>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	4a14      	ldr	r2, [pc, #80]	; (800fc3c <mem_init+0x8c>)
 800fbea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fbec:	4b13      	ldr	r3, [pc, #76]	; (800fc3c <mem_init+0x8c>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fbf4:	4b11      	ldr	r3, [pc, #68]	; (800fc3c <mem_init+0x8c>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fbfc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fbfe:	4b0f      	ldr	r3, [pc, #60]	; (800fc3c <mem_init+0x8c>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fc06:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc08:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <mem_init+0x88>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a0c      	ldr	r2, [pc, #48]	; (800fc40 <mem_init+0x90>)
 800fc0e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fc10:	480c      	ldr	r0, [pc, #48]	; (800fc44 <mem_init+0x94>)
 800fc12:	f00b f925 	bl	801ae60 <sys_mutex_new>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d006      	beq.n	800fc2a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fc1c:	4b0a      	ldr	r3, [pc, #40]	; (800fc48 <mem_init+0x98>)
 800fc1e:	f240 221f 	movw	r2, #543	; 0x21f
 800fc22:	490a      	ldr	r1, [pc, #40]	; (800fc4c <mem_init+0x9c>)
 800fc24:	480a      	ldr	r0, [pc, #40]	; (800fc50 <mem_init+0xa0>)
 800fc26:	f00b fa97 	bl	801b158 <iprintf>
  }
}
 800fc2a:	bf00      	nop
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	200399a0 	.word	0x200399a0
 800fc38:	20039ff4 	.word	0x20039ff4
 800fc3c:	20039ff8 	.word	0x20039ff8
 800fc40:	2003a000 	.word	0x2003a000
 800fc44:	20039ffc 	.word	0x20039ffc
 800fc48:	0801d398 	.word	0x0801d398
 800fc4c:	0801d46c 	.word	0x0801d46c
 800fc50:	0801d3e0 	.word	0x0801d3e0

0800fc54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f7ff fef3 	bl	800fa48 <mem_to_ptr>
 800fc62:	4603      	mov	r3, r0
 800fc64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff feda 	bl	800fa24 <ptr_to_mem>
 800fc70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	885b      	ldrh	r3, [r3, #2]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff fed4 	bl	800fa24 <ptr_to_mem>
 800fc7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc86:	d818      	bhi.n	800fcba <mem_link_valid+0x66>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	885b      	ldrh	r3, [r3, #2]
 800fc8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc90:	d813      	bhi.n	800fcba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fc96:	8afa      	ldrh	r2, [r7, #22]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d004      	beq.n	800fca6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	881b      	ldrh	r3, [r3, #0]
 800fca0:	8afa      	ldrh	r2, [r7, #22]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d109      	bne.n	800fcba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fca6:	4b08      	ldr	r3, [pc, #32]	; (800fcc8 <mem_link_valid+0x74>)
 800fca8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d006      	beq.n	800fcbe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	885b      	ldrh	r3, [r3, #2]
 800fcb4:	8afa      	ldrh	r2, [r7, #22]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d001      	beq.n	800fcbe <mem_link_valid+0x6a>
    return 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e000      	b.n	800fcc0 <mem_link_valid+0x6c>
  }
  return 1;
 800fcbe:	2301      	movs	r3, #1
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3718      	adds	r7, #24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	20039ff8 	.word	0x20039ff8

0800fccc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b088      	sub	sp, #32
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d070      	beq.n	800fdbc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f003 0303 	and.w	r3, r3, #3
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00d      	beq.n	800fd00 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fce4:	4b37      	ldr	r3, [pc, #220]	; (800fdc4 <mem_free+0xf8>)
 800fce6:	f240 2273 	movw	r2, #627	; 0x273
 800fcea:	4937      	ldr	r1, [pc, #220]	; (800fdc8 <mem_free+0xfc>)
 800fcec:	4837      	ldr	r0, [pc, #220]	; (800fdcc <mem_free+0x100>)
 800fcee:	f00b fa33 	bl	801b158 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fcf2:	f00b f913 	bl	801af1c <sys_arch_protect>
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f00b f91d 	bl	801af38 <sys_arch_unprotect>
    return;
 800fcfe:	e05e      	b.n	800fdbe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	3b08      	subs	r3, #8
 800fd04:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd06:	4b32      	ldr	r3, [pc, #200]	; (800fdd0 <mem_free+0x104>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	69fa      	ldr	r2, [r7, #28]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d306      	bcc.n	800fd1e <mem_free+0x52>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f103 020c 	add.w	r2, r3, #12
 800fd16:	4b2f      	ldr	r3, [pc, #188]	; (800fdd4 <mem_free+0x108>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d90d      	bls.n	800fd3a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd1e:	4b29      	ldr	r3, [pc, #164]	; (800fdc4 <mem_free+0xf8>)
 800fd20:	f240 227f 	movw	r2, #639	; 0x27f
 800fd24:	492c      	ldr	r1, [pc, #176]	; (800fdd8 <mem_free+0x10c>)
 800fd26:	4829      	ldr	r0, [pc, #164]	; (800fdcc <mem_free+0x100>)
 800fd28:	f00b fa16 	bl	801b158 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd2c:	f00b f8f6 	bl	801af1c <sys_arch_protect>
 800fd30:	6138      	str	r0, [r7, #16]
 800fd32:	6938      	ldr	r0, [r7, #16]
 800fd34:	f00b f900 	bl	801af38 <sys_arch_unprotect>
    return;
 800fd38:	e041      	b.n	800fdbe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fd3a:	4828      	ldr	r0, [pc, #160]	; (800fddc <mem_free+0x110>)
 800fd3c:	f00b f8ac 	bl	801ae98 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	791b      	ldrb	r3, [r3, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d110      	bne.n	800fd6a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fd48:	4b1e      	ldr	r3, [pc, #120]	; (800fdc4 <mem_free+0xf8>)
 800fd4a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fd4e:	4924      	ldr	r1, [pc, #144]	; (800fde0 <mem_free+0x114>)
 800fd50:	481e      	ldr	r0, [pc, #120]	; (800fdcc <mem_free+0x100>)
 800fd52:	f00b fa01 	bl	801b158 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fd56:	4821      	ldr	r0, [pc, #132]	; (800fddc <mem_free+0x110>)
 800fd58:	f00b f8ad 	bl	801aeb6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd5c:	f00b f8de 	bl	801af1c <sys_arch_protect>
 800fd60:	6178      	str	r0, [r7, #20]
 800fd62:	6978      	ldr	r0, [r7, #20]
 800fd64:	f00b f8e8 	bl	801af38 <sys_arch_unprotect>
    return;
 800fd68:	e029      	b.n	800fdbe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fd6a:	69f8      	ldr	r0, [r7, #28]
 800fd6c:	f7ff ff72 	bl	800fc54 <mem_link_valid>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d110      	bne.n	800fd98 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fd76:	4b13      	ldr	r3, [pc, #76]	; (800fdc4 <mem_free+0xf8>)
 800fd78:	f240 2295 	movw	r2, #661	; 0x295
 800fd7c:	4919      	ldr	r1, [pc, #100]	; (800fde4 <mem_free+0x118>)
 800fd7e:	4813      	ldr	r0, [pc, #76]	; (800fdcc <mem_free+0x100>)
 800fd80:	f00b f9ea 	bl	801b158 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fd84:	4815      	ldr	r0, [pc, #84]	; (800fddc <mem_free+0x110>)
 800fd86:	f00b f896 	bl	801aeb6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd8a:	f00b f8c7 	bl	801af1c <sys_arch_protect>
 800fd8e:	61b8      	str	r0, [r7, #24]
 800fd90:	69b8      	ldr	r0, [r7, #24]
 800fd92:	f00b f8d1 	bl	801af38 <sys_arch_unprotect>
    return;
 800fd96:	e012      	b.n	800fdbe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fd9e:	4b12      	ldr	r3, [pc, #72]	; (800fde8 <mem_free+0x11c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	69fa      	ldr	r2, [r7, #28]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d202      	bcs.n	800fdae <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fda8:	4a0f      	ldr	r2, [pc, #60]	; (800fde8 <mem_free+0x11c>)
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fdae:	69f8      	ldr	r0, [r7, #28]
 800fdb0:	f7ff fe5c 	bl	800fa6c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fdb4:	4809      	ldr	r0, [pc, #36]	; (800fddc <mem_free+0x110>)
 800fdb6:	f00b f87e 	bl	801aeb6 <sys_mutex_unlock>
 800fdba:	e000      	b.n	800fdbe <mem_free+0xf2>
    return;
 800fdbc:	bf00      	nop
}
 800fdbe:	3720      	adds	r7, #32
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	0801d398 	.word	0x0801d398
 800fdc8:	0801d488 	.word	0x0801d488
 800fdcc:	0801d3e0 	.word	0x0801d3e0
 800fdd0:	20039ff4 	.word	0x20039ff4
 800fdd4:	20039ff8 	.word	0x20039ff8
 800fdd8:	0801d4ac 	.word	0x0801d4ac
 800fddc:	20039ffc 	.word	0x20039ffc
 800fde0:	0801d4c8 	.word	0x0801d4c8
 800fde4:	0801d4f0 	.word	0x0801d4f0
 800fde8:	2003a000 	.word	0x2003a000

0800fdec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b088      	sub	sp, #32
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	460b      	mov	r3, r1
 800fdf6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fdf8:	887b      	ldrh	r3, [r7, #2]
 800fdfa:	3303      	adds	r3, #3
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	f023 0303 	bic.w	r3, r3, #3
 800fe02:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe04:	8bfb      	ldrh	r3, [r7, #30]
 800fe06:	2b0b      	cmp	r3, #11
 800fe08:	d801      	bhi.n	800fe0e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe0a:	230c      	movs	r3, #12
 800fe0c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe0e:	8bfb      	ldrh	r3, [r7, #30]
 800fe10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe14:	d803      	bhi.n	800fe1e <mem_trim+0x32>
 800fe16:	8bfa      	ldrh	r2, [r7, #30]
 800fe18:	887b      	ldrh	r3, [r7, #2]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d201      	bcs.n	800fe22 <mem_trim+0x36>
    return NULL;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	e0d8      	b.n	800ffd4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe22:	4b6e      	ldr	r3, [pc, #440]	; (800ffdc <mem_trim+0x1f0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d304      	bcc.n	800fe36 <mem_trim+0x4a>
 800fe2c:	4b6c      	ldr	r3, [pc, #432]	; (800ffe0 <mem_trim+0x1f4>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d306      	bcc.n	800fe44 <mem_trim+0x58>
 800fe36:	4b6b      	ldr	r3, [pc, #428]	; (800ffe4 <mem_trim+0x1f8>)
 800fe38:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fe3c:	496a      	ldr	r1, [pc, #424]	; (800ffe8 <mem_trim+0x1fc>)
 800fe3e:	486b      	ldr	r0, [pc, #428]	; (800ffec <mem_trim+0x200>)
 800fe40:	f00b f98a 	bl	801b158 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe44:	4b65      	ldr	r3, [pc, #404]	; (800ffdc <mem_trim+0x1f0>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d304      	bcc.n	800fe58 <mem_trim+0x6c>
 800fe4e:	4b64      	ldr	r3, [pc, #400]	; (800ffe0 <mem_trim+0x1f4>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d307      	bcc.n	800fe68 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fe58:	f00b f860 	bl	801af1c <sys_arch_protect>
 800fe5c:	60b8      	str	r0, [r7, #8]
 800fe5e:	68b8      	ldr	r0, [r7, #8]
 800fe60:	f00b f86a 	bl	801af38 <sys_arch_unprotect>
    return rmem;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	e0b5      	b.n	800ffd4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	3b08      	subs	r3, #8
 800fe6c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fe6e:	69b8      	ldr	r0, [r7, #24]
 800fe70:	f7ff fdea 	bl	800fa48 <mem_to_ptr>
 800fe74:	4603      	mov	r3, r0
 800fe76:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fe78:	69bb      	ldr	r3, [r7, #24]
 800fe7a:	881a      	ldrh	r2, [r3, #0]
 800fe7c:	8afb      	ldrh	r3, [r7, #22]
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	3b08      	subs	r3, #8
 800fe84:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fe86:	8bfa      	ldrh	r2, [r7, #30]
 800fe88:	8abb      	ldrh	r3, [r7, #20]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d906      	bls.n	800fe9c <mem_trim+0xb0>
 800fe8e:	4b55      	ldr	r3, [pc, #340]	; (800ffe4 <mem_trim+0x1f8>)
 800fe90:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fe94:	4956      	ldr	r1, [pc, #344]	; (800fff0 <mem_trim+0x204>)
 800fe96:	4855      	ldr	r0, [pc, #340]	; (800ffec <mem_trim+0x200>)
 800fe98:	f00b f95e 	bl	801b158 <iprintf>
  if (newsize > size) {
 800fe9c:	8bfa      	ldrh	r2, [r7, #30]
 800fe9e:	8abb      	ldrh	r3, [r7, #20]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d901      	bls.n	800fea8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800fea4:	2300      	movs	r3, #0
 800fea6:	e095      	b.n	800ffd4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800fea8:	8bfa      	ldrh	r2, [r7, #30]
 800feaa:	8abb      	ldrh	r3, [r7, #20]
 800feac:	429a      	cmp	r2, r3
 800feae:	d101      	bne.n	800feb4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	e08f      	b.n	800ffd4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800feb4:	484f      	ldr	r0, [pc, #316]	; (800fff4 <mem_trim+0x208>)
 800feb6:	f00a ffef 	bl	801ae98 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff fdb0 	bl	800fa24 <ptr_to_mem>
 800fec4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	791b      	ldrb	r3, [r3, #4]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d13f      	bne.n	800ff4e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fed6:	d106      	bne.n	800fee6 <mem_trim+0xfa>
 800fed8:	4b42      	ldr	r3, [pc, #264]	; (800ffe4 <mem_trim+0x1f8>)
 800feda:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fede:	4946      	ldr	r1, [pc, #280]	; (800fff8 <mem_trim+0x20c>)
 800fee0:	4842      	ldr	r0, [pc, #264]	; (800ffec <mem_trim+0x200>)
 800fee2:	f00b f939 	bl	801b158 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	881b      	ldrh	r3, [r3, #0]
 800feea:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800feec:	8afa      	ldrh	r2, [r7, #22]
 800feee:	8bfb      	ldrh	r3, [r7, #30]
 800fef0:	4413      	add	r3, r2
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	3308      	adds	r3, #8
 800fef6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fef8:	4b40      	ldr	r3, [pc, #256]	; (800fffc <mem_trim+0x210>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	693a      	ldr	r2, [r7, #16]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d106      	bne.n	800ff10 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ff02:	89fb      	ldrh	r3, [r7, #14]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff fd8d 	bl	800fa24 <ptr_to_mem>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	4a3b      	ldr	r2, [pc, #236]	; (800fffc <mem_trim+0x210>)
 800ff0e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ff10:	89fb      	ldrh	r3, [r7, #14]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7ff fd86 	bl	800fa24 <ptr_to_mem>
 800ff18:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	89ba      	ldrh	r2, [r7, #12]
 800ff24:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	8afa      	ldrh	r2, [r7, #22]
 800ff2a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	89fa      	ldrh	r2, [r7, #14]
 800ff30:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff3a:	d047      	beq.n	800ffcc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	881b      	ldrh	r3, [r3, #0]
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff fd6f 	bl	800fa24 <ptr_to_mem>
 800ff46:	4602      	mov	r2, r0
 800ff48:	89fb      	ldrh	r3, [r7, #14]
 800ff4a:	8053      	strh	r3, [r2, #2]
 800ff4c:	e03e      	b.n	800ffcc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ff4e:	8bfb      	ldrh	r3, [r7, #30]
 800ff50:	f103 0214 	add.w	r2, r3, #20
 800ff54:	8abb      	ldrh	r3, [r7, #20]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d838      	bhi.n	800ffcc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff5a:	8afa      	ldrh	r2, [r7, #22]
 800ff5c:	8bfb      	ldrh	r3, [r7, #30]
 800ff5e:	4413      	add	r3, r2
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	3308      	adds	r3, #8
 800ff64:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	881b      	ldrh	r3, [r3, #0]
 800ff6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff6e:	d106      	bne.n	800ff7e <mem_trim+0x192>
 800ff70:	4b1c      	ldr	r3, [pc, #112]	; (800ffe4 <mem_trim+0x1f8>)
 800ff72:	f240 3216 	movw	r2, #790	; 0x316
 800ff76:	4920      	ldr	r1, [pc, #128]	; (800fff8 <mem_trim+0x20c>)
 800ff78:	481c      	ldr	r0, [pc, #112]	; (800ffec <mem_trim+0x200>)
 800ff7a:	f00b f8ed 	bl	801b158 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ff7e:	89fb      	ldrh	r3, [r7, #14]
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7ff fd4f 	bl	800fa24 <ptr_to_mem>
 800ff86:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ff88:	4b1c      	ldr	r3, [pc, #112]	; (800fffc <mem_trim+0x210>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	693a      	ldr	r2, [r7, #16]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d202      	bcs.n	800ff98 <mem_trim+0x1ac>
      lfree = mem2;
 800ff92:	4a1a      	ldr	r2, [pc, #104]	; (800fffc <mem_trim+0x210>)
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	881a      	ldrh	r2, [r3, #0]
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	8afa      	ldrh	r2, [r7, #22]
 800ffaa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	89fa      	ldrh	r2, [r7, #14]
 800ffb0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	881b      	ldrh	r3, [r3, #0]
 800ffb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ffba:	d007      	beq.n	800ffcc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	881b      	ldrh	r3, [r3, #0]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7ff fd2f 	bl	800fa24 <ptr_to_mem>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	89fb      	ldrh	r3, [r7, #14]
 800ffca:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ffcc:	4809      	ldr	r0, [pc, #36]	; (800fff4 <mem_trim+0x208>)
 800ffce:	f00a ff72 	bl	801aeb6 <sys_mutex_unlock>
  return rmem;
 800ffd2:	687b      	ldr	r3, [r7, #4]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3720      	adds	r7, #32
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	20039ff4 	.word	0x20039ff4
 800ffe0:	20039ff8 	.word	0x20039ff8
 800ffe4:	0801d398 	.word	0x0801d398
 800ffe8:	0801d524 	.word	0x0801d524
 800ffec:	0801d3e0 	.word	0x0801d3e0
 800fff0:	0801d53c 	.word	0x0801d53c
 800fff4:	20039ffc 	.word	0x20039ffc
 800fff8:	0801d55c 	.word	0x0801d55c
 800fffc:	2003a000 	.word	0x2003a000

08010000 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b088      	sub	sp, #32
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801000a:	88fb      	ldrh	r3, [r7, #6]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d101      	bne.n	8010014 <mem_malloc+0x14>
    return NULL;
 8010010:	2300      	movs	r3, #0
 8010012:	e0e2      	b.n	80101da <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010014:	88fb      	ldrh	r3, [r7, #6]
 8010016:	3303      	adds	r3, #3
 8010018:	b29b      	uxth	r3, r3
 801001a:	f023 0303 	bic.w	r3, r3, #3
 801001e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010020:	8bbb      	ldrh	r3, [r7, #28]
 8010022:	2b0b      	cmp	r3, #11
 8010024:	d801      	bhi.n	801002a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010026:	230c      	movs	r3, #12
 8010028:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801002a:	8bbb      	ldrh	r3, [r7, #28]
 801002c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010030:	d803      	bhi.n	801003a <mem_malloc+0x3a>
 8010032:	8bba      	ldrh	r2, [r7, #28]
 8010034:	88fb      	ldrh	r3, [r7, #6]
 8010036:	429a      	cmp	r2, r3
 8010038:	d201      	bcs.n	801003e <mem_malloc+0x3e>
    return NULL;
 801003a:	2300      	movs	r3, #0
 801003c:	e0cd      	b.n	80101da <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801003e:	4869      	ldr	r0, [pc, #420]	; (80101e4 <mem_malloc+0x1e4>)
 8010040:	f00a ff2a 	bl	801ae98 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010044:	4b68      	ldr	r3, [pc, #416]	; (80101e8 <mem_malloc+0x1e8>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4618      	mov	r0, r3
 801004a:	f7ff fcfd 	bl	800fa48 <mem_to_ptr>
 801004e:	4603      	mov	r3, r0
 8010050:	83fb      	strh	r3, [r7, #30]
 8010052:	e0b7      	b.n	80101c4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010054:	8bfb      	ldrh	r3, [r7, #30]
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff fce4 	bl	800fa24 <ptr_to_mem>
 801005c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	791b      	ldrb	r3, [r3, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	f040 80a7 	bne.w	80101b6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	881b      	ldrh	r3, [r3, #0]
 801006c:	461a      	mov	r2, r3
 801006e:	8bfb      	ldrh	r3, [r7, #30]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	f1a3 0208 	sub.w	r2, r3, #8
 8010076:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010078:	429a      	cmp	r2, r3
 801007a:	f0c0 809c 	bcc.w	80101b6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	461a      	mov	r2, r3
 8010084:	8bfb      	ldrh	r3, [r7, #30]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	f1a3 0208 	sub.w	r2, r3, #8
 801008c:	8bbb      	ldrh	r3, [r7, #28]
 801008e:	3314      	adds	r3, #20
 8010090:	429a      	cmp	r2, r3
 8010092:	d333      	bcc.n	80100fc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010094:	8bfa      	ldrh	r2, [r7, #30]
 8010096:	8bbb      	ldrh	r3, [r7, #28]
 8010098:	4413      	add	r3, r2
 801009a:	b29b      	uxth	r3, r3
 801009c:	3308      	adds	r3, #8
 801009e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80100a0:	8a7b      	ldrh	r3, [r7, #18]
 80100a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100a6:	d106      	bne.n	80100b6 <mem_malloc+0xb6>
 80100a8:	4b50      	ldr	r3, [pc, #320]	; (80101ec <mem_malloc+0x1ec>)
 80100aa:	f240 3287 	movw	r2, #903	; 0x387
 80100ae:	4950      	ldr	r1, [pc, #320]	; (80101f0 <mem_malloc+0x1f0>)
 80100b0:	4850      	ldr	r0, [pc, #320]	; (80101f4 <mem_malloc+0x1f4>)
 80100b2:	f00b f851 	bl	801b158 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80100b6:	8a7b      	ldrh	r3, [r7, #18]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7ff fcb3 	bl	800fa24 <ptr_to_mem>
 80100be:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2200      	movs	r2, #0
 80100c4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	881a      	ldrh	r2, [r3, #0]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	8bfa      	ldrh	r2, [r7, #30]
 80100d2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	8a7a      	ldrh	r2, [r7, #18]
 80100d8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2201      	movs	r2, #1
 80100de:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100e8:	d00b      	beq.n	8010102 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff fc98 	bl	800fa24 <ptr_to_mem>
 80100f4:	4602      	mov	r2, r0
 80100f6:	8a7b      	ldrh	r3, [r7, #18]
 80100f8:	8053      	strh	r3, [r2, #2]
 80100fa:	e002      	b.n	8010102 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	2201      	movs	r2, #1
 8010100:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010102:	4b39      	ldr	r3, [pc, #228]	; (80101e8 <mem_malloc+0x1e8>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	429a      	cmp	r2, r3
 801010a:	d127      	bne.n	801015c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801010c:	4b36      	ldr	r3, [pc, #216]	; (80101e8 <mem_malloc+0x1e8>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010112:	e005      	b.n	8010120 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010114:	69bb      	ldr	r3, [r7, #24]
 8010116:	881b      	ldrh	r3, [r3, #0]
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff fc83 	bl	800fa24 <ptr_to_mem>
 801011e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	791b      	ldrb	r3, [r3, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d004      	beq.n	8010132 <mem_malloc+0x132>
 8010128:	4b33      	ldr	r3, [pc, #204]	; (80101f8 <mem_malloc+0x1f8>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	69ba      	ldr	r2, [r7, #24]
 801012e:	429a      	cmp	r2, r3
 8010130:	d1f0      	bne.n	8010114 <mem_malloc+0x114>
          }
          lfree = cur;
 8010132:	4a2d      	ldr	r2, [pc, #180]	; (80101e8 <mem_malloc+0x1e8>)
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010138:	4b2b      	ldr	r3, [pc, #172]	; (80101e8 <mem_malloc+0x1e8>)
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	4b2e      	ldr	r3, [pc, #184]	; (80101f8 <mem_malloc+0x1f8>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d00b      	beq.n	801015c <mem_malloc+0x15c>
 8010144:	4b28      	ldr	r3, [pc, #160]	; (80101e8 <mem_malloc+0x1e8>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	791b      	ldrb	r3, [r3, #4]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d006      	beq.n	801015c <mem_malloc+0x15c>
 801014e:	4b27      	ldr	r3, [pc, #156]	; (80101ec <mem_malloc+0x1ec>)
 8010150:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010154:	4929      	ldr	r1, [pc, #164]	; (80101fc <mem_malloc+0x1fc>)
 8010156:	4827      	ldr	r0, [pc, #156]	; (80101f4 <mem_malloc+0x1f4>)
 8010158:	f00a fffe 	bl	801b158 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801015c:	4821      	ldr	r0, [pc, #132]	; (80101e4 <mem_malloc+0x1e4>)
 801015e:	f00a feaa 	bl	801aeb6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010162:	8bba      	ldrh	r2, [r7, #28]
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	4413      	add	r3, r2
 8010168:	3308      	adds	r3, #8
 801016a:	4a23      	ldr	r2, [pc, #140]	; (80101f8 <mem_malloc+0x1f8>)
 801016c:	6812      	ldr	r2, [r2, #0]
 801016e:	4293      	cmp	r3, r2
 8010170:	d906      	bls.n	8010180 <mem_malloc+0x180>
 8010172:	4b1e      	ldr	r3, [pc, #120]	; (80101ec <mem_malloc+0x1ec>)
 8010174:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010178:	4921      	ldr	r1, [pc, #132]	; (8010200 <mem_malloc+0x200>)
 801017a:	481e      	ldr	r0, [pc, #120]	; (80101f4 <mem_malloc+0x1f4>)
 801017c:	f00a ffec 	bl	801b158 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	f003 0303 	and.w	r3, r3, #3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d006      	beq.n	8010198 <mem_malloc+0x198>
 801018a:	4b18      	ldr	r3, [pc, #96]	; (80101ec <mem_malloc+0x1ec>)
 801018c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010190:	491c      	ldr	r1, [pc, #112]	; (8010204 <mem_malloc+0x204>)
 8010192:	4818      	ldr	r0, [pc, #96]	; (80101f4 <mem_malloc+0x1f4>)
 8010194:	f00a ffe0 	bl	801b158 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f003 0303 	and.w	r3, r3, #3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d006      	beq.n	80101b0 <mem_malloc+0x1b0>
 80101a2:	4b12      	ldr	r3, [pc, #72]	; (80101ec <mem_malloc+0x1ec>)
 80101a4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80101a8:	4917      	ldr	r1, [pc, #92]	; (8010208 <mem_malloc+0x208>)
 80101aa:	4812      	ldr	r0, [pc, #72]	; (80101f4 <mem_malloc+0x1f4>)
 80101ac:	f00a ffd4 	bl	801b158 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	3308      	adds	r3, #8
 80101b4:	e011      	b.n	80101da <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80101b6:	8bfb      	ldrh	r3, [r7, #30]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7ff fc33 	bl	800fa24 <ptr_to_mem>
 80101be:	4603      	mov	r3, r0
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80101c4:	8bfa      	ldrh	r2, [r7, #30]
 80101c6:	8bbb      	ldrh	r3, [r7, #28]
 80101c8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80101cc:	429a      	cmp	r2, r3
 80101ce:	f4ff af41 	bcc.w	8010054 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80101d2:	4804      	ldr	r0, [pc, #16]	; (80101e4 <mem_malloc+0x1e4>)
 80101d4:	f00a fe6f 	bl	801aeb6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3720      	adds	r7, #32
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20039ffc 	.word	0x20039ffc
 80101e8:	2003a000 	.word	0x2003a000
 80101ec:	0801d398 	.word	0x0801d398
 80101f0:	0801d55c 	.word	0x0801d55c
 80101f4:	0801d3e0 	.word	0x0801d3e0
 80101f8:	20039ff8 	.word	0x20039ff8
 80101fc:	0801d570 	.word	0x0801d570
 8010200:	0801d58c 	.word	0x0801d58c
 8010204:	0801d5bc 	.word	0x0801d5bc
 8010208:	0801d5ec 	.word	0x0801d5ec

0801020c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	689b      	ldr	r3, [r3, #8]
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	3303      	adds	r3, #3
 8010222:	f023 0303 	bic.w	r3, r3, #3
 8010226:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010228:	2300      	movs	r3, #0
 801022a:	60fb      	str	r3, [r7, #12]
 801022c:	e011      	b.n	8010252 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	461a      	mov	r2, r3
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	4413      	add	r3, r2
 801024a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	3301      	adds	r3, #1
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	885b      	ldrh	r3, [r3, #2]
 8010256:	461a      	mov	r2, r3
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	4293      	cmp	r3, r2
 801025c:	dbe7      	blt.n	801022e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801025e:	bf00      	nop
 8010260:	bf00      	nop
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010272:	2300      	movs	r3, #0
 8010274:	80fb      	strh	r3, [r7, #6]
 8010276:	e009      	b.n	801028c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010278:	88fb      	ldrh	r3, [r7, #6]
 801027a:	4a08      	ldr	r2, [pc, #32]	; (801029c <memp_init+0x30>)
 801027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010280:	4618      	mov	r0, r3
 8010282:	f7ff ffc3 	bl	801020c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010286:	88fb      	ldrh	r3, [r7, #6]
 8010288:	3301      	adds	r3, #1
 801028a:	80fb      	strh	r3, [r7, #6]
 801028c:	88fb      	ldrh	r3, [r7, #6]
 801028e:	2b0c      	cmp	r3, #12
 8010290:	d9f2      	bls.n	8010278 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010292:	bf00      	nop
 8010294:	bf00      	nop
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	0801fe50 	.word	0x0801fe50

080102a0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80102a8:	f00a fe38 	bl	801af1c <sys_arch_protect>
 80102ac:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d015      	beq.n	80102e8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	68ba      	ldr	r2, [r7, #8]
 80102c2:	6812      	ldr	r2, [r2, #0]
 80102c4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	f003 0303 	and.w	r3, r3, #3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d006      	beq.n	80102de <do_memp_malloc_pool+0x3e>
 80102d0:	4b09      	ldr	r3, [pc, #36]	; (80102f8 <do_memp_malloc_pool+0x58>)
 80102d2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80102d6:	4909      	ldr	r1, [pc, #36]	; (80102fc <do_memp_malloc_pool+0x5c>)
 80102d8:	4809      	ldr	r0, [pc, #36]	; (8010300 <do_memp_malloc_pool+0x60>)
 80102da:	f00a ff3d 	bl	801b158 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f00a fe2a 	bl	801af38 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	e003      	b.n	80102f0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f00a fe25 	bl	801af38 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80102ee:	2300      	movs	r3, #0
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	0801d610 	.word	0x0801d610
 80102fc:	0801d640 	.word	0x0801d640
 8010300:	0801d664 	.word	0x0801d664

08010304 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <memp_malloc_pool+0x1c>
 8010312:	4b0a      	ldr	r3, [pc, #40]	; (801033c <memp_malloc_pool+0x38>)
 8010314:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010318:	4909      	ldr	r1, [pc, #36]	; (8010340 <memp_malloc_pool+0x3c>)
 801031a:	480a      	ldr	r0, [pc, #40]	; (8010344 <memp_malloc_pool+0x40>)
 801031c:	f00a ff1c 	bl	801b158 <iprintf>
  if (desc == NULL) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d101      	bne.n	801032a <memp_malloc_pool+0x26>
    return NULL;
 8010326:	2300      	movs	r3, #0
 8010328:	e003      	b.n	8010332 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7ff ffb8 	bl	80102a0 <do_memp_malloc_pool>
 8010330:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010332:	4618      	mov	r0, r3
 8010334:	3708      	adds	r7, #8
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	0801d610 	.word	0x0801d610
 8010340:	0801d68c 	.word	0x0801d68c
 8010344:	0801d664 	.word	0x0801d664

08010348 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	4603      	mov	r3, r0
 8010350:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010352:	79fb      	ldrb	r3, [r7, #7]
 8010354:	2b0c      	cmp	r3, #12
 8010356:	d908      	bls.n	801036a <memp_malloc+0x22>
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <memp_malloc+0x3c>)
 801035a:	f240 1257 	movw	r2, #343	; 0x157
 801035e:	490a      	ldr	r1, [pc, #40]	; (8010388 <memp_malloc+0x40>)
 8010360:	480a      	ldr	r0, [pc, #40]	; (801038c <memp_malloc+0x44>)
 8010362:	f00a fef9 	bl	801b158 <iprintf>
 8010366:	2300      	movs	r3, #0
 8010368:	e008      	b.n	801037c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	4a08      	ldr	r2, [pc, #32]	; (8010390 <memp_malloc+0x48>)
 801036e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff ff94 	bl	80102a0 <do_memp_malloc_pool>
 8010378:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801037a:	68fb      	ldr	r3, [r7, #12]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	0801d610 	.word	0x0801d610
 8010388:	0801d6a0 	.word	0x0801d6a0
 801038c:	0801d664 	.word	0x0801d664
 8010390:	0801fe50 	.word	0x0801fe50

08010394 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	f003 0303 	and.w	r3, r3, #3
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d006      	beq.n	80103b6 <do_memp_free_pool+0x22>
 80103a8:	4b0d      	ldr	r3, [pc, #52]	; (80103e0 <do_memp_free_pool+0x4c>)
 80103aa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80103ae:	490d      	ldr	r1, [pc, #52]	; (80103e4 <do_memp_free_pool+0x50>)
 80103b0:	480d      	ldr	r0, [pc, #52]	; (80103e8 <do_memp_free_pool+0x54>)
 80103b2:	f00a fed1 	bl	801b158 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80103ba:	f00a fdaf 	bl	801af1c <sys_arch_protect>
 80103be:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	68fa      	ldr	r2, [r7, #12]
 80103d0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80103d2:	68b8      	ldr	r0, [r7, #8]
 80103d4:	f00a fdb0 	bl	801af38 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80103d8:	bf00      	nop
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	0801d610 	.word	0x0801d610
 80103e4:	0801d6c0 	.word	0x0801d6c0
 80103e8:	0801d664 	.word	0x0801d664

080103ec <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d106      	bne.n	801040a <memp_free_pool+0x1e>
 80103fc:	4b0a      	ldr	r3, [pc, #40]	; (8010428 <memp_free_pool+0x3c>)
 80103fe:	f240 1295 	movw	r2, #405	; 0x195
 8010402:	490a      	ldr	r1, [pc, #40]	; (801042c <memp_free_pool+0x40>)
 8010404:	480a      	ldr	r0, [pc, #40]	; (8010430 <memp_free_pool+0x44>)
 8010406:	f00a fea7 	bl	801b158 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d007      	beq.n	8010420 <memp_free_pool+0x34>
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d004      	beq.n	8010420 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010416:	6839      	ldr	r1, [r7, #0]
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f7ff ffbb 	bl	8010394 <do_memp_free_pool>
 801041e:	e000      	b.n	8010422 <memp_free_pool+0x36>
    return;
 8010420:	bf00      	nop
}
 8010422:	3708      	adds	r7, #8
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	0801d610 	.word	0x0801d610
 801042c:	0801d68c 	.word	0x0801d68c
 8010430:	0801d664 	.word	0x0801d664

08010434 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	4603      	mov	r3, r0
 801043c:	6039      	str	r1, [r7, #0]
 801043e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010440:	79fb      	ldrb	r3, [r7, #7]
 8010442:	2b0c      	cmp	r3, #12
 8010444:	d907      	bls.n	8010456 <memp_free+0x22>
 8010446:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <memp_free+0x44>)
 8010448:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801044c:	490b      	ldr	r1, [pc, #44]	; (801047c <memp_free+0x48>)
 801044e:	480c      	ldr	r0, [pc, #48]	; (8010480 <memp_free+0x4c>)
 8010450:	f00a fe82 	bl	801b158 <iprintf>
 8010454:	e00c      	b.n	8010470 <memp_free+0x3c>

  if (mem == NULL) {
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d008      	beq.n	801046e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	4a09      	ldr	r2, [pc, #36]	; (8010484 <memp_free+0x50>)
 8010460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010464:	6839      	ldr	r1, [r7, #0]
 8010466:	4618      	mov	r0, r3
 8010468:	f7ff ff94 	bl	8010394 <do_memp_free_pool>
 801046c:	e000      	b.n	8010470 <memp_free+0x3c>
    return;
 801046e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	0801d610 	.word	0x0801d610
 801047c:	0801d6e0 	.word	0x0801d6e0
 8010480:	0801d664 	.word	0x0801d664
 8010484:	0801fe50 	.word	0x0801fe50

08010488 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010488:	b480      	push	{r7}
 801048a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801048c:	bf00      	nop
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
	...

08010498 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
 80104a4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d108      	bne.n	80104be <netif_add+0x26>
 80104ac:	4b57      	ldr	r3, [pc, #348]	; (801060c <netif_add+0x174>)
 80104ae:	f240 1227 	movw	r2, #295	; 0x127
 80104b2:	4957      	ldr	r1, [pc, #348]	; (8010610 <netif_add+0x178>)
 80104b4:	4857      	ldr	r0, [pc, #348]	; (8010614 <netif_add+0x17c>)
 80104b6:	f00a fe4f 	bl	801b158 <iprintf>
 80104ba:	2300      	movs	r3, #0
 80104bc:	e0a2      	b.n	8010604 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80104be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d108      	bne.n	80104d6 <netif_add+0x3e>
 80104c4:	4b51      	ldr	r3, [pc, #324]	; (801060c <netif_add+0x174>)
 80104c6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80104ca:	4953      	ldr	r1, [pc, #332]	; (8010618 <netif_add+0x180>)
 80104cc:	4851      	ldr	r0, [pc, #324]	; (8010614 <netif_add+0x17c>)
 80104ce:	f00a fe43 	bl	801b158 <iprintf>
 80104d2:	2300      	movs	r3, #0
 80104d4:	e096      	b.n	8010604 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d101      	bne.n	80104e0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80104dc:	4b4f      	ldr	r3, [pc, #316]	; (801061c <netif_add+0x184>)
 80104de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80104e6:	4b4d      	ldr	r3, [pc, #308]	; (801061c <netif_add+0x184>)
 80104e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d101      	bne.n	80104f4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80104f0:	4b4a      	ldr	r3, [pc, #296]	; (801061c <netif_add+0x184>)
 80104f2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2200      	movs	r2, #0
 80104f8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2200      	movs	r2, #0
 80104fe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2200      	movs	r2, #0
 8010504:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	4a45      	ldr	r2, [pc, #276]	; (8010620 <netif_add+0x188>)
 801050a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2200      	movs	r2, #0
 8010510:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2200      	movs	r2, #0
 8010516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2200      	movs	r2, #0
 801051e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6a3a      	ldr	r2, [r7, #32]
 8010524:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010526:	4b3f      	ldr	r3, [pc, #252]	; (8010624 <netif_add+0x18c>)
 8010528:	781a      	ldrb	r2, [r3, #0]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010534:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	68b9      	ldr	r1, [r7, #8]
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 f913 	bl	8010768 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	4798      	blx	r3
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <netif_add+0xba>
    return NULL;
 801054e:	2300      	movs	r3, #0
 8010550:	e058      	b.n	8010604 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010558:	2bff      	cmp	r3, #255	; 0xff
 801055a:	d103      	bne.n	8010564 <netif_add+0xcc>
        netif->num = 0;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2200      	movs	r2, #0
 8010560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010564:	2300      	movs	r3, #0
 8010566:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010568:	4b2f      	ldr	r3, [pc, #188]	; (8010628 <netif_add+0x190>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e02b      	b.n	80105c8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010570:	697a      	ldr	r2, [r7, #20]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	429a      	cmp	r2, r3
 8010576:	d106      	bne.n	8010586 <netif_add+0xee>
 8010578:	4b24      	ldr	r3, [pc, #144]	; (801060c <netif_add+0x174>)
 801057a:	f240 128b 	movw	r2, #395	; 0x18b
 801057e:	492b      	ldr	r1, [pc, #172]	; (801062c <netif_add+0x194>)
 8010580:	4824      	ldr	r0, [pc, #144]	; (8010614 <netif_add+0x17c>)
 8010582:	f00a fde9 	bl	801b158 <iprintf>
        num_netifs++;
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	3301      	adds	r3, #1
 801058a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	2bff      	cmp	r3, #255	; 0xff
 8010590:	dd06      	ble.n	80105a0 <netif_add+0x108>
 8010592:	4b1e      	ldr	r3, [pc, #120]	; (801060c <netif_add+0x174>)
 8010594:	f240 128d 	movw	r2, #397	; 0x18d
 8010598:	4925      	ldr	r1, [pc, #148]	; (8010630 <netif_add+0x198>)
 801059a:	481e      	ldr	r0, [pc, #120]	; (8010614 <netif_add+0x17c>)
 801059c:	f00a fddc 	bl	801b158 <iprintf>
        if (netif2->num == netif->num) {
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d108      	bne.n	80105c2 <netif_add+0x12a>
          netif->num++;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105b6:	3301      	adds	r3, #1
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80105c0:	e005      	b.n	80105ce <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	617b      	str	r3, [r7, #20]
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1d0      	bne.n	8010570 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d1be      	bne.n	8010552 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105da:	2bfe      	cmp	r3, #254	; 0xfe
 80105dc:	d103      	bne.n	80105e6 <netif_add+0x14e>
    netif_num = 0;
 80105de:	4b11      	ldr	r3, [pc, #68]	; (8010624 <netif_add+0x18c>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	701a      	strb	r2, [r3, #0]
 80105e4:	e006      	b.n	80105f4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105ec:	3301      	adds	r3, #1
 80105ee:	b2da      	uxtb	r2, r3
 80105f0:	4b0c      	ldr	r3, [pc, #48]	; (8010624 <netif_add+0x18c>)
 80105f2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80105f4:	4b0c      	ldr	r3, [pc, #48]	; (8010628 <netif_add+0x190>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80105fc:	4a0a      	ldr	r2, [pc, #40]	; (8010628 <netif_add+0x190>)
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010602:	68fb      	ldr	r3, [r7, #12]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	0801d6fc 	.word	0x0801d6fc
 8010610:	0801d790 	.word	0x0801d790
 8010614:	0801d74c 	.word	0x0801d74c
 8010618:	0801d7ac 	.word	0x0801d7ac
 801061c:	0801fec4 	.word	0x0801fec4
 8010620:	08010a43 	.word	0x08010a43
 8010624:	2003d0d8 	.word	0x2003d0d8
 8010628:	2003d0d0 	.word	0x2003d0d0
 801062c:	0801d7d0 	.word	0x0801d7d0
 8010630:	0801d7e4 	.word	0x0801d7e4

08010634 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801063e:	6839      	ldr	r1, [r7, #0]
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f002 fe91 	bl	8013368 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010646:	6839      	ldr	r1, [r7, #0]
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f007 ff2d 	bl	80184a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801064e:	bf00      	nop
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
	...

08010658 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <netif_do_set_ipaddr+0x20>
 801066a:	4b1d      	ldr	r3, [pc, #116]	; (80106e0 <netif_do_set_ipaddr+0x88>)
 801066c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010670:	491c      	ldr	r1, [pc, #112]	; (80106e4 <netif_do_set_ipaddr+0x8c>)
 8010672:	481d      	ldr	r0, [pc, #116]	; (80106e8 <netif_do_set_ipaddr+0x90>)
 8010674:	f00a fd70 	bl	801b158 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d106      	bne.n	801068c <netif_do_set_ipaddr+0x34>
 801067e:	4b18      	ldr	r3, [pc, #96]	; (80106e0 <netif_do_set_ipaddr+0x88>)
 8010680:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010684:	4917      	ldr	r1, [pc, #92]	; (80106e4 <netif_do_set_ipaddr+0x8c>)
 8010686:	4818      	ldr	r0, [pc, #96]	; (80106e8 <netif_do_set_ipaddr+0x90>)
 8010688:	f00a fd66 	bl	801b158 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	3304      	adds	r3, #4
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	429a      	cmp	r2, r3
 8010698:	d01c      	beq.n	80106d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	3304      	adds	r3, #4
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80106aa:	f107 0314 	add.w	r3, r7, #20
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7ff ffbf 	bl	8010634 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <netif_do_set_ipaddr+0x6a>
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	e000      	b.n	80106c4 <netif_do_set_ipaddr+0x6c>
 80106c2:	2300      	movs	r3, #0
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80106c8:	2101      	movs	r1, #1
 80106ca:	68f8      	ldr	r0, [r7, #12]
 80106cc:	f000 f8d2 	bl	8010874 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80106d0:	2301      	movs	r3, #1
 80106d2:	e000      	b.n	80106d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	0801d6fc 	.word	0x0801d6fc
 80106e4:	0801d814 	.word	0x0801d814
 80106e8:	0801d74c 	.word	0x0801d74c

080106ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	3308      	adds	r3, #8
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	d00a      	beq.n	801071c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <netif_do_set_netmask+0x26>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	e000      	b.n	8010714 <netif_do_set_netmask+0x28>
 8010712:	2300      	movs	r3, #0
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010718:	2301      	movs	r3, #1
 801071a:	e000      	b.n	801071e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801071c:	2300      	movs	r3, #0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3714      	adds	r7, #20
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr

0801072a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801072a:	b480      	push	{r7}
 801072c:	b085      	sub	sp, #20
 801072e:	af00      	add	r7, sp, #0
 8010730:	60f8      	str	r0, [r7, #12]
 8010732:	60b9      	str	r1, [r7, #8]
 8010734:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	330c      	adds	r3, #12
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	429a      	cmp	r2, r3
 8010742:	d00a      	beq.n	801075a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <netif_do_set_gw+0x26>
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	e000      	b.n	8010752 <netif_do_set_gw+0x28>
 8010750:	2300      	movs	r3, #0
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010756:	2301      	movs	r3, #1
 8010758:	e000      	b.n	801075c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801075a:	2300      	movs	r3, #0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3714      	adds	r7, #20
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b088      	sub	sp, #32
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	607a      	str	r2, [r7, #4]
 8010774:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010776:	2300      	movs	r3, #0
 8010778:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801077a:	2300      	movs	r3, #0
 801077c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d101      	bne.n	8010788 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010784:	4b1c      	ldr	r3, [pc, #112]	; (80107f8 <netif_set_addr+0x90>)
 8010786:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801078e:	4b1a      	ldr	r3, [pc, #104]	; (80107f8 <netif_set_addr+0x90>)
 8010790:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010798:	4b17      	ldr	r3, [pc, #92]	; (80107f8 <netif_set_addr+0x90>)
 801079a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d003      	beq.n	80107aa <netif_set_addr+0x42>
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <netif_set_addr+0x46>
 80107aa:	2301      	movs	r3, #1
 80107ac:	e000      	b.n	80107b0 <netif_set_addr+0x48>
 80107ae:	2300      	movs	r3, #0
 80107b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d006      	beq.n	80107c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80107b8:	f107 0310 	add.w	r3, r7, #16
 80107bc:	461a      	mov	r2, r3
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f7ff ff49 	bl	8010658 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80107c6:	69fa      	ldr	r2, [r7, #28]
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f7ff ff8e 	bl	80106ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80107d0:	69ba      	ldr	r2, [r7, #24]
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f7ff ffa8 	bl	801072a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d106      	bne.n	80107ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80107e0:	f107 0310 	add.w	r3, r7, #16
 80107e4:	461a      	mov	r2, r3
 80107e6:	68b9      	ldr	r1, [r7, #8]
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f7ff ff35 	bl	8010658 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80107ee:	bf00      	nop
 80107f0:	3720      	adds	r7, #32
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	0801fec4 	.word	0x0801fec4

080107fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b083      	sub	sp, #12
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010804:	4a04      	ldr	r2, [pc, #16]	; (8010818 <netif_set_default+0x1c>)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801080a:	bf00      	nop
 801080c:	370c      	adds	r7, #12
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr
 8010816:	bf00      	nop
 8010818:	2003d0d4 	.word	0x2003d0d4

0801081c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d107      	bne.n	801083a <netif_set_up+0x1e>
 801082a:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <netif_set_up+0x4c>)
 801082c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010830:	490e      	ldr	r1, [pc, #56]	; (801086c <netif_set_up+0x50>)
 8010832:	480f      	ldr	r0, [pc, #60]	; (8010870 <netif_set_up+0x54>)
 8010834:	f00a fc90 	bl	801b158 <iprintf>
 8010838:	e013      	b.n	8010862 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010840:	f003 0301 	and.w	r3, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	d10c      	bne.n	8010862 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801084e:	f043 0301 	orr.w	r3, r3, #1
 8010852:	b2da      	uxtb	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801085a:	2103      	movs	r1, #3
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 f809 	bl	8010874 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	0801d6fc 	.word	0x0801d6fc
 801086c:	0801d884 	.word	0x0801d884
 8010870:	0801d74c 	.word	0x0801d74c

08010874 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d106      	bne.n	8010894 <netif_issue_reports+0x20>
 8010886:	4b18      	ldr	r3, [pc, #96]	; (80108e8 <netif_issue_reports+0x74>)
 8010888:	f240 326d 	movw	r2, #877	; 0x36d
 801088c:	4917      	ldr	r1, [pc, #92]	; (80108ec <netif_issue_reports+0x78>)
 801088e:	4818      	ldr	r0, [pc, #96]	; (80108f0 <netif_issue_reports+0x7c>)
 8010890:	f00a fc62 	bl	801b158 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801089a:	f003 0304 	and.w	r3, r3, #4
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d01e      	beq.n	80108e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d017      	beq.n	80108e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80108b0:	78fb      	ldrb	r3, [r7, #3]
 80108b2:	f003 0301 	and.w	r3, r3, #1
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d013      	beq.n	80108e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	3304      	adds	r3, #4
 80108be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d00e      	beq.n	80108e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108ca:	f003 0308 	and.w	r3, r3, #8
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d007      	beq.n	80108e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	3304      	adds	r3, #4
 80108d6:	4619      	mov	r1, r3
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f008 fd4f 	bl	801937c <etharp_request>
 80108de:	e000      	b.n	80108e2 <netif_issue_reports+0x6e>
    return;
 80108e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	0801d6fc 	.word	0x0801d6fc
 80108ec:	0801d8a0 	.word	0x0801d8a0
 80108f0:	0801d74c 	.word	0x0801d74c

080108f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d107      	bne.n	8010912 <netif_set_down+0x1e>
 8010902:	4b12      	ldr	r3, [pc, #72]	; (801094c <netif_set_down+0x58>)
 8010904:	f240 329b 	movw	r2, #923	; 0x39b
 8010908:	4911      	ldr	r1, [pc, #68]	; (8010950 <netif_set_down+0x5c>)
 801090a:	4812      	ldr	r0, [pc, #72]	; (8010954 <netif_set_down+0x60>)
 801090c:	f00a fc24 	bl	801b158 <iprintf>
 8010910:	e019      	b.n	8010946 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010918:	f003 0301 	and.w	r3, r3, #1
 801091c:	2b00      	cmp	r3, #0
 801091e:	d012      	beq.n	8010946 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010926:	f023 0301 	bic.w	r3, r3, #1
 801092a:	b2da      	uxtb	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010938:	f003 0308 	and.w	r3, r3, #8
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f008 f8d9 	bl	8018af8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	0801d6fc 	.word	0x0801d6fc
 8010950:	0801d8c4 	.word	0x0801d8c4
 8010954:	0801d74c 	.word	0x0801d74c

08010958 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d107      	bne.n	8010976 <netif_set_link_up+0x1e>
 8010966:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <netif_set_link_up+0x5c>)
 8010968:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801096c:	4912      	ldr	r1, [pc, #72]	; (80109b8 <netif_set_link_up+0x60>)
 801096e:	4813      	ldr	r0, [pc, #76]	; (80109bc <netif_set_link_up+0x64>)
 8010970:	f00a fbf2 	bl	801b158 <iprintf>
 8010974:	e01b      	b.n	80109ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801097c:	f003 0304 	and.w	r3, r3, #4
 8010980:	2b00      	cmp	r3, #0
 8010982:	d114      	bne.n	80109ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801098a:	f043 0304 	orr.w	r3, r3, #4
 801098e:	b2da      	uxtb	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010996:	2103      	movs	r1, #3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff ff6b 	bl	8010874 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	69db      	ldr	r3, [r3, #28]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d003      	beq.n	80109ae <netif_set_link_up+0x56>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	69db      	ldr	r3, [r3, #28]
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	0801d6fc 	.word	0x0801d6fc
 80109b8:	0801d8e4 	.word	0x0801d8e4
 80109bc:	0801d74c 	.word	0x0801d74c

080109c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d107      	bne.n	80109de <netif_set_link_down+0x1e>
 80109ce:	4b11      	ldr	r3, [pc, #68]	; (8010a14 <netif_set_link_down+0x54>)
 80109d0:	f240 4206 	movw	r2, #1030	; 0x406
 80109d4:	4910      	ldr	r1, [pc, #64]	; (8010a18 <netif_set_link_down+0x58>)
 80109d6:	4811      	ldr	r0, [pc, #68]	; (8010a1c <netif_set_link_down+0x5c>)
 80109d8:	f00a fbbe 	bl	801b158 <iprintf>
 80109dc:	e017      	b.n	8010a0e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109e4:	f003 0304 	and.w	r3, r3, #4
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d010      	beq.n	8010a0e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109f2:	f023 0304 	bic.w	r3, r3, #4
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	69db      	ldr	r3, [r3, #28]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d003      	beq.n	8010a0e <netif_set_link_down+0x4e>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	69db      	ldr	r3, [r3, #28]
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	0801d6fc 	.word	0x0801d6fc
 8010a18:	0801d908 	.word	0x0801d908
 8010a1c:	0801d74c 	.word	0x0801d74c

08010a20 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d002      	beq.n	8010a36 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	683a      	ldr	r2, [r7, #0]
 8010a34:	61da      	str	r2, [r3, #28]
  }
}
 8010a36:	bf00      	nop
 8010a38:	370c      	adds	r7, #12
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010a42:	b480      	push	{r7}
 8010a44:	b085      	sub	sp, #20
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	60b9      	str	r1, [r7, #8]
 8010a4c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010a4e:	f06f 030b 	mvn.w	r3, #11
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3714      	adds	r7, #20
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
	...

08010a60 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b085      	sub	sp, #20
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010a6a:	79fb      	ldrb	r3, [r7, #7]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d013      	beq.n	8010a98 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010a70:	4b0d      	ldr	r3, [pc, #52]	; (8010aa8 <netif_get_by_index+0x48>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	60fb      	str	r3, [r7, #12]
 8010a76:	e00c      	b.n	8010a92 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a7e:	3301      	adds	r3, #1
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	79fa      	ldrb	r2, [r7, #7]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d101      	bne.n	8010a8c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	e006      	b.n	8010a9a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	60fb      	str	r3, [r7, #12]
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1ef      	bne.n	8010a78 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010a98:	2300      	movs	r3, #0
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3714      	adds	r7, #20
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	2003d0d0 	.word	0x2003d0d0

08010aac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010ab2:	f00a fa33 	bl	801af1c <sys_arch_protect>
 8010ab6:	6038      	str	r0, [r7, #0]
 8010ab8:	4b0d      	ldr	r3, [pc, #52]	; (8010af0 <pbuf_free_ooseq+0x44>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	701a      	strb	r2, [r3, #0]
 8010abe:	6838      	ldr	r0, [r7, #0]
 8010ac0:	f00a fa3a 	bl	801af38 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ac4:	4b0b      	ldr	r3, [pc, #44]	; (8010af4 <pbuf_free_ooseq+0x48>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	607b      	str	r3, [r7, #4]
 8010aca:	e00a      	b.n	8010ae2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d003      	beq.n	8010adc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f002 fc85 	bl	80133e4 <tcp_free_ooseq>
      return;
 8010ada:	e005      	b.n	8010ae8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	607b      	str	r3, [r7, #4]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1f1      	bne.n	8010acc <pbuf_free_ooseq+0x20>
    }
  }
}
 8010ae8:	3708      	adds	r7, #8
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	2003d0d9 	.word	0x2003d0d9
 8010af4:	2003d0e8 	.word	0x2003d0e8

08010af8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010b00:	f7ff ffd4 	bl	8010aac <pbuf_free_ooseq>
}
 8010b04:	bf00      	nop
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010b12:	f00a fa03 	bl	801af1c <sys_arch_protect>
 8010b16:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010b18:	4b0f      	ldr	r3, [pc, #60]	; (8010b58 <pbuf_pool_is_empty+0x4c>)
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010b1e:	4b0e      	ldr	r3, [pc, #56]	; (8010b58 <pbuf_pool_is_empty+0x4c>)
 8010b20:	2201      	movs	r2, #1
 8010b22:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f00a fa07 	bl	801af38 <sys_arch_unprotect>

  if (!queued) {
 8010b2a:	78fb      	ldrb	r3, [r7, #3]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10f      	bne.n	8010b50 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010b30:	2100      	movs	r1, #0
 8010b32:	480a      	ldr	r0, [pc, #40]	; (8010b5c <pbuf_pool_is_empty+0x50>)
 8010b34:	f7fe fe90 	bl	800f858 <tcpip_try_callback>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d008      	beq.n	8010b50 <pbuf_pool_is_empty+0x44>
 8010b3e:	f00a f9ed 	bl	801af1c <sys_arch_protect>
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	4b04      	ldr	r3, [pc, #16]	; (8010b58 <pbuf_pool_is_empty+0x4c>)
 8010b46:	2200      	movs	r2, #0
 8010b48:	701a      	strb	r2, [r3, #0]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f00a f9f4 	bl	801af38 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	2003d0d9 	.word	0x2003d0d9
 8010b5c:	08010af9 	.word	0x08010af9

08010b60 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b085      	sub	sp, #20
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	4611      	mov	r1, r2
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	460b      	mov	r3, r1
 8010b70:	80fb      	strh	r3, [r7, #6]
 8010b72:	4613      	mov	r3, r2
 8010b74:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	88fa      	ldrh	r2, [r7, #6]
 8010b86:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	88ba      	ldrh	r2, [r7, #4]
 8010b8c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010b8e:	8b3b      	ldrh	r3, [r7, #24]
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	7f3a      	ldrb	r2, [r7, #28]
 8010b9a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	73da      	strb	r2, [r3, #15]
}
 8010ba8:	bf00      	nop
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b08c      	sub	sp, #48	; 0x30
 8010bb8:	af02      	add	r7, sp, #8
 8010bba:	4603      	mov	r3, r0
 8010bbc:	71fb      	strb	r3, [r7, #7]
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	80bb      	strh	r3, [r7, #4]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010bc6:	79fb      	ldrb	r3, [r7, #7]
 8010bc8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010bca:	887b      	ldrh	r3, [r7, #2]
 8010bcc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010bd0:	d07f      	beq.n	8010cd2 <pbuf_alloc+0x11e>
 8010bd2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010bd6:	f300 80c8 	bgt.w	8010d6a <pbuf_alloc+0x1b6>
 8010bda:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010bde:	d010      	beq.n	8010c02 <pbuf_alloc+0x4e>
 8010be0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010be4:	f300 80c1 	bgt.w	8010d6a <pbuf_alloc+0x1b6>
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d002      	beq.n	8010bf2 <pbuf_alloc+0x3e>
 8010bec:	2b41      	cmp	r3, #65	; 0x41
 8010bee:	f040 80bc 	bne.w	8010d6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010bf2:	887a      	ldrh	r2, [r7, #2]
 8010bf4:	88bb      	ldrh	r3, [r7, #4]
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	f000 f8d1 	bl	8010da0 <pbuf_alloc_reference>
 8010bfe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010c00:	e0bd      	b.n	8010d7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010c02:	2300      	movs	r3, #0
 8010c04:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010c06:	2300      	movs	r3, #0
 8010c08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010c0a:	88bb      	ldrh	r3, [r7, #4]
 8010c0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010c0e:	200c      	movs	r0, #12
 8010c10:	f7ff fb9a 	bl	8010348 <memp_malloc>
 8010c14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d109      	bne.n	8010c30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010c1c:	f7ff ff76 	bl	8010b0c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d002      	beq.n	8010c2c <pbuf_alloc+0x78>
            pbuf_free(p);
 8010c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c28:	f000 fada 	bl	80111e0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e0a7      	b.n	8010d80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c32:	3303      	adds	r3, #3
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	f023 0303 	bic.w	r3, r3, #3
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	8b7a      	ldrh	r2, [r7, #26]
 8010c44:	4293      	cmp	r3, r2
 8010c46:	bf28      	it	cs
 8010c48:	4613      	movcs	r3, r2
 8010c4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c4e:	3310      	adds	r3, #16
 8010c50:	693a      	ldr	r2, [r7, #16]
 8010c52:	4413      	add	r3, r2
 8010c54:	3303      	adds	r3, #3
 8010c56:	f023 0303 	bic.w	r3, r3, #3
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	89f9      	ldrh	r1, [r7, #14]
 8010c5e:	8b7a      	ldrh	r2, [r7, #26]
 8010c60:	2300      	movs	r3, #0
 8010c62:	9301      	str	r3, [sp, #4]
 8010c64:	887b      	ldrh	r3, [r7, #2]
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	4601      	mov	r1, r0
 8010c6c:	6938      	ldr	r0, [r7, #16]
 8010c6e:	f7ff ff77 	bl	8010b60 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	f003 0303 	and.w	r3, r3, #3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d006      	beq.n	8010c8c <pbuf_alloc+0xd8>
 8010c7e:	4b42      	ldr	r3, [pc, #264]	; (8010d88 <pbuf_alloc+0x1d4>)
 8010c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010c84:	4941      	ldr	r1, [pc, #260]	; (8010d8c <pbuf_alloc+0x1d8>)
 8010c86:	4842      	ldr	r0, [pc, #264]	; (8010d90 <pbuf_alloc+0x1dc>)
 8010c88:	f00a fa66 	bl	801b158 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c8e:	3303      	adds	r3, #3
 8010c90:	f023 0303 	bic.w	r3, r3, #3
 8010c94:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010c98:	d106      	bne.n	8010ca8 <pbuf_alloc+0xf4>
 8010c9a:	4b3b      	ldr	r3, [pc, #236]	; (8010d88 <pbuf_alloc+0x1d4>)
 8010c9c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010ca0:	493c      	ldr	r1, [pc, #240]	; (8010d94 <pbuf_alloc+0x1e0>)
 8010ca2:	483b      	ldr	r0, [pc, #236]	; (8010d90 <pbuf_alloc+0x1dc>)
 8010ca4:	f00a fa58 	bl	801b158 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d102      	bne.n	8010cb4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8010cb2:	e002      	b.n	8010cba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	693a      	ldr	r2, [r7, #16]
 8010cb8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010cbe:	8b7a      	ldrh	r2, [r7, #26]
 8010cc0:	89fb      	ldrh	r3, [r7, #14]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010cca:	8b7b      	ldrh	r3, [r7, #26]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d19e      	bne.n	8010c0e <pbuf_alloc+0x5a>
      break;
 8010cd0:	e055      	b.n	8010d7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cd4:	3303      	adds	r3, #3
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	f023 0303 	bic.w	r3, r3, #3
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	88bb      	ldrh	r3, [r7, #4]
 8010ce0:	3303      	adds	r3, #3
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	f023 0303 	bic.w	r3, r3, #3
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	4413      	add	r3, r2
 8010cec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010cee:	8b3b      	ldrh	r3, [r7, #24]
 8010cf0:	3310      	adds	r3, #16
 8010cf2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010cf4:	8b3a      	ldrh	r2, [r7, #24]
 8010cf6:	88bb      	ldrh	r3, [r7, #4]
 8010cf8:	3303      	adds	r3, #3
 8010cfa:	f023 0303 	bic.w	r3, r3, #3
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d306      	bcc.n	8010d10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010d02:	8afa      	ldrh	r2, [r7, #22]
 8010d04:	88bb      	ldrh	r3, [r7, #4]
 8010d06:	3303      	adds	r3, #3
 8010d08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d201      	bcs.n	8010d14 <pbuf_alloc+0x160>
        return NULL;
 8010d10:	2300      	movs	r3, #0
 8010d12:	e035      	b.n	8010d80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010d14:	8afb      	ldrh	r3, [r7, #22]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff f972 	bl	8010000 <mem_malloc>
 8010d1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <pbuf_alloc+0x174>
        return NULL;
 8010d24:	2300      	movs	r3, #0
 8010d26:	e02b      	b.n	8010d80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010d28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d2a:	3310      	adds	r3, #16
 8010d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d2e:	4413      	add	r3, r2
 8010d30:	3303      	adds	r3, #3
 8010d32:	f023 0303 	bic.w	r3, r3, #3
 8010d36:	4618      	mov	r0, r3
 8010d38:	88b9      	ldrh	r1, [r7, #4]
 8010d3a:	88ba      	ldrh	r2, [r7, #4]
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	887b      	ldrh	r3, [r7, #2]
 8010d42:	9300      	str	r3, [sp, #0]
 8010d44:	460b      	mov	r3, r1
 8010d46:	4601      	mov	r1, r0
 8010d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d4a:	f7ff ff09 	bl	8010b60 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	f003 0303 	and.w	r3, r3, #3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d010      	beq.n	8010d7c <pbuf_alloc+0x1c8>
 8010d5a:	4b0b      	ldr	r3, [pc, #44]	; (8010d88 <pbuf_alloc+0x1d4>)
 8010d5c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010d60:	490d      	ldr	r1, [pc, #52]	; (8010d98 <pbuf_alloc+0x1e4>)
 8010d62:	480b      	ldr	r0, [pc, #44]	; (8010d90 <pbuf_alloc+0x1dc>)
 8010d64:	f00a f9f8 	bl	801b158 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010d68:	e008      	b.n	8010d7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010d6a:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <pbuf_alloc+0x1d4>)
 8010d6c:	f240 1227 	movw	r2, #295	; 0x127
 8010d70:	490a      	ldr	r1, [pc, #40]	; (8010d9c <pbuf_alloc+0x1e8>)
 8010d72:	4807      	ldr	r0, [pc, #28]	; (8010d90 <pbuf_alloc+0x1dc>)
 8010d74:	f00a f9f0 	bl	801b158 <iprintf>
      return NULL;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	e001      	b.n	8010d80 <pbuf_alloc+0x1cc>
      break;
 8010d7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3728      	adds	r7, #40	; 0x28
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	0801d92c 	.word	0x0801d92c
 8010d8c:	0801d95c 	.word	0x0801d95c
 8010d90:	0801d98c 	.word	0x0801d98c
 8010d94:	0801d9b4 	.word	0x0801d9b4
 8010d98:	0801d9e8 	.word	0x0801d9e8
 8010d9c:	0801da14 	.word	0x0801da14

08010da0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af02      	add	r7, sp, #8
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	807b      	strh	r3, [r7, #2]
 8010dac:	4613      	mov	r3, r2
 8010dae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010db0:	883b      	ldrh	r3, [r7, #0]
 8010db2:	2b41      	cmp	r3, #65	; 0x41
 8010db4:	d009      	beq.n	8010dca <pbuf_alloc_reference+0x2a>
 8010db6:	883b      	ldrh	r3, [r7, #0]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d006      	beq.n	8010dca <pbuf_alloc_reference+0x2a>
 8010dbc:	4b0f      	ldr	r3, [pc, #60]	; (8010dfc <pbuf_alloc_reference+0x5c>)
 8010dbe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010dc2:	490f      	ldr	r1, [pc, #60]	; (8010e00 <pbuf_alloc_reference+0x60>)
 8010dc4:	480f      	ldr	r0, [pc, #60]	; (8010e04 <pbuf_alloc_reference+0x64>)
 8010dc6:	f00a f9c7 	bl	801b158 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010dca:	200b      	movs	r0, #11
 8010dcc:	f7ff fabc 	bl	8010348 <memp_malloc>
 8010dd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d101      	bne.n	8010ddc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	e00b      	b.n	8010df4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010ddc:	8879      	ldrh	r1, [r7, #2]
 8010dde:	887a      	ldrh	r2, [r7, #2]
 8010de0:	2300      	movs	r3, #0
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	883b      	ldrh	r3, [r7, #0]
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	460b      	mov	r3, r1
 8010dea:	6879      	ldr	r1, [r7, #4]
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f7ff feb7 	bl	8010b60 <pbuf_init_alloced_pbuf>
  return p;
 8010df2:	68fb      	ldr	r3, [r7, #12]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	0801d92c 	.word	0x0801d92c
 8010e00:	0801da30 	.word	0x0801da30
 8010e04:	0801d98c 	.word	0x0801d98c

08010e08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b088      	sub	sp, #32
 8010e0c:	af02      	add	r7, sp, #8
 8010e0e:	607b      	str	r3, [r7, #4]
 8010e10:	4603      	mov	r3, r0
 8010e12:	73fb      	strb	r3, [r7, #15]
 8010e14:	460b      	mov	r3, r1
 8010e16:	81bb      	strh	r3, [r7, #12]
 8010e18:	4613      	mov	r3, r2
 8010e1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
 8010e1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010e20:	8a7b      	ldrh	r3, [r7, #18]
 8010e22:	3303      	adds	r3, #3
 8010e24:	f023 0203 	bic.w	r2, r3, #3
 8010e28:	89bb      	ldrh	r3, [r7, #12]
 8010e2a:	441a      	add	r2, r3
 8010e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d901      	bls.n	8010e36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010e32:	2300      	movs	r3, #0
 8010e34:	e018      	b.n	8010e68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010e36:	6a3b      	ldr	r3, [r7, #32]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d007      	beq.n	8010e4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010e3c:	8a7b      	ldrh	r3, [r7, #18]
 8010e3e:	3303      	adds	r3, #3
 8010e40:	f023 0303 	bic.w	r3, r3, #3
 8010e44:	6a3a      	ldr	r2, [r7, #32]
 8010e46:	4413      	add	r3, r2
 8010e48:	617b      	str	r3, [r7, #20]
 8010e4a:	e001      	b.n	8010e50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	89b9      	ldrh	r1, [r7, #12]
 8010e54:	89ba      	ldrh	r2, [r7, #12]
 8010e56:	2302      	movs	r3, #2
 8010e58:	9301      	str	r3, [sp, #4]
 8010e5a:	897b      	ldrh	r3, [r7, #10]
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	460b      	mov	r3, r1
 8010e60:	6979      	ldr	r1, [r7, #20]
 8010e62:	f7ff fe7d 	bl	8010b60 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010e66:	687b      	ldr	r3, [r7, #4]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3718      	adds	r7, #24
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	460b      	mov	r3, r1
 8010e7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d106      	bne.n	8010e90 <pbuf_realloc+0x20>
 8010e82:	4b3a      	ldr	r3, [pc, #232]	; (8010f6c <pbuf_realloc+0xfc>)
 8010e84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010e88:	4939      	ldr	r1, [pc, #228]	; (8010f70 <pbuf_realloc+0x100>)
 8010e8a:	483a      	ldr	r0, [pc, #232]	; (8010f74 <pbuf_realloc+0x104>)
 8010e8c:	f00a f964 	bl	801b158 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	891b      	ldrh	r3, [r3, #8]
 8010e94:	887a      	ldrh	r2, [r7, #2]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d263      	bcs.n	8010f62 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	891a      	ldrh	r2, [r3, #8]
 8010e9e:	887b      	ldrh	r3, [r7, #2]
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010ea4:	887b      	ldrh	r3, [r7, #2]
 8010ea6:	817b      	strh	r3, [r7, #10]
  q = p;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010eac:	e018      	b.n	8010ee0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	895b      	ldrh	r3, [r3, #10]
 8010eb2:	897a      	ldrh	r2, [r7, #10]
 8010eb4:	1ad3      	subs	r3, r2, r3
 8010eb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	891a      	ldrh	r2, [r3, #8]
 8010ebc:	893b      	ldrh	r3, [r7, #8]
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d106      	bne.n	8010ee0 <pbuf_realloc+0x70>
 8010ed2:	4b26      	ldr	r3, [pc, #152]	; (8010f6c <pbuf_realloc+0xfc>)
 8010ed4:	f240 12af 	movw	r2, #431	; 0x1af
 8010ed8:	4927      	ldr	r1, [pc, #156]	; (8010f78 <pbuf_realloc+0x108>)
 8010eda:	4826      	ldr	r0, [pc, #152]	; (8010f74 <pbuf_realloc+0x104>)
 8010edc:	f00a f93c 	bl	801b158 <iprintf>
  while (rem_len > q->len) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	895b      	ldrh	r3, [r3, #10]
 8010ee4:	897a      	ldrh	r2, [r7, #10]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d8e1      	bhi.n	8010eae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	7b1b      	ldrb	r3, [r3, #12]
 8010eee:	f003 030f 	and.w	r3, r3, #15
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d121      	bne.n	8010f3a <pbuf_realloc+0xca>
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	895b      	ldrh	r3, [r3, #10]
 8010efa:	897a      	ldrh	r2, [r7, #10]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d01c      	beq.n	8010f3a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	7b5b      	ldrb	r3, [r3, #13]
 8010f04:	f003 0302 	and.w	r3, r3, #2
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d116      	bne.n	8010f3a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	685a      	ldr	r2, [r3, #4]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	897b      	ldrh	r3, [r7, #10]
 8010f18:	4413      	add	r3, r2
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	68f8      	ldr	r0, [r7, #12]
 8010f20:	f7fe ff64 	bl	800fdec <mem_trim>
 8010f24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <pbuf_realloc+0xca>
 8010f2c:	4b0f      	ldr	r3, [pc, #60]	; (8010f6c <pbuf_realloc+0xfc>)
 8010f2e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010f32:	4912      	ldr	r1, [pc, #72]	; (8010f7c <pbuf_realloc+0x10c>)
 8010f34:	480f      	ldr	r0, [pc, #60]	; (8010f74 <pbuf_realloc+0x104>)
 8010f36:	f00a f90f 	bl	801b158 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	897a      	ldrh	r2, [r7, #10]
 8010f3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	895a      	ldrh	r2, [r3, #10]
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d004      	beq.n	8010f5a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 f943 	bl	80111e0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	601a      	str	r2, [r3, #0]
 8010f60:	e000      	b.n	8010f64 <pbuf_realloc+0xf4>
    return;
 8010f62:	bf00      	nop

}
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	0801d92c 	.word	0x0801d92c
 8010f70:	0801da44 	.word	0x0801da44
 8010f74:	0801d98c 	.word	0x0801d98c
 8010f78:	0801da5c 	.word	0x0801da5c
 8010f7c:	0801da74 	.word	0x0801da74

08010f80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b086      	sub	sp, #24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d106      	bne.n	8010fa2 <pbuf_add_header_impl+0x22>
 8010f94:	4b2b      	ldr	r3, [pc, #172]	; (8011044 <pbuf_add_header_impl+0xc4>)
 8010f96:	f240 12df 	movw	r2, #479	; 0x1df
 8010f9a:	492b      	ldr	r1, [pc, #172]	; (8011048 <pbuf_add_header_impl+0xc8>)
 8010f9c:	482b      	ldr	r0, [pc, #172]	; (801104c <pbuf_add_header_impl+0xcc>)
 8010f9e:	f00a f8db 	bl	801b158 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d003      	beq.n	8010fb0 <pbuf_add_header_impl+0x30>
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010fae:	d301      	bcc.n	8010fb4 <pbuf_add_header_impl+0x34>
    return 1;
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e043      	b.n	801103c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d101      	bne.n	8010fbe <pbuf_add_header_impl+0x3e>
    return 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e03e      	b.n	801103c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	891a      	ldrh	r2, [r3, #8]
 8010fc6:	8a7b      	ldrh	r3, [r7, #18]
 8010fc8:	4413      	add	r3, r2
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	8a7a      	ldrh	r2, [r7, #18]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d901      	bls.n	8010fd6 <pbuf_add_header_impl+0x56>
    return 1;
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	e032      	b.n	801103c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	7b1b      	ldrb	r3, [r3, #12]
 8010fda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010fdc:	8a3b      	ldrh	r3, [r7, #16]
 8010fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00c      	beq.n	8011000 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	685a      	ldr	r2, [r3, #4]
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	425b      	negs	r3, r3
 8010fee:	4413      	add	r3, r2
 8010ff0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	3310      	adds	r3, #16
 8010ff6:	697a      	ldr	r2, [r7, #20]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d20d      	bcs.n	8011018 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e01d      	b.n	801103c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011000:	79fb      	ldrb	r3, [r7, #7]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d006      	beq.n	8011014 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	685a      	ldr	r2, [r3, #4]
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	425b      	negs	r3, r3
 801100e:	4413      	add	r3, r2
 8011010:	617b      	str	r3, [r7, #20]
 8011012:	e001      	b.n	8011018 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011014:	2301      	movs	r3, #1
 8011016:	e011      	b.n	801103c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	697a      	ldr	r2, [r7, #20]
 801101c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	895a      	ldrh	r2, [r3, #10]
 8011022:	8a7b      	ldrh	r3, [r7, #18]
 8011024:	4413      	add	r3, r2
 8011026:	b29a      	uxth	r2, r3
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	891a      	ldrh	r2, [r3, #8]
 8011030:	8a7b      	ldrh	r3, [r7, #18]
 8011032:	4413      	add	r3, r2
 8011034:	b29a      	uxth	r2, r3
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	811a      	strh	r2, [r3, #8]


  return 0;
 801103a:	2300      	movs	r3, #0
}
 801103c:	4618      	mov	r0, r3
 801103e:	3718      	adds	r7, #24
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	0801d92c 	.word	0x0801d92c
 8011048:	0801da90 	.word	0x0801da90
 801104c:	0801d98c 	.word	0x0801d98c

08011050 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801105a:	2200      	movs	r2, #0
 801105c:	6839      	ldr	r1, [r7, #0]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f7ff ff8e 	bl	8010f80 <pbuf_add_header_impl>
 8011064:	4603      	mov	r3, r0
}
 8011066:	4618      	mov	r0, r3
 8011068:	3708      	adds	r7, #8
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
	...

08011070 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d106      	bne.n	801108e <pbuf_remove_header+0x1e>
 8011080:	4b20      	ldr	r3, [pc, #128]	; (8011104 <pbuf_remove_header+0x94>)
 8011082:	f240 224b 	movw	r2, #587	; 0x24b
 8011086:	4920      	ldr	r1, [pc, #128]	; (8011108 <pbuf_remove_header+0x98>)
 8011088:	4820      	ldr	r0, [pc, #128]	; (801110c <pbuf_remove_header+0x9c>)
 801108a:	f00a f865 	bl	801b158 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d003      	beq.n	801109c <pbuf_remove_header+0x2c>
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801109a:	d301      	bcc.n	80110a0 <pbuf_remove_header+0x30>
    return 1;
 801109c:	2301      	movs	r3, #1
 801109e:	e02c      	b.n	80110fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d101      	bne.n	80110aa <pbuf_remove_header+0x3a>
    return 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	e027      	b.n	80110fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	895b      	ldrh	r3, [r3, #10]
 80110b2:	89fa      	ldrh	r2, [r7, #14]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d908      	bls.n	80110ca <pbuf_remove_header+0x5a>
 80110b8:	4b12      	ldr	r3, [pc, #72]	; (8011104 <pbuf_remove_header+0x94>)
 80110ba:	f240 2255 	movw	r2, #597	; 0x255
 80110be:	4914      	ldr	r1, [pc, #80]	; (8011110 <pbuf_remove_header+0xa0>)
 80110c0:	4812      	ldr	r0, [pc, #72]	; (801110c <pbuf_remove_header+0x9c>)
 80110c2:	f00a f849 	bl	801b158 <iprintf>
 80110c6:	2301      	movs	r3, #1
 80110c8:	e017      	b.n	80110fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	685a      	ldr	r2, [r3, #4]
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	441a      	add	r2, r3
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	895a      	ldrh	r2, [r3, #10]
 80110e0:	89fb      	ldrh	r3, [r7, #14]
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	b29a      	uxth	r2, r3
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	891a      	ldrh	r2, [r3, #8]
 80110ee:	89fb      	ldrh	r3, [r7, #14]
 80110f0:	1ad3      	subs	r3, r2, r3
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	0801d92c 	.word	0x0801d92c
 8011108:	0801da90 	.word	0x0801da90
 801110c:	0801d98c 	.word	0x0801d98c
 8011110:	0801da9c 	.word	0x0801da9c

08011114 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	460b      	mov	r3, r1
 801111e:	807b      	strh	r3, [r7, #2]
 8011120:	4613      	mov	r3, r2
 8011122:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011124:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011128:	2b00      	cmp	r3, #0
 801112a:	da08      	bge.n	801113e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801112c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011130:	425b      	negs	r3, r3
 8011132:	4619      	mov	r1, r3
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f7ff ff9b 	bl	8011070 <pbuf_remove_header>
 801113a:	4603      	mov	r3, r0
 801113c:	e007      	b.n	801114e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801113e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011142:	787a      	ldrb	r2, [r7, #1]
 8011144:	4619      	mov	r1, r3
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f7ff ff1a 	bl	8010f80 <pbuf_add_header_impl>
 801114c:	4603      	mov	r3, r0
  }
}
 801114e:	4618      	mov	r0, r3
 8011150:	3708      	adds	r7, #8
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b082      	sub	sp, #8
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
 801115e:	460b      	mov	r3, r1
 8011160:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011166:	2201      	movs	r2, #1
 8011168:	4619      	mov	r1, r3
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7ff ffd2 	bl	8011114 <pbuf_header_impl>
 8011170:	4603      	mov	r3, r0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b086      	sub	sp, #24
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	460b      	mov	r3, r1
 8011184:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 801118a:	887b      	ldrh	r3, [r7, #2]
 801118c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801118e:	e01c      	b.n	80111ca <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	895b      	ldrh	r3, [r3, #10]
 8011194:	8a7a      	ldrh	r2, [r7, #18]
 8011196:	429a      	cmp	r2, r3
 8011198:	d310      	bcc.n	80111bc <pbuf_free_header+0x42>
      struct pbuf *f = p;
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	895b      	ldrh	r3, [r3, #10]
 80111a2:	8a7a      	ldrh	r2, [r7, #18]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2200      	movs	r2, #0
 80111b2:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f000 f813 	bl	80111e0 <pbuf_free>
 80111ba:	e006      	b.n	80111ca <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 80111bc:	8a7b      	ldrh	r3, [r7, #18]
 80111be:	4619      	mov	r1, r3
 80111c0:	6978      	ldr	r0, [r7, #20]
 80111c2:	f7ff ff55 	bl	8011070 <pbuf_remove_header>
      free_left = 0;
 80111c6:	2300      	movs	r3, #0
 80111c8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80111ca:	8a7b      	ldrh	r3, [r7, #18]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <pbuf_free_header+0x5c>
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1dc      	bne.n	8011190 <pbuf_free_header+0x16>
    }
  }
  return p;
 80111d6:	697b      	ldr	r3, [r7, #20]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3718      	adds	r7, #24
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b088      	sub	sp, #32
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d10b      	bne.n	8011206 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d106      	bne.n	8011202 <pbuf_free+0x22>
 80111f4:	4b3b      	ldr	r3, [pc, #236]	; (80112e4 <pbuf_free+0x104>)
 80111f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80111fa:	493b      	ldr	r1, [pc, #236]	; (80112e8 <pbuf_free+0x108>)
 80111fc:	483b      	ldr	r0, [pc, #236]	; (80112ec <pbuf_free+0x10c>)
 80111fe:	f009 ffab 	bl	801b158 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011202:	2300      	movs	r3, #0
 8011204:	e069      	b.n	80112da <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011206:	2300      	movs	r3, #0
 8011208:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801120a:	e062      	b.n	80112d2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801120c:	f009 fe86 	bl	801af1c <sys_arch_protect>
 8011210:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	7b9b      	ldrb	r3, [r3, #14]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <pbuf_free+0x48>
 801121a:	4b32      	ldr	r3, [pc, #200]	; (80112e4 <pbuf_free+0x104>)
 801121c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011220:	4933      	ldr	r1, [pc, #204]	; (80112f0 <pbuf_free+0x110>)
 8011222:	4832      	ldr	r0, [pc, #200]	; (80112ec <pbuf_free+0x10c>)
 8011224:	f009 ff98 	bl	801b158 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	7b9b      	ldrb	r3, [r3, #14]
 801122c:	3b01      	subs	r3, #1
 801122e:	b2da      	uxtb	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	739a      	strb	r2, [r3, #14]
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7b9b      	ldrb	r3, [r3, #14]
 8011238:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801123a:	69b8      	ldr	r0, [r7, #24]
 801123c:	f009 fe7c 	bl	801af38 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d143      	bne.n	80112ce <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	7b1b      	ldrb	r3, [r3, #12]
 8011250:	f003 030f 	and.w	r3, r3, #15
 8011254:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	7b5b      	ldrb	r3, [r3, #13]
 801125a:	f003 0302 	and.w	r3, r3, #2
 801125e:	2b00      	cmp	r3, #0
 8011260:	d011      	beq.n	8011286 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	691b      	ldr	r3, [r3, #16]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d106      	bne.n	801127c <pbuf_free+0x9c>
 801126e:	4b1d      	ldr	r3, [pc, #116]	; (80112e4 <pbuf_free+0x104>)
 8011270:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011274:	491f      	ldr	r1, [pc, #124]	; (80112f4 <pbuf_free+0x114>)
 8011276:	481d      	ldr	r0, [pc, #116]	; (80112ec <pbuf_free+0x10c>)
 8011278:	f009 ff6e 	bl	801b158 <iprintf>
        pc->custom_free_function(p);
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	4798      	blx	r3
 8011284:	e01d      	b.n	80112c2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011286:	7bfb      	ldrb	r3, [r7, #15]
 8011288:	2b02      	cmp	r3, #2
 801128a:	d104      	bne.n	8011296 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801128c:	6879      	ldr	r1, [r7, #4]
 801128e:	200c      	movs	r0, #12
 8011290:	f7ff f8d0 	bl	8010434 <memp_free>
 8011294:	e015      	b.n	80112c2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011296:	7bfb      	ldrb	r3, [r7, #15]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d104      	bne.n	80112a6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801129c:	6879      	ldr	r1, [r7, #4]
 801129e:	200b      	movs	r0, #11
 80112a0:	f7ff f8c8 	bl	8010434 <memp_free>
 80112a4:	e00d      	b.n	80112c2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80112a6:	7bfb      	ldrb	r3, [r7, #15]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d103      	bne.n	80112b4 <pbuf_free+0xd4>
          mem_free(p);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7fe fd0d 	bl	800fccc <mem_free>
 80112b2:	e006      	b.n	80112c2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80112b4:	4b0b      	ldr	r3, [pc, #44]	; (80112e4 <pbuf_free+0x104>)
 80112b6:	f240 320f 	movw	r2, #783	; 0x30f
 80112ba:	490f      	ldr	r1, [pc, #60]	; (80112f8 <pbuf_free+0x118>)
 80112bc:	480b      	ldr	r0, [pc, #44]	; (80112ec <pbuf_free+0x10c>)
 80112be:	f009 ff4b 	bl	801b158 <iprintf>
        }
      }
      count++;
 80112c2:	7ffb      	ldrb	r3, [r7, #31]
 80112c4:	3301      	adds	r3, #1
 80112c6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	607b      	str	r3, [r7, #4]
 80112cc:	e001      	b.n	80112d2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80112ce:	2300      	movs	r3, #0
 80112d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d199      	bne.n	801120c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80112d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3720      	adds	r7, #32
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	0801d92c 	.word	0x0801d92c
 80112e8:	0801da90 	.word	0x0801da90
 80112ec:	0801d98c 	.word	0x0801d98c
 80112f0:	0801dabc 	.word	0x0801dabc
 80112f4:	0801dad4 	.word	0x0801dad4
 80112f8:	0801daf8 	.word	0x0801daf8

080112fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011304:	2300      	movs	r3, #0
 8011306:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011308:	e005      	b.n	8011316 <pbuf_clen+0x1a>
    ++len;
 801130a:	89fb      	ldrh	r3, [r7, #14]
 801130c:	3301      	adds	r3, #1
 801130e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d1f6      	bne.n	801130a <pbuf_clen+0xe>
  }
  return len;
 801131c:	89fb      	ldrh	r3, [r7, #14]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3714      	adds	r7, #20
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
	...

0801132c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d016      	beq.n	8011368 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801133a:	f009 fdef 	bl	801af1c <sys_arch_protect>
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	7b9b      	ldrb	r3, [r3, #14]
 8011344:	3301      	adds	r3, #1
 8011346:	b2da      	uxtb	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	739a      	strb	r2, [r3, #14]
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f009 fdf3 	bl	801af38 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	7b9b      	ldrb	r3, [r3, #14]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d106      	bne.n	8011368 <pbuf_ref+0x3c>
 801135a:	4b05      	ldr	r3, [pc, #20]	; (8011370 <pbuf_ref+0x44>)
 801135c:	f240 3242 	movw	r2, #834	; 0x342
 8011360:	4904      	ldr	r1, [pc, #16]	; (8011374 <pbuf_ref+0x48>)
 8011362:	4805      	ldr	r0, [pc, #20]	; (8011378 <pbuf_ref+0x4c>)
 8011364:	f009 fef8 	bl	801b158 <iprintf>
  }
}
 8011368:	bf00      	nop
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}
 8011370:	0801d92c 	.word	0x0801d92c
 8011374:	0801db0c 	.word	0x0801db0c
 8011378:	0801d98c 	.word	0x0801d98c

0801137c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d002      	beq.n	8011392 <pbuf_cat+0x16>
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d107      	bne.n	80113a2 <pbuf_cat+0x26>
 8011392:	4b20      	ldr	r3, [pc, #128]	; (8011414 <pbuf_cat+0x98>)
 8011394:	f240 3259 	movw	r2, #857	; 0x359
 8011398:	491f      	ldr	r1, [pc, #124]	; (8011418 <pbuf_cat+0x9c>)
 801139a:	4820      	ldr	r0, [pc, #128]	; (801141c <pbuf_cat+0xa0>)
 801139c:	f009 fedc 	bl	801b158 <iprintf>
 80113a0:	e034      	b.n	801140c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	e00a      	b.n	80113be <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	891a      	ldrh	r2, [r3, #8]
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	891b      	ldrh	r3, [r3, #8]
 80113b0:	4413      	add	r3, r2
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	60fb      	str	r3, [r7, #12]
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d1f0      	bne.n	80113a8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	891a      	ldrh	r2, [r3, #8]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	895b      	ldrh	r3, [r3, #10]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d006      	beq.n	80113e0 <pbuf_cat+0x64>
 80113d2:	4b10      	ldr	r3, [pc, #64]	; (8011414 <pbuf_cat+0x98>)
 80113d4:	f240 3262 	movw	r2, #866	; 0x362
 80113d8:	4911      	ldr	r1, [pc, #68]	; (8011420 <pbuf_cat+0xa4>)
 80113da:	4810      	ldr	r0, [pc, #64]	; (801141c <pbuf_cat+0xa0>)
 80113dc:	f009 febc 	bl	801b158 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d006      	beq.n	80113f6 <pbuf_cat+0x7a>
 80113e8:	4b0a      	ldr	r3, [pc, #40]	; (8011414 <pbuf_cat+0x98>)
 80113ea:	f240 3263 	movw	r2, #867	; 0x363
 80113ee:	490d      	ldr	r1, [pc, #52]	; (8011424 <pbuf_cat+0xa8>)
 80113f0:	480a      	ldr	r0, [pc, #40]	; (801141c <pbuf_cat+0xa0>)
 80113f2:	f009 feb1 	bl	801b158 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	891a      	ldrh	r2, [r3, #8]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	891b      	ldrh	r3, [r3, #8]
 80113fe:	4413      	add	r3, r2
 8011400:	b29a      	uxth	r2, r3
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	0801d92c 	.word	0x0801d92c
 8011418:	0801db20 	.word	0x0801db20
 801141c:	0801d98c 	.word	0x0801d98c
 8011420:	0801db58 	.word	0x0801db58
 8011424:	0801db88 	.word	0x0801db88

08011428 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011432:	6839      	ldr	r1, [r7, #0]
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7ff ffa1 	bl	801137c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801143a:	6838      	ldr	r0, [r7, #0]
 801143c:	f7ff ff76 	bl	801132c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011440:	bf00      	nop
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011452:	2300      	movs	r3, #0
 8011454:	617b      	str	r3, [r7, #20]
 8011456:	2300      	movs	r3, #0
 8011458:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d008      	beq.n	8011472 <pbuf_copy+0x2a>
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d005      	beq.n	8011472 <pbuf_copy+0x2a>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	891a      	ldrh	r2, [r3, #8]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	891b      	ldrh	r3, [r3, #8]
 801146e:	429a      	cmp	r2, r3
 8011470:	d209      	bcs.n	8011486 <pbuf_copy+0x3e>
 8011472:	4b57      	ldr	r3, [pc, #348]	; (80115d0 <pbuf_copy+0x188>)
 8011474:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011478:	4956      	ldr	r1, [pc, #344]	; (80115d4 <pbuf_copy+0x18c>)
 801147a:	4857      	ldr	r0, [pc, #348]	; (80115d8 <pbuf_copy+0x190>)
 801147c:	f009 fe6c 	bl	801b158 <iprintf>
 8011480:	f06f 030f 	mvn.w	r3, #15
 8011484:	e09f      	b.n	80115c6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	895b      	ldrh	r3, [r3, #10]
 801148a:	461a      	mov	r2, r3
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	1ad2      	subs	r2, r2, r3
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	895b      	ldrh	r3, [r3, #10]
 8011494:	4619      	mov	r1, r3
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	1acb      	subs	r3, r1, r3
 801149a:	429a      	cmp	r2, r3
 801149c:	d306      	bcc.n	80114ac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	895b      	ldrh	r3, [r3, #10]
 80114a2:	461a      	mov	r2, r3
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	60fb      	str	r3, [r7, #12]
 80114aa:	e005      	b.n	80114b8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	895b      	ldrh	r3, [r3, #10]
 80114b0:	461a      	mov	r2, r3
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	1ad3      	subs	r3, r2, r3
 80114b6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	18d0      	adds	r0, r2, r3
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	685a      	ldr	r2, [r3, #4]
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	4413      	add	r3, r2
 80114c8:	68fa      	ldr	r2, [r7, #12]
 80114ca:	4619      	mov	r1, r3
 80114cc:	f00a f865 	bl	801b59a <memcpy>
    offset_to += len;
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	4413      	add	r3, r2
 80114d6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80114d8:	693a      	ldr	r2, [r7, #16]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4413      	add	r3, r2
 80114de:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	895b      	ldrh	r3, [r3, #10]
 80114e4:	461a      	mov	r2, r3
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d906      	bls.n	80114fa <pbuf_copy+0xb2>
 80114ec:	4b38      	ldr	r3, [pc, #224]	; (80115d0 <pbuf_copy+0x188>)
 80114ee:	f240 32d9 	movw	r2, #985	; 0x3d9
 80114f2:	493a      	ldr	r1, [pc, #232]	; (80115dc <pbuf_copy+0x194>)
 80114f4:	4838      	ldr	r0, [pc, #224]	; (80115d8 <pbuf_copy+0x190>)
 80114f6:	f009 fe2f 	bl	801b158 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	895b      	ldrh	r3, [r3, #10]
 80114fe:	461a      	mov	r2, r3
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	4293      	cmp	r3, r2
 8011504:	d906      	bls.n	8011514 <pbuf_copy+0xcc>
 8011506:	4b32      	ldr	r3, [pc, #200]	; (80115d0 <pbuf_copy+0x188>)
 8011508:	f240 32da 	movw	r2, #986	; 0x3da
 801150c:	4934      	ldr	r1, [pc, #208]	; (80115e0 <pbuf_copy+0x198>)
 801150e:	4832      	ldr	r0, [pc, #200]	; (80115d8 <pbuf_copy+0x190>)
 8011510:	f009 fe22 	bl	801b158 <iprintf>
    if (offset_from >= p_from->len) {
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	895b      	ldrh	r3, [r3, #10]
 8011518:	461a      	mov	r2, r3
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	4293      	cmp	r3, r2
 801151e:	d304      	bcc.n	801152a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011520:	2300      	movs	r3, #0
 8011522:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	895b      	ldrh	r3, [r3, #10]
 801152e:	461a      	mov	r2, r3
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	4293      	cmp	r3, r2
 8011534:	d114      	bne.n	8011560 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d10c      	bne.n	8011560 <pbuf_copy+0x118>
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d009      	beq.n	8011560 <pbuf_copy+0x118>
 801154c:	4b20      	ldr	r3, [pc, #128]	; (80115d0 <pbuf_copy+0x188>)
 801154e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011552:	4924      	ldr	r1, [pc, #144]	; (80115e4 <pbuf_copy+0x19c>)
 8011554:	4820      	ldr	r0, [pc, #128]	; (80115d8 <pbuf_copy+0x190>)
 8011556:	f009 fdff 	bl	801b158 <iprintf>
 801155a:	f06f 030f 	mvn.w	r3, #15
 801155e:	e032      	b.n	80115c6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d013      	beq.n	801158e <pbuf_copy+0x146>
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	895a      	ldrh	r2, [r3, #10]
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	891b      	ldrh	r3, [r3, #8]
 801156e:	429a      	cmp	r2, r3
 8011570:	d10d      	bne.n	801158e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d009      	beq.n	801158e <pbuf_copy+0x146>
 801157a:	4b15      	ldr	r3, [pc, #84]	; (80115d0 <pbuf_copy+0x188>)
 801157c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011580:	4919      	ldr	r1, [pc, #100]	; (80115e8 <pbuf_copy+0x1a0>)
 8011582:	4815      	ldr	r0, [pc, #84]	; (80115d8 <pbuf_copy+0x190>)
 8011584:	f009 fde8 	bl	801b158 <iprintf>
 8011588:	f06f 0305 	mvn.w	r3, #5
 801158c:	e01b      	b.n	80115c6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d013      	beq.n	80115bc <pbuf_copy+0x174>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	895a      	ldrh	r2, [r3, #10]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	429a      	cmp	r2, r3
 801159e:	d10d      	bne.n	80115bc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d009      	beq.n	80115bc <pbuf_copy+0x174>
 80115a8:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <pbuf_copy+0x188>)
 80115aa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80115ae:	490e      	ldr	r1, [pc, #56]	; (80115e8 <pbuf_copy+0x1a0>)
 80115b0:	4809      	ldr	r0, [pc, #36]	; (80115d8 <pbuf_copy+0x190>)
 80115b2:	f009 fdd1 	bl	801b158 <iprintf>
 80115b6:	f06f 0305 	mvn.w	r3, #5
 80115ba:	e004      	b.n	80115c6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f47f af61 	bne.w	8011486 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80115c4:	2300      	movs	r3, #0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3718      	adds	r7, #24
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	0801d92c 	.word	0x0801d92c
 80115d4:	0801dbd4 	.word	0x0801dbd4
 80115d8:	0801d98c 	.word	0x0801d98c
 80115dc:	0801dc04 	.word	0x0801dc04
 80115e0:	0801dc1c 	.word	0x0801dc1c
 80115e4:	0801dc38 	.word	0x0801dc38
 80115e8:	0801dc48 	.word	0x0801dc48

080115ec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	4611      	mov	r1, r2
 80115f8:	461a      	mov	r2, r3
 80115fa:	460b      	mov	r3, r1
 80115fc:	80fb      	strh	r3, [r7, #6]
 80115fe:	4613      	mov	r3, r2
 8011600:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011602:	2300      	movs	r3, #0
 8011604:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d108      	bne.n	8011622 <pbuf_copy_partial+0x36>
 8011610:	4b2b      	ldr	r3, [pc, #172]	; (80116c0 <pbuf_copy_partial+0xd4>)
 8011612:	f240 420a 	movw	r2, #1034	; 0x40a
 8011616:	492b      	ldr	r1, [pc, #172]	; (80116c4 <pbuf_copy_partial+0xd8>)
 8011618:	482b      	ldr	r0, [pc, #172]	; (80116c8 <pbuf_copy_partial+0xdc>)
 801161a:	f009 fd9d 	bl	801b158 <iprintf>
 801161e:	2300      	movs	r3, #0
 8011620:	e04a      	b.n	80116b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d108      	bne.n	801163a <pbuf_copy_partial+0x4e>
 8011628:	4b25      	ldr	r3, [pc, #148]	; (80116c0 <pbuf_copy_partial+0xd4>)
 801162a:	f240 420b 	movw	r2, #1035	; 0x40b
 801162e:	4927      	ldr	r1, [pc, #156]	; (80116cc <pbuf_copy_partial+0xe0>)
 8011630:	4825      	ldr	r0, [pc, #148]	; (80116c8 <pbuf_copy_partial+0xdc>)
 8011632:	f009 fd91 	bl	801b158 <iprintf>
 8011636:	2300      	movs	r3, #0
 8011638:	e03e      	b.n	80116b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	61fb      	str	r3, [r7, #28]
 801163e:	e034      	b.n	80116aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011640:	88bb      	ldrh	r3, [r7, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d00a      	beq.n	801165c <pbuf_copy_partial+0x70>
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	895b      	ldrh	r3, [r3, #10]
 801164a:	88ba      	ldrh	r2, [r7, #4]
 801164c:	429a      	cmp	r2, r3
 801164e:	d305      	bcc.n	801165c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	895b      	ldrh	r3, [r3, #10]
 8011654:	88ba      	ldrh	r2, [r7, #4]
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	80bb      	strh	r3, [r7, #4]
 801165a:	e023      	b.n	80116a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	895a      	ldrh	r2, [r3, #10]
 8011660:	88bb      	ldrh	r3, [r7, #4]
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011666:	8b3a      	ldrh	r2, [r7, #24]
 8011668:	88fb      	ldrh	r3, [r7, #6]
 801166a:	429a      	cmp	r2, r3
 801166c:	d901      	bls.n	8011672 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801166e:	88fb      	ldrh	r3, [r7, #6]
 8011670:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011672:	8b7b      	ldrh	r3, [r7, #26]
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	18d0      	adds	r0, r2, r3
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	88bb      	ldrh	r3, [r7, #4]
 801167e:	4413      	add	r3, r2
 8011680:	8b3a      	ldrh	r2, [r7, #24]
 8011682:	4619      	mov	r1, r3
 8011684:	f009 ff89 	bl	801b59a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011688:	8afa      	ldrh	r2, [r7, #22]
 801168a:	8b3b      	ldrh	r3, [r7, #24]
 801168c:	4413      	add	r3, r2
 801168e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011690:	8b7a      	ldrh	r2, [r7, #26]
 8011692:	8b3b      	ldrh	r3, [r7, #24]
 8011694:	4413      	add	r3, r2
 8011696:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011698:	88fa      	ldrh	r2, [r7, #6]
 801169a:	8b3b      	ldrh	r3, [r7, #24]
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80116a0:	2300      	movs	r3, #0
 80116a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	61fb      	str	r3, [r7, #28]
 80116aa:	88fb      	ldrh	r3, [r7, #6]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d002      	beq.n	80116b6 <pbuf_copy_partial+0xca>
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1c4      	bne.n	8011640 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80116b6:	8afb      	ldrh	r3, [r7, #22]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3720      	adds	r7, #32
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	0801d92c 	.word	0x0801d92c
 80116c4:	0801dc74 	.word	0x0801dc74
 80116c8:	0801d98c 	.word	0x0801d98c
 80116cc:	0801dc94 	.word	0x0801dc94

080116d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	4603      	mov	r3, r0
 80116d8:	603a      	str	r2, [r7, #0]
 80116da:	71fb      	strb	r3, [r7, #7]
 80116dc:	460b      	mov	r3, r1
 80116de:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	8919      	ldrh	r1, [r3, #8]
 80116e4:	88ba      	ldrh	r2, [r7, #4]
 80116e6:	79fb      	ldrb	r3, [r7, #7]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7ff fa63 	bl	8010bb4 <pbuf_alloc>
 80116ee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <pbuf_clone+0x2a>
    return NULL;
 80116f6:	2300      	movs	r3, #0
 80116f8:	e011      	b.n	801171e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80116fa:	6839      	ldr	r1, [r7, #0]
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f7ff fea3 	bl	8011448 <pbuf_copy>
 8011702:	4603      	mov	r3, r0
 8011704:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011706:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d006      	beq.n	801171c <pbuf_clone+0x4c>
 801170e:	4b06      	ldr	r3, [pc, #24]	; (8011728 <pbuf_clone+0x58>)
 8011710:	f240 5224 	movw	r2, #1316	; 0x524
 8011714:	4905      	ldr	r1, [pc, #20]	; (801172c <pbuf_clone+0x5c>)
 8011716:	4806      	ldr	r0, [pc, #24]	; (8011730 <pbuf_clone+0x60>)
 8011718:	f009 fd1e 	bl	801b158 <iprintf>
  return q;
 801171c:	68fb      	ldr	r3, [r7, #12]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3710      	adds	r7, #16
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	0801d92c 	.word	0x0801d92c
 801172c:	0801dda0 	.word	0x0801dda0
 8011730:	0801d98c 	.word	0x0801d98c

08011734 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011738:	f009 fc0e 	bl	801af58 <rand>
 801173c:	4603      	mov	r3, r0
 801173e:	b29b      	uxth	r3, r3
 8011740:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011744:	b29b      	uxth	r3, r3
 8011746:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801174a:	b29a      	uxth	r2, r3
 801174c:	4b01      	ldr	r3, [pc, #4]	; (8011754 <tcp_init+0x20>)
 801174e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011750:	bf00      	nop
 8011752:	bd80      	pop	{r7, pc}
 8011754:	20000024 	.word	0x20000024

08011758 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	7d1b      	ldrb	r3, [r3, #20]
 8011764:	2b01      	cmp	r3, #1
 8011766:	d105      	bne.n	8011774 <tcp_free+0x1c>
 8011768:	4b06      	ldr	r3, [pc, #24]	; (8011784 <tcp_free+0x2c>)
 801176a:	22d4      	movs	r2, #212	; 0xd4
 801176c:	4906      	ldr	r1, [pc, #24]	; (8011788 <tcp_free+0x30>)
 801176e:	4807      	ldr	r0, [pc, #28]	; (801178c <tcp_free+0x34>)
 8011770:	f009 fcf2 	bl	801b158 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011774:	6879      	ldr	r1, [r7, #4]
 8011776:	2001      	movs	r0, #1
 8011778:	f7fe fe5c 	bl	8010434 <memp_free>
}
 801177c:	bf00      	nop
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	0801de2c 	.word	0x0801de2c
 8011788:	0801de5c 	.word	0x0801de5c
 801178c:	0801de70 	.word	0x0801de70

08011790 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7d1b      	ldrb	r3, [r3, #20]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d105      	bne.n	80117ac <tcp_free_listen+0x1c>
 80117a0:	4b06      	ldr	r3, [pc, #24]	; (80117bc <tcp_free_listen+0x2c>)
 80117a2:	22df      	movs	r2, #223	; 0xdf
 80117a4:	4906      	ldr	r1, [pc, #24]	; (80117c0 <tcp_free_listen+0x30>)
 80117a6:	4807      	ldr	r0, [pc, #28]	; (80117c4 <tcp_free_listen+0x34>)
 80117a8:	f009 fcd6 	bl	801b158 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80117ac:	6879      	ldr	r1, [r7, #4]
 80117ae:	2002      	movs	r0, #2
 80117b0:	f7fe fe40 	bl	8010434 <memp_free>
}
 80117b4:	bf00      	nop
 80117b6:	3708      	adds	r7, #8
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	0801de2c 	.word	0x0801de2c
 80117c0:	0801de98 	.word	0x0801de98
 80117c4:	0801de70 	.word	0x0801de70

080117c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80117cc:	f001 f8a6 	bl	801291c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80117d0:	4b07      	ldr	r3, [pc, #28]	; (80117f0 <tcp_tmr+0x28>)
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	3301      	adds	r3, #1
 80117d6:	b2da      	uxtb	r2, r3
 80117d8:	4b05      	ldr	r3, [pc, #20]	; (80117f0 <tcp_tmr+0x28>)
 80117da:	701a      	strb	r2, [r3, #0]
 80117dc:	4b04      	ldr	r3, [pc, #16]	; (80117f0 <tcp_tmr+0x28>)
 80117de:	781b      	ldrb	r3, [r3, #0]
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d001      	beq.n	80117ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80117e8:	f000 fd58 	bl	801229c <tcp_slowtmr>
  }
}
 80117ec:	bf00      	nop
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	2003d0f1 	.word	0x2003d0f1

080117f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d105      	bne.n	8011810 <tcp_remove_listener+0x1c>
 8011804:	4b0d      	ldr	r3, [pc, #52]	; (801183c <tcp_remove_listener+0x48>)
 8011806:	22ff      	movs	r2, #255	; 0xff
 8011808:	490d      	ldr	r1, [pc, #52]	; (8011840 <tcp_remove_listener+0x4c>)
 801180a:	480e      	ldr	r0, [pc, #56]	; (8011844 <tcp_remove_listener+0x50>)
 801180c:	f009 fca4 	bl	801b158 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	e00a      	b.n	801182c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801181a:	683a      	ldr	r2, [r7, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d102      	bne.n	8011826 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2200      	movs	r2, #0
 8011824:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1f1      	bne.n	8011816 <tcp_remove_listener+0x22>
    }
  }
}
 8011832:	bf00      	nop
 8011834:	bf00      	nop
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	0801de2c 	.word	0x0801de2c
 8011840:	0801deb4 	.word	0x0801deb4
 8011844:	0801de70 	.word	0x0801de70

08011848 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d106      	bne.n	8011864 <tcp_listen_closed+0x1c>
 8011856:	4b14      	ldr	r3, [pc, #80]	; (80118a8 <tcp_listen_closed+0x60>)
 8011858:	f240 1211 	movw	r2, #273	; 0x111
 801185c:	4913      	ldr	r1, [pc, #76]	; (80118ac <tcp_listen_closed+0x64>)
 801185e:	4814      	ldr	r0, [pc, #80]	; (80118b0 <tcp_listen_closed+0x68>)
 8011860:	f009 fc7a 	bl	801b158 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	7d1b      	ldrb	r3, [r3, #20]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d006      	beq.n	801187a <tcp_listen_closed+0x32>
 801186c:	4b0e      	ldr	r3, [pc, #56]	; (80118a8 <tcp_listen_closed+0x60>)
 801186e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011872:	4910      	ldr	r1, [pc, #64]	; (80118b4 <tcp_listen_closed+0x6c>)
 8011874:	480e      	ldr	r0, [pc, #56]	; (80118b0 <tcp_listen_closed+0x68>)
 8011876:	f009 fc6f 	bl	801b158 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801187a:	2301      	movs	r3, #1
 801187c:	60fb      	str	r3, [r7, #12]
 801187e:	e00b      	b.n	8011898 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011880:	4a0d      	ldr	r2, [pc, #52]	; (80118b8 <tcp_listen_closed+0x70>)
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	6879      	ldr	r1, [r7, #4]
 801188c:	4618      	mov	r0, r3
 801188e:	f7ff ffb1 	bl	80117f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3301      	adds	r3, #1
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b03      	cmp	r3, #3
 801189c:	d9f0      	bls.n	8011880 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801189e:	bf00      	nop
 80118a0:	bf00      	nop
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	0801de2c 	.word	0x0801de2c
 80118ac:	0801dedc 	.word	0x0801dedc
 80118b0:	0801de70 	.word	0x0801de70
 80118b4:	0801dee8 	.word	0x0801dee8
 80118b8:	0801fe9c 	.word	0x0801fe9c

080118bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80118bc:	b5b0      	push	{r4, r5, r7, lr}
 80118be:	b088      	sub	sp, #32
 80118c0:	af04      	add	r7, sp, #16
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <tcp_close_shutdown+0x20>
 80118ce:	4b63      	ldr	r3, [pc, #396]	; (8011a5c <tcp_close_shutdown+0x1a0>)
 80118d0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80118d4:	4962      	ldr	r1, [pc, #392]	; (8011a60 <tcp_close_shutdown+0x1a4>)
 80118d6:	4863      	ldr	r0, [pc, #396]	; (8011a64 <tcp_close_shutdown+0x1a8>)
 80118d8:	f009 fc3e 	bl	801b158 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80118dc:	78fb      	ldrb	r3, [r7, #3]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d066      	beq.n	80119b0 <tcp_close_shutdown+0xf4>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	7d1b      	ldrb	r3, [r3, #20]
 80118e6:	2b04      	cmp	r3, #4
 80118e8:	d003      	beq.n	80118f2 <tcp_close_shutdown+0x36>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	7d1b      	ldrb	r3, [r3, #20]
 80118ee:	2b07      	cmp	r3, #7
 80118f0:	d15e      	bne.n	80119b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d104      	bne.n	8011904 <tcp_close_shutdown+0x48>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011902:	d055      	beq.n	80119b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	8b5b      	ldrh	r3, [r3, #26]
 8011908:	f003 0310 	and.w	r3, r3, #16
 801190c:	2b00      	cmp	r3, #0
 801190e:	d106      	bne.n	801191e <tcp_close_shutdown+0x62>
 8011910:	4b52      	ldr	r3, [pc, #328]	; (8011a5c <tcp_close_shutdown+0x1a0>)
 8011912:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011916:	4954      	ldr	r1, [pc, #336]	; (8011a68 <tcp_close_shutdown+0x1ac>)
 8011918:	4852      	ldr	r0, [pc, #328]	; (8011a64 <tcp_close_shutdown+0x1a8>)
 801191a:	f009 fc1d 	bl	801b158 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011926:	687d      	ldr	r5, [r7, #4]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3304      	adds	r3, #4
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	8ad2      	ldrh	r2, [r2, #22]
 8011930:	6879      	ldr	r1, [r7, #4]
 8011932:	8b09      	ldrh	r1, [r1, #24]
 8011934:	9102      	str	r1, [sp, #8]
 8011936:	9201      	str	r2, [sp, #4]
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	462b      	mov	r3, r5
 801193c:	4622      	mov	r2, r4
 801193e:	4601      	mov	r1, r0
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f005 fdbb 	bl	80174bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f001 fb98 	bl	801307c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801194c:	4b47      	ldr	r3, [pc, #284]	; (8011a6c <tcp_close_shutdown+0x1b0>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	429a      	cmp	r2, r3
 8011954:	d105      	bne.n	8011962 <tcp_close_shutdown+0xa6>
 8011956:	4b45      	ldr	r3, [pc, #276]	; (8011a6c <tcp_close_shutdown+0x1b0>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	4a43      	ldr	r2, [pc, #268]	; (8011a6c <tcp_close_shutdown+0x1b0>)
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	e013      	b.n	801198a <tcp_close_shutdown+0xce>
 8011962:	4b42      	ldr	r3, [pc, #264]	; (8011a6c <tcp_close_shutdown+0x1b0>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	60fb      	str	r3, [r7, #12]
 8011968:	e00c      	b.n	8011984 <tcp_close_shutdown+0xc8>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	429a      	cmp	r2, r3
 8011972:	d104      	bne.n	801197e <tcp_close_shutdown+0xc2>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	68da      	ldr	r2, [r3, #12]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	60da      	str	r2, [r3, #12]
 801197c:	e005      	b.n	801198a <tcp_close_shutdown+0xce>
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	68db      	ldr	r3, [r3, #12]
 8011982:	60fb      	str	r3, [r7, #12]
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1ef      	bne.n	801196a <tcp_close_shutdown+0xae>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2200      	movs	r2, #0
 801198e:	60da      	str	r2, [r3, #12]
 8011990:	4b37      	ldr	r3, [pc, #220]	; (8011a70 <tcp_close_shutdown+0x1b4>)
 8011992:	2201      	movs	r2, #1
 8011994:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011996:	4b37      	ldr	r3, [pc, #220]	; (8011a74 <tcp_close_shutdown+0x1b8>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	429a      	cmp	r2, r3
 801199e:	d102      	bne.n	80119a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80119a0:	f004 f830 	bl	8015a04 <tcp_trigger_input_pcb_close>
 80119a4:	e002      	b.n	80119ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff fed6 	bl	8011758 <tcp_free>
      }
      return ERR_OK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	e050      	b.n	8011a52 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d03b      	beq.n	8011a30 <tcp_close_shutdown+0x174>
 80119b8:	2b02      	cmp	r3, #2
 80119ba:	dc44      	bgt.n	8011a46 <tcp_close_shutdown+0x18a>
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d002      	beq.n	80119c6 <tcp_close_shutdown+0x10a>
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d02a      	beq.n	8011a1a <tcp_close_shutdown+0x15e>
 80119c4:	e03f      	b.n	8011a46 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	8adb      	ldrh	r3, [r3, #22]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d021      	beq.n	8011a12 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80119ce:	4b2a      	ldr	r3, [pc, #168]	; (8011a78 <tcp_close_shutdown+0x1bc>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d105      	bne.n	80119e4 <tcp_close_shutdown+0x128>
 80119d8:	4b27      	ldr	r3, [pc, #156]	; (8011a78 <tcp_close_shutdown+0x1bc>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	4a26      	ldr	r2, [pc, #152]	; (8011a78 <tcp_close_shutdown+0x1bc>)
 80119e0:	6013      	str	r3, [r2, #0]
 80119e2:	e013      	b.n	8011a0c <tcp_close_shutdown+0x150>
 80119e4:	4b24      	ldr	r3, [pc, #144]	; (8011a78 <tcp_close_shutdown+0x1bc>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	60bb      	str	r3, [r7, #8]
 80119ea:	e00c      	b.n	8011a06 <tcp_close_shutdown+0x14a>
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d104      	bne.n	8011a00 <tcp_close_shutdown+0x144>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68da      	ldr	r2, [r3, #12]
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	60da      	str	r2, [r3, #12]
 80119fe:	e005      	b.n	8011a0c <tcp_close_shutdown+0x150>
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	60bb      	str	r3, [r7, #8]
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1ef      	bne.n	80119ec <tcp_close_shutdown+0x130>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff fea0 	bl	8011758 <tcp_free>
      break;
 8011a18:	e01a      	b.n	8011a50 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7ff ff14 	bl	8011848 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011a20:	6879      	ldr	r1, [r7, #4]
 8011a22:	4816      	ldr	r0, [pc, #88]	; (8011a7c <tcp_close_shutdown+0x1c0>)
 8011a24:	f001 fb7a 	bl	801311c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7ff feb1 	bl	8011790 <tcp_free_listen>
      break;
 8011a2e:	e00f      	b.n	8011a50 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011a30:	6879      	ldr	r1, [r7, #4]
 8011a32:	480e      	ldr	r0, [pc, #56]	; (8011a6c <tcp_close_shutdown+0x1b0>)
 8011a34:	f001 fb72 	bl	801311c <tcp_pcb_remove>
 8011a38:	4b0d      	ldr	r3, [pc, #52]	; (8011a70 <tcp_close_shutdown+0x1b4>)
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f7ff fe8a 	bl	8011758 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011a44:	e004      	b.n	8011a50 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 f81a 	bl	8011a80 <tcp_close_shutdown_fin>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	e000      	b.n	8011a52 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bdb0      	pop	{r4, r5, r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	0801de2c 	.word	0x0801de2c
 8011a60:	0801df00 	.word	0x0801df00
 8011a64:	0801de70 	.word	0x0801de70
 8011a68:	0801df20 	.word	0x0801df20
 8011a6c:	2003d0e8 	.word	0x2003d0e8
 8011a70:	2003d0f0 	.word	0x2003d0f0
 8011a74:	2003d128 	.word	0x2003d128
 8011a78:	2003d0e0 	.word	0x2003d0e0
 8011a7c:	2003d0e4 	.word	0x2003d0e4

08011a80 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d106      	bne.n	8011a9c <tcp_close_shutdown_fin+0x1c>
 8011a8e:	4b2e      	ldr	r3, [pc, #184]	; (8011b48 <tcp_close_shutdown_fin+0xc8>)
 8011a90:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011a94:	492d      	ldr	r1, [pc, #180]	; (8011b4c <tcp_close_shutdown_fin+0xcc>)
 8011a96:	482e      	ldr	r0, [pc, #184]	; (8011b50 <tcp_close_shutdown_fin+0xd0>)
 8011a98:	f009 fb5e 	bl	801b158 <iprintf>

  switch (pcb->state) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	7d1b      	ldrb	r3, [r3, #20]
 8011aa0:	2b07      	cmp	r3, #7
 8011aa2:	d020      	beq.n	8011ae6 <tcp_close_shutdown_fin+0x66>
 8011aa4:	2b07      	cmp	r3, #7
 8011aa6:	dc2b      	bgt.n	8011b00 <tcp_close_shutdown_fin+0x80>
 8011aa8:	2b03      	cmp	r3, #3
 8011aaa:	d002      	beq.n	8011ab2 <tcp_close_shutdown_fin+0x32>
 8011aac:	2b04      	cmp	r3, #4
 8011aae:	d00d      	beq.n	8011acc <tcp_close_shutdown_fin+0x4c>
 8011ab0:	e026      	b.n	8011b00 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f004 fe10 	bl	80166d8 <tcp_send_fin>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d11f      	bne.n	8011b04 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2205      	movs	r2, #5
 8011ac8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011aca:	e01b      	b.n	8011b04 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f004 fe03 	bl	80166d8 <tcp_send_fin>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d114      	bne.n	8011b08 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2205      	movs	r2, #5
 8011ae2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011ae4:	e010      	b.n	8011b08 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f004 fdf6 	bl	80166d8 <tcp_send_fin>
 8011aec:	4603      	mov	r3, r0
 8011aee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d109      	bne.n	8011b0c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2209      	movs	r2, #9
 8011afc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011afe:	e005      	b.n	8011b0c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	e01c      	b.n	8011b3e <tcp_close_shutdown_fin+0xbe>
      break;
 8011b04:	bf00      	nop
 8011b06:	e002      	b.n	8011b0e <tcp_close_shutdown_fin+0x8e>
      break;
 8011b08:	bf00      	nop
 8011b0a:	e000      	b.n	8011b0e <tcp_close_shutdown_fin+0x8e>
      break;
 8011b0c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d103      	bne.n	8011b1e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f004 ff1c 	bl	8016954 <tcp_output>
 8011b1c:	e00d      	b.n	8011b3a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b26:	d108      	bne.n	8011b3a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	8b5b      	ldrh	r3, [r3, #26]
 8011b2c:	f043 0308 	orr.w	r3, r3, #8
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	e001      	b.n	8011b3e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	0801de2c 	.word	0x0801de2c
 8011b4c:	0801dedc 	.word	0x0801dedc
 8011b50:	0801de70 	.word	0x0801de70

08011b54 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d109      	bne.n	8011b76 <tcp_close+0x22>
 8011b62:	4b0f      	ldr	r3, [pc, #60]	; (8011ba0 <tcp_close+0x4c>)
 8011b64:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011b68:	490e      	ldr	r1, [pc, #56]	; (8011ba4 <tcp_close+0x50>)
 8011b6a:	480f      	ldr	r0, [pc, #60]	; (8011ba8 <tcp_close+0x54>)
 8011b6c:	f009 faf4 	bl	801b158 <iprintf>
 8011b70:	f06f 030f 	mvn.w	r3, #15
 8011b74:	e00f      	b.n	8011b96 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	7d1b      	ldrb	r3, [r3, #20]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d006      	beq.n	8011b8c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	8b5b      	ldrh	r3, [r3, #26]
 8011b82:	f043 0310 	orr.w	r3, r3, #16
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011b8c:	2101      	movs	r1, #1
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f7ff fe94 	bl	80118bc <tcp_close_shutdown>
 8011b94:	4603      	mov	r3, r0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3708      	adds	r7, #8
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	0801de2c 	.word	0x0801de2c
 8011ba4:	0801df3c 	.word	0x0801df3c
 8011ba8:	0801de70 	.word	0x0801de70

08011bac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d109      	bne.n	8011bd2 <tcp_shutdown+0x26>
 8011bbe:	4b26      	ldr	r3, [pc, #152]	; (8011c58 <tcp_shutdown+0xac>)
 8011bc0:	f240 2207 	movw	r2, #519	; 0x207
 8011bc4:	4925      	ldr	r1, [pc, #148]	; (8011c5c <tcp_shutdown+0xb0>)
 8011bc6:	4826      	ldr	r0, [pc, #152]	; (8011c60 <tcp_shutdown+0xb4>)
 8011bc8:	f009 fac6 	bl	801b158 <iprintf>
 8011bcc:	f06f 030f 	mvn.w	r3, #15
 8011bd0:	e03d      	b.n	8011c4e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	7d1b      	ldrb	r3, [r3, #20]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d102      	bne.n	8011be0 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011bda:	f06f 030a 	mvn.w	r3, #10
 8011bde:	e036      	b.n	8011c4e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d01b      	beq.n	8011c1e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	8b5b      	ldrh	r3, [r3, #26]
 8011bea:	f043 0310 	orr.w	r3, r3, #16
 8011bee:	b29a      	uxth	r2, r3
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d005      	beq.n	8011c06 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011bfa:	2101      	movs	r1, #1
 8011bfc:	68f8      	ldr	r0, [r7, #12]
 8011bfe:	f7ff fe5d 	bl	80118bc <tcp_close_shutdown>
 8011c02:	4603      	mov	r3, r0
 8011c04:	e023      	b.n	8011c4e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d007      	beq.n	8011c1e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7ff fae4 	bl	80111e0 <pbuf_free>
      pcb->refused_data = NULL;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d013      	beq.n	8011c4c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	7d1b      	ldrb	r3, [r3, #20]
 8011c28:	2b04      	cmp	r3, #4
 8011c2a:	dc02      	bgt.n	8011c32 <tcp_shutdown+0x86>
 8011c2c:	2b03      	cmp	r3, #3
 8011c2e:	da02      	bge.n	8011c36 <tcp_shutdown+0x8a>
 8011c30:	e009      	b.n	8011c46 <tcp_shutdown+0x9a>
 8011c32:	2b07      	cmp	r3, #7
 8011c34:	d107      	bne.n	8011c46 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f7ff fe3d 	bl	80118bc <tcp_close_shutdown>
 8011c42:	4603      	mov	r3, r0
 8011c44:	e003      	b.n	8011c4e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011c46:	f06f 030a 	mvn.w	r3, #10
 8011c4a:	e000      	b.n	8011c4e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011c4c:	2300      	movs	r3, #0
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	0801de2c 	.word	0x0801de2c
 8011c5c:	0801df54 	.word	0x0801df54
 8011c60:	0801de70 	.word	0x0801de70

08011c64 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b08e      	sub	sp, #56	; 0x38
 8011c68:	af04      	add	r7, sp, #16
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d107      	bne.n	8011c84 <tcp_abandon+0x20>
 8011c74:	4b52      	ldr	r3, [pc, #328]	; (8011dc0 <tcp_abandon+0x15c>)
 8011c76:	f240 223d 	movw	r2, #573	; 0x23d
 8011c7a:	4952      	ldr	r1, [pc, #328]	; (8011dc4 <tcp_abandon+0x160>)
 8011c7c:	4852      	ldr	r0, [pc, #328]	; (8011dc8 <tcp_abandon+0x164>)
 8011c7e:	f009 fa6b 	bl	801b158 <iprintf>
 8011c82:	e099      	b.n	8011db8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	7d1b      	ldrb	r3, [r3, #20]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d106      	bne.n	8011c9a <tcp_abandon+0x36>
 8011c8c:	4b4c      	ldr	r3, [pc, #304]	; (8011dc0 <tcp_abandon+0x15c>)
 8011c8e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011c92:	494e      	ldr	r1, [pc, #312]	; (8011dcc <tcp_abandon+0x168>)
 8011c94:	484c      	ldr	r0, [pc, #304]	; (8011dc8 <tcp_abandon+0x164>)
 8011c96:	f009 fa5f 	bl	801b158 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	7d1b      	ldrb	r3, [r3, #20]
 8011c9e:	2b0a      	cmp	r3, #10
 8011ca0:	d107      	bne.n	8011cb2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011ca2:	6879      	ldr	r1, [r7, #4]
 8011ca4:	484a      	ldr	r0, [pc, #296]	; (8011dd0 <tcp_abandon+0x16c>)
 8011ca6:	f001 fa39 	bl	801311c <tcp_pcb_remove>
    tcp_free(pcb);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff fd54 	bl	8011758 <tcp_free>
 8011cb0:	e082      	b.n	8011db8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cbe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ccc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	691b      	ldr	r3, [r3, #16]
 8011cd2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	7d1b      	ldrb	r3, [r3, #20]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d126      	bne.n	8011d2a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	8adb      	ldrh	r3, [r3, #22]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d02e      	beq.n	8011d42 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011ce4:	4b3b      	ldr	r3, [pc, #236]	; (8011dd4 <tcp_abandon+0x170>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d105      	bne.n	8011cfa <tcp_abandon+0x96>
 8011cee:	4b39      	ldr	r3, [pc, #228]	; (8011dd4 <tcp_abandon+0x170>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	4a37      	ldr	r2, [pc, #220]	; (8011dd4 <tcp_abandon+0x170>)
 8011cf6:	6013      	str	r3, [r2, #0]
 8011cf8:	e013      	b.n	8011d22 <tcp_abandon+0xbe>
 8011cfa:	4b36      	ldr	r3, [pc, #216]	; (8011dd4 <tcp_abandon+0x170>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	61fb      	str	r3, [r7, #28]
 8011d00:	e00c      	b.n	8011d1c <tcp_abandon+0xb8>
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d104      	bne.n	8011d16 <tcp_abandon+0xb2>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	68da      	ldr	r2, [r3, #12]
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	60da      	str	r2, [r3, #12]
 8011d14:	e005      	b.n	8011d22 <tcp_abandon+0xbe>
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	61fb      	str	r3, [r7, #28]
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1ef      	bne.n	8011d02 <tcp_abandon+0x9e>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2200      	movs	r2, #0
 8011d26:	60da      	str	r2, [r3, #12]
 8011d28:	e00b      	b.n	8011d42 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8adb      	ldrh	r3, [r3, #22]
 8011d32:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011d34:	6879      	ldr	r1, [r7, #4]
 8011d36:	4828      	ldr	r0, [pc, #160]	; (8011dd8 <tcp_abandon+0x174>)
 8011d38:	f001 f9f0 	bl	801311c <tcp_pcb_remove>
 8011d3c:	4b27      	ldr	r3, [pc, #156]	; (8011ddc <tcp_abandon+0x178>)
 8011d3e:	2201      	movs	r2, #1
 8011d40:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d004      	beq.n	8011d54 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 fec4 	bl	8012adc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d004      	beq.n	8011d66 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d60:	4618      	mov	r0, r3
 8011d62:	f000 febb 	bl	8012adc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d004      	beq.n	8011d78 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d72:	4618      	mov	r0, r3
 8011d74:	f000 feb2 	bl	8012adc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00e      	beq.n	8011d9c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011d7e:	6879      	ldr	r1, [r7, #4]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	3304      	adds	r3, #4
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	8b12      	ldrh	r2, [r2, #24]
 8011d88:	9202      	str	r2, [sp, #8]
 8011d8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d8c:	9201      	str	r2, [sp, #4]
 8011d8e:	9300      	str	r3, [sp, #0]
 8011d90:	460b      	mov	r3, r1
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	69b9      	ldr	r1, [r7, #24]
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f005 fb90 	bl	80174bc <tcp_rst>
    }
    last_state = pcb->state;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	7d1b      	ldrb	r3, [r3, #20]
 8011da0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f7ff fcd8 	bl	8011758 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d004      	beq.n	8011db8 <tcp_abandon+0x154>
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	f06f 010c 	mvn.w	r1, #12
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	4798      	blx	r3
  }
}
 8011db8:	3728      	adds	r7, #40	; 0x28
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	0801de2c 	.word	0x0801de2c
 8011dc4:	0801df70 	.word	0x0801df70
 8011dc8:	0801de70 	.word	0x0801de70
 8011dcc:	0801df8c 	.word	0x0801df8c
 8011dd0:	2003d0ec 	.word	0x2003d0ec
 8011dd4:	2003d0e0 	.word	0x2003d0e0
 8011dd8:	2003d0e8 	.word	0x2003d0e8
 8011ddc:	2003d0f0 	.word	0x2003d0f0

08011de0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011de8:	2101      	movs	r1, #1
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff ff3a 	bl	8011c64 <tcp_abandon>
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b088      	sub	sp, #32
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	4613      	mov	r3, r2
 8011e04:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011e06:	2304      	movs	r3, #4
 8011e08:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d101      	bne.n	8011e14 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011e10:	4b3e      	ldr	r3, [pc, #248]	; (8011f0c <tcp_bind+0x114>)
 8011e12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d109      	bne.n	8011e2e <tcp_bind+0x36>
 8011e1a:	4b3d      	ldr	r3, [pc, #244]	; (8011f10 <tcp_bind+0x118>)
 8011e1c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011e20:	493c      	ldr	r1, [pc, #240]	; (8011f14 <tcp_bind+0x11c>)
 8011e22:	483d      	ldr	r0, [pc, #244]	; (8011f18 <tcp_bind+0x120>)
 8011e24:	f009 f998 	bl	801b158 <iprintf>
 8011e28:	f06f 030f 	mvn.w	r3, #15
 8011e2c:	e06a      	b.n	8011f04 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	7d1b      	ldrb	r3, [r3, #20]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d009      	beq.n	8011e4a <tcp_bind+0x52>
 8011e36:	4b36      	ldr	r3, [pc, #216]	; (8011f10 <tcp_bind+0x118>)
 8011e38:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e3c:	4937      	ldr	r1, [pc, #220]	; (8011f1c <tcp_bind+0x124>)
 8011e3e:	4836      	ldr	r0, [pc, #216]	; (8011f18 <tcp_bind+0x120>)
 8011e40:	f009 f98a 	bl	801b158 <iprintf>
 8011e44:	f06f 0305 	mvn.w	r3, #5
 8011e48:	e05c      	b.n	8011f04 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011e4a:	88fb      	ldrh	r3, [r7, #6]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d109      	bne.n	8011e64 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011e50:	f000 f9de 	bl	8012210 <tcp_new_port>
 8011e54:	4603      	mov	r3, r0
 8011e56:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011e58:	88fb      	ldrh	r3, [r7, #6]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d135      	bne.n	8011eca <tcp_bind+0xd2>
      return ERR_BUF;
 8011e5e:	f06f 0301 	mvn.w	r3, #1
 8011e62:	e04f      	b.n	8011f04 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011e64:	2300      	movs	r3, #0
 8011e66:	61fb      	str	r3, [r7, #28]
 8011e68:	e02b      	b.n	8011ec2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011e6a:	4a2d      	ldr	r2, [pc, #180]	; (8011f20 <tcp_bind+0x128>)
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	61bb      	str	r3, [r7, #24]
 8011e76:	e01e      	b.n	8011eb6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011e78:	69bb      	ldr	r3, [r7, #24]
 8011e7a:	8adb      	ldrh	r3, [r3, #22]
 8011e7c:	88fa      	ldrh	r2, [r7, #6]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d116      	bne.n	8011eb0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011e82:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d010      	beq.n	8011eaa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00c      	beq.n	8011eaa <tcp_bind+0xb2>
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d009      	beq.n	8011eaa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d005      	beq.n	8011eaa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d102      	bne.n	8011eb0 <tcp_bind+0xb8>
              return ERR_USE;
 8011eaa:	f06f 0307 	mvn.w	r3, #7
 8011eae:	e029      	b.n	8011f04 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011eb0:	69bb      	ldr	r3, [r7, #24]
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	61bb      	str	r3, [r7, #24]
 8011eb6:	69bb      	ldr	r3, [r7, #24]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d1dd      	bne.n	8011e78 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	61fb      	str	r3, [r7, #28]
 8011ec2:	69fa      	ldr	r2, [r7, #28]
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	dbcf      	blt.n	8011e6a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00c      	beq.n	8011eea <tcp_bind+0xf2>
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d008      	beq.n	8011eea <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d002      	beq.n	8011ee4 <tcp_bind+0xec>
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	e000      	b.n	8011ee6 <tcp_bind+0xee>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	68fa      	ldr	r2, [r7, #12]
 8011ee8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	88fa      	ldrh	r2, [r7, #6]
 8011eee:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011ef0:	4b0c      	ldr	r3, [pc, #48]	; (8011f24 <tcp_bind+0x12c>)
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	60da      	str	r2, [r3, #12]
 8011ef8:	4a0a      	ldr	r2, [pc, #40]	; (8011f24 <tcp_bind+0x12c>)
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	6013      	str	r3, [r2, #0]
 8011efe:	f005 fc9f 	bl	8017840 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3720      	adds	r7, #32
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	0801fec4 	.word	0x0801fec4
 8011f10:	0801de2c 	.word	0x0801de2c
 8011f14:	0801dfc0 	.word	0x0801dfc0
 8011f18:	0801de70 	.word	0x0801de70
 8011f1c:	0801dfd8 	.word	0x0801dfd8
 8011f20:	0801fe9c 	.word	0x0801fe9c
 8011f24:	2003d0e0 	.word	0x2003d0e0

08011f28 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	4613      	mov	r3, r2
 8011f34:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d106      	bne.n	8011f4a <tcp_accept_null+0x22>
 8011f3c:	4b07      	ldr	r3, [pc, #28]	; (8011f5c <tcp_accept_null+0x34>)
 8011f3e:	f240 320f 	movw	r2, #783	; 0x30f
 8011f42:	4907      	ldr	r1, [pc, #28]	; (8011f60 <tcp_accept_null+0x38>)
 8011f44:	4807      	ldr	r0, [pc, #28]	; (8011f64 <tcp_accept_null+0x3c>)
 8011f46:	f009 f907 	bl	801b158 <iprintf>

  tcp_abort(pcb);
 8011f4a:	68b8      	ldr	r0, [r7, #8]
 8011f4c:	f7ff ff48 	bl	8011de0 <tcp_abort>

  return ERR_ABRT;
 8011f50:	f06f 030c 	mvn.w	r3, #12
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	0801de2c 	.word	0x0801de2c
 8011f60:	0801e000 	.word	0x0801e000
 8011f64:	0801de70 	.word	0x0801de70

08011f68 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b088      	sub	sp, #32
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	460b      	mov	r3, r1
 8011f72:	607a      	str	r2, [r7, #4]
 8011f74:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011f76:	2300      	movs	r3, #0
 8011f78:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d109      	bne.n	8011f94 <tcp_listen_with_backlog_and_err+0x2c>
 8011f80:	4b47      	ldr	r3, [pc, #284]	; (80120a0 <tcp_listen_with_backlog_and_err+0x138>)
 8011f82:	f240 3259 	movw	r2, #857	; 0x359
 8011f86:	4947      	ldr	r1, [pc, #284]	; (80120a4 <tcp_listen_with_backlog_and_err+0x13c>)
 8011f88:	4847      	ldr	r0, [pc, #284]	; (80120a8 <tcp_listen_with_backlog_and_err+0x140>)
 8011f8a:	f009 f8e5 	bl	801b158 <iprintf>
 8011f8e:	23f0      	movs	r3, #240	; 0xf0
 8011f90:	76fb      	strb	r3, [r7, #27]
 8011f92:	e079      	b.n	8012088 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	7d1b      	ldrb	r3, [r3, #20]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d009      	beq.n	8011fb0 <tcp_listen_with_backlog_and_err+0x48>
 8011f9c:	4b40      	ldr	r3, [pc, #256]	; (80120a0 <tcp_listen_with_backlog_and_err+0x138>)
 8011f9e:	f240 325a 	movw	r2, #858	; 0x35a
 8011fa2:	4942      	ldr	r1, [pc, #264]	; (80120ac <tcp_listen_with_backlog_and_err+0x144>)
 8011fa4:	4840      	ldr	r0, [pc, #256]	; (80120a8 <tcp_listen_with_backlog_and_err+0x140>)
 8011fa6:	f009 f8d7 	bl	801b158 <iprintf>
 8011faa:	23f1      	movs	r3, #241	; 0xf1
 8011fac:	76fb      	strb	r3, [r7, #27]
 8011fae:	e06b      	b.n	8012088 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	7d1b      	ldrb	r3, [r3, #20]
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	d104      	bne.n	8011fc2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011fbc:	23f7      	movs	r3, #247	; 0xf7
 8011fbe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011fc0:	e062      	b.n	8012088 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011fc2:	2002      	movs	r0, #2
 8011fc4:	f7fe f9c0 	bl	8010348 <memp_malloc>
 8011fc8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d102      	bne.n	8011fd6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011fd0:	23ff      	movs	r3, #255	; 0xff
 8011fd2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011fd4:	e058      	b.n	8012088 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	691a      	ldr	r2, [r3, #16]
 8011fda:	69fb      	ldr	r3, [r7, #28]
 8011fdc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	8ada      	ldrh	r2, [r3, #22]
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	7d5a      	ldrb	r2, [r3, #21]
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	7a5a      	ldrb	r2, [r3, #9]
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	2200      	movs	r2, #0
 8012000:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	7ada      	ldrb	r2, [r3, #11]
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	7a9a      	ldrb	r2, [r3, #10]
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681a      	ldr	r2, [r3, #0]
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	8adb      	ldrh	r3, [r3, #22]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d021      	beq.n	8012066 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8012022:	4b23      	ldr	r3, [pc, #140]	; (80120b0 <tcp_listen_with_backlog_and_err+0x148>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	68fa      	ldr	r2, [r7, #12]
 8012028:	429a      	cmp	r2, r3
 801202a:	d105      	bne.n	8012038 <tcp_listen_with_backlog_and_err+0xd0>
 801202c:	4b20      	ldr	r3, [pc, #128]	; (80120b0 <tcp_listen_with_backlog_and_err+0x148>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	4a1f      	ldr	r2, [pc, #124]	; (80120b0 <tcp_listen_with_backlog_and_err+0x148>)
 8012034:	6013      	str	r3, [r2, #0]
 8012036:	e013      	b.n	8012060 <tcp_listen_with_backlog_and_err+0xf8>
 8012038:	4b1d      	ldr	r3, [pc, #116]	; (80120b0 <tcp_listen_with_backlog_and_err+0x148>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	617b      	str	r3, [r7, #20]
 801203e:	e00c      	b.n	801205a <tcp_listen_with_backlog_and_err+0xf2>
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	429a      	cmp	r2, r3
 8012048:	d104      	bne.n	8012054 <tcp_listen_with_backlog_and_err+0xec>
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	68da      	ldr	r2, [r3, #12]
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	60da      	str	r2, [r3, #12]
 8012052:	e005      	b.n	8012060 <tcp_listen_with_backlog_and_err+0xf8>
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	617b      	str	r3, [r7, #20]
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1ef      	bne.n	8012040 <tcp_listen_with_backlog_and_err+0xd8>
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2200      	movs	r2, #0
 8012064:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8012066:	68f8      	ldr	r0, [r7, #12]
 8012068:	f7ff fb76 	bl	8011758 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	4a11      	ldr	r2, [pc, #68]	; (80120b4 <tcp_listen_with_backlog_and_err+0x14c>)
 8012070:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012072:	4b11      	ldr	r3, [pc, #68]	; (80120b8 <tcp_listen_with_backlog_and_err+0x150>)
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	60da      	str	r2, [r3, #12]
 801207a:	4a0f      	ldr	r2, [pc, #60]	; (80120b8 <tcp_listen_with_backlog_and_err+0x150>)
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	6013      	str	r3, [r2, #0]
 8012080:	f005 fbde 	bl	8017840 <tcp_timer_needed>
  res = ERR_OK;
 8012084:	2300      	movs	r3, #0
 8012086:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d002      	beq.n	8012094 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	7efa      	ldrb	r2, [r7, #27]
 8012092:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012094:	69fb      	ldr	r3, [r7, #28]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3720      	adds	r7, #32
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	0801de2c 	.word	0x0801de2c
 80120a4:	0801e020 	.word	0x0801e020
 80120a8:	0801de70 	.word	0x0801de70
 80120ac:	0801e050 	.word	0x0801e050
 80120b0:	2003d0e0 	.word	0x2003d0e0
 80120b4:	08011f29 	.word	0x08011f29
 80120b8:	2003d0e4 	.word	0x2003d0e4

080120bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <tcp_update_rcv_ann_wnd+0x1c>
 80120ca:	4b25      	ldr	r3, [pc, #148]	; (8012160 <tcp_update_rcv_ann_wnd+0xa4>)
 80120cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80120d0:	4924      	ldr	r1, [pc, #144]	; (8012164 <tcp_update_rcv_ann_wnd+0xa8>)
 80120d2:	4825      	ldr	r0, [pc, #148]	; (8012168 <tcp_update_rcv_ann_wnd+0xac>)
 80120d4:	f009 f840 	bl	801b158 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80120e0:	4413      	add	r3, r2
 80120e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e8:	687a      	ldr	r2, [r7, #4]
 80120ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80120ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80120f0:	bf28      	it	cs
 80120f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80120f6:	b292      	uxth	r2, r2
 80120f8:	4413      	add	r3, r2
 80120fa:	68fa      	ldr	r2, [r7, #12]
 80120fc:	1ad3      	subs	r3, r2, r3
 80120fe:	2b00      	cmp	r3, #0
 8012100:	db08      	blt.n	8012114 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801210e:	68fa      	ldr	r2, [r7, #12]
 8012110:	1ad3      	subs	r3, r2, r3
 8012112:	e020      	b.n	8012156 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801211c:	1ad3      	subs	r3, r2, r3
 801211e:	2b00      	cmp	r3, #0
 8012120:	dd03      	ble.n	801212a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2200      	movs	r2, #0
 8012126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012128:	e014      	b.n	8012154 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801213c:	d306      	bcc.n	801214c <tcp_update_rcv_ann_wnd+0x90>
 801213e:	4b08      	ldr	r3, [pc, #32]	; (8012160 <tcp_update_rcv_ann_wnd+0xa4>)
 8012140:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012144:	4909      	ldr	r1, [pc, #36]	; (801216c <tcp_update_rcv_ann_wnd+0xb0>)
 8012146:	4808      	ldr	r0, [pc, #32]	; (8012168 <tcp_update_rcv_ann_wnd+0xac>)
 8012148:	f009 f806 	bl	801b158 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	b29a      	uxth	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012154:	2300      	movs	r3, #0
  }
}
 8012156:	4618      	mov	r0, r3
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	0801de2c 	.word	0x0801de2c
 8012164:	0801e088 	.word	0x0801e088
 8012168:	0801de70 	.word	0x0801de70
 801216c:	0801e0ac 	.word	0x0801e0ac

08012170 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	460b      	mov	r3, r1
 801217a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d107      	bne.n	8012192 <tcp_recved+0x22>
 8012182:	4b1f      	ldr	r3, [pc, #124]	; (8012200 <tcp_recved+0x90>)
 8012184:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012188:	491e      	ldr	r1, [pc, #120]	; (8012204 <tcp_recved+0x94>)
 801218a:	481f      	ldr	r0, [pc, #124]	; (8012208 <tcp_recved+0x98>)
 801218c:	f008 ffe4 	bl	801b158 <iprintf>
 8012190:	e032      	b.n	80121f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	7d1b      	ldrb	r3, [r3, #20]
 8012196:	2b01      	cmp	r3, #1
 8012198:	d106      	bne.n	80121a8 <tcp_recved+0x38>
 801219a:	4b19      	ldr	r3, [pc, #100]	; (8012200 <tcp_recved+0x90>)
 801219c:	f240 32d2 	movw	r2, #978	; 0x3d2
 80121a0:	491a      	ldr	r1, [pc, #104]	; (801220c <tcp_recved+0x9c>)
 80121a2:	4819      	ldr	r0, [pc, #100]	; (8012208 <tcp_recved+0x98>)
 80121a4:	f008 ffd8 	bl	801b158 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121ac:	887b      	ldrh	r3, [r7, #2]
 80121ae:	4413      	add	r3, r2
 80121b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80121b2:	89fb      	ldrh	r3, [r7, #14]
 80121b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80121b8:	d804      	bhi.n	80121c4 <tcp_recved+0x54>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121be:	89fa      	ldrh	r2, [r7, #14]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d204      	bcs.n	80121ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80121ca:	851a      	strh	r2, [r3, #40]	; 0x28
 80121cc:	e002      	b.n	80121d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	89fa      	ldrh	r2, [r7, #14]
 80121d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7ff ff71 	bl	80120bc <tcp_update_rcv_ann_wnd>
 80121da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80121e2:	d309      	bcc.n	80121f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	8b5b      	ldrh	r3, [r3, #26]
 80121e8:	f043 0302 	orr.w	r3, r3, #2
 80121ec:	b29a      	uxth	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f004 fbae 	bl	8016954 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	0801de2c 	.word	0x0801de2c
 8012204:	0801e0c8 	.word	0x0801e0c8
 8012208:	0801de70 	.word	0x0801de70
 801220c:	0801e0e0 	.word	0x0801e0e0

08012210 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012210:	b480      	push	{r7}
 8012212:	b083      	sub	sp, #12
 8012214:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801221a:	4b1e      	ldr	r3, [pc, #120]	; (8012294 <tcp_new_port+0x84>)
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	3301      	adds	r3, #1
 8012220:	b29a      	uxth	r2, r3
 8012222:	4b1c      	ldr	r3, [pc, #112]	; (8012294 <tcp_new_port+0x84>)
 8012224:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012226:	4b1b      	ldr	r3, [pc, #108]	; (8012294 <tcp_new_port+0x84>)
 8012228:	881b      	ldrh	r3, [r3, #0]
 801222a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801222e:	4293      	cmp	r3, r2
 8012230:	d103      	bne.n	801223a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012232:	4b18      	ldr	r3, [pc, #96]	; (8012294 <tcp_new_port+0x84>)
 8012234:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012238:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801223a:	2300      	movs	r3, #0
 801223c:	71fb      	strb	r3, [r7, #7]
 801223e:	e01e      	b.n	801227e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012240:	79fb      	ldrb	r3, [r7, #7]
 8012242:	4a15      	ldr	r2, [pc, #84]	; (8012298 <tcp_new_port+0x88>)
 8012244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	603b      	str	r3, [r7, #0]
 801224c:	e011      	b.n	8012272 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	8ada      	ldrh	r2, [r3, #22]
 8012252:	4b10      	ldr	r3, [pc, #64]	; (8012294 <tcp_new_port+0x84>)
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	429a      	cmp	r2, r3
 8012258:	d108      	bne.n	801226c <tcp_new_port+0x5c>
        n++;
 801225a:	88bb      	ldrh	r3, [r7, #4]
 801225c:	3301      	adds	r3, #1
 801225e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012260:	88bb      	ldrh	r3, [r7, #4]
 8012262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012266:	d3d8      	bcc.n	801221a <tcp_new_port+0xa>
          return 0;
 8012268:	2300      	movs	r3, #0
 801226a:	e00d      	b.n	8012288 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	603b      	str	r3, [r7, #0]
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1ea      	bne.n	801224e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012278:	79fb      	ldrb	r3, [r7, #7]
 801227a:	3301      	adds	r3, #1
 801227c:	71fb      	strb	r3, [r7, #7]
 801227e:	79fb      	ldrb	r3, [r7, #7]
 8012280:	2b03      	cmp	r3, #3
 8012282:	d9dd      	bls.n	8012240 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012284:	4b03      	ldr	r3, [pc, #12]	; (8012294 <tcp_new_port+0x84>)
 8012286:	881b      	ldrh	r3, [r3, #0]
}
 8012288:	4618      	mov	r0, r3
 801228a:	370c      	adds	r7, #12
 801228c:	46bd      	mov	sp, r7
 801228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012292:	4770      	bx	lr
 8012294:	20000024 	.word	0x20000024
 8012298:	0801fe9c 	.word	0x0801fe9c

0801229c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801229c:	b5b0      	push	{r4, r5, r7, lr}
 801229e:	b090      	sub	sp, #64	; 0x40
 80122a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80122a2:	2300      	movs	r3, #0
 80122a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80122a8:	4b94      	ldr	r3, [pc, #592]	; (80124fc <tcp_slowtmr+0x260>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	3301      	adds	r3, #1
 80122ae:	4a93      	ldr	r2, [pc, #588]	; (80124fc <tcp_slowtmr+0x260>)
 80122b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80122b2:	4b93      	ldr	r3, [pc, #588]	; (8012500 <tcp_slowtmr+0x264>)
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	3301      	adds	r3, #1
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	4b91      	ldr	r3, [pc, #580]	; (8012500 <tcp_slowtmr+0x264>)
 80122bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80122be:	2300      	movs	r3, #0
 80122c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80122c2:	4b90      	ldr	r3, [pc, #576]	; (8012504 <tcp_slowtmr+0x268>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80122c8:	e29d      	b.n	8012806 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80122ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122cc:	7d1b      	ldrb	r3, [r3, #20]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d106      	bne.n	80122e0 <tcp_slowtmr+0x44>
 80122d2:	4b8d      	ldr	r3, [pc, #564]	; (8012508 <tcp_slowtmr+0x26c>)
 80122d4:	f240 42be 	movw	r2, #1214	; 0x4be
 80122d8:	498c      	ldr	r1, [pc, #560]	; (801250c <tcp_slowtmr+0x270>)
 80122da:	488d      	ldr	r0, [pc, #564]	; (8012510 <tcp_slowtmr+0x274>)
 80122dc:	f008 ff3c 	bl	801b158 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80122e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e2:	7d1b      	ldrb	r3, [r3, #20]
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d106      	bne.n	80122f6 <tcp_slowtmr+0x5a>
 80122e8:	4b87      	ldr	r3, [pc, #540]	; (8012508 <tcp_slowtmr+0x26c>)
 80122ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80122ee:	4989      	ldr	r1, [pc, #548]	; (8012514 <tcp_slowtmr+0x278>)
 80122f0:	4887      	ldr	r0, [pc, #540]	; (8012510 <tcp_slowtmr+0x274>)
 80122f2:	f008 ff31 	bl	801b158 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80122f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f8:	7d1b      	ldrb	r3, [r3, #20]
 80122fa:	2b0a      	cmp	r3, #10
 80122fc:	d106      	bne.n	801230c <tcp_slowtmr+0x70>
 80122fe:	4b82      	ldr	r3, [pc, #520]	; (8012508 <tcp_slowtmr+0x26c>)
 8012300:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012304:	4984      	ldr	r1, [pc, #528]	; (8012518 <tcp_slowtmr+0x27c>)
 8012306:	4882      	ldr	r0, [pc, #520]	; (8012510 <tcp_slowtmr+0x274>)
 8012308:	f008 ff26 	bl	801b158 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801230e:	7f9a      	ldrb	r2, [r3, #30]
 8012310:	4b7b      	ldr	r3, [pc, #492]	; (8012500 <tcp_slowtmr+0x264>)
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	429a      	cmp	r2, r3
 8012316:	d105      	bne.n	8012324 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012322:	e270      	b.n	8012806 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012324:	4b76      	ldr	r3, [pc, #472]	; (8012500 <tcp_slowtmr+0x264>)
 8012326:	781a      	ldrb	r2, [r3, #0]
 8012328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801232c:	2300      	movs	r3, #0
 801232e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233a:	7d1b      	ldrb	r3, [r3, #20]
 801233c:	2b02      	cmp	r3, #2
 801233e:	d10a      	bne.n	8012356 <tcp_slowtmr+0xba>
 8012340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012346:	2b05      	cmp	r3, #5
 8012348:	d905      	bls.n	8012356 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801234a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801234e:	3301      	adds	r3, #1
 8012350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012354:	e11e      	b.n	8012594 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801235c:	2b0b      	cmp	r3, #11
 801235e:	d905      	bls.n	801236c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012364:	3301      	adds	r3, #1
 8012366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801236a:	e113      	b.n	8012594 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801236e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012372:	2b00      	cmp	r3, #0
 8012374:	d075      	beq.n	8012462 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801237a:	2b00      	cmp	r3, #0
 801237c:	d006      	beq.n	801238c <tcp_slowtmr+0xf0>
 801237e:	4b62      	ldr	r3, [pc, #392]	; (8012508 <tcp_slowtmr+0x26c>)
 8012380:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012384:	4965      	ldr	r1, [pc, #404]	; (801251c <tcp_slowtmr+0x280>)
 8012386:	4862      	ldr	r0, [pc, #392]	; (8012510 <tcp_slowtmr+0x274>)
 8012388:	f008 fee6 	bl	801b158 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012390:	2b00      	cmp	r3, #0
 8012392:	d106      	bne.n	80123a2 <tcp_slowtmr+0x106>
 8012394:	4b5c      	ldr	r3, [pc, #368]	; (8012508 <tcp_slowtmr+0x26c>)
 8012396:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801239a:	4961      	ldr	r1, [pc, #388]	; (8012520 <tcp_slowtmr+0x284>)
 801239c:	485c      	ldr	r0, [pc, #368]	; (8012510 <tcp_slowtmr+0x274>)
 801239e:	f008 fedb 	bl	801b158 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80123a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80123a8:	2b0b      	cmp	r3, #11
 80123aa:	d905      	bls.n	80123b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80123ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b0:	3301      	adds	r3, #1
 80123b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123b6:	e0ed      	b.n	8012594 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80123b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80123be:	3b01      	subs	r3, #1
 80123c0:	4a58      	ldr	r2, [pc, #352]	; (8012524 <tcp_slowtmr+0x288>)
 80123c2:	5cd3      	ldrb	r3, [r2, r3]
 80123c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80123c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80123cc:	7c7a      	ldrb	r2, [r7, #17]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d907      	bls.n	80123e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80123d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80123d8:	3301      	adds	r3, #1
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80123e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80123e8:	7c7a      	ldrb	r2, [r7, #17]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	f200 80d2 	bhi.w	8012594 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80123f0:	2301      	movs	r3, #1
 80123f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d108      	bne.n	8012410 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80123fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012400:	f005 f950 	bl	80176a4 <tcp_zero_window_probe>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d014      	beq.n	8012434 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801240a:	2300      	movs	r3, #0
 801240c:	623b      	str	r3, [r7, #32]
 801240e:	e011      	b.n	8012434 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012412:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012416:	4619      	mov	r1, r3
 8012418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801241a:	f004 f815 	bl	8016448 <tcp_split_unsent_seg>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d107      	bne.n	8012434 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012426:	f004 fa95 	bl	8016954 <tcp_output>
 801242a:	4603      	mov	r3, r0
 801242c:	2b00      	cmp	r3, #0
 801242e:	d101      	bne.n	8012434 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012430:	2300      	movs	r3, #0
 8012432:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012434:	6a3b      	ldr	r3, [r7, #32]
 8012436:	2b00      	cmp	r3, #0
 8012438:	f000 80ac 	beq.w	8012594 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243e:	2200      	movs	r2, #0
 8012440:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012446:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801244a:	2b06      	cmp	r3, #6
 801244c:	f200 80a2 	bhi.w	8012594 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012456:	3301      	adds	r3, #1
 8012458:	b2da      	uxtb	r2, r3
 801245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012460:	e098      	b.n	8012594 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012464:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012468:	2b00      	cmp	r3, #0
 801246a:	db0f      	blt.n	801248c <tcp_slowtmr+0x1f0>
 801246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012472:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012476:	4293      	cmp	r3, r2
 8012478:	d008      	beq.n	801248c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801247c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012480:	b29b      	uxth	r3, r3
 8012482:	3301      	adds	r3, #1
 8012484:	b29b      	uxth	r3, r3
 8012486:	b21a      	sxth	r2, r3
 8012488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012494:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012498:	429a      	cmp	r2, r3
 801249a:	db7b      	blt.n	8012594 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801249c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801249e:	f004 fd4d 	bl	8016f3c <tcp_rexmit_rto_prepare>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d007      	beq.n	80124b8 <tcp_slowtmr+0x21c>
 80124a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d171      	bne.n	8012594 <tcp_slowtmr+0x2f8>
 80124b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d06d      	beq.n	8012594 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	7d1b      	ldrb	r3, [r3, #20]
 80124bc:	2b02      	cmp	r3, #2
 80124be:	d03a      	beq.n	8012536 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80124c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124c6:	2b0c      	cmp	r3, #12
 80124c8:	bf28      	it	cs
 80124ca:	230c      	movcs	r3, #12
 80124cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80124ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124d4:	10db      	asrs	r3, r3, #3
 80124d6:	b21b      	sxth	r3, r3
 80124d8:	461a      	mov	r2, r3
 80124da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124e0:	4413      	add	r3, r2
 80124e2:	7efa      	ldrb	r2, [r7, #27]
 80124e4:	4910      	ldr	r1, [pc, #64]	; (8012528 <tcp_slowtmr+0x28c>)
 80124e6:	5c8a      	ldrb	r2, [r1, r2]
 80124e8:	4093      	lsls	r3, r2
 80124ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80124f2:	4293      	cmp	r3, r2
 80124f4:	dc1a      	bgt.n	801252c <tcp_slowtmr+0x290>
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	b21a      	sxth	r2, r3
 80124fa:	e019      	b.n	8012530 <tcp_slowtmr+0x294>
 80124fc:	2003d0dc 	.word	0x2003d0dc
 8012500:	2003d0f2 	.word	0x2003d0f2
 8012504:	2003d0e8 	.word	0x2003d0e8
 8012508:	0801de2c 	.word	0x0801de2c
 801250c:	0801e170 	.word	0x0801e170
 8012510:	0801de70 	.word	0x0801de70
 8012514:	0801e19c 	.word	0x0801e19c
 8012518:	0801e1c8 	.word	0x0801e1c8
 801251c:	0801e1f8 	.word	0x0801e1f8
 8012520:	0801e22c 	.word	0x0801e22c
 8012524:	0801fe94 	.word	0x0801fe94
 8012528:	0801fe84 	.word	0x0801fe84
 801252c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012538:	2200      	movs	r2, #0
 801253a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012548:	4293      	cmp	r3, r2
 801254a:	bf28      	it	cs
 801254c:	4613      	movcs	r3, r2
 801254e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012550:	8a7b      	ldrh	r3, [r7, #18]
 8012552:	085b      	lsrs	r3, r3, #1
 8012554:	b29a      	uxth	r2, r3
 8012556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012558:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012566:	005b      	lsls	r3, r3, #1
 8012568:	b29b      	uxth	r3, r3
 801256a:	429a      	cmp	r2, r3
 801256c:	d206      	bcs.n	801257c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	b29a      	uxth	r2, r3
 8012576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012578:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012588:	2200      	movs	r2, #0
 801258a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801258e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012590:	f004 fd44 	bl	801701c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012596:	7d1b      	ldrb	r3, [r3, #20]
 8012598:	2b06      	cmp	r3, #6
 801259a:	d111      	bne.n	80125c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259e:	8b5b      	ldrh	r3, [r3, #26]
 80125a0:	f003 0310 	and.w	r3, r3, #16
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80125a8:	4b9c      	ldr	r3, [pc, #624]	; (801281c <tcp_slowtmr+0x580>)
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ae:	6a1b      	ldr	r3, [r3, #32]
 80125b0:	1ad3      	subs	r3, r2, r3
 80125b2:	2b28      	cmp	r3, #40	; 0x28
 80125b4:	d904      	bls.n	80125c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80125b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125ba:	3301      	adds	r3, #1
 80125bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80125c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c2:	7a5b      	ldrb	r3, [r3, #9]
 80125c4:	f003 0308 	and.w	r3, r3, #8
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d04a      	beq.n	8012662 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80125cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80125d0:	2b04      	cmp	r3, #4
 80125d2:	d003      	beq.n	80125dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80125d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80125d8:	2b07      	cmp	r3, #7
 80125da:	d142      	bne.n	8012662 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80125dc:	4b8f      	ldr	r3, [pc, #572]	; (801281c <tcp_slowtmr+0x580>)
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	6a1b      	ldr	r3, [r3, #32]
 80125e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80125e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80125ec:	4b8c      	ldr	r3, [pc, #560]	; (8012820 <tcp_slowtmr+0x584>)
 80125ee:	440b      	add	r3, r1
 80125f0:	498c      	ldr	r1, [pc, #560]	; (8012824 <tcp_slowtmr+0x588>)
 80125f2:	fba1 1303 	umull	r1, r3, r1, r3
 80125f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d90a      	bls.n	8012612 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80125fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012600:	3301      	adds	r3, #1
 8012602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801260a:	3301      	adds	r3, #1
 801260c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012610:	e027      	b.n	8012662 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012612:	4b82      	ldr	r3, [pc, #520]	; (801281c <tcp_slowtmr+0x580>)
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012618:	6a1b      	ldr	r3, [r3, #32]
 801261a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012624:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012628:	4618      	mov	r0, r3
 801262a:	4b7f      	ldr	r3, [pc, #508]	; (8012828 <tcp_slowtmr+0x58c>)
 801262c:	fb00 f303 	mul.w	r3, r0, r3
 8012630:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012632:	497c      	ldr	r1, [pc, #496]	; (8012824 <tcp_slowtmr+0x588>)
 8012634:	fba1 1303 	umull	r1, r3, r1, r3
 8012638:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801263a:	429a      	cmp	r2, r3
 801263c:	d911      	bls.n	8012662 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801263e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012640:	f004 fff0 	bl	8017624 <tcp_keepalive>
 8012644:	4603      	mov	r3, r0
 8012646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801264a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801264e:	2b00      	cmp	r3, #0
 8012650:	d107      	bne.n	8012662 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012654:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012658:	3301      	adds	r3, #1
 801265a:	b2da      	uxtb	r2, r3
 801265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012666:	2b00      	cmp	r3, #0
 8012668:	d011      	beq.n	801268e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801266a:	4b6c      	ldr	r3, [pc, #432]	; (801281c <tcp_slowtmr+0x580>)
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012670:	6a1b      	ldr	r3, [r3, #32]
 8012672:	1ad2      	subs	r2, r2, r3
 8012674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012676:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801267a:	4619      	mov	r1, r3
 801267c:	460b      	mov	r3, r1
 801267e:	005b      	lsls	r3, r3, #1
 8012680:	440b      	add	r3, r1
 8012682:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012684:	429a      	cmp	r2, r3
 8012686:	d302      	bcc.n	801268e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801268a:	f000 feab 	bl	80133e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012690:	7d1b      	ldrb	r3, [r3, #20]
 8012692:	2b03      	cmp	r3, #3
 8012694:	d10b      	bne.n	80126ae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012696:	4b61      	ldr	r3, [pc, #388]	; (801281c <tcp_slowtmr+0x580>)
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269c:	6a1b      	ldr	r3, [r3, #32]
 801269e:	1ad3      	subs	r3, r2, r3
 80126a0:	2b28      	cmp	r3, #40	; 0x28
 80126a2:	d904      	bls.n	80126ae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80126a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126a8:	3301      	adds	r3, #1
 80126aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	7d1b      	ldrb	r3, [r3, #20]
 80126b2:	2b09      	cmp	r3, #9
 80126b4:	d10b      	bne.n	80126ce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80126b6:	4b59      	ldr	r3, [pc, #356]	; (801281c <tcp_slowtmr+0x580>)
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126bc:	6a1b      	ldr	r3, [r3, #32]
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	2bf0      	cmp	r3, #240	; 0xf0
 80126c2:	d904      	bls.n	80126ce <tcp_slowtmr+0x432>
        ++pcb_remove;
 80126c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126c8:	3301      	adds	r3, #1
 80126ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80126ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d060      	beq.n	8012798 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80126d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80126de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126e0:	f000 fccc 	bl	801307c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80126e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d010      	beq.n	801270c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80126ea:	4b50      	ldr	r3, [pc, #320]	; (801282c <tcp_slowtmr+0x590>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d106      	bne.n	8012702 <tcp_slowtmr+0x466>
 80126f4:	4b4e      	ldr	r3, [pc, #312]	; (8012830 <tcp_slowtmr+0x594>)
 80126f6:	f240 526d 	movw	r2, #1389	; 0x56d
 80126fa:	494e      	ldr	r1, [pc, #312]	; (8012834 <tcp_slowtmr+0x598>)
 80126fc:	484e      	ldr	r0, [pc, #312]	; (8012838 <tcp_slowtmr+0x59c>)
 80126fe:	f008 fd2b 	bl	801b158 <iprintf>
        prev->next = pcb->next;
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	68da      	ldr	r2, [r3, #12]
 8012706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012708:	60da      	str	r2, [r3, #12]
 801270a:	e00f      	b.n	801272c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801270c:	4b47      	ldr	r3, [pc, #284]	; (801282c <tcp_slowtmr+0x590>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012712:	429a      	cmp	r2, r3
 8012714:	d006      	beq.n	8012724 <tcp_slowtmr+0x488>
 8012716:	4b46      	ldr	r3, [pc, #280]	; (8012830 <tcp_slowtmr+0x594>)
 8012718:	f240 5271 	movw	r2, #1393	; 0x571
 801271c:	4947      	ldr	r1, [pc, #284]	; (801283c <tcp_slowtmr+0x5a0>)
 801271e:	4846      	ldr	r0, [pc, #280]	; (8012838 <tcp_slowtmr+0x59c>)
 8012720:	f008 fd1a 	bl	801b158 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	4a40      	ldr	r2, [pc, #256]	; (801282c <tcp_slowtmr+0x590>)
 801272a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801272c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012730:	2b00      	cmp	r3, #0
 8012732:	d013      	beq.n	801275c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012736:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801273c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012740:	3304      	adds	r3, #4
 8012742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012744:	8ad2      	ldrh	r2, [r2, #22]
 8012746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012748:	8b09      	ldrh	r1, [r1, #24]
 801274a:	9102      	str	r1, [sp, #8]
 801274c:	9201      	str	r2, [sp, #4]
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	462b      	mov	r3, r5
 8012752:	4622      	mov	r2, r4
 8012754:	4601      	mov	r1, r0
 8012756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012758:	f004 feb0 	bl	80174bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012764:	7d1b      	ldrb	r3, [r3, #20]
 8012766:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012772:	6838      	ldr	r0, [r7, #0]
 8012774:	f7fe fff0 	bl	8011758 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012778:	4b31      	ldr	r3, [pc, #196]	; (8012840 <tcp_slowtmr+0x5a4>)
 801277a:	2200      	movs	r2, #0
 801277c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d004      	beq.n	801278e <tcp_slowtmr+0x4f2>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f06f 010c 	mvn.w	r1, #12
 801278a:	68b8      	ldr	r0, [r7, #8]
 801278c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801278e:	4b2c      	ldr	r3, [pc, #176]	; (8012840 <tcp_slowtmr+0x5a4>)
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d037      	beq.n	8012806 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012796:	e592      	b.n	80122be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80127a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a4:	7f1b      	ldrb	r3, [r3, #28]
 80127a6:	3301      	adds	r3, #1
 80127a8:	b2da      	uxtb	r2, r3
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	7f1a      	ldrb	r2, [r3, #28]
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	7f5b      	ldrb	r3, [r3, #29]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d325      	bcc.n	8012806 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80127ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127bc:	2200      	movs	r2, #0
 80127be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80127c0:	4b1f      	ldr	r3, [pc, #124]	; (8012840 <tcp_slowtmr+0x5a4>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80127c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d00b      	beq.n	80127e8 <tcp_slowtmr+0x54c>
 80127d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127d8:	6912      	ldr	r2, [r2, #16]
 80127da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80127dc:	4610      	mov	r0, r2
 80127de:	4798      	blx	r3
 80127e0:	4603      	mov	r3, r0
 80127e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80127e6:	e002      	b.n	80127ee <tcp_slowtmr+0x552>
 80127e8:	2300      	movs	r3, #0
 80127ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80127ee:	4b14      	ldr	r3, [pc, #80]	; (8012840 <tcp_slowtmr+0x5a4>)
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d000      	beq.n	80127f8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80127f6:	e562      	b.n	80122be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80127f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d102      	bne.n	8012806 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012802:	f004 f8a7 	bl	8016954 <tcp_output>
  while (pcb != NULL) {
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	2b00      	cmp	r3, #0
 801280a:	f47f ad5e 	bne.w	80122ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801280e:	2300      	movs	r3, #0
 8012810:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012812:	4b0c      	ldr	r3, [pc, #48]	; (8012844 <tcp_slowtmr+0x5a8>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012818:	e069      	b.n	80128ee <tcp_slowtmr+0x652>
 801281a:	bf00      	nop
 801281c:	2003d0dc 	.word	0x2003d0dc
 8012820:	000a4cb8 	.word	0x000a4cb8
 8012824:	10624dd3 	.word	0x10624dd3
 8012828:	000124f8 	.word	0x000124f8
 801282c:	2003d0e8 	.word	0x2003d0e8
 8012830:	0801de2c 	.word	0x0801de2c
 8012834:	0801e264 	.word	0x0801e264
 8012838:	0801de70 	.word	0x0801de70
 801283c:	0801e290 	.word	0x0801e290
 8012840:	2003d0f0 	.word	0x2003d0f0
 8012844:	2003d0ec 	.word	0x2003d0ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284a:	7d1b      	ldrb	r3, [r3, #20]
 801284c:	2b0a      	cmp	r3, #10
 801284e:	d006      	beq.n	801285e <tcp_slowtmr+0x5c2>
 8012850:	4b2b      	ldr	r3, [pc, #172]	; (8012900 <tcp_slowtmr+0x664>)
 8012852:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012856:	492b      	ldr	r1, [pc, #172]	; (8012904 <tcp_slowtmr+0x668>)
 8012858:	482b      	ldr	r0, [pc, #172]	; (8012908 <tcp_slowtmr+0x66c>)
 801285a:	f008 fc7d 	bl	801b158 <iprintf>
    pcb_remove = 0;
 801285e:	2300      	movs	r3, #0
 8012860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012864:	4b29      	ldr	r3, [pc, #164]	; (801290c <tcp_slowtmr+0x670>)
 8012866:	681a      	ldr	r2, [r3, #0]
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	6a1b      	ldr	r3, [r3, #32]
 801286c:	1ad3      	subs	r3, r2, r3
 801286e:	2bf0      	cmp	r3, #240	; 0xf0
 8012870:	d904      	bls.n	801287c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012876:	3301      	adds	r3, #1
 8012878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801287c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012880:	2b00      	cmp	r3, #0
 8012882:	d02f      	beq.n	80128e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012886:	f000 fbf9 	bl	801307c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288c:	2b00      	cmp	r3, #0
 801288e:	d010      	beq.n	80128b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012890:	4b1f      	ldr	r3, [pc, #124]	; (8012910 <tcp_slowtmr+0x674>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012896:	429a      	cmp	r2, r3
 8012898:	d106      	bne.n	80128a8 <tcp_slowtmr+0x60c>
 801289a:	4b19      	ldr	r3, [pc, #100]	; (8012900 <tcp_slowtmr+0x664>)
 801289c:	f240 52af 	movw	r2, #1455	; 0x5af
 80128a0:	491c      	ldr	r1, [pc, #112]	; (8012914 <tcp_slowtmr+0x678>)
 80128a2:	4819      	ldr	r0, [pc, #100]	; (8012908 <tcp_slowtmr+0x66c>)
 80128a4:	f008 fc58 	bl	801b158 <iprintf>
        prev->next = pcb->next;
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	68da      	ldr	r2, [r3, #12]
 80128ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ae:	60da      	str	r2, [r3, #12]
 80128b0:	e00f      	b.n	80128d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80128b2:	4b17      	ldr	r3, [pc, #92]	; (8012910 <tcp_slowtmr+0x674>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d006      	beq.n	80128ca <tcp_slowtmr+0x62e>
 80128bc:	4b10      	ldr	r3, [pc, #64]	; (8012900 <tcp_slowtmr+0x664>)
 80128be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80128c2:	4915      	ldr	r1, [pc, #84]	; (8012918 <tcp_slowtmr+0x67c>)
 80128c4:	4810      	ldr	r0, [pc, #64]	; (8012908 <tcp_slowtmr+0x66c>)
 80128c6:	f008 fc47 	bl	801b158 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80128ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	4a10      	ldr	r2, [pc, #64]	; (8012910 <tcp_slowtmr+0x674>)
 80128d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80128d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80128d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80128dc:	69f8      	ldr	r0, [r7, #28]
 80128de:	f7fe ff3b 	bl	8011758 <tcp_free>
 80128e2:	e004      	b.n	80128ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80128e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80128ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1a9      	bne.n	8012848 <tcp_slowtmr+0x5ac>
    }
  }
}
 80128f4:	bf00      	nop
 80128f6:	bf00      	nop
 80128f8:	3730      	adds	r7, #48	; 0x30
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bdb0      	pop	{r4, r5, r7, pc}
 80128fe:	bf00      	nop
 8012900:	0801de2c 	.word	0x0801de2c
 8012904:	0801e2bc 	.word	0x0801e2bc
 8012908:	0801de70 	.word	0x0801de70
 801290c:	2003d0dc 	.word	0x2003d0dc
 8012910:	2003d0ec 	.word	0x2003d0ec
 8012914:	0801e2ec 	.word	0x0801e2ec
 8012918:	0801e314 	.word	0x0801e314

0801291c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012922:	4b2d      	ldr	r3, [pc, #180]	; (80129d8 <tcp_fasttmr+0xbc>)
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	3301      	adds	r3, #1
 8012928:	b2da      	uxtb	r2, r3
 801292a:	4b2b      	ldr	r3, [pc, #172]	; (80129d8 <tcp_fasttmr+0xbc>)
 801292c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801292e:	4b2b      	ldr	r3, [pc, #172]	; (80129dc <tcp_fasttmr+0xc0>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012934:	e048      	b.n	80129c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	7f9a      	ldrb	r2, [r3, #30]
 801293a:	4b27      	ldr	r3, [pc, #156]	; (80129d8 <tcp_fasttmr+0xbc>)
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	429a      	cmp	r2, r3
 8012940:	d03f      	beq.n	80129c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012942:	4b25      	ldr	r3, [pc, #148]	; (80129d8 <tcp_fasttmr+0xbc>)
 8012944:	781a      	ldrb	r2, [r3, #0]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	8b5b      	ldrh	r3, [r3, #26]
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	2b00      	cmp	r3, #0
 8012954:	d010      	beq.n	8012978 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	8b5b      	ldrh	r3, [r3, #26]
 801295a:	f043 0302 	orr.w	r3, r3, #2
 801295e:	b29a      	uxth	r2, r3
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f003 fff5 	bl	8016954 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	8b5b      	ldrh	r3, [r3, #26]
 801296e:	f023 0303 	bic.w	r3, r3, #3
 8012972:	b29a      	uxth	r2, r3
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	8b5b      	ldrh	r3, [r3, #26]
 801297c:	f003 0308 	and.w	r3, r3, #8
 8012980:	2b00      	cmp	r3, #0
 8012982:	d009      	beq.n	8012998 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	8b5b      	ldrh	r3, [r3, #26]
 8012988:	f023 0308 	bic.w	r3, r3, #8
 801298c:	b29a      	uxth	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7ff f874 	bl	8011a80 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00a      	beq.n	80129bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80129a6:	4b0e      	ldr	r3, [pc, #56]	; (80129e0 <tcp_fasttmr+0xc4>)
 80129a8:	2200      	movs	r2, #0
 80129aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f000 f819 	bl	80129e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80129b2:	4b0b      	ldr	r3, [pc, #44]	; (80129e0 <tcp_fasttmr+0xc4>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d000      	beq.n	80129bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80129ba:	e7b8      	b.n	801292e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	607b      	str	r3, [r7, #4]
 80129c0:	e002      	b.n	80129c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d1b3      	bne.n	8012936 <tcp_fasttmr+0x1a>
    }
  }
}
 80129ce:	bf00      	nop
 80129d0:	bf00      	nop
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	2003d0f2 	.word	0x2003d0f2
 80129dc:	2003d0e8 	.word	0x2003d0e8
 80129e0:	2003d0f0 	.word	0x2003d0f0

080129e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80129e4:	b590      	push	{r4, r7, lr}
 80129e6:	b085      	sub	sp, #20
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d109      	bne.n	8012a06 <tcp_process_refused_data+0x22>
 80129f2:	4b37      	ldr	r3, [pc, #220]	; (8012ad0 <tcp_process_refused_data+0xec>)
 80129f4:	f240 6209 	movw	r2, #1545	; 0x609
 80129f8:	4936      	ldr	r1, [pc, #216]	; (8012ad4 <tcp_process_refused_data+0xf0>)
 80129fa:	4837      	ldr	r0, [pc, #220]	; (8012ad8 <tcp_process_refused_data+0xf4>)
 80129fc:	f008 fbac 	bl	801b158 <iprintf>
 8012a00:	f06f 030f 	mvn.w	r3, #15
 8012a04:	e060      	b.n	8012ac8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a0a:	7b5b      	ldrb	r3, [r3, #13]
 8012a0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2200      	movs	r2, #0
 8012a18:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00b      	beq.n	8012a3c <tcp_process_refused_data+0x58>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6918      	ldr	r0, [r3, #16]
 8012a2e:	2300      	movs	r3, #0
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	6879      	ldr	r1, [r7, #4]
 8012a34:	47a0      	blx	r4
 8012a36:	4603      	mov	r3, r0
 8012a38:	73fb      	strb	r3, [r7, #15]
 8012a3a:	e007      	b.n	8012a4c <tcp_process_refused_data+0x68>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	68ba      	ldr	r2, [r7, #8]
 8012a40:	6879      	ldr	r1, [r7, #4]
 8012a42:	2000      	movs	r0, #0
 8012a44:	f000 f8a4 	bl	8012b90 <tcp_recv_null>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d12a      	bne.n	8012aaa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012a54:	7bbb      	ldrb	r3, [r7, #14]
 8012a56:	f003 0320 	and.w	r3, r3, #32
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d033      	beq.n	8012ac6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a62:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012a66:	d005      	beq.n	8012a74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	b29a      	uxth	r2, r3
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d00b      	beq.n	8012a96 <tcp_process_refused_data+0xb2>
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6918      	ldr	r0, [r3, #16]
 8012a88:	2300      	movs	r3, #0
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	6879      	ldr	r1, [r7, #4]
 8012a8e:	47a0      	blx	r4
 8012a90:	4603      	mov	r3, r0
 8012a92:	73fb      	strb	r3, [r7, #15]
 8012a94:	e001      	b.n	8012a9a <tcp_process_refused_data+0xb6>
 8012a96:	2300      	movs	r3, #0
 8012a98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a9e:	f113 0f0d 	cmn.w	r3, #13
 8012aa2:	d110      	bne.n	8012ac6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012aa4:	f06f 030c 	mvn.w	r3, #12
 8012aa8:	e00e      	b.n	8012ac8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aae:	f113 0f0d 	cmn.w	r3, #13
 8012ab2:	d102      	bne.n	8012aba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012ab4:	f06f 030c 	mvn.w	r3, #12
 8012ab8:	e006      	b.n	8012ac8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012ac0:	f06f 0304 	mvn.w	r3, #4
 8012ac4:	e000      	b.n	8012ac8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012ac6:	2300      	movs	r3, #0
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3714      	adds	r7, #20
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd90      	pop	{r4, r7, pc}
 8012ad0:	0801de2c 	.word	0x0801de2c
 8012ad4:	0801e33c 	.word	0x0801e33c
 8012ad8:	0801de70 	.word	0x0801de70

08012adc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012ae4:	e007      	b.n	8012af6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f000 f80a 	bl	8012b06 <tcp_seg_free>
    seg = next;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d1f4      	bne.n	8012ae6 <tcp_segs_free+0xa>
  }
}
 8012afc:	bf00      	nop
 8012afe:	bf00      	nop
 8012b00:	3710      	adds	r7, #16
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012b06:	b580      	push	{r7, lr}
 8012b08:	b082      	sub	sp, #8
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00c      	beq.n	8012b2e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d004      	beq.n	8012b26 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fe fb5d 	bl	80111e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012b26:	6879      	ldr	r1, [r7, #4]
 8012b28:	2003      	movs	r0, #3
 8012b2a:	f7fd fc83 	bl	8010434 <memp_free>
  }
}
 8012b2e:	bf00      	nop
 8012b30:	3708      	adds	r7, #8
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
	...

08012b38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d106      	bne.n	8012b54 <tcp_seg_copy+0x1c>
 8012b46:	4b0f      	ldr	r3, [pc, #60]	; (8012b84 <tcp_seg_copy+0x4c>)
 8012b48:	f240 6282 	movw	r2, #1666	; 0x682
 8012b4c:	490e      	ldr	r1, [pc, #56]	; (8012b88 <tcp_seg_copy+0x50>)
 8012b4e:	480f      	ldr	r0, [pc, #60]	; (8012b8c <tcp_seg_copy+0x54>)
 8012b50:	f008 fb02 	bl	801b158 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012b54:	2003      	movs	r0, #3
 8012b56:	f7fd fbf7 	bl	8010348 <memp_malloc>
 8012b5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d101      	bne.n	8012b66 <tcp_seg_copy+0x2e>
    return NULL;
 8012b62:	2300      	movs	r3, #0
 8012b64:	e00a      	b.n	8012b7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012b66:	2210      	movs	r2, #16
 8012b68:	6879      	ldr	r1, [r7, #4]
 8012b6a:	68f8      	ldr	r0, [r7, #12]
 8012b6c:	f008 fd15 	bl	801b59a <memcpy>
  pbuf_ref(cseg->p);
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fe fbd9 	bl	801132c <pbuf_ref>
  return cseg;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3710      	adds	r7, #16
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	0801de2c 	.word	0x0801de2c
 8012b88:	0801e380 	.word	0x0801e380
 8012b8c:	0801de70 	.word	0x0801de70

08012b90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b084      	sub	sp, #16
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
 8012b9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d109      	bne.n	8012bb8 <tcp_recv_null+0x28>
 8012ba4:	4b12      	ldr	r3, [pc, #72]	; (8012bf0 <tcp_recv_null+0x60>)
 8012ba6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012baa:	4912      	ldr	r1, [pc, #72]	; (8012bf4 <tcp_recv_null+0x64>)
 8012bac:	4812      	ldr	r0, [pc, #72]	; (8012bf8 <tcp_recv_null+0x68>)
 8012bae:	f008 fad3 	bl	801b158 <iprintf>
 8012bb2:	f06f 030f 	mvn.w	r3, #15
 8012bb6:	e016      	b.n	8012be6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d009      	beq.n	8012bd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	891b      	ldrh	r3, [r3, #8]
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	68b8      	ldr	r0, [r7, #8]
 8012bc6:	f7ff fad3 	bl	8012170 <tcp_recved>
    pbuf_free(p);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f7fe fb08 	bl	80111e0 <pbuf_free>
 8012bd0:	e008      	b.n	8012be4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d104      	bne.n	8012be4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012bda:	68b8      	ldr	r0, [r7, #8]
 8012bdc:	f7fe ffba 	bl	8011b54 <tcp_close>
 8012be0:	4603      	mov	r3, r0
 8012be2:	e000      	b.n	8012be6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012be4:	2300      	movs	r3, #0
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	0801de2c 	.word	0x0801de2c
 8012bf4:	0801e39c 	.word	0x0801e39c
 8012bf8:	0801de70 	.word	0x0801de70

08012bfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b086      	sub	sp, #24
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	4603      	mov	r3, r0
 8012c04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	db01      	blt.n	8012c12 <tcp_kill_prio+0x16>
 8012c0e:	79fb      	ldrb	r3, [r7, #7]
 8012c10:	e000      	b.n	8012c14 <tcp_kill_prio+0x18>
 8012c12:	237f      	movs	r3, #127	; 0x7f
 8012c14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012c16:	7afb      	ldrb	r3, [r7, #11]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d034      	beq.n	8012c86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012c1c:	7afb      	ldrb	r3, [r7, #11]
 8012c1e:	3b01      	subs	r3, #1
 8012c20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012c22:	2300      	movs	r3, #0
 8012c24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012c26:	2300      	movs	r3, #0
 8012c28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c2a:	4b19      	ldr	r3, [pc, #100]	; (8012c90 <tcp_kill_prio+0x94>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	617b      	str	r3, [r7, #20]
 8012c30:	e01f      	b.n	8012c72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	7d5b      	ldrb	r3, [r3, #21]
 8012c36:	7afa      	ldrb	r2, [r7, #11]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d80c      	bhi.n	8012c56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012c40:	7afa      	ldrb	r2, [r7, #11]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d112      	bne.n	8012c6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012c46:	4b13      	ldr	r3, [pc, #76]	; (8012c94 <tcp_kill_prio+0x98>)
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	6a1b      	ldr	r3, [r3, #32]
 8012c4e:	1ad3      	subs	r3, r2, r3
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d80a      	bhi.n	8012c6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012c56:	4b0f      	ldr	r3, [pc, #60]	; (8012c94 <tcp_kill_prio+0x98>)
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	6a1b      	ldr	r3, [r3, #32]
 8012c5e:	1ad3      	subs	r3, r2, r3
 8012c60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	7d5b      	ldrb	r3, [r3, #21]
 8012c6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1dc      	bne.n	8012c32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d004      	beq.n	8012c88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012c7e:	6938      	ldr	r0, [r7, #16]
 8012c80:	f7ff f8ae 	bl	8011de0 <tcp_abort>
 8012c84:	e000      	b.n	8012c88 <tcp_kill_prio+0x8c>
    return;
 8012c86:	bf00      	nop
  }
}
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	2003d0e8 	.word	0x2003d0e8
 8012c94:	2003d0dc 	.word	0x2003d0dc

08012c98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b086      	sub	sp, #24
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012ca2:	79fb      	ldrb	r3, [r7, #7]
 8012ca4:	2b08      	cmp	r3, #8
 8012ca6:	d009      	beq.n	8012cbc <tcp_kill_state+0x24>
 8012ca8:	79fb      	ldrb	r3, [r7, #7]
 8012caa:	2b09      	cmp	r3, #9
 8012cac:	d006      	beq.n	8012cbc <tcp_kill_state+0x24>
 8012cae:	4b1a      	ldr	r3, [pc, #104]	; (8012d18 <tcp_kill_state+0x80>)
 8012cb0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012cb4:	4919      	ldr	r1, [pc, #100]	; (8012d1c <tcp_kill_state+0x84>)
 8012cb6:	481a      	ldr	r0, [pc, #104]	; (8012d20 <tcp_kill_state+0x88>)
 8012cb8:	f008 fa4e 	bl	801b158 <iprintf>

  inactivity = 0;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cc4:	4b17      	ldr	r3, [pc, #92]	; (8012d24 <tcp_kill_state+0x8c>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	617b      	str	r3, [r7, #20]
 8012cca:	e017      	b.n	8012cfc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	7d1b      	ldrb	r3, [r3, #20]
 8012cd0:	79fa      	ldrb	r2, [r7, #7]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d10f      	bne.n	8012cf6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012cd6:	4b14      	ldr	r3, [pc, #80]	; (8012d28 <tcp_kill_state+0x90>)
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	6a1b      	ldr	r3, [r3, #32]
 8012cde:	1ad3      	subs	r3, r2, r3
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d807      	bhi.n	8012cf6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012ce6:	4b10      	ldr	r3, [pc, #64]	; (8012d28 <tcp_kill_state+0x90>)
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	6a1b      	ldr	r3, [r3, #32]
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	68db      	ldr	r3, [r3, #12]
 8012cfa:	617b      	str	r3, [r7, #20]
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d1e4      	bne.n	8012ccc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d003      	beq.n	8012d10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012d08:	2100      	movs	r1, #0
 8012d0a:	6938      	ldr	r0, [r7, #16]
 8012d0c:	f7fe ffaa 	bl	8011c64 <tcp_abandon>
  }
}
 8012d10:	bf00      	nop
 8012d12:	3718      	adds	r7, #24
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	0801de2c 	.word	0x0801de2c
 8012d1c:	0801e3b8 	.word	0x0801e3b8
 8012d20:	0801de70 	.word	0x0801de70
 8012d24:	2003d0e8 	.word	0x2003d0e8
 8012d28:	2003d0dc 	.word	0x2003d0dc

08012d2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012d32:	2300      	movs	r3, #0
 8012d34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012d36:	2300      	movs	r3, #0
 8012d38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d3a:	4b12      	ldr	r3, [pc, #72]	; (8012d84 <tcp_kill_timewait+0x58>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	60fb      	str	r3, [r7, #12]
 8012d40:	e012      	b.n	8012d68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012d42:	4b11      	ldr	r3, [pc, #68]	; (8012d88 <tcp_kill_timewait+0x5c>)
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	6a1b      	ldr	r3, [r3, #32]
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d807      	bhi.n	8012d62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012d52:	4b0d      	ldr	r3, [pc, #52]	; (8012d88 <tcp_kill_timewait+0x5c>)
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	6a1b      	ldr	r3, [r3, #32]
 8012d5a:	1ad3      	subs	r3, r2, r3
 8012d5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	60fb      	str	r3, [r7, #12]
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d1e9      	bne.n	8012d42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012d6e:	68bb      	ldr	r3, [r7, #8]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d002      	beq.n	8012d7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012d74:	68b8      	ldr	r0, [r7, #8]
 8012d76:	f7ff f833 	bl	8011de0 <tcp_abort>
  }
}
 8012d7a:	bf00      	nop
 8012d7c:	3710      	adds	r7, #16
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	2003d0ec 	.word	0x2003d0ec
 8012d88:	2003d0dc 	.word	0x2003d0dc

08012d8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012d92:	4b10      	ldr	r3, [pc, #64]	; (8012dd4 <tcp_handle_closepend+0x48>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012d98:	e014      	b.n	8012dc4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8b5b      	ldrh	r3, [r3, #26]
 8012da4:	f003 0308 	and.w	r3, r3, #8
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d009      	beq.n	8012dc0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	8b5b      	ldrh	r3, [r3, #26]
 8012db0:	f023 0308 	bic.w	r3, r3, #8
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7fe fe60 	bl	8011a80 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d1e7      	bne.n	8012d9a <tcp_handle_closepend+0xe>
  }
}
 8012dca:	bf00      	nop
 8012dcc:	bf00      	nop
 8012dce:	3708      	adds	r7, #8
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	2003d0e8 	.word	0x2003d0e8

08012dd8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	4603      	mov	r3, r0
 8012de0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012de2:	2001      	movs	r0, #1
 8012de4:	f7fd fab0 	bl	8010348 <memp_malloc>
 8012de8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d126      	bne.n	8012e3e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012df0:	f7ff ffcc 	bl	8012d8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012df4:	f7ff ff9a 	bl	8012d2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012df8:	2001      	movs	r0, #1
 8012dfa:	f7fd faa5 	bl	8010348 <memp_malloc>
 8012dfe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d11b      	bne.n	8012e3e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012e06:	2009      	movs	r0, #9
 8012e08:	f7ff ff46 	bl	8012c98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	f7fd fa9b 	bl	8010348 <memp_malloc>
 8012e12:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d111      	bne.n	8012e3e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012e1a:	2008      	movs	r0, #8
 8012e1c:	f7ff ff3c 	bl	8012c98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e20:	2001      	movs	r0, #1
 8012e22:	f7fd fa91 	bl	8010348 <memp_malloc>
 8012e26:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d107      	bne.n	8012e3e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012e2e:	79fb      	ldrb	r3, [r7, #7]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff fee3 	bl	8012bfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e36:	2001      	movs	r0, #1
 8012e38:	f7fd fa86 	bl	8010348 <memp_malloc>
 8012e3c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d03f      	beq.n	8012ec4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012e44:	229c      	movs	r2, #156	; 0x9c
 8012e46:	2100      	movs	r1, #0
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f008 fadb 	bl	801b404 <memset>
    pcb->prio = prio;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	79fa      	ldrb	r2, [r7, #7]
 8012e52:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012e5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012e64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	22ff      	movs	r2, #255	; 0xff
 8012e72:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e7a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	2206      	movs	r2, #6
 8012e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2206      	movs	r2, #6
 8012e88:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e90:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2201      	movs	r2, #1
 8012e96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012e9a:	4b0d      	ldr	r3, [pc, #52]	; (8012ed0 <tcp_alloc+0xf8>)
 8012e9c:	681a      	ldr	r2, [r3, #0]
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012ea2:	4b0c      	ldr	r3, [pc, #48]	; (8012ed4 <tcp_alloc+0xfc>)
 8012ea4:	781a      	ldrb	r2, [r3, #0]
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012eb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	4a08      	ldr	r2, [pc, #32]	; (8012ed8 <tcp_alloc+0x100>)
 8012eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	4a07      	ldr	r2, [pc, #28]	; (8012edc <tcp_alloc+0x104>)
 8012ec0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3710      	adds	r7, #16
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	2003d0dc 	.word	0x2003d0dc
 8012ed4:	2003d0f2 	.word	0x2003d0f2
 8012ed8:	08012b91 	.word	0x08012b91
 8012edc:	006ddd00 	.word	0x006ddd00

08012ee0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012eea:	2040      	movs	r0, #64	; 0x40
 8012eec:	f7ff ff74 	bl	8012dd8 <tcp_alloc>
 8012ef0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3710      	adds	r7, #16
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b083      	sub	sp, #12
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d002      	beq.n	8012f12 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	683a      	ldr	r2, [r7, #0]
 8012f10:	611a      	str	r2, [r3, #16]
  }
}
 8012f12:	bf00      	nop
 8012f14:	370c      	adds	r7, #12
 8012f16:	46bd      	mov	sp, r7
 8012f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1c:	4770      	bx	lr
	...

08012f20 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d00e      	beq.n	8012f4e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	7d1b      	ldrb	r3, [r3, #20]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d106      	bne.n	8012f46 <tcp_recv+0x26>
 8012f38:	4b07      	ldr	r3, [pc, #28]	; (8012f58 <tcp_recv+0x38>)
 8012f3a:	f240 72df 	movw	r2, #2015	; 0x7df
 8012f3e:	4907      	ldr	r1, [pc, #28]	; (8012f5c <tcp_recv+0x3c>)
 8012f40:	4807      	ldr	r0, [pc, #28]	; (8012f60 <tcp_recv+0x40>)
 8012f42:	f008 f909 	bl	801b158 <iprintf>
    pcb->recv = recv;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8012f4e:	bf00      	nop
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	0801de2c 	.word	0x0801de2c
 8012f5c:	0801e3c8 	.word	0x0801e3c8
 8012f60:	0801de70 	.word	0x0801de70

08012f64 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b082      	sub	sp, #8
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
 8012f6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d00e      	beq.n	8012f92 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	7d1b      	ldrb	r3, [r3, #20]
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d106      	bne.n	8012f8a <tcp_sent+0x26>
 8012f7c:	4b07      	ldr	r3, [pc, #28]	; (8012f9c <tcp_sent+0x38>)
 8012f7e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8012f82:	4907      	ldr	r1, [pc, #28]	; (8012fa0 <tcp_sent+0x3c>)
 8012f84:	4807      	ldr	r0, [pc, #28]	; (8012fa4 <tcp_sent+0x40>)
 8012f86:	f008 f8e7 	bl	801b158 <iprintf>
    pcb->sent = sent;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	683a      	ldr	r2, [r7, #0]
 8012f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012f92:	bf00      	nop
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	0801de2c 	.word	0x0801de2c
 8012fa0:	0801e3f0 	.word	0x0801e3f0
 8012fa4:	0801de70 	.word	0x0801de70

08012fa8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d00e      	beq.n	8012fd6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	7d1b      	ldrb	r3, [r3, #20]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d106      	bne.n	8012fce <tcp_err+0x26>
 8012fc0:	4b07      	ldr	r3, [pc, #28]	; (8012fe0 <tcp_err+0x38>)
 8012fc2:	f640 020d 	movw	r2, #2061	; 0x80d
 8012fc6:	4907      	ldr	r1, [pc, #28]	; (8012fe4 <tcp_err+0x3c>)
 8012fc8:	4807      	ldr	r0, [pc, #28]	; (8012fe8 <tcp_err+0x40>)
 8012fca:	f008 f8c5 	bl	801b158 <iprintf>
    pcb->errf = err;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	683a      	ldr	r2, [r7, #0]
 8012fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012fd6:	bf00      	nop
 8012fd8:	3708      	adds	r7, #8
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	0801de2c 	.word	0x0801de2c
 8012fe4:	0801e418 	.word	0x0801e418
 8012fe8:	0801de70 	.word	0x0801de70

08012fec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012fec:	b480      	push	{r7}
 8012fee:	b085      	sub	sp, #20
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d008      	beq.n	801300e <tcp_accept+0x22>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	7d1b      	ldrb	r3, [r3, #20]
 8013000:	2b01      	cmp	r3, #1
 8013002:	d104      	bne.n	801300e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	683a      	ldr	r2, [r7, #0]
 801300c:	619a      	str	r2, [r3, #24]
  }
}
 801300e:	bf00      	nop
 8013010:	3714      	adds	r7, #20
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr
	...

0801301c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	4613      	mov	r3, r2
 8013028:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d107      	bne.n	8013040 <tcp_poll+0x24>
 8013030:	4b0e      	ldr	r3, [pc, #56]	; (801306c <tcp_poll+0x50>)
 8013032:	f640 023d 	movw	r2, #2109	; 0x83d
 8013036:	490e      	ldr	r1, [pc, #56]	; (8013070 <tcp_poll+0x54>)
 8013038:	480e      	ldr	r0, [pc, #56]	; (8013074 <tcp_poll+0x58>)
 801303a:	f008 f88d 	bl	801b158 <iprintf>
 801303e:	e011      	b.n	8013064 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	7d1b      	ldrb	r3, [r3, #20]
 8013044:	2b01      	cmp	r3, #1
 8013046:	d106      	bne.n	8013056 <tcp_poll+0x3a>
 8013048:	4b08      	ldr	r3, [pc, #32]	; (801306c <tcp_poll+0x50>)
 801304a:	f640 023e 	movw	r2, #2110	; 0x83e
 801304e:	490a      	ldr	r1, [pc, #40]	; (8013078 <tcp_poll+0x5c>)
 8013050:	4808      	ldr	r0, [pc, #32]	; (8013074 <tcp_poll+0x58>)
 8013052:	f008 f881 	bl	801b158 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	79fa      	ldrb	r2, [r7, #7]
 8013062:	775a      	strb	r2, [r3, #29]
}
 8013064:	3710      	adds	r7, #16
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	0801de2c 	.word	0x0801de2c
 8013070:	0801e440 	.word	0x0801e440
 8013074:	0801de70 	.word	0x0801de70
 8013078:	0801e458 	.word	0x0801e458

0801307c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d107      	bne.n	801309a <tcp_pcb_purge+0x1e>
 801308a:	4b21      	ldr	r3, [pc, #132]	; (8013110 <tcp_pcb_purge+0x94>)
 801308c:	f640 0251 	movw	r2, #2129	; 0x851
 8013090:	4920      	ldr	r1, [pc, #128]	; (8013114 <tcp_pcb_purge+0x98>)
 8013092:	4821      	ldr	r0, [pc, #132]	; (8013118 <tcp_pcb_purge+0x9c>)
 8013094:	f008 f860 	bl	801b158 <iprintf>
 8013098:	e037      	b.n	801310a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	7d1b      	ldrb	r3, [r3, #20]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d033      	beq.n	801310a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80130a6:	2b0a      	cmp	r3, #10
 80130a8:	d02f      	beq.n	801310a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d02b      	beq.n	801310a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d007      	beq.n	80130ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fe f88e 	bl	80111e0 <pbuf_free>
      pcb->refused_data = NULL;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2200      	movs	r2, #0
 80130c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d002      	beq.n	80130d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 f986 	bl	80133e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7ff fcf9 	bl	8012adc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7ff fcf4 	bl	8012adc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2200      	movs	r2, #0
 80130f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	0801de2c 	.word	0x0801de2c
 8013114:	0801e478 	.word	0x0801e478
 8013118:	0801de70 	.word	0x0801de70

0801311c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d106      	bne.n	801313a <tcp_pcb_remove+0x1e>
 801312c:	4b3e      	ldr	r3, [pc, #248]	; (8013228 <tcp_pcb_remove+0x10c>)
 801312e:	f640 0283 	movw	r2, #2179	; 0x883
 8013132:	493e      	ldr	r1, [pc, #248]	; (801322c <tcp_pcb_remove+0x110>)
 8013134:	483e      	ldr	r0, [pc, #248]	; (8013230 <tcp_pcb_remove+0x114>)
 8013136:	f008 f80f 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d106      	bne.n	801314e <tcp_pcb_remove+0x32>
 8013140:	4b39      	ldr	r3, [pc, #228]	; (8013228 <tcp_pcb_remove+0x10c>)
 8013142:	f640 0284 	movw	r2, #2180	; 0x884
 8013146:	493b      	ldr	r1, [pc, #236]	; (8013234 <tcp_pcb_remove+0x118>)
 8013148:	4839      	ldr	r0, [pc, #228]	; (8013230 <tcp_pcb_remove+0x114>)
 801314a:	f008 f805 	bl	801b158 <iprintf>

  TCP_RMV(pcblist, pcb);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	683a      	ldr	r2, [r7, #0]
 8013154:	429a      	cmp	r2, r3
 8013156:	d105      	bne.n	8013164 <tcp_pcb_remove+0x48>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68da      	ldr	r2, [r3, #12]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	601a      	str	r2, [r3, #0]
 8013162:	e013      	b.n	801318c <tcp_pcb_remove+0x70>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60fb      	str	r3, [r7, #12]
 801316a:	e00c      	b.n	8013186 <tcp_pcb_remove+0x6a>
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	683a      	ldr	r2, [r7, #0]
 8013172:	429a      	cmp	r2, r3
 8013174:	d104      	bne.n	8013180 <tcp_pcb_remove+0x64>
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	68da      	ldr	r2, [r3, #12]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	e005      	b.n	801318c <tcp_pcb_remove+0x70>
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	60fb      	str	r3, [r7, #12]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d1ef      	bne.n	801316c <tcp_pcb_remove+0x50>
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	2200      	movs	r2, #0
 8013190:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013192:	6838      	ldr	r0, [r7, #0]
 8013194:	f7ff ff72 	bl	801307c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	7d1b      	ldrb	r3, [r3, #20]
 801319c:	2b0a      	cmp	r3, #10
 801319e:	d013      	beq.n	80131c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d00f      	beq.n	80131c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	8b5b      	ldrh	r3, [r3, #26]
 80131ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d009      	beq.n	80131c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	8b5b      	ldrh	r3, [r3, #26]
 80131b8:	f043 0302 	orr.w	r3, r3, #2
 80131bc:	b29a      	uxth	r2, r3
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80131c2:	6838      	ldr	r0, [r7, #0]
 80131c4:	f003 fbc6 	bl	8016954 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	7d1b      	ldrb	r3, [r3, #20]
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d020      	beq.n	8013212 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d006      	beq.n	80131e6 <tcp_pcb_remove+0xca>
 80131d8:	4b13      	ldr	r3, [pc, #76]	; (8013228 <tcp_pcb_remove+0x10c>)
 80131da:	f640 0293 	movw	r2, #2195	; 0x893
 80131de:	4916      	ldr	r1, [pc, #88]	; (8013238 <tcp_pcb_remove+0x11c>)
 80131e0:	4813      	ldr	r0, [pc, #76]	; (8013230 <tcp_pcb_remove+0x114>)
 80131e2:	f007 ffb9 	bl	801b158 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d006      	beq.n	80131fc <tcp_pcb_remove+0xe0>
 80131ee:	4b0e      	ldr	r3, [pc, #56]	; (8013228 <tcp_pcb_remove+0x10c>)
 80131f0:	f640 0294 	movw	r2, #2196	; 0x894
 80131f4:	4911      	ldr	r1, [pc, #68]	; (801323c <tcp_pcb_remove+0x120>)
 80131f6:	480e      	ldr	r0, [pc, #56]	; (8013230 <tcp_pcb_remove+0x114>)
 80131f8:	f007 ffae 	bl	801b158 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013200:	2b00      	cmp	r3, #0
 8013202:	d006      	beq.n	8013212 <tcp_pcb_remove+0xf6>
 8013204:	4b08      	ldr	r3, [pc, #32]	; (8013228 <tcp_pcb_remove+0x10c>)
 8013206:	f640 0296 	movw	r2, #2198	; 0x896
 801320a:	490d      	ldr	r1, [pc, #52]	; (8013240 <tcp_pcb_remove+0x124>)
 801320c:	4808      	ldr	r0, [pc, #32]	; (8013230 <tcp_pcb_remove+0x114>)
 801320e:	f007 ffa3 	bl	801b158 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	2200      	movs	r2, #0
 8013216:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	2200      	movs	r2, #0
 801321c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801321e:	bf00      	nop
 8013220:	3710      	adds	r7, #16
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	0801de2c 	.word	0x0801de2c
 801322c:	0801e494 	.word	0x0801e494
 8013230:	0801de70 	.word	0x0801de70
 8013234:	0801e4b0 	.word	0x0801e4b0
 8013238:	0801e4d0 	.word	0x0801e4d0
 801323c:	0801e4e8 	.word	0x0801e4e8
 8013240:	0801e504 	.word	0x0801e504

08013244 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d106      	bne.n	8013260 <tcp_next_iss+0x1c>
 8013252:	4b0a      	ldr	r3, [pc, #40]	; (801327c <tcp_next_iss+0x38>)
 8013254:	f640 02af 	movw	r2, #2223	; 0x8af
 8013258:	4909      	ldr	r1, [pc, #36]	; (8013280 <tcp_next_iss+0x3c>)
 801325a:	480a      	ldr	r0, [pc, #40]	; (8013284 <tcp_next_iss+0x40>)
 801325c:	f007 ff7c 	bl	801b158 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013260:	4b09      	ldr	r3, [pc, #36]	; (8013288 <tcp_next_iss+0x44>)
 8013262:	681a      	ldr	r2, [r3, #0]
 8013264:	4b09      	ldr	r3, [pc, #36]	; (801328c <tcp_next_iss+0x48>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4413      	add	r3, r2
 801326a:	4a07      	ldr	r2, [pc, #28]	; (8013288 <tcp_next_iss+0x44>)
 801326c:	6013      	str	r3, [r2, #0]
  return iss;
 801326e:	4b06      	ldr	r3, [pc, #24]	; (8013288 <tcp_next_iss+0x44>)
 8013270:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013272:	4618      	mov	r0, r3
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	0801de2c 	.word	0x0801de2c
 8013280:	0801e51c 	.word	0x0801e51c
 8013284:	0801de70 	.word	0x0801de70
 8013288:	20000028 	.word	0x20000028
 801328c:	2003d0dc 	.word	0x2003d0dc

08013290 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b086      	sub	sp, #24
 8013294:	af00      	add	r7, sp, #0
 8013296:	4603      	mov	r3, r0
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
 801329c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d106      	bne.n	80132b2 <tcp_eff_send_mss_netif+0x22>
 80132a4:	4b14      	ldr	r3, [pc, #80]	; (80132f8 <tcp_eff_send_mss_netif+0x68>)
 80132a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80132aa:	4914      	ldr	r1, [pc, #80]	; (80132fc <tcp_eff_send_mss_netif+0x6c>)
 80132ac:	4814      	ldr	r0, [pc, #80]	; (8013300 <tcp_eff_send_mss_netif+0x70>)
 80132ae:	f007 ff53 	bl	801b158 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80132b8:	89fb      	ldrh	r3, [r7, #14]
 80132ba:	e019      	b.n	80132f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80132c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80132c2:	8afb      	ldrh	r3, [r7, #22]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d012      	beq.n	80132ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80132c8:	2328      	movs	r3, #40	; 0x28
 80132ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80132cc:	8afa      	ldrh	r2, [r7, #22]
 80132ce:	8abb      	ldrh	r3, [r7, #20]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d904      	bls.n	80132de <tcp_eff_send_mss_netif+0x4e>
 80132d4:	8afa      	ldrh	r2, [r7, #22]
 80132d6:	8abb      	ldrh	r3, [r7, #20]
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	b29b      	uxth	r3, r3
 80132dc:	e000      	b.n	80132e0 <tcp_eff_send_mss_netif+0x50>
 80132de:	2300      	movs	r3, #0
 80132e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80132e2:	8a7a      	ldrh	r2, [r7, #18]
 80132e4:	89fb      	ldrh	r3, [r7, #14]
 80132e6:	4293      	cmp	r3, r2
 80132e8:	bf28      	it	cs
 80132ea:	4613      	movcs	r3, r2
 80132ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80132ee:	89fb      	ldrh	r3, [r7, #14]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3718      	adds	r7, #24
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	0801de2c 	.word	0x0801de2c
 80132fc:	0801e538 	.word	0x0801e538
 8013300:	0801de70 	.word	0x0801de70

08013304 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d119      	bne.n	801334c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013318:	4b10      	ldr	r3, [pc, #64]	; (801335c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801331a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801331e:	4910      	ldr	r1, [pc, #64]	; (8013360 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013320:	4810      	ldr	r0, [pc, #64]	; (8013364 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013322:	f007 ff19 	bl	801b158 <iprintf>

  while (pcb != NULL) {
 8013326:	e011      	b.n	801334c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681a      	ldr	r2, [r3, #0]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	429a      	cmp	r2, r3
 8013332:	d108      	bne.n	8013346 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f7fe fd50 	bl	8011de0 <tcp_abort>
      pcb = next;
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e002      	b.n	801334c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d1ea      	bne.n	8013328 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013352:	bf00      	nop
 8013354:	bf00      	nop
 8013356:	3710      	adds	r7, #16
 8013358:	46bd      	mov	sp, r7
 801335a:	bd80      	pop	{r7, pc}
 801335c:	0801de2c 	.word	0x0801de2c
 8013360:	0801e560 	.word	0x0801e560
 8013364:	0801de70 	.word	0x0801de70

08013368 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b084      	sub	sp, #16
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d02a      	beq.n	80133ce <tcp_netif_ip_addr_changed+0x66>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d026      	beq.n	80133ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013380:	4b15      	ldr	r3, [pc, #84]	; (80133d8 <tcp_netif_ip_addr_changed+0x70>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4619      	mov	r1, r3
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7ff ffbc 	bl	8013304 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801338c:	4b13      	ldr	r3, [pc, #76]	; (80133dc <tcp_netif_ip_addr_changed+0x74>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	4619      	mov	r1, r3
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ff ffb6 	bl	8013304 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d017      	beq.n	80133ce <tcp_netif_ip_addr_changed+0x66>
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d013      	beq.n	80133ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80133a6:	4b0e      	ldr	r3, [pc, #56]	; (80133e0 <tcp_netif_ip_addr_changed+0x78>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	60fb      	str	r3, [r7, #12]
 80133ac:	e00c      	b.n	80133c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681a      	ldr	r2, [r3, #0]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d103      	bne.n	80133c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	60fb      	str	r3, [r7, #12]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d1ef      	bne.n	80133ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80133ce:	bf00      	nop
 80133d0:	3710      	adds	r7, #16
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	2003d0e8 	.word	0x2003d0e8
 80133dc:	2003d0e0 	.word	0x2003d0e0
 80133e0:	2003d0e4 	.word	0x2003d0e4

080133e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d007      	beq.n	8013404 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff fb6f 	bl	8012adc <tcp_segs_free>
    pcb->ooseq = NULL;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2200      	movs	r2, #0
 8013402:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013404:	bf00      	nop
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}

0801340c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801340c:	b590      	push	{r4, r7, lr}
 801340e:	b08d      	sub	sp, #52	; 0x34
 8013410:	af04      	add	r7, sp, #16
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d105      	bne.n	8013428 <tcp_input+0x1c>
 801341c:	4b9b      	ldr	r3, [pc, #620]	; (801368c <tcp_input+0x280>)
 801341e:	2283      	movs	r2, #131	; 0x83
 8013420:	499b      	ldr	r1, [pc, #620]	; (8013690 <tcp_input+0x284>)
 8013422:	489c      	ldr	r0, [pc, #624]	; (8013694 <tcp_input+0x288>)
 8013424:	f007 fe98 	bl	801b158 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	685b      	ldr	r3, [r3, #4]
 801342c:	4a9a      	ldr	r2, [pc, #616]	; (8013698 <tcp_input+0x28c>)
 801342e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	895b      	ldrh	r3, [r3, #10]
 8013434:	2b13      	cmp	r3, #19
 8013436:	f240 83d1 	bls.w	8013bdc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801343a:	4b98      	ldr	r3, [pc, #608]	; (801369c <tcp_input+0x290>)
 801343c:	695b      	ldr	r3, [r3, #20]
 801343e:	4a97      	ldr	r2, [pc, #604]	; (801369c <tcp_input+0x290>)
 8013440:	6812      	ldr	r2, [r2, #0]
 8013442:	4611      	mov	r1, r2
 8013444:	4618      	mov	r0, r3
 8013446:	f006 fbcf 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	f040 83c7 	bne.w	8013be0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013452:	4b92      	ldr	r3, [pc, #584]	; (801369c <tcp_input+0x290>)
 8013454:	695b      	ldr	r3, [r3, #20]
 8013456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801345a:	2be0      	cmp	r3, #224	; 0xe0
 801345c:	f000 83c0 	beq.w	8013be0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013460:	4b8d      	ldr	r3, [pc, #564]	; (8013698 <tcp_input+0x28c>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	899b      	ldrh	r3, [r3, #12]
 8013466:	b29b      	uxth	r3, r3
 8013468:	4618      	mov	r0, r3
 801346a:	f7fc fa95 	bl	800f998 <lwip_htons>
 801346e:	4603      	mov	r3, r0
 8013470:	0b1b      	lsrs	r3, r3, #12
 8013472:	b29b      	uxth	r3, r3
 8013474:	b2db      	uxtb	r3, r3
 8013476:	009b      	lsls	r3, r3, #2
 8013478:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801347a:	7cbb      	ldrb	r3, [r7, #18]
 801347c:	2b13      	cmp	r3, #19
 801347e:	f240 83b1 	bls.w	8013be4 <tcp_input+0x7d8>
 8013482:	7cbb      	ldrb	r3, [r7, #18]
 8013484:	b29a      	uxth	r2, r3
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	891b      	ldrh	r3, [r3, #8]
 801348a:	429a      	cmp	r2, r3
 801348c:	f200 83aa 	bhi.w	8013be4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013490:	7cbb      	ldrb	r3, [r7, #18]
 8013492:	b29b      	uxth	r3, r3
 8013494:	3b14      	subs	r3, #20
 8013496:	b29a      	uxth	r2, r3
 8013498:	4b81      	ldr	r3, [pc, #516]	; (80136a0 <tcp_input+0x294>)
 801349a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801349c:	4b81      	ldr	r3, [pc, #516]	; (80136a4 <tcp_input+0x298>)
 801349e:	2200      	movs	r2, #0
 80134a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	895a      	ldrh	r2, [r3, #10]
 80134a6:	7cbb      	ldrb	r3, [r7, #18]
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d309      	bcc.n	80134c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80134ae:	4b7c      	ldr	r3, [pc, #496]	; (80136a0 <tcp_input+0x294>)
 80134b0:	881a      	ldrh	r2, [r3, #0]
 80134b2:	4b7d      	ldr	r3, [pc, #500]	; (80136a8 <tcp_input+0x29c>)
 80134b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80134b6:	7cbb      	ldrb	r3, [r7, #18]
 80134b8:	4619      	mov	r1, r3
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7fd fdd8 	bl	8011070 <pbuf_remove_header>
 80134c0:	e04e      	b.n	8013560 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d105      	bne.n	80134d6 <tcp_input+0xca>
 80134ca:	4b70      	ldr	r3, [pc, #448]	; (801368c <tcp_input+0x280>)
 80134cc:	22c2      	movs	r2, #194	; 0xc2
 80134ce:	4977      	ldr	r1, [pc, #476]	; (80136ac <tcp_input+0x2a0>)
 80134d0:	4870      	ldr	r0, [pc, #448]	; (8013694 <tcp_input+0x288>)
 80134d2:	f007 fe41 	bl	801b158 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80134d6:	2114      	movs	r1, #20
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f7fd fdc9 	bl	8011070 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	895a      	ldrh	r2, [r3, #10]
 80134e2:	4b71      	ldr	r3, [pc, #452]	; (80136a8 <tcp_input+0x29c>)
 80134e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80134e6:	4b6e      	ldr	r3, [pc, #440]	; (80136a0 <tcp_input+0x294>)
 80134e8:	881a      	ldrh	r2, [r3, #0]
 80134ea:	4b6f      	ldr	r3, [pc, #444]	; (80136a8 <tcp_input+0x29c>)
 80134ec:	881b      	ldrh	r3, [r3, #0]
 80134ee:	1ad3      	subs	r3, r2, r3
 80134f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80134f2:	4b6d      	ldr	r3, [pc, #436]	; (80136a8 <tcp_input+0x29c>)
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	4619      	mov	r1, r3
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7fd fdb9 	bl	8011070 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	895b      	ldrh	r3, [r3, #10]
 8013504:	8a3a      	ldrh	r2, [r7, #16]
 8013506:	429a      	cmp	r2, r3
 8013508:	f200 836e 	bhi.w	8013be8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	4a64      	ldr	r2, [pc, #400]	; (80136a4 <tcp_input+0x298>)
 8013514:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	8a3a      	ldrh	r2, [r7, #16]
 801351c:	4611      	mov	r1, r2
 801351e:	4618      	mov	r0, r3
 8013520:	f7fd fda6 	bl	8011070 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	891a      	ldrh	r2, [r3, #8]
 8013528:	8a3b      	ldrh	r3, [r7, #16]
 801352a:	1ad3      	subs	r3, r2, r3
 801352c:	b29a      	uxth	r2, r3
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	895b      	ldrh	r3, [r3, #10]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d005      	beq.n	8013546 <tcp_input+0x13a>
 801353a:	4b54      	ldr	r3, [pc, #336]	; (801368c <tcp_input+0x280>)
 801353c:	22df      	movs	r2, #223	; 0xdf
 801353e:	495c      	ldr	r1, [pc, #368]	; (80136b0 <tcp_input+0x2a4>)
 8013540:	4854      	ldr	r0, [pc, #336]	; (8013694 <tcp_input+0x288>)
 8013542:	f007 fe09 	bl	801b158 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	891a      	ldrh	r2, [r3, #8]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	891b      	ldrh	r3, [r3, #8]
 8013550:	429a      	cmp	r2, r3
 8013552:	d005      	beq.n	8013560 <tcp_input+0x154>
 8013554:	4b4d      	ldr	r3, [pc, #308]	; (801368c <tcp_input+0x280>)
 8013556:	22e0      	movs	r2, #224	; 0xe0
 8013558:	4956      	ldr	r1, [pc, #344]	; (80136b4 <tcp_input+0x2a8>)
 801355a:	484e      	ldr	r0, [pc, #312]	; (8013694 <tcp_input+0x288>)
 801355c:	f007 fdfc 	bl	801b158 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013560:	4b4d      	ldr	r3, [pc, #308]	; (8013698 <tcp_input+0x28c>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	b29b      	uxth	r3, r3
 8013568:	4a4b      	ldr	r2, [pc, #300]	; (8013698 <tcp_input+0x28c>)
 801356a:	6814      	ldr	r4, [r2, #0]
 801356c:	4618      	mov	r0, r3
 801356e:	f7fc fa13 	bl	800f998 <lwip_htons>
 8013572:	4603      	mov	r3, r0
 8013574:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013576:	4b48      	ldr	r3, [pc, #288]	; (8013698 <tcp_input+0x28c>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	885b      	ldrh	r3, [r3, #2]
 801357c:	b29b      	uxth	r3, r3
 801357e:	4a46      	ldr	r2, [pc, #280]	; (8013698 <tcp_input+0x28c>)
 8013580:	6814      	ldr	r4, [r2, #0]
 8013582:	4618      	mov	r0, r3
 8013584:	f7fc fa08 	bl	800f998 <lwip_htons>
 8013588:	4603      	mov	r3, r0
 801358a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801358c:	4b42      	ldr	r3, [pc, #264]	; (8013698 <tcp_input+0x28c>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	4a41      	ldr	r2, [pc, #260]	; (8013698 <tcp_input+0x28c>)
 8013594:	6814      	ldr	r4, [r2, #0]
 8013596:	4618      	mov	r0, r3
 8013598:	f7fc fa13 	bl	800f9c2 <lwip_htonl>
 801359c:	4603      	mov	r3, r0
 801359e:	6063      	str	r3, [r4, #4]
 80135a0:	6863      	ldr	r3, [r4, #4]
 80135a2:	4a45      	ldr	r2, [pc, #276]	; (80136b8 <tcp_input+0x2ac>)
 80135a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80135a6:	4b3c      	ldr	r3, [pc, #240]	; (8013698 <tcp_input+0x28c>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	689b      	ldr	r3, [r3, #8]
 80135ac:	4a3a      	ldr	r2, [pc, #232]	; (8013698 <tcp_input+0x28c>)
 80135ae:	6814      	ldr	r4, [r2, #0]
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fc fa06 	bl	800f9c2 <lwip_htonl>
 80135b6:	4603      	mov	r3, r0
 80135b8:	60a3      	str	r3, [r4, #8]
 80135ba:	68a3      	ldr	r3, [r4, #8]
 80135bc:	4a3f      	ldr	r2, [pc, #252]	; (80136bc <tcp_input+0x2b0>)
 80135be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80135c0:	4b35      	ldr	r3, [pc, #212]	; (8013698 <tcp_input+0x28c>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	89db      	ldrh	r3, [r3, #14]
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	4a33      	ldr	r2, [pc, #204]	; (8013698 <tcp_input+0x28c>)
 80135ca:	6814      	ldr	r4, [r2, #0]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fc f9e3 	bl	800f998 <lwip_htons>
 80135d2:	4603      	mov	r3, r0
 80135d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80135d6:	4b30      	ldr	r3, [pc, #192]	; (8013698 <tcp_input+0x28c>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	899b      	ldrh	r3, [r3, #12]
 80135dc:	b29b      	uxth	r3, r3
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fc f9da 	bl	800f998 <lwip_htons>
 80135e4:	4603      	mov	r3, r0
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135ec:	b2da      	uxtb	r2, r3
 80135ee:	4b34      	ldr	r3, [pc, #208]	; (80136c0 <tcp_input+0x2b4>)
 80135f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	891a      	ldrh	r2, [r3, #8]
 80135f6:	4b33      	ldr	r3, [pc, #204]	; (80136c4 <tcp_input+0x2b8>)
 80135f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80135fa:	4b31      	ldr	r3, [pc, #196]	; (80136c0 <tcp_input+0x2b4>)
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	f003 0303 	and.w	r3, r3, #3
 8013602:	2b00      	cmp	r3, #0
 8013604:	d00c      	beq.n	8013620 <tcp_input+0x214>
    tcplen++;
 8013606:	4b2f      	ldr	r3, [pc, #188]	; (80136c4 <tcp_input+0x2b8>)
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	3301      	adds	r3, #1
 801360c:	b29a      	uxth	r2, r3
 801360e:	4b2d      	ldr	r3, [pc, #180]	; (80136c4 <tcp_input+0x2b8>)
 8013610:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	891a      	ldrh	r2, [r3, #8]
 8013616:	4b2b      	ldr	r3, [pc, #172]	; (80136c4 <tcp_input+0x2b8>)
 8013618:	881b      	ldrh	r3, [r3, #0]
 801361a:	429a      	cmp	r2, r3
 801361c:	f200 82e6 	bhi.w	8013bec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013620:	2300      	movs	r3, #0
 8013622:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013624:	4b28      	ldr	r3, [pc, #160]	; (80136c8 <tcp_input+0x2bc>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	61fb      	str	r3, [r7, #28]
 801362a:	e09d      	b.n	8013768 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	7d1b      	ldrb	r3, [r3, #20]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d105      	bne.n	8013640 <tcp_input+0x234>
 8013634:	4b15      	ldr	r3, [pc, #84]	; (801368c <tcp_input+0x280>)
 8013636:	22fb      	movs	r2, #251	; 0xfb
 8013638:	4924      	ldr	r1, [pc, #144]	; (80136cc <tcp_input+0x2c0>)
 801363a:	4816      	ldr	r0, [pc, #88]	; (8013694 <tcp_input+0x288>)
 801363c:	f007 fd8c 	bl	801b158 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013640:	69fb      	ldr	r3, [r7, #28]
 8013642:	7d1b      	ldrb	r3, [r3, #20]
 8013644:	2b0a      	cmp	r3, #10
 8013646:	d105      	bne.n	8013654 <tcp_input+0x248>
 8013648:	4b10      	ldr	r3, [pc, #64]	; (801368c <tcp_input+0x280>)
 801364a:	22fc      	movs	r2, #252	; 0xfc
 801364c:	4920      	ldr	r1, [pc, #128]	; (80136d0 <tcp_input+0x2c4>)
 801364e:	4811      	ldr	r0, [pc, #68]	; (8013694 <tcp_input+0x288>)
 8013650:	f007 fd82 	bl	801b158 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	7d1b      	ldrb	r3, [r3, #20]
 8013658:	2b01      	cmp	r3, #1
 801365a:	d105      	bne.n	8013668 <tcp_input+0x25c>
 801365c:	4b0b      	ldr	r3, [pc, #44]	; (801368c <tcp_input+0x280>)
 801365e:	22fd      	movs	r2, #253	; 0xfd
 8013660:	491c      	ldr	r1, [pc, #112]	; (80136d4 <tcp_input+0x2c8>)
 8013662:	480c      	ldr	r0, [pc, #48]	; (8013694 <tcp_input+0x288>)
 8013664:	f007 fd78 	bl	801b158 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	7a1b      	ldrb	r3, [r3, #8]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d033      	beq.n	80136d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	7a1a      	ldrb	r2, [r3, #8]
 8013674:	4b09      	ldr	r3, [pc, #36]	; (801369c <tcp_input+0x290>)
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801367c:	3301      	adds	r3, #1
 801367e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013680:	429a      	cmp	r2, r3
 8013682:	d029      	beq.n	80136d8 <tcp_input+0x2cc>
      prev = pcb;
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	61bb      	str	r3, [r7, #24]
      continue;
 8013688:	e06b      	b.n	8013762 <tcp_input+0x356>
 801368a:	bf00      	nop
 801368c:	0801e594 	.word	0x0801e594
 8013690:	0801e5c8 	.word	0x0801e5c8
 8013694:	0801e5e0 	.word	0x0801e5e0
 8013698:	2003d104 	.word	0x2003d104
 801369c:	20039988 	.word	0x20039988
 80136a0:	2003d108 	.word	0x2003d108
 80136a4:	2003d10c 	.word	0x2003d10c
 80136a8:	2003d10a 	.word	0x2003d10a
 80136ac:	0801e608 	.word	0x0801e608
 80136b0:	0801e618 	.word	0x0801e618
 80136b4:	0801e624 	.word	0x0801e624
 80136b8:	2003d114 	.word	0x2003d114
 80136bc:	2003d118 	.word	0x2003d118
 80136c0:	2003d120 	.word	0x2003d120
 80136c4:	2003d11e 	.word	0x2003d11e
 80136c8:	2003d0e8 	.word	0x2003d0e8
 80136cc:	0801e644 	.word	0x0801e644
 80136d0:	0801e66c 	.word	0x0801e66c
 80136d4:	0801e698 	.word	0x0801e698
    }

    if (pcb->remote_port == tcphdr->src &&
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	8b1a      	ldrh	r2, [r3, #24]
 80136dc:	4b72      	ldr	r3, [pc, #456]	; (80138a8 <tcp_input+0x49c>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	881b      	ldrh	r3, [r3, #0]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d13a      	bne.n	801375e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	8ada      	ldrh	r2, [r3, #22]
 80136ec:	4b6e      	ldr	r3, [pc, #440]	; (80138a8 <tcp_input+0x49c>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	885b      	ldrh	r3, [r3, #2]
 80136f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d132      	bne.n	801375e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80136f8:	69fb      	ldr	r3, [r7, #28]
 80136fa:	685a      	ldr	r2, [r3, #4]
 80136fc:	4b6b      	ldr	r3, [pc, #428]	; (80138ac <tcp_input+0x4a0>)
 80136fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013700:	429a      	cmp	r2, r3
 8013702:	d12c      	bne.n	801375e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	4b68      	ldr	r3, [pc, #416]	; (80138ac <tcp_input+0x4a0>)
 801370a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801370c:	429a      	cmp	r2, r3
 801370e:	d126      	bne.n	801375e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	68db      	ldr	r3, [r3, #12]
 8013714:	69fa      	ldr	r2, [r7, #28]
 8013716:	429a      	cmp	r2, r3
 8013718:	d106      	bne.n	8013728 <tcp_input+0x31c>
 801371a:	4b65      	ldr	r3, [pc, #404]	; (80138b0 <tcp_input+0x4a4>)
 801371c:	f240 120d 	movw	r2, #269	; 0x10d
 8013720:	4964      	ldr	r1, [pc, #400]	; (80138b4 <tcp_input+0x4a8>)
 8013722:	4865      	ldr	r0, [pc, #404]	; (80138b8 <tcp_input+0x4ac>)
 8013724:	f007 fd18 	bl	801b158 <iprintf>
      if (prev != NULL) {
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00a      	beq.n	8013744 <tcp_input+0x338>
        prev->next = pcb->next;
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	68da      	ldr	r2, [r3, #12]
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013736:	4b61      	ldr	r3, [pc, #388]	; (80138bc <tcp_input+0x4b0>)
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801373e:	4a5f      	ldr	r2, [pc, #380]	; (80138bc <tcp_input+0x4b0>)
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	69fa      	ldr	r2, [r7, #28]
 801374a:	429a      	cmp	r2, r3
 801374c:	d111      	bne.n	8013772 <tcp_input+0x366>
 801374e:	4b58      	ldr	r3, [pc, #352]	; (80138b0 <tcp_input+0x4a4>)
 8013750:	f240 1215 	movw	r2, #277	; 0x115
 8013754:	495a      	ldr	r1, [pc, #360]	; (80138c0 <tcp_input+0x4b4>)
 8013756:	4858      	ldr	r0, [pc, #352]	; (80138b8 <tcp_input+0x4ac>)
 8013758:	f007 fcfe 	bl	801b158 <iprintf>
      break;
 801375c:	e009      	b.n	8013772 <tcp_input+0x366>
    }
    prev = pcb;
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	68db      	ldr	r3, [r3, #12]
 8013766:	61fb      	str	r3, [r7, #28]
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	2b00      	cmp	r3, #0
 801376c:	f47f af5e 	bne.w	801362c <tcp_input+0x220>
 8013770:	e000      	b.n	8013774 <tcp_input+0x368>
      break;
 8013772:	bf00      	nop
  }

  if (pcb == NULL) {
 8013774:	69fb      	ldr	r3, [r7, #28]
 8013776:	2b00      	cmp	r3, #0
 8013778:	f040 80aa 	bne.w	80138d0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801377c:	4b51      	ldr	r3, [pc, #324]	; (80138c4 <tcp_input+0x4b8>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	61fb      	str	r3, [r7, #28]
 8013782:	e03f      	b.n	8013804 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	7d1b      	ldrb	r3, [r3, #20]
 8013788:	2b0a      	cmp	r3, #10
 801378a:	d006      	beq.n	801379a <tcp_input+0x38e>
 801378c:	4b48      	ldr	r3, [pc, #288]	; (80138b0 <tcp_input+0x4a4>)
 801378e:	f240 121f 	movw	r2, #287	; 0x11f
 8013792:	494d      	ldr	r1, [pc, #308]	; (80138c8 <tcp_input+0x4bc>)
 8013794:	4848      	ldr	r0, [pc, #288]	; (80138b8 <tcp_input+0x4ac>)
 8013796:	f007 fcdf 	bl	801b158 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	7a1b      	ldrb	r3, [r3, #8]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d009      	beq.n	80137b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80137a2:	69fb      	ldr	r3, [r7, #28]
 80137a4:	7a1a      	ldrb	r2, [r3, #8]
 80137a6:	4b41      	ldr	r3, [pc, #260]	; (80138ac <tcp_input+0x4a0>)
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80137ae:	3301      	adds	r3, #1
 80137b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d122      	bne.n	80137fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	8b1a      	ldrh	r2, [r3, #24]
 80137ba:	4b3b      	ldr	r3, [pc, #236]	; (80138a8 <tcp_input+0x49c>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	881b      	ldrh	r3, [r3, #0]
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d11b      	bne.n	80137fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	8ada      	ldrh	r2, [r3, #22]
 80137ca:	4b37      	ldr	r3, [pc, #220]	; (80138a8 <tcp_input+0x49c>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	885b      	ldrh	r3, [r3, #2]
 80137d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d113      	bne.n	80137fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	685a      	ldr	r2, [r3, #4]
 80137da:	4b34      	ldr	r3, [pc, #208]	; (80138ac <tcp_input+0x4a0>)
 80137dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80137de:	429a      	cmp	r2, r3
 80137e0:	d10d      	bne.n	80137fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	4b31      	ldr	r3, [pc, #196]	; (80138ac <tcp_input+0x4a0>)
 80137e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d107      	bne.n	80137fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80137ee:	69f8      	ldr	r0, [r7, #28]
 80137f0:	f000 fb56 	bl	8013ea0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f7fd fcf3 	bl	80111e0 <pbuf_free>
        return;
 80137fa:	e1fd      	b.n	8013bf8 <tcp_input+0x7ec>
        continue;
 80137fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	61fb      	str	r3, [r7, #28]
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1bc      	bne.n	8013784 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801380a:	2300      	movs	r3, #0
 801380c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801380e:	4b2f      	ldr	r3, [pc, #188]	; (80138cc <tcp_input+0x4c0>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	617b      	str	r3, [r7, #20]
 8013814:	e02a      	b.n	801386c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	7a1b      	ldrb	r3, [r3, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d00c      	beq.n	8013838 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	7a1a      	ldrb	r2, [r3, #8]
 8013822:	4b22      	ldr	r3, [pc, #136]	; (80138ac <tcp_input+0x4a0>)
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801382a:	3301      	adds	r3, #1
 801382c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801382e:	429a      	cmp	r2, r3
 8013830:	d002      	beq.n	8013838 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	61bb      	str	r3, [r7, #24]
        continue;
 8013836:	e016      	b.n	8013866 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	8ada      	ldrh	r2, [r3, #22]
 801383c:	4b1a      	ldr	r3, [pc, #104]	; (80138a8 <tcp_input+0x49c>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	885b      	ldrh	r3, [r3, #2]
 8013842:	b29b      	uxth	r3, r3
 8013844:	429a      	cmp	r2, r3
 8013846:	d10c      	bne.n	8013862 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	4b17      	ldr	r3, [pc, #92]	; (80138ac <tcp_input+0x4a0>)
 801384e:	695b      	ldr	r3, [r3, #20]
 8013850:	429a      	cmp	r2, r3
 8013852:	d00f      	beq.n	8013874 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d00d      	beq.n	8013876 <tcp_input+0x46a>
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d009      	beq.n	8013876 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	617b      	str	r3, [r7, #20]
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d1d1      	bne.n	8013816 <tcp_input+0x40a>
 8013872:	e000      	b.n	8013876 <tcp_input+0x46a>
            break;
 8013874:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d029      	beq.n	80138d0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00a      	beq.n	8013898 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	68da      	ldr	r2, [r3, #12]
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801388a:	4b10      	ldr	r3, [pc, #64]	; (80138cc <tcp_input+0x4c0>)
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013892:	4a0e      	ldr	r2, [pc, #56]	; (80138cc <tcp_input+0x4c0>)
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013898:	6978      	ldr	r0, [r7, #20]
 801389a:	f000 fa03 	bl	8013ca4 <tcp_listen_input>
      }
      pbuf_free(p);
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f7fd fc9e 	bl	80111e0 <pbuf_free>
      return;
 80138a4:	e1a8      	b.n	8013bf8 <tcp_input+0x7ec>
 80138a6:	bf00      	nop
 80138a8:	2003d104 	.word	0x2003d104
 80138ac:	20039988 	.word	0x20039988
 80138b0:	0801e594 	.word	0x0801e594
 80138b4:	0801e6c0 	.word	0x0801e6c0
 80138b8:	0801e5e0 	.word	0x0801e5e0
 80138bc:	2003d0e8 	.word	0x2003d0e8
 80138c0:	0801e6ec 	.word	0x0801e6ec
 80138c4:	2003d0ec 	.word	0x2003d0ec
 80138c8:	0801e718 	.word	0x0801e718
 80138cc:	2003d0e4 	.word	0x2003d0e4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80138d0:	69fb      	ldr	r3, [r7, #28]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f000 8158 	beq.w	8013b88 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80138d8:	4b95      	ldr	r3, [pc, #596]	; (8013b30 <tcp_input+0x724>)
 80138da:	2200      	movs	r2, #0
 80138dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	891a      	ldrh	r2, [r3, #8]
 80138e2:	4b93      	ldr	r3, [pc, #588]	; (8013b30 <tcp_input+0x724>)
 80138e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80138e6:	4a92      	ldr	r2, [pc, #584]	; (8013b30 <tcp_input+0x724>)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80138ec:	4b91      	ldr	r3, [pc, #580]	; (8013b34 <tcp_input+0x728>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	4a8f      	ldr	r2, [pc, #572]	; (8013b30 <tcp_input+0x724>)
 80138f2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80138f4:	4b90      	ldr	r3, [pc, #576]	; (8013b38 <tcp_input+0x72c>)
 80138f6:	2200      	movs	r2, #0
 80138f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80138fa:	4b90      	ldr	r3, [pc, #576]	; (8013b3c <tcp_input+0x730>)
 80138fc:	2200      	movs	r2, #0
 80138fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013900:	4b8f      	ldr	r3, [pc, #572]	; (8013b40 <tcp_input+0x734>)
 8013902:	2200      	movs	r2, #0
 8013904:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013906:	4b8f      	ldr	r3, [pc, #572]	; (8013b44 <tcp_input+0x738>)
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	f003 0308 	and.w	r3, r3, #8
 801390e:	2b00      	cmp	r3, #0
 8013910:	d006      	beq.n	8013920 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	7b5b      	ldrb	r3, [r3, #13]
 8013916:	f043 0301 	orr.w	r3, r3, #1
 801391a:	b2da      	uxtb	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013924:	2b00      	cmp	r3, #0
 8013926:	d017      	beq.n	8013958 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013928:	69f8      	ldr	r0, [r7, #28]
 801392a:	f7ff f85b 	bl	80129e4 <tcp_process_refused_data>
 801392e:	4603      	mov	r3, r0
 8013930:	f113 0f0d 	cmn.w	r3, #13
 8013934:	d007      	beq.n	8013946 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00c      	beq.n	8013958 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801393e:	4b82      	ldr	r3, [pc, #520]	; (8013b48 <tcp_input+0x73c>)
 8013940:	881b      	ldrh	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d008      	beq.n	8013958 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801394a:	2b00      	cmp	r3, #0
 801394c:	f040 80e3 	bne.w	8013b16 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013950:	69f8      	ldr	r0, [r7, #28]
 8013952:	f003 fe05 	bl	8017560 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013956:	e0de      	b.n	8013b16 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013958:	4a7c      	ldr	r2, [pc, #496]	; (8013b4c <tcp_input+0x740>)
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801395e:	69f8      	ldr	r0, [r7, #28]
 8013960:	f000 fb18 	bl	8013f94 <tcp_process>
 8013964:	4603      	mov	r3, r0
 8013966:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013968:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801396c:	f113 0f0d 	cmn.w	r3, #13
 8013970:	f000 80d3 	beq.w	8013b1a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013974:	4b71      	ldr	r3, [pc, #452]	; (8013b3c <tcp_input+0x730>)
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	f003 0308 	and.w	r3, r3, #8
 801397c:	2b00      	cmp	r3, #0
 801397e:	d015      	beq.n	80139ac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013986:	2b00      	cmp	r3, #0
 8013988:	d008      	beq.n	801399c <tcp_input+0x590>
 801398a:	69fb      	ldr	r3, [r7, #28]
 801398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013990:	69fa      	ldr	r2, [r7, #28]
 8013992:	6912      	ldr	r2, [r2, #16]
 8013994:	f06f 010d 	mvn.w	r1, #13
 8013998:	4610      	mov	r0, r2
 801399a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801399c:	69f9      	ldr	r1, [r7, #28]
 801399e:	486c      	ldr	r0, [pc, #432]	; (8013b50 <tcp_input+0x744>)
 80139a0:	f7ff fbbc 	bl	801311c <tcp_pcb_remove>
        tcp_free(pcb);
 80139a4:	69f8      	ldr	r0, [r7, #28]
 80139a6:	f7fd fed7 	bl	8011758 <tcp_free>
 80139aa:	e0da      	b.n	8013b62 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80139ac:	2300      	movs	r3, #0
 80139ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80139b0:	4b63      	ldr	r3, [pc, #396]	; (8013b40 <tcp_input+0x734>)
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d01d      	beq.n	80139f4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80139b8:	4b61      	ldr	r3, [pc, #388]	; (8013b40 <tcp_input+0x734>)
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00a      	beq.n	80139de <tcp_input+0x5d2>
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139ce:	69fa      	ldr	r2, [r7, #28]
 80139d0:	6910      	ldr	r0, [r2, #16]
 80139d2:	89fa      	ldrh	r2, [r7, #14]
 80139d4:	69f9      	ldr	r1, [r7, #28]
 80139d6:	4798      	blx	r3
 80139d8:	4603      	mov	r3, r0
 80139da:	74fb      	strb	r3, [r7, #19]
 80139dc:	e001      	b.n	80139e2 <tcp_input+0x5d6>
 80139de:	2300      	movs	r3, #0
 80139e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80139e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80139e6:	f113 0f0d 	cmn.w	r3, #13
 80139ea:	f000 8098 	beq.w	8013b1e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80139ee:	4b54      	ldr	r3, [pc, #336]	; (8013b40 <tcp_input+0x734>)
 80139f0:	2200      	movs	r2, #0
 80139f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80139f4:	69f8      	ldr	r0, [r7, #28]
 80139f6:	f000 f915 	bl	8013c24 <tcp_input_delayed_close>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	f040 8090 	bne.w	8013b22 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013a02:	4b4d      	ldr	r3, [pc, #308]	; (8013b38 <tcp_input+0x72c>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d041      	beq.n	8013a8e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d006      	beq.n	8013a20 <tcp_input+0x614>
 8013a12:	4b50      	ldr	r3, [pc, #320]	; (8013b54 <tcp_input+0x748>)
 8013a14:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013a18:	494f      	ldr	r1, [pc, #316]	; (8013b58 <tcp_input+0x74c>)
 8013a1a:	4850      	ldr	r0, [pc, #320]	; (8013b5c <tcp_input+0x750>)
 8013a1c:	f007 fb9c 	bl	801b158 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	8b5b      	ldrh	r3, [r3, #26]
 8013a24:	f003 0310 	and.w	r3, r3, #16
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d008      	beq.n	8013a3e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013a2c:	4b42      	ldr	r3, [pc, #264]	; (8013b38 <tcp_input+0x72c>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fd fbd5 	bl	80111e0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013a36:	69f8      	ldr	r0, [r7, #28]
 8013a38:	f7fe f9d2 	bl	8011de0 <tcp_abort>
            goto aborted;
 8013a3c:	e091      	b.n	8013b62 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d00c      	beq.n	8013a62 <tcp_input+0x656>
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	6918      	ldr	r0, [r3, #16]
 8013a52:	4b39      	ldr	r3, [pc, #228]	; (8013b38 <tcp_input+0x72c>)
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	2300      	movs	r3, #0
 8013a58:	69f9      	ldr	r1, [r7, #28]
 8013a5a:	47a0      	blx	r4
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	74fb      	strb	r3, [r7, #19]
 8013a60:	e008      	b.n	8013a74 <tcp_input+0x668>
 8013a62:	4b35      	ldr	r3, [pc, #212]	; (8013b38 <tcp_input+0x72c>)
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	2300      	movs	r3, #0
 8013a68:	69f9      	ldr	r1, [r7, #28]
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	f7ff f890 	bl	8012b90 <tcp_recv_null>
 8013a70:	4603      	mov	r3, r0
 8013a72:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013a74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a78:	f113 0f0d 	cmn.w	r3, #13
 8013a7c:	d053      	beq.n	8013b26 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013a7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d003      	beq.n	8013a8e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013a86:	4b2c      	ldr	r3, [pc, #176]	; (8013b38 <tcp_input+0x72c>)
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013a8e:	4b2b      	ldr	r3, [pc, #172]	; (8013b3c <tcp_input+0x730>)
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	f003 0320 	and.w	r3, r3, #32
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d030      	beq.n	8013afc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d009      	beq.n	8013ab6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013aa6:	7b5a      	ldrb	r2, [r3, #13]
 8013aa8:	69fb      	ldr	r3, [r7, #28]
 8013aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013aac:	f042 0220 	orr.w	r2, r2, #32
 8013ab0:	b2d2      	uxtb	r2, r2
 8013ab2:	735a      	strb	r2, [r3, #13]
 8013ab4:	e022      	b.n	8013afc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013aba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013abe:	d005      	beq.n	8013acc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013acc:	69fb      	ldr	r3, [r7, #28]
 8013ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00b      	beq.n	8013aee <tcp_input+0x6e2>
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013adc:	69fb      	ldr	r3, [r7, #28]
 8013ade:	6918      	ldr	r0, [r3, #16]
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	69f9      	ldr	r1, [r7, #28]
 8013ae6:	47a0      	blx	r4
 8013ae8:	4603      	mov	r3, r0
 8013aea:	74fb      	strb	r3, [r7, #19]
 8013aec:	e001      	b.n	8013af2 <tcp_input+0x6e6>
 8013aee:	2300      	movs	r3, #0
 8013af0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013af2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013af6:	f113 0f0d 	cmn.w	r3, #13
 8013afa:	d016      	beq.n	8013b2a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013afc:	4b13      	ldr	r3, [pc, #76]	; (8013b4c <tcp_input+0x740>)
 8013afe:	2200      	movs	r2, #0
 8013b00:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013b02:	69f8      	ldr	r0, [r7, #28]
 8013b04:	f000 f88e 	bl	8013c24 <tcp_input_delayed_close>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d128      	bne.n	8013b60 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013b0e:	69f8      	ldr	r0, [r7, #28]
 8013b10:	f002 ff20 	bl	8016954 <tcp_output>
 8013b14:	e025      	b.n	8013b62 <tcp_input+0x756>
        goto aborted;
 8013b16:	bf00      	nop
 8013b18:	e023      	b.n	8013b62 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013b1a:	bf00      	nop
 8013b1c:	e021      	b.n	8013b62 <tcp_input+0x756>
              goto aborted;
 8013b1e:	bf00      	nop
 8013b20:	e01f      	b.n	8013b62 <tcp_input+0x756>
          goto aborted;
 8013b22:	bf00      	nop
 8013b24:	e01d      	b.n	8013b62 <tcp_input+0x756>
            goto aborted;
 8013b26:	bf00      	nop
 8013b28:	e01b      	b.n	8013b62 <tcp_input+0x756>
              goto aborted;
 8013b2a:	bf00      	nop
 8013b2c:	e019      	b.n	8013b62 <tcp_input+0x756>
 8013b2e:	bf00      	nop
 8013b30:	2003d0f4 	.word	0x2003d0f4
 8013b34:	2003d104 	.word	0x2003d104
 8013b38:	2003d124 	.word	0x2003d124
 8013b3c:	2003d121 	.word	0x2003d121
 8013b40:	2003d11c 	.word	0x2003d11c
 8013b44:	2003d120 	.word	0x2003d120
 8013b48:	2003d11e 	.word	0x2003d11e
 8013b4c:	2003d128 	.word	0x2003d128
 8013b50:	2003d0e8 	.word	0x2003d0e8
 8013b54:	0801e594 	.word	0x0801e594
 8013b58:	0801e748 	.word	0x0801e748
 8013b5c:	0801e5e0 	.word	0x0801e5e0
          goto aborted;
 8013b60:	bf00      	nop
    tcp_input_pcb = NULL;
 8013b62:	4b27      	ldr	r3, [pc, #156]	; (8013c00 <tcp_input+0x7f4>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013b68:	4b26      	ldr	r3, [pc, #152]	; (8013c04 <tcp_input+0x7f8>)
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013b6e:	4b26      	ldr	r3, [pc, #152]	; (8013c08 <tcp_input+0x7fc>)
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d03f      	beq.n	8013bf6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013b76:	4b24      	ldr	r3, [pc, #144]	; (8013c08 <tcp_input+0x7fc>)
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7fd fb30 	bl	80111e0 <pbuf_free>
      inseg.p = NULL;
 8013b80:	4b21      	ldr	r3, [pc, #132]	; (8013c08 <tcp_input+0x7fc>)
 8013b82:	2200      	movs	r2, #0
 8013b84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013b86:	e036      	b.n	8013bf6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013b88:	4b20      	ldr	r3, [pc, #128]	; (8013c0c <tcp_input+0x800>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	899b      	ldrh	r3, [r3, #12]
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7fb ff01 	bl	800f998 <lwip_htons>
 8013b96:	4603      	mov	r3, r0
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	f003 0304 	and.w	r3, r3, #4
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d118      	bne.n	8013bd4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ba2:	4b1b      	ldr	r3, [pc, #108]	; (8013c10 <tcp_input+0x804>)
 8013ba4:	6819      	ldr	r1, [r3, #0]
 8013ba6:	4b1b      	ldr	r3, [pc, #108]	; (8013c14 <tcp_input+0x808>)
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	461a      	mov	r2, r3
 8013bac:	4b1a      	ldr	r3, [pc, #104]	; (8013c18 <tcp_input+0x80c>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bb2:	4b16      	ldr	r3, [pc, #88]	; (8013c0c <tcp_input+0x800>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bb6:	885b      	ldrh	r3, [r3, #2]
 8013bb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013bba:	4a14      	ldr	r2, [pc, #80]	; (8013c0c <tcp_input+0x800>)
 8013bbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013bbe:	8812      	ldrh	r2, [r2, #0]
 8013bc0:	b292      	uxth	r2, r2
 8013bc2:	9202      	str	r2, [sp, #8]
 8013bc4:	9301      	str	r3, [sp, #4]
 8013bc6:	4b15      	ldr	r3, [pc, #84]	; (8013c1c <tcp_input+0x810>)
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	4b15      	ldr	r3, [pc, #84]	; (8013c20 <tcp_input+0x814>)
 8013bcc:	4602      	mov	r2, r0
 8013bce:	2000      	movs	r0, #0
 8013bd0:	f003 fc74 	bl	80174bc <tcp_rst>
    pbuf_free(p);
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7fd fb03 	bl	80111e0 <pbuf_free>
  return;
 8013bda:	e00c      	b.n	8013bf6 <tcp_input+0x7ea>
    goto dropped;
 8013bdc:	bf00      	nop
 8013bde:	e006      	b.n	8013bee <tcp_input+0x7e2>
    goto dropped;
 8013be0:	bf00      	nop
 8013be2:	e004      	b.n	8013bee <tcp_input+0x7e2>
    goto dropped;
 8013be4:	bf00      	nop
 8013be6:	e002      	b.n	8013bee <tcp_input+0x7e2>
      goto dropped;
 8013be8:	bf00      	nop
 8013bea:	e000      	b.n	8013bee <tcp_input+0x7e2>
      goto dropped;
 8013bec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7fd faf6 	bl	80111e0 <pbuf_free>
 8013bf4:	e000      	b.n	8013bf8 <tcp_input+0x7ec>
  return;
 8013bf6:	bf00      	nop
}
 8013bf8:	3724      	adds	r7, #36	; 0x24
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd90      	pop	{r4, r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	2003d128 	.word	0x2003d128
 8013c04:	2003d124 	.word	0x2003d124
 8013c08:	2003d0f4 	.word	0x2003d0f4
 8013c0c:	2003d104 	.word	0x2003d104
 8013c10:	2003d118 	.word	0x2003d118
 8013c14:	2003d11e 	.word	0x2003d11e
 8013c18:	2003d114 	.word	0x2003d114
 8013c1c:	20039998 	.word	0x20039998
 8013c20:	2003999c 	.word	0x2003999c

08013c24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d106      	bne.n	8013c40 <tcp_input_delayed_close+0x1c>
 8013c32:	4b17      	ldr	r3, [pc, #92]	; (8013c90 <tcp_input_delayed_close+0x6c>)
 8013c34:	f240 225a 	movw	r2, #602	; 0x25a
 8013c38:	4916      	ldr	r1, [pc, #88]	; (8013c94 <tcp_input_delayed_close+0x70>)
 8013c3a:	4817      	ldr	r0, [pc, #92]	; (8013c98 <tcp_input_delayed_close+0x74>)
 8013c3c:	f007 fa8c 	bl	801b158 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013c40:	4b16      	ldr	r3, [pc, #88]	; (8013c9c <tcp_input_delayed_close+0x78>)
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	f003 0310 	and.w	r3, r3, #16
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d01c      	beq.n	8013c86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	8b5b      	ldrh	r3, [r3, #26]
 8013c50:	f003 0310 	and.w	r3, r3, #16
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d10d      	bne.n	8013c74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d008      	beq.n	8013c74 <tcp_input_delayed_close+0x50>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c68:	687a      	ldr	r2, [r7, #4]
 8013c6a:	6912      	ldr	r2, [r2, #16]
 8013c6c:	f06f 010e 	mvn.w	r1, #14
 8013c70:	4610      	mov	r0, r2
 8013c72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c74:	6879      	ldr	r1, [r7, #4]
 8013c76:	480a      	ldr	r0, [pc, #40]	; (8013ca0 <tcp_input_delayed_close+0x7c>)
 8013c78:	f7ff fa50 	bl	801311c <tcp_pcb_remove>
    tcp_free(pcb);
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7fd fd6b 	bl	8011758 <tcp_free>
    return 1;
 8013c82:	2301      	movs	r3, #1
 8013c84:	e000      	b.n	8013c88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	0801e594 	.word	0x0801e594
 8013c94:	0801e764 	.word	0x0801e764
 8013c98:	0801e5e0 	.word	0x0801e5e0
 8013c9c:	2003d121 	.word	0x2003d121
 8013ca0:	2003d0e8 	.word	0x2003d0e8

08013ca4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013ca4:	b590      	push	{r4, r7, lr}
 8013ca6:	b08b      	sub	sp, #44	; 0x2c
 8013ca8:	af04      	add	r7, sp, #16
 8013caa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013cac:	4b6f      	ldr	r3, [pc, #444]	; (8013e6c <tcp_listen_input+0x1c8>)
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	f003 0304 	and.w	r3, r3, #4
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f040 80d2 	bne.w	8013e5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d106      	bne.n	8013cce <tcp_listen_input+0x2a>
 8013cc0:	4b6b      	ldr	r3, [pc, #428]	; (8013e70 <tcp_listen_input+0x1cc>)
 8013cc2:	f240 2281 	movw	r2, #641	; 0x281
 8013cc6:	496b      	ldr	r1, [pc, #428]	; (8013e74 <tcp_listen_input+0x1d0>)
 8013cc8:	486b      	ldr	r0, [pc, #428]	; (8013e78 <tcp_listen_input+0x1d4>)
 8013cca:	f007 fa45 	bl	801b158 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013cce:	4b67      	ldr	r3, [pc, #412]	; (8013e6c <tcp_listen_input+0x1c8>)
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	f003 0310 	and.w	r3, r3, #16
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d019      	beq.n	8013d0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cda:	4b68      	ldr	r3, [pc, #416]	; (8013e7c <tcp_listen_input+0x1d8>)
 8013cdc:	6819      	ldr	r1, [r3, #0]
 8013cde:	4b68      	ldr	r3, [pc, #416]	; (8013e80 <tcp_listen_input+0x1dc>)
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	4b67      	ldr	r3, [pc, #412]	; (8013e84 <tcp_listen_input+0x1e0>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013cea:	4b67      	ldr	r3, [pc, #412]	; (8013e88 <tcp_listen_input+0x1e4>)
 8013cec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cee:	885b      	ldrh	r3, [r3, #2]
 8013cf0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013cf2:	4a65      	ldr	r2, [pc, #404]	; (8013e88 <tcp_listen_input+0x1e4>)
 8013cf4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013cf6:	8812      	ldrh	r2, [r2, #0]
 8013cf8:	b292      	uxth	r2, r2
 8013cfa:	9202      	str	r2, [sp, #8]
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	4b63      	ldr	r3, [pc, #396]	; (8013e8c <tcp_listen_input+0x1e8>)
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	4b63      	ldr	r3, [pc, #396]	; (8013e90 <tcp_listen_input+0x1ec>)
 8013d04:	4602      	mov	r2, r0
 8013d06:	6878      	ldr	r0, [r7, #4]
 8013d08:	f003 fbd8 	bl	80174bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013d0c:	e0a9      	b.n	8013e62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013d0e:	4b57      	ldr	r3, [pc, #348]	; (8013e6c <tcp_listen_input+0x1c8>)
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	f003 0302 	and.w	r3, r3, #2
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f000 80a3 	beq.w	8013e62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	7d5b      	ldrb	r3, [r3, #21]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ff f859 	bl	8012dd8 <tcp_alloc>
 8013d26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d111      	bne.n	8013d52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	699b      	ldr	r3, [r3, #24]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00a      	beq.n	8013d4c <tcp_listen_input+0xa8>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	699b      	ldr	r3, [r3, #24]
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	6910      	ldr	r0, [r2, #16]
 8013d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d42:	2100      	movs	r1, #0
 8013d44:	4798      	blx	r3
 8013d46:	4603      	mov	r3, r0
 8013d48:	73bb      	strb	r3, [r7, #14]
      return;
 8013d4a:	e08b      	b.n	8013e64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013d4c:	23f0      	movs	r3, #240	; 0xf0
 8013d4e:	73bb      	strb	r3, [r7, #14]
      return;
 8013d50:	e088      	b.n	8013e64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013d52:	4b50      	ldr	r3, [pc, #320]	; (8013e94 <tcp_listen_input+0x1f0>)
 8013d54:	695a      	ldr	r2, [r3, #20]
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013d5a:	4b4e      	ldr	r3, [pc, #312]	; (8013e94 <tcp_listen_input+0x1f0>)
 8013d5c:	691a      	ldr	r2, [r3, #16]
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	8ada      	ldrh	r2, [r3, #22]
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013d6a:	4b47      	ldr	r3, [pc, #284]	; (8013e88 <tcp_listen_input+0x1e4>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	881b      	ldrh	r3, [r3, #0]
 8013d70:	b29a      	uxth	r2, r3
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	2203      	movs	r2, #3
 8013d7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013d7c:	4b41      	ldr	r3, [pc, #260]	; (8013e84 <tcp_listen_input+0x1e0>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	1c5a      	adds	r2, r3, #1
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013d8e:	6978      	ldr	r0, [r7, #20]
 8013d90:	f7ff fa58 	bl	8013244 <tcp_next_iss>
 8013d94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	693a      	ldr	r2, [r7, #16]
 8013d9a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	693a      	ldr	r2, [r7, #16]
 8013da0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	693a      	ldr	r2, [r7, #16]
 8013da6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	693a      	ldr	r2, [r7, #16]
 8013dac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013dae:	4b35      	ldr	r3, [pc, #212]	; (8013e84 <tcp_listen_input+0x1e0>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	1e5a      	subs	r2, r3, #1
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	691a      	ldr	r2, [r3, #16]
 8013dbc:	697b      	ldr	r3, [r7, #20]
 8013dbe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	7a5b      	ldrb	r3, [r3, #9]
 8013dca:	f003 030c 	and.w	r3, r3, #12
 8013dce:	b2da      	uxtb	r2, r3
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	7a1a      	ldrb	r2, [r3, #8]
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013ddc:	4b2e      	ldr	r3, [pc, #184]	; (8013e98 <tcp_listen_input+0x1f4>)
 8013dde:	681a      	ldr	r2, [r3, #0]
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	60da      	str	r2, [r3, #12]
 8013de4:	4a2c      	ldr	r2, [pc, #176]	; (8013e98 <tcp_listen_input+0x1f4>)
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	6013      	str	r3, [r2, #0]
 8013dea:	f003 fd29 	bl	8017840 <tcp_timer_needed>
 8013dee:	4b2b      	ldr	r3, [pc, #172]	; (8013e9c <tcp_listen_input+0x1f8>)
 8013df0:	2201      	movs	r2, #1
 8013df2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013df4:	6978      	ldr	r0, [r7, #20]
 8013df6:	f001 fd8f 	bl	8015918 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013dfa:	4b23      	ldr	r3, [pc, #140]	; (8013e88 <tcp_listen_input+0x1e4>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	89db      	ldrh	r3, [r3, #14]
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	3304      	adds	r3, #4
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f005 fc4d 	bl	80196bc <ip4_route>
 8013e22:	4601      	mov	r1, r0
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	3304      	adds	r3, #4
 8013e28:	461a      	mov	r2, r3
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7ff fa30 	bl	8013290 <tcp_eff_send_mss_netif>
 8013e30:	4603      	mov	r3, r0
 8013e32:	461a      	mov	r2, r3
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013e38:	2112      	movs	r1, #18
 8013e3a:	6978      	ldr	r0, [r7, #20]
 8013e3c:	f002 fc9c 	bl	8016778 <tcp_enqueue_flags>
 8013e40:	4603      	mov	r3, r0
 8013e42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d004      	beq.n	8013e56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013e4c:	2100      	movs	r1, #0
 8013e4e:	6978      	ldr	r0, [r7, #20]
 8013e50:	f7fd ff08 	bl	8011c64 <tcp_abandon>
      return;
 8013e54:	e006      	b.n	8013e64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013e56:	6978      	ldr	r0, [r7, #20]
 8013e58:	f002 fd7c 	bl	8016954 <tcp_output>
  return;
 8013e5c:	e001      	b.n	8013e62 <tcp_listen_input+0x1be>
    return;
 8013e5e:	bf00      	nop
 8013e60:	e000      	b.n	8013e64 <tcp_listen_input+0x1c0>
  return;
 8013e62:	bf00      	nop
}
 8013e64:	371c      	adds	r7, #28
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd90      	pop	{r4, r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	2003d120 	.word	0x2003d120
 8013e70:	0801e594 	.word	0x0801e594
 8013e74:	0801e78c 	.word	0x0801e78c
 8013e78:	0801e5e0 	.word	0x0801e5e0
 8013e7c:	2003d118 	.word	0x2003d118
 8013e80:	2003d11e 	.word	0x2003d11e
 8013e84:	2003d114 	.word	0x2003d114
 8013e88:	2003d104 	.word	0x2003d104
 8013e8c:	20039998 	.word	0x20039998
 8013e90:	2003999c 	.word	0x2003999c
 8013e94:	20039988 	.word	0x20039988
 8013e98:	2003d0e8 	.word	0x2003d0e8
 8013e9c:	2003d0f0 	.word	0x2003d0f0

08013ea0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af04      	add	r7, sp, #16
 8013ea6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013ea8:	4b2f      	ldr	r3, [pc, #188]	; (8013f68 <tcp_timewait_input+0xc8>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	f003 0304 	and.w	r3, r3, #4
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d153      	bne.n	8013f5c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d106      	bne.n	8013ec8 <tcp_timewait_input+0x28>
 8013eba:	4b2c      	ldr	r3, [pc, #176]	; (8013f6c <tcp_timewait_input+0xcc>)
 8013ebc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013ec0:	492b      	ldr	r1, [pc, #172]	; (8013f70 <tcp_timewait_input+0xd0>)
 8013ec2:	482c      	ldr	r0, [pc, #176]	; (8013f74 <tcp_timewait_input+0xd4>)
 8013ec4:	f007 f948 	bl	801b158 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013ec8:	4b27      	ldr	r3, [pc, #156]	; (8013f68 <tcp_timewait_input+0xc8>)
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f003 0302 	and.w	r3, r3, #2
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d02a      	beq.n	8013f2a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013ed4:	4b28      	ldr	r3, [pc, #160]	; (8013f78 <tcp_timewait_input+0xd8>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	db2d      	blt.n	8013f3e <tcp_timewait_input+0x9e>
 8013ee2:	4b25      	ldr	r3, [pc, #148]	; (8013f78 <tcp_timewait_input+0xd8>)
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eea:	6879      	ldr	r1, [r7, #4]
 8013eec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013eee:	440b      	add	r3, r1
 8013ef0:	1ad3      	subs	r3, r2, r3
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	dc23      	bgt.n	8013f3e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ef6:	4b21      	ldr	r3, [pc, #132]	; (8013f7c <tcp_timewait_input+0xdc>)
 8013ef8:	6819      	ldr	r1, [r3, #0]
 8013efa:	4b21      	ldr	r3, [pc, #132]	; (8013f80 <tcp_timewait_input+0xe0>)
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	461a      	mov	r2, r3
 8013f00:	4b1d      	ldr	r3, [pc, #116]	; (8013f78 <tcp_timewait_input+0xd8>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f06:	4b1f      	ldr	r3, [pc, #124]	; (8013f84 <tcp_timewait_input+0xe4>)
 8013f08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f0a:	885b      	ldrh	r3, [r3, #2]
 8013f0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f0e:	4a1d      	ldr	r2, [pc, #116]	; (8013f84 <tcp_timewait_input+0xe4>)
 8013f10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f12:	8812      	ldrh	r2, [r2, #0]
 8013f14:	b292      	uxth	r2, r2
 8013f16:	9202      	str	r2, [sp, #8]
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	4b1b      	ldr	r3, [pc, #108]	; (8013f88 <tcp_timewait_input+0xe8>)
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	4b1b      	ldr	r3, [pc, #108]	; (8013f8c <tcp_timewait_input+0xec>)
 8013f20:	4602      	mov	r2, r0
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f003 faca 	bl	80174bc <tcp_rst>
      return;
 8013f28:	e01b      	b.n	8013f62 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013f2a:	4b0f      	ldr	r3, [pc, #60]	; (8013f68 <tcp_timewait_input+0xc8>)
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	f003 0301 	and.w	r3, r3, #1
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d003      	beq.n	8013f3e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013f36:	4b16      	ldr	r3, [pc, #88]	; (8013f90 <tcp_timewait_input+0xf0>)
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013f3e:	4b10      	ldr	r3, [pc, #64]	; (8013f80 <tcp_timewait_input+0xe0>)
 8013f40:	881b      	ldrh	r3, [r3, #0]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00c      	beq.n	8013f60 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	8b5b      	ldrh	r3, [r3, #26]
 8013f4a:	f043 0302 	orr.w	r3, r3, #2
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f002 fcfd 	bl	8016954 <tcp_output>
  }
  return;
 8013f5a:	e001      	b.n	8013f60 <tcp_timewait_input+0xc0>
    return;
 8013f5c:	bf00      	nop
 8013f5e:	e000      	b.n	8013f62 <tcp_timewait_input+0xc2>
  return;
 8013f60:	bf00      	nop
}
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}
 8013f68:	2003d120 	.word	0x2003d120
 8013f6c:	0801e594 	.word	0x0801e594
 8013f70:	0801e7ac 	.word	0x0801e7ac
 8013f74:	0801e5e0 	.word	0x0801e5e0
 8013f78:	2003d114 	.word	0x2003d114
 8013f7c:	2003d118 	.word	0x2003d118
 8013f80:	2003d11e 	.word	0x2003d11e
 8013f84:	2003d104 	.word	0x2003d104
 8013f88:	20039998 	.word	0x20039998
 8013f8c:	2003999c 	.word	0x2003999c
 8013f90:	2003d0dc 	.word	0x2003d0dc

08013f94 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013f94:	b590      	push	{r4, r7, lr}
 8013f96:	b08d      	sub	sp, #52	; 0x34
 8013f98:	af04      	add	r7, sp, #16
 8013f9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <tcp_process+0x24>
 8013faa:	4b9d      	ldr	r3, [pc, #628]	; (8014220 <tcp_process+0x28c>)
 8013fac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013fb0:	499c      	ldr	r1, [pc, #624]	; (8014224 <tcp_process+0x290>)
 8013fb2:	489d      	ldr	r0, [pc, #628]	; (8014228 <tcp_process+0x294>)
 8013fb4:	f007 f8d0 	bl	801b158 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013fb8:	4b9c      	ldr	r3, [pc, #624]	; (801422c <tcp_process+0x298>)
 8013fba:	781b      	ldrb	r3, [r3, #0]
 8013fbc:	f003 0304 	and.w	r3, r3, #4
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d04e      	beq.n	8014062 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	7d1b      	ldrb	r3, [r3, #20]
 8013fc8:	2b02      	cmp	r3, #2
 8013fca:	d108      	bne.n	8013fde <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013fd0:	4b97      	ldr	r3, [pc, #604]	; (8014230 <tcp_process+0x29c>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d123      	bne.n	8014020 <tcp_process+0x8c>
        acceptable = 1;
 8013fd8:	2301      	movs	r3, #1
 8013fda:	76fb      	strb	r3, [r7, #27]
 8013fdc:	e020      	b.n	8014020 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fe2:	4b94      	ldr	r3, [pc, #592]	; (8014234 <tcp_process+0x2a0>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d102      	bne.n	8013ff0 <tcp_process+0x5c>
        acceptable = 1;
 8013fea:	2301      	movs	r3, #1
 8013fec:	76fb      	strb	r3, [r7, #27]
 8013fee:	e017      	b.n	8014020 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013ff0:	4b90      	ldr	r3, [pc, #576]	; (8014234 <tcp_process+0x2a0>)
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff8:	1ad3      	subs	r3, r2, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	db10      	blt.n	8014020 <tcp_process+0x8c>
 8013ffe:	4b8d      	ldr	r3, [pc, #564]	; (8014234 <tcp_process+0x2a0>)
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014006:	6879      	ldr	r1, [r7, #4]
 8014008:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801400a:	440b      	add	r3, r1
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	2b00      	cmp	r3, #0
 8014010:	dc06      	bgt.n	8014020 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	8b5b      	ldrh	r3, [r3, #26]
 8014016:	f043 0302 	orr.w	r3, r3, #2
 801401a:	b29a      	uxth	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014020:	7efb      	ldrb	r3, [r7, #27]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d01b      	beq.n	801405e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	7d1b      	ldrb	r3, [r3, #20]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d106      	bne.n	801403c <tcp_process+0xa8>
 801402e:	4b7c      	ldr	r3, [pc, #496]	; (8014220 <tcp_process+0x28c>)
 8014030:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014034:	4980      	ldr	r1, [pc, #512]	; (8014238 <tcp_process+0x2a4>)
 8014036:	487c      	ldr	r0, [pc, #496]	; (8014228 <tcp_process+0x294>)
 8014038:	f007 f88e 	bl	801b158 <iprintf>
      recv_flags |= TF_RESET;
 801403c:	4b7f      	ldr	r3, [pc, #508]	; (801423c <tcp_process+0x2a8>)
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	f043 0308 	orr.w	r3, r3, #8
 8014044:	b2da      	uxtb	r2, r3
 8014046:	4b7d      	ldr	r3, [pc, #500]	; (801423c <tcp_process+0x2a8>)
 8014048:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	8b5b      	ldrh	r3, [r3, #26]
 801404e:	f023 0301 	bic.w	r3, r3, #1
 8014052:	b29a      	uxth	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014058:	f06f 030d 	mvn.w	r3, #13
 801405c:	e37a      	b.n	8014754 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801405e:	2300      	movs	r3, #0
 8014060:	e378      	b.n	8014754 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014062:	4b72      	ldr	r3, [pc, #456]	; (801422c <tcp_process+0x298>)
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	f003 0302 	and.w	r3, r3, #2
 801406a:	2b00      	cmp	r3, #0
 801406c:	d010      	beq.n	8014090 <tcp_process+0xfc>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	7d1b      	ldrb	r3, [r3, #20]
 8014072:	2b02      	cmp	r3, #2
 8014074:	d00c      	beq.n	8014090 <tcp_process+0xfc>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	7d1b      	ldrb	r3, [r3, #20]
 801407a:	2b03      	cmp	r3, #3
 801407c:	d008      	beq.n	8014090 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	8b5b      	ldrh	r3, [r3, #26]
 8014082:	f043 0302 	orr.w	r3, r3, #2
 8014086:	b29a      	uxth	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801408c:	2300      	movs	r3, #0
 801408e:	e361      	b.n	8014754 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	8b5b      	ldrh	r3, [r3, #26]
 8014094:	f003 0310 	and.w	r3, r3, #16
 8014098:	2b00      	cmp	r3, #0
 801409a:	d103      	bne.n	80140a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801409c:	4b68      	ldr	r3, [pc, #416]	; (8014240 <tcp_process+0x2ac>)
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2200      	movs	r2, #0
 80140a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2200      	movs	r2, #0
 80140b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f001 fc2f 	bl	8015918 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	7d1b      	ldrb	r3, [r3, #20]
 80140be:	3b02      	subs	r3, #2
 80140c0:	2b07      	cmp	r3, #7
 80140c2:	f200 8337 	bhi.w	8014734 <tcp_process+0x7a0>
 80140c6:	a201      	add	r2, pc, #4	; (adr r2, 80140cc <tcp_process+0x138>)
 80140c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140cc:	080140ed 	.word	0x080140ed
 80140d0:	0801431d 	.word	0x0801431d
 80140d4:	08014495 	.word	0x08014495
 80140d8:	080144bf 	.word	0x080144bf
 80140dc:	080145e3 	.word	0x080145e3
 80140e0:	08014495 	.word	0x08014495
 80140e4:	0801466f 	.word	0x0801466f
 80140e8:	080146ff 	.word	0x080146ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80140ec:	4b4f      	ldr	r3, [pc, #316]	; (801422c <tcp_process+0x298>)
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	f003 0310 	and.w	r3, r3, #16
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	f000 80e4 	beq.w	80142c2 <tcp_process+0x32e>
 80140fa:	4b4c      	ldr	r3, [pc, #304]	; (801422c <tcp_process+0x298>)
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	f003 0302 	and.w	r3, r3, #2
 8014102:	2b00      	cmp	r3, #0
 8014104:	f000 80dd 	beq.w	80142c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801410c:	1c5a      	adds	r2, r3, #1
 801410e:	4b48      	ldr	r3, [pc, #288]	; (8014230 <tcp_process+0x29c>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	429a      	cmp	r2, r3
 8014114:	f040 80d5 	bne.w	80142c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014118:	4b46      	ldr	r3, [pc, #280]	; (8014234 <tcp_process+0x2a0>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	1c5a      	adds	r2, r3, #1
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801412a:	4b41      	ldr	r3, [pc, #260]	; (8014230 <tcp_process+0x29c>)
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014132:	4b44      	ldr	r3, [pc, #272]	; (8014244 <tcp_process+0x2b0>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	89db      	ldrh	r3, [r3, #14]
 8014138:	b29a      	uxth	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801414c:	4b39      	ldr	r3, [pc, #228]	; (8014234 <tcp_process+0x2a0>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	1e5a      	subs	r2, r3, #1
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2204      	movs	r2, #4
 801415a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3304      	adds	r3, #4
 8014164:	4618      	mov	r0, r3
 8014166:	f005 faa9 	bl	80196bc <ip4_route>
 801416a:	4601      	mov	r1, r0
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	3304      	adds	r3, #4
 8014170:	461a      	mov	r2, r3
 8014172:	4620      	mov	r0, r4
 8014174:	f7ff f88c 	bl	8013290 <tcp_eff_send_mss_netif>
 8014178:	4603      	mov	r3, r0
 801417a:	461a      	mov	r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014184:	009a      	lsls	r2, r3, #2
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801418a:	005b      	lsls	r3, r3, #1
 801418c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014190:	428b      	cmp	r3, r1
 8014192:	bf38      	it	cc
 8014194:	460b      	movcc	r3, r1
 8014196:	429a      	cmp	r2, r3
 8014198:	d204      	bcs.n	80141a4 <tcp_process+0x210>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801419e:	009b      	lsls	r3, r3, #2
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	e00d      	b.n	80141c0 <tcp_process+0x22c>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d904      	bls.n	80141bc <tcp_process+0x228>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141b6:	005b      	lsls	r3, r3, #1
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	e001      	b.n	80141c0 <tcp_process+0x22c>
 80141bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d106      	bne.n	80141de <tcp_process+0x24a>
 80141d0:	4b13      	ldr	r3, [pc, #76]	; (8014220 <tcp_process+0x28c>)
 80141d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80141d6:	491c      	ldr	r1, [pc, #112]	; (8014248 <tcp_process+0x2b4>)
 80141d8:	4813      	ldr	r0, [pc, #76]	; (8014228 <tcp_process+0x294>)
 80141da:	f006 ffbd 	bl	801b158 <iprintf>
        --pcb->snd_queuelen;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141e4:	3b01      	subs	r3, #1
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d12a      	bne.n	8014250 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d106      	bne.n	8014214 <tcp_process+0x280>
 8014206:	4b06      	ldr	r3, [pc, #24]	; (8014220 <tcp_process+0x28c>)
 8014208:	f44f 725d 	mov.w	r2, #884	; 0x374
 801420c:	490f      	ldr	r1, [pc, #60]	; (801424c <tcp_process+0x2b8>)
 801420e:	4806      	ldr	r0, [pc, #24]	; (8014228 <tcp_process+0x294>)
 8014210:	f006 ffa2 	bl	801b158 <iprintf>
          pcb->unsent = rseg->next;
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	66da      	str	r2, [r3, #108]	; 0x6c
 801421c:	e01c      	b.n	8014258 <tcp_process+0x2c4>
 801421e:	bf00      	nop
 8014220:	0801e594 	.word	0x0801e594
 8014224:	0801e7cc 	.word	0x0801e7cc
 8014228:	0801e5e0 	.word	0x0801e5e0
 801422c:	2003d120 	.word	0x2003d120
 8014230:	2003d118 	.word	0x2003d118
 8014234:	2003d114 	.word	0x2003d114
 8014238:	0801e7e8 	.word	0x0801e7e8
 801423c:	2003d121 	.word	0x2003d121
 8014240:	2003d0dc 	.word	0x2003d0dc
 8014244:	2003d104 	.word	0x2003d104
 8014248:	0801e808 	.word	0x0801e808
 801424c:	0801e820 	.word	0x0801e820
        } else {
          pcb->unacked = rseg->next;
 8014250:	69fb      	ldr	r3, [r7, #28]
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014258:	69f8      	ldr	r0, [r7, #28]
 801425a:	f7fe fc54 	bl	8012b06 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014262:	2b00      	cmp	r3, #0
 8014264:	d104      	bne.n	8014270 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801426c:	861a      	strh	r2, [r3, #48]	; 0x30
 801426e:	e006      	b.n	801427e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014284:	2b00      	cmp	r3, #0
 8014286:	d00a      	beq.n	801429e <tcp_process+0x30a>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801428e:	687a      	ldr	r2, [r7, #4]
 8014290:	6910      	ldr	r0, [r2, #16]
 8014292:	2200      	movs	r2, #0
 8014294:	6879      	ldr	r1, [r7, #4]
 8014296:	4798      	blx	r3
 8014298:	4603      	mov	r3, r0
 801429a:	76bb      	strb	r3, [r7, #26]
 801429c:	e001      	b.n	80142a2 <tcp_process+0x30e>
 801429e:	2300      	movs	r3, #0
 80142a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80142a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80142a6:	f113 0f0d 	cmn.w	r3, #13
 80142aa:	d102      	bne.n	80142b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80142ac:	f06f 030c 	mvn.w	r3, #12
 80142b0:	e250      	b.n	8014754 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8b5b      	ldrh	r3, [r3, #26]
 80142b6:	f043 0302 	orr.w	r3, r3, #2
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80142c0:	e23a      	b.n	8014738 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80142c2:	4b98      	ldr	r3, [pc, #608]	; (8014524 <tcp_process+0x590>)
 80142c4:	781b      	ldrb	r3, [r3, #0]
 80142c6:	f003 0310 	and.w	r3, r3, #16
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	f000 8234 	beq.w	8014738 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80142d0:	4b95      	ldr	r3, [pc, #596]	; (8014528 <tcp_process+0x594>)
 80142d2:	6819      	ldr	r1, [r3, #0]
 80142d4:	4b95      	ldr	r3, [pc, #596]	; (801452c <tcp_process+0x598>)
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	461a      	mov	r2, r3
 80142da:	4b95      	ldr	r3, [pc, #596]	; (8014530 <tcp_process+0x59c>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80142e0:	4b94      	ldr	r3, [pc, #592]	; (8014534 <tcp_process+0x5a0>)
 80142e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80142e4:	885b      	ldrh	r3, [r3, #2]
 80142e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80142e8:	4a92      	ldr	r2, [pc, #584]	; (8014534 <tcp_process+0x5a0>)
 80142ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80142ec:	8812      	ldrh	r2, [r2, #0]
 80142ee:	b292      	uxth	r2, r2
 80142f0:	9202      	str	r2, [sp, #8]
 80142f2:	9301      	str	r3, [sp, #4]
 80142f4:	4b90      	ldr	r3, [pc, #576]	; (8014538 <tcp_process+0x5a4>)
 80142f6:	9300      	str	r3, [sp, #0]
 80142f8:	4b90      	ldr	r3, [pc, #576]	; (801453c <tcp_process+0x5a8>)
 80142fa:	4602      	mov	r2, r0
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f003 f8dd 	bl	80174bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014308:	2b05      	cmp	r3, #5
 801430a:	f200 8215 	bhi.w	8014738 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2200      	movs	r2, #0
 8014312:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f002 fea9 	bl	801706c <tcp_rexmit_rto>
      break;
 801431a:	e20d      	b.n	8014738 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801431c:	4b81      	ldr	r3, [pc, #516]	; (8014524 <tcp_process+0x590>)
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	f003 0310 	and.w	r3, r3, #16
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 80a1 	beq.w	801446c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801432a:	4b7f      	ldr	r3, [pc, #508]	; (8014528 <tcp_process+0x594>)
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014332:	1ad3      	subs	r3, r2, r3
 8014334:	3b01      	subs	r3, #1
 8014336:	2b00      	cmp	r3, #0
 8014338:	db7e      	blt.n	8014438 <tcp_process+0x4a4>
 801433a:	4b7b      	ldr	r3, [pc, #492]	; (8014528 <tcp_process+0x594>)
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014342:	1ad3      	subs	r3, r2, r3
 8014344:	2b00      	cmp	r3, #0
 8014346:	dc77      	bgt.n	8014438 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2204      	movs	r2, #4
 801434c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014352:	2b00      	cmp	r3, #0
 8014354:	d102      	bne.n	801435c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014356:	23fa      	movs	r3, #250	; 0xfa
 8014358:	76bb      	strb	r3, [r7, #26]
 801435a:	e01d      	b.n	8014398 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014360:	699b      	ldr	r3, [r3, #24]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d106      	bne.n	8014374 <tcp_process+0x3e0>
 8014366:	4b76      	ldr	r3, [pc, #472]	; (8014540 <tcp_process+0x5ac>)
 8014368:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801436c:	4975      	ldr	r1, [pc, #468]	; (8014544 <tcp_process+0x5b0>)
 801436e:	4876      	ldr	r0, [pc, #472]	; (8014548 <tcp_process+0x5b4>)
 8014370:	f006 fef2 	bl	801b158 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014378:	699b      	ldr	r3, [r3, #24]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00a      	beq.n	8014394 <tcp_process+0x400>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014382:	699b      	ldr	r3, [r3, #24]
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	6910      	ldr	r0, [r2, #16]
 8014388:	2200      	movs	r2, #0
 801438a:	6879      	ldr	r1, [r7, #4]
 801438c:	4798      	blx	r3
 801438e:	4603      	mov	r3, r0
 8014390:	76bb      	strb	r3, [r7, #26]
 8014392:	e001      	b.n	8014398 <tcp_process+0x404>
 8014394:	23f0      	movs	r3, #240	; 0xf0
 8014396:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014398:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d00a      	beq.n	80143b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80143a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80143a4:	f113 0f0d 	cmn.w	r3, #13
 80143a8:	d002      	beq.n	80143b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7fd fd18 	bl	8011de0 <tcp_abort>
            }
            return ERR_ABRT;
 80143b0:	f06f 030c 	mvn.w	r3, #12
 80143b4:	e1ce      	b.n	8014754 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f000 fae0 	bl	801497c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80143bc:	4b63      	ldr	r3, [pc, #396]	; (801454c <tcp_process+0x5b8>)
 80143be:	881b      	ldrh	r3, [r3, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d005      	beq.n	80143d0 <tcp_process+0x43c>
            recv_acked--;
 80143c4:	4b61      	ldr	r3, [pc, #388]	; (801454c <tcp_process+0x5b8>)
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	3b01      	subs	r3, #1
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	4b5f      	ldr	r3, [pc, #380]	; (801454c <tcp_process+0x5b8>)
 80143ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143d4:	009a      	lsls	r2, r3, #2
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80143e0:	428b      	cmp	r3, r1
 80143e2:	bf38      	it	cc
 80143e4:	460b      	movcc	r3, r1
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d204      	bcs.n	80143f4 <tcp_process+0x460>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	e00d      	b.n	8014410 <tcp_process+0x47c>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80143fe:	4293      	cmp	r3, r2
 8014400:	d904      	bls.n	801440c <tcp_process+0x478>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	b29b      	uxth	r3, r3
 801440a:	e001      	b.n	8014410 <tcp_process+0x47c>
 801440c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014416:	4b4e      	ldr	r3, [pc, #312]	; (8014550 <tcp_process+0x5bc>)
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	f003 0320 	and.w	r3, r3, #32
 801441e:	2b00      	cmp	r3, #0
 8014420:	d037      	beq.n	8014492 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	8b5b      	ldrh	r3, [r3, #26]
 8014426:	f043 0302 	orr.w	r3, r3, #2
 801442a:	b29a      	uxth	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2207      	movs	r2, #7
 8014434:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014436:	e02c      	b.n	8014492 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014438:	4b3b      	ldr	r3, [pc, #236]	; (8014528 <tcp_process+0x594>)
 801443a:	6819      	ldr	r1, [r3, #0]
 801443c:	4b3b      	ldr	r3, [pc, #236]	; (801452c <tcp_process+0x598>)
 801443e:	881b      	ldrh	r3, [r3, #0]
 8014440:	461a      	mov	r2, r3
 8014442:	4b3b      	ldr	r3, [pc, #236]	; (8014530 <tcp_process+0x59c>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014448:	4b3a      	ldr	r3, [pc, #232]	; (8014534 <tcp_process+0x5a0>)
 801444a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801444c:	885b      	ldrh	r3, [r3, #2]
 801444e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014450:	4a38      	ldr	r2, [pc, #224]	; (8014534 <tcp_process+0x5a0>)
 8014452:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014454:	8812      	ldrh	r2, [r2, #0]
 8014456:	b292      	uxth	r2, r2
 8014458:	9202      	str	r2, [sp, #8]
 801445a:	9301      	str	r3, [sp, #4]
 801445c:	4b36      	ldr	r3, [pc, #216]	; (8014538 <tcp_process+0x5a4>)
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	4b36      	ldr	r3, [pc, #216]	; (801453c <tcp_process+0x5a8>)
 8014462:	4602      	mov	r2, r0
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	f003 f829 	bl	80174bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801446a:	e167      	b.n	801473c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801446c:	4b2d      	ldr	r3, [pc, #180]	; (8014524 <tcp_process+0x590>)
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	f003 0302 	and.w	r3, r3, #2
 8014474:	2b00      	cmp	r3, #0
 8014476:	f000 8161 	beq.w	801473c <tcp_process+0x7a8>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447e:	1e5a      	subs	r2, r3, #1
 8014480:	4b2b      	ldr	r3, [pc, #172]	; (8014530 <tcp_process+0x59c>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	429a      	cmp	r2, r3
 8014486:	f040 8159 	bne.w	801473c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f002 fe10 	bl	80170b0 <tcp_rexmit>
      break;
 8014490:	e154      	b.n	801473c <tcp_process+0x7a8>
 8014492:	e153      	b.n	801473c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 fa71 	bl	801497c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801449a:	4b2d      	ldr	r3, [pc, #180]	; (8014550 <tcp_process+0x5bc>)
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	f003 0320 	and.w	r3, r3, #32
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	f000 814c 	beq.w	8014740 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	8b5b      	ldrh	r3, [r3, #26]
 80144ac:	f043 0302 	orr.w	r3, r3, #2
 80144b0:	b29a      	uxth	r2, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2207      	movs	r2, #7
 80144ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80144bc:	e140      	b.n	8014740 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f000 fa5c 	bl	801497c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80144c4:	4b22      	ldr	r3, [pc, #136]	; (8014550 <tcp_process+0x5bc>)
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	f003 0320 	and.w	r3, r3, #32
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d071      	beq.n	80145b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80144d0:	4b14      	ldr	r3, [pc, #80]	; (8014524 <tcp_process+0x590>)
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	f003 0310 	and.w	r3, r3, #16
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d060      	beq.n	801459e <tcp_process+0x60a>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144e0:	4b11      	ldr	r3, [pc, #68]	; (8014528 <tcp_process+0x594>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d15a      	bne.n	801459e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d156      	bne.n	801459e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	8b5b      	ldrh	r3, [r3, #26]
 80144f4:	f043 0302 	orr.w	r3, r3, #2
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7fe fdbc 	bl	801307c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014504:	4b13      	ldr	r3, [pc, #76]	; (8014554 <tcp_process+0x5c0>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	687a      	ldr	r2, [r7, #4]
 801450a:	429a      	cmp	r2, r3
 801450c:	d105      	bne.n	801451a <tcp_process+0x586>
 801450e:	4b11      	ldr	r3, [pc, #68]	; (8014554 <tcp_process+0x5c0>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	4a0f      	ldr	r2, [pc, #60]	; (8014554 <tcp_process+0x5c0>)
 8014516:	6013      	str	r3, [r2, #0]
 8014518:	e02e      	b.n	8014578 <tcp_process+0x5e4>
 801451a:	4b0e      	ldr	r3, [pc, #56]	; (8014554 <tcp_process+0x5c0>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	617b      	str	r3, [r7, #20]
 8014520:	e027      	b.n	8014572 <tcp_process+0x5de>
 8014522:	bf00      	nop
 8014524:	2003d120 	.word	0x2003d120
 8014528:	2003d118 	.word	0x2003d118
 801452c:	2003d11e 	.word	0x2003d11e
 8014530:	2003d114 	.word	0x2003d114
 8014534:	2003d104 	.word	0x2003d104
 8014538:	20039998 	.word	0x20039998
 801453c:	2003999c 	.word	0x2003999c
 8014540:	0801e594 	.word	0x0801e594
 8014544:	0801e834 	.word	0x0801e834
 8014548:	0801e5e0 	.word	0x0801e5e0
 801454c:	2003d11c 	.word	0x2003d11c
 8014550:	2003d121 	.word	0x2003d121
 8014554:	2003d0e8 	.word	0x2003d0e8
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	429a      	cmp	r2, r3
 8014560:	d104      	bne.n	801456c <tcp_process+0x5d8>
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	68da      	ldr	r2, [r3, #12]
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	60da      	str	r2, [r3, #12]
 801456a:	e005      	b.n	8014578 <tcp_process+0x5e4>
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	617b      	str	r3, [r7, #20]
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d1ef      	bne.n	8014558 <tcp_process+0x5c4>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	60da      	str	r2, [r3, #12]
 801457e:	4b77      	ldr	r3, [pc, #476]	; (801475c <tcp_process+0x7c8>)
 8014580:	2201      	movs	r2, #1
 8014582:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	220a      	movs	r2, #10
 8014588:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801458a:	4b75      	ldr	r3, [pc, #468]	; (8014760 <tcp_process+0x7cc>)
 801458c:	681a      	ldr	r2, [r3, #0]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	60da      	str	r2, [r3, #12]
 8014592:	4a73      	ldr	r2, [pc, #460]	; (8014760 <tcp_process+0x7cc>)
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6013      	str	r3, [r2, #0]
 8014598:	f003 f952 	bl	8017840 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801459c:	e0d2      	b.n	8014744 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	8b5b      	ldrh	r3, [r3, #26]
 80145a2:	f043 0302 	orr.w	r3, r3, #2
 80145a6:	b29a      	uxth	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2208      	movs	r2, #8
 80145b0:	751a      	strb	r2, [r3, #20]
      break;
 80145b2:	e0c7      	b.n	8014744 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80145b4:	4b6b      	ldr	r3, [pc, #428]	; (8014764 <tcp_process+0x7d0>)
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	f003 0310 	and.w	r3, r3, #16
 80145bc:	2b00      	cmp	r3, #0
 80145be:	f000 80c1 	beq.w	8014744 <tcp_process+0x7b0>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80145c6:	4b68      	ldr	r3, [pc, #416]	; (8014768 <tcp_process+0x7d4>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	f040 80ba 	bne.w	8014744 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	f040 80b5 	bne.w	8014744 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2206      	movs	r2, #6
 80145de:	751a      	strb	r2, [r3, #20]
      break;
 80145e0:	e0b0      	b.n	8014744 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f9ca 	bl	801497c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80145e8:	4b60      	ldr	r3, [pc, #384]	; (801476c <tcp_process+0x7d8>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	f003 0320 	and.w	r3, r3, #32
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f000 80a9 	beq.w	8014748 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	8b5b      	ldrh	r3, [r3, #26]
 80145fa:	f043 0302 	orr.w	r3, r3, #2
 80145fe:	b29a      	uxth	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7fe fd39 	bl	801307c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801460a:	4b59      	ldr	r3, [pc, #356]	; (8014770 <tcp_process+0x7dc>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	429a      	cmp	r2, r3
 8014612:	d105      	bne.n	8014620 <tcp_process+0x68c>
 8014614:	4b56      	ldr	r3, [pc, #344]	; (8014770 <tcp_process+0x7dc>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	4a55      	ldr	r2, [pc, #340]	; (8014770 <tcp_process+0x7dc>)
 801461c:	6013      	str	r3, [r2, #0]
 801461e:	e013      	b.n	8014648 <tcp_process+0x6b4>
 8014620:	4b53      	ldr	r3, [pc, #332]	; (8014770 <tcp_process+0x7dc>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	613b      	str	r3, [r7, #16]
 8014626:	e00c      	b.n	8014642 <tcp_process+0x6ae>
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	429a      	cmp	r2, r3
 8014630:	d104      	bne.n	801463c <tcp_process+0x6a8>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	68da      	ldr	r2, [r3, #12]
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	60da      	str	r2, [r3, #12]
 801463a:	e005      	b.n	8014648 <tcp_process+0x6b4>
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	613b      	str	r3, [r7, #16]
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d1ef      	bne.n	8014628 <tcp_process+0x694>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2200      	movs	r2, #0
 801464c:	60da      	str	r2, [r3, #12]
 801464e:	4b43      	ldr	r3, [pc, #268]	; (801475c <tcp_process+0x7c8>)
 8014650:	2201      	movs	r2, #1
 8014652:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	220a      	movs	r2, #10
 8014658:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801465a:	4b41      	ldr	r3, [pc, #260]	; (8014760 <tcp_process+0x7cc>)
 801465c:	681a      	ldr	r2, [r3, #0]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	60da      	str	r2, [r3, #12]
 8014662:	4a3f      	ldr	r2, [pc, #252]	; (8014760 <tcp_process+0x7cc>)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	6013      	str	r3, [r2, #0]
 8014668:	f003 f8ea 	bl	8017840 <tcp_timer_needed>
      }
      break;
 801466c:	e06c      	b.n	8014748 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f000 f984 	bl	801497c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014674:	4b3b      	ldr	r3, [pc, #236]	; (8014764 <tcp_process+0x7d0>)
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	f003 0310 	and.w	r3, r3, #16
 801467c:	2b00      	cmp	r3, #0
 801467e:	d065      	beq.n	801474c <tcp_process+0x7b8>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014684:	4b38      	ldr	r3, [pc, #224]	; (8014768 <tcp_process+0x7d4>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	429a      	cmp	r2, r3
 801468a:	d15f      	bne.n	801474c <tcp_process+0x7b8>
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014690:	2b00      	cmp	r3, #0
 8014692:	d15b      	bne.n	801474c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f7fe fcf1 	bl	801307c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801469a:	4b35      	ldr	r3, [pc, #212]	; (8014770 <tcp_process+0x7dc>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	429a      	cmp	r2, r3
 80146a2:	d105      	bne.n	80146b0 <tcp_process+0x71c>
 80146a4:	4b32      	ldr	r3, [pc, #200]	; (8014770 <tcp_process+0x7dc>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	68db      	ldr	r3, [r3, #12]
 80146aa:	4a31      	ldr	r2, [pc, #196]	; (8014770 <tcp_process+0x7dc>)
 80146ac:	6013      	str	r3, [r2, #0]
 80146ae:	e013      	b.n	80146d8 <tcp_process+0x744>
 80146b0:	4b2f      	ldr	r3, [pc, #188]	; (8014770 <tcp_process+0x7dc>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	60fb      	str	r3, [r7, #12]
 80146b6:	e00c      	b.n	80146d2 <tcp_process+0x73e>
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d104      	bne.n	80146cc <tcp_process+0x738>
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	68da      	ldr	r2, [r3, #12]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	60da      	str	r2, [r3, #12]
 80146ca:	e005      	b.n	80146d8 <tcp_process+0x744>
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d1ef      	bne.n	80146b8 <tcp_process+0x724>
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2200      	movs	r2, #0
 80146dc:	60da      	str	r2, [r3, #12]
 80146de:	4b1f      	ldr	r3, [pc, #124]	; (801475c <tcp_process+0x7c8>)
 80146e0:	2201      	movs	r2, #1
 80146e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	220a      	movs	r2, #10
 80146e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80146ea:	4b1d      	ldr	r3, [pc, #116]	; (8014760 <tcp_process+0x7cc>)
 80146ec:	681a      	ldr	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	60da      	str	r2, [r3, #12]
 80146f2:	4a1b      	ldr	r2, [pc, #108]	; (8014760 <tcp_process+0x7cc>)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6013      	str	r3, [r2, #0]
 80146f8:	f003 f8a2 	bl	8017840 <tcp_timer_needed>
      }
      break;
 80146fc:	e026      	b.n	801474c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 f93c 	bl	801497c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014704:	4b17      	ldr	r3, [pc, #92]	; (8014764 <tcp_process+0x7d0>)
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	f003 0310 	and.w	r3, r3, #16
 801470c:	2b00      	cmp	r3, #0
 801470e:	d01f      	beq.n	8014750 <tcp_process+0x7bc>
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014714:	4b14      	ldr	r3, [pc, #80]	; (8014768 <tcp_process+0x7d4>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d119      	bne.n	8014750 <tcp_process+0x7bc>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014720:	2b00      	cmp	r3, #0
 8014722:	d115      	bne.n	8014750 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014724:	4b11      	ldr	r3, [pc, #68]	; (801476c <tcp_process+0x7d8>)
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	f043 0310 	orr.w	r3, r3, #16
 801472c:	b2da      	uxtb	r2, r3
 801472e:	4b0f      	ldr	r3, [pc, #60]	; (801476c <tcp_process+0x7d8>)
 8014730:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014732:	e00d      	b.n	8014750 <tcp_process+0x7bc>
    default:
      break;
 8014734:	bf00      	nop
 8014736:	e00c      	b.n	8014752 <tcp_process+0x7be>
      break;
 8014738:	bf00      	nop
 801473a:	e00a      	b.n	8014752 <tcp_process+0x7be>
      break;
 801473c:	bf00      	nop
 801473e:	e008      	b.n	8014752 <tcp_process+0x7be>
      break;
 8014740:	bf00      	nop
 8014742:	e006      	b.n	8014752 <tcp_process+0x7be>
      break;
 8014744:	bf00      	nop
 8014746:	e004      	b.n	8014752 <tcp_process+0x7be>
      break;
 8014748:	bf00      	nop
 801474a:	e002      	b.n	8014752 <tcp_process+0x7be>
      break;
 801474c:	bf00      	nop
 801474e:	e000      	b.n	8014752 <tcp_process+0x7be>
      break;
 8014750:	bf00      	nop
  }
  return ERR_OK;
 8014752:	2300      	movs	r3, #0
}
 8014754:	4618      	mov	r0, r3
 8014756:	3724      	adds	r7, #36	; 0x24
 8014758:	46bd      	mov	sp, r7
 801475a:	bd90      	pop	{r4, r7, pc}
 801475c:	2003d0f0 	.word	0x2003d0f0
 8014760:	2003d0ec 	.word	0x2003d0ec
 8014764:	2003d120 	.word	0x2003d120
 8014768:	2003d118 	.word	0x2003d118
 801476c:	2003d121 	.word	0x2003d121
 8014770:	2003d0e8 	.word	0x2003d0e8

08014774 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014774:	b590      	push	{r4, r7, lr}
 8014776:	b085      	sub	sp, #20
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d106      	bne.n	8014792 <tcp_oos_insert_segment+0x1e>
 8014784:	4b3b      	ldr	r3, [pc, #236]	; (8014874 <tcp_oos_insert_segment+0x100>)
 8014786:	f240 421f 	movw	r2, #1055	; 0x41f
 801478a:	493b      	ldr	r1, [pc, #236]	; (8014878 <tcp_oos_insert_segment+0x104>)
 801478c:	483b      	ldr	r0, [pc, #236]	; (801487c <tcp_oos_insert_segment+0x108>)
 801478e:	f006 fce3 	bl	801b158 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	68db      	ldr	r3, [r3, #12]
 8014796:	899b      	ldrh	r3, [r3, #12]
 8014798:	b29b      	uxth	r3, r3
 801479a:	4618      	mov	r0, r3
 801479c:	f7fb f8fc 	bl	800f998 <lwip_htons>
 80147a0:	4603      	mov	r3, r0
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	f003 0301 	and.w	r3, r3, #1
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d028      	beq.n	80147fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80147ac:	6838      	ldr	r0, [r7, #0]
 80147ae:	f7fe f995 	bl	8012adc <tcp_segs_free>
    next = NULL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	603b      	str	r3, [r7, #0]
 80147b6:	e056      	b.n	8014866 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	899b      	ldrh	r3, [r3, #12]
 80147be:	b29b      	uxth	r3, r3
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fb f8e9 	bl	800f998 <lwip_htons>
 80147c6:	4603      	mov	r3, r0
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	f003 0301 	and.w	r3, r3, #1
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d00d      	beq.n	80147ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	899b      	ldrh	r3, [r3, #12]
 80147d8:	b29c      	uxth	r4, r3
 80147da:	2001      	movs	r0, #1
 80147dc:	f7fb f8dc 	bl	800f998 <lwip_htons>
 80147e0:	4603      	mov	r3, r0
 80147e2:	461a      	mov	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	68db      	ldr	r3, [r3, #12]
 80147e8:	4322      	orrs	r2, r4
 80147ea:	b292      	uxth	r2, r2
 80147ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80147f8:	68f8      	ldr	r0, [r7, #12]
 80147fa:	f7fe f984 	bl	8012b06 <tcp_seg_free>
    while (next &&
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d00e      	beq.n	8014822 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	891b      	ldrh	r3, [r3, #8]
 8014808:	461a      	mov	r2, r3
 801480a:	4b1d      	ldr	r3, [pc, #116]	; (8014880 <tcp_oos_insert_segment+0x10c>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	441a      	add	r2, r3
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	6839      	ldr	r1, [r7, #0]
 8014818:	8909      	ldrh	r1, [r1, #8]
 801481a:	440b      	add	r3, r1
 801481c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801481e:	2b00      	cmp	r3, #0
 8014820:	daca      	bge.n	80147b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d01e      	beq.n	8014866 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	891b      	ldrh	r3, [r3, #8]
 801482c:	461a      	mov	r2, r3
 801482e:	4b14      	ldr	r3, [pc, #80]	; (8014880 <tcp_oos_insert_segment+0x10c>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	441a      	add	r2, r3
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	68db      	ldr	r3, [r3, #12]
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801483c:	2b00      	cmp	r3, #0
 801483e:	dd12      	ble.n	8014866 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	b29a      	uxth	r2, r3
 8014848:	4b0d      	ldr	r3, [pc, #52]	; (8014880 <tcp_oos_insert_segment+0x10c>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	b29b      	uxth	r3, r3
 801484e:	1ad3      	subs	r3, r2, r3
 8014850:	b29a      	uxth	r2, r3
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	685a      	ldr	r2, [r3, #4]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	891b      	ldrh	r3, [r3, #8]
 801485e:	4619      	mov	r1, r3
 8014860:	4610      	mov	r0, r2
 8014862:	f7fc fb05 	bl	8010e70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	683a      	ldr	r2, [r7, #0]
 801486a:	601a      	str	r2, [r3, #0]
}
 801486c:	bf00      	nop
 801486e:	3714      	adds	r7, #20
 8014870:	46bd      	mov	sp, r7
 8014872:	bd90      	pop	{r4, r7, pc}
 8014874:	0801e594 	.word	0x0801e594
 8014878:	0801e854 	.word	0x0801e854
 801487c:	0801e5e0 	.word	0x0801e5e0
 8014880:	2003d114 	.word	0x2003d114

08014884 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014884:	b5b0      	push	{r4, r5, r7, lr}
 8014886:	b086      	sub	sp, #24
 8014888:	af00      	add	r7, sp, #0
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	60b9      	str	r1, [r7, #8]
 801488e:	607a      	str	r2, [r7, #4]
 8014890:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014892:	e03e      	b.n	8014912 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	685b      	ldr	r3, [r3, #4]
 80148a2:	4618      	mov	r0, r3
 80148a4:	f7fc fd2a 	bl	80112fc <pbuf_clen>
 80148a8:	4603      	mov	r3, r0
 80148aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148b2:	8a7a      	ldrh	r2, [r7, #18]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d906      	bls.n	80148c6 <tcp_free_acked_segments+0x42>
 80148b8:	4b2a      	ldr	r3, [pc, #168]	; (8014964 <tcp_free_acked_segments+0xe0>)
 80148ba:	f240 4257 	movw	r2, #1111	; 0x457
 80148be:	492a      	ldr	r1, [pc, #168]	; (8014968 <tcp_free_acked_segments+0xe4>)
 80148c0:	482a      	ldr	r0, [pc, #168]	; (801496c <tcp_free_acked_segments+0xe8>)
 80148c2:	f006 fc49 	bl	801b158 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80148cc:	8a7b      	ldrh	r3, [r7, #18]
 80148ce:	1ad3      	subs	r3, r2, r3
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80148d8:	697b      	ldr	r3, [r7, #20]
 80148da:	891a      	ldrh	r2, [r3, #8]
 80148dc:	4b24      	ldr	r3, [pc, #144]	; (8014970 <tcp_free_acked_segments+0xec>)
 80148de:	881b      	ldrh	r3, [r3, #0]
 80148e0:	4413      	add	r3, r2
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	4b22      	ldr	r3, [pc, #136]	; (8014970 <tcp_free_acked_segments+0xec>)
 80148e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80148e8:	6978      	ldr	r0, [r7, #20]
 80148ea:	f7fe f90c 	bl	8012b06 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00c      	beq.n	8014912 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d109      	bne.n	8014912 <tcp_free_acked_segments+0x8e>
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d106      	bne.n	8014912 <tcp_free_acked_segments+0x8e>
 8014904:	4b17      	ldr	r3, [pc, #92]	; (8014964 <tcp_free_acked_segments+0xe0>)
 8014906:	f240 4261 	movw	r2, #1121	; 0x461
 801490a:	491a      	ldr	r1, [pc, #104]	; (8014974 <tcp_free_acked_segments+0xf0>)
 801490c:	4817      	ldr	r0, [pc, #92]	; (801496c <tcp_free_acked_segments+0xe8>)
 801490e:	f006 fc23 	bl	801b158 <iprintf>
  while (seg_list != NULL &&
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d020      	beq.n	801495a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	4618      	mov	r0, r3
 8014920:	f7fb f84f 	bl	800f9c2 <lwip_htonl>
 8014924:	4604      	mov	r4, r0
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	891b      	ldrh	r3, [r3, #8]
 801492a:	461d      	mov	r5, r3
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	68db      	ldr	r3, [r3, #12]
 8014930:	899b      	ldrh	r3, [r3, #12]
 8014932:	b29b      	uxth	r3, r3
 8014934:	4618      	mov	r0, r3
 8014936:	f7fb f82f 	bl	800f998 <lwip_htons>
 801493a:	4603      	mov	r3, r0
 801493c:	b2db      	uxtb	r3, r3
 801493e:	f003 0303 	and.w	r3, r3, #3
 8014942:	2b00      	cmp	r3, #0
 8014944:	d001      	beq.n	801494a <tcp_free_acked_segments+0xc6>
 8014946:	2301      	movs	r3, #1
 8014948:	e000      	b.n	801494c <tcp_free_acked_segments+0xc8>
 801494a:	2300      	movs	r3, #0
 801494c:	442b      	add	r3, r5
 801494e:	18e2      	adds	r2, r4, r3
 8014950:	4b09      	ldr	r3, [pc, #36]	; (8014978 <tcp_free_acked_segments+0xf4>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014956:	2b00      	cmp	r3, #0
 8014958:	dd9c      	ble.n	8014894 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801495a:	68bb      	ldr	r3, [r7, #8]
}
 801495c:	4618      	mov	r0, r3
 801495e:	3718      	adds	r7, #24
 8014960:	46bd      	mov	sp, r7
 8014962:	bdb0      	pop	{r4, r5, r7, pc}
 8014964:	0801e594 	.word	0x0801e594
 8014968:	0801e87c 	.word	0x0801e87c
 801496c:	0801e5e0 	.word	0x0801e5e0
 8014970:	2003d11c 	.word	0x2003d11c
 8014974:	0801e8a4 	.word	0x0801e8a4
 8014978:	2003d118 	.word	0x2003d118

0801497c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801497c:	b5b0      	push	{r4, r5, r7, lr}
 801497e:	b094      	sub	sp, #80	; 0x50
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014984:	2300      	movs	r3, #0
 8014986:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <tcp_receive+0x20>
 801498e:	4b91      	ldr	r3, [pc, #580]	; (8014bd4 <tcp_receive+0x258>)
 8014990:	f240 427b 	movw	r2, #1147	; 0x47b
 8014994:	4990      	ldr	r1, [pc, #576]	; (8014bd8 <tcp_receive+0x25c>)
 8014996:	4891      	ldr	r0, [pc, #580]	; (8014bdc <tcp_receive+0x260>)
 8014998:	f006 fbde 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	7d1b      	ldrb	r3, [r3, #20]
 80149a0:	2b03      	cmp	r3, #3
 80149a2:	d806      	bhi.n	80149b2 <tcp_receive+0x36>
 80149a4:	4b8b      	ldr	r3, [pc, #556]	; (8014bd4 <tcp_receive+0x258>)
 80149a6:	f240 427c 	movw	r2, #1148	; 0x47c
 80149aa:	498d      	ldr	r1, [pc, #564]	; (8014be0 <tcp_receive+0x264>)
 80149ac:	488b      	ldr	r0, [pc, #556]	; (8014bdc <tcp_receive+0x260>)
 80149ae:	f006 fbd3 	bl	801b158 <iprintf>

  if (flags & TCP_ACK) {
 80149b2:	4b8c      	ldr	r3, [pc, #560]	; (8014be4 <tcp_receive+0x268>)
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	f003 0310 	and.w	r3, r3, #16
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	f000 8264 	beq.w	8014e88 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80149c6:	461a      	mov	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149cc:	4413      	add	r3, r2
 80149ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149d4:	4b84      	ldr	r3, [pc, #528]	; (8014be8 <tcp_receive+0x26c>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	2b00      	cmp	r3, #0
 80149dc:	db1b      	blt.n	8014a16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149e2:	4b81      	ldr	r3, [pc, #516]	; (8014be8 <tcp_receive+0x26c>)
 80149e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d106      	bne.n	80149f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80149ee:	4b7f      	ldr	r3, [pc, #508]	; (8014bec <tcp_receive+0x270>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	1ad3      	subs	r3, r2, r3
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	db0e      	blt.n	8014a16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80149fc:	4b7b      	ldr	r3, [pc, #492]	; (8014bec <tcp_receive+0x270>)
 80149fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d125      	bne.n	8014a50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014a04:	4b7a      	ldr	r3, [pc, #488]	; (8014bf0 <tcp_receive+0x274>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	89db      	ldrh	r3, [r3, #14]
 8014a0a:	b29a      	uxth	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d91c      	bls.n	8014a50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014a16:	4b76      	ldr	r3, [pc, #472]	; (8014bf0 <tcp_receive+0x274>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	89db      	ldrh	r3, [r3, #14]
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d205      	bcs.n	8014a40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014a40:	4b69      	ldr	r3, [pc, #420]	; (8014be8 <tcp_receive+0x26c>)
 8014a42:	681a      	ldr	r2, [r3, #0]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014a48:	4b68      	ldr	r3, [pc, #416]	; (8014bec <tcp_receive+0x270>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014a50:	4b66      	ldr	r3, [pc, #408]	; (8014bec <tcp_receive+0x270>)
 8014a52:	681a      	ldr	r2, [r3, #0]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a58:	1ad3      	subs	r3, r2, r3
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	dc58      	bgt.n	8014b10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014a5e:	4b65      	ldr	r3, [pc, #404]	; (8014bf4 <tcp_receive+0x278>)
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d14b      	bne.n	8014afe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014a70:	4413      	add	r3, r2
 8014a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d142      	bne.n	8014afe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	db3d      	blt.n	8014afe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014a86:	4b59      	ldr	r3, [pc, #356]	; (8014bec <tcp_receive+0x270>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d137      	bne.n	8014afe <tcp_receive+0x182>
              found_dupack = 1;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014a98:	2bff      	cmp	r3, #255	; 0xff
 8014a9a:	d007      	beq.n	8014aac <tcp_receive+0x130>
                ++pcb->dupacks;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	b2da      	uxtb	r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ab2:	2b03      	cmp	r3, #3
 8014ab4:	d91b      	bls.n	8014aee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ac0:	4413      	add	r3, r2
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014aca:	429a      	cmp	r2, r3
 8014acc:	d30a      	bcc.n	8014ae4 <tcp_receive+0x168>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ad8:	4413      	add	r3, r2
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ae2:	e004      	b.n	8014aee <tcp_receive+0x172>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014aea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014af4:	2b02      	cmp	r3, #2
 8014af6:	d902      	bls.n	8014afe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f002 fb45 	bl	8017188 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f040 8161 	bne.w	8014dc8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014b0e:	e15b      	b.n	8014dc8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014b10:	4b36      	ldr	r3, [pc, #216]	; (8014bec <tcp_receive+0x270>)
 8014b12:	681a      	ldr	r2, [r3, #0]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b18:	1ad3      	subs	r3, r2, r3
 8014b1a:	3b01      	subs	r3, #1
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	f2c0 814e 	blt.w	8014dbe <tcp_receive+0x442>
 8014b22:	4b32      	ldr	r3, [pc, #200]	; (8014bec <tcp_receive+0x270>)
 8014b24:	681a      	ldr	r2, [r3, #0]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b2a:	1ad3      	subs	r3, r2, r3
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f300 8146 	bgt.w	8014dbe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	8b5b      	ldrh	r3, [r3, #26]
 8014b36:	f003 0304 	and.w	r3, r3, #4
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d010      	beq.n	8014b60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8b5b      	ldrh	r3, [r3, #26]
 8014b42:	f023 0304 	bic.w	r3, r3, #4
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2200      	movs	r2, #0
 8014b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014b6e:	10db      	asrs	r3, r3, #3
 8014b70:	b21b      	sxth	r3, r3
 8014b72:	b29a      	uxth	r2, r3
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014b7a:	b29b      	uxth	r3, r3
 8014b7c:	4413      	add	r3, r2
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	b21a      	sxth	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014b88:	4b18      	ldr	r3, [pc, #96]	; (8014bec <tcp_receive+0x270>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	1ad3      	subs	r3, r2, r3
 8014b96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014ba0:	4b12      	ldr	r3, [pc, #72]	; (8014bec <tcp_receive+0x270>)
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	2b03      	cmp	r3, #3
 8014bae:	f240 8097 	bls.w	8014ce0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d245      	bcs.n	8014c4e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	8b5b      	ldrh	r3, [r3, #26]
 8014bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d014      	beq.n	8014bf8 <tcp_receive+0x27c>
 8014bce:	2301      	movs	r3, #1
 8014bd0:	e013      	b.n	8014bfa <tcp_receive+0x27e>
 8014bd2:	bf00      	nop
 8014bd4:	0801e594 	.word	0x0801e594
 8014bd8:	0801e8c4 	.word	0x0801e8c4
 8014bdc:	0801e5e0 	.word	0x0801e5e0
 8014be0:	0801e8e0 	.word	0x0801e8e0
 8014be4:	2003d120 	.word	0x2003d120
 8014be8:	2003d114 	.word	0x2003d114
 8014bec:	2003d118 	.word	0x2003d118
 8014bf0:	2003d104 	.word	0x2003d104
 8014bf4:	2003d11e 	.word	0x2003d11e
 8014bf8:	2302      	movs	r3, #2
 8014bfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c08:	fb12 f303 	smulbb	r3, r2, r3
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c10:	4293      	cmp	r3, r2
 8014c12:	bf28      	it	cs
 8014c14:	4613      	movcs	r3, r2
 8014c16:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c20:	4413      	add	r3, r2
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d309      	bcc.n	8014c42 <tcp_receive+0x2c6>
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c36:	4413      	add	r3, r2
 8014c38:	b29a      	uxth	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014c40:	e04e      	b.n	8014ce0 <tcp_receive+0x364>
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014c4c:	e048      	b.n	8014ce0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014c54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014c56:	4413      	add	r3, r2
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d309      	bcc.n	8014c78 <tcp_receive+0x2fc>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014c6c:	4413      	add	r3, r2
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014c76:	e004      	b.n	8014c82 <tcp_receive+0x306>
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014c8e:	429a      	cmp	r2, r3
 8014c90:	d326      	bcc.n	8014ce0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014c9e:	1ad3      	subs	r3, r2, r3
 8014ca0:	b29a      	uxth	r2, r3
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cb2:	4413      	add	r3, r2
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	d30a      	bcc.n	8014cd6 <tcp_receive+0x35a>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cca:	4413      	add	r3, r2
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014cd4:	e004      	b.n	8014ce0 <tcp_receive+0x364>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ce8:	4a98      	ldr	r2, [pc, #608]	; (8014f4c <tcp_receive+0x5d0>)
 8014cea:	6878      	ldr	r0, [r7, #4]
 8014cec:	f7ff fdca 	bl	8014884 <tcp_free_acked_segments>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cfe:	4a94      	ldr	r2, [pc, #592]	; (8014f50 <tcp_receive+0x5d4>)
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7ff fdbf 	bl	8014884 <tcp_free_acked_segments>
 8014d06:	4602      	mov	r2, r0
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d104      	bne.n	8014d1e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d1a:	861a      	strh	r2, [r3, #48]	; 0x30
 8014d1c:	e002      	b.n	8014d24 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2200      	movs	r2, #0
 8014d22:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d103      	bne.n	8014d3a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2200      	movs	r2, #0
 8014d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014d40:	4b84      	ldr	r3, [pc, #528]	; (8014f54 <tcp_receive+0x5d8>)
 8014d42:	881b      	ldrh	r3, [r3, #0]
 8014d44:	4413      	add	r3, r2
 8014d46:	b29a      	uxth	r2, r3
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	8b5b      	ldrh	r3, [r3, #26]
 8014d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d035      	beq.n	8014dc6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d118      	bne.n	8014d94 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00c      	beq.n	8014d84 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7fa fe23 	bl	800f9c2 <lwip_htonl>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	dc20      	bgt.n	8014dc6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	8b5b      	ldrh	r3, [r3, #26]
 8014d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d92:	e018      	b.n	8014dc6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d9c:	68db      	ldr	r3, [r3, #12]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7fa fe0e 	bl	800f9c2 <lwip_htonl>
 8014da6:	4603      	mov	r3, r0
 8014da8:	1ae3      	subs	r3, r4, r3
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	dc0b      	bgt.n	8014dc6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	8b5b      	ldrh	r3, [r3, #26]
 8014db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014dbc:	e003      	b.n	8014dc6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f002 fbce 	bl	8017560 <tcp_send_empty_ack>
 8014dc4:	e000      	b.n	8014dc8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014dc6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d05b      	beq.n	8014e88 <tcp_receive+0x50c>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014dd4:	4b60      	ldr	r3, [pc, #384]	; (8014f58 <tcp_receive+0x5dc>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	da54      	bge.n	8014e88 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014dde:	4b5f      	ldr	r3, [pc, #380]	; (8014f5c <tcp_receive+0x5e0>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014de8:	b29b      	uxth	r3, r3
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014df2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014dfc:	10db      	asrs	r3, r3, #3
 8014dfe:	b21b      	sxth	r3, r3
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014e16:	4413      	add	r3, r2
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	b21a      	sxth	r2, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014e20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	da05      	bge.n	8014e34 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014e2c:	425b      	negs	r3, r3
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014e34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e3e:	109b      	asrs	r3, r3, #2
 8014e40:	b21b      	sxth	r3, r3
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	1ad3      	subs	r3, r2, r3
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014e58:	4413      	add	r3, r2
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	b21a      	sxth	r2, r3
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e68:	10db      	asrs	r3, r3, #3
 8014e6a:	b21b      	sxth	r3, r3
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	4413      	add	r3, r2
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	b21a      	sxth	r2, r3
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014e88:	4b35      	ldr	r3, [pc, #212]	; (8014f60 <tcp_receive+0x5e4>)
 8014e8a:	881b      	ldrh	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	f000 84e2 	beq.w	8015856 <tcp_receive+0xeda>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	7d1b      	ldrb	r3, [r3, #20]
 8014e96:	2b06      	cmp	r3, #6
 8014e98:	f200 84dd 	bhi.w	8015856 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ea0:	4b30      	ldr	r3, [pc, #192]	; (8014f64 <tcp_receive+0x5e8>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	1ad3      	subs	r3, r2, r3
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f2c0 808f 	blt.w	8014fcc <tcp_receive+0x650>
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014eb2:	4b2b      	ldr	r3, [pc, #172]	; (8014f60 <tcp_receive+0x5e4>)
 8014eb4:	881b      	ldrh	r3, [r3, #0]
 8014eb6:	4619      	mov	r1, r3
 8014eb8:	4b2a      	ldr	r3, [pc, #168]	; (8014f64 <tcp_receive+0x5e8>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	440b      	add	r3, r1
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	f300 8082 	bgt.w	8014fcc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014ec8:	4b27      	ldr	r3, [pc, #156]	; (8014f68 <tcp_receive+0x5ec>)
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ed2:	4b24      	ldr	r3, [pc, #144]	; (8014f64 <tcp_receive+0x5e8>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	1ad3      	subs	r3, r2, r3
 8014ed8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014eda:	4b23      	ldr	r3, [pc, #140]	; (8014f68 <tcp_receive+0x5ec>)
 8014edc:	685b      	ldr	r3, [r3, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d106      	bne.n	8014ef0 <tcp_receive+0x574>
 8014ee2:	4b22      	ldr	r3, [pc, #136]	; (8014f6c <tcp_receive+0x5f0>)
 8014ee4:	f240 5294 	movw	r2, #1428	; 0x594
 8014ee8:	4921      	ldr	r1, [pc, #132]	; (8014f70 <tcp_receive+0x5f4>)
 8014eea:	4822      	ldr	r0, [pc, #136]	; (8014f74 <tcp_receive+0x5f8>)
 8014eec:	f006 f934 	bl	801b158 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014ef6:	4293      	cmp	r3, r2
 8014ef8:	d906      	bls.n	8014f08 <tcp_receive+0x58c>
 8014efa:	4b1c      	ldr	r3, [pc, #112]	; (8014f6c <tcp_receive+0x5f0>)
 8014efc:	f240 5295 	movw	r2, #1429	; 0x595
 8014f00:	491d      	ldr	r1, [pc, #116]	; (8014f78 <tcp_receive+0x5fc>)
 8014f02:	481c      	ldr	r0, [pc, #112]	; (8014f74 <tcp_receive+0x5f8>)
 8014f04:	f006 f928 	bl	801b158 <iprintf>
      off = (u16_t)off32;
 8014f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014f0e:	4b16      	ldr	r3, [pc, #88]	; (8014f68 <tcp_receive+0x5ec>)
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	891b      	ldrh	r3, [r3, #8]
 8014f14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f18:	429a      	cmp	r2, r3
 8014f1a:	d906      	bls.n	8014f2a <tcp_receive+0x5ae>
 8014f1c:	4b13      	ldr	r3, [pc, #76]	; (8014f6c <tcp_receive+0x5f0>)
 8014f1e:	f240 5297 	movw	r2, #1431	; 0x597
 8014f22:	4916      	ldr	r1, [pc, #88]	; (8014f7c <tcp_receive+0x600>)
 8014f24:	4813      	ldr	r0, [pc, #76]	; (8014f74 <tcp_receive+0x5f8>)
 8014f26:	f006 f917 	bl	801b158 <iprintf>
      inseg.len -= off;
 8014f2a:	4b0f      	ldr	r3, [pc, #60]	; (8014f68 <tcp_receive+0x5ec>)
 8014f2c:	891a      	ldrh	r2, [r3, #8]
 8014f2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f32:	1ad3      	subs	r3, r2, r3
 8014f34:	b29a      	uxth	r2, r3
 8014f36:	4b0c      	ldr	r3, [pc, #48]	; (8014f68 <tcp_receive+0x5ec>)
 8014f38:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014f3a:	4b0b      	ldr	r3, [pc, #44]	; (8014f68 <tcp_receive+0x5ec>)
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	891a      	ldrh	r2, [r3, #8]
 8014f40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014f44:	1ad3      	subs	r3, r2, r3
 8014f46:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014f48:	e02a      	b.n	8014fa0 <tcp_receive+0x624>
 8014f4a:	bf00      	nop
 8014f4c:	0801e8fc 	.word	0x0801e8fc
 8014f50:	0801e904 	.word	0x0801e904
 8014f54:	2003d11c 	.word	0x2003d11c
 8014f58:	2003d118 	.word	0x2003d118
 8014f5c:	2003d0dc 	.word	0x2003d0dc
 8014f60:	2003d11e 	.word	0x2003d11e
 8014f64:	2003d114 	.word	0x2003d114
 8014f68:	2003d0f4 	.word	0x2003d0f4
 8014f6c:	0801e594 	.word	0x0801e594
 8014f70:	0801e90c 	.word	0x0801e90c
 8014f74:	0801e5e0 	.word	0x0801e5e0
 8014f78:	0801e91c 	.word	0x0801e91c
 8014f7c:	0801e92c 	.word	0x0801e92c
        off -= p->len;
 8014f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f82:	895b      	ldrh	r3, [r3, #10]
 8014f84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f88:	1ad3      	subs	r3, r2, r3
 8014f8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014f92:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f96:	2200      	movs	r2, #0
 8014f98:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fa2:	895b      	ldrh	r3, [r3, #10]
 8014fa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d8e9      	bhi.n	8014f80 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014fac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014fb4:	f7fc f85c 	bl	8011070 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fbc:	4a91      	ldr	r2, [pc, #580]	; (8015204 <tcp_receive+0x888>)
 8014fbe:	6013      	str	r3, [r2, #0]
 8014fc0:	4b91      	ldr	r3, [pc, #580]	; (8015208 <tcp_receive+0x88c>)
 8014fc2:	68db      	ldr	r3, [r3, #12]
 8014fc4:	4a8f      	ldr	r2, [pc, #572]	; (8015204 <tcp_receive+0x888>)
 8014fc6:	6812      	ldr	r2, [r2, #0]
 8014fc8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014fca:	e00d      	b.n	8014fe8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014fcc:	4b8d      	ldr	r3, [pc, #564]	; (8015204 <tcp_receive+0x888>)
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	da06      	bge.n	8014fe8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	8b5b      	ldrh	r3, [r3, #26]
 8014fde:	f043 0302 	orr.w	r3, r3, #2
 8014fe2:	b29a      	uxth	r2, r3
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014fe8:	4b86      	ldr	r3, [pc, #536]	; (8015204 <tcp_receive+0x888>)
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff0:	1ad3      	subs	r3, r2, r3
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	f2c0 842a 	blt.w	801584c <tcp_receive+0xed0>
 8014ff8:	4b82      	ldr	r3, [pc, #520]	; (8015204 <tcp_receive+0x888>)
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015000:	6879      	ldr	r1, [r7, #4]
 8015002:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015004:	440b      	add	r3, r1
 8015006:	1ad3      	subs	r3, r2, r3
 8015008:	3301      	adds	r3, #1
 801500a:	2b00      	cmp	r3, #0
 801500c:	f300 841e 	bgt.w	801584c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015014:	4b7b      	ldr	r3, [pc, #492]	; (8015204 <tcp_receive+0x888>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	429a      	cmp	r2, r3
 801501a:	f040 829a 	bne.w	8015552 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801501e:	4b7a      	ldr	r3, [pc, #488]	; (8015208 <tcp_receive+0x88c>)
 8015020:	891c      	ldrh	r4, [r3, #8]
 8015022:	4b79      	ldr	r3, [pc, #484]	; (8015208 <tcp_receive+0x88c>)
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	899b      	ldrh	r3, [r3, #12]
 8015028:	b29b      	uxth	r3, r3
 801502a:	4618      	mov	r0, r3
 801502c:	f7fa fcb4 	bl	800f998 <lwip_htons>
 8015030:	4603      	mov	r3, r0
 8015032:	b2db      	uxtb	r3, r3
 8015034:	f003 0303 	and.w	r3, r3, #3
 8015038:	2b00      	cmp	r3, #0
 801503a:	d001      	beq.n	8015040 <tcp_receive+0x6c4>
 801503c:	2301      	movs	r3, #1
 801503e:	e000      	b.n	8015042 <tcp_receive+0x6c6>
 8015040:	2300      	movs	r3, #0
 8015042:	4423      	add	r3, r4
 8015044:	b29a      	uxth	r2, r3
 8015046:	4b71      	ldr	r3, [pc, #452]	; (801520c <tcp_receive+0x890>)
 8015048:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801504e:	4b6f      	ldr	r3, [pc, #444]	; (801520c <tcp_receive+0x890>)
 8015050:	881b      	ldrh	r3, [r3, #0]
 8015052:	429a      	cmp	r2, r3
 8015054:	d275      	bcs.n	8015142 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015056:	4b6c      	ldr	r3, [pc, #432]	; (8015208 <tcp_receive+0x88c>)
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	899b      	ldrh	r3, [r3, #12]
 801505c:	b29b      	uxth	r3, r3
 801505e:	4618      	mov	r0, r3
 8015060:	f7fa fc9a 	bl	800f998 <lwip_htons>
 8015064:	4603      	mov	r3, r0
 8015066:	b2db      	uxtb	r3, r3
 8015068:	f003 0301 	and.w	r3, r3, #1
 801506c:	2b00      	cmp	r3, #0
 801506e:	d01f      	beq.n	80150b0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015070:	4b65      	ldr	r3, [pc, #404]	; (8015208 <tcp_receive+0x88c>)
 8015072:	68db      	ldr	r3, [r3, #12]
 8015074:	899b      	ldrh	r3, [r3, #12]
 8015076:	b29b      	uxth	r3, r3
 8015078:	b21b      	sxth	r3, r3
 801507a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801507e:	b21c      	sxth	r4, r3
 8015080:	4b61      	ldr	r3, [pc, #388]	; (8015208 <tcp_receive+0x88c>)
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	899b      	ldrh	r3, [r3, #12]
 8015086:	b29b      	uxth	r3, r3
 8015088:	4618      	mov	r0, r3
 801508a:	f7fa fc85 	bl	800f998 <lwip_htons>
 801508e:	4603      	mov	r3, r0
 8015090:	b2db      	uxtb	r3, r3
 8015092:	b29b      	uxth	r3, r3
 8015094:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015098:	b29b      	uxth	r3, r3
 801509a:	4618      	mov	r0, r3
 801509c:	f7fa fc7c 	bl	800f998 <lwip_htons>
 80150a0:	4603      	mov	r3, r0
 80150a2:	b21b      	sxth	r3, r3
 80150a4:	4323      	orrs	r3, r4
 80150a6:	b21a      	sxth	r2, r3
 80150a8:	4b57      	ldr	r3, [pc, #348]	; (8015208 <tcp_receive+0x88c>)
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	b292      	uxth	r2, r2
 80150ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80150b4:	4b54      	ldr	r3, [pc, #336]	; (8015208 <tcp_receive+0x88c>)
 80150b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80150b8:	4b53      	ldr	r3, [pc, #332]	; (8015208 <tcp_receive+0x88c>)
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	899b      	ldrh	r3, [r3, #12]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7fa fc69 	bl	800f998 <lwip_htons>
 80150c6:	4603      	mov	r3, r0
 80150c8:	b2db      	uxtb	r3, r3
 80150ca:	f003 0302 	and.w	r3, r3, #2
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d005      	beq.n	80150de <tcp_receive+0x762>
            inseg.len -= 1;
 80150d2:	4b4d      	ldr	r3, [pc, #308]	; (8015208 <tcp_receive+0x88c>)
 80150d4:	891b      	ldrh	r3, [r3, #8]
 80150d6:	3b01      	subs	r3, #1
 80150d8:	b29a      	uxth	r2, r3
 80150da:	4b4b      	ldr	r3, [pc, #300]	; (8015208 <tcp_receive+0x88c>)
 80150dc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80150de:	4b4a      	ldr	r3, [pc, #296]	; (8015208 <tcp_receive+0x88c>)
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	4a49      	ldr	r2, [pc, #292]	; (8015208 <tcp_receive+0x88c>)
 80150e4:	8912      	ldrh	r2, [r2, #8]
 80150e6:	4611      	mov	r1, r2
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7fb fec1 	bl	8010e70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80150ee:	4b46      	ldr	r3, [pc, #280]	; (8015208 <tcp_receive+0x88c>)
 80150f0:	891c      	ldrh	r4, [r3, #8]
 80150f2:	4b45      	ldr	r3, [pc, #276]	; (8015208 <tcp_receive+0x88c>)
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	899b      	ldrh	r3, [r3, #12]
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7fa fc4c 	bl	800f998 <lwip_htons>
 8015100:	4603      	mov	r3, r0
 8015102:	b2db      	uxtb	r3, r3
 8015104:	f003 0303 	and.w	r3, r3, #3
 8015108:	2b00      	cmp	r3, #0
 801510a:	d001      	beq.n	8015110 <tcp_receive+0x794>
 801510c:	2301      	movs	r3, #1
 801510e:	e000      	b.n	8015112 <tcp_receive+0x796>
 8015110:	2300      	movs	r3, #0
 8015112:	4423      	add	r3, r4
 8015114:	b29a      	uxth	r2, r3
 8015116:	4b3d      	ldr	r3, [pc, #244]	; (801520c <tcp_receive+0x890>)
 8015118:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801511a:	4b3c      	ldr	r3, [pc, #240]	; (801520c <tcp_receive+0x890>)
 801511c:	881b      	ldrh	r3, [r3, #0]
 801511e:	461a      	mov	r2, r3
 8015120:	4b38      	ldr	r3, [pc, #224]	; (8015204 <tcp_receive+0x888>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	441a      	add	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512a:	6879      	ldr	r1, [r7, #4]
 801512c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801512e:	440b      	add	r3, r1
 8015130:	429a      	cmp	r2, r3
 8015132:	d006      	beq.n	8015142 <tcp_receive+0x7c6>
 8015134:	4b36      	ldr	r3, [pc, #216]	; (8015210 <tcp_receive+0x894>)
 8015136:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801513a:	4936      	ldr	r1, [pc, #216]	; (8015214 <tcp_receive+0x898>)
 801513c:	4836      	ldr	r0, [pc, #216]	; (8015218 <tcp_receive+0x89c>)
 801513e:	f006 f80b 	bl	801b158 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015146:	2b00      	cmp	r3, #0
 8015148:	f000 80e7 	beq.w	801531a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801514c:	4b2e      	ldr	r3, [pc, #184]	; (8015208 <tcp_receive+0x88c>)
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	899b      	ldrh	r3, [r3, #12]
 8015152:	b29b      	uxth	r3, r3
 8015154:	4618      	mov	r0, r3
 8015156:	f7fa fc1f 	bl	800f998 <lwip_htons>
 801515a:	4603      	mov	r3, r0
 801515c:	b2db      	uxtb	r3, r3
 801515e:	f003 0301 	and.w	r3, r3, #1
 8015162:	2b00      	cmp	r3, #0
 8015164:	d010      	beq.n	8015188 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015166:	e00a      	b.n	801517e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801516c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015178:	68f8      	ldr	r0, [r7, #12]
 801517a:	f7fd fcc4 	bl	8012b06 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015182:	2b00      	cmp	r3, #0
 8015184:	d1f0      	bne.n	8015168 <tcp_receive+0x7ec>
 8015186:	e0c8      	b.n	801531a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801518c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801518e:	e052      	b.n	8015236 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	899b      	ldrh	r3, [r3, #12]
 8015196:	b29b      	uxth	r3, r3
 8015198:	4618      	mov	r0, r3
 801519a:	f7fa fbfd 	bl	800f998 <lwip_htons>
 801519e:	4603      	mov	r3, r0
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	f003 0301 	and.w	r3, r3, #1
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d03d      	beq.n	8015226 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80151aa:	4b17      	ldr	r3, [pc, #92]	; (8015208 <tcp_receive+0x88c>)
 80151ac:	68db      	ldr	r3, [r3, #12]
 80151ae:	899b      	ldrh	r3, [r3, #12]
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fa fbf0 	bl	800f998 <lwip_htons>
 80151b8:	4603      	mov	r3, r0
 80151ba:	b2db      	uxtb	r3, r3
 80151bc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d130      	bne.n	8015226 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80151c4:	4b10      	ldr	r3, [pc, #64]	; (8015208 <tcp_receive+0x88c>)
 80151c6:	68db      	ldr	r3, [r3, #12]
 80151c8:	899b      	ldrh	r3, [r3, #12]
 80151ca:	b29c      	uxth	r4, r3
 80151cc:	2001      	movs	r0, #1
 80151ce:	f7fa fbe3 	bl	800f998 <lwip_htons>
 80151d2:	4603      	mov	r3, r0
 80151d4:	461a      	mov	r2, r3
 80151d6:	4b0c      	ldr	r3, [pc, #48]	; (8015208 <tcp_receive+0x88c>)
 80151d8:	68db      	ldr	r3, [r3, #12]
 80151da:	4322      	orrs	r2, r4
 80151dc:	b292      	uxth	r2, r2
 80151de:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80151e0:	4b09      	ldr	r3, [pc, #36]	; (8015208 <tcp_receive+0x88c>)
 80151e2:	891c      	ldrh	r4, [r3, #8]
 80151e4:	4b08      	ldr	r3, [pc, #32]	; (8015208 <tcp_receive+0x88c>)
 80151e6:	68db      	ldr	r3, [r3, #12]
 80151e8:	899b      	ldrh	r3, [r3, #12]
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7fa fbd3 	bl	800f998 <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	f003 0303 	and.w	r3, r3, #3
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00e      	beq.n	801521c <tcp_receive+0x8a0>
 80151fe:	2301      	movs	r3, #1
 8015200:	e00d      	b.n	801521e <tcp_receive+0x8a2>
 8015202:	bf00      	nop
 8015204:	2003d114 	.word	0x2003d114
 8015208:	2003d0f4 	.word	0x2003d0f4
 801520c:	2003d11e 	.word	0x2003d11e
 8015210:	0801e594 	.word	0x0801e594
 8015214:	0801e93c 	.word	0x0801e93c
 8015218:	0801e5e0 	.word	0x0801e5e0
 801521c:	2300      	movs	r3, #0
 801521e:	4423      	add	r3, r4
 8015220:	b29a      	uxth	r2, r3
 8015222:	4b98      	ldr	r3, [pc, #608]	; (8015484 <tcp_receive+0xb08>)
 8015224:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015228:	613b      	str	r3, [r7, #16]
              next = next->next;
 801522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015230:	6938      	ldr	r0, [r7, #16]
 8015232:	f7fd fc68 	bl	8012b06 <tcp_seg_free>
            while (next &&
 8015236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015238:	2b00      	cmp	r3, #0
 801523a:	d00e      	beq.n	801525a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801523c:	4b91      	ldr	r3, [pc, #580]	; (8015484 <tcp_receive+0xb08>)
 801523e:	881b      	ldrh	r3, [r3, #0]
 8015240:	461a      	mov	r2, r3
 8015242:	4b91      	ldr	r3, [pc, #580]	; (8015488 <tcp_receive+0xb0c>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	441a      	add	r2, r3
 8015248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015250:	8909      	ldrh	r1, [r1, #8]
 8015252:	440b      	add	r3, r1
 8015254:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015256:	2b00      	cmp	r3, #0
 8015258:	da9a      	bge.n	8015190 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801525c:	2b00      	cmp	r3, #0
 801525e:	d059      	beq.n	8015314 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015260:	4b88      	ldr	r3, [pc, #544]	; (8015484 <tcp_receive+0xb08>)
 8015262:	881b      	ldrh	r3, [r3, #0]
 8015264:	461a      	mov	r2, r3
 8015266:	4b88      	ldr	r3, [pc, #544]	; (8015488 <tcp_receive+0xb0c>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	441a      	add	r2, r3
 801526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801526e:	68db      	ldr	r3, [r3, #12]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015274:	2b00      	cmp	r3, #0
 8015276:	dd4d      	ble.n	8015314 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	b29a      	uxth	r2, r3
 8015280:	4b81      	ldr	r3, [pc, #516]	; (8015488 <tcp_receive+0xb0c>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	b29b      	uxth	r3, r3
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	b29a      	uxth	r2, r3
 801528a:	4b80      	ldr	r3, [pc, #512]	; (801548c <tcp_receive+0xb10>)
 801528c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801528e:	4b7f      	ldr	r3, [pc, #508]	; (801548c <tcp_receive+0xb10>)
 8015290:	68db      	ldr	r3, [r3, #12]
 8015292:	899b      	ldrh	r3, [r3, #12]
 8015294:	b29b      	uxth	r3, r3
 8015296:	4618      	mov	r0, r3
 8015298:	f7fa fb7e 	bl	800f998 <lwip_htons>
 801529c:	4603      	mov	r3, r0
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	f003 0302 	and.w	r3, r3, #2
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d005      	beq.n	80152b4 <tcp_receive+0x938>
                inseg.len -= 1;
 80152a8:	4b78      	ldr	r3, [pc, #480]	; (801548c <tcp_receive+0xb10>)
 80152aa:	891b      	ldrh	r3, [r3, #8]
 80152ac:	3b01      	subs	r3, #1
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	4b76      	ldr	r3, [pc, #472]	; (801548c <tcp_receive+0xb10>)
 80152b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80152b4:	4b75      	ldr	r3, [pc, #468]	; (801548c <tcp_receive+0xb10>)
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	4a74      	ldr	r2, [pc, #464]	; (801548c <tcp_receive+0xb10>)
 80152ba:	8912      	ldrh	r2, [r2, #8]
 80152bc:	4611      	mov	r1, r2
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fb fdd6 	bl	8010e70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80152c4:	4b71      	ldr	r3, [pc, #452]	; (801548c <tcp_receive+0xb10>)
 80152c6:	891c      	ldrh	r4, [r3, #8]
 80152c8:	4b70      	ldr	r3, [pc, #448]	; (801548c <tcp_receive+0xb10>)
 80152ca:	68db      	ldr	r3, [r3, #12]
 80152cc:	899b      	ldrh	r3, [r3, #12]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7fa fb61 	bl	800f998 <lwip_htons>
 80152d6:	4603      	mov	r3, r0
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	f003 0303 	and.w	r3, r3, #3
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d001      	beq.n	80152e6 <tcp_receive+0x96a>
 80152e2:	2301      	movs	r3, #1
 80152e4:	e000      	b.n	80152e8 <tcp_receive+0x96c>
 80152e6:	2300      	movs	r3, #0
 80152e8:	4423      	add	r3, r4
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	4b65      	ldr	r3, [pc, #404]	; (8015484 <tcp_receive+0xb08>)
 80152ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80152f0:	4b64      	ldr	r3, [pc, #400]	; (8015484 <tcp_receive+0xb08>)
 80152f2:	881b      	ldrh	r3, [r3, #0]
 80152f4:	461a      	mov	r2, r3
 80152f6:	4b64      	ldr	r3, [pc, #400]	; (8015488 <tcp_receive+0xb0c>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	441a      	add	r2, r3
 80152fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	429a      	cmp	r2, r3
 8015304:	d006      	beq.n	8015314 <tcp_receive+0x998>
 8015306:	4b62      	ldr	r3, [pc, #392]	; (8015490 <tcp_receive+0xb14>)
 8015308:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801530c:	4961      	ldr	r1, [pc, #388]	; (8015494 <tcp_receive+0xb18>)
 801530e:	4862      	ldr	r0, [pc, #392]	; (8015498 <tcp_receive+0xb1c>)
 8015310:	f005 ff22 	bl	801b158 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015318:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801531a:	4b5a      	ldr	r3, [pc, #360]	; (8015484 <tcp_receive+0xb08>)
 801531c:	881b      	ldrh	r3, [r3, #0]
 801531e:	461a      	mov	r2, r3
 8015320:	4b59      	ldr	r3, [pc, #356]	; (8015488 <tcp_receive+0xb0c>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	441a      	add	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801532e:	4b55      	ldr	r3, [pc, #340]	; (8015484 <tcp_receive+0xb08>)
 8015330:	881b      	ldrh	r3, [r3, #0]
 8015332:	429a      	cmp	r2, r3
 8015334:	d206      	bcs.n	8015344 <tcp_receive+0x9c8>
 8015336:	4b56      	ldr	r3, [pc, #344]	; (8015490 <tcp_receive+0xb14>)
 8015338:	f240 6207 	movw	r2, #1543	; 0x607
 801533c:	4957      	ldr	r1, [pc, #348]	; (801549c <tcp_receive+0xb20>)
 801533e:	4856      	ldr	r0, [pc, #344]	; (8015498 <tcp_receive+0xb1c>)
 8015340:	f005 ff0a 	bl	801b158 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015348:	4b4e      	ldr	r3, [pc, #312]	; (8015484 <tcp_receive+0xb08>)
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	1ad3      	subs	r3, r2, r3
 801534e:	b29a      	uxth	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f7fc feb1 	bl	80120bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801535a:	4b4c      	ldr	r3, [pc, #304]	; (801548c <tcp_receive+0xb10>)
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	891b      	ldrh	r3, [r3, #8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d006      	beq.n	8015372 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015364:	4b49      	ldr	r3, [pc, #292]	; (801548c <tcp_receive+0xb10>)
 8015366:	685b      	ldr	r3, [r3, #4]
 8015368:	4a4d      	ldr	r2, [pc, #308]	; (80154a0 <tcp_receive+0xb24>)
 801536a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801536c:	4b47      	ldr	r3, [pc, #284]	; (801548c <tcp_receive+0xb10>)
 801536e:	2200      	movs	r2, #0
 8015370:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015372:	4b46      	ldr	r3, [pc, #280]	; (801548c <tcp_receive+0xb10>)
 8015374:	68db      	ldr	r3, [r3, #12]
 8015376:	899b      	ldrh	r3, [r3, #12]
 8015378:	b29b      	uxth	r3, r3
 801537a:	4618      	mov	r0, r3
 801537c:	f7fa fb0c 	bl	800f998 <lwip_htons>
 8015380:	4603      	mov	r3, r0
 8015382:	b2db      	uxtb	r3, r3
 8015384:	f003 0301 	and.w	r3, r3, #1
 8015388:	2b00      	cmp	r3, #0
 801538a:	f000 80b8 	beq.w	80154fe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801538e:	4b45      	ldr	r3, [pc, #276]	; (80154a4 <tcp_receive+0xb28>)
 8015390:	781b      	ldrb	r3, [r3, #0]
 8015392:	f043 0320 	orr.w	r3, r3, #32
 8015396:	b2da      	uxtb	r2, r3
 8015398:	4b42      	ldr	r3, [pc, #264]	; (80154a4 <tcp_receive+0xb28>)
 801539a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801539c:	e0af      	b.n	80154fe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153a8:	68db      	ldr	r3, [r3, #12]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	4a36      	ldr	r2, [pc, #216]	; (8015488 <tcp_receive+0xb0c>)
 80153ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	891b      	ldrh	r3, [r3, #8]
 80153b4:	461c      	mov	r4, r3
 80153b6:	68bb      	ldr	r3, [r7, #8]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	899b      	ldrh	r3, [r3, #12]
 80153bc:	b29b      	uxth	r3, r3
 80153be:	4618      	mov	r0, r3
 80153c0:	f7fa faea 	bl	800f998 <lwip_htons>
 80153c4:	4603      	mov	r3, r0
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	f003 0303 	and.w	r3, r3, #3
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d001      	beq.n	80153d4 <tcp_receive+0xa58>
 80153d0:	2301      	movs	r3, #1
 80153d2:	e000      	b.n	80153d6 <tcp_receive+0xa5a>
 80153d4:	2300      	movs	r3, #0
 80153d6:	191a      	adds	r2, r3, r4
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153dc:	441a      	add	r2, r3
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80153e6:	461c      	mov	r4, r3
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	891b      	ldrh	r3, [r3, #8]
 80153ec:	461d      	mov	r5, r3
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	899b      	ldrh	r3, [r3, #12]
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7fa face 	bl	800f998 <lwip_htons>
 80153fc:	4603      	mov	r3, r0
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	f003 0303 	and.w	r3, r3, #3
 8015404:	2b00      	cmp	r3, #0
 8015406:	d001      	beq.n	801540c <tcp_receive+0xa90>
 8015408:	2301      	movs	r3, #1
 801540a:	e000      	b.n	801540e <tcp_receive+0xa92>
 801540c:	2300      	movs	r3, #0
 801540e:	442b      	add	r3, r5
 8015410:	429c      	cmp	r4, r3
 8015412:	d206      	bcs.n	8015422 <tcp_receive+0xaa6>
 8015414:	4b1e      	ldr	r3, [pc, #120]	; (8015490 <tcp_receive+0xb14>)
 8015416:	f240 622b 	movw	r2, #1579	; 0x62b
 801541a:	4923      	ldr	r1, [pc, #140]	; (80154a8 <tcp_receive+0xb2c>)
 801541c:	481e      	ldr	r0, [pc, #120]	; (8015498 <tcp_receive+0xb1c>)
 801541e:	f005 fe9b 	bl	801b158 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	891b      	ldrh	r3, [r3, #8]
 8015426:	461c      	mov	r4, r3
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	899b      	ldrh	r3, [r3, #12]
 801542e:	b29b      	uxth	r3, r3
 8015430:	4618      	mov	r0, r3
 8015432:	f7fa fab1 	bl	800f998 <lwip_htons>
 8015436:	4603      	mov	r3, r0
 8015438:	b2db      	uxtb	r3, r3
 801543a:	f003 0303 	and.w	r3, r3, #3
 801543e:	2b00      	cmp	r3, #0
 8015440:	d001      	beq.n	8015446 <tcp_receive+0xaca>
 8015442:	2301      	movs	r3, #1
 8015444:	e000      	b.n	8015448 <tcp_receive+0xacc>
 8015446:	2300      	movs	r3, #0
 8015448:	1919      	adds	r1, r3, r4
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801544e:	b28b      	uxth	r3, r1
 8015450:	1ad3      	subs	r3, r2, r3
 8015452:	b29a      	uxth	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7fc fe2f 	bl	80120bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	891b      	ldrh	r3, [r3, #8]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d028      	beq.n	80154ba <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015468:	4b0d      	ldr	r3, [pc, #52]	; (80154a0 <tcp_receive+0xb24>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d01d      	beq.n	80154ac <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015470:	4b0b      	ldr	r3, [pc, #44]	; (80154a0 <tcp_receive+0xb24>)
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	4619      	mov	r1, r3
 801547a:	4610      	mov	r0, r2
 801547c:	f7fb ff7e 	bl	801137c <pbuf_cat>
 8015480:	e018      	b.n	80154b4 <tcp_receive+0xb38>
 8015482:	bf00      	nop
 8015484:	2003d11e 	.word	0x2003d11e
 8015488:	2003d114 	.word	0x2003d114
 801548c:	2003d0f4 	.word	0x2003d0f4
 8015490:	0801e594 	.word	0x0801e594
 8015494:	0801e974 	.word	0x0801e974
 8015498:	0801e5e0 	.word	0x0801e5e0
 801549c:	0801e9b0 	.word	0x0801e9b0
 80154a0:	2003d124 	.word	0x2003d124
 80154a4:	2003d121 	.word	0x2003d121
 80154a8:	0801e9d0 	.word	0x0801e9d0
            } else {
              recv_data = cseg->p;
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	4a70      	ldr	r2, [pc, #448]	; (8015674 <tcp_receive+0xcf8>)
 80154b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	2200      	movs	r2, #0
 80154b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	68db      	ldr	r3, [r3, #12]
 80154be:	899b      	ldrh	r3, [r3, #12]
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7fa fa68 	bl	800f998 <lwip_htons>
 80154c8:	4603      	mov	r3, r0
 80154ca:	b2db      	uxtb	r3, r3
 80154cc:	f003 0301 	and.w	r3, r3, #1
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d00d      	beq.n	80154f0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80154d4:	4b68      	ldr	r3, [pc, #416]	; (8015678 <tcp_receive+0xcfc>)
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	f043 0320 	orr.w	r3, r3, #32
 80154dc:	b2da      	uxtb	r2, r3
 80154de:	4b66      	ldr	r3, [pc, #408]	; (8015678 <tcp_receive+0xcfc>)
 80154e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	7d1b      	ldrb	r3, [r3, #20]
 80154e6:	2b04      	cmp	r3, #4
 80154e8:	d102      	bne.n	80154f0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2207      	movs	r2, #7
 80154ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80154f8:	68b8      	ldr	r0, [r7, #8]
 80154fa:	f7fd fb04 	bl	8012b06 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015502:	2b00      	cmp	r3, #0
 8015504:	d008      	beq.n	8015518 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801550a:	68db      	ldr	r3, [r3, #12]
 801550c:	685a      	ldr	r2, [r3, #4]
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015512:	429a      	cmp	r2, r3
 8015514:	f43f af43 	beq.w	801539e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	8b5b      	ldrh	r3, [r3, #26]
 801551c:	f003 0301 	and.w	r3, r3, #1
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00e      	beq.n	8015542 <tcp_receive+0xbc6>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	8b5b      	ldrh	r3, [r3, #26]
 8015528:	f023 0301 	bic.w	r3, r3, #1
 801552c:	b29a      	uxth	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	835a      	strh	r2, [r3, #26]
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	8b5b      	ldrh	r3, [r3, #26]
 8015536:	f043 0302 	orr.w	r3, r3, #2
 801553a:	b29a      	uxth	r2, r3
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015540:	e188      	b.n	8015854 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	8b5b      	ldrh	r3, [r3, #26]
 8015546:	f043 0301 	orr.w	r3, r3, #1
 801554a:	b29a      	uxth	r2, r3
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015550:	e180      	b.n	8015854 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015556:	2b00      	cmp	r3, #0
 8015558:	d106      	bne.n	8015568 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801555a:	4848      	ldr	r0, [pc, #288]	; (801567c <tcp_receive+0xd00>)
 801555c:	f7fd faec 	bl	8012b38 <tcp_seg_copy>
 8015560:	4602      	mov	r2, r0
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	675a      	str	r2, [r3, #116]	; 0x74
 8015566:	e16d      	b.n	8015844 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015568:	2300      	movs	r3, #0
 801556a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015570:	63bb      	str	r3, [r7, #56]	; 0x38
 8015572:	e157      	b.n	8015824 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	685a      	ldr	r2, [r3, #4]
 801557a:	4b41      	ldr	r3, [pc, #260]	; (8015680 <tcp_receive+0xd04>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	429a      	cmp	r2, r3
 8015580:	d11d      	bne.n	80155be <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015582:	4b3e      	ldr	r3, [pc, #248]	; (801567c <tcp_receive+0xd00>)
 8015584:	891a      	ldrh	r2, [r3, #8]
 8015586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015588:	891b      	ldrh	r3, [r3, #8]
 801558a:	429a      	cmp	r2, r3
 801558c:	f240 814f 	bls.w	801582e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015590:	483a      	ldr	r0, [pc, #232]	; (801567c <tcp_receive+0xd00>)
 8015592:	f7fd fad1 	bl	8012b38 <tcp_seg_copy>
 8015596:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	2b00      	cmp	r3, #0
 801559c:	f000 8149 	beq.w	8015832 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80155a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d003      	beq.n	80155ae <tcp_receive+0xc32>
                    prev->next = cseg;
 80155a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155a8:	697a      	ldr	r2, [r7, #20]
 80155aa:	601a      	str	r2, [r3, #0]
 80155ac:	e002      	b.n	80155b4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	697a      	ldr	r2, [r7, #20]
 80155b2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80155b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80155b6:	6978      	ldr	r0, [r7, #20]
 80155b8:	f7ff f8dc 	bl	8014774 <tcp_oos_insert_segment>
                }
                break;
 80155bc:	e139      	b.n	8015832 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80155be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d117      	bne.n	80155f4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80155c4:	4b2e      	ldr	r3, [pc, #184]	; (8015680 <tcp_receive+0xd04>)
 80155c6:	681a      	ldr	r2, [r3, #0]
 80155c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	1ad3      	subs	r3, r2, r3
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	da57      	bge.n	8015684 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80155d4:	4829      	ldr	r0, [pc, #164]	; (801567c <tcp_receive+0xd00>)
 80155d6:	f7fd faaf 	bl	8012b38 <tcp_seg_copy>
 80155da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	f000 8129 	beq.w	8015836 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	69ba      	ldr	r2, [r7, #24]
 80155e8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80155ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80155ec:	69b8      	ldr	r0, [r7, #24]
 80155ee:	f7ff f8c1 	bl	8014774 <tcp_oos_insert_segment>
                  }
                  break;
 80155f2:	e120      	b.n	8015836 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80155f4:	4b22      	ldr	r3, [pc, #136]	; (8015680 <tcp_receive+0xd04>)
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155fa:	68db      	ldr	r3, [r3, #12]
 80155fc:	685b      	ldr	r3, [r3, #4]
 80155fe:	1ad3      	subs	r3, r2, r3
 8015600:	3b01      	subs	r3, #1
 8015602:	2b00      	cmp	r3, #0
 8015604:	db3e      	blt.n	8015684 <tcp_receive+0xd08>
 8015606:	4b1e      	ldr	r3, [pc, #120]	; (8015680 <tcp_receive+0xd04>)
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	1ad3      	subs	r3, r2, r3
 8015612:	3301      	adds	r3, #1
 8015614:	2b00      	cmp	r3, #0
 8015616:	dc35      	bgt.n	8015684 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015618:	4818      	ldr	r0, [pc, #96]	; (801567c <tcp_receive+0xd00>)
 801561a:	f7fd fa8d 	bl	8012b38 <tcp_seg_copy>
 801561e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	2b00      	cmp	r3, #0
 8015624:	f000 8109 	beq.w	801583a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015630:	8912      	ldrh	r2, [r2, #8]
 8015632:	441a      	add	r2, r3
 8015634:	4b12      	ldr	r3, [pc, #72]	; (8015680 <tcp_receive+0xd04>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	1ad3      	subs	r3, r2, r3
 801563a:	2b00      	cmp	r3, #0
 801563c:	dd12      	ble.n	8015664 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801563e:	4b10      	ldr	r3, [pc, #64]	; (8015680 <tcp_receive+0xd04>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	b29a      	uxth	r2, r3
 8015644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	685b      	ldr	r3, [r3, #4]
 801564a:	b29b      	uxth	r3, r3
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	b29a      	uxth	r2, r3
 8015650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015652:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015656:	685a      	ldr	r2, [r3, #4]
 8015658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801565a:	891b      	ldrh	r3, [r3, #8]
 801565c:	4619      	mov	r1, r3
 801565e:	4610      	mov	r0, r2
 8015660:	f7fb fc06 	bl	8010e70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015666:	69fa      	ldr	r2, [r7, #28]
 8015668:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801566a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801566c:	69f8      	ldr	r0, [r7, #28]
 801566e:	f7ff f881 	bl	8014774 <tcp_oos_insert_segment>
                  }
                  break;
 8015672:	e0e2      	b.n	801583a <tcp_receive+0xebe>
 8015674:	2003d124 	.word	0x2003d124
 8015678:	2003d121 	.word	0x2003d121
 801567c:	2003d0f4 	.word	0x2003d0f4
 8015680:	2003d114 	.word	0x2003d114
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015686:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	2b00      	cmp	r3, #0
 801568e:	f040 80c6 	bne.w	801581e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015692:	4b80      	ldr	r3, [pc, #512]	; (8015894 <tcp_receive+0xf18>)
 8015694:	681a      	ldr	r2, [r3, #0]
 8015696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	685b      	ldr	r3, [r3, #4]
 801569c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801569e:	2b00      	cmp	r3, #0
 80156a0:	f340 80bd 	ble.w	801581e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80156a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a6:	68db      	ldr	r3, [r3, #12]
 80156a8:	899b      	ldrh	r3, [r3, #12]
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7fa f973 	bl	800f998 <lwip_htons>
 80156b2:	4603      	mov	r3, r0
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	f003 0301 	and.w	r3, r3, #1
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f040 80bf 	bne.w	801583e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80156c0:	4875      	ldr	r0, [pc, #468]	; (8015898 <tcp_receive+0xf1c>)
 80156c2:	f7fd fa39 	bl	8012b38 <tcp_seg_copy>
 80156c6:	4602      	mov	r2, r0
 80156c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80156cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	f000 80b6 	beq.w	8015842 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80156d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156de:	8912      	ldrh	r2, [r2, #8]
 80156e0:	441a      	add	r2, r3
 80156e2:	4b6c      	ldr	r3, [pc, #432]	; (8015894 <tcp_receive+0xf18>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	1ad3      	subs	r3, r2, r3
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	dd12      	ble.n	8015712 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80156ec:	4b69      	ldr	r3, [pc, #420]	; (8015894 <tcp_receive+0xf18>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	b29a      	uxth	r2, r3
 80156f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	1ad3      	subs	r3, r2, r3
 80156fc:	b29a      	uxth	r2, r3
 80156fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015700:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015704:	685a      	ldr	r2, [r3, #4]
 8015706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015708:	891b      	ldrh	r3, [r3, #8]
 801570a:	4619      	mov	r1, r3
 801570c:	4610      	mov	r0, r2
 801570e:	f7fb fbaf 	bl	8010e70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015712:	4b62      	ldr	r3, [pc, #392]	; (801589c <tcp_receive+0xf20>)
 8015714:	881b      	ldrh	r3, [r3, #0]
 8015716:	461a      	mov	r2, r3
 8015718:	4b5e      	ldr	r3, [pc, #376]	; (8015894 <tcp_receive+0xf18>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	441a      	add	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015722:	6879      	ldr	r1, [r7, #4]
 8015724:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015726:	440b      	add	r3, r1
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	2b00      	cmp	r3, #0
 801572c:	f340 8089 	ble.w	8015842 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	68db      	ldr	r3, [r3, #12]
 8015736:	899b      	ldrh	r3, [r3, #12]
 8015738:	b29b      	uxth	r3, r3
 801573a:	4618      	mov	r0, r3
 801573c:	f7fa f92c 	bl	800f998 <lwip_htons>
 8015740:	4603      	mov	r3, r0
 8015742:	b2db      	uxtb	r3, r3
 8015744:	f003 0301 	and.w	r3, r3, #1
 8015748:	2b00      	cmp	r3, #0
 801574a:	d022      	beq.n	8015792 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	68db      	ldr	r3, [r3, #12]
 8015752:	899b      	ldrh	r3, [r3, #12]
 8015754:	b29b      	uxth	r3, r3
 8015756:	b21b      	sxth	r3, r3
 8015758:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801575c:	b21c      	sxth	r4, r3
 801575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	68db      	ldr	r3, [r3, #12]
 8015764:	899b      	ldrh	r3, [r3, #12]
 8015766:	b29b      	uxth	r3, r3
 8015768:	4618      	mov	r0, r3
 801576a:	f7fa f915 	bl	800f998 <lwip_htons>
 801576e:	4603      	mov	r3, r0
 8015770:	b2db      	uxtb	r3, r3
 8015772:	b29b      	uxth	r3, r3
 8015774:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015778:	b29b      	uxth	r3, r3
 801577a:	4618      	mov	r0, r3
 801577c:	f7fa f90c 	bl	800f998 <lwip_htons>
 8015780:	4603      	mov	r3, r0
 8015782:	b21b      	sxth	r3, r3
 8015784:	4323      	orrs	r3, r4
 8015786:	b21a      	sxth	r2, r3
 8015788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	b292      	uxth	r2, r2
 8015790:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015796:	b29a      	uxth	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801579c:	4413      	add	r3, r2
 801579e:	b299      	uxth	r1, r3
 80157a0:	4b3c      	ldr	r3, [pc, #240]	; (8015894 <tcp_receive+0xf18>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	b29a      	uxth	r2, r3
 80157a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	1a8a      	subs	r2, r1, r2
 80157ac:	b292      	uxth	r2, r2
 80157ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80157b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	685a      	ldr	r2, [r3, #4]
 80157b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	891b      	ldrh	r3, [r3, #8]
 80157bc:	4619      	mov	r1, r3
 80157be:	4610      	mov	r0, r2
 80157c0:	f7fb fb56 	bl	8010e70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80157c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	891c      	ldrh	r4, [r3, #8]
 80157ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	68db      	ldr	r3, [r3, #12]
 80157d0:	899b      	ldrh	r3, [r3, #12]
 80157d2:	b29b      	uxth	r3, r3
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7fa f8df 	bl	800f998 <lwip_htons>
 80157da:	4603      	mov	r3, r0
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	f003 0303 	and.w	r3, r3, #3
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d001      	beq.n	80157ea <tcp_receive+0xe6e>
 80157e6:	2301      	movs	r3, #1
 80157e8:	e000      	b.n	80157ec <tcp_receive+0xe70>
 80157ea:	2300      	movs	r3, #0
 80157ec:	4423      	add	r3, r4
 80157ee:	b29a      	uxth	r2, r3
 80157f0:	4b2a      	ldr	r3, [pc, #168]	; (801589c <tcp_receive+0xf20>)
 80157f2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80157f4:	4b29      	ldr	r3, [pc, #164]	; (801589c <tcp_receive+0xf20>)
 80157f6:	881b      	ldrh	r3, [r3, #0]
 80157f8:	461a      	mov	r2, r3
 80157fa:	4b26      	ldr	r3, [pc, #152]	; (8015894 <tcp_receive+0xf18>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	441a      	add	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015804:	6879      	ldr	r1, [r7, #4]
 8015806:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015808:	440b      	add	r3, r1
 801580a:	429a      	cmp	r2, r3
 801580c:	d019      	beq.n	8015842 <tcp_receive+0xec6>
 801580e:	4b24      	ldr	r3, [pc, #144]	; (80158a0 <tcp_receive+0xf24>)
 8015810:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015814:	4923      	ldr	r1, [pc, #140]	; (80158a4 <tcp_receive+0xf28>)
 8015816:	4824      	ldr	r0, [pc, #144]	; (80158a8 <tcp_receive+0xf2c>)
 8015818:	f005 fc9e 	bl	801b158 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801581c:	e011      	b.n	8015842 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	63bb      	str	r3, [r7, #56]	; 0x38
 8015824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015826:	2b00      	cmp	r3, #0
 8015828:	f47f aea4 	bne.w	8015574 <tcp_receive+0xbf8>
 801582c:	e00a      	b.n	8015844 <tcp_receive+0xec8>
                break;
 801582e:	bf00      	nop
 8015830:	e008      	b.n	8015844 <tcp_receive+0xec8>
                break;
 8015832:	bf00      	nop
 8015834:	e006      	b.n	8015844 <tcp_receive+0xec8>
                  break;
 8015836:	bf00      	nop
 8015838:	e004      	b.n	8015844 <tcp_receive+0xec8>
                  break;
 801583a:	bf00      	nop
 801583c:	e002      	b.n	8015844 <tcp_receive+0xec8>
                  break;
 801583e:	bf00      	nop
 8015840:	e000      	b.n	8015844 <tcp_receive+0xec8>
                break;
 8015842:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f001 fe8b 	bl	8017560 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801584a:	e003      	b.n	8015854 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f001 fe87 	bl	8017560 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015852:	e01a      	b.n	801588a <tcp_receive+0xf0e>
 8015854:	e019      	b.n	801588a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015856:	4b0f      	ldr	r3, [pc, #60]	; (8015894 <tcp_receive+0xf18>)
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801585e:	1ad3      	subs	r3, r2, r3
 8015860:	2b00      	cmp	r3, #0
 8015862:	db0a      	blt.n	801587a <tcp_receive+0xefe>
 8015864:	4b0b      	ldr	r3, [pc, #44]	; (8015894 <tcp_receive+0xf18>)
 8015866:	681a      	ldr	r2, [r3, #0]
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586c:	6879      	ldr	r1, [r7, #4]
 801586e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015870:	440b      	add	r3, r1
 8015872:	1ad3      	subs	r3, r2, r3
 8015874:	3301      	adds	r3, #1
 8015876:	2b00      	cmp	r3, #0
 8015878:	dd07      	ble.n	801588a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	8b5b      	ldrh	r3, [r3, #26]
 801587e:	f043 0302 	orr.w	r3, r3, #2
 8015882:	b29a      	uxth	r2, r3
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015888:	e7ff      	b.n	801588a <tcp_receive+0xf0e>
 801588a:	bf00      	nop
 801588c:	3750      	adds	r7, #80	; 0x50
 801588e:	46bd      	mov	sp, r7
 8015890:	bdb0      	pop	{r4, r5, r7, pc}
 8015892:	bf00      	nop
 8015894:	2003d114 	.word	0x2003d114
 8015898:	2003d0f4 	.word	0x2003d0f4
 801589c:	2003d11e 	.word	0x2003d11e
 80158a0:	0801e594 	.word	0x0801e594
 80158a4:	0801e93c 	.word	0x0801e93c
 80158a8:	0801e5e0 	.word	0x0801e5e0

080158ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80158ac:	b480      	push	{r7}
 80158ae:	b083      	sub	sp, #12
 80158b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80158b2:	4b15      	ldr	r3, [pc, #84]	; (8015908 <tcp_get_next_optbyte+0x5c>)
 80158b4:	881b      	ldrh	r3, [r3, #0]
 80158b6:	1c5a      	adds	r2, r3, #1
 80158b8:	b291      	uxth	r1, r2
 80158ba:	4a13      	ldr	r2, [pc, #76]	; (8015908 <tcp_get_next_optbyte+0x5c>)
 80158bc:	8011      	strh	r1, [r2, #0]
 80158be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80158c0:	4b12      	ldr	r3, [pc, #72]	; (801590c <tcp_get_next_optbyte+0x60>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d004      	beq.n	80158d2 <tcp_get_next_optbyte+0x26>
 80158c8:	4b11      	ldr	r3, [pc, #68]	; (8015910 <tcp_get_next_optbyte+0x64>)
 80158ca:	881b      	ldrh	r3, [r3, #0]
 80158cc:	88fa      	ldrh	r2, [r7, #6]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d208      	bcs.n	80158e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80158d2:	4b10      	ldr	r3, [pc, #64]	; (8015914 <tcp_get_next_optbyte+0x68>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	3314      	adds	r3, #20
 80158d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80158da:	88fb      	ldrh	r3, [r7, #6]
 80158dc:	683a      	ldr	r2, [r7, #0]
 80158de:	4413      	add	r3, r2
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	e00b      	b.n	80158fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80158e4:	88fb      	ldrh	r3, [r7, #6]
 80158e6:	b2da      	uxtb	r2, r3
 80158e8:	4b09      	ldr	r3, [pc, #36]	; (8015910 <tcp_get_next_optbyte+0x64>)
 80158ea:	881b      	ldrh	r3, [r3, #0]
 80158ec:	b2db      	uxtb	r3, r3
 80158ee:	1ad3      	subs	r3, r2, r3
 80158f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80158f2:	4b06      	ldr	r3, [pc, #24]	; (801590c <tcp_get_next_optbyte+0x60>)
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	797b      	ldrb	r3, [r7, #5]
 80158f8:	4413      	add	r3, r2
 80158fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	370c      	adds	r7, #12
 8015900:	46bd      	mov	sp, r7
 8015902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015906:	4770      	bx	lr
 8015908:	2003d110 	.word	0x2003d110
 801590c:	2003d10c 	.word	0x2003d10c
 8015910:	2003d10a 	.word	0x2003d10a
 8015914:	2003d104 	.word	0x2003d104

08015918 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d106      	bne.n	8015934 <tcp_parseopt+0x1c>
 8015926:	4b32      	ldr	r3, [pc, #200]	; (80159f0 <tcp_parseopt+0xd8>)
 8015928:	f240 727d 	movw	r2, #1917	; 0x77d
 801592c:	4931      	ldr	r1, [pc, #196]	; (80159f4 <tcp_parseopt+0xdc>)
 801592e:	4832      	ldr	r0, [pc, #200]	; (80159f8 <tcp_parseopt+0xe0>)
 8015930:	f005 fc12 	bl	801b158 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015934:	4b31      	ldr	r3, [pc, #196]	; (80159fc <tcp_parseopt+0xe4>)
 8015936:	881b      	ldrh	r3, [r3, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d055      	beq.n	80159e8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801593c:	4b30      	ldr	r3, [pc, #192]	; (8015a00 <tcp_parseopt+0xe8>)
 801593e:	2200      	movs	r2, #0
 8015940:	801a      	strh	r2, [r3, #0]
 8015942:	e045      	b.n	80159d0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015944:	f7ff ffb2 	bl	80158ac <tcp_get_next_optbyte>
 8015948:	4603      	mov	r3, r0
 801594a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801594c:	7bfb      	ldrb	r3, [r7, #15]
 801594e:	2b02      	cmp	r3, #2
 8015950:	d006      	beq.n	8015960 <tcp_parseopt+0x48>
 8015952:	2b02      	cmp	r3, #2
 8015954:	dc2b      	bgt.n	80159ae <tcp_parseopt+0x96>
 8015956:	2b00      	cmp	r3, #0
 8015958:	d041      	beq.n	80159de <tcp_parseopt+0xc6>
 801595a:	2b01      	cmp	r3, #1
 801595c:	d127      	bne.n	80159ae <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801595e:	e037      	b.n	80159d0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015960:	f7ff ffa4 	bl	80158ac <tcp_get_next_optbyte>
 8015964:	4603      	mov	r3, r0
 8015966:	2b04      	cmp	r3, #4
 8015968:	d13b      	bne.n	80159e2 <tcp_parseopt+0xca>
 801596a:	4b25      	ldr	r3, [pc, #148]	; (8015a00 <tcp_parseopt+0xe8>)
 801596c:	881b      	ldrh	r3, [r3, #0]
 801596e:	3301      	adds	r3, #1
 8015970:	4a22      	ldr	r2, [pc, #136]	; (80159fc <tcp_parseopt+0xe4>)
 8015972:	8812      	ldrh	r2, [r2, #0]
 8015974:	4293      	cmp	r3, r2
 8015976:	da34      	bge.n	80159e2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015978:	f7ff ff98 	bl	80158ac <tcp_get_next_optbyte>
 801597c:	4603      	mov	r3, r0
 801597e:	b29b      	uxth	r3, r3
 8015980:	021b      	lsls	r3, r3, #8
 8015982:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015984:	f7ff ff92 	bl	80158ac <tcp_get_next_optbyte>
 8015988:	4603      	mov	r3, r0
 801598a:	b29a      	uxth	r2, r3
 801598c:	89bb      	ldrh	r3, [r7, #12]
 801598e:	4313      	orrs	r3, r2
 8015990:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015992:	89bb      	ldrh	r3, [r7, #12]
 8015994:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015998:	d804      	bhi.n	80159a4 <tcp_parseopt+0x8c>
 801599a:	89bb      	ldrh	r3, [r7, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d001      	beq.n	80159a4 <tcp_parseopt+0x8c>
 80159a0:	89ba      	ldrh	r2, [r7, #12]
 80159a2:	e001      	b.n	80159a8 <tcp_parseopt+0x90>
 80159a4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80159ac:	e010      	b.n	80159d0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80159ae:	f7ff ff7d 	bl	80158ac <tcp_get_next_optbyte>
 80159b2:	4603      	mov	r3, r0
 80159b4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80159b6:	7afb      	ldrb	r3, [r7, #11]
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d914      	bls.n	80159e6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80159bc:	7afb      	ldrb	r3, [r7, #11]
 80159be:	b29a      	uxth	r2, r3
 80159c0:	4b0f      	ldr	r3, [pc, #60]	; (8015a00 <tcp_parseopt+0xe8>)
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	4413      	add	r3, r2
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	3b02      	subs	r3, #2
 80159ca:	b29a      	uxth	r2, r3
 80159cc:	4b0c      	ldr	r3, [pc, #48]	; (8015a00 <tcp_parseopt+0xe8>)
 80159ce:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80159d0:	4b0b      	ldr	r3, [pc, #44]	; (8015a00 <tcp_parseopt+0xe8>)
 80159d2:	881a      	ldrh	r2, [r3, #0]
 80159d4:	4b09      	ldr	r3, [pc, #36]	; (80159fc <tcp_parseopt+0xe4>)
 80159d6:	881b      	ldrh	r3, [r3, #0]
 80159d8:	429a      	cmp	r2, r3
 80159da:	d3b3      	bcc.n	8015944 <tcp_parseopt+0x2c>
 80159dc:	e004      	b.n	80159e8 <tcp_parseopt+0xd0>
          return;
 80159de:	bf00      	nop
 80159e0:	e002      	b.n	80159e8 <tcp_parseopt+0xd0>
            return;
 80159e2:	bf00      	nop
 80159e4:	e000      	b.n	80159e8 <tcp_parseopt+0xd0>
            return;
 80159e6:	bf00      	nop
      }
    }
  }
}
 80159e8:	3710      	adds	r7, #16
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	0801e594 	.word	0x0801e594
 80159f4:	0801e9f8 	.word	0x0801e9f8
 80159f8:	0801e5e0 	.word	0x0801e5e0
 80159fc:	2003d108 	.word	0x2003d108
 8015a00:	2003d110 	.word	0x2003d110

08015a04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015a04:	b480      	push	{r7}
 8015a06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015a08:	4b05      	ldr	r3, [pc, #20]	; (8015a20 <tcp_trigger_input_pcb_close+0x1c>)
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	f043 0310 	orr.w	r3, r3, #16
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	4b03      	ldr	r3, [pc, #12]	; (8015a20 <tcp_trigger_input_pcb_close+0x1c>)
 8015a14:	701a      	strb	r2, [r3, #0]
}
 8015a16:	bf00      	nop
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr
 8015a20:	2003d121 	.word	0x2003d121

08015a24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d00a      	beq.n	8015a4c <tcp_route+0x28>
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	7a1b      	ldrb	r3, [r3, #8]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d006      	beq.n	8015a4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	7a1b      	ldrb	r3, [r3, #8]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fb f80c 	bl	8010a60 <netif_get_by_index>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	e003      	b.n	8015a54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f003 fe35 	bl	80196bc <ip4_route>
 8015a52:	4603      	mov	r3, r0
  }
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	3710      	adds	r7, #16
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015a5c:	b590      	push	{r4, r7, lr}
 8015a5e:	b087      	sub	sp, #28
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	60f8      	str	r0, [r7, #12]
 8015a64:	60b9      	str	r1, [r7, #8]
 8015a66:	603b      	str	r3, [r7, #0]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d105      	bne.n	8015a7e <tcp_create_segment+0x22>
 8015a72:	4b44      	ldr	r3, [pc, #272]	; (8015b84 <tcp_create_segment+0x128>)
 8015a74:	22a3      	movs	r2, #163	; 0xa3
 8015a76:	4944      	ldr	r1, [pc, #272]	; (8015b88 <tcp_create_segment+0x12c>)
 8015a78:	4844      	ldr	r0, [pc, #272]	; (8015b8c <tcp_create_segment+0x130>)
 8015a7a:	f005 fb6d 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015a7e:	68bb      	ldr	r3, [r7, #8]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d105      	bne.n	8015a90 <tcp_create_segment+0x34>
 8015a84:	4b3f      	ldr	r3, [pc, #252]	; (8015b84 <tcp_create_segment+0x128>)
 8015a86:	22a4      	movs	r2, #164	; 0xa4
 8015a88:	4941      	ldr	r1, [pc, #260]	; (8015b90 <tcp_create_segment+0x134>)
 8015a8a:	4840      	ldr	r0, [pc, #256]	; (8015b8c <tcp_create_segment+0x130>)
 8015a8c:	f005 fb64 	bl	801b158 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015a90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	f003 0304 	and.w	r3, r3, #4
 8015a9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015a9e:	2003      	movs	r0, #3
 8015aa0:	f7fa fc52 	bl	8010348 <memp_malloc>
 8015aa4:	6138      	str	r0, [r7, #16]
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d104      	bne.n	8015ab6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015aac:	68b8      	ldr	r0, [r7, #8]
 8015aae:	f7fb fb97 	bl	80111e0 <pbuf_free>
    return NULL;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	e061      	b.n	8015b7a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015abc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	68ba      	ldr	r2, [r7, #8]
 8015ac8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	891a      	ldrh	r2, [r3, #8]
 8015ace:	7dfb      	ldrb	r3, [r7, #23]
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d205      	bcs.n	8015ae2 <tcp_create_segment+0x86>
 8015ad6:	4b2b      	ldr	r3, [pc, #172]	; (8015b84 <tcp_create_segment+0x128>)
 8015ad8:	22b0      	movs	r2, #176	; 0xb0
 8015ada:	492e      	ldr	r1, [pc, #184]	; (8015b94 <tcp_create_segment+0x138>)
 8015adc:	482b      	ldr	r0, [pc, #172]	; (8015b8c <tcp_create_segment+0x130>)
 8015ade:	f005 fb3b 	bl	801b158 <iprintf>
  seg->len = p->tot_len - optlen;
 8015ae2:	68bb      	ldr	r3, [r7, #8]
 8015ae4:	891a      	ldrh	r2, [r3, #8]
 8015ae6:	7dfb      	ldrb	r3, [r7, #23]
 8015ae8:	b29b      	uxth	r3, r3
 8015aea:	1ad3      	subs	r3, r2, r3
 8015aec:	b29a      	uxth	r2, r3
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015af2:	2114      	movs	r1, #20
 8015af4:	68b8      	ldr	r0, [r7, #8]
 8015af6:	f7fb faab 	bl	8011050 <pbuf_add_header>
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d004      	beq.n	8015b0a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015b00:	6938      	ldr	r0, [r7, #16]
 8015b02:	f7fd f800 	bl	8012b06 <tcp_seg_free>
    return NULL;
 8015b06:	2300      	movs	r3, #0
 8015b08:	e037      	b.n	8015b7a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	685a      	ldr	r2, [r3, #4]
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	8ada      	ldrh	r2, [r3, #22]
 8015b18:	693b      	ldr	r3, [r7, #16]
 8015b1a:	68dc      	ldr	r4, [r3, #12]
 8015b1c:	4610      	mov	r0, r2
 8015b1e:	f7f9 ff3b 	bl	800f998 <lwip_htons>
 8015b22:	4603      	mov	r3, r0
 8015b24:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	8b1a      	ldrh	r2, [r3, #24]
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	68dc      	ldr	r4, [r3, #12]
 8015b2e:	4610      	mov	r0, r2
 8015b30:	f7f9 ff32 	bl	800f998 <lwip_htons>
 8015b34:	4603      	mov	r3, r0
 8015b36:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	68dc      	ldr	r4, [r3, #12]
 8015b3c:	6838      	ldr	r0, [r7, #0]
 8015b3e:	f7f9 ff40 	bl	800f9c2 <lwip_htonl>
 8015b42:	4603      	mov	r3, r0
 8015b44:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015b46:	7dfb      	ldrb	r3, [r7, #23]
 8015b48:	089b      	lsrs	r3, r3, #2
 8015b4a:	b2db      	uxtb	r3, r3
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	3305      	adds	r3, #5
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	031b      	lsls	r3, r3, #12
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	79fb      	ldrb	r3, [r7, #7]
 8015b58:	b29b      	uxth	r3, r3
 8015b5a:	4313      	orrs	r3, r2
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	68dc      	ldr	r4, [r3, #12]
 8015b62:	4610      	mov	r0, r2
 8015b64:	f7f9 ff18 	bl	800f998 <lwip_htons>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015b6c:	693b      	ldr	r3, [r7, #16]
 8015b6e:	68db      	ldr	r3, [r3, #12]
 8015b70:	2200      	movs	r2, #0
 8015b72:	749a      	strb	r2, [r3, #18]
 8015b74:	2200      	movs	r2, #0
 8015b76:	74da      	strb	r2, [r3, #19]
  return seg;
 8015b78:	693b      	ldr	r3, [r7, #16]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	371c      	adds	r7, #28
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd90      	pop	{r4, r7, pc}
 8015b82:	bf00      	nop
 8015b84:	0801ea14 	.word	0x0801ea14
 8015b88:	0801ea48 	.word	0x0801ea48
 8015b8c:	0801ea68 	.word	0x0801ea68
 8015b90:	0801ea90 	.word	0x0801ea90
 8015b94:	0801eab4 	.word	0x0801eab4

08015b98 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b086      	sub	sp, #24
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	607b      	str	r3, [r7, #4]
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	73fb      	strb	r3, [r7, #15]
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	81bb      	strh	r3, [r7, #12]
 8015ba8:	4613      	mov	r3, r2
 8015baa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015bac:	89bb      	ldrh	r3, [r7, #12]
 8015bae:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d105      	bne.n	8015bc2 <tcp_pbuf_prealloc+0x2a>
 8015bb6:	4b30      	ldr	r3, [pc, #192]	; (8015c78 <tcp_pbuf_prealloc+0xe0>)
 8015bb8:	22e8      	movs	r2, #232	; 0xe8
 8015bba:	4930      	ldr	r1, [pc, #192]	; (8015c7c <tcp_pbuf_prealloc+0xe4>)
 8015bbc:	4830      	ldr	r0, [pc, #192]	; (8015c80 <tcp_pbuf_prealloc+0xe8>)
 8015bbe:	f005 facb 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015bc2:	6a3b      	ldr	r3, [r7, #32]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d105      	bne.n	8015bd4 <tcp_pbuf_prealloc+0x3c>
 8015bc8:	4b2b      	ldr	r3, [pc, #172]	; (8015c78 <tcp_pbuf_prealloc+0xe0>)
 8015bca:	22e9      	movs	r2, #233	; 0xe9
 8015bcc:	492d      	ldr	r1, [pc, #180]	; (8015c84 <tcp_pbuf_prealloc+0xec>)
 8015bce:	482c      	ldr	r0, [pc, #176]	; (8015c80 <tcp_pbuf_prealloc+0xe8>)
 8015bd0:	f005 fac2 	bl	801b158 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015bd4:	89ba      	ldrh	r2, [r7, #12]
 8015bd6:	897b      	ldrh	r3, [r7, #10]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d221      	bcs.n	8015c20 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015bdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015be0:	f003 0302 	and.w	r3, r3, #2
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d111      	bne.n	8015c0c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015be8:	6a3b      	ldr	r3, [r7, #32]
 8015bea:	8b5b      	ldrh	r3, [r3, #26]
 8015bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d115      	bne.n	8015c20 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015bf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d007      	beq.n	8015c0c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015bfc:	6a3b      	ldr	r3, [r7, #32]
 8015bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d103      	bne.n	8015c0c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015c04:	6a3b      	ldr	r3, [r7, #32]
 8015c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d009      	beq.n	8015c20 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015c0c:	89bb      	ldrh	r3, [r7, #12]
 8015c0e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015c12:	f023 0203 	bic.w	r2, r3, #3
 8015c16:	897b      	ldrh	r3, [r7, #10]
 8015c18:	4293      	cmp	r3, r2
 8015c1a:	bf28      	it	cs
 8015c1c:	4613      	movcs	r3, r2
 8015c1e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015c20:	8af9      	ldrh	r1, [r7, #22]
 8015c22:	7bfb      	ldrb	r3, [r7, #15]
 8015c24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7fa ffc3 	bl	8010bb4 <pbuf_alloc>
 8015c2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d101      	bne.n	8015c3a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015c36:	2300      	movs	r3, #0
 8015c38:	e019      	b.n	8015c6e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015c3a:	693b      	ldr	r3, [r7, #16]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d006      	beq.n	8015c50 <tcp_pbuf_prealloc+0xb8>
 8015c42:	4b0d      	ldr	r3, [pc, #52]	; (8015c78 <tcp_pbuf_prealloc+0xe0>)
 8015c44:	f240 120b 	movw	r2, #267	; 0x10b
 8015c48:	490f      	ldr	r1, [pc, #60]	; (8015c88 <tcp_pbuf_prealloc+0xf0>)
 8015c4a:	480d      	ldr	r0, [pc, #52]	; (8015c80 <tcp_pbuf_prealloc+0xe8>)
 8015c4c:	f005 fa84 	bl	801b158 <iprintf>
  *oversize = p->len - length;
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	895a      	ldrh	r2, [r3, #10]
 8015c54:	89bb      	ldrh	r3, [r7, #12]
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	89ba      	ldrh	r2, [r7, #12]
 8015c62:	811a      	strh	r2, [r3, #8]
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	891a      	ldrh	r2, [r3, #8]
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	815a      	strh	r2, [r3, #10]
  return p;
 8015c6c:	693b      	ldr	r3, [r7, #16]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3718      	adds	r7, #24
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	0801ea14 	.word	0x0801ea14
 8015c7c:	0801eacc 	.word	0x0801eacc
 8015c80:	0801ea68 	.word	0x0801ea68
 8015c84:	0801eaf0 	.word	0x0801eaf0
 8015c88:	0801eb10 	.word	0x0801eb10

08015c8c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
 8015c94:	460b      	mov	r3, r1
 8015c96:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d106      	bne.n	8015cac <tcp_write_checks+0x20>
 8015c9e:	4b33      	ldr	r3, [pc, #204]	; (8015d6c <tcp_write_checks+0xe0>)
 8015ca0:	f240 1233 	movw	r2, #307	; 0x133
 8015ca4:	4932      	ldr	r1, [pc, #200]	; (8015d70 <tcp_write_checks+0xe4>)
 8015ca6:	4833      	ldr	r0, [pc, #204]	; (8015d74 <tcp_write_checks+0xe8>)
 8015ca8:	f005 fa56 	bl	801b158 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	7d1b      	ldrb	r3, [r3, #20]
 8015cb0:	2b04      	cmp	r3, #4
 8015cb2:	d00e      	beq.n	8015cd2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015cb8:	2b07      	cmp	r3, #7
 8015cba:	d00a      	beq.n	8015cd2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015cc0:	2b02      	cmp	r3, #2
 8015cc2:	d006      	beq.n	8015cd2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015cc8:	2b03      	cmp	r3, #3
 8015cca:	d002      	beq.n	8015cd2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015ccc:	f06f 030a 	mvn.w	r3, #10
 8015cd0:	e048      	b.n	8015d64 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015cd2:	887b      	ldrh	r3, [r7, #2]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d101      	bne.n	8015cdc <tcp_write_checks+0x50>
    return ERR_OK;
 8015cd8:	2300      	movs	r3, #0
 8015cda:	e043      	b.n	8015d64 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015ce2:	887a      	ldrh	r2, [r7, #2]
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d909      	bls.n	8015cfc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	8b5b      	ldrh	r3, [r3, #26]
 8015cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cfa:	e033      	b.n	8015d64 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d02:	2b08      	cmp	r3, #8
 8015d04:	d909      	bls.n	8015d1a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	8b5b      	ldrh	r3, [r3, #26]
 8015d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d0e:	b29a      	uxth	r2, r3
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015d14:	f04f 33ff 	mov.w	r3, #4294967295
 8015d18:	e024      	b.n	8015d64 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d00f      	beq.n	8015d44 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d11a      	bne.n	8015d62 <tcp_write_checks+0xd6>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d116      	bne.n	8015d62 <tcp_write_checks+0xd6>
 8015d34:	4b0d      	ldr	r3, [pc, #52]	; (8015d6c <tcp_write_checks+0xe0>)
 8015d36:	f240 1255 	movw	r2, #341	; 0x155
 8015d3a:	490f      	ldr	r1, [pc, #60]	; (8015d78 <tcp_write_checks+0xec>)
 8015d3c:	480d      	ldr	r0, [pc, #52]	; (8015d74 <tcp_write_checks+0xe8>)
 8015d3e:	f005 fa0b 	bl	801b158 <iprintf>
 8015d42:	e00e      	b.n	8015d62 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d103      	bne.n	8015d54 <tcp_write_checks+0xc8>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d006      	beq.n	8015d62 <tcp_write_checks+0xd6>
 8015d54:	4b05      	ldr	r3, [pc, #20]	; (8015d6c <tcp_write_checks+0xe0>)
 8015d56:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015d5a:	4908      	ldr	r1, [pc, #32]	; (8015d7c <tcp_write_checks+0xf0>)
 8015d5c:	4805      	ldr	r0, [pc, #20]	; (8015d74 <tcp_write_checks+0xe8>)
 8015d5e:	f005 f9fb 	bl	801b158 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015d62:	2300      	movs	r3, #0
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	0801ea14 	.word	0x0801ea14
 8015d70:	0801eb24 	.word	0x0801eb24
 8015d74:	0801ea68 	.word	0x0801ea68
 8015d78:	0801eb44 	.word	0x0801eb44
 8015d7c:	0801eb80 	.word	0x0801eb80

08015d80 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015d80:	b590      	push	{r4, r7, lr}
 8015d82:	b09b      	sub	sp, #108	; 0x6c
 8015d84:	af04      	add	r7, sp, #16
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	4611      	mov	r1, r2
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	460b      	mov	r3, r1
 8015d90:	80fb      	strh	r3, [r7, #6]
 8015d92:	4613      	mov	r3, r2
 8015d94:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015d96:	2300      	movs	r3, #0
 8015d98:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	653b      	str	r3, [r7, #80]	; 0x50
 8015d9e:	2300      	movs	r3, #0
 8015da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015da2:	2300      	movs	r3, #0
 8015da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8015da6:	2300      	movs	r3, #0
 8015da8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015daa:	2300      	movs	r3, #0
 8015dac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015db0:	2300      	movs	r3, #0
 8015db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015db6:	2300      	movs	r3, #0
 8015db8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d109      	bne.n	8015ddc <tcp_write+0x5c>
 8015dc8:	4ba4      	ldr	r3, [pc, #656]	; (801605c <tcp_write+0x2dc>)
 8015dca:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015dce:	49a4      	ldr	r1, [pc, #656]	; (8016060 <tcp_write+0x2e0>)
 8015dd0:	48a4      	ldr	r0, [pc, #656]	; (8016064 <tcp_write+0x2e4>)
 8015dd2:	f005 f9c1 	bl	801b158 <iprintf>
 8015dd6:	f06f 030f 	mvn.w	r3, #15
 8015dda:	e32a      	b.n	8016432 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015de2:	085b      	lsrs	r3, r3, #1
 8015de4:	b29a      	uxth	r2, r3
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dea:	4293      	cmp	r3, r2
 8015dec:	bf28      	it	cs
 8015dee:	4613      	movcs	r3, r2
 8015df0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d102      	bne.n	8015dfe <tcp_write+0x7e>
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dfc:	e000      	b.n	8015e00 <tcp_write+0x80>
 8015dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e00:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d109      	bne.n	8015e1c <tcp_write+0x9c>
 8015e08:	4b94      	ldr	r3, [pc, #592]	; (801605c <tcp_write+0x2dc>)
 8015e0a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015e0e:	4996      	ldr	r1, [pc, #600]	; (8016068 <tcp_write+0x2e8>)
 8015e10:	4894      	ldr	r0, [pc, #592]	; (8016064 <tcp_write+0x2e4>)
 8015e12:	f005 f9a1 	bl	801b158 <iprintf>
 8015e16:	f06f 030f 	mvn.w	r3, #15
 8015e1a:	e30a      	b.n	8016432 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015e1c:	88fb      	ldrh	r3, [r7, #6]
 8015e1e:	4619      	mov	r1, r3
 8015e20:	68f8      	ldr	r0, [r7, #12]
 8015e22:	f7ff ff33 	bl	8015c8c <tcp_write_checks>
 8015e26:	4603      	mov	r3, r0
 8015e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015e2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d002      	beq.n	8015e3a <tcp_write+0xba>
    return err;
 8015e34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015e38:	e2fb      	b.n	8016432 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e44:	2300      	movs	r3, #0
 8015e46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 80f6 	beq.w	8016040 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e58:	653b      	str	r3, [r7, #80]	; 0x50
 8015e5a:	e002      	b.n	8015e62 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1f8      	bne.n	8015e5c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e6c:	7a9b      	ldrb	r3, [r3, #10]
 8015e6e:	009b      	lsls	r3, r3, #2
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	f003 0304 	and.w	r3, r3, #4
 8015e76:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015e78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e7c:	891b      	ldrh	r3, [r3, #8]
 8015e7e:	4619      	mov	r1, r3
 8015e80:	8c3b      	ldrh	r3, [r7, #32]
 8015e82:	440b      	add	r3, r1
 8015e84:	429a      	cmp	r2, r3
 8015e86:	da06      	bge.n	8015e96 <tcp_write+0x116>
 8015e88:	4b74      	ldr	r3, [pc, #464]	; (801605c <tcp_write+0x2dc>)
 8015e8a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015e8e:	4977      	ldr	r1, [pc, #476]	; (801606c <tcp_write+0x2ec>)
 8015e90:	4874      	ldr	r0, [pc, #464]	; (8016064 <tcp_write+0x2e4>)
 8015e92:	f005 f961 	bl	801b158 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e98:	891a      	ldrh	r2, [r3, #8]
 8015e9a:	8c3b      	ldrh	r3, [r7, #32]
 8015e9c:	4413      	add	r3, r2
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ea2:	1ad3      	subs	r3, r2, r3
 8015ea4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015eac:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015eae:	8a7b      	ldrh	r3, [r7, #18]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d026      	beq.n	8015f02 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015eb4:	8a7b      	ldrh	r3, [r7, #18]
 8015eb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015eb8:	429a      	cmp	r2, r3
 8015eba:	d206      	bcs.n	8015eca <tcp_write+0x14a>
 8015ebc:	4b67      	ldr	r3, [pc, #412]	; (801605c <tcp_write+0x2dc>)
 8015ebe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015ec2:	496b      	ldr	r1, [pc, #428]	; (8016070 <tcp_write+0x2f0>)
 8015ec4:	4867      	ldr	r0, [pc, #412]	; (8016064 <tcp_write+0x2e4>)
 8015ec6:	f005 f947 	bl	801b158 <iprintf>
      seg = last_unsent;
 8015eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015ece:	8a7b      	ldrh	r3, [r7, #18]
 8015ed0:	88fa      	ldrh	r2, [r7, #6]
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	bf28      	it	cs
 8015ed6:	4613      	movcs	r3, r2
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015edc:	4293      	cmp	r3, r2
 8015ede:	bf28      	it	cs
 8015ee0:	4613      	movcs	r3, r2
 8015ee2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015ee4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015eea:	4413      	add	r3, r2
 8015eec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015ef0:	8a7a      	ldrh	r2, [r7, #18]
 8015ef2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015ef4:	1ad3      	subs	r3, r2, r3
 8015ef6:	b29b      	uxth	r3, r3
 8015ef8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015efa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015efc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015f02:	8a7b      	ldrh	r3, [r7, #18]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d00b      	beq.n	8015f20 <tcp_write+0x1a0>
 8015f08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f0c:	88fb      	ldrh	r3, [r7, #6]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d006      	beq.n	8015f20 <tcp_write+0x1a0>
 8015f12:	4b52      	ldr	r3, [pc, #328]	; (801605c <tcp_write+0x2dc>)
 8015f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015f18:	4956      	ldr	r1, [pc, #344]	; (8016074 <tcp_write+0x2f4>)
 8015f1a:	4852      	ldr	r0, [pc, #328]	; (8016064 <tcp_write+0x2e4>)
 8015f1c:	f005 f91c 	bl	801b158 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015f20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f24:	88fb      	ldrh	r3, [r7, #6]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	f080 8167 	bcs.w	80161fa <tcp_write+0x47a>
 8015f2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	f000 8163 	beq.w	80161fa <tcp_write+0x47a>
 8015f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f36:	891b      	ldrh	r3, [r3, #8]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	f000 815e 	beq.w	80161fa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015f3e:	88fa      	ldrh	r2, [r7, #6]
 8015f40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f44:	1ad2      	subs	r2, r2, r3
 8015f46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	bfa8      	it	ge
 8015f4c:	4613      	movge	r3, r2
 8015f4e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f52:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015f54:	797b      	ldrb	r3, [r7, #5]
 8015f56:	f003 0301 	and.w	r3, r3, #1
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d027      	beq.n	8015fae <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015f5e:	f107 0012 	add.w	r0, r7, #18
 8015f62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f64:	8bf9      	ldrh	r1, [r7, #30]
 8015f66:	2301      	movs	r3, #1
 8015f68:	9302      	str	r3, [sp, #8]
 8015f6a:	797b      	ldrb	r3, [r7, #5]
 8015f6c:	9301      	str	r3, [sp, #4]
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	9300      	str	r3, [sp, #0]
 8015f72:	4603      	mov	r3, r0
 8015f74:	2000      	movs	r0, #0
 8015f76:	f7ff fe0f 	bl	8015b98 <tcp_pbuf_prealloc>
 8015f7a:	6578      	str	r0, [r7, #84]	; 0x54
 8015f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	f000 8225 	beq.w	80163ce <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f86:	6858      	ldr	r0, [r3, #4]
 8015f88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015f8c:	68ba      	ldr	r2, [r7, #8]
 8015f8e:	4413      	add	r3, r2
 8015f90:	8bfa      	ldrh	r2, [r7, #30]
 8015f92:	4619      	mov	r1, r3
 8015f94:	f005 fb01 	bl	801b59a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015f98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015f9a:	f7fb f9af 	bl	80112fc <pbuf_clen>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015fa6:	4413      	add	r3, r2
 8015fa8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015fac:	e041      	b.n	8016032 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8015fb4:	e002      	b.n	8015fbc <tcp_write+0x23c>
 8015fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	637b      	str	r3, [r7, #52]	; 0x34
 8015fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1f8      	bne.n	8015fb6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fc6:	7b1b      	ldrb	r3, [r3, #12]
 8015fc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d115      	bne.n	8015ffc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015fd6:	8952      	ldrh	r2, [r2, #10]
 8015fd8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015fda:	68ba      	ldr	r2, [r7, #8]
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d10d      	bne.n	8015ffc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015fe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d006      	beq.n	8015ff6 <tcp_write+0x276>
 8015fe8:	4b1c      	ldr	r3, [pc, #112]	; (801605c <tcp_write+0x2dc>)
 8015fea:	f240 2231 	movw	r2, #561	; 0x231
 8015fee:	4922      	ldr	r1, [pc, #136]	; (8016078 <tcp_write+0x2f8>)
 8015ff0:	481c      	ldr	r0, [pc, #112]	; (8016064 <tcp_write+0x2e4>)
 8015ff2:	f005 f8b1 	bl	801b158 <iprintf>
          extendlen = seglen;
 8015ff6:	8bfb      	ldrh	r3, [r7, #30]
 8015ff8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015ffa:	e01a      	b.n	8016032 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015ffc:	8bfb      	ldrh	r3, [r7, #30]
 8015ffe:	2201      	movs	r2, #1
 8016000:	4619      	mov	r1, r3
 8016002:	2000      	movs	r0, #0
 8016004:	f7fa fdd6 	bl	8010bb4 <pbuf_alloc>
 8016008:	6578      	str	r0, [r7, #84]	; 0x54
 801600a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801600c:	2b00      	cmp	r3, #0
 801600e:	f000 81e0 	beq.w	80163d2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016016:	68ba      	ldr	r2, [r7, #8]
 8016018:	441a      	add	r2, r3
 801601a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801601c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801601e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016020:	f7fb f96c 	bl	80112fc <pbuf_clen>
 8016024:	4603      	mov	r3, r0
 8016026:	461a      	mov	r2, r3
 8016028:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801602c:	4413      	add	r3, r2
 801602e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016032:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016036:	8bfb      	ldrh	r3, [r7, #30]
 8016038:	4413      	add	r3, r2
 801603a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801603e:	e0dc      	b.n	80161fa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016046:	2b00      	cmp	r3, #0
 8016048:	f000 80d7 	beq.w	80161fa <tcp_write+0x47a>
 801604c:	4b03      	ldr	r3, [pc, #12]	; (801605c <tcp_write+0x2dc>)
 801604e:	f240 224a 	movw	r2, #586	; 0x24a
 8016052:	490a      	ldr	r1, [pc, #40]	; (801607c <tcp_write+0x2fc>)
 8016054:	4803      	ldr	r0, [pc, #12]	; (8016064 <tcp_write+0x2e4>)
 8016056:	f005 f87f 	bl	801b158 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801605a:	e0ce      	b.n	80161fa <tcp_write+0x47a>
 801605c:	0801ea14 	.word	0x0801ea14
 8016060:	0801ebb4 	.word	0x0801ebb4
 8016064:	0801ea68 	.word	0x0801ea68
 8016068:	0801ebcc 	.word	0x0801ebcc
 801606c:	0801ec00 	.word	0x0801ec00
 8016070:	0801ec18 	.word	0x0801ec18
 8016074:	0801ec38 	.word	0x0801ec38
 8016078:	0801ec58 	.word	0x0801ec58
 801607c:	0801ec84 	.word	0x0801ec84
    struct pbuf *p;
    u16_t left = len - pos;
 8016080:	88fa      	ldrh	r2, [r7, #6]
 8016082:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801608a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801608e:	b29b      	uxth	r3, r3
 8016090:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016092:	1ad3      	subs	r3, r2, r3
 8016094:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016096:	8b7a      	ldrh	r2, [r7, #26]
 8016098:	8bbb      	ldrh	r3, [r7, #28]
 801609a:	4293      	cmp	r3, r2
 801609c:	bf28      	it	cs
 801609e:	4613      	movcs	r3, r2
 80160a0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80160a2:	797b      	ldrb	r3, [r7, #5]
 80160a4:	f003 0301 	and.w	r3, r3, #1
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d036      	beq.n	801611a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80160ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80160b0:	b29a      	uxth	r2, r3
 80160b2:	8b3b      	ldrh	r3, [r7, #24]
 80160b4:	4413      	add	r3, r2
 80160b6:	b299      	uxth	r1, r3
 80160b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	bf0c      	ite	eq
 80160be:	2301      	moveq	r3, #1
 80160c0:	2300      	movne	r3, #0
 80160c2:	b2db      	uxtb	r3, r3
 80160c4:	f107 0012 	add.w	r0, r7, #18
 80160c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ca:	9302      	str	r3, [sp, #8]
 80160cc:	797b      	ldrb	r3, [r7, #5]
 80160ce:	9301      	str	r3, [sp, #4]
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	9300      	str	r3, [sp, #0]
 80160d4:	4603      	mov	r3, r0
 80160d6:	2036      	movs	r0, #54	; 0x36
 80160d8:	f7ff fd5e 	bl	8015b98 <tcp_pbuf_prealloc>
 80160dc:	6338      	str	r0, [r7, #48]	; 0x30
 80160de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	f000 8178 	beq.w	80163d6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80160e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e8:	895b      	ldrh	r3, [r3, #10]
 80160ea:	8b3a      	ldrh	r2, [r7, #24]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d906      	bls.n	80160fe <tcp_write+0x37e>
 80160f0:	4b8c      	ldr	r3, [pc, #560]	; (8016324 <tcp_write+0x5a4>)
 80160f2:	f240 2266 	movw	r2, #614	; 0x266
 80160f6:	498c      	ldr	r1, [pc, #560]	; (8016328 <tcp_write+0x5a8>)
 80160f8:	488c      	ldr	r0, [pc, #560]	; (801632c <tcp_write+0x5ac>)
 80160fa:	f005 f82d 	bl	801b158 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80160fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016100:	685a      	ldr	r2, [r3, #4]
 8016102:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016106:	18d0      	adds	r0, r2, r3
 8016108:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801610c:	68ba      	ldr	r2, [r7, #8]
 801610e:	4413      	add	r3, r2
 8016110:	8b3a      	ldrh	r2, [r7, #24]
 8016112:	4619      	mov	r1, r3
 8016114:	f005 fa41 	bl	801b59a <memcpy>
 8016118:	e02f      	b.n	801617a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801611a:	8a7b      	ldrh	r3, [r7, #18]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d006      	beq.n	801612e <tcp_write+0x3ae>
 8016120:	4b80      	ldr	r3, [pc, #512]	; (8016324 <tcp_write+0x5a4>)
 8016122:	f240 2271 	movw	r2, #625	; 0x271
 8016126:	4982      	ldr	r1, [pc, #520]	; (8016330 <tcp_write+0x5b0>)
 8016128:	4880      	ldr	r0, [pc, #512]	; (801632c <tcp_write+0x5ac>)
 801612a:	f005 f815 	bl	801b158 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801612e:	8b3b      	ldrh	r3, [r7, #24]
 8016130:	2201      	movs	r2, #1
 8016132:	4619      	mov	r1, r3
 8016134:	2036      	movs	r0, #54	; 0x36
 8016136:	f7fa fd3d 	bl	8010bb4 <pbuf_alloc>
 801613a:	6178      	str	r0, [r7, #20]
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	2b00      	cmp	r3, #0
 8016140:	f000 814b 	beq.w	80163da <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016144:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016148:	68ba      	ldr	r2, [r7, #8]
 801614a:	441a      	add	r2, r3
 801614c:	697b      	ldr	r3, [r7, #20]
 801614e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016150:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016154:	b29b      	uxth	r3, r3
 8016156:	f44f 7220 	mov.w	r2, #640	; 0x280
 801615a:	4619      	mov	r1, r3
 801615c:	2036      	movs	r0, #54	; 0x36
 801615e:	f7fa fd29 	bl	8010bb4 <pbuf_alloc>
 8016162:	6338      	str	r0, [r7, #48]	; 0x30
 8016164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016166:	2b00      	cmp	r3, #0
 8016168:	d103      	bne.n	8016172 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801616a:	6978      	ldr	r0, [r7, #20]
 801616c:	f7fb f838 	bl	80111e0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016170:	e136      	b.n	80163e0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016172:	6979      	ldr	r1, [r7, #20]
 8016174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016176:	f7fb f901 	bl	801137c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801617a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801617c:	f7fb f8be 	bl	80112fc <pbuf_clen>
 8016180:	4603      	mov	r3, r0
 8016182:	461a      	mov	r2, r3
 8016184:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016188:	4413      	add	r3, r2
 801618a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801618e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016192:	2b09      	cmp	r3, #9
 8016194:	d903      	bls.n	801619e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016198:	f7fb f822 	bl	80111e0 <pbuf_free>
      goto memerr;
 801619c:	e120      	b.n	80163e0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80161a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161a6:	441a      	add	r2, r3
 80161a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161ac:	9300      	str	r3, [sp, #0]
 80161ae:	4613      	mov	r3, r2
 80161b0:	2200      	movs	r2, #0
 80161b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80161b4:	68f8      	ldr	r0, [r7, #12]
 80161b6:	f7ff fc51 	bl	8015a5c <tcp_create_segment>
 80161ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80161bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161be:	2b00      	cmp	r3, #0
 80161c0:	f000 810d 	beq.w	80163de <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80161c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d102      	bne.n	80161d0 <tcp_write+0x450>
      queue = seg;
 80161ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161cc:	647b      	str	r3, [r7, #68]	; 0x44
 80161ce:	e00c      	b.n	80161ea <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80161d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <tcp_write+0x464>
 80161d6:	4b53      	ldr	r3, [pc, #332]	; (8016324 <tcp_write+0x5a4>)
 80161d8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80161dc:	4955      	ldr	r1, [pc, #340]	; (8016334 <tcp_write+0x5b4>)
 80161de:	4853      	ldr	r0, [pc, #332]	; (801632c <tcp_write+0x5ac>)
 80161e0:	f004 ffba 	bl	801b158 <iprintf>
      prev_seg->next = seg;
 80161e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80161e8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80161ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161ec:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80161ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161f2:	8b3b      	ldrh	r3, [r7, #24]
 80161f4:	4413      	add	r3, r2
 80161f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80161fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161fe:	88fb      	ldrh	r3, [r7, #6]
 8016200:	429a      	cmp	r2, r3
 8016202:	f4ff af3d 	bcc.w	8016080 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016206:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016208:	2b00      	cmp	r3, #0
 801620a:	d02c      	beq.n	8016266 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801620c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016212:	e01e      	b.n	8016252 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016216:	891a      	ldrh	r2, [r3, #8]
 8016218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801621a:	4413      	add	r3, r2
 801621c:	b29a      	uxth	r2, r3
 801621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016220:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d110      	bne.n	801624c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016230:	8952      	ldrh	r2, [r2, #10]
 8016232:	4413      	add	r3, r2
 8016234:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016236:	68b9      	ldr	r1, [r7, #8]
 8016238:	4618      	mov	r0, r3
 801623a:	f005 f9ae 	bl	801b59a <memcpy>
        p->len += oversize_used;
 801623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016240:	895a      	ldrh	r2, [r3, #10]
 8016242:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016244:	4413      	add	r3, r2
 8016246:	b29a      	uxth	r2, r3
 8016248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016254:	2b00      	cmp	r3, #0
 8016256:	d1dd      	bne.n	8016214 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801625a:	891a      	ldrh	r2, [r3, #8]
 801625c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801625e:	4413      	add	r3, r2
 8016260:	b29a      	uxth	r2, r3
 8016262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016264:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016266:	8a7a      	ldrh	r2, [r7, #18]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801626e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016270:	2b00      	cmp	r3, #0
 8016272:	d018      	beq.n	80162a6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016276:	2b00      	cmp	r3, #0
 8016278:	d106      	bne.n	8016288 <tcp_write+0x508>
 801627a:	4b2a      	ldr	r3, [pc, #168]	; (8016324 <tcp_write+0x5a4>)
 801627c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016280:	492d      	ldr	r1, [pc, #180]	; (8016338 <tcp_write+0x5b8>)
 8016282:	482a      	ldr	r0, [pc, #168]	; (801632c <tcp_write+0x5ac>)
 8016284:	f004 ff68 	bl	801b158 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801628e:	4618      	mov	r0, r3
 8016290:	f7fb f874 	bl	801137c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016296:	891a      	ldrh	r2, [r3, #8]
 8016298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801629a:	891b      	ldrh	r3, [r3, #8]
 801629c:	4413      	add	r3, r2
 801629e:	b29a      	uxth	r2, r3
 80162a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162a2:	811a      	strh	r2, [r3, #8]
 80162a4:	e037      	b.n	8016316 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80162a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d034      	beq.n	8016316 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80162ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d003      	beq.n	80162ba <tcp_write+0x53a>
 80162b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <tcp_write+0x548>
 80162ba:	4b1a      	ldr	r3, [pc, #104]	; (8016324 <tcp_write+0x5a4>)
 80162bc:	f240 22e6 	movw	r2, #742	; 0x2e6
 80162c0:	491e      	ldr	r1, [pc, #120]	; (801633c <tcp_write+0x5bc>)
 80162c2:	481a      	ldr	r0, [pc, #104]	; (801632c <tcp_write+0x5ac>)
 80162c4:	f004 ff48 	bl	801b158 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80162c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80162ce:	e009      	b.n	80162e4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80162d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d2:	891a      	ldrh	r2, [r3, #8]
 80162d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162d6:	4413      	add	r3, r2
 80162d8:	b29a      	uxth	r2, r3
 80162da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162dc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80162de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80162e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d1f1      	bne.n	80162d0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80162ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ee:	891a      	ldrh	r2, [r3, #8]
 80162f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162f2:	4413      	add	r3, r2
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80162fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162fc:	895a      	ldrh	r2, [r3, #10]
 80162fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016300:	4413      	add	r3, r2
 8016302:	b29a      	uxth	r2, r3
 8016304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016306:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801630a:	891a      	ldrh	r2, [r3, #8]
 801630c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801630e:	4413      	add	r3, r2
 8016310:	b29a      	uxth	r2, r3
 8016312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016314:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016318:	2b00      	cmp	r3, #0
 801631a:	d111      	bne.n	8016340 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016320:	66da      	str	r2, [r3, #108]	; 0x6c
 8016322:	e010      	b.n	8016346 <tcp_write+0x5c6>
 8016324:	0801ea14 	.word	0x0801ea14
 8016328:	0801ecb4 	.word	0x0801ecb4
 801632c:	0801ea68 	.word	0x0801ea68
 8016330:	0801ecf4 	.word	0x0801ecf4
 8016334:	0801ed04 	.word	0x0801ed04
 8016338:	0801ed18 	.word	0x0801ed18
 801633c:	0801ed50 	.word	0x0801ed50
  } else {
    last_unsent->next = queue;
 8016340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016344:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801634a:	88fb      	ldrh	r3, [r7, #6]
 801634c:	441a      	add	r2, r3
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016358:	88fb      	ldrh	r3, [r7, #6]
 801635a:	1ad3      	subs	r3, r2, r3
 801635c:	b29a      	uxth	r2, r3
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801636a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016374:	2b00      	cmp	r3, #0
 8016376:	d00e      	beq.n	8016396 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801637c:	2b00      	cmp	r3, #0
 801637e:	d10a      	bne.n	8016396 <tcp_write+0x616>
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016384:	2b00      	cmp	r3, #0
 8016386:	d106      	bne.n	8016396 <tcp_write+0x616>
 8016388:	4b2c      	ldr	r3, [pc, #176]	; (801643c <tcp_write+0x6bc>)
 801638a:	f240 3212 	movw	r2, #786	; 0x312
 801638e:	492c      	ldr	r1, [pc, #176]	; (8016440 <tcp_write+0x6c0>)
 8016390:	482c      	ldr	r0, [pc, #176]	; (8016444 <tcp_write+0x6c4>)
 8016392:	f004 fee1 	bl	801b158 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016398:	2b00      	cmp	r3, #0
 801639a:	d016      	beq.n	80163ca <tcp_write+0x64a>
 801639c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801639e:	68db      	ldr	r3, [r3, #12]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d012      	beq.n	80163ca <tcp_write+0x64a>
 80163a4:	797b      	ldrb	r3, [r7, #5]
 80163a6:	f003 0302 	and.w	r3, r3, #2
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d10d      	bne.n	80163ca <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80163ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163b0:	68db      	ldr	r3, [r3, #12]
 80163b2:	899b      	ldrh	r3, [r3, #12]
 80163b4:	b29c      	uxth	r4, r3
 80163b6:	2008      	movs	r0, #8
 80163b8:	f7f9 faee 	bl	800f998 <lwip_htons>
 80163bc:	4603      	mov	r3, r0
 80163be:	461a      	mov	r2, r3
 80163c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	4322      	orrs	r2, r4
 80163c6:	b292      	uxth	r2, r2
 80163c8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80163ca:	2300      	movs	r3, #0
 80163cc:	e031      	b.n	8016432 <tcp_write+0x6b2>
          goto memerr;
 80163ce:	bf00      	nop
 80163d0:	e006      	b.n	80163e0 <tcp_write+0x660>
            goto memerr;
 80163d2:	bf00      	nop
 80163d4:	e004      	b.n	80163e0 <tcp_write+0x660>
        goto memerr;
 80163d6:	bf00      	nop
 80163d8:	e002      	b.n	80163e0 <tcp_write+0x660>
        goto memerr;
 80163da:	bf00      	nop
 80163dc:	e000      	b.n	80163e0 <tcp_write+0x660>
      goto memerr;
 80163de:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	8b5b      	ldrh	r3, [r3, #26]
 80163e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163e8:	b29a      	uxth	r2, r3
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80163ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d002      	beq.n	80163fa <tcp_write+0x67a>
    pbuf_free(concat_p);
 80163f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80163f6:	f7fa fef3 	bl	80111e0 <pbuf_free>
  }
  if (queue != NULL) {
 80163fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d002      	beq.n	8016406 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016400:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016402:	f7fc fb6b 	bl	8012adc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801640c:	2b00      	cmp	r3, #0
 801640e:	d00e      	beq.n	801642e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016414:	2b00      	cmp	r3, #0
 8016416:	d10a      	bne.n	801642e <tcp_write+0x6ae>
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801641c:	2b00      	cmp	r3, #0
 801641e:	d106      	bne.n	801642e <tcp_write+0x6ae>
 8016420:	4b06      	ldr	r3, [pc, #24]	; (801643c <tcp_write+0x6bc>)
 8016422:	f240 3227 	movw	r2, #807	; 0x327
 8016426:	4906      	ldr	r1, [pc, #24]	; (8016440 <tcp_write+0x6c0>)
 8016428:	4806      	ldr	r0, [pc, #24]	; (8016444 <tcp_write+0x6c4>)
 801642a:	f004 fe95 	bl	801b158 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801642e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016432:	4618      	mov	r0, r3
 8016434:	375c      	adds	r7, #92	; 0x5c
 8016436:	46bd      	mov	sp, r7
 8016438:	bd90      	pop	{r4, r7, pc}
 801643a:	bf00      	nop
 801643c:	0801ea14 	.word	0x0801ea14
 8016440:	0801ed88 	.word	0x0801ed88
 8016444:	0801ea68 	.word	0x0801ea68

08016448 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016448:	b590      	push	{r4, r7, lr}
 801644a:	b08b      	sub	sp, #44	; 0x2c
 801644c:	af02      	add	r7, sp, #8
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	460b      	mov	r3, r1
 8016452:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016454:	2300      	movs	r3, #0
 8016456:	61fb      	str	r3, [r7, #28]
 8016458:	2300      	movs	r3, #0
 801645a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801645c:	2300      	movs	r3, #0
 801645e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d106      	bne.n	8016474 <tcp_split_unsent_seg+0x2c>
 8016466:	4b95      	ldr	r3, [pc, #596]	; (80166bc <tcp_split_unsent_seg+0x274>)
 8016468:	f240 324b 	movw	r2, #843	; 0x34b
 801646c:	4994      	ldr	r1, [pc, #592]	; (80166c0 <tcp_split_unsent_seg+0x278>)
 801646e:	4895      	ldr	r0, [pc, #596]	; (80166c4 <tcp_split_unsent_seg+0x27c>)
 8016470:	f004 fe72 	bl	801b158 <iprintf>

  useg = pcb->unsent;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016478:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d102      	bne.n	8016486 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016480:	f04f 33ff 	mov.w	r3, #4294967295
 8016484:	e116      	b.n	80166b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016486:	887b      	ldrh	r3, [r7, #2]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d109      	bne.n	80164a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801648c:	4b8b      	ldr	r3, [pc, #556]	; (80166bc <tcp_split_unsent_seg+0x274>)
 801648e:	f240 3253 	movw	r2, #851	; 0x353
 8016492:	498d      	ldr	r1, [pc, #564]	; (80166c8 <tcp_split_unsent_seg+0x280>)
 8016494:	488b      	ldr	r0, [pc, #556]	; (80166c4 <tcp_split_unsent_seg+0x27c>)
 8016496:	f004 fe5f 	bl	801b158 <iprintf>
    return ERR_VAL;
 801649a:	f06f 0305 	mvn.w	r3, #5
 801649e:	e109      	b.n	80166b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80164a0:	697b      	ldr	r3, [r7, #20]
 80164a2:	891b      	ldrh	r3, [r3, #8]
 80164a4:	887a      	ldrh	r2, [r7, #2]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d301      	bcc.n	80164ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80164aa:	2300      	movs	r3, #0
 80164ac:	e102      	b.n	80166b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80164b2:	887a      	ldrh	r2, [r7, #2]
 80164b4:	429a      	cmp	r2, r3
 80164b6:	d906      	bls.n	80164c6 <tcp_split_unsent_seg+0x7e>
 80164b8:	4b80      	ldr	r3, [pc, #512]	; (80166bc <tcp_split_unsent_seg+0x274>)
 80164ba:	f240 325b 	movw	r2, #859	; 0x35b
 80164be:	4983      	ldr	r1, [pc, #524]	; (80166cc <tcp_split_unsent_seg+0x284>)
 80164c0:	4880      	ldr	r0, [pc, #512]	; (80166c4 <tcp_split_unsent_seg+0x27c>)
 80164c2:	f004 fe49 	bl	801b158 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	891b      	ldrh	r3, [r3, #8]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d106      	bne.n	80164dc <tcp_split_unsent_seg+0x94>
 80164ce:	4b7b      	ldr	r3, [pc, #492]	; (80166bc <tcp_split_unsent_seg+0x274>)
 80164d0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80164d4:	497e      	ldr	r1, [pc, #504]	; (80166d0 <tcp_split_unsent_seg+0x288>)
 80164d6:	487b      	ldr	r0, [pc, #492]	; (80166c4 <tcp_split_unsent_seg+0x27c>)
 80164d8:	f004 fe3e 	bl	801b158 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	7a9b      	ldrb	r3, [r3, #10]
 80164e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80164e2:	7bfb      	ldrb	r3, [r7, #15]
 80164e4:	009b      	lsls	r3, r3, #2
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	f003 0304 	and.w	r3, r3, #4
 80164ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	891a      	ldrh	r2, [r3, #8]
 80164f2:	887b      	ldrh	r3, [r7, #2]
 80164f4:	1ad3      	subs	r3, r2, r3
 80164f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80164f8:	7bbb      	ldrb	r3, [r7, #14]
 80164fa:	b29a      	uxth	r2, r3
 80164fc:	89bb      	ldrh	r3, [r7, #12]
 80164fe:	4413      	add	r3, r2
 8016500:	b29b      	uxth	r3, r3
 8016502:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016506:	4619      	mov	r1, r3
 8016508:	2036      	movs	r0, #54	; 0x36
 801650a:	f7fa fb53 	bl	8010bb4 <pbuf_alloc>
 801650e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016510:	693b      	ldr	r3, [r7, #16]
 8016512:	2b00      	cmp	r3, #0
 8016514:	f000 80b7 	beq.w	8016686 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	891a      	ldrh	r2, [r3, #8]
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	891b      	ldrh	r3, [r3, #8]
 8016522:	1ad3      	subs	r3, r2, r3
 8016524:	b29a      	uxth	r2, r3
 8016526:	887b      	ldrh	r3, [r7, #2]
 8016528:	4413      	add	r3, r2
 801652a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	6858      	ldr	r0, [r3, #4]
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	685a      	ldr	r2, [r3, #4]
 8016534:	7bbb      	ldrb	r3, [r7, #14]
 8016536:	18d1      	adds	r1, r2, r3
 8016538:	897b      	ldrh	r3, [r7, #10]
 801653a:	89ba      	ldrh	r2, [r7, #12]
 801653c:	f7fb f856 	bl	80115ec <pbuf_copy_partial>
 8016540:	4603      	mov	r3, r0
 8016542:	461a      	mov	r2, r3
 8016544:	89bb      	ldrh	r3, [r7, #12]
 8016546:	4293      	cmp	r3, r2
 8016548:	f040 809f 	bne.w	801668a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	68db      	ldr	r3, [r3, #12]
 8016550:	899b      	ldrh	r3, [r3, #12]
 8016552:	b29b      	uxth	r3, r3
 8016554:	4618      	mov	r0, r3
 8016556:	f7f9 fa1f 	bl	800f998 <lwip_htons>
 801655a:	4603      	mov	r3, r0
 801655c:	b2db      	uxtb	r3, r3
 801655e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016562:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016564:	2300      	movs	r3, #0
 8016566:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016568:	7efb      	ldrb	r3, [r7, #27]
 801656a:	f003 0308 	and.w	r3, r3, #8
 801656e:	2b00      	cmp	r3, #0
 8016570:	d007      	beq.n	8016582 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016572:	7efb      	ldrb	r3, [r7, #27]
 8016574:	f023 0308 	bic.w	r3, r3, #8
 8016578:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801657a:	7ebb      	ldrb	r3, [r7, #26]
 801657c:	f043 0308 	orr.w	r3, r3, #8
 8016580:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016582:	7efb      	ldrb	r3, [r7, #27]
 8016584:	f003 0301 	and.w	r3, r3, #1
 8016588:	2b00      	cmp	r3, #0
 801658a:	d007      	beq.n	801659c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801658c:	7efb      	ldrb	r3, [r7, #27]
 801658e:	f023 0301 	bic.w	r3, r3, #1
 8016592:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016594:	7ebb      	ldrb	r3, [r7, #26]
 8016596:	f043 0301 	orr.w	r3, r3, #1
 801659a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	68db      	ldr	r3, [r3, #12]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7f9 fa0d 	bl	800f9c2 <lwip_htonl>
 80165a8:	4602      	mov	r2, r0
 80165aa:	887b      	ldrh	r3, [r7, #2]
 80165ac:	18d1      	adds	r1, r2, r3
 80165ae:	7eba      	ldrb	r2, [r7, #26]
 80165b0:	7bfb      	ldrb	r3, [r7, #15]
 80165b2:	9300      	str	r3, [sp, #0]
 80165b4:	460b      	mov	r3, r1
 80165b6:	6939      	ldr	r1, [r7, #16]
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f7ff fa4f 	bl	8015a5c <tcp_create_segment>
 80165be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d063      	beq.n	801668e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	685b      	ldr	r3, [r3, #4]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7fa fe96 	bl	80112fc <pbuf_clen>
 80165d0:	4603      	mov	r3, r0
 80165d2:	461a      	mov	r2, r3
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165da:	1a9b      	subs	r3, r3, r2
 80165dc:	b29a      	uxth	r2, r3
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	6858      	ldr	r0, [r3, #4]
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	685b      	ldr	r3, [r3, #4]
 80165ec:	891a      	ldrh	r2, [r3, #8]
 80165ee:	89bb      	ldrh	r3, [r7, #12]
 80165f0:	1ad3      	subs	r3, r2, r3
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	4619      	mov	r1, r3
 80165f6:	f7fa fc3b 	bl	8010e70 <pbuf_realloc>
  useg->len -= remainder;
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	891a      	ldrh	r2, [r3, #8]
 80165fe:	89bb      	ldrh	r3, [r7, #12]
 8016600:	1ad3      	subs	r3, r2, r3
 8016602:	b29a      	uxth	r2, r3
 8016604:	697b      	ldr	r3, [r7, #20]
 8016606:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	68db      	ldr	r3, [r3, #12]
 801660c:	899b      	ldrh	r3, [r3, #12]
 801660e:	b29c      	uxth	r4, r3
 8016610:	7efb      	ldrb	r3, [r7, #27]
 8016612:	b29b      	uxth	r3, r3
 8016614:	4618      	mov	r0, r3
 8016616:	f7f9 f9bf 	bl	800f998 <lwip_htons>
 801661a:	4603      	mov	r3, r0
 801661c:	461a      	mov	r2, r3
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	4322      	orrs	r2, r4
 8016624:	b292      	uxth	r2, r2
 8016626:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	4618      	mov	r0, r3
 801662e:	f7fa fe65 	bl	80112fc <pbuf_clen>
 8016632:	4603      	mov	r3, r0
 8016634:	461a      	mov	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801663c:	4413      	add	r3, r2
 801663e:	b29a      	uxth	r2, r3
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016646:	69fb      	ldr	r3, [r7, #28]
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	4618      	mov	r0, r3
 801664c:	f7fa fe56 	bl	80112fc <pbuf_clen>
 8016650:	4603      	mov	r3, r0
 8016652:	461a      	mov	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801665a:	4413      	add	r3, r2
 801665c:	b29a      	uxth	r2, r3
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	681a      	ldr	r2, [r3, #0]
 8016668:	69fb      	ldr	r3, [r7, #28]
 801666a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	69fa      	ldr	r2, [r7, #28]
 8016670:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016672:	69fb      	ldr	r3, [r7, #28]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d103      	bne.n	8016682 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	2200      	movs	r2, #0
 801667e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016682:	2300      	movs	r3, #0
 8016684:	e016      	b.n	80166b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016686:	bf00      	nop
 8016688:	e002      	b.n	8016690 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801668a:	bf00      	nop
 801668c:	e000      	b.n	8016690 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801668e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d006      	beq.n	80166a4 <tcp_split_unsent_seg+0x25c>
 8016696:	4b09      	ldr	r3, [pc, #36]	; (80166bc <tcp_split_unsent_seg+0x274>)
 8016698:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801669c:	490d      	ldr	r1, [pc, #52]	; (80166d4 <tcp_split_unsent_seg+0x28c>)
 801669e:	4809      	ldr	r0, [pc, #36]	; (80166c4 <tcp_split_unsent_seg+0x27c>)
 80166a0:	f004 fd5a 	bl	801b158 <iprintf>
  if (p != NULL) {
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d002      	beq.n	80166b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80166aa:	6938      	ldr	r0, [r7, #16]
 80166ac:	f7fa fd98 	bl	80111e0 <pbuf_free>
  }

  return ERR_MEM;
 80166b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3724      	adds	r7, #36	; 0x24
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd90      	pop	{r4, r7, pc}
 80166bc:	0801ea14 	.word	0x0801ea14
 80166c0:	0801eda8 	.word	0x0801eda8
 80166c4:	0801ea68 	.word	0x0801ea68
 80166c8:	0801edcc 	.word	0x0801edcc
 80166cc:	0801edf0 	.word	0x0801edf0
 80166d0:	0801ee00 	.word	0x0801ee00
 80166d4:	0801ee10 	.word	0x0801ee10

080166d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80166d8:	b590      	push	{r4, r7, lr}
 80166da:	b085      	sub	sp, #20
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d106      	bne.n	80166f4 <tcp_send_fin+0x1c>
 80166e6:	4b21      	ldr	r3, [pc, #132]	; (801676c <tcp_send_fin+0x94>)
 80166e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80166ec:	4920      	ldr	r1, [pc, #128]	; (8016770 <tcp_send_fin+0x98>)
 80166ee:	4821      	ldr	r0, [pc, #132]	; (8016774 <tcp_send_fin+0x9c>)
 80166f0:	f004 fd32 	bl	801b158 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d02e      	beq.n	801675a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016700:	60fb      	str	r3, [r7, #12]
 8016702:	e002      	b.n	801670a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d1f8      	bne.n	8016704 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	68db      	ldr	r3, [r3, #12]
 8016716:	899b      	ldrh	r3, [r3, #12]
 8016718:	b29b      	uxth	r3, r3
 801671a:	4618      	mov	r0, r3
 801671c:	f7f9 f93c 	bl	800f998 <lwip_htons>
 8016720:	4603      	mov	r3, r0
 8016722:	b2db      	uxtb	r3, r3
 8016724:	f003 0307 	and.w	r3, r3, #7
 8016728:	2b00      	cmp	r3, #0
 801672a:	d116      	bne.n	801675a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	68db      	ldr	r3, [r3, #12]
 8016730:	899b      	ldrh	r3, [r3, #12]
 8016732:	b29c      	uxth	r4, r3
 8016734:	2001      	movs	r0, #1
 8016736:	f7f9 f92f 	bl	800f998 <lwip_htons>
 801673a:	4603      	mov	r3, r0
 801673c:	461a      	mov	r2, r3
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	68db      	ldr	r3, [r3, #12]
 8016742:	4322      	orrs	r2, r4
 8016744:	b292      	uxth	r2, r2
 8016746:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	8b5b      	ldrh	r3, [r3, #26]
 801674c:	f043 0320 	orr.w	r3, r3, #32
 8016750:	b29a      	uxth	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016756:	2300      	movs	r3, #0
 8016758:	e004      	b.n	8016764 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801675a:	2101      	movs	r1, #1
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 f80b 	bl	8016778 <tcp_enqueue_flags>
 8016762:	4603      	mov	r3, r0
}
 8016764:	4618      	mov	r0, r3
 8016766:	3714      	adds	r7, #20
 8016768:	46bd      	mov	sp, r7
 801676a:	bd90      	pop	{r4, r7, pc}
 801676c:	0801ea14 	.word	0x0801ea14
 8016770:	0801ee1c 	.word	0x0801ee1c
 8016774:	0801ea68 	.word	0x0801ea68

08016778 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b08a      	sub	sp, #40	; 0x28
 801677c:	af02      	add	r7, sp, #8
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	460b      	mov	r3, r1
 8016782:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016784:	2300      	movs	r3, #0
 8016786:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016788:	2300      	movs	r3, #0
 801678a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801678c:	78fb      	ldrb	r3, [r7, #3]
 801678e:	f003 0303 	and.w	r3, r3, #3
 8016792:	2b00      	cmp	r3, #0
 8016794:	d106      	bne.n	80167a4 <tcp_enqueue_flags+0x2c>
 8016796:	4b67      	ldr	r3, [pc, #412]	; (8016934 <tcp_enqueue_flags+0x1bc>)
 8016798:	f240 4211 	movw	r2, #1041	; 0x411
 801679c:	4966      	ldr	r1, [pc, #408]	; (8016938 <tcp_enqueue_flags+0x1c0>)
 801679e:	4867      	ldr	r0, [pc, #412]	; (801693c <tcp_enqueue_flags+0x1c4>)
 80167a0:	f004 fcda 	bl	801b158 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d106      	bne.n	80167b8 <tcp_enqueue_flags+0x40>
 80167aa:	4b62      	ldr	r3, [pc, #392]	; (8016934 <tcp_enqueue_flags+0x1bc>)
 80167ac:	f240 4213 	movw	r2, #1043	; 0x413
 80167b0:	4963      	ldr	r1, [pc, #396]	; (8016940 <tcp_enqueue_flags+0x1c8>)
 80167b2:	4862      	ldr	r0, [pc, #392]	; (801693c <tcp_enqueue_flags+0x1c4>)
 80167b4:	f004 fcd0 	bl	801b158 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80167b8:	78fb      	ldrb	r3, [r7, #3]
 80167ba:	f003 0302 	and.w	r3, r3, #2
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d001      	beq.n	80167c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80167c2:	2301      	movs	r3, #1
 80167c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80167c6:	7ffb      	ldrb	r3, [r7, #31]
 80167c8:	009b      	lsls	r3, r3, #2
 80167ca:	b2db      	uxtb	r3, r3
 80167cc:	f003 0304 	and.w	r3, r3, #4
 80167d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80167d2:	7dfb      	ldrb	r3, [r7, #23]
 80167d4:	b29b      	uxth	r3, r3
 80167d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167da:	4619      	mov	r1, r3
 80167dc:	2036      	movs	r0, #54	; 0x36
 80167de:	f7fa f9e9 	bl	8010bb4 <pbuf_alloc>
 80167e2:	6138      	str	r0, [r7, #16]
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d109      	bne.n	80167fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	8b5b      	ldrh	r3, [r3, #26]
 80167ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80167f8:	f04f 33ff 	mov.w	r3, #4294967295
 80167fc:	e095      	b.n	801692a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	895a      	ldrh	r2, [r3, #10]
 8016802:	7dfb      	ldrb	r3, [r7, #23]
 8016804:	b29b      	uxth	r3, r3
 8016806:	429a      	cmp	r2, r3
 8016808:	d206      	bcs.n	8016818 <tcp_enqueue_flags+0xa0>
 801680a:	4b4a      	ldr	r3, [pc, #296]	; (8016934 <tcp_enqueue_flags+0x1bc>)
 801680c:	f240 4239 	movw	r2, #1081	; 0x439
 8016810:	494c      	ldr	r1, [pc, #304]	; (8016944 <tcp_enqueue_flags+0x1cc>)
 8016812:	484a      	ldr	r0, [pc, #296]	; (801693c <tcp_enqueue_flags+0x1c4>)
 8016814:	f004 fca0 	bl	801b158 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801681c:	78fa      	ldrb	r2, [r7, #3]
 801681e:	7ffb      	ldrb	r3, [r7, #31]
 8016820:	9300      	str	r3, [sp, #0]
 8016822:	460b      	mov	r3, r1
 8016824:	6939      	ldr	r1, [r7, #16]
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f7ff f918 	bl	8015a5c <tcp_create_segment>
 801682c:	60f8      	str	r0, [r7, #12]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d109      	bne.n	8016848 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	8b5b      	ldrh	r3, [r3, #26]
 8016838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801683c:	b29a      	uxth	r2, r3
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016842:	f04f 33ff 	mov.w	r3, #4294967295
 8016846:	e070      	b.n	801692a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	f003 0303 	and.w	r3, r3, #3
 8016850:	2b00      	cmp	r3, #0
 8016852:	d006      	beq.n	8016862 <tcp_enqueue_flags+0xea>
 8016854:	4b37      	ldr	r3, [pc, #220]	; (8016934 <tcp_enqueue_flags+0x1bc>)
 8016856:	f240 4242 	movw	r2, #1090	; 0x442
 801685a:	493b      	ldr	r1, [pc, #236]	; (8016948 <tcp_enqueue_flags+0x1d0>)
 801685c:	4837      	ldr	r0, [pc, #220]	; (801693c <tcp_enqueue_flags+0x1c4>)
 801685e:	f004 fc7b 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	891b      	ldrh	r3, [r3, #8]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d006      	beq.n	8016878 <tcp_enqueue_flags+0x100>
 801686a:	4b32      	ldr	r3, [pc, #200]	; (8016934 <tcp_enqueue_flags+0x1bc>)
 801686c:	f240 4243 	movw	r2, #1091	; 0x443
 8016870:	4936      	ldr	r1, [pc, #216]	; (801694c <tcp_enqueue_flags+0x1d4>)
 8016872:	4832      	ldr	r0, [pc, #200]	; (801693c <tcp_enqueue_flags+0x1c4>)
 8016874:	f004 fc70 	bl	801b158 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801687c:	2b00      	cmp	r3, #0
 801687e:	d103      	bne.n	8016888 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	68fa      	ldr	r2, [r7, #12]
 8016884:	66da      	str	r2, [r3, #108]	; 0x6c
 8016886:	e00d      	b.n	80168a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801688c:	61bb      	str	r3, [r7, #24]
 801688e:	e002      	b.n	8016896 <tcp_enqueue_flags+0x11e>
 8016890:	69bb      	ldr	r3, [r7, #24]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	61bb      	str	r3, [r7, #24]
 8016896:	69bb      	ldr	r3, [r7, #24]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d1f8      	bne.n	8016890 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801689e:	69bb      	ldr	r3, [r7, #24]
 80168a0:	68fa      	ldr	r2, [r7, #12]
 80168a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2200      	movs	r2, #0
 80168a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80168ac:	78fb      	ldrb	r3, [r7, #3]
 80168ae:	f003 0302 	and.w	r3, r3, #2
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d104      	bne.n	80168c0 <tcp_enqueue_flags+0x148>
 80168b6:	78fb      	ldrb	r3, [r7, #3]
 80168b8:	f003 0301 	and.w	r3, r3, #1
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d004      	beq.n	80168ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168c4:	1c5a      	adds	r2, r3, #1
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80168ca:	78fb      	ldrb	r3, [r7, #3]
 80168cc:	f003 0301 	and.w	r3, r3, #1
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d006      	beq.n	80168e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	8b5b      	ldrh	r3, [r3, #26]
 80168d8:	f043 0320 	orr.w	r3, r3, #32
 80168dc:	b29a      	uxth	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	685b      	ldr	r3, [r3, #4]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7fa fd08 	bl	80112fc <pbuf_clen>
 80168ec:	4603      	mov	r3, r0
 80168ee:	461a      	mov	r2, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168f6:	4413      	add	r3, r2
 80168f8:	b29a      	uxth	r2, r3
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00e      	beq.n	8016928 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801690e:	2b00      	cmp	r3, #0
 8016910:	d10a      	bne.n	8016928 <tcp_enqueue_flags+0x1b0>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016916:	2b00      	cmp	r3, #0
 8016918:	d106      	bne.n	8016928 <tcp_enqueue_flags+0x1b0>
 801691a:	4b06      	ldr	r3, [pc, #24]	; (8016934 <tcp_enqueue_flags+0x1bc>)
 801691c:	f240 4265 	movw	r2, #1125	; 0x465
 8016920:	490b      	ldr	r1, [pc, #44]	; (8016950 <tcp_enqueue_flags+0x1d8>)
 8016922:	4806      	ldr	r0, [pc, #24]	; (801693c <tcp_enqueue_flags+0x1c4>)
 8016924:	f004 fc18 	bl	801b158 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016928:	2300      	movs	r3, #0
}
 801692a:	4618      	mov	r0, r3
 801692c:	3720      	adds	r7, #32
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	0801ea14 	.word	0x0801ea14
 8016938:	0801ee38 	.word	0x0801ee38
 801693c:	0801ea68 	.word	0x0801ea68
 8016940:	0801ee90 	.word	0x0801ee90
 8016944:	0801eeb0 	.word	0x0801eeb0
 8016948:	0801eeec 	.word	0x0801eeec
 801694c:	0801ef04 	.word	0x0801ef04
 8016950:	0801ef30 	.word	0x0801ef30

08016954 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016954:	b5b0      	push	{r4, r5, r7, lr}
 8016956:	b08a      	sub	sp, #40	; 0x28
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d106      	bne.n	8016970 <tcp_output+0x1c>
 8016962:	4b8a      	ldr	r3, [pc, #552]	; (8016b8c <tcp_output+0x238>)
 8016964:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016968:	4989      	ldr	r1, [pc, #548]	; (8016b90 <tcp_output+0x23c>)
 801696a:	488a      	ldr	r0, [pc, #552]	; (8016b94 <tcp_output+0x240>)
 801696c:	f004 fbf4 	bl	801b158 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	7d1b      	ldrb	r3, [r3, #20]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d106      	bne.n	8016986 <tcp_output+0x32>
 8016978:	4b84      	ldr	r3, [pc, #528]	; (8016b8c <tcp_output+0x238>)
 801697a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801697e:	4986      	ldr	r1, [pc, #536]	; (8016b98 <tcp_output+0x244>)
 8016980:	4884      	ldr	r0, [pc, #528]	; (8016b94 <tcp_output+0x240>)
 8016982:	f004 fbe9 	bl	801b158 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016986:	4b85      	ldr	r3, [pc, #532]	; (8016b9c <tcp_output+0x248>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	687a      	ldr	r2, [r7, #4]
 801698c:	429a      	cmp	r2, r3
 801698e:	d101      	bne.n	8016994 <tcp_output+0x40>
    return ERR_OK;
 8016990:	2300      	movs	r3, #0
 8016992:	e1ce      	b.n	8016d32 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80169a0:	4293      	cmp	r3, r2
 80169a2:	bf28      	it	cs
 80169a4:	4613      	movcs	r3, r2
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80169b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d10b      	bne.n	80169ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	8b5b      	ldrh	r3, [r3, #26]
 80169ba:	f003 0302 	and.w	r3, r3, #2
 80169be:	2b00      	cmp	r3, #0
 80169c0:	f000 81aa 	beq.w	8016d18 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 fdcb 	bl	8017560 <tcp_send_empty_ack>
 80169ca:	4603      	mov	r3, r0
 80169cc:	e1b1      	b.n	8016d32 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80169ce:	6879      	ldr	r1, [r7, #4]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	3304      	adds	r3, #4
 80169d4:	461a      	mov	r2, r3
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7ff f824 	bl	8015a24 <tcp_route>
 80169dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d102      	bne.n	80169ea <tcp_output+0x96>
    return ERR_RTE;
 80169e4:	f06f 0303 	mvn.w	r3, #3
 80169e8:	e1a3      	b.n	8016d32 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d003      	beq.n	80169f8 <tcp_output+0xa4>
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d111      	bne.n	8016a1c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80169f8:	697b      	ldr	r3, [r7, #20]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d002      	beq.n	8016a04 <tcp_output+0xb0>
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	3304      	adds	r3, #4
 8016a02:	e000      	b.n	8016a06 <tcp_output+0xb2>
 8016a04:	2300      	movs	r3, #0
 8016a06:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016a08:	693b      	ldr	r3, [r7, #16]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d102      	bne.n	8016a14 <tcp_output+0xc0>
      return ERR_RTE;
 8016a0e:	f06f 0303 	mvn.w	r3, #3
 8016a12:	e18e      	b.n	8016d32 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a1e:	68db      	ldr	r3, [r3, #12]
 8016a20:	685b      	ldr	r3, [r3, #4]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7f8 ffcd 	bl	800f9c2 <lwip_htonl>
 8016a28:	4602      	mov	r2, r0
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a2e:	1ad3      	subs	r3, r2, r3
 8016a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a32:	8912      	ldrh	r2, [r2, #8]
 8016a34:	4413      	add	r3, r2
 8016a36:	69ba      	ldr	r2, [r7, #24]
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d227      	bcs.n	8016a8c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a42:	461a      	mov	r2, r3
 8016a44:	69bb      	ldr	r3, [r7, #24]
 8016a46:	4293      	cmp	r3, r2
 8016a48:	d114      	bne.n	8016a74 <tcp_output+0x120>
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d110      	bne.n	8016a74 <tcp_output+0x120>
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d10b      	bne.n	8016a74 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2201      	movs	r2, #1
 8016a68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	8b5b      	ldrh	r3, [r3, #26]
 8016a78:	f003 0302 	and.w	r3, r3, #2
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	f000 814d 	beq.w	8016d1c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f000 fd6c 	bl	8017560 <tcp_send_empty_ack>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	e152      	b.n	8016d32 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2200      	movs	r2, #0
 8016a90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a98:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016a9a:	6a3b      	ldr	r3, [r7, #32]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f000 811c 	beq.w	8016cda <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016aa2:	e002      	b.n	8016aaa <tcp_output+0x156>
 8016aa4:	6a3b      	ldr	r3, [r7, #32]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	623b      	str	r3, [r7, #32]
 8016aaa:	6a3b      	ldr	r3, [r7, #32]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d1f8      	bne.n	8016aa4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016ab2:	e112      	b.n	8016cda <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	899b      	ldrh	r3, [r3, #12]
 8016aba:	b29b      	uxth	r3, r3
 8016abc:	4618      	mov	r0, r3
 8016abe:	f7f8 ff6b 	bl	800f998 <lwip_htons>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	b2db      	uxtb	r3, r3
 8016ac6:	f003 0304 	and.w	r3, r3, #4
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d006      	beq.n	8016adc <tcp_output+0x188>
 8016ace:	4b2f      	ldr	r3, [pc, #188]	; (8016b8c <tcp_output+0x238>)
 8016ad0:	f240 5236 	movw	r2, #1334	; 0x536
 8016ad4:	4932      	ldr	r1, [pc, #200]	; (8016ba0 <tcp_output+0x24c>)
 8016ad6:	482f      	ldr	r0, [pc, #188]	; (8016b94 <tcp_output+0x240>)
 8016ad8:	f004 fb3e 	bl	801b158 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d01f      	beq.n	8016b24 <tcp_output+0x1d0>
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	8b5b      	ldrh	r3, [r3, #26]
 8016ae8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d119      	bne.n	8016b24 <tcp_output+0x1d0>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d00b      	beq.n	8016b10 <tcp_output+0x1bc>
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d110      	bne.n	8016b24 <tcp_output+0x1d0>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b06:	891a      	ldrh	r2, [r3, #8]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	d209      	bcs.n	8016b24 <tcp_output+0x1d0>
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d004      	beq.n	8016b24 <tcp_output+0x1d0>
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b20:	2b08      	cmp	r3, #8
 8016b22:	d901      	bls.n	8016b28 <tcp_output+0x1d4>
 8016b24:	2301      	movs	r3, #1
 8016b26:	e000      	b.n	8016b2a <tcp_output+0x1d6>
 8016b28:	2300      	movs	r3, #0
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d106      	bne.n	8016b3c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	8b5b      	ldrh	r3, [r3, #26]
 8016b32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	f000 80e4 	beq.w	8016d04 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	7d1b      	ldrb	r3, [r3, #20]
 8016b40:	2b02      	cmp	r3, #2
 8016b42:	d00d      	beq.n	8016b60 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b46:	68db      	ldr	r3, [r3, #12]
 8016b48:	899b      	ldrh	r3, [r3, #12]
 8016b4a:	b29c      	uxth	r4, r3
 8016b4c:	2010      	movs	r0, #16
 8016b4e:	f7f8 ff23 	bl	800f998 <lwip_htons>
 8016b52:	4603      	mov	r3, r0
 8016b54:	461a      	mov	r2, r3
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	68db      	ldr	r3, [r3, #12]
 8016b5a:	4322      	orrs	r2, r4
 8016b5c:	b292      	uxth	r2, r2
 8016b5e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016b60:	697a      	ldr	r2, [r7, #20]
 8016b62:	6879      	ldr	r1, [r7, #4]
 8016b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b66:	f000 f909 	bl	8016d7c <tcp_output_segment>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d016      	beq.n	8016ba4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	8b5b      	ldrh	r3, [r3, #26]
 8016b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b7e:	b29a      	uxth	r2, r3
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	835a      	strh	r2, [r3, #26]
      return err;
 8016b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b88:	e0d3      	b.n	8016d32 <tcp_output+0x3de>
 8016b8a:	bf00      	nop
 8016b8c:	0801ea14 	.word	0x0801ea14
 8016b90:	0801ef58 	.word	0x0801ef58
 8016b94:	0801ea68 	.word	0x0801ea68
 8016b98:	0801ef70 	.word	0x0801ef70
 8016b9c:	2003d128 	.word	0x2003d128
 8016ba0:	0801ef98 	.word	0x0801ef98
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	7d1b      	ldrb	r3, [r3, #20]
 8016bb0:	2b02      	cmp	r3, #2
 8016bb2:	d006      	beq.n	8016bc2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	8b5b      	ldrh	r3, [r3, #26]
 8016bb8:	f023 0303 	bic.w	r3, r3, #3
 8016bbc:	b29a      	uxth	r2, r3
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc4:	68db      	ldr	r3, [r3, #12]
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7f8 fefa 	bl	800f9c2 <lwip_htonl>
 8016bce:	4604      	mov	r4, r0
 8016bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd2:	891b      	ldrh	r3, [r3, #8]
 8016bd4:	461d      	mov	r5, r3
 8016bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd8:	68db      	ldr	r3, [r3, #12]
 8016bda:	899b      	ldrh	r3, [r3, #12]
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7f8 feda 	bl	800f998 <lwip_htons>
 8016be4:	4603      	mov	r3, r0
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	f003 0303 	and.w	r3, r3, #3
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d001      	beq.n	8016bf4 <tcp_output+0x2a0>
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	e000      	b.n	8016bf6 <tcp_output+0x2a2>
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	442b      	add	r3, r5
 8016bf8:	4423      	add	r3, r4
 8016bfa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	1ad3      	subs	r3, r2, r3
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	da02      	bge.n	8016c0e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c10:	891b      	ldrh	r3, [r3, #8]
 8016c12:	461c      	mov	r4, r3
 8016c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c16:	68db      	ldr	r3, [r3, #12]
 8016c18:	899b      	ldrh	r3, [r3, #12]
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7f8 febb 	bl	800f998 <lwip_htons>
 8016c22:	4603      	mov	r3, r0
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	f003 0303 	and.w	r3, r3, #3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d001      	beq.n	8016c32 <tcp_output+0x2de>
 8016c2e:	2301      	movs	r3, #1
 8016c30:	e000      	b.n	8016c34 <tcp_output+0x2e0>
 8016c32:	2300      	movs	r3, #0
 8016c34:	4423      	add	r3, r4
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d049      	beq.n	8016cce <tcp_output+0x37a>
      seg->next = NULL;
 8016c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d105      	bne.n	8016c54 <tcp_output+0x300>
        pcb->unacked = seg;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c4c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c50:	623b      	str	r3, [r7, #32]
 8016c52:	e03f      	b.n	8016cd4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7f8 feb1 	bl	800f9c2 <lwip_htonl>
 8016c60:	4604      	mov	r4, r0
 8016c62:	6a3b      	ldr	r3, [r7, #32]
 8016c64:	68db      	ldr	r3, [r3, #12]
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7f8 feaa 	bl	800f9c2 <lwip_htonl>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	1ae3      	subs	r3, r4, r3
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	da24      	bge.n	8016cc0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	3370      	adds	r3, #112	; 0x70
 8016c7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016c7c:	e002      	b.n	8016c84 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016c7e:	69fb      	ldr	r3, [r7, #28]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016c84:	69fb      	ldr	r3, [r7, #28]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d011      	beq.n	8016cb0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016c8c:	69fb      	ldr	r3, [r7, #28]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	68db      	ldr	r3, [r3, #12]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	4618      	mov	r0, r3
 8016c96:	f7f8 fe94 	bl	800f9c2 <lwip_htonl>
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9e:	68db      	ldr	r3, [r3, #12]
 8016ca0:	685b      	ldr	r3, [r3, #4]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7f8 fe8d 	bl	800f9c2 <lwip_htonl>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	dbe6      	blt.n	8016c7e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016cb0:	69fb      	ldr	r3, [r7, #28]
 8016cb2:	681a      	ldr	r2, [r3, #0]
 8016cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016cb8:	69fb      	ldr	r3, [r7, #28]
 8016cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cbc:	601a      	str	r2, [r3, #0]
 8016cbe:	e009      	b.n	8016cd4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016cc0:	6a3b      	ldr	r3, [r7, #32]
 8016cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cc4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016cc6:	6a3b      	ldr	r3, [r7, #32]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	623b      	str	r3, [r7, #32]
 8016ccc:	e002      	b.n	8016cd4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cd0:	f7fb ff19 	bl	8012b06 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d012      	beq.n	8016d06 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce2:	68db      	ldr	r3, [r3, #12]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7f8 fe6b 	bl	800f9c2 <lwip_htonl>
 8016cec:	4602      	mov	r2, r0
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cf2:	1ad3      	subs	r3, r2, r3
 8016cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cf6:	8912      	ldrh	r2, [r2, #8]
 8016cf8:	4413      	add	r3, r2
  while (seg != NULL &&
 8016cfa:	69ba      	ldr	r2, [r7, #24]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	f4bf aed9 	bcs.w	8016ab4 <tcp_output+0x160>
 8016d02:	e000      	b.n	8016d06 <tcp_output+0x3b2>
      break;
 8016d04:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d108      	bne.n	8016d20 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2200      	movs	r2, #0
 8016d12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016d16:	e004      	b.n	8016d22 <tcp_output+0x3ce>
    goto output_done;
 8016d18:	bf00      	nop
 8016d1a:	e002      	b.n	8016d22 <tcp_output+0x3ce>
    goto output_done;
 8016d1c:	bf00      	nop
 8016d1e:	e000      	b.n	8016d22 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016d20:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	8b5b      	ldrh	r3, [r3, #26]
 8016d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016d2a:	b29a      	uxth	r2, r3
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016d30:	2300      	movs	r3, #0
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3728      	adds	r7, #40	; 0x28
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bdb0      	pop	{r4, r5, r7, pc}
 8016d3a:	bf00      	nop

08016d3c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d106      	bne.n	8016d58 <tcp_output_segment_busy+0x1c>
 8016d4a:	4b09      	ldr	r3, [pc, #36]	; (8016d70 <tcp_output_segment_busy+0x34>)
 8016d4c:	f240 529a 	movw	r2, #1434	; 0x59a
 8016d50:	4908      	ldr	r1, [pc, #32]	; (8016d74 <tcp_output_segment_busy+0x38>)
 8016d52:	4809      	ldr	r0, [pc, #36]	; (8016d78 <tcp_output_segment_busy+0x3c>)
 8016d54:	f004 fa00 	bl	801b158 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	685b      	ldr	r3, [r3, #4]
 8016d5c:	7b9b      	ldrb	r3, [r3, #14]
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d001      	beq.n	8016d66 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016d62:	2301      	movs	r3, #1
 8016d64:	e000      	b.n	8016d68 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016d66:	2300      	movs	r3, #0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3708      	adds	r7, #8
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	0801ea14 	.word	0x0801ea14
 8016d74:	0801efb0 	.word	0x0801efb0
 8016d78:	0801ea68 	.word	0x0801ea68

08016d7c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016d7c:	b5b0      	push	{r4, r5, r7, lr}
 8016d7e:	b08c      	sub	sp, #48	; 0x30
 8016d80:	af04      	add	r7, sp, #16
 8016d82:	60f8      	str	r0, [r7, #12]
 8016d84:	60b9      	str	r1, [r7, #8]
 8016d86:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d106      	bne.n	8016d9c <tcp_output_segment+0x20>
 8016d8e:	4b64      	ldr	r3, [pc, #400]	; (8016f20 <tcp_output_segment+0x1a4>)
 8016d90:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016d94:	4963      	ldr	r1, [pc, #396]	; (8016f24 <tcp_output_segment+0x1a8>)
 8016d96:	4864      	ldr	r0, [pc, #400]	; (8016f28 <tcp_output_segment+0x1ac>)
 8016d98:	f004 f9de 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d106      	bne.n	8016db0 <tcp_output_segment+0x34>
 8016da2:	4b5f      	ldr	r3, [pc, #380]	; (8016f20 <tcp_output_segment+0x1a4>)
 8016da4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016da8:	4960      	ldr	r1, [pc, #384]	; (8016f2c <tcp_output_segment+0x1b0>)
 8016daa:	485f      	ldr	r0, [pc, #380]	; (8016f28 <tcp_output_segment+0x1ac>)
 8016dac:	f004 f9d4 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d106      	bne.n	8016dc4 <tcp_output_segment+0x48>
 8016db6:	4b5a      	ldr	r3, [pc, #360]	; (8016f20 <tcp_output_segment+0x1a4>)
 8016db8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016dbc:	495c      	ldr	r1, [pc, #368]	; (8016f30 <tcp_output_segment+0x1b4>)
 8016dbe:	485a      	ldr	r0, [pc, #360]	; (8016f28 <tcp_output_segment+0x1ac>)
 8016dc0:	f004 f9ca 	bl	801b158 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	f7ff ffb9 	bl	8016d3c <tcp_output_segment_busy>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d001      	beq.n	8016dd4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	e0a1      	b.n	8016f18 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	68dc      	ldr	r4, [r3, #12]
 8016ddc:	4610      	mov	r0, r2
 8016dde:	f7f8 fdf0 	bl	800f9c2 <lwip_htonl>
 8016de2:	4603      	mov	r3, r0
 8016de4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	68dc      	ldr	r4, [r3, #12]
 8016dee:	4610      	mov	r0, r2
 8016df0:	f7f8 fdd2 	bl	800f998 <lwip_htons>
 8016df4:	4603      	mov	r3, r0
 8016df6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dfc:	68ba      	ldr	r2, [r7, #8]
 8016dfe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016e00:	441a      	add	r2, r3
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	68db      	ldr	r3, [r3, #12]
 8016e0a:	3314      	adds	r3, #20
 8016e0c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	7a9b      	ldrb	r3, [r3, #10]
 8016e12:	f003 0301 	and.w	r3, r3, #1
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d015      	beq.n	8016e46 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	3304      	adds	r3, #4
 8016e1e:	461a      	mov	r2, r3
 8016e20:	6879      	ldr	r1, [r7, #4]
 8016e22:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016e26:	f7fc fa33 	bl	8013290 <tcp_eff_send_mss_netif>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016e2e:	8b7b      	ldrh	r3, [r7, #26]
 8016e30:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f8 fdc4 	bl	800f9c2 <lwip_htonl>
 8016e3a:	4602      	mov	r2, r0
 8016e3c:	69fb      	ldr	r3, [r7, #28]
 8016e3e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016e40:	69fb      	ldr	r3, [r7, #28]
 8016e42:	3304      	adds	r3, #4
 8016e44:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	da02      	bge.n	8016e56 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	2200      	movs	r2, #0
 8016e54:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016e56:	68bb      	ldr	r3, [r7, #8]
 8016e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d10c      	bne.n	8016e78 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016e5e:	4b35      	ldr	r3, [pc, #212]	; (8016f34 <tcp_output_segment+0x1b8>)
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	68db      	ldr	r3, [r3, #12]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f7f8 fda8 	bl	800f9c2 <lwip_htonl>
 8016e72:	4602      	mov	r2, r0
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	68da      	ldr	r2, [r3, #12]
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	685b      	ldr	r3, [r3, #4]
 8016e82:	1ad3      	subs	r3, r2, r3
 8016e84:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	8959      	ldrh	r1, [r3, #10]
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	8b3a      	ldrh	r2, [r7, #24]
 8016e92:	1a8a      	subs	r2, r1, r2
 8016e94:	b292      	uxth	r2, r2
 8016e96:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	685b      	ldr	r3, [r3, #4]
 8016e9c:	8919      	ldrh	r1, [r3, #8]
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	8b3a      	ldrh	r2, [r7, #24]
 8016ea4:	1a8a      	subs	r2, r1, r2
 8016ea6:	b292      	uxth	r2, r2
 8016ea8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	685b      	ldr	r3, [r3, #4]
 8016eae:	68fa      	ldr	r2, [r7, #12]
 8016eb0:	68d2      	ldr	r2, [r2, #12]
 8016eb2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	2200      	movs	r2, #0
 8016eba:	741a      	strb	r2, [r3, #16]
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	68da      	ldr	r2, [r3, #12]
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	7a9b      	ldrb	r3, [r3, #10]
 8016ec8:	f003 0301 	and.w	r3, r3, #1
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d001      	beq.n	8016ed4 <tcp_output_segment+0x158>
 8016ed0:	2318      	movs	r3, #24
 8016ed2:	e000      	b.n	8016ed6 <tcp_output_segment+0x15a>
 8016ed4:	2314      	movs	r3, #20
 8016ed6:	4413      	add	r3, r2
 8016ed8:	69fa      	ldr	r2, [r7, #28]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d006      	beq.n	8016eec <tcp_output_segment+0x170>
 8016ede:	4b10      	ldr	r3, [pc, #64]	; (8016f20 <tcp_output_segment+0x1a4>)
 8016ee0:	f240 621c 	movw	r2, #1564	; 0x61c
 8016ee4:	4914      	ldr	r1, [pc, #80]	; (8016f38 <tcp_output_segment+0x1bc>)
 8016ee6:	4810      	ldr	r0, [pc, #64]	; (8016f28 <tcp_output_segment+0x1ac>)
 8016ee8:	f004 f936 	bl	801b158 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	6858      	ldr	r0, [r3, #4]
 8016ef0:	68b9      	ldr	r1, [r7, #8]
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	1d1c      	adds	r4, r3, #4
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	7add      	ldrb	r5, [r3, #11]
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	7a9b      	ldrb	r3, [r3, #10]
 8016efe:	687a      	ldr	r2, [r7, #4]
 8016f00:	9202      	str	r2, [sp, #8]
 8016f02:	2206      	movs	r2, #6
 8016f04:	9201      	str	r2, [sp, #4]
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	462b      	mov	r3, r5
 8016f0a:	4622      	mov	r2, r4
 8016f0c:	f002 fd94 	bl	8019a38 <ip4_output_if>
 8016f10:	4603      	mov	r3, r0
 8016f12:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3720      	adds	r7, #32
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8016f20:	0801ea14 	.word	0x0801ea14
 8016f24:	0801efd8 	.word	0x0801efd8
 8016f28:	0801ea68 	.word	0x0801ea68
 8016f2c:	0801eff8 	.word	0x0801eff8
 8016f30:	0801f018 	.word	0x0801f018
 8016f34:	2003d0dc 	.word	0x2003d0dc
 8016f38:	0801f03c 	.word	0x0801f03c

08016f3c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016f3c:	b5b0      	push	{r4, r5, r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d106      	bne.n	8016f58 <tcp_rexmit_rto_prepare+0x1c>
 8016f4a:	4b31      	ldr	r3, [pc, #196]	; (8017010 <tcp_rexmit_rto_prepare+0xd4>)
 8016f4c:	f240 6263 	movw	r2, #1635	; 0x663
 8016f50:	4930      	ldr	r1, [pc, #192]	; (8017014 <tcp_rexmit_rto_prepare+0xd8>)
 8016f52:	4831      	ldr	r0, [pc, #196]	; (8017018 <tcp_rexmit_rto_prepare+0xdc>)
 8016f54:	f004 f900 	bl	801b158 <iprintf>

  if (pcb->unacked == NULL) {
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d102      	bne.n	8016f66 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016f60:	f06f 0305 	mvn.w	r3, #5
 8016f64:	e050      	b.n	8017008 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f6a:	60fb      	str	r3, [r7, #12]
 8016f6c:	e00b      	b.n	8016f86 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016f6e:	68f8      	ldr	r0, [r7, #12]
 8016f70:	f7ff fee4 	bl	8016d3c <tcp_output_segment_busy>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d002      	beq.n	8016f80 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016f7a:	f06f 0305 	mvn.w	r3, #5
 8016f7e:	e043      	b.n	8017008 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	60fb      	str	r3, [r7, #12]
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d1ef      	bne.n	8016f6e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	f7ff fed4 	bl	8016d3c <tcp_output_segment_busy>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d002      	beq.n	8016fa0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016f9a:	f06f 0305 	mvn.w	r3, #5
 8016f9e:	e033      	b.n	8017008 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	8b5b      	ldrh	r3, [r3, #26]
 8016fba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016fbe:	b29a      	uxth	r2, r3
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	685b      	ldr	r3, [r3, #4]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7f8 fcf9 	bl	800f9c2 <lwip_htonl>
 8016fd0:	4604      	mov	r4, r0
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	891b      	ldrh	r3, [r3, #8]
 8016fd6:	461d      	mov	r5, r3
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	68db      	ldr	r3, [r3, #12]
 8016fdc:	899b      	ldrh	r3, [r3, #12]
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f7f8 fcd9 	bl	800f998 <lwip_htons>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	b2db      	uxtb	r3, r3
 8016fea:	f003 0303 	and.w	r3, r3, #3
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d001      	beq.n	8016ff6 <tcp_rexmit_rto_prepare+0xba>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	e000      	b.n	8016ff8 <tcp_rexmit_rto_prepare+0xbc>
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	442b      	add	r3, r5
 8016ffa:	18e2      	adds	r2, r4, r3
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2200      	movs	r2, #0
 8017004:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017006:	2300      	movs	r3, #0
}
 8017008:	4618      	mov	r0, r3
 801700a:	3710      	adds	r7, #16
 801700c:	46bd      	mov	sp, r7
 801700e:	bdb0      	pop	{r4, r5, r7, pc}
 8017010:	0801ea14 	.word	0x0801ea14
 8017014:	0801f050 	.word	0x0801f050
 8017018:	0801ea68 	.word	0x0801ea68

0801701c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d106      	bne.n	8017038 <tcp_rexmit_rto_commit+0x1c>
 801702a:	4b0d      	ldr	r3, [pc, #52]	; (8017060 <tcp_rexmit_rto_commit+0x44>)
 801702c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017030:	490c      	ldr	r1, [pc, #48]	; (8017064 <tcp_rexmit_rto_commit+0x48>)
 8017032:	480d      	ldr	r0, [pc, #52]	; (8017068 <tcp_rexmit_rto_commit+0x4c>)
 8017034:	f004 f890 	bl	801b158 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801703e:	2bff      	cmp	r3, #255	; 0xff
 8017040:	d007      	beq.n	8017052 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017048:	3301      	adds	r3, #1
 801704a:	b2da      	uxtb	r2, r3
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f7ff fc7e 	bl	8016954 <tcp_output>
}
 8017058:	bf00      	nop
 801705a:	3708      	adds	r7, #8
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	0801ea14 	.word	0x0801ea14
 8017064:	0801f074 	.word	0x0801f074
 8017068:	0801ea68 	.word	0x0801ea68

0801706c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b082      	sub	sp, #8
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d106      	bne.n	8017088 <tcp_rexmit_rto+0x1c>
 801707a:	4b0a      	ldr	r3, [pc, #40]	; (80170a4 <tcp_rexmit_rto+0x38>)
 801707c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017080:	4909      	ldr	r1, [pc, #36]	; (80170a8 <tcp_rexmit_rto+0x3c>)
 8017082:	480a      	ldr	r0, [pc, #40]	; (80170ac <tcp_rexmit_rto+0x40>)
 8017084:	f004 f868 	bl	801b158 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f7ff ff57 	bl	8016f3c <tcp_rexmit_rto_prepare>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	d102      	bne.n	801709a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f7ff ffc1 	bl	801701c <tcp_rexmit_rto_commit>
  }
}
 801709a:	bf00      	nop
 801709c:	3708      	adds	r7, #8
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	0801ea14 	.word	0x0801ea14
 80170a8:	0801f098 	.word	0x0801f098
 80170ac:	0801ea68 	.word	0x0801ea68

080170b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80170b0:	b590      	push	{r4, r7, lr}
 80170b2:	b085      	sub	sp, #20
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d106      	bne.n	80170cc <tcp_rexmit+0x1c>
 80170be:	4b2f      	ldr	r3, [pc, #188]	; (801717c <tcp_rexmit+0xcc>)
 80170c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80170c4:	492e      	ldr	r1, [pc, #184]	; (8017180 <tcp_rexmit+0xd0>)
 80170c6:	482f      	ldr	r0, [pc, #188]	; (8017184 <tcp_rexmit+0xd4>)
 80170c8:	f004 f846 	bl	801b158 <iprintf>

  if (pcb->unacked == NULL) {
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d102      	bne.n	80170da <tcp_rexmit+0x2a>
    return ERR_VAL;
 80170d4:	f06f 0305 	mvn.w	r3, #5
 80170d8:	e04c      	b.n	8017174 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80170e0:	68b8      	ldr	r0, [r7, #8]
 80170e2:	f7ff fe2b 	bl	8016d3c <tcp_output_segment_busy>
 80170e6:	4603      	mov	r3, r0
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d002      	beq.n	80170f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80170ec:	f06f 0305 	mvn.w	r3, #5
 80170f0:	e040      	b.n	8017174 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80170f2:	68bb      	ldr	r3, [r7, #8]
 80170f4:	681a      	ldr	r2, [r3, #0]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	336c      	adds	r3, #108	; 0x6c
 80170fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017100:	e002      	b.n	8017108 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d011      	beq.n	8017134 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	4618      	mov	r0, r3
 801711a:	f7f8 fc52 	bl	800f9c2 <lwip_htonl>
 801711e:	4604      	mov	r4, r0
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	68db      	ldr	r3, [r3, #12]
 8017124:	685b      	ldr	r3, [r3, #4]
 8017126:	4618      	mov	r0, r3
 8017128:	f7f8 fc4b 	bl	800f9c2 <lwip_htonl>
 801712c:	4603      	mov	r3, r0
 801712e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017130:	2b00      	cmp	r3, #0
 8017132:	dbe6      	blt.n	8017102 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	681a      	ldr	r2, [r3, #0]
 8017138:	68bb      	ldr	r3, [r7, #8]
 801713a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	68ba      	ldr	r2, [r7, #8]
 8017140:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d103      	bne.n	8017152 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2200      	movs	r2, #0
 801714e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017158:	2bff      	cmp	r3, #255	; 0xff
 801715a:	d007      	beq.n	801716c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017162:	3301      	adds	r3, #1
 8017164:	b2da      	uxtb	r2, r3
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2200      	movs	r2, #0
 8017170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017172:	2300      	movs	r3, #0
}
 8017174:	4618      	mov	r0, r3
 8017176:	3714      	adds	r7, #20
 8017178:	46bd      	mov	sp, r7
 801717a:	bd90      	pop	{r4, r7, pc}
 801717c:	0801ea14 	.word	0x0801ea14
 8017180:	0801f0b4 	.word	0x0801f0b4
 8017184:	0801ea68 	.word	0x0801ea68

08017188 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d106      	bne.n	80171a4 <tcp_rexmit_fast+0x1c>
 8017196:	4b2a      	ldr	r3, [pc, #168]	; (8017240 <tcp_rexmit_fast+0xb8>)
 8017198:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801719c:	4929      	ldr	r1, [pc, #164]	; (8017244 <tcp_rexmit_fast+0xbc>)
 801719e:	482a      	ldr	r0, [pc, #168]	; (8017248 <tcp_rexmit_fast+0xc0>)
 80171a0:	f003 ffda 	bl	801b158 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d045      	beq.n	8017238 <tcp_rexmit_fast+0xb0>
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	8b5b      	ldrh	r3, [r3, #26]
 80171b0:	f003 0304 	and.w	r3, r3, #4
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d13f      	bne.n	8017238 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f7ff ff79 	bl	80170b0 <tcp_rexmit>
 80171be:	4603      	mov	r3, r0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d139      	bne.n	8017238 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171d0:	4293      	cmp	r3, r2
 80171d2:	bf28      	it	cs
 80171d4:	4613      	movcs	r3, r2
 80171d6:	b29b      	uxth	r3, r3
 80171d8:	2b00      	cmp	r3, #0
 80171da:	da00      	bge.n	80171de <tcp_rexmit_fast+0x56>
 80171dc:	3301      	adds	r3, #1
 80171de:	105b      	asrs	r3, r3, #1
 80171e0:	b29a      	uxth	r2, r3
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80171ee:	461a      	mov	r2, r3
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171f4:	005b      	lsls	r3, r3, #1
 80171f6:	429a      	cmp	r2, r3
 80171f8:	d206      	bcs.n	8017208 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171fe:	005b      	lsls	r3, r3, #1
 8017200:	b29a      	uxth	r2, r3
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017212:	4619      	mov	r1, r3
 8017214:	0049      	lsls	r1, r1, #1
 8017216:	440b      	add	r3, r1
 8017218:	b29b      	uxth	r3, r3
 801721a:	4413      	add	r3, r2
 801721c:	b29a      	uxth	r2, r3
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	8b5b      	ldrh	r3, [r3, #26]
 8017228:	f043 0304 	orr.w	r3, r3, #4
 801722c:	b29a      	uxth	r2, r3
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2200      	movs	r2, #0
 8017236:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017238:	bf00      	nop
 801723a:	3708      	adds	r7, #8
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}
 8017240:	0801ea14 	.word	0x0801ea14
 8017244:	0801f0cc 	.word	0x0801f0cc
 8017248:	0801ea68 	.word	0x0801ea68

0801724c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b086      	sub	sp, #24
 8017250:	af00      	add	r7, sp, #0
 8017252:	60f8      	str	r0, [r7, #12]
 8017254:	607b      	str	r3, [r7, #4]
 8017256:	460b      	mov	r3, r1
 8017258:	817b      	strh	r3, [r7, #10]
 801725a:	4613      	mov	r3, r2
 801725c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801725e:	897a      	ldrh	r2, [r7, #10]
 8017260:	893b      	ldrh	r3, [r7, #8]
 8017262:	4413      	add	r3, r2
 8017264:	b29b      	uxth	r3, r3
 8017266:	3314      	adds	r3, #20
 8017268:	b29b      	uxth	r3, r3
 801726a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801726e:	4619      	mov	r1, r3
 8017270:	2022      	movs	r0, #34	; 0x22
 8017272:	f7f9 fc9f 	bl	8010bb4 <pbuf_alloc>
 8017276:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017278:	697b      	ldr	r3, [r7, #20]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d04d      	beq.n	801731a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801727e:	897b      	ldrh	r3, [r7, #10]
 8017280:	3313      	adds	r3, #19
 8017282:	697a      	ldr	r2, [r7, #20]
 8017284:	8952      	ldrh	r2, [r2, #10]
 8017286:	4293      	cmp	r3, r2
 8017288:	db06      	blt.n	8017298 <tcp_output_alloc_header_common+0x4c>
 801728a:	4b26      	ldr	r3, [pc, #152]	; (8017324 <tcp_output_alloc_header_common+0xd8>)
 801728c:	f240 7223 	movw	r2, #1827	; 0x723
 8017290:	4925      	ldr	r1, [pc, #148]	; (8017328 <tcp_output_alloc_header_common+0xdc>)
 8017292:	4826      	ldr	r0, [pc, #152]	; (801732c <tcp_output_alloc_header_common+0xe0>)
 8017294:	f003 ff60 	bl	801b158 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	685b      	ldr	r3, [r3, #4]
 801729c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801729e:	8c3b      	ldrh	r3, [r7, #32]
 80172a0:	4618      	mov	r0, r3
 80172a2:	f7f8 fb79 	bl	800f998 <lwip_htons>
 80172a6:	4603      	mov	r3, r0
 80172a8:	461a      	mov	r2, r3
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80172ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7f8 fb71 	bl	800f998 <lwip_htons>
 80172b6:	4603      	mov	r3, r0
 80172b8:	461a      	mov	r2, r3
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	687a      	ldr	r2, [r7, #4]
 80172c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80172c4:	68f8      	ldr	r0, [r7, #12]
 80172c6:	f7f8 fb7c 	bl	800f9c2 <lwip_htonl>
 80172ca:	4602      	mov	r2, r0
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80172d0:	897b      	ldrh	r3, [r7, #10]
 80172d2:	089b      	lsrs	r3, r3, #2
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	3305      	adds	r3, #5
 80172d8:	b29b      	uxth	r3, r3
 80172da:	031b      	lsls	r3, r3, #12
 80172dc:	b29a      	uxth	r2, r3
 80172de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80172e2:	b29b      	uxth	r3, r3
 80172e4:	4313      	orrs	r3, r2
 80172e6:	b29b      	uxth	r3, r3
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7f8 fb55 	bl	800f998 <lwip_htons>
 80172ee:	4603      	mov	r3, r0
 80172f0:	461a      	mov	r2, r3
 80172f2:	693b      	ldr	r3, [r7, #16]
 80172f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80172f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80172f8:	4618      	mov	r0, r3
 80172fa:	f7f8 fb4d 	bl	800f998 <lwip_htons>
 80172fe:	4603      	mov	r3, r0
 8017300:	461a      	mov	r2, r3
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	2200      	movs	r2, #0
 801730a:	741a      	strb	r2, [r3, #16]
 801730c:	2200      	movs	r2, #0
 801730e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	2200      	movs	r2, #0
 8017314:	749a      	strb	r2, [r3, #18]
 8017316:	2200      	movs	r2, #0
 8017318:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801731a:	697b      	ldr	r3, [r7, #20]
}
 801731c:	4618      	mov	r0, r3
 801731e:	3718      	adds	r7, #24
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	0801ea14 	.word	0x0801ea14
 8017328:	0801f0ec 	.word	0x0801f0ec
 801732c:	0801ea68 	.word	0x0801ea68

08017330 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017330:	b5b0      	push	{r4, r5, r7, lr}
 8017332:	b08a      	sub	sp, #40	; 0x28
 8017334:	af04      	add	r7, sp, #16
 8017336:	60f8      	str	r0, [r7, #12]
 8017338:	607b      	str	r3, [r7, #4]
 801733a:	460b      	mov	r3, r1
 801733c:	817b      	strh	r3, [r7, #10]
 801733e:	4613      	mov	r3, r2
 8017340:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d106      	bne.n	8017356 <tcp_output_alloc_header+0x26>
 8017348:	4b15      	ldr	r3, [pc, #84]	; (80173a0 <tcp_output_alloc_header+0x70>)
 801734a:	f240 7242 	movw	r2, #1858	; 0x742
 801734e:	4915      	ldr	r1, [pc, #84]	; (80173a4 <tcp_output_alloc_header+0x74>)
 8017350:	4815      	ldr	r0, [pc, #84]	; (80173a8 <tcp_output_alloc_header+0x78>)
 8017352:	f003 ff01 	bl	801b158 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	8adb      	ldrh	r3, [r3, #22]
 801735e:	68fa      	ldr	r2, [r7, #12]
 8017360:	8b12      	ldrh	r2, [r2, #24]
 8017362:	68f9      	ldr	r1, [r7, #12]
 8017364:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017366:	893d      	ldrh	r5, [r7, #8]
 8017368:	897c      	ldrh	r4, [r7, #10]
 801736a:	9103      	str	r1, [sp, #12]
 801736c:	2110      	movs	r1, #16
 801736e:	9102      	str	r1, [sp, #8]
 8017370:	9201      	str	r2, [sp, #4]
 8017372:	9300      	str	r3, [sp, #0]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	462a      	mov	r2, r5
 8017378:	4621      	mov	r1, r4
 801737a:	f7ff ff67 	bl	801724c <tcp_output_alloc_header_common>
 801737e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d006      	beq.n	8017394 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801738a:	68fa      	ldr	r2, [r7, #12]
 801738c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801738e:	441a      	add	r2, r3
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017394:	697b      	ldr	r3, [r7, #20]
}
 8017396:	4618      	mov	r0, r3
 8017398:	3718      	adds	r7, #24
 801739a:	46bd      	mov	sp, r7
 801739c:	bdb0      	pop	{r4, r5, r7, pc}
 801739e:	bf00      	nop
 80173a0:	0801ea14 	.word	0x0801ea14
 80173a4:	0801f11c 	.word	0x0801f11c
 80173a8:	0801ea68 	.word	0x0801ea68

080173ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b088      	sub	sp, #32
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	60f8      	str	r0, [r7, #12]
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	4611      	mov	r1, r2
 80173b8:	461a      	mov	r2, r3
 80173ba:	460b      	mov	r3, r1
 80173bc:	71fb      	strb	r3, [r7, #7]
 80173be:	4613      	mov	r3, r2
 80173c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80173c2:	2300      	movs	r3, #0
 80173c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d106      	bne.n	80173da <tcp_output_fill_options+0x2e>
 80173cc:	4b12      	ldr	r3, [pc, #72]	; (8017418 <tcp_output_fill_options+0x6c>)
 80173ce:	f240 7256 	movw	r2, #1878	; 0x756
 80173d2:	4912      	ldr	r1, [pc, #72]	; (801741c <tcp_output_fill_options+0x70>)
 80173d4:	4812      	ldr	r0, [pc, #72]	; (8017420 <tcp_output_fill_options+0x74>)
 80173d6:	f003 febf 	bl	801b158 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80173da:	68bb      	ldr	r3, [r7, #8]
 80173dc:	685b      	ldr	r3, [r3, #4]
 80173de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80173e0:	69bb      	ldr	r3, [r7, #24]
 80173e2:	3314      	adds	r3, #20
 80173e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80173e6:	8bfb      	ldrh	r3, [r7, #30]
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	461a      	mov	r2, r3
 80173ec:	79fb      	ldrb	r3, [r7, #7]
 80173ee:	009b      	lsls	r3, r3, #2
 80173f0:	f003 0304 	and.w	r3, r3, #4
 80173f4:	4413      	add	r3, r2
 80173f6:	3314      	adds	r3, #20
 80173f8:	69ba      	ldr	r2, [r7, #24]
 80173fa:	4413      	add	r3, r2
 80173fc:	697a      	ldr	r2, [r7, #20]
 80173fe:	429a      	cmp	r2, r3
 8017400:	d006      	beq.n	8017410 <tcp_output_fill_options+0x64>
 8017402:	4b05      	ldr	r3, [pc, #20]	; (8017418 <tcp_output_fill_options+0x6c>)
 8017404:	f240 7275 	movw	r2, #1909	; 0x775
 8017408:	4906      	ldr	r1, [pc, #24]	; (8017424 <tcp_output_fill_options+0x78>)
 801740a:	4805      	ldr	r0, [pc, #20]	; (8017420 <tcp_output_fill_options+0x74>)
 801740c:	f003 fea4 	bl	801b158 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017410:	bf00      	nop
 8017412:	3720      	adds	r7, #32
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	0801ea14 	.word	0x0801ea14
 801741c:	0801f144 	.word	0x0801f144
 8017420:	0801ea68 	.word	0x0801ea68
 8017424:	0801f03c 	.word	0x0801f03c

08017428 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b08a      	sub	sp, #40	; 0x28
 801742c:	af04      	add	r7, sp, #16
 801742e:	60f8      	str	r0, [r7, #12]
 8017430:	60b9      	str	r1, [r7, #8]
 8017432:	607a      	str	r2, [r7, #4]
 8017434:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d106      	bne.n	801744a <tcp_output_control_segment+0x22>
 801743c:	4b1c      	ldr	r3, [pc, #112]	; (80174b0 <tcp_output_control_segment+0x88>)
 801743e:	f240 7287 	movw	r2, #1927	; 0x787
 8017442:	491c      	ldr	r1, [pc, #112]	; (80174b4 <tcp_output_control_segment+0x8c>)
 8017444:	481c      	ldr	r0, [pc, #112]	; (80174b8 <tcp_output_control_segment+0x90>)
 8017446:	f003 fe87 	bl	801b158 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801744a:	683a      	ldr	r2, [r7, #0]
 801744c:	6879      	ldr	r1, [r7, #4]
 801744e:	68f8      	ldr	r0, [r7, #12]
 8017450:	f7fe fae8 	bl	8015a24 <tcp_route>
 8017454:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d102      	bne.n	8017462 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801745c:	23fc      	movs	r3, #252	; 0xfc
 801745e:	75fb      	strb	r3, [r7, #23]
 8017460:	e01c      	b.n	801749c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d006      	beq.n	8017476 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	7adb      	ldrb	r3, [r3, #11]
 801746c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	7a9b      	ldrb	r3, [r3, #10]
 8017472:	757b      	strb	r3, [r7, #21]
 8017474:	e003      	b.n	801747e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017476:	23ff      	movs	r3, #255	; 0xff
 8017478:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801747a:	2300      	movs	r3, #0
 801747c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801747e:	7dba      	ldrb	r2, [r7, #22]
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	9302      	str	r3, [sp, #8]
 8017484:	2306      	movs	r3, #6
 8017486:	9301      	str	r3, [sp, #4]
 8017488:	7d7b      	ldrb	r3, [r7, #21]
 801748a:	9300      	str	r3, [sp, #0]
 801748c:	4613      	mov	r3, r2
 801748e:	683a      	ldr	r2, [r7, #0]
 8017490:	6879      	ldr	r1, [r7, #4]
 8017492:	68b8      	ldr	r0, [r7, #8]
 8017494:	f002 fad0 	bl	8019a38 <ip4_output_if>
 8017498:	4603      	mov	r3, r0
 801749a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801749c:	68b8      	ldr	r0, [r7, #8]
 801749e:	f7f9 fe9f 	bl	80111e0 <pbuf_free>
  return err;
 80174a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174a6:	4618      	mov	r0, r3
 80174a8:	3718      	adds	r7, #24
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
 80174ae:	bf00      	nop
 80174b0:	0801ea14 	.word	0x0801ea14
 80174b4:	0801f16c 	.word	0x0801f16c
 80174b8:	0801ea68 	.word	0x0801ea68

080174bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80174bc:	b590      	push	{r4, r7, lr}
 80174be:	b08b      	sub	sp, #44	; 0x2c
 80174c0:	af04      	add	r7, sp, #16
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	607a      	str	r2, [r7, #4]
 80174c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d106      	bne.n	80174de <tcp_rst+0x22>
 80174d0:	4b1f      	ldr	r3, [pc, #124]	; (8017550 <tcp_rst+0x94>)
 80174d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80174d6:	491f      	ldr	r1, [pc, #124]	; (8017554 <tcp_rst+0x98>)
 80174d8:	481f      	ldr	r0, [pc, #124]	; (8017558 <tcp_rst+0x9c>)
 80174da:	f003 fe3d 	bl	801b158 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80174de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d106      	bne.n	80174f2 <tcp_rst+0x36>
 80174e4:	4b1a      	ldr	r3, [pc, #104]	; (8017550 <tcp_rst+0x94>)
 80174e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80174ea:	491c      	ldr	r1, [pc, #112]	; (801755c <tcp_rst+0xa0>)
 80174ec:	481a      	ldr	r0, [pc, #104]	; (8017558 <tcp_rst+0x9c>)
 80174ee:	f003 fe33 	bl	801b158 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80174f2:	2300      	movs	r3, #0
 80174f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80174f6:	f246 0308 	movw	r3, #24584	; 0x6008
 80174fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80174fc:	7dfb      	ldrb	r3, [r7, #23]
 80174fe:	b29c      	uxth	r4, r3
 8017500:	68b8      	ldr	r0, [r7, #8]
 8017502:	f7f8 fa5e 	bl	800f9c2 <lwip_htonl>
 8017506:	4602      	mov	r2, r0
 8017508:	8abb      	ldrh	r3, [r7, #20]
 801750a:	9303      	str	r3, [sp, #12]
 801750c:	2314      	movs	r3, #20
 801750e:	9302      	str	r3, [sp, #8]
 8017510:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017512:	9301      	str	r3, [sp, #4]
 8017514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	4613      	mov	r3, r2
 801751a:	2200      	movs	r2, #0
 801751c:	4621      	mov	r1, r4
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f7ff fe94 	bl	801724c <tcp_output_alloc_header_common>
 8017524:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d00c      	beq.n	8017546 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801752c:	7dfb      	ldrb	r3, [r7, #23]
 801752e:	2200      	movs	r2, #0
 8017530:	6939      	ldr	r1, [r7, #16]
 8017532:	68f8      	ldr	r0, [r7, #12]
 8017534:	f7ff ff3a 	bl	80173ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753a:	683a      	ldr	r2, [r7, #0]
 801753c:	6939      	ldr	r1, [r7, #16]
 801753e:	68f8      	ldr	r0, [r7, #12]
 8017540:	f7ff ff72 	bl	8017428 <tcp_output_control_segment>
 8017544:	e000      	b.n	8017548 <tcp_rst+0x8c>
    return;
 8017546:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017548:	371c      	adds	r7, #28
 801754a:	46bd      	mov	sp, r7
 801754c:	bd90      	pop	{r4, r7, pc}
 801754e:	bf00      	nop
 8017550:	0801ea14 	.word	0x0801ea14
 8017554:	0801f198 	.word	0x0801f198
 8017558:	0801ea68 	.word	0x0801ea68
 801755c:	0801f1b4 	.word	0x0801f1b4

08017560 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017560:	b590      	push	{r4, r7, lr}
 8017562:	b087      	sub	sp, #28
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017568:	2300      	movs	r3, #0
 801756a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801756c:	2300      	movs	r3, #0
 801756e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d106      	bne.n	8017584 <tcp_send_empty_ack+0x24>
 8017576:	4b28      	ldr	r3, [pc, #160]	; (8017618 <tcp_send_empty_ack+0xb8>)
 8017578:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801757c:	4927      	ldr	r1, [pc, #156]	; (801761c <tcp_send_empty_ack+0xbc>)
 801757e:	4828      	ldr	r0, [pc, #160]	; (8017620 <tcp_send_empty_ack+0xc0>)
 8017580:	f003 fdea 	bl	801b158 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017584:	7dfb      	ldrb	r3, [r7, #23]
 8017586:	009b      	lsls	r3, r3, #2
 8017588:	b2db      	uxtb	r3, r3
 801758a:	f003 0304 	and.w	r3, r3, #4
 801758e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017590:	7d7b      	ldrb	r3, [r7, #21]
 8017592:	b29c      	uxth	r4, r3
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017598:	4618      	mov	r0, r3
 801759a:	f7f8 fa12 	bl	800f9c2 <lwip_htonl>
 801759e:	4603      	mov	r3, r0
 80175a0:	2200      	movs	r2, #0
 80175a2:	4621      	mov	r1, r4
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7ff fec3 	bl	8017330 <tcp_output_alloc_header>
 80175aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d109      	bne.n	80175c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	8b5b      	ldrh	r3, [r3, #26]
 80175b6:	f043 0303 	orr.w	r3, r3, #3
 80175ba:	b29a      	uxth	r2, r3
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80175c0:	f06f 0301 	mvn.w	r3, #1
 80175c4:	e023      	b.n	801760e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80175c6:	7dbb      	ldrb	r3, [r7, #22]
 80175c8:	7dfa      	ldrb	r2, [r7, #23]
 80175ca:	6939      	ldr	r1, [r7, #16]
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f7ff feed 	bl	80173ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	3304      	adds	r3, #4
 80175d8:	6939      	ldr	r1, [r7, #16]
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f7ff ff24 	bl	8017428 <tcp_output_control_segment>
 80175e0:	4603      	mov	r3, r0
 80175e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80175e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d007      	beq.n	80175fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	8b5b      	ldrh	r3, [r3, #26]
 80175f0:	f043 0303 	orr.w	r3, r3, #3
 80175f4:	b29a      	uxth	r2, r3
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	835a      	strh	r2, [r3, #26]
 80175fa:	e006      	b.n	801760a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	8b5b      	ldrh	r3, [r3, #26]
 8017600:	f023 0303 	bic.w	r3, r3, #3
 8017604:	b29a      	uxth	r2, r3
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801760a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801760e:	4618      	mov	r0, r3
 8017610:	371c      	adds	r7, #28
 8017612:	46bd      	mov	sp, r7
 8017614:	bd90      	pop	{r4, r7, pc}
 8017616:	bf00      	nop
 8017618:	0801ea14 	.word	0x0801ea14
 801761c:	0801f1d0 	.word	0x0801f1d0
 8017620:	0801ea68 	.word	0x0801ea68

08017624 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017624:	b590      	push	{r4, r7, lr}
 8017626:	b087      	sub	sp, #28
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801762c:	2300      	movs	r3, #0
 801762e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d106      	bne.n	8017644 <tcp_keepalive+0x20>
 8017636:	4b18      	ldr	r3, [pc, #96]	; (8017698 <tcp_keepalive+0x74>)
 8017638:	f640 0224 	movw	r2, #2084	; 0x824
 801763c:	4917      	ldr	r1, [pc, #92]	; (801769c <tcp_keepalive+0x78>)
 801763e:	4818      	ldr	r0, [pc, #96]	; (80176a0 <tcp_keepalive+0x7c>)
 8017640:	f003 fd8a 	bl	801b158 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017644:	7dfb      	ldrb	r3, [r7, #23]
 8017646:	b29c      	uxth	r4, r3
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801764c:	3b01      	subs	r3, #1
 801764e:	4618      	mov	r0, r3
 8017650:	f7f8 f9b7 	bl	800f9c2 <lwip_htonl>
 8017654:	4603      	mov	r3, r0
 8017656:	2200      	movs	r2, #0
 8017658:	4621      	mov	r1, r4
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7ff fe68 	bl	8017330 <tcp_output_alloc_header>
 8017660:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d102      	bne.n	801766e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017668:	f04f 33ff 	mov.w	r3, #4294967295
 801766c:	e010      	b.n	8017690 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801766e:	7dfb      	ldrb	r3, [r7, #23]
 8017670:	2200      	movs	r2, #0
 8017672:	6939      	ldr	r1, [r7, #16]
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	f7ff fe99 	bl	80173ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	3304      	adds	r3, #4
 8017680:	6939      	ldr	r1, [r7, #16]
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff fed0 	bl	8017428 <tcp_output_control_segment>
 8017688:	4603      	mov	r3, r0
 801768a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801768c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017690:	4618      	mov	r0, r3
 8017692:	371c      	adds	r7, #28
 8017694:	46bd      	mov	sp, r7
 8017696:	bd90      	pop	{r4, r7, pc}
 8017698:	0801ea14 	.word	0x0801ea14
 801769c:	0801f1f0 	.word	0x0801f1f0
 80176a0:	0801ea68 	.word	0x0801ea68

080176a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80176a4:	b590      	push	{r4, r7, lr}
 80176a6:	b08b      	sub	sp, #44	; 0x2c
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80176ac:	2300      	movs	r3, #0
 80176ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d106      	bne.n	80176c6 <tcp_zero_window_probe+0x22>
 80176b8:	4b4c      	ldr	r3, [pc, #304]	; (80177ec <tcp_zero_window_probe+0x148>)
 80176ba:	f640 024f 	movw	r2, #2127	; 0x84f
 80176be:	494c      	ldr	r1, [pc, #304]	; (80177f0 <tcp_zero_window_probe+0x14c>)
 80176c0:	484c      	ldr	r0, [pc, #304]	; (80177f4 <tcp_zero_window_probe+0x150>)
 80176c2:	f003 fd49 	bl	801b158 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80176cc:	6a3b      	ldr	r3, [r7, #32]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d101      	bne.n	80176d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80176d2:	2300      	movs	r3, #0
 80176d4:	e086      	b.n	80177e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80176dc:	2bff      	cmp	r3, #255	; 0xff
 80176de:	d007      	beq.n	80176f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80176e6:	3301      	adds	r3, #1
 80176e8:	b2da      	uxtb	r2, r3
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80176f0:	6a3b      	ldr	r3, [r7, #32]
 80176f2:	68db      	ldr	r3, [r3, #12]
 80176f4:	899b      	ldrh	r3, [r3, #12]
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	4618      	mov	r0, r3
 80176fa:	f7f8 f94d 	bl	800f998 <lwip_htons>
 80176fe:	4603      	mov	r3, r0
 8017700:	b2db      	uxtb	r3, r3
 8017702:	f003 0301 	and.w	r3, r3, #1
 8017706:	2b00      	cmp	r3, #0
 8017708:	d005      	beq.n	8017716 <tcp_zero_window_probe+0x72>
 801770a:	6a3b      	ldr	r3, [r7, #32]
 801770c:	891b      	ldrh	r3, [r3, #8]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <tcp_zero_window_probe+0x72>
 8017712:	2301      	movs	r3, #1
 8017714:	e000      	b.n	8017718 <tcp_zero_window_probe+0x74>
 8017716:	2300      	movs	r3, #0
 8017718:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801771a:	7ffb      	ldrb	r3, [r7, #31]
 801771c:	2b00      	cmp	r3, #0
 801771e:	bf0c      	ite	eq
 8017720:	2301      	moveq	r3, #1
 8017722:	2300      	movne	r3, #0
 8017724:	b2db      	uxtb	r3, r3
 8017726:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801772c:	b299      	uxth	r1, r3
 801772e:	6a3b      	ldr	r3, [r7, #32]
 8017730:	68db      	ldr	r3, [r3, #12]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	8bba      	ldrh	r2, [r7, #28]
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f7ff fdfa 	bl	8017330 <tcp_output_alloc_header>
 801773c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801773e:	69bb      	ldr	r3, [r7, #24]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d102      	bne.n	801774a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017744:	f04f 33ff 	mov.w	r3, #4294967295
 8017748:	e04c      	b.n	80177e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017750:	7ffb      	ldrb	r3, [r7, #31]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d011      	beq.n	801777a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	899b      	ldrh	r3, [r3, #12]
 801775a:	b29b      	uxth	r3, r3
 801775c:	b21b      	sxth	r3, r3
 801775e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017762:	b21c      	sxth	r4, r3
 8017764:	2011      	movs	r0, #17
 8017766:	f7f8 f917 	bl	800f998 <lwip_htons>
 801776a:	4603      	mov	r3, r0
 801776c:	b21b      	sxth	r3, r3
 801776e:	4323      	orrs	r3, r4
 8017770:	b21b      	sxth	r3, r3
 8017772:	b29a      	uxth	r2, r3
 8017774:	697b      	ldr	r3, [r7, #20]
 8017776:	819a      	strh	r2, [r3, #12]
 8017778:	e010      	b.n	801779c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801777a:	69bb      	ldr	r3, [r7, #24]
 801777c:	685b      	ldr	r3, [r3, #4]
 801777e:	3314      	adds	r3, #20
 8017780:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017782:	6a3b      	ldr	r3, [r7, #32]
 8017784:	6858      	ldr	r0, [r3, #4]
 8017786:	6a3b      	ldr	r3, [r7, #32]
 8017788:	685b      	ldr	r3, [r3, #4]
 801778a:	891a      	ldrh	r2, [r3, #8]
 801778c:	6a3b      	ldr	r3, [r7, #32]
 801778e:	891b      	ldrh	r3, [r3, #8]
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	b29b      	uxth	r3, r3
 8017794:	2201      	movs	r2, #1
 8017796:	6939      	ldr	r1, [r7, #16]
 8017798:	f7f9 ff28 	bl	80115ec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801779c:	6a3b      	ldr	r3, [r7, #32]
 801779e:	68db      	ldr	r3, [r3, #12]
 80177a0:	685b      	ldr	r3, [r3, #4]
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7f8 f90d 	bl	800f9c2 <lwip_htonl>
 80177a8:	4603      	mov	r3, r0
 80177aa:	3301      	adds	r3, #1
 80177ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	1ad3      	subs	r3, r2, r3
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	da02      	bge.n	80177c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	68fa      	ldr	r2, [r7, #12]
 80177be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177c4:	2200      	movs	r2, #0
 80177c6:	69b9      	ldr	r1, [r7, #24]
 80177c8:	6878      	ldr	r0, [r7, #4]
 80177ca:	f7ff fdef 	bl	80173ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80177ce:	687a      	ldr	r2, [r7, #4]
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	3304      	adds	r3, #4
 80177d4:	69b9      	ldr	r1, [r7, #24]
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f7ff fe26 	bl	8017428 <tcp_output_control_segment>
 80177dc:	4603      	mov	r3, r0
 80177de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80177e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	372c      	adds	r7, #44	; 0x2c
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd90      	pop	{r4, r7, pc}
 80177ec:	0801ea14 	.word	0x0801ea14
 80177f0:	0801f20c 	.word	0x0801f20c
 80177f4:	0801ea68 	.word	0x0801ea68

080177f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017800:	f7f9 ffe2 	bl	80117c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017804:	4b0a      	ldr	r3, [pc, #40]	; (8017830 <tcpip_tcp_timer+0x38>)
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d103      	bne.n	8017814 <tcpip_tcp_timer+0x1c>
 801780c:	4b09      	ldr	r3, [pc, #36]	; (8017834 <tcpip_tcp_timer+0x3c>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d005      	beq.n	8017820 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017814:	2200      	movs	r2, #0
 8017816:	4908      	ldr	r1, [pc, #32]	; (8017838 <tcpip_tcp_timer+0x40>)
 8017818:	20fa      	movs	r0, #250	; 0xfa
 801781a:	f000 f8f3 	bl	8017a04 <sys_timeout>
 801781e:	e003      	b.n	8017828 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017820:	4b06      	ldr	r3, [pc, #24]	; (801783c <tcpip_tcp_timer+0x44>)
 8017822:	2200      	movs	r2, #0
 8017824:	601a      	str	r2, [r3, #0]
  }
}
 8017826:	bf00      	nop
 8017828:	bf00      	nop
 801782a:	3708      	adds	r7, #8
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	2003d0e8 	.word	0x2003d0e8
 8017834:	2003d0ec 	.word	0x2003d0ec
 8017838:	080177f9 	.word	0x080177f9
 801783c:	2003d134 	.word	0x2003d134

08017840 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017844:	4b0a      	ldr	r3, [pc, #40]	; (8017870 <tcp_timer_needed+0x30>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d10f      	bne.n	801786c <tcp_timer_needed+0x2c>
 801784c:	4b09      	ldr	r3, [pc, #36]	; (8017874 <tcp_timer_needed+0x34>)
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d103      	bne.n	801785c <tcp_timer_needed+0x1c>
 8017854:	4b08      	ldr	r3, [pc, #32]	; (8017878 <tcp_timer_needed+0x38>)
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d007      	beq.n	801786c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801785c:	4b04      	ldr	r3, [pc, #16]	; (8017870 <tcp_timer_needed+0x30>)
 801785e:	2201      	movs	r2, #1
 8017860:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017862:	2200      	movs	r2, #0
 8017864:	4905      	ldr	r1, [pc, #20]	; (801787c <tcp_timer_needed+0x3c>)
 8017866:	20fa      	movs	r0, #250	; 0xfa
 8017868:	f000 f8cc 	bl	8017a04 <sys_timeout>
  }
}
 801786c:	bf00      	nop
 801786e:	bd80      	pop	{r7, pc}
 8017870:	2003d134 	.word	0x2003d134
 8017874:	2003d0e8 	.word	0x2003d0e8
 8017878:	2003d0ec 	.word	0x2003d0ec
 801787c:	080177f9 	.word	0x080177f9

08017880 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b086      	sub	sp, #24
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801788c:	200a      	movs	r0, #10
 801788e:	f7f8 fd5b 	bl	8010348 <memp_malloc>
 8017892:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017894:	693b      	ldr	r3, [r7, #16]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d109      	bne.n	80178ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801789a:	693b      	ldr	r3, [r7, #16]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d151      	bne.n	8017944 <sys_timeout_abs+0xc4>
 80178a0:	4b2a      	ldr	r3, [pc, #168]	; (801794c <sys_timeout_abs+0xcc>)
 80178a2:	22be      	movs	r2, #190	; 0xbe
 80178a4:	492a      	ldr	r1, [pc, #168]	; (8017950 <sys_timeout_abs+0xd0>)
 80178a6:	482b      	ldr	r0, [pc, #172]	; (8017954 <sys_timeout_abs+0xd4>)
 80178a8:	f003 fc56 	bl	801b158 <iprintf>
    return;
 80178ac:	e04a      	b.n	8017944 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	2200      	movs	r2, #0
 80178b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80178b4:	693b      	ldr	r3, [r7, #16]
 80178b6:	68ba      	ldr	r2, [r7, #8]
 80178b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80178ba:	693b      	ldr	r3, [r7, #16]
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	68fa      	ldr	r2, [r7, #12]
 80178c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80178c6:	4b24      	ldr	r3, [pc, #144]	; (8017958 <sys_timeout_abs+0xd8>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d103      	bne.n	80178d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80178ce:	4a22      	ldr	r2, [pc, #136]	; (8017958 <sys_timeout_abs+0xd8>)
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	6013      	str	r3, [r2, #0]
    return;
 80178d4:	e037      	b.n	8017946 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	685a      	ldr	r2, [r3, #4]
 80178da:	4b1f      	ldr	r3, [pc, #124]	; (8017958 <sys_timeout_abs+0xd8>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	1ad3      	subs	r3, r2, r3
 80178e2:	0fdb      	lsrs	r3, r3, #31
 80178e4:	f003 0301 	and.w	r3, r3, #1
 80178e8:	b2db      	uxtb	r3, r3
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d007      	beq.n	80178fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80178ee:	4b1a      	ldr	r3, [pc, #104]	; (8017958 <sys_timeout_abs+0xd8>)
 80178f0:	681a      	ldr	r2, [r3, #0]
 80178f2:	693b      	ldr	r3, [r7, #16]
 80178f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80178f6:	4a18      	ldr	r2, [pc, #96]	; (8017958 <sys_timeout_abs+0xd8>)
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	6013      	str	r3, [r2, #0]
 80178fc:	e023      	b.n	8017946 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80178fe:	4b16      	ldr	r3, [pc, #88]	; (8017958 <sys_timeout_abs+0xd8>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	617b      	str	r3, [r7, #20]
 8017904:	e01a      	b.n	801793c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017906:	697b      	ldr	r3, [r7, #20]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00b      	beq.n	8017926 <sys_timeout_abs+0xa6>
 801790e:	693b      	ldr	r3, [r7, #16]
 8017910:	685a      	ldr	r2, [r3, #4]
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	685b      	ldr	r3, [r3, #4]
 8017918:	1ad3      	subs	r3, r2, r3
 801791a:	0fdb      	lsrs	r3, r3, #31
 801791c:	f003 0301 	and.w	r3, r3, #1
 8017920:	b2db      	uxtb	r3, r3
 8017922:	2b00      	cmp	r3, #0
 8017924:	d007      	beq.n	8017936 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017926:	697b      	ldr	r3, [r7, #20]
 8017928:	681a      	ldr	r2, [r3, #0]
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	693a      	ldr	r2, [r7, #16]
 8017932:	601a      	str	r2, [r3, #0]
        break;
 8017934:	e007      	b.n	8017946 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017936:	697b      	ldr	r3, [r7, #20]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	617b      	str	r3, [r7, #20]
 801793c:	697b      	ldr	r3, [r7, #20]
 801793e:	2b00      	cmp	r3, #0
 8017940:	d1e1      	bne.n	8017906 <sys_timeout_abs+0x86>
 8017942:	e000      	b.n	8017946 <sys_timeout_abs+0xc6>
    return;
 8017944:	bf00      	nop
      }
    }
  }
}
 8017946:	3718      	adds	r7, #24
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	0801f230 	.word	0x0801f230
 8017950:	0801f264 	.word	0x0801f264
 8017954:	0801f2a4 	.word	0x0801f2a4
 8017958:	2003d12c 	.word	0x2003d12c

0801795c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b086      	sub	sp, #24
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017968:	697b      	ldr	r3, [r7, #20]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	4798      	blx	r3

  now = sys_now();
 801796e:	f7f0 fd23 	bl	80083b8 <sys_now>
 8017972:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017974:	697b      	ldr	r3, [r7, #20]
 8017976:	681a      	ldr	r2, [r3, #0]
 8017978:	4b0f      	ldr	r3, [pc, #60]	; (80179b8 <lwip_cyclic_timer+0x5c>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	4413      	add	r3, r2
 801797e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017980:	68fa      	ldr	r2, [r7, #12]
 8017982:	693b      	ldr	r3, [r7, #16]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	0fdb      	lsrs	r3, r3, #31
 8017988:	f003 0301 	and.w	r3, r3, #1
 801798c:	b2db      	uxtb	r3, r3
 801798e:	2b00      	cmp	r3, #0
 8017990:	d009      	beq.n	80179a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	681a      	ldr	r2, [r3, #0]
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	4413      	add	r3, r2
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	4907      	ldr	r1, [pc, #28]	; (80179bc <lwip_cyclic_timer+0x60>)
 801799e:	4618      	mov	r0, r3
 80179a0:	f7ff ff6e 	bl	8017880 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80179a4:	e004      	b.n	80179b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80179a6:	687a      	ldr	r2, [r7, #4]
 80179a8:	4904      	ldr	r1, [pc, #16]	; (80179bc <lwip_cyclic_timer+0x60>)
 80179aa:	68f8      	ldr	r0, [r7, #12]
 80179ac:	f7ff ff68 	bl	8017880 <sys_timeout_abs>
}
 80179b0:	bf00      	nop
 80179b2:	3718      	adds	r7, #24
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	2003d130 	.word	0x2003d130
 80179bc:	0801795d 	.word	0x0801795d

080179c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80179c6:	2301      	movs	r3, #1
 80179c8:	607b      	str	r3, [r7, #4]
 80179ca:	e00e      	b.n	80179ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80179cc:	4a0b      	ldr	r2, [pc, #44]	; (80179fc <sys_timeouts_init+0x3c>)
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	00db      	lsls	r3, r3, #3
 80179d8:	4a08      	ldr	r2, [pc, #32]	; (80179fc <sys_timeouts_init+0x3c>)
 80179da:	4413      	add	r3, r2
 80179dc:	461a      	mov	r2, r3
 80179de:	4908      	ldr	r1, [pc, #32]	; (8017a00 <sys_timeouts_init+0x40>)
 80179e0:	f000 f810 	bl	8017a04 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	3301      	adds	r3, #1
 80179e8:	607b      	str	r3, [r7, #4]
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2b02      	cmp	r3, #2
 80179ee:	d9ed      	bls.n	80179cc <sys_timeouts_init+0xc>
  }
}
 80179f0:	bf00      	nop
 80179f2:	bf00      	nop
 80179f4:	3708      	adds	r7, #8
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	0801feac 	.word	0x0801feac
 8017a00:	0801795d 	.word	0x0801795d

08017a04 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b086      	sub	sp, #24
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017a16:	d306      	bcc.n	8017a26 <sys_timeout+0x22>
 8017a18:	4b0a      	ldr	r3, [pc, #40]	; (8017a44 <sys_timeout+0x40>)
 8017a1a:	f240 1229 	movw	r2, #297	; 0x129
 8017a1e:	490a      	ldr	r1, [pc, #40]	; (8017a48 <sys_timeout+0x44>)
 8017a20:	480a      	ldr	r0, [pc, #40]	; (8017a4c <sys_timeout+0x48>)
 8017a22:	f003 fb99 	bl	801b158 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017a26:	f7f0 fcc7 	bl	80083b8 <sys_now>
 8017a2a:	4602      	mov	r2, r0
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	4413      	add	r3, r2
 8017a30:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	68b9      	ldr	r1, [r7, #8]
 8017a36:	6978      	ldr	r0, [r7, #20]
 8017a38:	f7ff ff22 	bl	8017880 <sys_timeout_abs>
#endif
}
 8017a3c:	bf00      	nop
 8017a3e:	3718      	adds	r7, #24
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	0801f230 	.word	0x0801f230
 8017a48:	0801f2cc 	.word	0x0801f2cc
 8017a4c:	0801f2a4 	.word	0x0801f2a4

08017a50 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b084      	sub	sp, #16
 8017a54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017a56:	f7f0 fcaf 	bl	80083b8 <sys_now>
 8017a5a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017a5c:	4b17      	ldr	r3, [pc, #92]	; (8017abc <sys_check_timeouts+0x6c>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017a62:	68bb      	ldr	r3, [r7, #8]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d022      	beq.n	8017aae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	1ad3      	subs	r3, r2, r3
 8017a70:	0fdb      	lsrs	r3, r3, #31
 8017a72:	f003 0301 	and.w	r3, r3, #1
 8017a76:	b2db      	uxtb	r3, r3
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d11a      	bne.n	8017ab2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017a7c:	68bb      	ldr	r3, [r7, #8]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	4a0e      	ldr	r2, [pc, #56]	; (8017abc <sys_check_timeouts+0x6c>)
 8017a82:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	689b      	ldr	r3, [r3, #8]
 8017a88:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	68db      	ldr	r3, [r3, #12]
 8017a8e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	685b      	ldr	r3, [r3, #4]
 8017a94:	4a0a      	ldr	r2, [pc, #40]	; (8017ac0 <sys_check_timeouts+0x70>)
 8017a96:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017a98:	68b9      	ldr	r1, [r7, #8]
 8017a9a:	200a      	movs	r0, #10
 8017a9c:	f7f8 fcca 	bl	8010434 <memp_free>
    if (handler != NULL) {
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d0da      	beq.n	8017a5c <sys_check_timeouts+0xc>
      handler(arg);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6838      	ldr	r0, [r7, #0]
 8017aaa:	4798      	blx	r3
  do {
 8017aac:	e7d6      	b.n	8017a5c <sys_check_timeouts+0xc>
      return;
 8017aae:	bf00      	nop
 8017ab0:	e000      	b.n	8017ab4 <sys_check_timeouts+0x64>
      return;
 8017ab2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017ab4:	3710      	adds	r7, #16
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}
 8017aba:	bf00      	nop
 8017abc:	2003d12c 	.word	0x2003d12c
 8017ac0:	2003d130 	.word	0x2003d130

08017ac4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b082      	sub	sp, #8
 8017ac8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017aca:	4b16      	ldr	r3, [pc, #88]	; (8017b24 <sys_timeouts_sleeptime+0x60>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d102      	bne.n	8017ad8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ad6:	e020      	b.n	8017b1a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017ad8:	f7f0 fc6e 	bl	80083b8 <sys_now>
 8017adc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017ade:	4b11      	ldr	r3, [pc, #68]	; (8017b24 <sys_timeouts_sleeptime+0x60>)
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	685a      	ldr	r2, [r3, #4]
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	1ad3      	subs	r3, r2, r3
 8017ae8:	0fdb      	lsrs	r3, r3, #31
 8017aea:	f003 0301 	and.w	r3, r3, #1
 8017aee:	b2db      	uxtb	r3, r3
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d001      	beq.n	8017af8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017af4:	2300      	movs	r3, #0
 8017af6:	e010      	b.n	8017b1a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017af8:	4b0a      	ldr	r3, [pc, #40]	; (8017b24 <sys_timeouts_sleeptime+0x60>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	685a      	ldr	r2, [r3, #4]
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	1ad3      	subs	r3, r2, r3
 8017b02:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	da06      	bge.n	8017b18 <sys_timeouts_sleeptime+0x54>
 8017b0a:	4b07      	ldr	r3, [pc, #28]	; (8017b28 <sys_timeouts_sleeptime+0x64>)
 8017b0c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017b10:	4906      	ldr	r1, [pc, #24]	; (8017b2c <sys_timeouts_sleeptime+0x68>)
 8017b12:	4807      	ldr	r0, [pc, #28]	; (8017b30 <sys_timeouts_sleeptime+0x6c>)
 8017b14:	f003 fb20 	bl	801b158 <iprintf>
    return ret;
 8017b18:	683b      	ldr	r3, [r7, #0]
  }
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	2003d12c 	.word	0x2003d12c
 8017b28:	0801f230 	.word	0x0801f230
 8017b2c:	0801f304 	.word	0x0801f304
 8017b30:	0801f2a4 	.word	0x0801f2a4

08017b34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017b38:	f003 fa0e 	bl	801af58 <rand>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017b44:	b29b      	uxth	r3, r3
 8017b46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017b4a:	b29a      	uxth	r2, r3
 8017b4c:	4b01      	ldr	r3, [pc, #4]	; (8017b54 <udp_init+0x20>)
 8017b4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017b50:	bf00      	nop
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	2000002c 	.word	0x2000002c

08017b58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017b58:	b480      	push	{r7}
 8017b5a:	b083      	sub	sp, #12
 8017b5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017b62:	4b17      	ldr	r3, [pc, #92]	; (8017bc0 <udp_new_port+0x68>)
 8017b64:	881b      	ldrh	r3, [r3, #0]
 8017b66:	1c5a      	adds	r2, r3, #1
 8017b68:	b291      	uxth	r1, r2
 8017b6a:	4a15      	ldr	r2, [pc, #84]	; (8017bc0 <udp_new_port+0x68>)
 8017b6c:	8011      	strh	r1, [r2, #0]
 8017b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b72:	4293      	cmp	r3, r2
 8017b74:	d103      	bne.n	8017b7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017b76:	4b12      	ldr	r3, [pc, #72]	; (8017bc0 <udp_new_port+0x68>)
 8017b78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017b7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b7e:	4b11      	ldr	r3, [pc, #68]	; (8017bc4 <udp_new_port+0x6c>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	603b      	str	r3, [r7, #0]
 8017b84:	e011      	b.n	8017baa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	8a5a      	ldrh	r2, [r3, #18]
 8017b8a:	4b0d      	ldr	r3, [pc, #52]	; (8017bc0 <udp_new_port+0x68>)
 8017b8c:	881b      	ldrh	r3, [r3, #0]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d108      	bne.n	8017ba4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017b92:	88fb      	ldrh	r3, [r7, #6]
 8017b94:	3301      	adds	r3, #1
 8017b96:	80fb      	strh	r3, [r7, #6]
 8017b98:	88fb      	ldrh	r3, [r7, #6]
 8017b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017b9e:	d3e0      	bcc.n	8017b62 <udp_new_port+0xa>
        return 0;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	e007      	b.n	8017bb4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	603b      	str	r3, [r7, #0]
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d1ea      	bne.n	8017b86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017bb0:	4b03      	ldr	r3, [pc, #12]	; (8017bc0 <udp_new_port+0x68>)
 8017bb2:	881b      	ldrh	r3, [r3, #0]
}
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	370c      	adds	r7, #12
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbe:	4770      	bx	lr
 8017bc0:	2000002c 	.word	0x2000002c
 8017bc4:	2003d138 	.word	0x2003d138

08017bc8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b084      	sub	sp, #16
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	60f8      	str	r0, [r7, #12]
 8017bd0:	60b9      	str	r1, [r7, #8]
 8017bd2:	4613      	mov	r3, r2
 8017bd4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d105      	bne.n	8017be8 <udp_input_local_match+0x20>
 8017bdc:	4b27      	ldr	r3, [pc, #156]	; (8017c7c <udp_input_local_match+0xb4>)
 8017bde:	2287      	movs	r2, #135	; 0x87
 8017be0:	4927      	ldr	r1, [pc, #156]	; (8017c80 <udp_input_local_match+0xb8>)
 8017be2:	4828      	ldr	r0, [pc, #160]	; (8017c84 <udp_input_local_match+0xbc>)
 8017be4:	f003 fab8 	bl	801b158 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d105      	bne.n	8017bfa <udp_input_local_match+0x32>
 8017bee:	4b23      	ldr	r3, [pc, #140]	; (8017c7c <udp_input_local_match+0xb4>)
 8017bf0:	2288      	movs	r2, #136	; 0x88
 8017bf2:	4925      	ldr	r1, [pc, #148]	; (8017c88 <udp_input_local_match+0xc0>)
 8017bf4:	4823      	ldr	r0, [pc, #140]	; (8017c84 <udp_input_local_match+0xbc>)
 8017bf6:	f003 faaf 	bl	801b158 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	7a1b      	ldrb	r3, [r3, #8]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d00b      	beq.n	8017c1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	7a1a      	ldrb	r2, [r3, #8]
 8017c06:	4b21      	ldr	r3, [pc, #132]	; (8017c8c <udp_input_local_match+0xc4>)
 8017c08:	685b      	ldr	r3, [r3, #4]
 8017c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c0e:	3301      	adds	r3, #1
 8017c10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d001      	beq.n	8017c1a <udp_input_local_match+0x52>
    return 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	e02b      	b.n	8017c72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017c1a:	79fb      	ldrb	r3, [r7, #7]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d018      	beq.n	8017c52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d013      	beq.n	8017c4e <udp_input_local_match+0x86>
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d00f      	beq.n	8017c4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017c2e:	4b17      	ldr	r3, [pc, #92]	; (8017c8c <udp_input_local_match+0xc4>)
 8017c30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c36:	d00a      	beq.n	8017c4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	681a      	ldr	r2, [r3, #0]
 8017c3c:	4b13      	ldr	r3, [pc, #76]	; (8017c8c <udp_input_local_match+0xc4>)
 8017c3e:	695b      	ldr	r3, [r3, #20]
 8017c40:	405a      	eors	r2, r3
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	3308      	adds	r3, #8
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d110      	bne.n	8017c70 <udp_input_local_match+0xa8>
          return 1;
 8017c4e:	2301      	movs	r3, #1
 8017c50:	e00f      	b.n	8017c72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d009      	beq.n	8017c6c <udp_input_local_match+0xa4>
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d005      	beq.n	8017c6c <udp_input_local_match+0xa4>
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	4b09      	ldr	r3, [pc, #36]	; (8017c8c <udp_input_local_match+0xc4>)
 8017c66:	695b      	ldr	r3, [r3, #20]
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	d101      	bne.n	8017c70 <udp_input_local_match+0xa8>
        return 1;
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	e000      	b.n	8017c72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017c70:	2300      	movs	r3, #0
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3710      	adds	r7, #16
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	0801f318 	.word	0x0801f318
 8017c80:	0801f348 	.word	0x0801f348
 8017c84:	0801f36c 	.word	0x0801f36c
 8017c88:	0801f394 	.word	0x0801f394
 8017c8c:	20039988 	.word	0x20039988

08017c90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017c90:	b590      	push	{r4, r7, lr}
 8017c92:	b08d      	sub	sp, #52	; 0x34
 8017c94:	af02      	add	r7, sp, #8
 8017c96:	6078      	str	r0, [r7, #4]
 8017c98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d105      	bne.n	8017cb0 <udp_input+0x20>
 8017ca4:	4b7c      	ldr	r3, [pc, #496]	; (8017e98 <udp_input+0x208>)
 8017ca6:	22cf      	movs	r2, #207	; 0xcf
 8017ca8:	497c      	ldr	r1, [pc, #496]	; (8017e9c <udp_input+0x20c>)
 8017caa:	487d      	ldr	r0, [pc, #500]	; (8017ea0 <udp_input+0x210>)
 8017cac:	f003 fa54 	bl	801b158 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d105      	bne.n	8017cc2 <udp_input+0x32>
 8017cb6:	4b78      	ldr	r3, [pc, #480]	; (8017e98 <udp_input+0x208>)
 8017cb8:	22d0      	movs	r2, #208	; 0xd0
 8017cba:	497a      	ldr	r1, [pc, #488]	; (8017ea4 <udp_input+0x214>)
 8017cbc:	4878      	ldr	r0, [pc, #480]	; (8017ea0 <udp_input+0x210>)
 8017cbe:	f003 fa4b 	bl	801b158 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	895b      	ldrh	r3, [r3, #10]
 8017cc6:	2b07      	cmp	r3, #7
 8017cc8:	d803      	bhi.n	8017cd2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7f9 fa88 	bl	80111e0 <pbuf_free>
    goto end;
 8017cd0:	e0de      	b.n	8017e90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017cd8:	4b73      	ldr	r3, [pc, #460]	; (8017ea8 <udp_input+0x218>)
 8017cda:	695b      	ldr	r3, [r3, #20]
 8017cdc:	4a72      	ldr	r2, [pc, #456]	; (8017ea8 <udp_input+0x218>)
 8017cde:	6812      	ldr	r2, [r2, #0]
 8017ce0:	4611      	mov	r1, r2
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f001 ff80 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017cec:	697b      	ldr	r3, [r7, #20]
 8017cee:	881b      	ldrh	r3, [r3, #0]
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7f7 fe50 	bl	800f998 <lwip_htons>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017cfc:	697b      	ldr	r3, [r7, #20]
 8017cfe:	885b      	ldrh	r3, [r3, #2]
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	4618      	mov	r0, r3
 8017d04:	f7f7 fe48 	bl	800f998 <lwip_htons>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017d10:	2300      	movs	r3, #0
 8017d12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017d14:	2300      	movs	r3, #0
 8017d16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d18:	4b64      	ldr	r3, [pc, #400]	; (8017eac <udp_input+0x21c>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8017d1e:	e054      	b.n	8017dca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d22:	8a5b      	ldrh	r3, [r3, #18]
 8017d24:	89fa      	ldrh	r2, [r7, #14]
 8017d26:	429a      	cmp	r2, r3
 8017d28:	d14a      	bne.n	8017dc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017d2a:	7cfb      	ldrb	r3, [r7, #19]
 8017d2c:	461a      	mov	r2, r3
 8017d2e:	6839      	ldr	r1, [r7, #0]
 8017d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d32:	f7ff ff49 	bl	8017bc8 <udp_input_local_match>
 8017d36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d041      	beq.n	8017dc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d3e:	7c1b      	ldrb	r3, [r3, #16]
 8017d40:	f003 0304 	and.w	r3, r3, #4
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d11d      	bne.n	8017d84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017d48:	69fb      	ldr	r3, [r7, #28]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d102      	bne.n	8017d54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d50:	61fb      	str	r3, [r7, #28]
 8017d52:	e017      	b.n	8017d84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017d54:	7cfb      	ldrb	r3, [r7, #19]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d014      	beq.n	8017d84 <udp_input+0xf4>
 8017d5a:	4b53      	ldr	r3, [pc, #332]	; (8017ea8 <udp_input+0x218>)
 8017d5c:	695b      	ldr	r3, [r3, #20]
 8017d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d62:	d10f      	bne.n	8017d84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017d64:	69fb      	ldr	r3, [r7, #28]
 8017d66:	681a      	ldr	r2, [r3, #0]
 8017d68:	683b      	ldr	r3, [r7, #0]
 8017d6a:	3304      	adds	r3, #4
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d008      	beq.n	8017d84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d74:	681a      	ldr	r2, [r3, #0]
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	3304      	adds	r3, #4
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d101      	bne.n	8017d84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d86:	8a9b      	ldrh	r3, [r3, #20]
 8017d88:	8a3a      	ldrh	r2, [r7, #16]
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d118      	bne.n	8017dc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d005      	beq.n	8017da2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d98:	685a      	ldr	r2, [r3, #4]
 8017d9a:	4b43      	ldr	r3, [pc, #268]	; (8017ea8 <udp_input+0x218>)
 8017d9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d10e      	bne.n	8017dc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017da2:	6a3b      	ldr	r3, [r7, #32]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d014      	beq.n	8017dd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017daa:	68da      	ldr	r2, [r3, #12]
 8017dac:	6a3b      	ldr	r3, [r7, #32]
 8017dae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017db0:	4b3e      	ldr	r3, [pc, #248]	; (8017eac <udp_input+0x21c>)
 8017db2:	681a      	ldr	r2, [r3, #0]
 8017db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017db8:	4a3c      	ldr	r2, [pc, #240]	; (8017eac <udp_input+0x21c>)
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017dbe:	e008      	b.n	8017dd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	68db      	ldr	r3, [r3, #12]
 8017dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8017dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d1a7      	bne.n	8017d20 <udp_input+0x90>
 8017dd0:	e000      	b.n	8017dd4 <udp_input+0x144>
        break;
 8017dd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d101      	bne.n	8017dde <udp_input+0x14e>
    pcb = uncon_pcb;
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d002      	beq.n	8017dea <udp_input+0x15a>
    for_us = 1;
 8017de4:	2301      	movs	r3, #1
 8017de6:	76fb      	strb	r3, [r7, #27]
 8017de8:	e00a      	b.n	8017e00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	3304      	adds	r3, #4
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	4b2d      	ldr	r3, [pc, #180]	; (8017ea8 <udp_input+0x218>)
 8017df2:	695b      	ldr	r3, [r3, #20]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	bf0c      	ite	eq
 8017df8:	2301      	moveq	r3, #1
 8017dfa:	2300      	movne	r3, #0
 8017dfc:	b2db      	uxtb	r3, r3
 8017dfe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017e00:	7efb      	ldrb	r3, [r7, #27]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d041      	beq.n	8017e8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017e06:	2108      	movs	r1, #8
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f7f9 f931 	bl	8011070 <pbuf_remove_header>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d00a      	beq.n	8017e2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017e14:	4b20      	ldr	r3, [pc, #128]	; (8017e98 <udp_input+0x208>)
 8017e16:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017e1a:	4925      	ldr	r1, [pc, #148]	; (8017eb0 <udp_input+0x220>)
 8017e1c:	4820      	ldr	r0, [pc, #128]	; (8017ea0 <udp_input+0x210>)
 8017e1e:	f003 f99b 	bl	801b158 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017e22:	6878      	ldr	r0, [r7, #4]
 8017e24:	f7f9 f9dc 	bl	80111e0 <pbuf_free>
      goto end;
 8017e28:	e032      	b.n	8017e90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d012      	beq.n	8017e56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	699b      	ldr	r3, [r3, #24]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d00a      	beq.n	8017e4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3a:	699c      	ldr	r4, [r3, #24]
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3e:	69d8      	ldr	r0, [r3, #28]
 8017e40:	8a3b      	ldrh	r3, [r7, #16]
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	4b1b      	ldr	r3, [pc, #108]	; (8017eb4 <udp_input+0x224>)
 8017e46:	687a      	ldr	r2, [r7, #4]
 8017e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017e4c:	e021      	b.n	8017e92 <udp_input+0x202>
        pbuf_free(p);
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	f7f9 f9c6 	bl	80111e0 <pbuf_free>
        goto end;
 8017e54:	e01c      	b.n	8017e90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017e56:	7cfb      	ldrb	r3, [r7, #19]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d112      	bne.n	8017e82 <udp_input+0x1f2>
 8017e5c:	4b12      	ldr	r3, [pc, #72]	; (8017ea8 <udp_input+0x218>)
 8017e5e:	695b      	ldr	r3, [r3, #20]
 8017e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e64:	2be0      	cmp	r3, #224	; 0xe0
 8017e66:	d00c      	beq.n	8017e82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017e68:	4b0f      	ldr	r3, [pc, #60]	; (8017ea8 <udp_input+0x218>)
 8017e6a:	899b      	ldrh	r3, [r3, #12]
 8017e6c:	3308      	adds	r3, #8
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	b21b      	sxth	r3, r3
 8017e72:	4619      	mov	r1, r3
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f7f9 f96e 	bl	8011156 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017e7a:	2103      	movs	r1, #3
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f001 fb93 	bl	80195a8 <icmp_dest_unreach>
      pbuf_free(p);
 8017e82:	6878      	ldr	r0, [r7, #4]
 8017e84:	f7f9 f9ac 	bl	80111e0 <pbuf_free>
  return;
 8017e88:	e003      	b.n	8017e92 <udp_input+0x202>
    pbuf_free(p);
 8017e8a:	6878      	ldr	r0, [r7, #4]
 8017e8c:	f7f9 f9a8 	bl	80111e0 <pbuf_free>
  return;
 8017e90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017e92:	372c      	adds	r7, #44	; 0x2c
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd90      	pop	{r4, r7, pc}
 8017e98:	0801f318 	.word	0x0801f318
 8017e9c:	0801f3bc 	.word	0x0801f3bc
 8017ea0:	0801f36c 	.word	0x0801f36c
 8017ea4:	0801f3d4 	.word	0x0801f3d4
 8017ea8:	20039988 	.word	0x20039988
 8017eac:	2003d138 	.word	0x2003d138
 8017eb0:	0801f3f0 	.word	0x0801f3f0
 8017eb4:	20039998 	.word	0x20039998

08017eb8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d109      	bne.n	8017edc <udp_send+0x24>
 8017ec8:	4b11      	ldr	r3, [pc, #68]	; (8017f10 <udp_send+0x58>)
 8017eca:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017ece:	4911      	ldr	r1, [pc, #68]	; (8017f14 <udp_send+0x5c>)
 8017ed0:	4811      	ldr	r0, [pc, #68]	; (8017f18 <udp_send+0x60>)
 8017ed2:	f003 f941 	bl	801b158 <iprintf>
 8017ed6:	f06f 030f 	mvn.w	r3, #15
 8017eda:	e015      	b.n	8017f08 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017edc:	683b      	ldr	r3, [r7, #0]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d109      	bne.n	8017ef6 <udp_send+0x3e>
 8017ee2:	4b0b      	ldr	r3, [pc, #44]	; (8017f10 <udp_send+0x58>)
 8017ee4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017ee8:	490c      	ldr	r1, [pc, #48]	; (8017f1c <udp_send+0x64>)
 8017eea:	480b      	ldr	r0, [pc, #44]	; (8017f18 <udp_send+0x60>)
 8017eec:	f003 f934 	bl	801b158 <iprintf>
 8017ef0:	f06f 030f 	mvn.w	r3, #15
 8017ef4:	e008      	b.n	8017f08 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	1d1a      	adds	r2, r3, #4
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	8a9b      	ldrh	r3, [r3, #20]
 8017efe:	6839      	ldr	r1, [r7, #0]
 8017f00:	6878      	ldr	r0, [r7, #4]
 8017f02:	f000 f80d 	bl	8017f20 <udp_sendto>
 8017f06:	4603      	mov	r3, r0
}
 8017f08:	4618      	mov	r0, r3
 8017f0a:	3708      	adds	r7, #8
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	0801f318 	.word	0x0801f318
 8017f14:	0801f40c 	.word	0x0801f40c
 8017f18:	0801f36c 	.word	0x0801f36c
 8017f1c:	0801f424 	.word	0x0801f424

08017f20 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b088      	sub	sp, #32
 8017f24:	af02      	add	r7, sp, #8
 8017f26:	60f8      	str	r0, [r7, #12]
 8017f28:	60b9      	str	r1, [r7, #8]
 8017f2a:	607a      	str	r2, [r7, #4]
 8017f2c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d109      	bne.n	8017f48 <udp_sendto+0x28>
 8017f34:	4b23      	ldr	r3, [pc, #140]	; (8017fc4 <udp_sendto+0xa4>)
 8017f36:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017f3a:	4923      	ldr	r1, [pc, #140]	; (8017fc8 <udp_sendto+0xa8>)
 8017f3c:	4823      	ldr	r0, [pc, #140]	; (8017fcc <udp_sendto+0xac>)
 8017f3e:	f003 f90b 	bl	801b158 <iprintf>
 8017f42:	f06f 030f 	mvn.w	r3, #15
 8017f46:	e038      	b.n	8017fba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d109      	bne.n	8017f62 <udp_sendto+0x42>
 8017f4e:	4b1d      	ldr	r3, [pc, #116]	; (8017fc4 <udp_sendto+0xa4>)
 8017f50:	f240 2219 	movw	r2, #537	; 0x219
 8017f54:	491e      	ldr	r1, [pc, #120]	; (8017fd0 <udp_sendto+0xb0>)
 8017f56:	481d      	ldr	r0, [pc, #116]	; (8017fcc <udp_sendto+0xac>)
 8017f58:	f003 f8fe 	bl	801b158 <iprintf>
 8017f5c:	f06f 030f 	mvn.w	r3, #15
 8017f60:	e02b      	b.n	8017fba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d109      	bne.n	8017f7c <udp_sendto+0x5c>
 8017f68:	4b16      	ldr	r3, [pc, #88]	; (8017fc4 <udp_sendto+0xa4>)
 8017f6a:	f240 221a 	movw	r2, #538	; 0x21a
 8017f6e:	4919      	ldr	r1, [pc, #100]	; (8017fd4 <udp_sendto+0xb4>)
 8017f70:	4816      	ldr	r0, [pc, #88]	; (8017fcc <udp_sendto+0xac>)
 8017f72:	f003 f8f1 	bl	801b158 <iprintf>
 8017f76:	f06f 030f 	mvn.w	r3, #15
 8017f7a:	e01e      	b.n	8017fba <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	7a1b      	ldrb	r3, [r3, #8]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d006      	beq.n	8017f92 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	7a1b      	ldrb	r3, [r3, #8]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7f8 fd69 	bl	8010a60 <netif_get_by_index>
 8017f8e:	6178      	str	r0, [r7, #20]
 8017f90:	e003      	b.n	8017f9a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f001 fb92 	bl	80196bc <ip4_route>
 8017f98:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017f9a:	697b      	ldr	r3, [r7, #20]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d102      	bne.n	8017fa6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017fa0:	f06f 0303 	mvn.w	r3, #3
 8017fa4:	e009      	b.n	8017fba <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017fa6:	887a      	ldrh	r2, [r7, #2]
 8017fa8:	697b      	ldr	r3, [r7, #20]
 8017faa:	9300      	str	r3, [sp, #0]
 8017fac:	4613      	mov	r3, r2
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	68b9      	ldr	r1, [r7, #8]
 8017fb2:	68f8      	ldr	r0, [r7, #12]
 8017fb4:	f000 f810 	bl	8017fd8 <udp_sendto_if>
 8017fb8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	0801f318 	.word	0x0801f318
 8017fc8:	0801f43c 	.word	0x0801f43c
 8017fcc:	0801f36c 	.word	0x0801f36c
 8017fd0:	0801f454 	.word	0x0801f454
 8017fd4:	0801f470 	.word	0x0801f470

08017fd8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b088      	sub	sp, #32
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
 8017fe4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d109      	bne.n	8018000 <udp_sendto_if+0x28>
 8017fec:	4b2e      	ldr	r3, [pc, #184]	; (80180a8 <udp_sendto_if+0xd0>)
 8017fee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017ff2:	492e      	ldr	r1, [pc, #184]	; (80180ac <udp_sendto_if+0xd4>)
 8017ff4:	482e      	ldr	r0, [pc, #184]	; (80180b0 <udp_sendto_if+0xd8>)
 8017ff6:	f003 f8af 	bl	801b158 <iprintf>
 8017ffa:	f06f 030f 	mvn.w	r3, #15
 8017ffe:	e04f      	b.n	80180a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d109      	bne.n	801801a <udp_sendto_if+0x42>
 8018006:	4b28      	ldr	r3, [pc, #160]	; (80180a8 <udp_sendto_if+0xd0>)
 8018008:	f240 2281 	movw	r2, #641	; 0x281
 801800c:	4929      	ldr	r1, [pc, #164]	; (80180b4 <udp_sendto_if+0xdc>)
 801800e:	4828      	ldr	r0, [pc, #160]	; (80180b0 <udp_sendto_if+0xd8>)
 8018010:	f003 f8a2 	bl	801b158 <iprintf>
 8018014:	f06f 030f 	mvn.w	r3, #15
 8018018:	e042      	b.n	80180a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d109      	bne.n	8018034 <udp_sendto_if+0x5c>
 8018020:	4b21      	ldr	r3, [pc, #132]	; (80180a8 <udp_sendto_if+0xd0>)
 8018022:	f240 2282 	movw	r2, #642	; 0x282
 8018026:	4924      	ldr	r1, [pc, #144]	; (80180b8 <udp_sendto_if+0xe0>)
 8018028:	4821      	ldr	r0, [pc, #132]	; (80180b0 <udp_sendto_if+0xd8>)
 801802a:	f003 f895 	bl	801b158 <iprintf>
 801802e:	f06f 030f 	mvn.w	r3, #15
 8018032:	e035      	b.n	80180a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018034:	6a3b      	ldr	r3, [r7, #32]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d109      	bne.n	801804e <udp_sendto_if+0x76>
 801803a:	4b1b      	ldr	r3, [pc, #108]	; (80180a8 <udp_sendto_if+0xd0>)
 801803c:	f240 2283 	movw	r2, #643	; 0x283
 8018040:	491e      	ldr	r1, [pc, #120]	; (80180bc <udp_sendto_if+0xe4>)
 8018042:	481b      	ldr	r0, [pc, #108]	; (80180b0 <udp_sendto_if+0xd8>)
 8018044:	f003 f888 	bl	801b158 <iprintf>
 8018048:	f06f 030f 	mvn.w	r3, #15
 801804c:	e028      	b.n	80180a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d009      	beq.n	8018068 <udp_sendto_if+0x90>
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d005      	beq.n	8018068 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018064:	2be0      	cmp	r3, #224	; 0xe0
 8018066:	d103      	bne.n	8018070 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018068:	6a3b      	ldr	r3, [r7, #32]
 801806a:	3304      	adds	r3, #4
 801806c:	617b      	str	r3, [r7, #20]
 801806e:	e00b      	b.n	8018088 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	681a      	ldr	r2, [r3, #0]
 8018074:	6a3b      	ldr	r3, [r7, #32]
 8018076:	3304      	adds	r3, #4
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	d002      	beq.n	8018084 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801807e:	f06f 0303 	mvn.w	r3, #3
 8018082:	e00d      	b.n	80180a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018088:	887a      	ldrh	r2, [r7, #2]
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	9301      	str	r3, [sp, #4]
 801808e:	6a3b      	ldr	r3, [r7, #32]
 8018090:	9300      	str	r3, [sp, #0]
 8018092:	4613      	mov	r3, r2
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	68b9      	ldr	r1, [r7, #8]
 8018098:	68f8      	ldr	r0, [r7, #12]
 801809a:	f000 f811 	bl	80180c0 <udp_sendto_if_src>
 801809e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3718      	adds	r7, #24
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd80      	pop	{r7, pc}
 80180a8:	0801f318 	.word	0x0801f318
 80180ac:	0801f48c 	.word	0x0801f48c
 80180b0:	0801f36c 	.word	0x0801f36c
 80180b4:	0801f4a8 	.word	0x0801f4a8
 80180b8:	0801f4c4 	.word	0x0801f4c4
 80180bc:	0801f4e4 	.word	0x0801f4e4

080180c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b08c      	sub	sp, #48	; 0x30
 80180c4:	af04      	add	r7, sp, #16
 80180c6:	60f8      	str	r0, [r7, #12]
 80180c8:	60b9      	str	r1, [r7, #8]
 80180ca:	607a      	str	r2, [r7, #4]
 80180cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d109      	bne.n	80180e8 <udp_sendto_if_src+0x28>
 80180d4:	4b65      	ldr	r3, [pc, #404]	; (801826c <udp_sendto_if_src+0x1ac>)
 80180d6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80180da:	4965      	ldr	r1, [pc, #404]	; (8018270 <udp_sendto_if_src+0x1b0>)
 80180dc:	4865      	ldr	r0, [pc, #404]	; (8018274 <udp_sendto_if_src+0x1b4>)
 80180de:	f003 f83b 	bl	801b158 <iprintf>
 80180e2:	f06f 030f 	mvn.w	r3, #15
 80180e6:	e0bc      	b.n	8018262 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d109      	bne.n	8018102 <udp_sendto_if_src+0x42>
 80180ee:	4b5f      	ldr	r3, [pc, #380]	; (801826c <udp_sendto_if_src+0x1ac>)
 80180f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80180f4:	4960      	ldr	r1, [pc, #384]	; (8018278 <udp_sendto_if_src+0x1b8>)
 80180f6:	485f      	ldr	r0, [pc, #380]	; (8018274 <udp_sendto_if_src+0x1b4>)
 80180f8:	f003 f82e 	bl	801b158 <iprintf>
 80180fc:	f06f 030f 	mvn.w	r3, #15
 8018100:	e0af      	b.n	8018262 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d109      	bne.n	801811c <udp_sendto_if_src+0x5c>
 8018108:	4b58      	ldr	r3, [pc, #352]	; (801826c <udp_sendto_if_src+0x1ac>)
 801810a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801810e:	495b      	ldr	r1, [pc, #364]	; (801827c <udp_sendto_if_src+0x1bc>)
 8018110:	4858      	ldr	r0, [pc, #352]	; (8018274 <udp_sendto_if_src+0x1b4>)
 8018112:	f003 f821 	bl	801b158 <iprintf>
 8018116:	f06f 030f 	mvn.w	r3, #15
 801811a:	e0a2      	b.n	8018262 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811e:	2b00      	cmp	r3, #0
 8018120:	d109      	bne.n	8018136 <udp_sendto_if_src+0x76>
 8018122:	4b52      	ldr	r3, [pc, #328]	; (801826c <udp_sendto_if_src+0x1ac>)
 8018124:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8018128:	4955      	ldr	r1, [pc, #340]	; (8018280 <udp_sendto_if_src+0x1c0>)
 801812a:	4852      	ldr	r0, [pc, #328]	; (8018274 <udp_sendto_if_src+0x1b4>)
 801812c:	f003 f814 	bl	801b158 <iprintf>
 8018130:	f06f 030f 	mvn.w	r3, #15
 8018134:	e095      	b.n	8018262 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8018136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018138:	2b00      	cmp	r3, #0
 801813a:	d109      	bne.n	8018150 <udp_sendto_if_src+0x90>
 801813c:	4b4b      	ldr	r3, [pc, #300]	; (801826c <udp_sendto_if_src+0x1ac>)
 801813e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8018142:	4950      	ldr	r1, [pc, #320]	; (8018284 <udp_sendto_if_src+0x1c4>)
 8018144:	484b      	ldr	r0, [pc, #300]	; (8018274 <udp_sendto_if_src+0x1b4>)
 8018146:	f003 f807 	bl	801b158 <iprintf>
 801814a:	f06f 030f 	mvn.w	r3, #15
 801814e:	e088      	b.n	8018262 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	8a5b      	ldrh	r3, [r3, #18]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d10f      	bne.n	8018178 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018158:	68f9      	ldr	r1, [r7, #12]
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	8a5b      	ldrh	r3, [r3, #18]
 801815e:	461a      	mov	r2, r3
 8018160:	68f8      	ldr	r0, [r7, #12]
 8018162:	f000 f893 	bl	801828c <udp_bind>
 8018166:	4603      	mov	r3, r0
 8018168:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801816a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d002      	beq.n	8018178 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018176:	e074      	b.n	8018262 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018178:	68bb      	ldr	r3, [r7, #8]
 801817a:	891b      	ldrh	r3, [r3, #8]
 801817c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018180:	4293      	cmp	r3, r2
 8018182:	d902      	bls.n	801818a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018184:	f04f 33ff 	mov.w	r3, #4294967295
 8018188:	e06b      	b.n	8018262 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801818a:	2108      	movs	r1, #8
 801818c:	68b8      	ldr	r0, [r7, #8]
 801818e:	f7f8 ff5f 	bl	8011050 <pbuf_add_header>
 8018192:	4603      	mov	r3, r0
 8018194:	2b00      	cmp	r3, #0
 8018196:	d015      	beq.n	80181c4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018198:	f44f 7220 	mov.w	r2, #640	; 0x280
 801819c:	2108      	movs	r1, #8
 801819e:	2022      	movs	r0, #34	; 0x22
 80181a0:	f7f8 fd08 	bl	8010bb4 <pbuf_alloc>
 80181a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80181a6:	69fb      	ldr	r3, [r7, #28]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d102      	bne.n	80181b2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80181ac:	f04f 33ff 	mov.w	r3, #4294967295
 80181b0:	e057      	b.n	8018262 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	891b      	ldrh	r3, [r3, #8]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d006      	beq.n	80181c8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80181ba:	68b9      	ldr	r1, [r7, #8]
 80181bc:	69f8      	ldr	r0, [r7, #28]
 80181be:	f7f9 f933 	bl	8011428 <pbuf_chain>
 80181c2:	e001      	b.n	80181c8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80181c8:	69fb      	ldr	r3, [r7, #28]
 80181ca:	895b      	ldrh	r3, [r3, #10]
 80181cc:	2b07      	cmp	r3, #7
 80181ce:	d806      	bhi.n	80181de <udp_sendto_if_src+0x11e>
 80181d0:	4b26      	ldr	r3, [pc, #152]	; (801826c <udp_sendto_if_src+0x1ac>)
 80181d2:	f240 320d 	movw	r2, #781	; 0x30d
 80181d6:	492c      	ldr	r1, [pc, #176]	; (8018288 <udp_sendto_if_src+0x1c8>)
 80181d8:	4826      	ldr	r0, [pc, #152]	; (8018274 <udp_sendto_if_src+0x1b4>)
 80181da:	f002 ffbd 	bl	801b158 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80181de:	69fb      	ldr	r3, [r7, #28]
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	8a5b      	ldrh	r3, [r3, #18]
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7f7 fbd5 	bl	800f998 <lwip_htons>
 80181ee:	4603      	mov	r3, r0
 80181f0:	461a      	mov	r2, r3
 80181f2:	697b      	ldr	r3, [r7, #20]
 80181f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80181f6:	887b      	ldrh	r3, [r7, #2]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7f7 fbcd 	bl	800f998 <lwip_htons>
 80181fe:	4603      	mov	r3, r0
 8018200:	461a      	mov	r2, r3
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018206:	697b      	ldr	r3, [r7, #20]
 8018208:	2200      	movs	r2, #0
 801820a:	719a      	strb	r2, [r3, #6]
 801820c:	2200      	movs	r2, #0
 801820e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018210:	69fb      	ldr	r3, [r7, #28]
 8018212:	891b      	ldrh	r3, [r3, #8]
 8018214:	4618      	mov	r0, r3
 8018216:	f7f7 fbbf 	bl	800f998 <lwip_htons>
 801821a:	4603      	mov	r3, r0
 801821c:	461a      	mov	r2, r3
 801821e:	697b      	ldr	r3, [r7, #20]
 8018220:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018222:	2311      	movs	r3, #17
 8018224:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	7adb      	ldrb	r3, [r3, #11]
 801822a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	7a9b      	ldrb	r3, [r3, #10]
 8018230:	7cb9      	ldrb	r1, [r7, #18]
 8018232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018234:	9202      	str	r2, [sp, #8]
 8018236:	7cfa      	ldrb	r2, [r7, #19]
 8018238:	9201      	str	r2, [sp, #4]
 801823a:	9300      	str	r3, [sp, #0]
 801823c:	460b      	mov	r3, r1
 801823e:	687a      	ldr	r2, [r7, #4]
 8018240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018242:	69f8      	ldr	r0, [r7, #28]
 8018244:	f001 fc22 	bl	8019a8c <ip4_output_if_src>
 8018248:	4603      	mov	r3, r0
 801824a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801824c:	69fa      	ldr	r2, [r7, #28]
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	429a      	cmp	r2, r3
 8018252:	d004      	beq.n	801825e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018254:	69f8      	ldr	r0, [r7, #28]
 8018256:	f7f8 ffc3 	bl	80111e0 <pbuf_free>
    q = NULL;
 801825a:	2300      	movs	r3, #0
 801825c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801825e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018262:	4618      	mov	r0, r3
 8018264:	3720      	adds	r7, #32
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop
 801826c:	0801f318 	.word	0x0801f318
 8018270:	0801f504 	.word	0x0801f504
 8018274:	0801f36c 	.word	0x0801f36c
 8018278:	0801f524 	.word	0x0801f524
 801827c:	0801f544 	.word	0x0801f544
 8018280:	0801f568 	.word	0x0801f568
 8018284:	0801f58c 	.word	0x0801f58c
 8018288:	0801f5b0 	.word	0x0801f5b0

0801828c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b086      	sub	sp, #24
 8018290:	af00      	add	r7, sp, #0
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	4613      	mov	r3, r2
 8018298:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801829a:	68bb      	ldr	r3, [r7, #8]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d101      	bne.n	80182a4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80182a0:	4b39      	ldr	r3, [pc, #228]	; (8018388 <udp_bind+0xfc>)
 80182a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d109      	bne.n	80182be <udp_bind+0x32>
 80182aa:	4b38      	ldr	r3, [pc, #224]	; (801838c <udp_bind+0x100>)
 80182ac:	f240 32b7 	movw	r2, #951	; 0x3b7
 80182b0:	4937      	ldr	r1, [pc, #220]	; (8018390 <udp_bind+0x104>)
 80182b2:	4838      	ldr	r0, [pc, #224]	; (8018394 <udp_bind+0x108>)
 80182b4:	f002 ff50 	bl	801b158 <iprintf>
 80182b8:	f06f 030f 	mvn.w	r3, #15
 80182bc:	e060      	b.n	8018380 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80182be:	2300      	movs	r3, #0
 80182c0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80182c2:	4b35      	ldr	r3, [pc, #212]	; (8018398 <udp_bind+0x10c>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	617b      	str	r3, [r7, #20]
 80182c8:	e009      	b.n	80182de <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	429a      	cmp	r2, r3
 80182d0:	d102      	bne.n	80182d8 <udp_bind+0x4c>
      rebind = 1;
 80182d2:	2301      	movs	r3, #1
 80182d4:	74fb      	strb	r3, [r7, #19]
      break;
 80182d6:	e005      	b.n	80182e4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	68db      	ldr	r3, [r3, #12]
 80182dc:	617b      	str	r3, [r7, #20]
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d1f2      	bne.n	80182ca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80182e4:	88fb      	ldrh	r3, [r7, #6]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d109      	bne.n	80182fe <udp_bind+0x72>
    port = udp_new_port();
 80182ea:	f7ff fc35 	bl	8017b58 <udp_new_port>
 80182ee:	4603      	mov	r3, r0
 80182f0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80182f2:	88fb      	ldrh	r3, [r7, #6]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d12c      	bne.n	8018352 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80182f8:	f06f 0307 	mvn.w	r3, #7
 80182fc:	e040      	b.n	8018380 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80182fe:	4b26      	ldr	r3, [pc, #152]	; (8018398 <udp_bind+0x10c>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	617b      	str	r3, [r7, #20]
 8018304:	e022      	b.n	801834c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018306:	68fa      	ldr	r2, [r7, #12]
 8018308:	697b      	ldr	r3, [r7, #20]
 801830a:	429a      	cmp	r2, r3
 801830c:	d01b      	beq.n	8018346 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801830e:	697b      	ldr	r3, [r7, #20]
 8018310:	8a5b      	ldrh	r3, [r3, #18]
 8018312:	88fa      	ldrh	r2, [r7, #6]
 8018314:	429a      	cmp	r2, r3
 8018316:	d116      	bne.n	8018346 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	681a      	ldr	r2, [r3, #0]
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018320:	429a      	cmp	r2, r3
 8018322:	d00d      	beq.n	8018340 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d00a      	beq.n	8018340 <udp_bind+0xb4>
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	2b00      	cmp	r3, #0
 8018330:	d006      	beq.n	8018340 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018332:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018334:	2b00      	cmp	r3, #0
 8018336:	d003      	beq.n	8018340 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d102      	bne.n	8018346 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018340:	f06f 0307 	mvn.w	r3, #7
 8018344:	e01c      	b.n	8018380 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018346:	697b      	ldr	r3, [r7, #20]
 8018348:	68db      	ldr	r3, [r3, #12]
 801834a:	617b      	str	r3, [r7, #20]
 801834c:	697b      	ldr	r3, [r7, #20]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d1d9      	bne.n	8018306 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018352:	68bb      	ldr	r3, [r7, #8]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d002      	beq.n	801835e <udp_bind+0xd2>
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	e000      	b.n	8018360 <udp_bind+0xd4>
 801835e:	2300      	movs	r3, #0
 8018360:	68fa      	ldr	r2, [r7, #12]
 8018362:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	88fa      	ldrh	r2, [r7, #6]
 8018368:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801836a:	7cfb      	ldrb	r3, [r7, #19]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d106      	bne.n	801837e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018370:	4b09      	ldr	r3, [pc, #36]	; (8018398 <udp_bind+0x10c>)
 8018372:	681a      	ldr	r2, [r3, #0]
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018378:	4a07      	ldr	r2, [pc, #28]	; (8018398 <udp_bind+0x10c>)
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801837e:	2300      	movs	r3, #0
}
 8018380:	4618      	mov	r0, r3
 8018382:	3718      	adds	r7, #24
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}
 8018388:	0801fec4 	.word	0x0801fec4
 801838c:	0801f318 	.word	0x0801f318
 8018390:	0801f5e0 	.word	0x0801f5e0
 8018394:	0801f36c 	.word	0x0801f36c
 8018398:	2003d138 	.word	0x2003d138

0801839c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801839c:	b580      	push	{r7, lr}
 801839e:	b084      	sub	sp, #16
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	60f8      	str	r0, [r7, #12]
 80183a4:	60b9      	str	r1, [r7, #8]
 80183a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d107      	bne.n	80183be <udp_recv+0x22>
 80183ae:	4b08      	ldr	r3, [pc, #32]	; (80183d0 <udp_recv+0x34>)
 80183b0:	f240 428a 	movw	r2, #1162	; 0x48a
 80183b4:	4907      	ldr	r1, [pc, #28]	; (80183d4 <udp_recv+0x38>)
 80183b6:	4808      	ldr	r0, [pc, #32]	; (80183d8 <udp_recv+0x3c>)
 80183b8:	f002 fece 	bl	801b158 <iprintf>
 80183bc:	e005      	b.n	80183ca <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	68ba      	ldr	r2, [r7, #8]
 80183c2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	61da      	str	r2, [r3, #28]
}
 80183ca:	3710      	adds	r7, #16
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}
 80183d0:	0801f318 	.word	0x0801f318
 80183d4:	0801f64c 	.word	0x0801f64c
 80183d8:	0801f36c 	.word	0x0801f36c

080183dc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b084      	sub	sp, #16
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d107      	bne.n	80183fa <udp_remove+0x1e>
 80183ea:	4b19      	ldr	r3, [pc, #100]	; (8018450 <udp_remove+0x74>)
 80183ec:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80183f0:	4918      	ldr	r1, [pc, #96]	; (8018454 <udp_remove+0x78>)
 80183f2:	4819      	ldr	r0, [pc, #100]	; (8018458 <udp_remove+0x7c>)
 80183f4:	f002 feb0 	bl	801b158 <iprintf>
 80183f8:	e026      	b.n	8018448 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80183fa:	4b18      	ldr	r3, [pc, #96]	; (801845c <udp_remove+0x80>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	687a      	ldr	r2, [r7, #4]
 8018400:	429a      	cmp	r2, r3
 8018402:	d105      	bne.n	8018410 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018404:	4b15      	ldr	r3, [pc, #84]	; (801845c <udp_remove+0x80>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	68db      	ldr	r3, [r3, #12]
 801840a:	4a14      	ldr	r2, [pc, #80]	; (801845c <udp_remove+0x80>)
 801840c:	6013      	str	r3, [r2, #0]
 801840e:	e017      	b.n	8018440 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018410:	4b12      	ldr	r3, [pc, #72]	; (801845c <udp_remove+0x80>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	60fb      	str	r3, [r7, #12]
 8018416:	e010      	b.n	801843a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	68db      	ldr	r3, [r3, #12]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d009      	beq.n	8018434 <udp_remove+0x58>
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	68db      	ldr	r3, [r3, #12]
 8018424:	687a      	ldr	r2, [r7, #4]
 8018426:	429a      	cmp	r2, r3
 8018428:	d104      	bne.n	8018434 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	68da      	ldr	r2, [r3, #12]
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	60da      	str	r2, [r3, #12]
        break;
 8018432:	e005      	b.n	8018440 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	68db      	ldr	r3, [r3, #12]
 8018438:	60fb      	str	r3, [r7, #12]
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1eb      	bne.n	8018418 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018440:	6879      	ldr	r1, [r7, #4]
 8018442:	2000      	movs	r0, #0
 8018444:	f7f7 fff6 	bl	8010434 <memp_free>
}
 8018448:	3710      	adds	r7, #16
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}
 801844e:	bf00      	nop
 8018450:	0801f318 	.word	0x0801f318
 8018454:	0801f664 	.word	0x0801f664
 8018458:	0801f36c 	.word	0x0801f36c
 801845c:	2003d138 	.word	0x2003d138

08018460 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018466:	2000      	movs	r0, #0
 8018468:	f7f7 ff6e 	bl	8010348 <memp_malloc>
 801846c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d007      	beq.n	8018484 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018474:	2220      	movs	r2, #32
 8018476:	2100      	movs	r1, #0
 8018478:	6878      	ldr	r0, [r7, #4]
 801847a:	f002 ffc3 	bl	801b404 <memset>
    pcb->ttl = UDP_TTL;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	22ff      	movs	r2, #255	; 0xff
 8018482:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018484:	687b      	ldr	r3, [r7, #4]
}
 8018486:	4618      	mov	r0, r3
 8018488:	3708      	adds	r7, #8
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}

0801848e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801848e:	b580      	push	{r7, lr}
 8018490:	b084      	sub	sp, #16
 8018492:	af00      	add	r7, sp, #0
 8018494:	4603      	mov	r3, r0
 8018496:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018498:	f7ff ffe2 	bl	8018460 <udp_new>
 801849c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801849e:	68fb      	ldr	r3, [r7, #12]
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	3710      	adds	r7, #16
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}

080184a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80184a8:	b480      	push	{r7}
 80184aa:	b085      	sub	sp, #20
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
 80184b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d01e      	beq.n	80184f6 <udp_netif_ip_addr_changed+0x4e>
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d01a      	beq.n	80184f6 <udp_netif_ip_addr_changed+0x4e>
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d017      	beq.n	80184f6 <udp_netif_ip_addr_changed+0x4e>
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d013      	beq.n	80184f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80184ce:	4b0d      	ldr	r3, [pc, #52]	; (8018504 <udp_netif_ip_addr_changed+0x5c>)
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	60fb      	str	r3, [r7, #12]
 80184d4:	e00c      	b.n	80184f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	681a      	ldr	r2, [r3, #0]
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	429a      	cmp	r2, r3
 80184e0:	d103      	bne.n	80184ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80184e2:	683b      	ldr	r3, [r7, #0]
 80184e4:	681a      	ldr	r2, [r3, #0]
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	68db      	ldr	r3, [r3, #12]
 80184ee:	60fb      	str	r3, [r7, #12]
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d1ef      	bne.n	80184d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80184f6:	bf00      	nop
 80184f8:	3714      	adds	r7, #20
 80184fa:	46bd      	mov	sp, r7
 80184fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018500:	4770      	bx	lr
 8018502:	bf00      	nop
 8018504:	2003d138 	.word	0x2003d138

08018508 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b082      	sub	sp, #8
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018510:	4915      	ldr	r1, [pc, #84]	; (8018568 <etharp_free_entry+0x60>)
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	4613      	mov	r3, r2
 8018516:	005b      	lsls	r3, r3, #1
 8018518:	4413      	add	r3, r2
 801851a:	00db      	lsls	r3, r3, #3
 801851c:	440b      	add	r3, r1
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d013      	beq.n	801854c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018524:	4910      	ldr	r1, [pc, #64]	; (8018568 <etharp_free_entry+0x60>)
 8018526:	687a      	ldr	r2, [r7, #4]
 8018528:	4613      	mov	r3, r2
 801852a:	005b      	lsls	r3, r3, #1
 801852c:	4413      	add	r3, r2
 801852e:	00db      	lsls	r3, r3, #3
 8018530:	440b      	add	r3, r1
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4618      	mov	r0, r3
 8018536:	f7f8 fe53 	bl	80111e0 <pbuf_free>
    arp_table[i].q = NULL;
 801853a:	490b      	ldr	r1, [pc, #44]	; (8018568 <etharp_free_entry+0x60>)
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	4613      	mov	r3, r2
 8018540:	005b      	lsls	r3, r3, #1
 8018542:	4413      	add	r3, r2
 8018544:	00db      	lsls	r3, r3, #3
 8018546:	440b      	add	r3, r1
 8018548:	2200      	movs	r2, #0
 801854a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801854c:	4906      	ldr	r1, [pc, #24]	; (8018568 <etharp_free_entry+0x60>)
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	4613      	mov	r3, r2
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	4413      	add	r3, r2
 8018556:	00db      	lsls	r3, r3, #3
 8018558:	440b      	add	r3, r1
 801855a:	3314      	adds	r3, #20
 801855c:	2200      	movs	r2, #0
 801855e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018560:	bf00      	nop
 8018562:	3708      	adds	r7, #8
 8018564:	46bd      	mov	sp, r7
 8018566:	bd80      	pop	{r7, pc}
 8018568:	2003d13c 	.word	0x2003d13c

0801856c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b082      	sub	sp, #8
 8018570:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018572:	2300      	movs	r3, #0
 8018574:	607b      	str	r3, [r7, #4]
 8018576:	e096      	b.n	80186a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018578:	494f      	ldr	r1, [pc, #316]	; (80186b8 <etharp_tmr+0x14c>)
 801857a:	687a      	ldr	r2, [r7, #4]
 801857c:	4613      	mov	r3, r2
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	4413      	add	r3, r2
 8018582:	00db      	lsls	r3, r3, #3
 8018584:	440b      	add	r3, r1
 8018586:	3314      	adds	r3, #20
 8018588:	781b      	ldrb	r3, [r3, #0]
 801858a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801858c:	78fb      	ldrb	r3, [r7, #3]
 801858e:	2b00      	cmp	r3, #0
 8018590:	f000 8086 	beq.w	80186a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018594:	4948      	ldr	r1, [pc, #288]	; (80186b8 <etharp_tmr+0x14c>)
 8018596:	687a      	ldr	r2, [r7, #4]
 8018598:	4613      	mov	r3, r2
 801859a:	005b      	lsls	r3, r3, #1
 801859c:	4413      	add	r3, r2
 801859e:	00db      	lsls	r3, r3, #3
 80185a0:	440b      	add	r3, r1
 80185a2:	3312      	adds	r3, #18
 80185a4:	881b      	ldrh	r3, [r3, #0]
 80185a6:	3301      	adds	r3, #1
 80185a8:	b298      	uxth	r0, r3
 80185aa:	4943      	ldr	r1, [pc, #268]	; (80186b8 <etharp_tmr+0x14c>)
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	4613      	mov	r3, r2
 80185b0:	005b      	lsls	r3, r3, #1
 80185b2:	4413      	add	r3, r2
 80185b4:	00db      	lsls	r3, r3, #3
 80185b6:	440b      	add	r3, r1
 80185b8:	3312      	adds	r3, #18
 80185ba:	4602      	mov	r2, r0
 80185bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80185be:	493e      	ldr	r1, [pc, #248]	; (80186b8 <etharp_tmr+0x14c>)
 80185c0:	687a      	ldr	r2, [r7, #4]
 80185c2:	4613      	mov	r3, r2
 80185c4:	005b      	lsls	r3, r3, #1
 80185c6:	4413      	add	r3, r2
 80185c8:	00db      	lsls	r3, r3, #3
 80185ca:	440b      	add	r3, r1
 80185cc:	3312      	adds	r3, #18
 80185ce:	881b      	ldrh	r3, [r3, #0]
 80185d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80185d4:	d215      	bcs.n	8018602 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80185d6:	4938      	ldr	r1, [pc, #224]	; (80186b8 <etharp_tmr+0x14c>)
 80185d8:	687a      	ldr	r2, [r7, #4]
 80185da:	4613      	mov	r3, r2
 80185dc:	005b      	lsls	r3, r3, #1
 80185de:	4413      	add	r3, r2
 80185e0:	00db      	lsls	r3, r3, #3
 80185e2:	440b      	add	r3, r1
 80185e4:	3314      	adds	r3, #20
 80185e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80185e8:	2b01      	cmp	r3, #1
 80185ea:	d10e      	bne.n	801860a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80185ec:	4932      	ldr	r1, [pc, #200]	; (80186b8 <etharp_tmr+0x14c>)
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	4613      	mov	r3, r2
 80185f2:	005b      	lsls	r3, r3, #1
 80185f4:	4413      	add	r3, r2
 80185f6:	00db      	lsls	r3, r3, #3
 80185f8:	440b      	add	r3, r1
 80185fa:	3312      	adds	r3, #18
 80185fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80185fe:	2b04      	cmp	r3, #4
 8018600:	d903      	bls.n	801860a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018602:	6878      	ldr	r0, [r7, #4]
 8018604:	f7ff ff80 	bl	8018508 <etharp_free_entry>
 8018608:	e04a      	b.n	80186a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801860a:	492b      	ldr	r1, [pc, #172]	; (80186b8 <etharp_tmr+0x14c>)
 801860c:	687a      	ldr	r2, [r7, #4]
 801860e:	4613      	mov	r3, r2
 8018610:	005b      	lsls	r3, r3, #1
 8018612:	4413      	add	r3, r2
 8018614:	00db      	lsls	r3, r3, #3
 8018616:	440b      	add	r3, r1
 8018618:	3314      	adds	r3, #20
 801861a:	781b      	ldrb	r3, [r3, #0]
 801861c:	2b03      	cmp	r3, #3
 801861e:	d10a      	bne.n	8018636 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018620:	4925      	ldr	r1, [pc, #148]	; (80186b8 <etharp_tmr+0x14c>)
 8018622:	687a      	ldr	r2, [r7, #4]
 8018624:	4613      	mov	r3, r2
 8018626:	005b      	lsls	r3, r3, #1
 8018628:	4413      	add	r3, r2
 801862a:	00db      	lsls	r3, r3, #3
 801862c:	440b      	add	r3, r1
 801862e:	3314      	adds	r3, #20
 8018630:	2204      	movs	r2, #4
 8018632:	701a      	strb	r2, [r3, #0]
 8018634:	e034      	b.n	80186a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018636:	4920      	ldr	r1, [pc, #128]	; (80186b8 <etharp_tmr+0x14c>)
 8018638:	687a      	ldr	r2, [r7, #4]
 801863a:	4613      	mov	r3, r2
 801863c:	005b      	lsls	r3, r3, #1
 801863e:	4413      	add	r3, r2
 8018640:	00db      	lsls	r3, r3, #3
 8018642:	440b      	add	r3, r1
 8018644:	3314      	adds	r3, #20
 8018646:	781b      	ldrb	r3, [r3, #0]
 8018648:	2b04      	cmp	r3, #4
 801864a:	d10a      	bne.n	8018662 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801864c:	491a      	ldr	r1, [pc, #104]	; (80186b8 <etharp_tmr+0x14c>)
 801864e:	687a      	ldr	r2, [r7, #4]
 8018650:	4613      	mov	r3, r2
 8018652:	005b      	lsls	r3, r3, #1
 8018654:	4413      	add	r3, r2
 8018656:	00db      	lsls	r3, r3, #3
 8018658:	440b      	add	r3, r1
 801865a:	3314      	adds	r3, #20
 801865c:	2202      	movs	r2, #2
 801865e:	701a      	strb	r2, [r3, #0]
 8018660:	e01e      	b.n	80186a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018662:	4915      	ldr	r1, [pc, #84]	; (80186b8 <etharp_tmr+0x14c>)
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	4613      	mov	r3, r2
 8018668:	005b      	lsls	r3, r3, #1
 801866a:	4413      	add	r3, r2
 801866c:	00db      	lsls	r3, r3, #3
 801866e:	440b      	add	r3, r1
 8018670:	3314      	adds	r3, #20
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	2b01      	cmp	r3, #1
 8018676:	d113      	bne.n	80186a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018678:	490f      	ldr	r1, [pc, #60]	; (80186b8 <etharp_tmr+0x14c>)
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	4613      	mov	r3, r2
 801867e:	005b      	lsls	r3, r3, #1
 8018680:	4413      	add	r3, r2
 8018682:	00db      	lsls	r3, r3, #3
 8018684:	440b      	add	r3, r1
 8018686:	3308      	adds	r3, #8
 8018688:	6818      	ldr	r0, [r3, #0]
 801868a:	687a      	ldr	r2, [r7, #4]
 801868c:	4613      	mov	r3, r2
 801868e:	005b      	lsls	r3, r3, #1
 8018690:	4413      	add	r3, r2
 8018692:	00db      	lsls	r3, r3, #3
 8018694:	4a08      	ldr	r2, [pc, #32]	; (80186b8 <etharp_tmr+0x14c>)
 8018696:	4413      	add	r3, r2
 8018698:	3304      	adds	r3, #4
 801869a:	4619      	mov	r1, r3
 801869c:	f000 fe6e 	bl	801937c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	3301      	adds	r3, #1
 80186a4:	607b      	str	r3, [r7, #4]
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	2b09      	cmp	r3, #9
 80186aa:	f77f af65 	ble.w	8018578 <etharp_tmr+0xc>
      }
    }
  }
}
 80186ae:	bf00      	nop
 80186b0:	bf00      	nop
 80186b2:	3708      	adds	r7, #8
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	2003d13c 	.word	0x2003d13c

080186bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b08a      	sub	sp, #40	; 0x28
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	60f8      	str	r0, [r7, #12]
 80186c4:	460b      	mov	r3, r1
 80186c6:	607a      	str	r2, [r7, #4]
 80186c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80186ca:	230a      	movs	r3, #10
 80186cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80186ce:	230a      	movs	r3, #10
 80186d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80186d2:	230a      	movs	r3, #10
 80186d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80186d6:	2300      	movs	r3, #0
 80186d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80186da:	230a      	movs	r3, #10
 80186dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	83bb      	strh	r3, [r7, #28]
 80186e2:	2300      	movs	r3, #0
 80186e4:	837b      	strh	r3, [r7, #26]
 80186e6:	2300      	movs	r3, #0
 80186e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186ea:	2300      	movs	r3, #0
 80186ec:	843b      	strh	r3, [r7, #32]
 80186ee:	e0ae      	b.n	801884e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80186f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186f4:	49a6      	ldr	r1, [pc, #664]	; (8018990 <etharp_find_entry+0x2d4>)
 80186f6:	4613      	mov	r3, r2
 80186f8:	005b      	lsls	r3, r3, #1
 80186fa:	4413      	add	r3, r2
 80186fc:	00db      	lsls	r3, r3, #3
 80186fe:	440b      	add	r3, r1
 8018700:	3314      	adds	r3, #20
 8018702:	781b      	ldrb	r3, [r3, #0]
 8018704:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018706:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801870a:	2b0a      	cmp	r3, #10
 801870c:	d105      	bne.n	801871a <etharp_find_entry+0x5e>
 801870e:	7dfb      	ldrb	r3, [r7, #23]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d102      	bne.n	801871a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018714:	8c3b      	ldrh	r3, [r7, #32]
 8018716:	847b      	strh	r3, [r7, #34]	; 0x22
 8018718:	e095      	b.n	8018846 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801871a:	7dfb      	ldrb	r3, [r7, #23]
 801871c:	2b00      	cmp	r3, #0
 801871e:	f000 8092 	beq.w	8018846 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018722:	7dfb      	ldrb	r3, [r7, #23]
 8018724:	2b01      	cmp	r3, #1
 8018726:	d009      	beq.n	801873c <etharp_find_entry+0x80>
 8018728:	7dfb      	ldrb	r3, [r7, #23]
 801872a:	2b01      	cmp	r3, #1
 801872c:	d806      	bhi.n	801873c <etharp_find_entry+0x80>
 801872e:	4b99      	ldr	r3, [pc, #612]	; (8018994 <etharp_find_entry+0x2d8>)
 8018730:	f240 1223 	movw	r2, #291	; 0x123
 8018734:	4998      	ldr	r1, [pc, #608]	; (8018998 <etharp_find_entry+0x2dc>)
 8018736:	4899      	ldr	r0, [pc, #612]	; (801899c <etharp_find_entry+0x2e0>)
 8018738:	f002 fd0e 	bl	801b158 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d020      	beq.n	8018784 <etharp_find_entry+0xc8>
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	6819      	ldr	r1, [r3, #0]
 8018746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801874a:	4891      	ldr	r0, [pc, #580]	; (8018990 <etharp_find_entry+0x2d4>)
 801874c:	4613      	mov	r3, r2
 801874e:	005b      	lsls	r3, r3, #1
 8018750:	4413      	add	r3, r2
 8018752:	00db      	lsls	r3, r3, #3
 8018754:	4403      	add	r3, r0
 8018756:	3304      	adds	r3, #4
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	4299      	cmp	r1, r3
 801875c:	d112      	bne.n	8018784 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d00c      	beq.n	801877e <etharp_find_entry+0xc2>
 8018764:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018768:	4989      	ldr	r1, [pc, #548]	; (8018990 <etharp_find_entry+0x2d4>)
 801876a:	4613      	mov	r3, r2
 801876c:	005b      	lsls	r3, r3, #1
 801876e:	4413      	add	r3, r2
 8018770:	00db      	lsls	r3, r3, #3
 8018772:	440b      	add	r3, r1
 8018774:	3308      	adds	r3, #8
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	687a      	ldr	r2, [r7, #4]
 801877a:	429a      	cmp	r2, r3
 801877c:	d102      	bne.n	8018784 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801877e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018782:	e100      	b.n	8018986 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018784:	7dfb      	ldrb	r3, [r7, #23]
 8018786:	2b01      	cmp	r3, #1
 8018788:	d140      	bne.n	801880c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801878a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801878e:	4980      	ldr	r1, [pc, #512]	; (8018990 <etharp_find_entry+0x2d4>)
 8018790:	4613      	mov	r3, r2
 8018792:	005b      	lsls	r3, r3, #1
 8018794:	4413      	add	r3, r2
 8018796:	00db      	lsls	r3, r3, #3
 8018798:	440b      	add	r3, r1
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d01a      	beq.n	80187d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80187a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187a4:	497a      	ldr	r1, [pc, #488]	; (8018990 <etharp_find_entry+0x2d4>)
 80187a6:	4613      	mov	r3, r2
 80187a8:	005b      	lsls	r3, r3, #1
 80187aa:	4413      	add	r3, r2
 80187ac:	00db      	lsls	r3, r3, #3
 80187ae:	440b      	add	r3, r1
 80187b0:	3312      	adds	r3, #18
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	8bba      	ldrh	r2, [r7, #28]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d845      	bhi.n	8018846 <etharp_find_entry+0x18a>
            old_queue = i;
 80187ba:	8c3b      	ldrh	r3, [r7, #32]
 80187bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80187be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187c2:	4973      	ldr	r1, [pc, #460]	; (8018990 <etharp_find_entry+0x2d4>)
 80187c4:	4613      	mov	r3, r2
 80187c6:	005b      	lsls	r3, r3, #1
 80187c8:	4413      	add	r3, r2
 80187ca:	00db      	lsls	r3, r3, #3
 80187cc:	440b      	add	r3, r1
 80187ce:	3312      	adds	r3, #18
 80187d0:	881b      	ldrh	r3, [r3, #0]
 80187d2:	83bb      	strh	r3, [r7, #28]
 80187d4:	e037      	b.n	8018846 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80187d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187da:	496d      	ldr	r1, [pc, #436]	; (8018990 <etharp_find_entry+0x2d4>)
 80187dc:	4613      	mov	r3, r2
 80187de:	005b      	lsls	r3, r3, #1
 80187e0:	4413      	add	r3, r2
 80187e2:	00db      	lsls	r3, r3, #3
 80187e4:	440b      	add	r3, r1
 80187e6:	3312      	adds	r3, #18
 80187e8:	881b      	ldrh	r3, [r3, #0]
 80187ea:	8b7a      	ldrh	r2, [r7, #26]
 80187ec:	429a      	cmp	r2, r3
 80187ee:	d82a      	bhi.n	8018846 <etharp_find_entry+0x18a>
            old_pending = i;
 80187f0:	8c3b      	ldrh	r3, [r7, #32]
 80187f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80187f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187f8:	4965      	ldr	r1, [pc, #404]	; (8018990 <etharp_find_entry+0x2d4>)
 80187fa:	4613      	mov	r3, r2
 80187fc:	005b      	lsls	r3, r3, #1
 80187fe:	4413      	add	r3, r2
 8018800:	00db      	lsls	r3, r3, #3
 8018802:	440b      	add	r3, r1
 8018804:	3312      	adds	r3, #18
 8018806:	881b      	ldrh	r3, [r3, #0]
 8018808:	837b      	strh	r3, [r7, #26]
 801880a:	e01c      	b.n	8018846 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801880c:	7dfb      	ldrb	r3, [r7, #23]
 801880e:	2b01      	cmp	r3, #1
 8018810:	d919      	bls.n	8018846 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018812:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018816:	495e      	ldr	r1, [pc, #376]	; (8018990 <etharp_find_entry+0x2d4>)
 8018818:	4613      	mov	r3, r2
 801881a:	005b      	lsls	r3, r3, #1
 801881c:	4413      	add	r3, r2
 801881e:	00db      	lsls	r3, r3, #3
 8018820:	440b      	add	r3, r1
 8018822:	3312      	adds	r3, #18
 8018824:	881b      	ldrh	r3, [r3, #0]
 8018826:	8b3a      	ldrh	r2, [r7, #24]
 8018828:	429a      	cmp	r2, r3
 801882a:	d80c      	bhi.n	8018846 <etharp_find_entry+0x18a>
            old_stable = i;
 801882c:	8c3b      	ldrh	r3, [r7, #32]
 801882e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018830:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018834:	4956      	ldr	r1, [pc, #344]	; (8018990 <etharp_find_entry+0x2d4>)
 8018836:	4613      	mov	r3, r2
 8018838:	005b      	lsls	r3, r3, #1
 801883a:	4413      	add	r3, r2
 801883c:	00db      	lsls	r3, r3, #3
 801883e:	440b      	add	r3, r1
 8018840:	3312      	adds	r3, #18
 8018842:	881b      	ldrh	r3, [r3, #0]
 8018844:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018846:	8c3b      	ldrh	r3, [r7, #32]
 8018848:	3301      	adds	r3, #1
 801884a:	b29b      	uxth	r3, r3
 801884c:	843b      	strh	r3, [r7, #32]
 801884e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018852:	2b09      	cmp	r3, #9
 8018854:	f77f af4c 	ble.w	80186f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018858:	7afb      	ldrb	r3, [r7, #11]
 801885a:	f003 0302 	and.w	r3, r3, #2
 801885e:	2b00      	cmp	r3, #0
 8018860:	d108      	bne.n	8018874 <etharp_find_entry+0x1b8>
 8018862:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018866:	2b0a      	cmp	r3, #10
 8018868:	d107      	bne.n	801887a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801886a:	7afb      	ldrb	r3, [r7, #11]
 801886c:	f003 0301 	and.w	r3, r3, #1
 8018870:	2b00      	cmp	r3, #0
 8018872:	d102      	bne.n	801887a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018874:	f04f 33ff 	mov.w	r3, #4294967295
 8018878:	e085      	b.n	8018986 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801887a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801887e:	2b09      	cmp	r3, #9
 8018880:	dc02      	bgt.n	8018888 <etharp_find_entry+0x1cc>
    i = empty;
 8018882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018884:	843b      	strh	r3, [r7, #32]
 8018886:	e039      	b.n	80188fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018888:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801888c:	2b09      	cmp	r3, #9
 801888e:	dc14      	bgt.n	80188ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018892:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018894:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018898:	493d      	ldr	r1, [pc, #244]	; (8018990 <etharp_find_entry+0x2d4>)
 801889a:	4613      	mov	r3, r2
 801889c:	005b      	lsls	r3, r3, #1
 801889e:	4413      	add	r3, r2
 80188a0:	00db      	lsls	r3, r3, #3
 80188a2:	440b      	add	r3, r1
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d018      	beq.n	80188dc <etharp_find_entry+0x220>
 80188aa:	4b3a      	ldr	r3, [pc, #232]	; (8018994 <etharp_find_entry+0x2d8>)
 80188ac:	f240 126d 	movw	r2, #365	; 0x16d
 80188b0:	493b      	ldr	r1, [pc, #236]	; (80189a0 <etharp_find_entry+0x2e4>)
 80188b2:	483a      	ldr	r0, [pc, #232]	; (801899c <etharp_find_entry+0x2e0>)
 80188b4:	f002 fc50 	bl	801b158 <iprintf>
 80188b8:	e010      	b.n	80188dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80188ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80188be:	2b09      	cmp	r3, #9
 80188c0:	dc02      	bgt.n	80188c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80188c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80188c4:	843b      	strh	r3, [r7, #32]
 80188c6:	e009      	b.n	80188dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80188c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80188cc:	2b09      	cmp	r3, #9
 80188ce:	dc02      	bgt.n	80188d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80188d0:	8bfb      	ldrh	r3, [r7, #30]
 80188d2:	843b      	strh	r3, [r7, #32]
 80188d4:	e002      	b.n	80188dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80188d6:	f04f 33ff 	mov.w	r3, #4294967295
 80188da:	e054      	b.n	8018986 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80188dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80188e0:	2b09      	cmp	r3, #9
 80188e2:	dd06      	ble.n	80188f2 <etharp_find_entry+0x236>
 80188e4:	4b2b      	ldr	r3, [pc, #172]	; (8018994 <etharp_find_entry+0x2d8>)
 80188e6:	f240 127f 	movw	r2, #383	; 0x17f
 80188ea:	492e      	ldr	r1, [pc, #184]	; (80189a4 <etharp_find_entry+0x2e8>)
 80188ec:	482b      	ldr	r0, [pc, #172]	; (801899c <etharp_find_entry+0x2e0>)
 80188ee:	f002 fc33 	bl	801b158 <iprintf>
    etharp_free_entry(i);
 80188f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7ff fe06 	bl	8018508 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80188fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018900:	2b09      	cmp	r3, #9
 8018902:	dd06      	ble.n	8018912 <etharp_find_entry+0x256>
 8018904:	4b23      	ldr	r3, [pc, #140]	; (8018994 <etharp_find_entry+0x2d8>)
 8018906:	f240 1283 	movw	r2, #387	; 0x183
 801890a:	4926      	ldr	r1, [pc, #152]	; (80189a4 <etharp_find_entry+0x2e8>)
 801890c:	4823      	ldr	r0, [pc, #140]	; (801899c <etharp_find_entry+0x2e0>)
 801890e:	f002 fc23 	bl	801b158 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018916:	491e      	ldr	r1, [pc, #120]	; (8018990 <etharp_find_entry+0x2d4>)
 8018918:	4613      	mov	r3, r2
 801891a:	005b      	lsls	r3, r3, #1
 801891c:	4413      	add	r3, r2
 801891e:	00db      	lsls	r3, r3, #3
 8018920:	440b      	add	r3, r1
 8018922:	3314      	adds	r3, #20
 8018924:	781b      	ldrb	r3, [r3, #0]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d006      	beq.n	8018938 <etharp_find_entry+0x27c>
 801892a:	4b1a      	ldr	r3, [pc, #104]	; (8018994 <etharp_find_entry+0x2d8>)
 801892c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018930:	491d      	ldr	r1, [pc, #116]	; (80189a8 <etharp_find_entry+0x2ec>)
 8018932:	481a      	ldr	r0, [pc, #104]	; (801899c <etharp_find_entry+0x2e0>)
 8018934:	f002 fc10 	bl	801b158 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d00b      	beq.n	8018956 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801893e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	6819      	ldr	r1, [r3, #0]
 8018946:	4812      	ldr	r0, [pc, #72]	; (8018990 <etharp_find_entry+0x2d4>)
 8018948:	4613      	mov	r3, r2
 801894a:	005b      	lsls	r3, r3, #1
 801894c:	4413      	add	r3, r2
 801894e:	00db      	lsls	r3, r3, #3
 8018950:	4403      	add	r3, r0
 8018952:	3304      	adds	r3, #4
 8018954:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018956:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801895a:	490d      	ldr	r1, [pc, #52]	; (8018990 <etharp_find_entry+0x2d4>)
 801895c:	4613      	mov	r3, r2
 801895e:	005b      	lsls	r3, r3, #1
 8018960:	4413      	add	r3, r2
 8018962:	00db      	lsls	r3, r3, #3
 8018964:	440b      	add	r3, r1
 8018966:	3312      	adds	r3, #18
 8018968:	2200      	movs	r2, #0
 801896a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801896c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018970:	4907      	ldr	r1, [pc, #28]	; (8018990 <etharp_find_entry+0x2d4>)
 8018972:	4613      	mov	r3, r2
 8018974:	005b      	lsls	r3, r3, #1
 8018976:	4413      	add	r3, r2
 8018978:	00db      	lsls	r3, r3, #3
 801897a:	440b      	add	r3, r1
 801897c:	3308      	adds	r3, #8
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018982:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018986:	4618      	mov	r0, r3
 8018988:	3728      	adds	r7, #40	; 0x28
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
 801898e:	bf00      	nop
 8018990:	2003d13c 	.word	0x2003d13c
 8018994:	0801f67c 	.word	0x0801f67c
 8018998:	0801f6b4 	.word	0x0801f6b4
 801899c:	0801f6f4 	.word	0x0801f6f4
 80189a0:	0801f71c 	.word	0x0801f71c
 80189a4:	0801f734 	.word	0x0801f734
 80189a8:	0801f748 	.word	0x0801f748

080189ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b088      	sub	sp, #32
 80189b0:	af02      	add	r7, sp, #8
 80189b2:	60f8      	str	r0, [r7, #12]
 80189b4:	60b9      	str	r1, [r7, #8]
 80189b6:	607a      	str	r2, [r7, #4]
 80189b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80189c0:	2b06      	cmp	r3, #6
 80189c2:	d006      	beq.n	80189d2 <etharp_update_arp_entry+0x26>
 80189c4:	4b48      	ldr	r3, [pc, #288]	; (8018ae8 <etharp_update_arp_entry+0x13c>)
 80189c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80189ca:	4948      	ldr	r1, [pc, #288]	; (8018aec <etharp_update_arp_entry+0x140>)
 80189cc:	4848      	ldr	r0, [pc, #288]	; (8018af0 <etharp_update_arp_entry+0x144>)
 80189ce:	f002 fbc3 	bl	801b158 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80189d2:	68bb      	ldr	r3, [r7, #8]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d012      	beq.n	80189fe <etharp_update_arp_entry+0x52>
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d00e      	beq.n	80189fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	68f9      	ldr	r1, [r7, #12]
 80189e6:	4618      	mov	r0, r3
 80189e8:	f001 f8fe 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 80189ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d105      	bne.n	80189fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80189f2:	68bb      	ldr	r3, [r7, #8]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80189fa:	2be0      	cmp	r3, #224	; 0xe0
 80189fc:	d102      	bne.n	8018a04 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80189fe:	f06f 030f 	mvn.w	r3, #15
 8018a02:	e06c      	b.n	8018ade <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018a04:	78fb      	ldrb	r3, [r7, #3]
 8018a06:	68fa      	ldr	r2, [r7, #12]
 8018a08:	4619      	mov	r1, r3
 8018a0a:	68b8      	ldr	r0, [r7, #8]
 8018a0c:	f7ff fe56 	bl	80186bc <etharp_find_entry>
 8018a10:	4603      	mov	r3, r0
 8018a12:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018a14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	da02      	bge.n	8018a22 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018a1c:	8afb      	ldrh	r3, [r7, #22]
 8018a1e:	b25b      	sxtb	r3, r3
 8018a20:	e05d      	b.n	8018ade <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018a22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a26:	4933      	ldr	r1, [pc, #204]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018a28:	4613      	mov	r3, r2
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	4413      	add	r3, r2
 8018a2e:	00db      	lsls	r3, r3, #3
 8018a30:	440b      	add	r3, r1
 8018a32:	3314      	adds	r3, #20
 8018a34:	2202      	movs	r2, #2
 8018a36:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018a38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a3c:	492d      	ldr	r1, [pc, #180]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018a3e:	4613      	mov	r3, r2
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	4413      	add	r3, r2
 8018a44:	00db      	lsls	r3, r3, #3
 8018a46:	440b      	add	r3, r1
 8018a48:	3308      	adds	r3, #8
 8018a4a:	68fa      	ldr	r2, [r7, #12]
 8018a4c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018a4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a52:	4613      	mov	r3, r2
 8018a54:	005b      	lsls	r3, r3, #1
 8018a56:	4413      	add	r3, r2
 8018a58:	00db      	lsls	r3, r3, #3
 8018a5a:	3308      	adds	r3, #8
 8018a5c:	4a25      	ldr	r2, [pc, #148]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018a5e:	4413      	add	r3, r2
 8018a60:	3304      	adds	r3, #4
 8018a62:	2206      	movs	r2, #6
 8018a64:	6879      	ldr	r1, [r7, #4]
 8018a66:	4618      	mov	r0, r3
 8018a68:	f002 fd97 	bl	801b59a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018a6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a70:	4920      	ldr	r1, [pc, #128]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018a72:	4613      	mov	r3, r2
 8018a74:	005b      	lsls	r3, r3, #1
 8018a76:	4413      	add	r3, r2
 8018a78:	00db      	lsls	r3, r3, #3
 8018a7a:	440b      	add	r3, r1
 8018a7c:	3312      	adds	r3, #18
 8018a7e:	2200      	movs	r2, #0
 8018a80:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018a82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a86:	491b      	ldr	r1, [pc, #108]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018a88:	4613      	mov	r3, r2
 8018a8a:	005b      	lsls	r3, r3, #1
 8018a8c:	4413      	add	r3, r2
 8018a8e:	00db      	lsls	r3, r3, #3
 8018a90:	440b      	add	r3, r1
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d021      	beq.n	8018adc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018a98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a9c:	4915      	ldr	r1, [pc, #84]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	005b      	lsls	r3, r3, #1
 8018aa2:	4413      	add	r3, r2
 8018aa4:	00db      	lsls	r3, r3, #3
 8018aa6:	440b      	add	r3, r1
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018aac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ab0:	4910      	ldr	r1, [pc, #64]	; (8018af4 <etharp_update_arp_entry+0x148>)
 8018ab2:	4613      	mov	r3, r2
 8018ab4:	005b      	lsls	r3, r3, #1
 8018ab6:	4413      	add	r3, r2
 8018ab8:	00db      	lsls	r3, r3, #3
 8018aba:	440b      	add	r3, r1
 8018abc:	2200      	movs	r2, #0
 8018abe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018aca:	9300      	str	r3, [sp, #0]
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	6939      	ldr	r1, [r7, #16]
 8018ad0:	68f8      	ldr	r0, [r7, #12]
 8018ad2:	f002 f817 	bl	801ab04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018ad6:	6938      	ldr	r0, [r7, #16]
 8018ad8:	f7f8 fb82 	bl	80111e0 <pbuf_free>
  }
  return ERR_OK;
 8018adc:	2300      	movs	r3, #0
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3718      	adds	r7, #24
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	0801f67c 	.word	0x0801f67c
 8018aec:	0801f774 	.word	0x0801f774
 8018af0:	0801f6f4 	.word	0x0801f6f4
 8018af4:	2003d13c 	.word	0x2003d13c

08018af8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b084      	sub	sp, #16
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b00:	2300      	movs	r3, #0
 8018b02:	60fb      	str	r3, [r7, #12]
 8018b04:	e01e      	b.n	8018b44 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018b06:	4913      	ldr	r1, [pc, #76]	; (8018b54 <etharp_cleanup_netif+0x5c>)
 8018b08:	68fa      	ldr	r2, [r7, #12]
 8018b0a:	4613      	mov	r3, r2
 8018b0c:	005b      	lsls	r3, r3, #1
 8018b0e:	4413      	add	r3, r2
 8018b10:	00db      	lsls	r3, r3, #3
 8018b12:	440b      	add	r3, r1
 8018b14:	3314      	adds	r3, #20
 8018b16:	781b      	ldrb	r3, [r3, #0]
 8018b18:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018b1a:	7afb      	ldrb	r3, [r7, #11]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d00e      	beq.n	8018b3e <etharp_cleanup_netif+0x46>
 8018b20:	490c      	ldr	r1, [pc, #48]	; (8018b54 <etharp_cleanup_netif+0x5c>)
 8018b22:	68fa      	ldr	r2, [r7, #12]
 8018b24:	4613      	mov	r3, r2
 8018b26:	005b      	lsls	r3, r3, #1
 8018b28:	4413      	add	r3, r2
 8018b2a:	00db      	lsls	r3, r3, #3
 8018b2c:	440b      	add	r3, r1
 8018b2e:	3308      	adds	r3, #8
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	687a      	ldr	r2, [r7, #4]
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d102      	bne.n	8018b3e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018b38:	68f8      	ldr	r0, [r7, #12]
 8018b3a:	f7ff fce5 	bl	8018508 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	3301      	adds	r3, #1
 8018b42:	60fb      	str	r3, [r7, #12]
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2b09      	cmp	r3, #9
 8018b48:	dddd      	ble.n	8018b06 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018b4a:	bf00      	nop
 8018b4c:	bf00      	nop
 8018b4e:	3710      	adds	r7, #16
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd80      	pop	{r7, pc}
 8018b54:	2003d13c 	.word	0x2003d13c

08018b58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018b58:	b5b0      	push	{r4, r5, r7, lr}
 8018b5a:	b08a      	sub	sp, #40	; 0x28
 8018b5c:	af04      	add	r7, sp, #16
 8018b5e:	6078      	str	r0, [r7, #4]
 8018b60:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d107      	bne.n	8018b78 <etharp_input+0x20>
 8018b68:	4b3d      	ldr	r3, [pc, #244]	; (8018c60 <etharp_input+0x108>)
 8018b6a:	f240 228a 	movw	r2, #650	; 0x28a
 8018b6e:	493d      	ldr	r1, [pc, #244]	; (8018c64 <etharp_input+0x10c>)
 8018b70:	483d      	ldr	r0, [pc, #244]	; (8018c68 <etharp_input+0x110>)
 8018b72:	f002 faf1 	bl	801b158 <iprintf>
 8018b76:	e06f      	b.n	8018c58 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	685b      	ldr	r3, [r3, #4]
 8018b7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	881b      	ldrh	r3, [r3, #0]
 8018b82:	b29b      	uxth	r3, r3
 8018b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b88:	d10c      	bne.n	8018ba4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018b8e:	2b06      	cmp	r3, #6
 8018b90:	d108      	bne.n	8018ba4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018b96:	2b04      	cmp	r3, #4
 8018b98:	d104      	bne.n	8018ba4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018b9a:	693b      	ldr	r3, [r7, #16]
 8018b9c:	885b      	ldrh	r3, [r3, #2]
 8018b9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ba0:	2b08      	cmp	r3, #8
 8018ba2:	d003      	beq.n	8018bac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	f7f8 fb1b 	bl	80111e0 <pbuf_free>
    return;
 8018baa:	e055      	b.n	8018c58 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	330e      	adds	r3, #14
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018bb4:	693b      	ldr	r3, [r7, #16]
 8018bb6:	3318      	adds	r3, #24
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	3304      	adds	r3, #4
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d102      	bne.n	8018bcc <etharp_input+0x74>
    for_us = 0;
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	75fb      	strb	r3, [r7, #23]
 8018bca:	e009      	b.n	8018be0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018bcc:	68ba      	ldr	r2, [r7, #8]
 8018bce:	683b      	ldr	r3, [r7, #0]
 8018bd0:	3304      	adds	r3, #4
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	bf0c      	ite	eq
 8018bd8:	2301      	moveq	r3, #1
 8018bda:	2300      	movne	r3, #0
 8018bdc:	b2db      	uxtb	r3, r3
 8018bde:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018be0:	693b      	ldr	r3, [r7, #16]
 8018be2:	f103 0208 	add.w	r2, r3, #8
 8018be6:	7dfb      	ldrb	r3, [r7, #23]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d001      	beq.n	8018bf0 <etharp_input+0x98>
 8018bec:	2301      	movs	r3, #1
 8018bee:	e000      	b.n	8018bf2 <etharp_input+0x9a>
 8018bf0:	2302      	movs	r3, #2
 8018bf2:	f107 010c 	add.w	r1, r7, #12
 8018bf6:	6838      	ldr	r0, [r7, #0]
 8018bf8:	f7ff fed8 	bl	80189ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018bfc:	693b      	ldr	r3, [r7, #16]
 8018bfe:	88db      	ldrh	r3, [r3, #6]
 8018c00:	b29b      	uxth	r3, r3
 8018c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c06:	d003      	beq.n	8018c10 <etharp_input+0xb8>
 8018c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c0c:	d01e      	beq.n	8018c4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018c0e:	e020      	b.n	8018c52 <etharp_input+0xfa>
      if (for_us) {
 8018c10:	7dfb      	ldrb	r3, [r7, #23]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d01c      	beq.n	8018c50 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018c2c:	693a      	ldr	r2, [r7, #16]
 8018c2e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018c30:	2102      	movs	r1, #2
 8018c32:	9103      	str	r1, [sp, #12]
 8018c34:	f107 010c 	add.w	r1, r7, #12
 8018c38:	9102      	str	r1, [sp, #8]
 8018c3a:	9201      	str	r2, [sp, #4]
 8018c3c:	9300      	str	r3, [sp, #0]
 8018c3e:	462b      	mov	r3, r5
 8018c40:	4622      	mov	r2, r4
 8018c42:	4601      	mov	r1, r0
 8018c44:	6838      	ldr	r0, [r7, #0]
 8018c46:	f000 faeb 	bl	8019220 <etharp_raw>
      break;
 8018c4a:	e001      	b.n	8018c50 <etharp_input+0xf8>
      break;
 8018c4c:	bf00      	nop
 8018c4e:	e000      	b.n	8018c52 <etharp_input+0xfa>
      break;
 8018c50:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f7f8 fac4 	bl	80111e0 <pbuf_free>
}
 8018c58:	3718      	adds	r7, #24
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	0801f67c 	.word	0x0801f67c
 8018c64:	0801f7cc 	.word	0x0801f7cc
 8018c68:	0801f6f4 	.word	0x0801f6f4

08018c6c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b086      	sub	sp, #24
 8018c70:	af02      	add	r7, sp, #8
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	4613      	mov	r3, r2
 8018c78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018c7a:	79fa      	ldrb	r2, [r7, #7]
 8018c7c:	4944      	ldr	r1, [pc, #272]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018c7e:	4613      	mov	r3, r2
 8018c80:	005b      	lsls	r3, r3, #1
 8018c82:	4413      	add	r3, r2
 8018c84:	00db      	lsls	r3, r3, #3
 8018c86:	440b      	add	r3, r1
 8018c88:	3314      	adds	r3, #20
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d806      	bhi.n	8018c9e <etharp_output_to_arp_index+0x32>
 8018c90:	4b40      	ldr	r3, [pc, #256]	; (8018d94 <etharp_output_to_arp_index+0x128>)
 8018c92:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018c96:	4940      	ldr	r1, [pc, #256]	; (8018d98 <etharp_output_to_arp_index+0x12c>)
 8018c98:	4840      	ldr	r0, [pc, #256]	; (8018d9c <etharp_output_to_arp_index+0x130>)
 8018c9a:	f002 fa5d 	bl	801b158 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018c9e:	79fa      	ldrb	r2, [r7, #7]
 8018ca0:	493b      	ldr	r1, [pc, #236]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	005b      	lsls	r3, r3, #1
 8018ca6:	4413      	add	r3, r2
 8018ca8:	00db      	lsls	r3, r3, #3
 8018caa:	440b      	add	r3, r1
 8018cac:	3314      	adds	r3, #20
 8018cae:	781b      	ldrb	r3, [r3, #0]
 8018cb0:	2b02      	cmp	r3, #2
 8018cb2:	d153      	bne.n	8018d5c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018cb4:	79fa      	ldrb	r2, [r7, #7]
 8018cb6:	4936      	ldr	r1, [pc, #216]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018cb8:	4613      	mov	r3, r2
 8018cba:	005b      	lsls	r3, r3, #1
 8018cbc:	4413      	add	r3, r2
 8018cbe:	00db      	lsls	r3, r3, #3
 8018cc0:	440b      	add	r3, r1
 8018cc2:	3312      	adds	r3, #18
 8018cc4:	881b      	ldrh	r3, [r3, #0]
 8018cc6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018cca:	d919      	bls.n	8018d00 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018ccc:	79fa      	ldrb	r2, [r7, #7]
 8018cce:	4613      	mov	r3, r2
 8018cd0:	005b      	lsls	r3, r3, #1
 8018cd2:	4413      	add	r3, r2
 8018cd4:	00db      	lsls	r3, r3, #3
 8018cd6:	4a2e      	ldr	r2, [pc, #184]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018cd8:	4413      	add	r3, r2
 8018cda:	3304      	adds	r3, #4
 8018cdc:	4619      	mov	r1, r3
 8018cde:	68f8      	ldr	r0, [r7, #12]
 8018ce0:	f000 fb4c 	bl	801937c <etharp_request>
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d138      	bne.n	8018d5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018cea:	79fa      	ldrb	r2, [r7, #7]
 8018cec:	4928      	ldr	r1, [pc, #160]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018cee:	4613      	mov	r3, r2
 8018cf0:	005b      	lsls	r3, r3, #1
 8018cf2:	4413      	add	r3, r2
 8018cf4:	00db      	lsls	r3, r3, #3
 8018cf6:	440b      	add	r3, r1
 8018cf8:	3314      	adds	r3, #20
 8018cfa:	2203      	movs	r2, #3
 8018cfc:	701a      	strb	r2, [r3, #0]
 8018cfe:	e02d      	b.n	8018d5c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018d00:	79fa      	ldrb	r2, [r7, #7]
 8018d02:	4923      	ldr	r1, [pc, #140]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018d04:	4613      	mov	r3, r2
 8018d06:	005b      	lsls	r3, r3, #1
 8018d08:	4413      	add	r3, r2
 8018d0a:	00db      	lsls	r3, r3, #3
 8018d0c:	440b      	add	r3, r1
 8018d0e:	3312      	adds	r3, #18
 8018d10:	881b      	ldrh	r3, [r3, #0]
 8018d12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018d16:	d321      	bcc.n	8018d5c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018d18:	79fa      	ldrb	r2, [r7, #7]
 8018d1a:	4613      	mov	r3, r2
 8018d1c:	005b      	lsls	r3, r3, #1
 8018d1e:	4413      	add	r3, r2
 8018d20:	00db      	lsls	r3, r3, #3
 8018d22:	4a1b      	ldr	r2, [pc, #108]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018d24:	4413      	add	r3, r2
 8018d26:	1d19      	adds	r1, r3, #4
 8018d28:	79fa      	ldrb	r2, [r7, #7]
 8018d2a:	4613      	mov	r3, r2
 8018d2c:	005b      	lsls	r3, r3, #1
 8018d2e:	4413      	add	r3, r2
 8018d30:	00db      	lsls	r3, r3, #3
 8018d32:	3308      	adds	r3, #8
 8018d34:	4a16      	ldr	r2, [pc, #88]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018d36:	4413      	add	r3, r2
 8018d38:	3304      	adds	r3, #4
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	68f8      	ldr	r0, [r7, #12]
 8018d3e:	f000 fafb 	bl	8019338 <etharp_request_dst>
 8018d42:	4603      	mov	r3, r0
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d109      	bne.n	8018d5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018d48:	79fa      	ldrb	r2, [r7, #7]
 8018d4a:	4911      	ldr	r1, [pc, #68]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018d4c:	4613      	mov	r3, r2
 8018d4e:	005b      	lsls	r3, r3, #1
 8018d50:	4413      	add	r3, r2
 8018d52:	00db      	lsls	r3, r3, #3
 8018d54:	440b      	add	r3, r1
 8018d56:	3314      	adds	r3, #20
 8018d58:	2203      	movs	r2, #3
 8018d5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018d62:	79fa      	ldrb	r2, [r7, #7]
 8018d64:	4613      	mov	r3, r2
 8018d66:	005b      	lsls	r3, r3, #1
 8018d68:	4413      	add	r3, r2
 8018d6a:	00db      	lsls	r3, r3, #3
 8018d6c:	3308      	adds	r3, #8
 8018d6e:	4a08      	ldr	r2, [pc, #32]	; (8018d90 <etharp_output_to_arp_index+0x124>)
 8018d70:	4413      	add	r3, r2
 8018d72:	3304      	adds	r3, #4
 8018d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d78:	9200      	str	r2, [sp, #0]
 8018d7a:	460a      	mov	r2, r1
 8018d7c:	68b9      	ldr	r1, [r7, #8]
 8018d7e:	68f8      	ldr	r0, [r7, #12]
 8018d80:	f001 fec0 	bl	801ab04 <ethernet_output>
 8018d84:	4603      	mov	r3, r0
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	3710      	adds	r7, #16
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	2003d13c 	.word	0x2003d13c
 8018d94:	0801f67c 	.word	0x0801f67c
 8018d98:	0801f7ec 	.word	0x0801f7ec
 8018d9c:	0801f6f4 	.word	0x0801f6f4

08018da0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b08a      	sub	sp, #40	; 0x28
 8018da4:	af02      	add	r7, sp, #8
 8018da6:	60f8      	str	r0, [r7, #12]
 8018da8:	60b9      	str	r1, [r7, #8]
 8018daa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d106      	bne.n	8018dc4 <etharp_output+0x24>
 8018db6:	4b73      	ldr	r3, [pc, #460]	; (8018f84 <etharp_output+0x1e4>)
 8018db8:	f240 321e 	movw	r2, #798	; 0x31e
 8018dbc:	4972      	ldr	r1, [pc, #456]	; (8018f88 <etharp_output+0x1e8>)
 8018dbe:	4873      	ldr	r0, [pc, #460]	; (8018f8c <etharp_output+0x1ec>)
 8018dc0:	f002 f9ca 	bl	801b158 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018dc4:	68bb      	ldr	r3, [r7, #8]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d106      	bne.n	8018dd8 <etharp_output+0x38>
 8018dca:	4b6e      	ldr	r3, [pc, #440]	; (8018f84 <etharp_output+0x1e4>)
 8018dcc:	f240 321f 	movw	r2, #799	; 0x31f
 8018dd0:	496f      	ldr	r1, [pc, #444]	; (8018f90 <etharp_output+0x1f0>)
 8018dd2:	486e      	ldr	r0, [pc, #440]	; (8018f8c <etharp_output+0x1ec>)
 8018dd4:	f002 f9c0 	bl	801b158 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d106      	bne.n	8018dec <etharp_output+0x4c>
 8018dde:	4b69      	ldr	r3, [pc, #420]	; (8018f84 <etharp_output+0x1e4>)
 8018de0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018de4:	496b      	ldr	r1, [pc, #428]	; (8018f94 <etharp_output+0x1f4>)
 8018de6:	4869      	ldr	r0, [pc, #420]	; (8018f8c <etharp_output+0x1ec>)
 8018de8:	f002 f9b6 	bl	801b158 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	68f9      	ldr	r1, [r7, #12]
 8018df2:	4618      	mov	r0, r3
 8018df4:	f000 fef8 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 8018df8:	4603      	mov	r3, r0
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d002      	beq.n	8018e04 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018dfe:	4b66      	ldr	r3, [pc, #408]	; (8018f98 <etharp_output+0x1f8>)
 8018e00:	61fb      	str	r3, [r7, #28]
 8018e02:	e0af      	b.n	8018f64 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018e0c:	2be0      	cmp	r3, #224	; 0xe0
 8018e0e:	d118      	bne.n	8018e42 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018e10:	2301      	movs	r3, #1
 8018e12:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018e14:	2300      	movs	r3, #0
 8018e16:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018e18:	235e      	movs	r3, #94	; 0x5e
 8018e1a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	3301      	adds	r3, #1
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	3302      	adds	r3, #2
 8018e2e:	781b      	ldrb	r3, [r3, #0]
 8018e30:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	3303      	adds	r3, #3
 8018e36:	781b      	ldrb	r3, [r3, #0]
 8018e38:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018e3a:	f107 0310 	add.w	r3, r7, #16
 8018e3e:	61fb      	str	r3, [r7, #28]
 8018e40:	e090      	b.n	8018f64 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	3304      	adds	r3, #4
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	405a      	eors	r2, r3
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	3308      	adds	r3, #8
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	4013      	ands	r3, r2
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d012      	beq.n	8018e80 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018e60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018e64:	4293      	cmp	r3, r2
 8018e66:	d00b      	beq.n	8018e80 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	330c      	adds	r3, #12
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d003      	beq.n	8018e7a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	330c      	adds	r3, #12
 8018e76:	61bb      	str	r3, [r7, #24]
 8018e78:	e002      	b.n	8018e80 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018e7a:	f06f 0303 	mvn.w	r3, #3
 8018e7e:	e07d      	b.n	8018f7c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018e80:	4b46      	ldr	r3, [pc, #280]	; (8018f9c <etharp_output+0x1fc>)
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	4619      	mov	r1, r3
 8018e86:	4a46      	ldr	r2, [pc, #280]	; (8018fa0 <etharp_output+0x200>)
 8018e88:	460b      	mov	r3, r1
 8018e8a:	005b      	lsls	r3, r3, #1
 8018e8c:	440b      	add	r3, r1
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	4413      	add	r3, r2
 8018e92:	3314      	adds	r3, #20
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	2b01      	cmp	r3, #1
 8018e98:	d925      	bls.n	8018ee6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018e9a:	4b40      	ldr	r3, [pc, #256]	; (8018f9c <etharp_output+0x1fc>)
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	4a3f      	ldr	r2, [pc, #252]	; (8018fa0 <etharp_output+0x200>)
 8018ea2:	460b      	mov	r3, r1
 8018ea4:	005b      	lsls	r3, r3, #1
 8018ea6:	440b      	add	r3, r1
 8018ea8:	00db      	lsls	r3, r3, #3
 8018eaa:	4413      	add	r3, r2
 8018eac:	3308      	adds	r3, #8
 8018eae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018eb0:	68fa      	ldr	r2, [r7, #12]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d117      	bne.n	8018ee6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	681a      	ldr	r2, [r3, #0]
 8018eba:	4b38      	ldr	r3, [pc, #224]	; (8018f9c <etharp_output+0x1fc>)
 8018ebc:	781b      	ldrb	r3, [r3, #0]
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	4937      	ldr	r1, [pc, #220]	; (8018fa0 <etharp_output+0x200>)
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	005b      	lsls	r3, r3, #1
 8018ec6:	4403      	add	r3, r0
 8018ec8:	00db      	lsls	r3, r3, #3
 8018eca:	440b      	add	r3, r1
 8018ecc:	3304      	adds	r3, #4
 8018ece:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d108      	bne.n	8018ee6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018ed4:	4b31      	ldr	r3, [pc, #196]	; (8018f9c <etharp_output+0x1fc>)
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	461a      	mov	r2, r3
 8018eda:	68b9      	ldr	r1, [r7, #8]
 8018edc:	68f8      	ldr	r0, [r7, #12]
 8018ede:	f7ff fec5 	bl	8018c6c <etharp_output_to_arp_index>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	e04a      	b.n	8018f7c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	75fb      	strb	r3, [r7, #23]
 8018eea:	e031      	b.n	8018f50 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018eec:	7dfa      	ldrb	r2, [r7, #23]
 8018eee:	492c      	ldr	r1, [pc, #176]	; (8018fa0 <etharp_output+0x200>)
 8018ef0:	4613      	mov	r3, r2
 8018ef2:	005b      	lsls	r3, r3, #1
 8018ef4:	4413      	add	r3, r2
 8018ef6:	00db      	lsls	r3, r3, #3
 8018ef8:	440b      	add	r3, r1
 8018efa:	3314      	adds	r3, #20
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	2b01      	cmp	r3, #1
 8018f00:	d923      	bls.n	8018f4a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018f02:	7dfa      	ldrb	r2, [r7, #23]
 8018f04:	4926      	ldr	r1, [pc, #152]	; (8018fa0 <etharp_output+0x200>)
 8018f06:	4613      	mov	r3, r2
 8018f08:	005b      	lsls	r3, r3, #1
 8018f0a:	4413      	add	r3, r2
 8018f0c:	00db      	lsls	r3, r3, #3
 8018f0e:	440b      	add	r3, r1
 8018f10:	3308      	adds	r3, #8
 8018f12:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018f14:	68fa      	ldr	r2, [r7, #12]
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d117      	bne.n	8018f4a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018f1a:	69bb      	ldr	r3, [r7, #24]
 8018f1c:	6819      	ldr	r1, [r3, #0]
 8018f1e:	7dfa      	ldrb	r2, [r7, #23]
 8018f20:	481f      	ldr	r0, [pc, #124]	; (8018fa0 <etharp_output+0x200>)
 8018f22:	4613      	mov	r3, r2
 8018f24:	005b      	lsls	r3, r3, #1
 8018f26:	4413      	add	r3, r2
 8018f28:	00db      	lsls	r3, r3, #3
 8018f2a:	4403      	add	r3, r0
 8018f2c:	3304      	adds	r3, #4
 8018f2e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018f30:	4299      	cmp	r1, r3
 8018f32:	d10a      	bne.n	8018f4a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018f34:	4a19      	ldr	r2, [pc, #100]	; (8018f9c <etharp_output+0x1fc>)
 8018f36:	7dfb      	ldrb	r3, [r7, #23]
 8018f38:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018f3a:	7dfb      	ldrb	r3, [r7, #23]
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	68b9      	ldr	r1, [r7, #8]
 8018f40:	68f8      	ldr	r0, [r7, #12]
 8018f42:	f7ff fe93 	bl	8018c6c <etharp_output_to_arp_index>
 8018f46:	4603      	mov	r3, r0
 8018f48:	e018      	b.n	8018f7c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018f4a:	7dfb      	ldrb	r3, [r7, #23]
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	75fb      	strb	r3, [r7, #23]
 8018f50:	7dfb      	ldrb	r3, [r7, #23]
 8018f52:	2b09      	cmp	r3, #9
 8018f54:	d9ca      	bls.n	8018eec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018f56:	68ba      	ldr	r2, [r7, #8]
 8018f58:	69b9      	ldr	r1, [r7, #24]
 8018f5a:	68f8      	ldr	r0, [r7, #12]
 8018f5c:	f000 f822 	bl	8018fa4 <etharp_query>
 8018f60:	4603      	mov	r3, r0
 8018f62:	e00b      	b.n	8018f7c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018f6e:	9300      	str	r3, [sp, #0]
 8018f70:	69fb      	ldr	r3, [r7, #28]
 8018f72:	68b9      	ldr	r1, [r7, #8]
 8018f74:	68f8      	ldr	r0, [r7, #12]
 8018f76:	f001 fdc5 	bl	801ab04 <ethernet_output>
 8018f7a:	4603      	mov	r3, r0
}
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	3720      	adds	r7, #32
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	0801f67c 	.word	0x0801f67c
 8018f88:	0801f7cc 	.word	0x0801f7cc
 8018f8c:	0801f6f4 	.word	0x0801f6f4
 8018f90:	0801f81c 	.word	0x0801f81c
 8018f94:	0801f7bc 	.word	0x0801f7bc
 8018f98:	0801fec8 	.word	0x0801fec8
 8018f9c:	2003d22c 	.word	0x2003d22c
 8018fa0:	2003d13c 	.word	0x2003d13c

08018fa4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b08c      	sub	sp, #48	; 0x30
 8018fa8:	af02      	add	r7, sp, #8
 8018faa:	60f8      	str	r0, [r7, #12]
 8018fac:	60b9      	str	r1, [r7, #8]
 8018fae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	3326      	adds	r3, #38	; 0x26
 8018fb4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018fb6:	23ff      	movs	r3, #255	; 0xff
 8018fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	68f9      	ldr	r1, [r7, #12]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f000 fe0e 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d10c      	bne.n	8018fec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018fd2:	68bb      	ldr	r3, [r7, #8]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018fda:	2be0      	cmp	r3, #224	; 0xe0
 8018fdc:	d006      	beq.n	8018fec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d003      	beq.n	8018fec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018fe4:	68bb      	ldr	r3, [r7, #8]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d102      	bne.n	8018ff2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018fec:	f06f 030f 	mvn.w	r3, #15
 8018ff0:	e101      	b.n	80191f6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018ff2:	68fa      	ldr	r2, [r7, #12]
 8018ff4:	2101      	movs	r1, #1
 8018ff6:	68b8      	ldr	r0, [r7, #8]
 8018ff8:	f7ff fb60 	bl	80186bc <etharp_find_entry>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019004:	2b00      	cmp	r3, #0
 8019006:	da02      	bge.n	801900e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019008:	8a7b      	ldrh	r3, [r7, #18]
 801900a:	b25b      	sxtb	r3, r3
 801900c:	e0f3      	b.n	80191f6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801900e:	8a7b      	ldrh	r3, [r7, #18]
 8019010:	2b7e      	cmp	r3, #126	; 0x7e
 8019012:	d906      	bls.n	8019022 <etharp_query+0x7e>
 8019014:	4b7a      	ldr	r3, [pc, #488]	; (8019200 <etharp_query+0x25c>)
 8019016:	f240 32c1 	movw	r2, #961	; 0x3c1
 801901a:	497a      	ldr	r1, [pc, #488]	; (8019204 <etharp_query+0x260>)
 801901c:	487a      	ldr	r0, [pc, #488]	; (8019208 <etharp_query+0x264>)
 801901e:	f002 f89b 	bl	801b158 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019022:	8a7b      	ldrh	r3, [r7, #18]
 8019024:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019026:	7c7a      	ldrb	r2, [r7, #17]
 8019028:	4978      	ldr	r1, [pc, #480]	; (801920c <etharp_query+0x268>)
 801902a:	4613      	mov	r3, r2
 801902c:	005b      	lsls	r3, r3, #1
 801902e:	4413      	add	r3, r2
 8019030:	00db      	lsls	r3, r3, #3
 8019032:	440b      	add	r3, r1
 8019034:	3314      	adds	r3, #20
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d115      	bne.n	8019068 <etharp_query+0xc4>
    is_new_entry = 1;
 801903c:	2301      	movs	r3, #1
 801903e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019040:	7c7a      	ldrb	r2, [r7, #17]
 8019042:	4972      	ldr	r1, [pc, #456]	; (801920c <etharp_query+0x268>)
 8019044:	4613      	mov	r3, r2
 8019046:	005b      	lsls	r3, r3, #1
 8019048:	4413      	add	r3, r2
 801904a:	00db      	lsls	r3, r3, #3
 801904c:	440b      	add	r3, r1
 801904e:	3314      	adds	r3, #20
 8019050:	2201      	movs	r2, #1
 8019052:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019054:	7c7a      	ldrb	r2, [r7, #17]
 8019056:	496d      	ldr	r1, [pc, #436]	; (801920c <etharp_query+0x268>)
 8019058:	4613      	mov	r3, r2
 801905a:	005b      	lsls	r3, r3, #1
 801905c:	4413      	add	r3, r2
 801905e:	00db      	lsls	r3, r3, #3
 8019060:	440b      	add	r3, r1
 8019062:	3308      	adds	r3, #8
 8019064:	68fa      	ldr	r2, [r7, #12]
 8019066:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019068:	7c7a      	ldrb	r2, [r7, #17]
 801906a:	4968      	ldr	r1, [pc, #416]	; (801920c <etharp_query+0x268>)
 801906c:	4613      	mov	r3, r2
 801906e:	005b      	lsls	r3, r3, #1
 8019070:	4413      	add	r3, r2
 8019072:	00db      	lsls	r3, r3, #3
 8019074:	440b      	add	r3, r1
 8019076:	3314      	adds	r3, #20
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	2b01      	cmp	r3, #1
 801907c:	d011      	beq.n	80190a2 <etharp_query+0xfe>
 801907e:	7c7a      	ldrb	r2, [r7, #17]
 8019080:	4962      	ldr	r1, [pc, #392]	; (801920c <etharp_query+0x268>)
 8019082:	4613      	mov	r3, r2
 8019084:	005b      	lsls	r3, r3, #1
 8019086:	4413      	add	r3, r2
 8019088:	00db      	lsls	r3, r3, #3
 801908a:	440b      	add	r3, r1
 801908c:	3314      	adds	r3, #20
 801908e:	781b      	ldrb	r3, [r3, #0]
 8019090:	2b01      	cmp	r3, #1
 8019092:	d806      	bhi.n	80190a2 <etharp_query+0xfe>
 8019094:	4b5a      	ldr	r3, [pc, #360]	; (8019200 <etharp_query+0x25c>)
 8019096:	f240 32cd 	movw	r2, #973	; 0x3cd
 801909a:	495d      	ldr	r1, [pc, #372]	; (8019210 <etharp_query+0x26c>)
 801909c:	485a      	ldr	r0, [pc, #360]	; (8019208 <etharp_query+0x264>)
 801909e:	f002 f85b 	bl	801b158 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80190a2:	6a3b      	ldr	r3, [r7, #32]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d102      	bne.n	80190ae <etharp_query+0x10a>
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d10c      	bne.n	80190c8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80190ae:	68b9      	ldr	r1, [r7, #8]
 80190b0:	68f8      	ldr	r0, [r7, #12]
 80190b2:	f000 f963 	bl	801937c <etharp_request>
 80190b6:	4603      	mov	r3, r0
 80190b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d102      	bne.n	80190c8 <etharp_query+0x124>
      return result;
 80190c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80190c6:	e096      	b.n	80191f6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d106      	bne.n	80190dc <etharp_query+0x138>
 80190ce:	4b4c      	ldr	r3, [pc, #304]	; (8019200 <etharp_query+0x25c>)
 80190d0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80190d4:	494f      	ldr	r1, [pc, #316]	; (8019214 <etharp_query+0x270>)
 80190d6:	484c      	ldr	r0, [pc, #304]	; (8019208 <etharp_query+0x264>)
 80190d8:	f002 f83e 	bl	801b158 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80190dc:	7c7a      	ldrb	r2, [r7, #17]
 80190de:	494b      	ldr	r1, [pc, #300]	; (801920c <etharp_query+0x268>)
 80190e0:	4613      	mov	r3, r2
 80190e2:	005b      	lsls	r3, r3, #1
 80190e4:	4413      	add	r3, r2
 80190e6:	00db      	lsls	r3, r3, #3
 80190e8:	440b      	add	r3, r1
 80190ea:	3314      	adds	r3, #20
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	2b01      	cmp	r3, #1
 80190f0:	d917      	bls.n	8019122 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80190f2:	4a49      	ldr	r2, [pc, #292]	; (8019218 <etharp_query+0x274>)
 80190f4:	7c7b      	ldrb	r3, [r7, #17]
 80190f6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80190f8:	7c7a      	ldrb	r2, [r7, #17]
 80190fa:	4613      	mov	r3, r2
 80190fc:	005b      	lsls	r3, r3, #1
 80190fe:	4413      	add	r3, r2
 8019100:	00db      	lsls	r3, r3, #3
 8019102:	3308      	adds	r3, #8
 8019104:	4a41      	ldr	r2, [pc, #260]	; (801920c <etharp_query+0x268>)
 8019106:	4413      	add	r3, r2
 8019108:	3304      	adds	r3, #4
 801910a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801910e:	9200      	str	r2, [sp, #0]
 8019110:	697a      	ldr	r2, [r7, #20]
 8019112:	6879      	ldr	r1, [r7, #4]
 8019114:	68f8      	ldr	r0, [r7, #12]
 8019116:	f001 fcf5 	bl	801ab04 <ethernet_output>
 801911a:	4603      	mov	r3, r0
 801911c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019120:	e067      	b.n	80191f2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019122:	7c7a      	ldrb	r2, [r7, #17]
 8019124:	4939      	ldr	r1, [pc, #228]	; (801920c <etharp_query+0x268>)
 8019126:	4613      	mov	r3, r2
 8019128:	005b      	lsls	r3, r3, #1
 801912a:	4413      	add	r3, r2
 801912c:	00db      	lsls	r3, r3, #3
 801912e:	440b      	add	r3, r1
 8019130:	3314      	adds	r3, #20
 8019132:	781b      	ldrb	r3, [r3, #0]
 8019134:	2b01      	cmp	r3, #1
 8019136:	d15c      	bne.n	80191f2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019138:	2300      	movs	r3, #0
 801913a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019140:	e01c      	b.n	801917c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019142:	69fb      	ldr	r3, [r7, #28]
 8019144:	895a      	ldrh	r2, [r3, #10]
 8019146:	69fb      	ldr	r3, [r7, #28]
 8019148:	891b      	ldrh	r3, [r3, #8]
 801914a:	429a      	cmp	r2, r3
 801914c:	d10a      	bne.n	8019164 <etharp_query+0x1c0>
 801914e:	69fb      	ldr	r3, [r7, #28]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d006      	beq.n	8019164 <etharp_query+0x1c0>
 8019156:	4b2a      	ldr	r3, [pc, #168]	; (8019200 <etharp_query+0x25c>)
 8019158:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801915c:	492f      	ldr	r1, [pc, #188]	; (801921c <etharp_query+0x278>)
 801915e:	482a      	ldr	r0, [pc, #168]	; (8019208 <etharp_query+0x264>)
 8019160:	f001 fffa 	bl	801b158 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019164:	69fb      	ldr	r3, [r7, #28]
 8019166:	7b1b      	ldrb	r3, [r3, #12]
 8019168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801916c:	2b00      	cmp	r3, #0
 801916e:	d002      	beq.n	8019176 <etharp_query+0x1d2>
        copy_needed = 1;
 8019170:	2301      	movs	r3, #1
 8019172:	61bb      	str	r3, [r7, #24]
        break;
 8019174:	e005      	b.n	8019182 <etharp_query+0x1de>
      }
      p = p->next;
 8019176:	69fb      	ldr	r3, [r7, #28]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801917c:	69fb      	ldr	r3, [r7, #28]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d1df      	bne.n	8019142 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019182:	69bb      	ldr	r3, [r7, #24]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d007      	beq.n	8019198 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801918e:	200e      	movs	r0, #14
 8019190:	f7f8 fa9e 	bl	80116d0 <pbuf_clone>
 8019194:	61f8      	str	r0, [r7, #28]
 8019196:	e004      	b.n	80191a2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801919c:	69f8      	ldr	r0, [r7, #28]
 801919e:	f7f8 f8c5 	bl	801132c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80191a2:	69fb      	ldr	r3, [r7, #28]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d021      	beq.n	80191ec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80191a8:	7c7a      	ldrb	r2, [r7, #17]
 80191aa:	4918      	ldr	r1, [pc, #96]	; (801920c <etharp_query+0x268>)
 80191ac:	4613      	mov	r3, r2
 80191ae:	005b      	lsls	r3, r3, #1
 80191b0:	4413      	add	r3, r2
 80191b2:	00db      	lsls	r3, r3, #3
 80191b4:	440b      	add	r3, r1
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d00a      	beq.n	80191d2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80191bc:	7c7a      	ldrb	r2, [r7, #17]
 80191be:	4913      	ldr	r1, [pc, #76]	; (801920c <etharp_query+0x268>)
 80191c0:	4613      	mov	r3, r2
 80191c2:	005b      	lsls	r3, r3, #1
 80191c4:	4413      	add	r3, r2
 80191c6:	00db      	lsls	r3, r3, #3
 80191c8:	440b      	add	r3, r1
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	4618      	mov	r0, r3
 80191ce:	f7f8 f807 	bl	80111e0 <pbuf_free>
      }
      arp_table[i].q = p;
 80191d2:	7c7a      	ldrb	r2, [r7, #17]
 80191d4:	490d      	ldr	r1, [pc, #52]	; (801920c <etharp_query+0x268>)
 80191d6:	4613      	mov	r3, r2
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	4413      	add	r3, r2
 80191dc:	00db      	lsls	r3, r3, #3
 80191de:	440b      	add	r3, r1
 80191e0:	69fa      	ldr	r2, [r7, #28]
 80191e2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80191e4:	2300      	movs	r3, #0
 80191e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80191ea:	e002      	b.n	80191f2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80191ec:	23ff      	movs	r3, #255	; 0xff
 80191ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80191f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	3728      	adds	r7, #40	; 0x28
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}
 80191fe:	bf00      	nop
 8019200:	0801f67c 	.word	0x0801f67c
 8019204:	0801f828 	.word	0x0801f828
 8019208:	0801f6f4 	.word	0x0801f6f4
 801920c:	2003d13c 	.word	0x2003d13c
 8019210:	0801f838 	.word	0x0801f838
 8019214:	0801f81c 	.word	0x0801f81c
 8019218:	2003d22c 	.word	0x2003d22c
 801921c:	0801f860 	.word	0x0801f860

08019220 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b08a      	sub	sp, #40	; 0x28
 8019224:	af02      	add	r7, sp, #8
 8019226:	60f8      	str	r0, [r7, #12]
 8019228:	60b9      	str	r1, [r7, #8]
 801922a:	607a      	str	r2, [r7, #4]
 801922c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801922e:	2300      	movs	r3, #0
 8019230:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d106      	bne.n	8019246 <etharp_raw+0x26>
 8019238:	4b3a      	ldr	r3, [pc, #232]	; (8019324 <etharp_raw+0x104>)
 801923a:	f240 4257 	movw	r2, #1111	; 0x457
 801923e:	493a      	ldr	r1, [pc, #232]	; (8019328 <etharp_raw+0x108>)
 8019240:	483a      	ldr	r0, [pc, #232]	; (801932c <etharp_raw+0x10c>)
 8019242:	f001 ff89 	bl	801b158 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801924a:	211c      	movs	r1, #28
 801924c:	200e      	movs	r0, #14
 801924e:	f7f7 fcb1 	bl	8010bb4 <pbuf_alloc>
 8019252:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019254:	69bb      	ldr	r3, [r7, #24]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d102      	bne.n	8019260 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801925a:	f04f 33ff 	mov.w	r3, #4294967295
 801925e:	e05d      	b.n	801931c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019260:	69bb      	ldr	r3, [r7, #24]
 8019262:	895b      	ldrh	r3, [r3, #10]
 8019264:	2b1b      	cmp	r3, #27
 8019266:	d806      	bhi.n	8019276 <etharp_raw+0x56>
 8019268:	4b2e      	ldr	r3, [pc, #184]	; (8019324 <etharp_raw+0x104>)
 801926a:	f240 4262 	movw	r2, #1122	; 0x462
 801926e:	4930      	ldr	r1, [pc, #192]	; (8019330 <etharp_raw+0x110>)
 8019270:	482e      	ldr	r0, [pc, #184]	; (801932c <etharp_raw+0x10c>)
 8019272:	f001 ff71 	bl	801b158 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019276:	69bb      	ldr	r3, [r7, #24]
 8019278:	685b      	ldr	r3, [r3, #4]
 801927a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801927c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801927e:	4618      	mov	r0, r3
 8019280:	f7f6 fb8a 	bl	800f998 <lwip_htons>
 8019284:	4603      	mov	r3, r0
 8019286:	461a      	mov	r2, r3
 8019288:	697b      	ldr	r3, [r7, #20]
 801928a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019292:	2b06      	cmp	r3, #6
 8019294:	d006      	beq.n	80192a4 <etharp_raw+0x84>
 8019296:	4b23      	ldr	r3, [pc, #140]	; (8019324 <etharp_raw+0x104>)
 8019298:	f240 4269 	movw	r2, #1129	; 0x469
 801929c:	4925      	ldr	r1, [pc, #148]	; (8019334 <etharp_raw+0x114>)
 801929e:	4823      	ldr	r0, [pc, #140]	; (801932c <etharp_raw+0x10c>)
 80192a0:	f001 ff5a 	bl	801b158 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80192a4:	697b      	ldr	r3, [r7, #20]
 80192a6:	3308      	adds	r3, #8
 80192a8:	2206      	movs	r2, #6
 80192aa:	6839      	ldr	r1, [r7, #0]
 80192ac:	4618      	mov	r0, r3
 80192ae:	f002 f974 	bl	801b59a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80192b2:	697b      	ldr	r3, [r7, #20]
 80192b4:	3312      	adds	r3, #18
 80192b6:	2206      	movs	r2, #6
 80192b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80192ba:	4618      	mov	r0, r3
 80192bc:	f002 f96d 	bl	801b59a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	330e      	adds	r3, #14
 80192c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192c6:	6812      	ldr	r2, [r2, #0]
 80192c8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	3318      	adds	r3, #24
 80192ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80192d0:	6812      	ldr	r2, [r2, #0]
 80192d2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80192d4:	697b      	ldr	r3, [r7, #20]
 80192d6:	2200      	movs	r2, #0
 80192d8:	701a      	strb	r2, [r3, #0]
 80192da:	2200      	movs	r2, #0
 80192dc:	f042 0201 	orr.w	r2, r2, #1
 80192e0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80192e2:	697b      	ldr	r3, [r7, #20]
 80192e4:	2200      	movs	r2, #0
 80192e6:	f042 0208 	orr.w	r2, r2, #8
 80192ea:	709a      	strb	r2, [r3, #2]
 80192ec:	2200      	movs	r2, #0
 80192ee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80192f0:	697b      	ldr	r3, [r7, #20]
 80192f2:	2206      	movs	r2, #6
 80192f4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	2204      	movs	r2, #4
 80192fa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80192fc:	f640 0306 	movw	r3, #2054	; 0x806
 8019300:	9300      	str	r3, [sp, #0]
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	68ba      	ldr	r2, [r7, #8]
 8019306:	69b9      	ldr	r1, [r7, #24]
 8019308:	68f8      	ldr	r0, [r7, #12]
 801930a:	f001 fbfb 	bl	801ab04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801930e:	69b8      	ldr	r0, [r7, #24]
 8019310:	f7f7 ff66 	bl	80111e0 <pbuf_free>
  p = NULL;
 8019314:	2300      	movs	r3, #0
 8019316:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019318:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801931c:	4618      	mov	r0, r3
 801931e:	3720      	adds	r7, #32
 8019320:	46bd      	mov	sp, r7
 8019322:	bd80      	pop	{r7, pc}
 8019324:	0801f67c 	.word	0x0801f67c
 8019328:	0801f7cc 	.word	0x0801f7cc
 801932c:	0801f6f4 	.word	0x0801f6f4
 8019330:	0801f87c 	.word	0x0801f87c
 8019334:	0801f8b0 	.word	0x0801f8b0

08019338 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b088      	sub	sp, #32
 801933c:	af04      	add	r7, sp, #16
 801933e:	60f8      	str	r0, [r7, #12]
 8019340:	60b9      	str	r1, [r7, #8]
 8019342:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019354:	2201      	movs	r2, #1
 8019356:	9203      	str	r2, [sp, #12]
 8019358:	68ba      	ldr	r2, [r7, #8]
 801935a:	9202      	str	r2, [sp, #8]
 801935c:	4a06      	ldr	r2, [pc, #24]	; (8019378 <etharp_request_dst+0x40>)
 801935e:	9201      	str	r2, [sp, #4]
 8019360:	9300      	str	r3, [sp, #0]
 8019362:	4603      	mov	r3, r0
 8019364:	687a      	ldr	r2, [r7, #4]
 8019366:	68f8      	ldr	r0, [r7, #12]
 8019368:	f7ff ff5a 	bl	8019220 <etharp_raw>
 801936c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801936e:	4618      	mov	r0, r3
 8019370:	3710      	adds	r7, #16
 8019372:	46bd      	mov	sp, r7
 8019374:	bd80      	pop	{r7, pc}
 8019376:	bf00      	nop
 8019378:	0801fed0 	.word	0x0801fed0

0801937c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b082      	sub	sp, #8
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
 8019384:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019386:	4a05      	ldr	r2, [pc, #20]	; (801939c <etharp_request+0x20>)
 8019388:	6839      	ldr	r1, [r7, #0]
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f7ff ffd4 	bl	8019338 <etharp_request_dst>
 8019390:	4603      	mov	r3, r0
}
 8019392:	4618      	mov	r0, r3
 8019394:	3708      	adds	r7, #8
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	0801fec8 	.word	0x0801fec8

080193a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b08e      	sub	sp, #56	; 0x38
 80193a4:	af04      	add	r7, sp, #16
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80193aa:	4b79      	ldr	r3, [pc, #484]	; (8019590 <icmp_input+0x1f0>)
 80193ac:	689b      	ldr	r3, [r3, #8]
 80193ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80193b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	f003 030f 	and.w	r3, r3, #15
 80193b8:	b2db      	uxtb	r3, r3
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80193c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80193c2:	2b13      	cmp	r3, #19
 80193c4:	f240 80cd 	bls.w	8019562 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	895b      	ldrh	r3, [r3, #10]
 80193cc:	2b03      	cmp	r3, #3
 80193ce:	f240 80ca 	bls.w	8019566 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	685b      	ldr	r3, [r3, #4]
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80193dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	f000 80b7 	beq.w	8019554 <icmp_input+0x1b4>
 80193e6:	2b08      	cmp	r3, #8
 80193e8:	f040 80b7 	bne.w	801955a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80193ec:	4b69      	ldr	r3, [pc, #420]	; (8019594 <icmp_input+0x1f4>)
 80193ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80193f0:	4b67      	ldr	r3, [pc, #412]	; (8019590 <icmp_input+0x1f0>)
 80193f2:	695b      	ldr	r3, [r3, #20]
 80193f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80193f8:	2be0      	cmp	r3, #224	; 0xe0
 80193fa:	f000 80bb 	beq.w	8019574 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80193fe:	4b64      	ldr	r3, [pc, #400]	; (8019590 <icmp_input+0x1f0>)
 8019400:	695b      	ldr	r3, [r3, #20]
 8019402:	4a63      	ldr	r2, [pc, #396]	; (8019590 <icmp_input+0x1f0>)
 8019404:	6812      	ldr	r2, [r2, #0]
 8019406:	4611      	mov	r1, r2
 8019408:	4618      	mov	r0, r3
 801940a:	f000 fbed 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	f040 80b1 	bne.w	8019578 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	891b      	ldrh	r3, [r3, #8]
 801941a:	2b07      	cmp	r3, #7
 801941c:	f240 80a5 	bls.w	801956a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019422:	330e      	adds	r3, #14
 8019424:	4619      	mov	r1, r3
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f7f7 fe12 	bl	8011050 <pbuf_add_header>
 801942c:	4603      	mov	r3, r0
 801942e:	2b00      	cmp	r3, #0
 8019430:	d04b      	beq.n	80194ca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	891a      	ldrh	r2, [r3, #8]
 8019436:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019438:	4413      	add	r3, r2
 801943a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	891b      	ldrh	r3, [r3, #8]
 8019440:	8b7a      	ldrh	r2, [r7, #26]
 8019442:	429a      	cmp	r2, r3
 8019444:	f0c0 809a 	bcc.w	801957c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019448:	8b7b      	ldrh	r3, [r7, #26]
 801944a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801944e:	4619      	mov	r1, r3
 8019450:	200e      	movs	r0, #14
 8019452:	f7f7 fbaf 	bl	8010bb4 <pbuf_alloc>
 8019456:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019458:	697b      	ldr	r3, [r7, #20]
 801945a:	2b00      	cmp	r3, #0
 801945c:	f000 8090 	beq.w	8019580 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019460:	697b      	ldr	r3, [r7, #20]
 8019462:	895b      	ldrh	r3, [r3, #10]
 8019464:	461a      	mov	r2, r3
 8019466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019468:	3308      	adds	r3, #8
 801946a:	429a      	cmp	r2, r3
 801946c:	d203      	bcs.n	8019476 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801946e:	6978      	ldr	r0, [r7, #20]
 8019470:	f7f7 feb6 	bl	80111e0 <pbuf_free>
          goto icmperr;
 8019474:	e085      	b.n	8019582 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	685b      	ldr	r3, [r3, #4]
 801947a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801947c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801947e:	4618      	mov	r0, r3
 8019480:	f002 f88b 	bl	801b59a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019486:	4619      	mov	r1, r3
 8019488:	6978      	ldr	r0, [r7, #20]
 801948a:	f7f7 fdf1 	bl	8011070 <pbuf_remove_header>
 801948e:	4603      	mov	r3, r0
 8019490:	2b00      	cmp	r3, #0
 8019492:	d009      	beq.n	80194a8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019494:	4b40      	ldr	r3, [pc, #256]	; (8019598 <icmp_input+0x1f8>)
 8019496:	22b6      	movs	r2, #182	; 0xb6
 8019498:	4940      	ldr	r1, [pc, #256]	; (801959c <icmp_input+0x1fc>)
 801949a:	4841      	ldr	r0, [pc, #260]	; (80195a0 <icmp_input+0x200>)
 801949c:	f001 fe5c 	bl	801b158 <iprintf>
          pbuf_free(r);
 80194a0:	6978      	ldr	r0, [r7, #20]
 80194a2:	f7f7 fe9d 	bl	80111e0 <pbuf_free>
          goto icmperr;
 80194a6:	e06c      	b.n	8019582 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80194a8:	6879      	ldr	r1, [r7, #4]
 80194aa:	6978      	ldr	r0, [r7, #20]
 80194ac:	f7f7 ffcc 	bl	8011448 <pbuf_copy>
 80194b0:	4603      	mov	r3, r0
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d003      	beq.n	80194be <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80194b6:	6978      	ldr	r0, [r7, #20]
 80194b8:	f7f7 fe92 	bl	80111e0 <pbuf_free>
          goto icmperr;
 80194bc:	e061      	b.n	8019582 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f7f7 fe8e 	bl	80111e0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	607b      	str	r3, [r7, #4]
 80194c8:	e00f      	b.n	80194ea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80194ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194cc:	330e      	adds	r3, #14
 80194ce:	4619      	mov	r1, r3
 80194d0:	6878      	ldr	r0, [r7, #4]
 80194d2:	f7f7 fdcd 	bl	8011070 <pbuf_remove_header>
 80194d6:	4603      	mov	r3, r0
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d006      	beq.n	80194ea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80194dc:	4b2e      	ldr	r3, [pc, #184]	; (8019598 <icmp_input+0x1f8>)
 80194de:	22c7      	movs	r2, #199	; 0xc7
 80194e0:	4930      	ldr	r1, [pc, #192]	; (80195a4 <icmp_input+0x204>)
 80194e2:	482f      	ldr	r0, [pc, #188]	; (80195a0 <icmp_input+0x200>)
 80194e4:	f001 fe38 	bl	801b158 <iprintf>
          goto icmperr;
 80194e8:	e04b      	b.n	8019582 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	685b      	ldr	r3, [r3, #4]
 80194ee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80194f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194f2:	4619      	mov	r1, r3
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f7f7 fdab 	bl	8011050 <pbuf_add_header>
 80194fa:	4603      	mov	r3, r0
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d12b      	bne.n	8019558 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	685b      	ldr	r3, [r3, #4]
 8019504:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019506:	69fb      	ldr	r3, [r7, #28]
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801950e:	4b20      	ldr	r3, [pc, #128]	; (8019590 <icmp_input+0x1f0>)
 8019510:	691a      	ldr	r2, [r3, #16]
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019516:	693b      	ldr	r3, [r7, #16]
 8019518:	2200      	movs	r2, #0
 801951a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	2200      	movs	r2, #0
 8019520:	709a      	strb	r2, [r3, #2]
 8019522:	2200      	movs	r2, #0
 8019524:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	22ff      	movs	r2, #255	; 0xff
 801952a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	2200      	movs	r2, #0
 8019530:	729a      	strb	r2, [r3, #10]
 8019532:	2200      	movs	r2, #0
 8019534:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	9302      	str	r3, [sp, #8]
 801953a:	2301      	movs	r3, #1
 801953c:	9301      	str	r3, [sp, #4]
 801953e:	2300      	movs	r3, #0
 8019540:	9300      	str	r3, [sp, #0]
 8019542:	23ff      	movs	r3, #255	; 0xff
 8019544:	2200      	movs	r2, #0
 8019546:	69f9      	ldr	r1, [r7, #28]
 8019548:	6878      	ldr	r0, [r7, #4]
 801954a:	f000 fa75 	bl	8019a38 <ip4_output_if>
 801954e:	4603      	mov	r3, r0
 8019550:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019552:	e001      	b.n	8019558 <icmp_input+0x1b8>
      break;
 8019554:	bf00      	nop
 8019556:	e000      	b.n	801955a <icmp_input+0x1ba>
      break;
 8019558:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801955a:	6878      	ldr	r0, [r7, #4]
 801955c:	f7f7 fe40 	bl	80111e0 <pbuf_free>
  return;
 8019560:	e013      	b.n	801958a <icmp_input+0x1ea>
    goto lenerr;
 8019562:	bf00      	nop
 8019564:	e002      	b.n	801956c <icmp_input+0x1cc>
    goto lenerr;
 8019566:	bf00      	nop
 8019568:	e000      	b.n	801956c <icmp_input+0x1cc>
        goto lenerr;
 801956a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801956c:	6878      	ldr	r0, [r7, #4]
 801956e:	f7f7 fe37 	bl	80111e0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019572:	e00a      	b.n	801958a <icmp_input+0x1ea>
        goto icmperr;
 8019574:	bf00      	nop
 8019576:	e004      	b.n	8019582 <icmp_input+0x1e2>
        goto icmperr;
 8019578:	bf00      	nop
 801957a:	e002      	b.n	8019582 <icmp_input+0x1e2>
          goto icmperr;
 801957c:	bf00      	nop
 801957e:	e000      	b.n	8019582 <icmp_input+0x1e2>
          goto icmperr;
 8019580:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019582:	6878      	ldr	r0, [r7, #4]
 8019584:	f7f7 fe2c 	bl	80111e0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019588:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801958a:	3728      	adds	r7, #40	; 0x28
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	20039988 	.word	0x20039988
 8019594:	2003999c 	.word	0x2003999c
 8019598:	0801f8f4 	.word	0x0801f8f4
 801959c:	0801f92c 	.word	0x0801f92c
 80195a0:	0801f964 	.word	0x0801f964
 80195a4:	0801f98c 	.word	0x0801f98c

080195a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b082      	sub	sp, #8
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	460b      	mov	r3, r1
 80195b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80195b4:	78fb      	ldrb	r3, [r7, #3]
 80195b6:	461a      	mov	r2, r3
 80195b8:	2103      	movs	r1, #3
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f000 f814 	bl	80195e8 <icmp_send_response>
}
 80195c0:	bf00      	nop
 80195c2:	3708      	adds	r7, #8
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b082      	sub	sp, #8
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
 80195d0:	460b      	mov	r3, r1
 80195d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80195d4:	78fb      	ldrb	r3, [r7, #3]
 80195d6:	461a      	mov	r2, r3
 80195d8:	210b      	movs	r1, #11
 80195da:	6878      	ldr	r0, [r7, #4]
 80195dc:	f000 f804 	bl	80195e8 <icmp_send_response>
}
 80195e0:	bf00      	nop
 80195e2:	3708      	adds	r7, #8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}

080195e8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b08c      	sub	sp, #48	; 0x30
 80195ec:	af04      	add	r7, sp, #16
 80195ee:	6078      	str	r0, [r7, #4]
 80195f0:	460b      	mov	r3, r1
 80195f2:	70fb      	strb	r3, [r7, #3]
 80195f4:	4613      	mov	r3, r2
 80195f6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80195f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80195fc:	2124      	movs	r1, #36	; 0x24
 80195fe:	2022      	movs	r0, #34	; 0x22
 8019600:	f7f7 fad8 	bl	8010bb4 <pbuf_alloc>
 8019604:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019606:	69fb      	ldr	r3, [r7, #28]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d04c      	beq.n	80196a6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801960c:	69fb      	ldr	r3, [r7, #28]
 801960e:	895b      	ldrh	r3, [r3, #10]
 8019610:	2b23      	cmp	r3, #35	; 0x23
 8019612:	d806      	bhi.n	8019622 <icmp_send_response+0x3a>
 8019614:	4b26      	ldr	r3, [pc, #152]	; (80196b0 <icmp_send_response+0xc8>)
 8019616:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801961a:	4926      	ldr	r1, [pc, #152]	; (80196b4 <icmp_send_response+0xcc>)
 801961c:	4826      	ldr	r0, [pc, #152]	; (80196b8 <icmp_send_response+0xd0>)
 801961e:	f001 fd9b 	bl	801b158 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	685b      	ldr	r3, [r3, #4]
 8019626:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019628:	69fb      	ldr	r3, [r7, #28]
 801962a:	685b      	ldr	r3, [r3, #4]
 801962c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	78fa      	ldrb	r2, [r7, #3]
 8019632:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	78ba      	ldrb	r2, [r7, #2]
 8019638:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801963a:	697b      	ldr	r3, [r7, #20]
 801963c:	2200      	movs	r2, #0
 801963e:	711a      	strb	r2, [r3, #4]
 8019640:	2200      	movs	r2, #0
 8019642:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019644:	697b      	ldr	r3, [r7, #20]
 8019646:	2200      	movs	r2, #0
 8019648:	719a      	strb	r2, [r3, #6]
 801964a:	2200      	movs	r2, #0
 801964c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801964e:	69fb      	ldr	r3, [r7, #28]
 8019650:	685b      	ldr	r3, [r3, #4]
 8019652:	f103 0008 	add.w	r0, r3, #8
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	221c      	movs	r2, #28
 801965c:	4619      	mov	r1, r3
 801965e:	f001 ff9c 	bl	801b59a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019662:	69bb      	ldr	r3, [r7, #24]
 8019664:	68db      	ldr	r3, [r3, #12]
 8019666:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019668:	f107 030c 	add.w	r3, r7, #12
 801966c:	4618      	mov	r0, r3
 801966e:	f000 f825 	bl	80196bc <ip4_route>
 8019672:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019674:	693b      	ldr	r3, [r7, #16]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d011      	beq.n	801969e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	2200      	movs	r2, #0
 801967e:	709a      	strb	r2, [r3, #2]
 8019680:	2200      	movs	r2, #0
 8019682:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019684:	f107 020c 	add.w	r2, r7, #12
 8019688:	693b      	ldr	r3, [r7, #16]
 801968a:	9302      	str	r3, [sp, #8]
 801968c:	2301      	movs	r3, #1
 801968e:	9301      	str	r3, [sp, #4]
 8019690:	2300      	movs	r3, #0
 8019692:	9300      	str	r3, [sp, #0]
 8019694:	23ff      	movs	r3, #255	; 0xff
 8019696:	2100      	movs	r1, #0
 8019698:	69f8      	ldr	r0, [r7, #28]
 801969a:	f000 f9cd 	bl	8019a38 <ip4_output_if>
  }
  pbuf_free(q);
 801969e:	69f8      	ldr	r0, [r7, #28]
 80196a0:	f7f7 fd9e 	bl	80111e0 <pbuf_free>
 80196a4:	e000      	b.n	80196a8 <icmp_send_response+0xc0>
    return;
 80196a6:	bf00      	nop
}
 80196a8:	3720      	adds	r7, #32
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
 80196ae:	bf00      	nop
 80196b0:	0801f8f4 	.word	0x0801f8f4
 80196b4:	0801f9c0 	.word	0x0801f9c0
 80196b8:	0801f964 	.word	0x0801f964

080196bc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80196bc:	b480      	push	{r7}
 80196be:	b085      	sub	sp, #20
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80196c4:	4b33      	ldr	r3, [pc, #204]	; (8019794 <ip4_route+0xd8>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	60fb      	str	r3, [r7, #12]
 80196ca:	e036      	b.n	801973a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80196d2:	f003 0301 	and.w	r3, r3, #1
 80196d6:	b2db      	uxtb	r3, r3
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d02b      	beq.n	8019734 <ip4_route+0x78>
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80196e2:	089b      	lsrs	r3, r3, #2
 80196e4:	f003 0301 	and.w	r3, r3, #1
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d022      	beq.n	8019734 <ip4_route+0x78>
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	3304      	adds	r3, #4
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d01d      	beq.n	8019734 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681a      	ldr	r2, [r3, #0]
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	3304      	adds	r3, #4
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	405a      	eors	r2, r3
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	3308      	adds	r3, #8
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4013      	ands	r3, r2
 801970c:	2b00      	cmp	r3, #0
 801970e:	d101      	bne.n	8019714 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	e038      	b.n	8019786 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801971a:	f003 0302 	and.w	r3, r3, #2
 801971e:	2b00      	cmp	r3, #0
 8019720:	d108      	bne.n	8019734 <ip4_route+0x78>
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681a      	ldr	r2, [r3, #0]
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	330c      	adds	r3, #12
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	429a      	cmp	r2, r3
 801972e:	d101      	bne.n	8019734 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	e028      	b.n	8019786 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	60fb      	str	r3, [r7, #12]
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d1c5      	bne.n	80196cc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019740:	4b15      	ldr	r3, [pc, #84]	; (8019798 <ip4_route+0xdc>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d01a      	beq.n	801977e <ip4_route+0xc2>
 8019748:	4b13      	ldr	r3, [pc, #76]	; (8019798 <ip4_route+0xdc>)
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019750:	f003 0301 	and.w	r3, r3, #1
 8019754:	2b00      	cmp	r3, #0
 8019756:	d012      	beq.n	801977e <ip4_route+0xc2>
 8019758:	4b0f      	ldr	r3, [pc, #60]	; (8019798 <ip4_route+0xdc>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019760:	f003 0304 	and.w	r3, r3, #4
 8019764:	2b00      	cmp	r3, #0
 8019766:	d00a      	beq.n	801977e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019768:	4b0b      	ldr	r3, [pc, #44]	; (8019798 <ip4_route+0xdc>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	3304      	adds	r3, #4
 801976e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019770:	2b00      	cmp	r3, #0
 8019772:	d004      	beq.n	801977e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	b2db      	uxtb	r3, r3
 801977a:	2b7f      	cmp	r3, #127	; 0x7f
 801977c:	d101      	bne.n	8019782 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801977e:	2300      	movs	r3, #0
 8019780:	e001      	b.n	8019786 <ip4_route+0xca>
  }

  return netif_default;
 8019782:	4b05      	ldr	r3, [pc, #20]	; (8019798 <ip4_route+0xdc>)
 8019784:	681b      	ldr	r3, [r3, #0]
}
 8019786:	4618      	mov	r0, r3
 8019788:	3714      	adds	r7, #20
 801978a:	46bd      	mov	sp, r7
 801978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019790:	4770      	bx	lr
 8019792:	bf00      	nop
 8019794:	2003d0d0 	.word	0x2003d0d0
 8019798:	2003d0d4 	.word	0x2003d0d4

0801979c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80197aa:	f003 0301 	and.w	r3, r3, #1
 80197ae:	b2db      	uxtb	r3, r3
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d016      	beq.n	80197e2 <ip4_input_accept+0x46>
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	3304      	adds	r3, #4
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d011      	beq.n	80197e2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80197be:	4b0b      	ldr	r3, [pc, #44]	; (80197ec <ip4_input_accept+0x50>)
 80197c0:	695a      	ldr	r2, [r3, #20]
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	3304      	adds	r3, #4
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	429a      	cmp	r2, r3
 80197ca:	d008      	beq.n	80197de <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80197cc:	4b07      	ldr	r3, [pc, #28]	; (80197ec <ip4_input_accept+0x50>)
 80197ce:	695b      	ldr	r3, [r3, #20]
 80197d0:	6879      	ldr	r1, [r7, #4]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f000 fa08 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 80197d8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d001      	beq.n	80197e2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80197de:	2301      	movs	r3, #1
 80197e0:	e000      	b.n	80197e4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80197e2:	2300      	movs	r3, #0
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3708      	adds	r7, #8
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	20039988 	.word	0x20039988

080197f0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b086      	sub	sp, #24
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	6078      	str	r0, [r7, #4]
 80197f8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	781b      	ldrb	r3, [r3, #0]
 8019804:	091b      	lsrs	r3, r3, #4
 8019806:	b2db      	uxtb	r3, r3
 8019808:	2b04      	cmp	r3, #4
 801980a:	d004      	beq.n	8019816 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801980c:	6878      	ldr	r0, [r7, #4]
 801980e:	f7f7 fce7 	bl	80111e0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019812:	2300      	movs	r3, #0
 8019814:	e107      	b.n	8019a26 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	781b      	ldrb	r3, [r3, #0]
 801981a:	f003 030f 	and.w	r3, r3, #15
 801981e:	b2db      	uxtb	r3, r3
 8019820:	009b      	lsls	r3, r3, #2
 8019822:	b2db      	uxtb	r3, r3
 8019824:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019826:	697b      	ldr	r3, [r7, #20]
 8019828:	885b      	ldrh	r3, [r3, #2]
 801982a:	b29b      	uxth	r3, r3
 801982c:	4618      	mov	r0, r3
 801982e:	f7f6 f8b3 	bl	800f998 <lwip_htons>
 8019832:	4603      	mov	r3, r0
 8019834:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	891b      	ldrh	r3, [r3, #8]
 801983a:	89ba      	ldrh	r2, [r7, #12]
 801983c:	429a      	cmp	r2, r3
 801983e:	d204      	bcs.n	801984a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019840:	89bb      	ldrh	r3, [r7, #12]
 8019842:	4619      	mov	r1, r3
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f7f7 fb13 	bl	8010e70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	895b      	ldrh	r3, [r3, #10]
 801984e:	89fa      	ldrh	r2, [r7, #14]
 8019850:	429a      	cmp	r2, r3
 8019852:	d807      	bhi.n	8019864 <ip4_input+0x74>
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	891b      	ldrh	r3, [r3, #8]
 8019858:	89ba      	ldrh	r2, [r7, #12]
 801985a:	429a      	cmp	r2, r3
 801985c:	d802      	bhi.n	8019864 <ip4_input+0x74>
 801985e:	89fb      	ldrh	r3, [r7, #14]
 8019860:	2b13      	cmp	r3, #19
 8019862:	d804      	bhi.n	801986e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019864:	6878      	ldr	r0, [r7, #4]
 8019866:	f7f7 fcbb 	bl	80111e0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801986a:	2300      	movs	r3, #0
 801986c:	e0db      	b.n	8019a26 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801986e:	697b      	ldr	r3, [r7, #20]
 8019870:	691b      	ldr	r3, [r3, #16]
 8019872:	4a6f      	ldr	r2, [pc, #444]	; (8019a30 <ip4_input+0x240>)
 8019874:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	4a6d      	ldr	r2, [pc, #436]	; (8019a30 <ip4_input+0x240>)
 801987c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801987e:	4b6c      	ldr	r3, [pc, #432]	; (8019a30 <ip4_input+0x240>)
 8019880:	695b      	ldr	r3, [r3, #20]
 8019882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019886:	2be0      	cmp	r3, #224	; 0xe0
 8019888:	d112      	bne.n	80198b0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019890:	f003 0301 	and.w	r3, r3, #1
 8019894:	b2db      	uxtb	r3, r3
 8019896:	2b00      	cmp	r3, #0
 8019898:	d007      	beq.n	80198aa <ip4_input+0xba>
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	3304      	adds	r3, #4
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d002      	beq.n	80198aa <ip4_input+0xba>
      netif = inp;
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	613b      	str	r3, [r7, #16]
 80198a8:	e02a      	b.n	8019900 <ip4_input+0x110>
    } else {
      netif = NULL;
 80198aa:	2300      	movs	r3, #0
 80198ac:	613b      	str	r3, [r7, #16]
 80198ae:	e027      	b.n	8019900 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80198b0:	6838      	ldr	r0, [r7, #0]
 80198b2:	f7ff ff73 	bl	801979c <ip4_input_accept>
 80198b6:	4603      	mov	r3, r0
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d002      	beq.n	80198c2 <ip4_input+0xd2>
      netif = inp;
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	613b      	str	r3, [r7, #16]
 80198c0:	e01e      	b.n	8019900 <ip4_input+0x110>
    } else {
      netif = NULL;
 80198c2:	2300      	movs	r3, #0
 80198c4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80198c6:	4b5a      	ldr	r3, [pc, #360]	; (8019a30 <ip4_input+0x240>)
 80198c8:	695b      	ldr	r3, [r3, #20]
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	2b7f      	cmp	r3, #127	; 0x7f
 80198ce:	d017      	beq.n	8019900 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80198d0:	4b58      	ldr	r3, [pc, #352]	; (8019a34 <ip4_input+0x244>)
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	613b      	str	r3, [r7, #16]
 80198d6:	e00e      	b.n	80198f6 <ip4_input+0x106>
          if (netif == inp) {
 80198d8:	693a      	ldr	r2, [r7, #16]
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	429a      	cmp	r2, r3
 80198de:	d006      	beq.n	80198ee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80198e0:	6938      	ldr	r0, [r7, #16]
 80198e2:	f7ff ff5b 	bl	801979c <ip4_input_accept>
 80198e6:	4603      	mov	r3, r0
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d108      	bne.n	80198fe <ip4_input+0x10e>
 80198ec:	e000      	b.n	80198f0 <ip4_input+0x100>
            continue;
 80198ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 80198f0:	693b      	ldr	r3, [r7, #16]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	613b      	str	r3, [r7, #16]
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d1ed      	bne.n	80198d8 <ip4_input+0xe8>
 80198fc:	e000      	b.n	8019900 <ip4_input+0x110>
            break;
 80198fe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019900:	4b4b      	ldr	r3, [pc, #300]	; (8019a30 <ip4_input+0x240>)
 8019902:	691b      	ldr	r3, [r3, #16]
 8019904:	6839      	ldr	r1, [r7, #0]
 8019906:	4618      	mov	r0, r3
 8019908:	f000 f96e 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 801990c:	4603      	mov	r3, r0
 801990e:	2b00      	cmp	r3, #0
 8019910:	d105      	bne.n	801991e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019912:	4b47      	ldr	r3, [pc, #284]	; (8019a30 <ip4_input+0x240>)
 8019914:	691b      	ldr	r3, [r3, #16]
 8019916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801991a:	2be0      	cmp	r3, #224	; 0xe0
 801991c:	d104      	bne.n	8019928 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801991e:	6878      	ldr	r0, [r7, #4]
 8019920:	f7f7 fc5e 	bl	80111e0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019924:	2300      	movs	r3, #0
 8019926:	e07e      	b.n	8019a26 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019928:	693b      	ldr	r3, [r7, #16]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d104      	bne.n	8019938 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801992e:	6878      	ldr	r0, [r7, #4]
 8019930:	f7f7 fc56 	bl	80111e0 <pbuf_free>
    return ERR_OK;
 8019934:	2300      	movs	r3, #0
 8019936:	e076      	b.n	8019a26 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019938:	697b      	ldr	r3, [r7, #20]
 801993a:	88db      	ldrh	r3, [r3, #6]
 801993c:	b29b      	uxth	r3, r3
 801993e:	461a      	mov	r2, r3
 8019940:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019944:	4013      	ands	r3, r2
 8019946:	2b00      	cmp	r3, #0
 8019948:	d00b      	beq.n	8019962 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f000 fd12 	bl	801a374 <ip4_reass>
 8019950:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d101      	bne.n	801995c <ip4_input+0x16c>
      return ERR_OK;
 8019958:	2300      	movs	r3, #0
 801995a:	e064      	b.n	8019a26 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	685b      	ldr	r3, [r3, #4]
 8019960:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019962:	4a33      	ldr	r2, [pc, #204]	; (8019a30 <ip4_input+0x240>)
 8019964:	693b      	ldr	r3, [r7, #16]
 8019966:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019968:	4a31      	ldr	r2, [pc, #196]	; (8019a30 <ip4_input+0x240>)
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801996e:	4a30      	ldr	r2, [pc, #192]	; (8019a30 <ip4_input+0x240>)
 8019970:	697b      	ldr	r3, [r7, #20]
 8019972:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	781b      	ldrb	r3, [r3, #0]
 8019978:	f003 030f 	and.w	r3, r3, #15
 801997c:	b2db      	uxtb	r3, r3
 801997e:	009b      	lsls	r3, r3, #2
 8019980:	b2db      	uxtb	r3, r3
 8019982:	b29a      	uxth	r2, r3
 8019984:	4b2a      	ldr	r3, [pc, #168]	; (8019a30 <ip4_input+0x240>)
 8019986:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019988:	89fb      	ldrh	r3, [r7, #14]
 801998a:	4619      	mov	r1, r3
 801998c:	6878      	ldr	r0, [r7, #4]
 801998e:	f7f7 fb6f 	bl	8011070 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	7a5b      	ldrb	r3, [r3, #9]
 8019996:	2b11      	cmp	r3, #17
 8019998:	d006      	beq.n	80199a8 <ip4_input+0x1b8>
 801999a:	2b11      	cmp	r3, #17
 801999c:	dc13      	bgt.n	80199c6 <ip4_input+0x1d6>
 801999e:	2b01      	cmp	r3, #1
 80199a0:	d00c      	beq.n	80199bc <ip4_input+0x1cc>
 80199a2:	2b06      	cmp	r3, #6
 80199a4:	d005      	beq.n	80199b2 <ip4_input+0x1c2>
 80199a6:	e00e      	b.n	80199c6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80199a8:	6839      	ldr	r1, [r7, #0]
 80199aa:	6878      	ldr	r0, [r7, #4]
 80199ac:	f7fe f970 	bl	8017c90 <udp_input>
        break;
 80199b0:	e026      	b.n	8019a00 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80199b2:	6839      	ldr	r1, [r7, #0]
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f7f9 fd29 	bl	801340c <tcp_input>
        break;
 80199ba:	e021      	b.n	8019a00 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80199bc:	6839      	ldr	r1, [r7, #0]
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f7ff fcee 	bl	80193a0 <icmp_input>
        break;
 80199c4:	e01c      	b.n	8019a00 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80199c6:	4b1a      	ldr	r3, [pc, #104]	; (8019a30 <ip4_input+0x240>)
 80199c8:	695b      	ldr	r3, [r3, #20]
 80199ca:	6939      	ldr	r1, [r7, #16]
 80199cc:	4618      	mov	r0, r3
 80199ce:	f000 f90b 	bl	8019be8 <ip4_addr_isbroadcast_u32>
 80199d2:	4603      	mov	r3, r0
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d10f      	bne.n	80199f8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80199d8:	4b15      	ldr	r3, [pc, #84]	; (8019a30 <ip4_input+0x240>)
 80199da:	695b      	ldr	r3, [r3, #20]
 80199dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80199e0:	2be0      	cmp	r3, #224	; 0xe0
 80199e2:	d009      	beq.n	80199f8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80199e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80199e8:	4619      	mov	r1, r3
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f7f7 fbb3 	bl	8011156 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80199f0:	2102      	movs	r1, #2
 80199f2:	6878      	ldr	r0, [r7, #4]
 80199f4:	f7ff fdd8 	bl	80195a8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f7f7 fbf1 	bl	80111e0 <pbuf_free>
        break;
 80199fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019a00:	4b0b      	ldr	r3, [pc, #44]	; (8019a30 <ip4_input+0x240>)
 8019a02:	2200      	movs	r2, #0
 8019a04:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019a06:	4b0a      	ldr	r3, [pc, #40]	; (8019a30 <ip4_input+0x240>)
 8019a08:	2200      	movs	r2, #0
 8019a0a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019a0c:	4b08      	ldr	r3, [pc, #32]	; (8019a30 <ip4_input+0x240>)
 8019a0e:	2200      	movs	r2, #0
 8019a10:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019a12:	4b07      	ldr	r3, [pc, #28]	; (8019a30 <ip4_input+0x240>)
 8019a14:	2200      	movs	r2, #0
 8019a16:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019a18:	4b05      	ldr	r3, [pc, #20]	; (8019a30 <ip4_input+0x240>)
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019a1e:	4b04      	ldr	r3, [pc, #16]	; (8019a30 <ip4_input+0x240>)
 8019a20:	2200      	movs	r2, #0
 8019a22:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019a24:	2300      	movs	r3, #0
}
 8019a26:	4618      	mov	r0, r3
 8019a28:	3718      	adds	r7, #24
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	bd80      	pop	{r7, pc}
 8019a2e:	bf00      	nop
 8019a30:	20039988 	.word	0x20039988
 8019a34:	2003d0d0 	.word	0x2003d0d0

08019a38 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b08a      	sub	sp, #40	; 0x28
 8019a3c:	af04      	add	r7, sp, #16
 8019a3e:	60f8      	str	r0, [r7, #12]
 8019a40:	60b9      	str	r1, [r7, #8]
 8019a42:	607a      	str	r2, [r7, #4]
 8019a44:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019a46:	68bb      	ldr	r3, [r7, #8]
 8019a48:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d009      	beq.n	8019a64 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019a50:	68bb      	ldr	r3, [r7, #8]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d003      	beq.n	8019a5e <ip4_output_if+0x26>
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d102      	bne.n	8019a64 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a60:	3304      	adds	r3, #4
 8019a62:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019a64:	78fa      	ldrb	r2, [r7, #3]
 8019a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a68:	9302      	str	r3, [sp, #8]
 8019a6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a6e:	9301      	str	r3, [sp, #4]
 8019a70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019a74:	9300      	str	r3, [sp, #0]
 8019a76:	4613      	mov	r3, r2
 8019a78:	687a      	ldr	r2, [r7, #4]
 8019a7a:	6979      	ldr	r1, [r7, #20]
 8019a7c:	68f8      	ldr	r0, [r7, #12]
 8019a7e:	f000 f805 	bl	8019a8c <ip4_output_if_src>
 8019a82:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3718      	adds	r7, #24
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}

08019a8c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b088      	sub	sp, #32
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	60f8      	str	r0, [r7, #12]
 8019a94:	60b9      	str	r1, [r7, #8]
 8019a96:	607a      	str	r2, [r7, #4]
 8019a98:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	7b9b      	ldrb	r3, [r3, #14]
 8019a9e:	2b01      	cmp	r3, #1
 8019aa0:	d006      	beq.n	8019ab0 <ip4_output_if_src+0x24>
 8019aa2:	4b4b      	ldr	r3, [pc, #300]	; (8019bd0 <ip4_output_if_src+0x144>)
 8019aa4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019aa8:	494a      	ldr	r1, [pc, #296]	; (8019bd4 <ip4_output_if_src+0x148>)
 8019aaa:	484b      	ldr	r0, [pc, #300]	; (8019bd8 <ip4_output_if_src+0x14c>)
 8019aac:	f001 fb54 	bl	801b158 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d060      	beq.n	8019b78 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019ab6:	2314      	movs	r3, #20
 8019ab8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019aba:	2114      	movs	r1, #20
 8019abc:	68f8      	ldr	r0, [r7, #12]
 8019abe:	f7f7 fac7 	bl	8011050 <pbuf_add_header>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d002      	beq.n	8019ace <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019ac8:	f06f 0301 	mvn.w	r3, #1
 8019acc:	e07c      	b.n	8019bc8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	895b      	ldrh	r3, [r3, #10]
 8019ad8:	2b13      	cmp	r3, #19
 8019ada:	d806      	bhi.n	8019aea <ip4_output_if_src+0x5e>
 8019adc:	4b3c      	ldr	r3, [pc, #240]	; (8019bd0 <ip4_output_if_src+0x144>)
 8019ade:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019ae2:	493e      	ldr	r1, [pc, #248]	; (8019bdc <ip4_output_if_src+0x150>)
 8019ae4:	483c      	ldr	r0, [pc, #240]	; (8019bd8 <ip4_output_if_src+0x14c>)
 8019ae6:	f001 fb37 	bl	801b158 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019aea:	69fb      	ldr	r3, [r7, #28]
 8019aec:	78fa      	ldrb	r2, [r7, #3]
 8019aee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019af0:	69fb      	ldr	r3, [r7, #28]
 8019af2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019af6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	681a      	ldr	r2, [r3, #0]
 8019afc:	69fb      	ldr	r3, [r7, #28]
 8019afe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019b00:	8b7b      	ldrh	r3, [r7, #26]
 8019b02:	089b      	lsrs	r3, r3, #2
 8019b04:	b29b      	uxth	r3, r3
 8019b06:	b2db      	uxtb	r3, r3
 8019b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b0c:	b2da      	uxtb	r2, r3
 8019b0e:	69fb      	ldr	r3, [r7, #28]
 8019b10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019b12:	69fb      	ldr	r3, [r7, #28]
 8019b14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019b18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	891b      	ldrh	r3, [r3, #8]
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f7f5 ff3a 	bl	800f998 <lwip_htons>
 8019b24:	4603      	mov	r3, r0
 8019b26:	461a      	mov	r2, r3
 8019b28:	69fb      	ldr	r3, [r7, #28]
 8019b2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019b2c:	69fb      	ldr	r3, [r7, #28]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	719a      	strb	r2, [r3, #6]
 8019b32:	2200      	movs	r2, #0
 8019b34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019b36:	4b2a      	ldr	r3, [pc, #168]	; (8019be0 <ip4_output_if_src+0x154>)
 8019b38:	881b      	ldrh	r3, [r3, #0]
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	f7f5 ff2c 	bl	800f998 <lwip_htons>
 8019b40:	4603      	mov	r3, r0
 8019b42:	461a      	mov	r2, r3
 8019b44:	69fb      	ldr	r3, [r7, #28]
 8019b46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019b48:	4b25      	ldr	r3, [pc, #148]	; (8019be0 <ip4_output_if_src+0x154>)
 8019b4a:	881b      	ldrh	r3, [r3, #0]
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	b29a      	uxth	r2, r3
 8019b50:	4b23      	ldr	r3, [pc, #140]	; (8019be0 <ip4_output_if_src+0x154>)
 8019b52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019b54:	68bb      	ldr	r3, [r7, #8]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d104      	bne.n	8019b64 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019b5a:	4b22      	ldr	r3, [pc, #136]	; (8019be4 <ip4_output_if_src+0x158>)
 8019b5c:	681a      	ldr	r2, [r3, #0]
 8019b5e:	69fb      	ldr	r3, [r7, #28]
 8019b60:	60da      	str	r2, [r3, #12]
 8019b62:	e003      	b.n	8019b6c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	681a      	ldr	r2, [r3, #0]
 8019b68:	69fb      	ldr	r3, [r7, #28]
 8019b6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019b6c:	69fb      	ldr	r3, [r7, #28]
 8019b6e:	2200      	movs	r2, #0
 8019b70:	729a      	strb	r2, [r3, #10]
 8019b72:	2200      	movs	r2, #0
 8019b74:	72da      	strb	r2, [r3, #11]
 8019b76:	e00f      	b.n	8019b98 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	895b      	ldrh	r3, [r3, #10]
 8019b7c:	2b13      	cmp	r3, #19
 8019b7e:	d802      	bhi.n	8019b86 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019b80:	f06f 0301 	mvn.w	r3, #1
 8019b84:	e020      	b.n	8019bc8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	685b      	ldr	r3, [r3, #4]
 8019b8a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019b8c:	69fb      	ldr	r3, [r7, #28]
 8019b8e:	691b      	ldr	r3, [r3, #16]
 8019b90:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019b92:	f107 0314 	add.w	r3, r7, #20
 8019b96:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d00c      	beq.n	8019bba <ip4_output_if_src+0x12e>
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	891a      	ldrh	r2, [r3, #8]
 8019ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d906      	bls.n	8019bba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019bac:	687a      	ldr	r2, [r7, #4]
 8019bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019bb0:	68f8      	ldr	r0, [r7, #12]
 8019bb2:	f000 fdd3 	bl	801a75c <ip4_frag>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	e006      	b.n	8019bc8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bbc:	695b      	ldr	r3, [r3, #20]
 8019bbe:	687a      	ldr	r2, [r7, #4]
 8019bc0:	68f9      	ldr	r1, [r7, #12]
 8019bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019bc4:	4798      	blx	r3
 8019bc6:	4603      	mov	r3, r0
}
 8019bc8:	4618      	mov	r0, r3
 8019bca:	3720      	adds	r7, #32
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}
 8019bd0:	0801f9ec 	.word	0x0801f9ec
 8019bd4:	0801fa20 	.word	0x0801fa20
 8019bd8:	0801fa2c 	.word	0x0801fa2c
 8019bdc:	0801fa54 	.word	0x0801fa54
 8019be0:	2003d22e 	.word	0x2003d22e
 8019be4:	0801fec4 	.word	0x0801fec4

08019be8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019be8:	b480      	push	{r7}
 8019bea:	b085      	sub	sp, #20
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bfc:	d002      	beq.n	8019c04 <ip4_addr_isbroadcast_u32+0x1c>
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d101      	bne.n	8019c08 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019c04:	2301      	movs	r3, #1
 8019c06:	e02a      	b.n	8019c5e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019c08:	683b      	ldr	r3, [r7, #0]
 8019c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019c0e:	f003 0302 	and.w	r3, r3, #2
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d101      	bne.n	8019c1a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019c16:	2300      	movs	r3, #0
 8019c18:	e021      	b.n	8019c5e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	3304      	adds	r3, #4
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	687a      	ldr	r2, [r7, #4]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d101      	bne.n	8019c2a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019c26:	2300      	movs	r3, #0
 8019c28:	e019      	b.n	8019c5e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019c2a:	68fa      	ldr	r2, [r7, #12]
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	3304      	adds	r3, #4
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	405a      	eors	r2, r3
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	3308      	adds	r3, #8
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	4013      	ands	r3, r2
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d10d      	bne.n	8019c5c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019c40:	683b      	ldr	r3, [r7, #0]
 8019c42:	3308      	adds	r3, #8
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	43da      	mvns	r2, r3
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019c4c:	683b      	ldr	r3, [r7, #0]
 8019c4e:	3308      	adds	r3, #8
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019c54:	429a      	cmp	r2, r3
 8019c56:	d101      	bne.n	8019c5c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019c58:	2301      	movs	r3, #1
 8019c5a:	e000      	b.n	8019c5e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019c5c:	2300      	movs	r3, #0
  }
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3714      	adds	r7, #20
 8019c62:	46bd      	mov	sp, r7
 8019c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c68:	4770      	bx	lr
	...

08019c6c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019c6c:	b480      	push	{r7}
 8019c6e:	b08d      	sub	sp, #52	; 0x34
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	60f8      	str	r0, [r7, #12]
 8019c74:	60b9      	str	r1, [r7, #8]
 8019c76:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019c78:	2300      	movs	r3, #0
 8019c7a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8019c82:	68bb      	ldr	r3, [r7, #8]
 8019c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8019c86:	f107 0318 	add.w	r3, r7, #24
 8019c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019c92:	e058      	b.n	8019d46 <ip4addr_ntoa_r+0xda>
    i = 0;
 8019c94:	2300      	movs	r3, #0
 8019c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8019c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c9c:	781a      	ldrb	r2, [r3, #0]
 8019c9e:	4b32      	ldr	r3, [pc, #200]	; (8019d68 <ip4addr_ntoa_r+0xfc>)
 8019ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8019ca4:	08d9      	lsrs	r1, r3, #3
 8019ca6:	460b      	mov	r3, r1
 8019ca8:	009b      	lsls	r3, r3, #2
 8019caa:	440b      	add	r3, r1
 8019cac:	005b      	lsls	r3, r3, #1
 8019cae:	1ad3      	subs	r3, r2, r3
 8019cb0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8019cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	4a2c      	ldr	r2, [pc, #176]	; (8019d68 <ip4addr_ntoa_r+0xfc>)
 8019cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8019cbc:	08db      	lsrs	r3, r3, #3
 8019cbe:	b2da      	uxtb	r2, r3
 8019cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cc2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019cc8:	1c5a      	adds	r2, r3, #1
 8019cca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8019cce:	4619      	mov	r1, r3
 8019cd0:	7ffb      	ldrb	r3, [r7, #31]
 8019cd2:	3330      	adds	r3, #48	; 0x30
 8019cd4:	b2da      	uxtb	r2, r3
 8019cd6:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8019cda:	443b      	add	r3, r7
 8019cdc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8019ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d1d8      	bne.n	8019c9a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019ce8:	e011      	b.n	8019d0e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019cea:	6a3b      	ldr	r3, [r7, #32]
 8019cec:	1c5a      	adds	r2, r3, #1
 8019cee:	623a      	str	r2, [r7, #32]
 8019cf0:	687a      	ldr	r2, [r7, #4]
 8019cf2:	429a      	cmp	r2, r3
 8019cf4:	dc01      	bgt.n	8019cfa <ip4addr_ntoa_r+0x8e>
        return NULL;
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	e030      	b.n	8019d5c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8019cfa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d00:	1c59      	adds	r1, r3, #1
 8019d02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019d04:	3230      	adds	r2, #48	; 0x30
 8019d06:	443a      	add	r2, r7
 8019d08:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8019d0c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8019d0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019d12:	1e5a      	subs	r2, r3, #1
 8019d14:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d1e6      	bne.n	8019cea <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8019d1c:	6a3b      	ldr	r3, [r7, #32]
 8019d1e:	1c5a      	adds	r2, r3, #1
 8019d20:	623a      	str	r2, [r7, #32]
 8019d22:	687a      	ldr	r2, [r7, #4]
 8019d24:	429a      	cmp	r2, r3
 8019d26:	dc01      	bgt.n	8019d2c <ip4addr_ntoa_r+0xc0>
      return NULL;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	e017      	b.n	8019d5c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8019d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d2e:	1c5a      	adds	r2, r3, #1
 8019d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019d32:	222e      	movs	r2, #46	; 0x2e
 8019d34:	701a      	strb	r2, [r3, #0]
    ap++;
 8019d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d38:	3301      	adds	r3, #1
 8019d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d40:	3301      	adds	r3, #1
 8019d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d4a:	2b03      	cmp	r3, #3
 8019d4c:	d9a2      	bls.n	8019c94 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d50:	3b01      	subs	r3, #1
 8019d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	2200      	movs	r2, #0
 8019d58:	701a      	strb	r2, [r3, #0]
  return buf;
 8019d5a:	68bb      	ldr	r3, [r7, #8]
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	3734      	adds	r7, #52	; 0x34
 8019d60:	46bd      	mov	sp, r7
 8019d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d66:	4770      	bx	lr
 8019d68:	cccccccd 	.word	0xcccccccd

08019d6c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b084      	sub	sp, #16
 8019d70:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019d72:	2300      	movs	r3, #0
 8019d74:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019d76:	4b12      	ldr	r3, [pc, #72]	; (8019dc0 <ip_reass_tmr+0x54>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019d7c:	e018      	b.n	8019db0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	7fdb      	ldrb	r3, [r3, #31]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d00b      	beq.n	8019d9e <ip_reass_tmr+0x32>
      r->timer--;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	7fdb      	ldrb	r3, [r3, #31]
 8019d8a:	3b01      	subs	r3, #1
 8019d8c:	b2da      	uxtb	r2, r3
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	60fb      	str	r3, [r7, #12]
 8019d9c:	e008      	b.n	8019db0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019da8:	68b9      	ldr	r1, [r7, #8]
 8019daa:	6878      	ldr	r0, [r7, #4]
 8019dac:	f000 f80a 	bl	8019dc4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d1e3      	bne.n	8019d7e <ip_reass_tmr+0x12>
    }
  }
}
 8019db6:	bf00      	nop
 8019db8:	bf00      	nop
 8019dba:	3710      	adds	r7, #16
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	bd80      	pop	{r7, pc}
 8019dc0:	2003d230 	.word	0x2003d230

08019dc4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b088      	sub	sp, #32
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019dce:	2300      	movs	r3, #0
 8019dd0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019dd2:	683a      	ldr	r2, [r7, #0]
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	429a      	cmp	r2, r3
 8019dd8:	d105      	bne.n	8019de6 <ip_reass_free_complete_datagram+0x22>
 8019dda:	4b45      	ldr	r3, [pc, #276]	; (8019ef0 <ip_reass_free_complete_datagram+0x12c>)
 8019ddc:	22ab      	movs	r2, #171	; 0xab
 8019dde:	4945      	ldr	r1, [pc, #276]	; (8019ef4 <ip_reass_free_complete_datagram+0x130>)
 8019de0:	4845      	ldr	r0, [pc, #276]	; (8019ef8 <ip_reass_free_complete_datagram+0x134>)
 8019de2:	f001 f9b9 	bl	801b158 <iprintf>
  if (prev != NULL) {
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d00a      	beq.n	8019e02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	687a      	ldr	r2, [r7, #4]
 8019df2:	429a      	cmp	r2, r3
 8019df4:	d005      	beq.n	8019e02 <ip_reass_free_complete_datagram+0x3e>
 8019df6:	4b3e      	ldr	r3, [pc, #248]	; (8019ef0 <ip_reass_free_complete_datagram+0x12c>)
 8019df8:	22ad      	movs	r2, #173	; 0xad
 8019dfa:	4940      	ldr	r1, [pc, #256]	; (8019efc <ip_reass_free_complete_datagram+0x138>)
 8019dfc:	483e      	ldr	r0, [pc, #248]	; (8019ef8 <ip_reass_free_complete_datagram+0x134>)
 8019dfe:	f001 f9ab 	bl	801b158 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019e0a:	697b      	ldr	r3, [r7, #20]
 8019e0c:	889b      	ldrh	r3, [r3, #4]
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d12a      	bne.n	8019e6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	685b      	ldr	r3, [r3, #4]
 8019e18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	681a      	ldr	r2, [r3, #0]
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019e22:	69bb      	ldr	r3, [r7, #24]
 8019e24:	6858      	ldr	r0, [r3, #4]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	3308      	adds	r3, #8
 8019e2a:	2214      	movs	r2, #20
 8019e2c:	4619      	mov	r1, r3
 8019e2e:	f001 fbb4 	bl	801b59a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019e32:	2101      	movs	r1, #1
 8019e34:	69b8      	ldr	r0, [r7, #24]
 8019e36:	f7ff fbc7 	bl	80195c8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019e3a:	69b8      	ldr	r0, [r7, #24]
 8019e3c:	f7f7 fa5e 	bl	80112fc <pbuf_clen>
 8019e40:	4603      	mov	r3, r0
 8019e42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019e44:	8bfa      	ldrh	r2, [r7, #30]
 8019e46:	8a7b      	ldrh	r3, [r7, #18]
 8019e48:	4413      	add	r3, r2
 8019e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e4e:	db05      	blt.n	8019e5c <ip_reass_free_complete_datagram+0x98>
 8019e50:	4b27      	ldr	r3, [pc, #156]	; (8019ef0 <ip_reass_free_complete_datagram+0x12c>)
 8019e52:	22bc      	movs	r2, #188	; 0xbc
 8019e54:	492a      	ldr	r1, [pc, #168]	; (8019f00 <ip_reass_free_complete_datagram+0x13c>)
 8019e56:	4828      	ldr	r0, [pc, #160]	; (8019ef8 <ip_reass_free_complete_datagram+0x134>)
 8019e58:	f001 f97e 	bl	801b158 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019e5c:	8bfa      	ldrh	r2, [r7, #30]
 8019e5e:	8a7b      	ldrh	r3, [r7, #18]
 8019e60:	4413      	add	r3, r2
 8019e62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019e64:	69b8      	ldr	r0, [r7, #24]
 8019e66:	f7f7 f9bb 	bl	80111e0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019e70:	e01f      	b.n	8019eb2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019e72:	69bb      	ldr	r3, [r7, #24]
 8019e74:	685b      	ldr	r3, [r3, #4]
 8019e76:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019e78:	69bb      	ldr	r3, [r7, #24]
 8019e7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019e7c:	697b      	ldr	r3, [r7, #20]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019e82:	68f8      	ldr	r0, [r7, #12]
 8019e84:	f7f7 fa3a 	bl	80112fc <pbuf_clen>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019e8c:	8bfa      	ldrh	r2, [r7, #30]
 8019e8e:	8a7b      	ldrh	r3, [r7, #18]
 8019e90:	4413      	add	r3, r2
 8019e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e96:	db05      	blt.n	8019ea4 <ip_reass_free_complete_datagram+0xe0>
 8019e98:	4b15      	ldr	r3, [pc, #84]	; (8019ef0 <ip_reass_free_complete_datagram+0x12c>)
 8019e9a:	22cc      	movs	r2, #204	; 0xcc
 8019e9c:	4918      	ldr	r1, [pc, #96]	; (8019f00 <ip_reass_free_complete_datagram+0x13c>)
 8019e9e:	4816      	ldr	r0, [pc, #88]	; (8019ef8 <ip_reass_free_complete_datagram+0x134>)
 8019ea0:	f001 f95a 	bl	801b158 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019ea4:	8bfa      	ldrh	r2, [r7, #30]
 8019ea6:	8a7b      	ldrh	r3, [r7, #18]
 8019ea8:	4413      	add	r3, r2
 8019eaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019eac:	68f8      	ldr	r0, [r7, #12]
 8019eae:	f7f7 f997 	bl	80111e0 <pbuf_free>
  while (p != NULL) {
 8019eb2:	69bb      	ldr	r3, [r7, #24]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d1dc      	bne.n	8019e72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019eb8:	6839      	ldr	r1, [r7, #0]
 8019eba:	6878      	ldr	r0, [r7, #4]
 8019ebc:	f000 f8c2 	bl	801a044 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019ec0:	4b10      	ldr	r3, [pc, #64]	; (8019f04 <ip_reass_free_complete_datagram+0x140>)
 8019ec2:	881b      	ldrh	r3, [r3, #0]
 8019ec4:	8bfa      	ldrh	r2, [r7, #30]
 8019ec6:	429a      	cmp	r2, r3
 8019ec8:	d905      	bls.n	8019ed6 <ip_reass_free_complete_datagram+0x112>
 8019eca:	4b09      	ldr	r3, [pc, #36]	; (8019ef0 <ip_reass_free_complete_datagram+0x12c>)
 8019ecc:	22d2      	movs	r2, #210	; 0xd2
 8019ece:	490e      	ldr	r1, [pc, #56]	; (8019f08 <ip_reass_free_complete_datagram+0x144>)
 8019ed0:	4809      	ldr	r0, [pc, #36]	; (8019ef8 <ip_reass_free_complete_datagram+0x134>)
 8019ed2:	f001 f941 	bl	801b158 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019ed6:	4b0b      	ldr	r3, [pc, #44]	; (8019f04 <ip_reass_free_complete_datagram+0x140>)
 8019ed8:	881a      	ldrh	r2, [r3, #0]
 8019eda:	8bfb      	ldrh	r3, [r7, #30]
 8019edc:	1ad3      	subs	r3, r2, r3
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	4b08      	ldr	r3, [pc, #32]	; (8019f04 <ip_reass_free_complete_datagram+0x140>)
 8019ee2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019ee4:	8bfb      	ldrh	r3, [r7, #30]
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3720      	adds	r7, #32
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	0801fa84 	.word	0x0801fa84
 8019ef4:	0801fac0 	.word	0x0801fac0
 8019ef8:	0801facc 	.word	0x0801facc
 8019efc:	0801faf4 	.word	0x0801faf4
 8019f00:	0801fb08 	.word	0x0801fb08
 8019f04:	2003d234 	.word	0x2003d234
 8019f08:	0801fb28 	.word	0x0801fb28

08019f0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	b08a      	sub	sp, #40	; 0x28
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	6078      	str	r0, [r7, #4]
 8019f14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019f16:	2300      	movs	r3, #0
 8019f18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019f1e:	2300      	movs	r3, #0
 8019f20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019f22:	2300      	movs	r3, #0
 8019f24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019f26:	2300      	movs	r3, #0
 8019f28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019f2a:	4b28      	ldr	r3, [pc, #160]	; (8019fcc <ip_reass_remove_oldest_datagram+0xc0>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019f30:	e030      	b.n	8019f94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f34:	695a      	ldr	r2, [r3, #20]
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	68db      	ldr	r3, [r3, #12]
 8019f3a:	429a      	cmp	r2, r3
 8019f3c:	d10c      	bne.n	8019f58 <ip_reass_remove_oldest_datagram+0x4c>
 8019f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f40:	699a      	ldr	r2, [r3, #24]
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	691b      	ldr	r3, [r3, #16]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d106      	bne.n	8019f58 <ip_reass_remove_oldest_datagram+0x4c>
 8019f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4c:	899a      	ldrh	r2, [r3, #12]
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	889b      	ldrh	r3, [r3, #4]
 8019f52:	b29b      	uxth	r3, r3
 8019f54:	429a      	cmp	r2, r3
 8019f56:	d014      	beq.n	8019f82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019f58:	693b      	ldr	r3, [r7, #16]
 8019f5a:	3301      	adds	r3, #1
 8019f5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019f5e:	6a3b      	ldr	r3, [r7, #32]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d104      	bne.n	8019f6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	61bb      	str	r3, [r7, #24]
 8019f6c:	e009      	b.n	8019f82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f70:	7fda      	ldrb	r2, [r3, #31]
 8019f72:	6a3b      	ldr	r3, [r7, #32]
 8019f74:	7fdb      	ldrb	r3, [r3, #31]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d803      	bhi.n	8019f82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019f7e:	69fb      	ldr	r3, [r7, #28]
 8019f80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d001      	beq.n	8019f8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d1cb      	bne.n	8019f32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019f9a:	6a3b      	ldr	r3, [r7, #32]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d008      	beq.n	8019fb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019fa0:	69b9      	ldr	r1, [r7, #24]
 8019fa2:	6a38      	ldr	r0, [r7, #32]
 8019fa4:	f7ff ff0e 	bl	8019dc4 <ip_reass_free_complete_datagram>
 8019fa8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019faa:	697a      	ldr	r2, [r7, #20]
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	4413      	add	r3, r2
 8019fb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019fb2:	697a      	ldr	r2, [r7, #20]
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	429a      	cmp	r2, r3
 8019fb8:	da02      	bge.n	8019fc0 <ip_reass_remove_oldest_datagram+0xb4>
 8019fba:	693b      	ldr	r3, [r7, #16]
 8019fbc:	2b01      	cmp	r3, #1
 8019fbe:	dcac      	bgt.n	8019f1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019fc0:	697b      	ldr	r3, [r7, #20]
}
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	3728      	adds	r7, #40	; 0x28
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}
 8019fca:	bf00      	nop
 8019fcc:	2003d230 	.word	0x2003d230

08019fd0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b084      	sub	sp, #16
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
 8019fd8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019fda:	2004      	movs	r0, #4
 8019fdc:	f7f6 f9b4 	bl	8010348 <memp_malloc>
 8019fe0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d110      	bne.n	801a00a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019fe8:	6839      	ldr	r1, [r7, #0]
 8019fea:	6878      	ldr	r0, [r7, #4]
 8019fec:	f7ff ff8e 	bl	8019f0c <ip_reass_remove_oldest_datagram>
 8019ff0:	4602      	mov	r2, r0
 8019ff2:	683b      	ldr	r3, [r7, #0]
 8019ff4:	4293      	cmp	r3, r2
 8019ff6:	dc03      	bgt.n	801a000 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019ff8:	2004      	movs	r0, #4
 8019ffa:	f7f6 f9a5 	bl	8010348 <memp_malloc>
 8019ffe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d101      	bne.n	801a00a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a006:	2300      	movs	r3, #0
 801a008:	e016      	b.n	801a038 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a00a:	2220      	movs	r2, #32
 801a00c:	2100      	movs	r1, #0
 801a00e:	68f8      	ldr	r0, [r7, #12]
 801a010:	f001 f9f8 	bl	801b404 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	220f      	movs	r2, #15
 801a018:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a01a:	4b09      	ldr	r3, [pc, #36]	; (801a040 <ip_reass_enqueue_new_datagram+0x70>)
 801a01c:	681a      	ldr	r2, [r3, #0]
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a022:	4a07      	ldr	r2, [pc, #28]	; (801a040 <ip_reass_enqueue_new_datagram+0x70>)
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	3308      	adds	r3, #8
 801a02c:	2214      	movs	r2, #20
 801a02e:	6879      	ldr	r1, [r7, #4]
 801a030:	4618      	mov	r0, r3
 801a032:	f001 fab2 	bl	801b59a <memcpy>
  return ipr;
 801a036:	68fb      	ldr	r3, [r7, #12]
}
 801a038:	4618      	mov	r0, r3
 801a03a:	3710      	adds	r7, #16
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	2003d230 	.word	0x2003d230

0801a044 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b082      	sub	sp, #8
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]
 801a04c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a04e:	4b10      	ldr	r3, [pc, #64]	; (801a090 <ip_reass_dequeue_datagram+0x4c>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	687a      	ldr	r2, [r7, #4]
 801a054:	429a      	cmp	r2, r3
 801a056:	d104      	bne.n	801a062 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	4a0c      	ldr	r2, [pc, #48]	; (801a090 <ip_reass_dequeue_datagram+0x4c>)
 801a05e:	6013      	str	r3, [r2, #0]
 801a060:	e00d      	b.n	801a07e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d106      	bne.n	801a076 <ip_reass_dequeue_datagram+0x32>
 801a068:	4b0a      	ldr	r3, [pc, #40]	; (801a094 <ip_reass_dequeue_datagram+0x50>)
 801a06a:	f240 1245 	movw	r2, #325	; 0x145
 801a06e:	490a      	ldr	r1, [pc, #40]	; (801a098 <ip_reass_dequeue_datagram+0x54>)
 801a070:	480a      	ldr	r0, [pc, #40]	; (801a09c <ip_reass_dequeue_datagram+0x58>)
 801a072:	f001 f871 	bl	801b158 <iprintf>
    prev->next = ipr->next;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681a      	ldr	r2, [r3, #0]
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a07e:	6879      	ldr	r1, [r7, #4]
 801a080:	2004      	movs	r0, #4
 801a082:	f7f6 f9d7 	bl	8010434 <memp_free>
}
 801a086:	bf00      	nop
 801a088:	3708      	adds	r7, #8
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	2003d230 	.word	0x2003d230
 801a094:	0801fa84 	.word	0x0801fa84
 801a098:	0801fb4c 	.word	0x0801fb4c
 801a09c:	0801facc 	.word	0x0801facc

0801a0a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b08c      	sub	sp, #48	; 0x30
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a0b0:	2301      	movs	r3, #1
 801a0b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a0ba:	69fb      	ldr	r3, [r7, #28]
 801a0bc:	885b      	ldrh	r3, [r3, #2]
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	f7f5 fc69 	bl	800f998 <lwip_htons>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a0ca:	69fb      	ldr	r3, [r7, #28]
 801a0cc:	781b      	ldrb	r3, [r3, #0]
 801a0ce:	f003 030f 	and.w	r3, r3, #15
 801a0d2:	b2db      	uxtb	r3, r3
 801a0d4:	009b      	lsls	r3, r3, #2
 801a0d6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a0d8:	7e7b      	ldrb	r3, [r7, #25]
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	8b7a      	ldrh	r2, [r7, #26]
 801a0de:	429a      	cmp	r2, r3
 801a0e0:	d202      	bcs.n	801a0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a0e6:	e135      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a0e8:	7e7b      	ldrb	r3, [r7, #25]
 801a0ea:	b29b      	uxth	r3, r3
 801a0ec:	8b7a      	ldrh	r2, [r7, #26]
 801a0ee:	1ad3      	subs	r3, r2, r3
 801a0f0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a0f2:	69fb      	ldr	r3, [r7, #28]
 801a0f4:	88db      	ldrh	r3, [r3, #6]
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7f5 fc4d 	bl	800f998 <lwip_htons>
 801a0fe:	4603      	mov	r3, r0
 801a100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a104:	b29b      	uxth	r3, r3
 801a106:	00db      	lsls	r3, r3, #3
 801a108:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	685b      	ldr	r3, [r3, #4]
 801a10e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a112:	2200      	movs	r2, #0
 801a114:	701a      	strb	r2, [r3, #0]
 801a116:	2200      	movs	r2, #0
 801a118:	705a      	strb	r2, [r3, #1]
 801a11a:	2200      	movs	r2, #0
 801a11c:	709a      	strb	r2, [r3, #2]
 801a11e:	2200      	movs	r2, #0
 801a120:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a124:	8afa      	ldrh	r2, [r7, #22]
 801a126:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a128:	8afa      	ldrh	r2, [r7, #22]
 801a12a:	8b7b      	ldrh	r3, [r7, #26]
 801a12c:	4413      	add	r3, r2
 801a12e:	b29a      	uxth	r2, r3
 801a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a132:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a136:	88db      	ldrh	r3, [r3, #6]
 801a138:	b29b      	uxth	r3, r3
 801a13a:	8afa      	ldrh	r2, [r7, #22]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d902      	bls.n	801a146 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a140:	f04f 33ff 	mov.w	r3, #4294967295
 801a144:	e106      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	685b      	ldr	r3, [r3, #4]
 801a14a:	627b      	str	r3, [r7, #36]	; 0x24
 801a14c:	e068      	b.n	801a220 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a150:	685b      	ldr	r3, [r3, #4]
 801a152:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a156:	889b      	ldrh	r3, [r3, #4]
 801a158:	b29a      	uxth	r2, r3
 801a15a:	693b      	ldr	r3, [r7, #16]
 801a15c:	889b      	ldrh	r3, [r3, #4]
 801a15e:	b29b      	uxth	r3, r3
 801a160:	429a      	cmp	r2, r3
 801a162:	d235      	bcs.n	801a1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a168:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d020      	beq.n	801a1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a172:	889b      	ldrh	r3, [r3, #4]
 801a174:	b29a      	uxth	r2, r3
 801a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a178:	88db      	ldrh	r3, [r3, #6]
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	429a      	cmp	r2, r3
 801a17e:	d307      	bcc.n	801a190 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a182:	88db      	ldrh	r3, [r3, #6]
 801a184:	b29a      	uxth	r2, r3
 801a186:	693b      	ldr	r3, [r7, #16]
 801a188:	889b      	ldrh	r3, [r3, #4]
 801a18a:	b29b      	uxth	r3, r3
 801a18c:	429a      	cmp	r2, r3
 801a18e:	d902      	bls.n	801a196 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a190:	f04f 33ff 	mov.w	r3, #4294967295
 801a194:	e0de      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a198:	68ba      	ldr	r2, [r7, #8]
 801a19a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a19e:	88db      	ldrh	r3, [r3, #6]
 801a1a0:	b29a      	uxth	r2, r3
 801a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1a4:	889b      	ldrh	r3, [r3, #4]
 801a1a6:	b29b      	uxth	r3, r3
 801a1a8:	429a      	cmp	r2, r3
 801a1aa:	d03d      	beq.n	801a228 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a1b0:	e03a      	b.n	801a228 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b4:	88db      	ldrh	r3, [r3, #6]
 801a1b6:	b29a      	uxth	r2, r3
 801a1b8:	693b      	ldr	r3, [r7, #16]
 801a1ba:	889b      	ldrh	r3, [r3, #4]
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	429a      	cmp	r2, r3
 801a1c0:	d902      	bls.n	801a1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1c2:	f04f 33ff 	mov.w	r3, #4294967295
 801a1c6:	e0c5      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	68ba      	ldr	r2, [r7, #8]
 801a1cc:	605a      	str	r2, [r3, #4]
      break;
 801a1ce:	e02b      	b.n	801a228 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d2:	889b      	ldrh	r3, [r3, #4]
 801a1d4:	b29a      	uxth	r2, r3
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	889b      	ldrh	r3, [r3, #4]
 801a1da:	b29b      	uxth	r3, r3
 801a1dc:	429a      	cmp	r2, r3
 801a1de:	d102      	bne.n	801a1e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a1e4:	e0b6      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e8:	889b      	ldrh	r3, [r3, #4]
 801a1ea:	b29a      	uxth	r2, r3
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	88db      	ldrh	r3, [r3, #6]
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	429a      	cmp	r2, r3
 801a1f4:	d202      	bcs.n	801a1fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1f6:	f04f 33ff 	mov.w	r3, #4294967295
 801a1fa:	e0ab      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d009      	beq.n	801a216 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a204:	88db      	ldrh	r3, [r3, #6]
 801a206:	b29a      	uxth	r2, r3
 801a208:	693b      	ldr	r3, [r7, #16]
 801a20a:	889b      	ldrh	r3, [r3, #4]
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	429a      	cmp	r2, r3
 801a210:	d001      	beq.n	801a216 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a212:	2300      	movs	r3, #0
 801a214:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a216:	693b      	ldr	r3, [r7, #16]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a222:	2b00      	cmp	r3, #0
 801a224:	d193      	bne.n	801a14e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a226:	e000      	b.n	801a22a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a228:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d12d      	bne.n	801a28c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a232:	2b00      	cmp	r3, #0
 801a234:	d01c      	beq.n	801a270 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a238:	88db      	ldrh	r3, [r3, #6]
 801a23a:	b29a      	uxth	r2, r3
 801a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a23e:	889b      	ldrh	r3, [r3, #4]
 801a240:	b29b      	uxth	r3, r3
 801a242:	429a      	cmp	r2, r3
 801a244:	d906      	bls.n	801a254 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a246:	4b45      	ldr	r3, [pc, #276]	; (801a35c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a248:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a24c:	4944      	ldr	r1, [pc, #272]	; (801a360 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a24e:	4845      	ldr	r0, [pc, #276]	; (801a364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a250:	f000 ff82 	bl	801b158 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a256:	68ba      	ldr	r2, [r7, #8]
 801a258:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a25c:	88db      	ldrh	r3, [r3, #6]
 801a25e:	b29a      	uxth	r2, r3
 801a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a262:	889b      	ldrh	r3, [r3, #4]
 801a264:	b29b      	uxth	r3, r3
 801a266:	429a      	cmp	r2, r3
 801a268:	d010      	beq.n	801a28c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a26a:	2300      	movs	r3, #0
 801a26c:	623b      	str	r3, [r7, #32]
 801a26e:	e00d      	b.n	801a28c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	685b      	ldr	r3, [r3, #4]
 801a274:	2b00      	cmp	r3, #0
 801a276:	d006      	beq.n	801a286 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a278:	4b38      	ldr	r3, [pc, #224]	; (801a35c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a27a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a27e:	493a      	ldr	r1, [pc, #232]	; (801a368 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a280:	4838      	ldr	r0, [pc, #224]	; (801a364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a282:	f000 ff69 	bl	801b158 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	68ba      	ldr	r2, [r7, #8]
 801a28a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d105      	bne.n	801a29e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	7f9b      	ldrb	r3, [r3, #30]
 801a296:	f003 0301 	and.w	r3, r3, #1
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d059      	beq.n	801a352 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a29e:	6a3b      	ldr	r3, [r7, #32]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d04f      	beq.n	801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d006      	beq.n	801a2ba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	685b      	ldr	r3, [r3, #4]
 801a2b0:	685b      	ldr	r3, [r3, #4]
 801a2b2:	889b      	ldrh	r3, [r3, #4]
 801a2b4:	b29b      	uxth	r3, r3
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d002      	beq.n	801a2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	623b      	str	r3, [r7, #32]
 801a2be:	e041      	b.n	801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a2ca:	e012      	b.n	801a2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d4:	88db      	ldrh	r3, [r3, #6]
 801a2d6:	b29a      	uxth	r2, r3
 801a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2da:	889b      	ldrh	r3, [r3, #4]
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	d002      	beq.n	801a2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	623b      	str	r3, [r7, #32]
            break;
 801a2e6:	e007      	b.n	801a2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d1e9      	bne.n	801a2cc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a2f8:	6a3b      	ldr	r3, [r7, #32]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d022      	beq.n	801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	685b      	ldr	r3, [r3, #4]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d106      	bne.n	801a314 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a306:	4b15      	ldr	r3, [pc, #84]	; (801a35c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a308:	f240 12df 	movw	r2, #479	; 0x1df
 801a30c:	4917      	ldr	r1, [pc, #92]	; (801a36c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a30e:	4815      	ldr	r0, [pc, #84]	; (801a364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a310:	f000 ff22 	bl	801b158 <iprintf>
          LWIP_ASSERT("sanity check",
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	685b      	ldr	r3, [r3, #4]
 801a318:	685b      	ldr	r3, [r3, #4]
 801a31a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a31c:	429a      	cmp	r2, r3
 801a31e:	d106      	bne.n	801a32e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a320:	4b0e      	ldr	r3, [pc, #56]	; (801a35c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a322:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a326:	4911      	ldr	r1, [pc, #68]	; (801a36c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a328:	480e      	ldr	r0, [pc, #56]	; (801a364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a32a:	f000 ff15 	bl	801b158 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d006      	beq.n	801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a336:	4b09      	ldr	r3, [pc, #36]	; (801a35c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a338:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a33c:	490c      	ldr	r1, [pc, #48]	; (801a370 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a33e:	4809      	ldr	r0, [pc, #36]	; (801a364 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a340:	f000 ff0a 	bl	801b158 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a344:	6a3b      	ldr	r3, [r7, #32]
 801a346:	2b00      	cmp	r3, #0
 801a348:	bf14      	ite	ne
 801a34a:	2301      	movne	r3, #1
 801a34c:	2300      	moveq	r3, #0
 801a34e:	b2db      	uxtb	r3, r3
 801a350:	e000      	b.n	801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a352:	2300      	movs	r3, #0
}
 801a354:	4618      	mov	r0, r3
 801a356:	3730      	adds	r7, #48	; 0x30
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}
 801a35c:	0801fa84 	.word	0x0801fa84
 801a360:	0801fb68 	.word	0x0801fb68
 801a364:	0801facc 	.word	0x0801facc
 801a368:	0801fb88 	.word	0x0801fb88
 801a36c:	0801fbc0 	.word	0x0801fbc0
 801a370:	0801fbd0 	.word	0x0801fbd0

0801a374 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b08e      	sub	sp, #56	; 0x38
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	685b      	ldr	r3, [r3, #4]
 801a380:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a384:	781b      	ldrb	r3, [r3, #0]
 801a386:	f003 030f 	and.w	r3, r3, #15
 801a38a:	b2db      	uxtb	r3, r3
 801a38c:	009b      	lsls	r3, r3, #2
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	2b14      	cmp	r3, #20
 801a392:	f040 8171 	bne.w	801a678 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a398:	88db      	ldrh	r3, [r3, #6]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	4618      	mov	r0, r3
 801a39e:	f7f5 fafb 	bl	800f998 <lwip_htons>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	00db      	lsls	r3, r3, #3
 801a3ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3b0:	885b      	ldrh	r3, [r3, #2]
 801a3b2:	b29b      	uxth	r3, r3
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f7f5 faef 	bl	800f998 <lwip_htons>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3c0:	781b      	ldrb	r3, [r3, #0]
 801a3c2:	f003 030f 	and.w	r3, r3, #15
 801a3c6:	b2db      	uxtb	r3, r3
 801a3c8:	009b      	lsls	r3, r3, #2
 801a3ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a3ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3d6:	429a      	cmp	r2, r3
 801a3d8:	f0c0 8150 	bcc.w	801a67c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a3dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3e0:	b29b      	uxth	r3, r3
 801a3e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3e4:	1ad3      	subs	r3, r2, r3
 801a3e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a3e8:	6878      	ldr	r0, [r7, #4]
 801a3ea:	f7f6 ff87 	bl	80112fc <pbuf_clen>
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a3f2:	4b8c      	ldr	r3, [pc, #560]	; (801a624 <ip4_reass+0x2b0>)
 801a3f4:	881b      	ldrh	r3, [r3, #0]
 801a3f6:	461a      	mov	r2, r3
 801a3f8:	8c3b      	ldrh	r3, [r7, #32]
 801a3fa:	4413      	add	r3, r2
 801a3fc:	2b0a      	cmp	r3, #10
 801a3fe:	dd10      	ble.n	801a422 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a400:	8c3b      	ldrh	r3, [r7, #32]
 801a402:	4619      	mov	r1, r3
 801a404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a406:	f7ff fd81 	bl	8019f0c <ip_reass_remove_oldest_datagram>
 801a40a:	4603      	mov	r3, r0
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	f000 8137 	beq.w	801a680 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a412:	4b84      	ldr	r3, [pc, #528]	; (801a624 <ip4_reass+0x2b0>)
 801a414:	881b      	ldrh	r3, [r3, #0]
 801a416:	461a      	mov	r2, r3
 801a418:	8c3b      	ldrh	r3, [r7, #32]
 801a41a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a41c:	2b0a      	cmp	r3, #10
 801a41e:	f300 812f 	bgt.w	801a680 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a422:	4b81      	ldr	r3, [pc, #516]	; (801a628 <ip4_reass+0x2b4>)
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	633b      	str	r3, [r7, #48]	; 0x30
 801a428:	e015      	b.n	801a456 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a42c:	695a      	ldr	r2, [r3, #20]
 801a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a430:	68db      	ldr	r3, [r3, #12]
 801a432:	429a      	cmp	r2, r3
 801a434:	d10c      	bne.n	801a450 <ip4_reass+0xdc>
 801a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a438:	699a      	ldr	r2, [r3, #24]
 801a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a43c:	691b      	ldr	r3, [r3, #16]
 801a43e:	429a      	cmp	r2, r3
 801a440:	d106      	bne.n	801a450 <ip4_reass+0xdc>
 801a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a444:	899a      	ldrh	r2, [r3, #12]
 801a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a448:	889b      	ldrh	r3, [r3, #4]
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	429a      	cmp	r2, r3
 801a44e:	d006      	beq.n	801a45e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	633b      	str	r3, [r7, #48]	; 0x30
 801a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d1e6      	bne.n	801a42a <ip4_reass+0xb6>
 801a45c:	e000      	b.n	801a460 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a45e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a462:	2b00      	cmp	r3, #0
 801a464:	d109      	bne.n	801a47a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a466:	8c3b      	ldrh	r3, [r7, #32]
 801a468:	4619      	mov	r1, r3
 801a46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a46c:	f7ff fdb0 	bl	8019fd0 <ip_reass_enqueue_new_datagram>
 801a470:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a474:	2b00      	cmp	r3, #0
 801a476:	d11c      	bne.n	801a4b2 <ip4_reass+0x13e>
      goto nullreturn;
 801a478:	e105      	b.n	801a686 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a47c:	88db      	ldrh	r3, [r3, #6]
 801a47e:	b29b      	uxth	r3, r3
 801a480:	4618      	mov	r0, r3
 801a482:	f7f5 fa89 	bl	800f998 <lwip_htons>
 801a486:	4603      	mov	r3, r0
 801a488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d110      	bne.n	801a4b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a492:	89db      	ldrh	r3, [r3, #14]
 801a494:	4618      	mov	r0, r3
 801a496:	f7f5 fa7f 	bl	800f998 <lwip_htons>
 801a49a:	4603      	mov	r3, r0
 801a49c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d006      	beq.n	801a4b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a6:	3308      	adds	r3, #8
 801a4a8:	2214      	movs	r2, #20
 801a4aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f001 f874 	bl	801b59a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4b4:	88db      	ldrh	r3, [r3, #6]
 801a4b6:	b29b      	uxth	r3, r3
 801a4b8:	f003 0320 	and.w	r3, r3, #32
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	bf0c      	ite	eq
 801a4c0:	2301      	moveq	r3, #1
 801a4c2:	2300      	movne	r3, #0
 801a4c4:	b2db      	uxtb	r3, r3
 801a4c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a4c8:	69fb      	ldr	r3, [r7, #28]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d00e      	beq.n	801a4ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a4ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a4d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4d2:	4413      	add	r3, r2
 801a4d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a4d6:	8b7a      	ldrh	r2, [r7, #26]
 801a4d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	f0c0 80a0 	bcc.w	801a620 <ip4_reass+0x2ac>
 801a4e0:	8b7b      	ldrh	r3, [r7, #26]
 801a4e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a4e6:	4293      	cmp	r3, r2
 801a4e8:	f200 809a 	bhi.w	801a620 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a4ec:	69fa      	ldr	r2, [r7, #28]
 801a4ee:	6879      	ldr	r1, [r7, #4]
 801a4f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4f2:	f7ff fdd5 	bl	801a0a0 <ip_reass_chain_frag_into_datagram_and_validate>
 801a4f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a4f8:	697b      	ldr	r3, [r7, #20]
 801a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4fe:	f000 809b 	beq.w	801a638 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a502:	4b48      	ldr	r3, [pc, #288]	; (801a624 <ip4_reass+0x2b0>)
 801a504:	881a      	ldrh	r2, [r3, #0]
 801a506:	8c3b      	ldrh	r3, [r7, #32]
 801a508:	4413      	add	r3, r2
 801a50a:	b29a      	uxth	r2, r3
 801a50c:	4b45      	ldr	r3, [pc, #276]	; (801a624 <ip4_reass+0x2b0>)
 801a50e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a510:	69fb      	ldr	r3, [r7, #28]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d00d      	beq.n	801a532 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a516:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a51a:	4413      	add	r3, r2
 801a51c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a520:	8a7a      	ldrh	r2, [r7, #18]
 801a522:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a526:	7f9b      	ldrb	r3, [r3, #30]
 801a528:	f043 0301 	orr.w	r3, r3, #1
 801a52c:	b2da      	uxtb	r2, r3
 801a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a530:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a532:	697b      	ldr	r3, [r7, #20]
 801a534:	2b01      	cmp	r3, #1
 801a536:	d171      	bne.n	801a61c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a53a:	8b9b      	ldrh	r3, [r3, #28]
 801a53c:	3314      	adds	r3, #20
 801a53e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a542:	685b      	ldr	r3, [r3, #4]
 801a544:	685b      	ldr	r3, [r3, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a54c:	685b      	ldr	r3, [r3, #4]
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a554:	3308      	adds	r3, #8
 801a556:	2214      	movs	r2, #20
 801a558:	4619      	mov	r1, r3
 801a55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a55c:	f001 f81d 	bl	801b59a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a560:	8a3b      	ldrh	r3, [r7, #16]
 801a562:	4618      	mov	r0, r3
 801a564:	f7f5 fa18 	bl	800f998 <lwip_htons>
 801a568:	4603      	mov	r3, r0
 801a56a:	461a      	mov	r2, r3
 801a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a56e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a572:	2200      	movs	r2, #0
 801a574:	719a      	strb	r2, [r3, #6]
 801a576:	2200      	movs	r2, #0
 801a578:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a57c:	2200      	movs	r2, #0
 801a57e:	729a      	strb	r2, [r3, #10]
 801a580:	2200      	movs	r2, #0
 801a582:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a586:	685b      	ldr	r3, [r3, #4]
 801a588:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a58a:	e00d      	b.n	801a5a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a592:	2114      	movs	r1, #20
 801a594:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a596:	f7f6 fd6b 	bl	8011070 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a59a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a59c:	6878      	ldr	r0, [r7, #4]
 801a59e:	f7f6 feed 	bl	801137c <pbuf_cat>
      r = iprh->next_pbuf;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d1ee      	bne.n	801a58c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a5ae:	4b1e      	ldr	r3, [pc, #120]	; (801a628 <ip4_reass+0x2b4>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	d102      	bne.n	801a5be <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5bc:	e010      	b.n	801a5e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a5be:	4b1a      	ldr	r3, [pc, #104]	; (801a628 <ip4_reass+0x2b4>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5c4:	e007      	b.n	801a5d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d006      	beq.n	801a5de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d1f4      	bne.n	801a5c6 <ip4_reass+0x252>
 801a5dc:	e000      	b.n	801a5e0 <ip4_reass+0x26c>
          break;
 801a5de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a5e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5e4:	f7ff fd2e 	bl	801a044 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f7f6 fe87 	bl	80112fc <pbuf_clen>
 801a5ee:	4603      	mov	r3, r0
 801a5f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a5f2:	4b0c      	ldr	r3, [pc, #48]	; (801a624 <ip4_reass+0x2b0>)
 801a5f4:	881b      	ldrh	r3, [r3, #0]
 801a5f6:	8c3a      	ldrh	r2, [r7, #32]
 801a5f8:	429a      	cmp	r2, r3
 801a5fa:	d906      	bls.n	801a60a <ip4_reass+0x296>
 801a5fc:	4b0b      	ldr	r3, [pc, #44]	; (801a62c <ip4_reass+0x2b8>)
 801a5fe:	f240 229b 	movw	r2, #667	; 0x29b
 801a602:	490b      	ldr	r1, [pc, #44]	; (801a630 <ip4_reass+0x2bc>)
 801a604:	480b      	ldr	r0, [pc, #44]	; (801a634 <ip4_reass+0x2c0>)
 801a606:	f000 fda7 	bl	801b158 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a60a:	4b06      	ldr	r3, [pc, #24]	; (801a624 <ip4_reass+0x2b0>)
 801a60c:	881a      	ldrh	r2, [r3, #0]
 801a60e:	8c3b      	ldrh	r3, [r7, #32]
 801a610:	1ad3      	subs	r3, r2, r3
 801a612:	b29a      	uxth	r2, r3
 801a614:	4b03      	ldr	r3, [pc, #12]	; (801a624 <ip4_reass+0x2b0>)
 801a616:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	e038      	b.n	801a68e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a61c:	2300      	movs	r3, #0
 801a61e:	e036      	b.n	801a68e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a620:	bf00      	nop
 801a622:	e00a      	b.n	801a63a <ip4_reass+0x2c6>
 801a624:	2003d234 	.word	0x2003d234
 801a628:	2003d230 	.word	0x2003d230
 801a62c:	0801fa84 	.word	0x0801fa84
 801a630:	0801fbf4 	.word	0x0801fbf4
 801a634:	0801facc 	.word	0x0801facc
    goto nullreturn_ipr;
 801a638:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d106      	bne.n	801a64e <ip4_reass+0x2da>
 801a640:	4b15      	ldr	r3, [pc, #84]	; (801a698 <ip4_reass+0x324>)
 801a642:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a646:	4915      	ldr	r1, [pc, #84]	; (801a69c <ip4_reass+0x328>)
 801a648:	4815      	ldr	r0, [pc, #84]	; (801a6a0 <ip4_reass+0x32c>)
 801a64a:	f000 fd85 	bl	801b158 <iprintf>
  if (ipr->p == NULL) {
 801a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	2b00      	cmp	r3, #0
 801a654:	d116      	bne.n	801a684 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a656:	4b13      	ldr	r3, [pc, #76]	; (801a6a4 <ip4_reass+0x330>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a65c:	429a      	cmp	r2, r3
 801a65e:	d006      	beq.n	801a66e <ip4_reass+0x2fa>
 801a660:	4b0d      	ldr	r3, [pc, #52]	; (801a698 <ip4_reass+0x324>)
 801a662:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a666:	4910      	ldr	r1, [pc, #64]	; (801a6a8 <ip4_reass+0x334>)
 801a668:	480d      	ldr	r0, [pc, #52]	; (801a6a0 <ip4_reass+0x32c>)
 801a66a:	f000 fd75 	bl	801b158 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a66e:	2100      	movs	r1, #0
 801a670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a672:	f7ff fce7 	bl	801a044 <ip_reass_dequeue_datagram>
 801a676:	e006      	b.n	801a686 <ip4_reass+0x312>
    goto nullreturn;
 801a678:	bf00      	nop
 801a67a:	e004      	b.n	801a686 <ip4_reass+0x312>
    goto nullreturn;
 801a67c:	bf00      	nop
 801a67e:	e002      	b.n	801a686 <ip4_reass+0x312>
      goto nullreturn;
 801a680:	bf00      	nop
 801a682:	e000      	b.n	801a686 <ip4_reass+0x312>
  }

nullreturn:
 801a684:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a686:	6878      	ldr	r0, [r7, #4]
 801a688:	f7f6 fdaa 	bl	80111e0 <pbuf_free>
  return NULL;
 801a68c:	2300      	movs	r3, #0
}
 801a68e:	4618      	mov	r0, r3
 801a690:	3738      	adds	r7, #56	; 0x38
 801a692:	46bd      	mov	sp, r7
 801a694:	bd80      	pop	{r7, pc}
 801a696:	bf00      	nop
 801a698:	0801fa84 	.word	0x0801fa84
 801a69c:	0801fc10 	.word	0x0801fc10
 801a6a0:	0801facc 	.word	0x0801facc
 801a6a4:	2003d230 	.word	0x2003d230
 801a6a8:	0801fc1c 	.word	0x0801fc1c

0801a6ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a6b0:	2005      	movs	r0, #5
 801a6b2:	f7f5 fe49 	bl	8010348 <memp_malloc>
 801a6b6:	4603      	mov	r3, r0
}
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b082      	sub	sp, #8
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d106      	bne.n	801a6d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a6ca:	4b07      	ldr	r3, [pc, #28]	; (801a6e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a6cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a6d0:	4906      	ldr	r1, [pc, #24]	; (801a6ec <ip_frag_free_pbuf_custom_ref+0x30>)
 801a6d2:	4807      	ldr	r0, [pc, #28]	; (801a6f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a6d4:	f000 fd40 	bl	801b158 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a6d8:	6879      	ldr	r1, [r7, #4]
 801a6da:	2005      	movs	r0, #5
 801a6dc:	f7f5 feaa 	bl	8010434 <memp_free>
}
 801a6e0:	bf00      	nop
 801a6e2:	3708      	adds	r7, #8
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}
 801a6e8:	0801fa84 	.word	0x0801fa84
 801a6ec:	0801fc3c 	.word	0x0801fc3c
 801a6f0:	0801facc 	.word	0x0801facc

0801a6f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b084      	sub	sp, #16
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d106      	bne.n	801a714 <ipfrag_free_pbuf_custom+0x20>
 801a706:	4b11      	ldr	r3, [pc, #68]	; (801a74c <ipfrag_free_pbuf_custom+0x58>)
 801a708:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a70c:	4910      	ldr	r1, [pc, #64]	; (801a750 <ipfrag_free_pbuf_custom+0x5c>)
 801a70e:	4811      	ldr	r0, [pc, #68]	; (801a754 <ipfrag_free_pbuf_custom+0x60>)
 801a710:	f000 fd22 	bl	801b158 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a714:	68fa      	ldr	r2, [r7, #12]
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	429a      	cmp	r2, r3
 801a71a:	d006      	beq.n	801a72a <ipfrag_free_pbuf_custom+0x36>
 801a71c:	4b0b      	ldr	r3, [pc, #44]	; (801a74c <ipfrag_free_pbuf_custom+0x58>)
 801a71e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a722:	490d      	ldr	r1, [pc, #52]	; (801a758 <ipfrag_free_pbuf_custom+0x64>)
 801a724:	480b      	ldr	r0, [pc, #44]	; (801a754 <ipfrag_free_pbuf_custom+0x60>)
 801a726:	f000 fd17 	bl	801b158 <iprintf>
  if (pcr->original != NULL) {
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	695b      	ldr	r3, [r3, #20]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d004      	beq.n	801a73c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	695b      	ldr	r3, [r3, #20]
 801a736:	4618      	mov	r0, r3
 801a738:	f7f6 fd52 	bl	80111e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a73c:	68f8      	ldr	r0, [r7, #12]
 801a73e:	f7ff ffbd 	bl	801a6bc <ip_frag_free_pbuf_custom_ref>
}
 801a742:	bf00      	nop
 801a744:	3710      	adds	r7, #16
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}
 801a74a:	bf00      	nop
 801a74c:	0801fa84 	.word	0x0801fa84
 801a750:	0801fc48 	.word	0x0801fc48
 801a754:	0801facc 	.word	0x0801facc
 801a758:	0801fc54 	.word	0x0801fc54

0801a75c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b094      	sub	sp, #80	; 0x50
 801a760:	af02      	add	r7, sp, #8
 801a762:	60f8      	str	r0, [r7, #12]
 801a764:	60b9      	str	r1, [r7, #8]
 801a766:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a768:	2300      	movs	r3, #0
 801a76a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a76e:	68bb      	ldr	r3, [r7, #8]
 801a770:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a772:	3b14      	subs	r3, #20
 801a774:	2b00      	cmp	r3, #0
 801a776:	da00      	bge.n	801a77a <ip4_frag+0x1e>
 801a778:	3307      	adds	r3, #7
 801a77a:	10db      	asrs	r3, r3, #3
 801a77c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a77e:	2314      	movs	r3, #20
 801a780:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	685b      	ldr	r3, [r3, #4]
 801a786:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a78a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a78e:	781b      	ldrb	r3, [r3, #0]
 801a790:	f003 030f 	and.w	r3, r3, #15
 801a794:	b2db      	uxtb	r3, r3
 801a796:	009b      	lsls	r3, r3, #2
 801a798:	b2db      	uxtb	r3, r3
 801a79a:	2b14      	cmp	r3, #20
 801a79c:	d002      	beq.n	801a7a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a79e:	f06f 0305 	mvn.w	r3, #5
 801a7a2:	e110      	b.n	801a9c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	895b      	ldrh	r3, [r3, #10]
 801a7a8:	2b13      	cmp	r3, #19
 801a7aa:	d809      	bhi.n	801a7c0 <ip4_frag+0x64>
 801a7ac:	4b88      	ldr	r3, [pc, #544]	; (801a9d0 <ip4_frag+0x274>)
 801a7ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a7b2:	4988      	ldr	r1, [pc, #544]	; (801a9d4 <ip4_frag+0x278>)
 801a7b4:	4888      	ldr	r0, [pc, #544]	; (801a9d8 <ip4_frag+0x27c>)
 801a7b6:	f000 fccf 	bl	801b158 <iprintf>
 801a7ba:	f06f 0305 	mvn.w	r3, #5
 801a7be:	e102      	b.n	801a9c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7c2:	88db      	ldrh	r3, [r3, #6]
 801a7c4:	b29b      	uxth	r3, r3
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7f5 f8e6 	bl	800f998 <lwip_htons>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a7d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a7d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a7da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a7dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	891b      	ldrh	r3, [r3, #8]
 801a7e6:	3b14      	subs	r3, #20
 801a7e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a7ec:	e0e1      	b.n	801a9b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a7ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a7f0:	00db      	lsls	r3, r3, #3
 801a7f2:	b29b      	uxth	r3, r3
 801a7f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a7f8:	4293      	cmp	r3, r2
 801a7fa:	bf28      	it	cs
 801a7fc:	4613      	movcs	r3, r2
 801a7fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a800:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a804:	2114      	movs	r1, #20
 801a806:	200e      	movs	r0, #14
 801a808:	f7f6 f9d4 	bl	8010bb4 <pbuf_alloc>
 801a80c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a810:	2b00      	cmp	r3, #0
 801a812:	f000 80d5 	beq.w	801a9c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a818:	895b      	ldrh	r3, [r3, #10]
 801a81a:	2b13      	cmp	r3, #19
 801a81c:	d806      	bhi.n	801a82c <ip4_frag+0xd0>
 801a81e:	4b6c      	ldr	r3, [pc, #432]	; (801a9d0 <ip4_frag+0x274>)
 801a820:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a824:	496d      	ldr	r1, [pc, #436]	; (801a9dc <ip4_frag+0x280>)
 801a826:	486c      	ldr	r0, [pc, #432]	; (801a9d8 <ip4_frag+0x27c>)
 801a828:	f000 fc96 	bl	801b158 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	2214      	movs	r2, #20
 801a832:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a834:	4618      	mov	r0, r3
 801a836:	f000 feb0 	bl	801b59a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a83c:	685b      	ldr	r3, [r3, #4]
 801a83e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a840:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a842:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a846:	e064      	b.n	801a912 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	895a      	ldrh	r2, [r3, #10]
 801a84c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a84e:	1ad3      	subs	r3, r2, r3
 801a850:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	895b      	ldrh	r3, [r3, #10]
 801a856:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a858:	429a      	cmp	r2, r3
 801a85a:	d906      	bls.n	801a86a <ip4_frag+0x10e>
 801a85c:	4b5c      	ldr	r3, [pc, #368]	; (801a9d0 <ip4_frag+0x274>)
 801a85e:	f240 322d 	movw	r2, #813	; 0x32d
 801a862:	495f      	ldr	r1, [pc, #380]	; (801a9e0 <ip4_frag+0x284>)
 801a864:	485c      	ldr	r0, [pc, #368]	; (801a9d8 <ip4_frag+0x27c>)
 801a866:	f000 fc77 	bl	801b158 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a86a:	8bfa      	ldrh	r2, [r7, #30]
 801a86c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a870:	4293      	cmp	r3, r2
 801a872:	bf28      	it	cs
 801a874:	4613      	movcs	r3, r2
 801a876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a87a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d105      	bne.n	801a88e <ip4_frag+0x132>
        poff = 0;
 801a882:	2300      	movs	r3, #0
 801a884:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	60fb      	str	r3, [r7, #12]
        continue;
 801a88c:	e041      	b.n	801a912 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a88e:	f7ff ff0d 	bl	801a6ac <ip_frag_alloc_pbuf_custom_ref>
 801a892:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a894:	69bb      	ldr	r3, [r7, #24]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d103      	bne.n	801a8a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a89a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a89c:	f7f6 fca0 	bl	80111e0 <pbuf_free>
        goto memerr;
 801a8a0:	e08f      	b.n	801a9c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a8a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a8a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a8aa:	4413      	add	r3, r2
 801a8ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a8b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a8b4:	9201      	str	r2, [sp, #4]
 801a8b6:	9300      	str	r3, [sp, #0]
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	2241      	movs	r2, #65	; 0x41
 801a8bc:	2000      	movs	r0, #0
 801a8be:	f7f6 faa3 	bl	8010e08 <pbuf_alloced_custom>
 801a8c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a8c4:	697b      	ldr	r3, [r7, #20]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d106      	bne.n	801a8d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a8ca:	69b8      	ldr	r0, [r7, #24]
 801a8cc:	f7ff fef6 	bl	801a6bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a8d2:	f7f6 fc85 	bl	80111e0 <pbuf_free>
        goto memerr;
 801a8d6:	e074      	b.n	801a9c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a8d8:	68f8      	ldr	r0, [r7, #12]
 801a8da:	f7f6 fd27 	bl	801132c <pbuf_ref>
      pcr->original = p;
 801a8de:	69bb      	ldr	r3, [r7, #24]
 801a8e0:	68fa      	ldr	r2, [r7, #12]
 801a8e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a8e4:	69bb      	ldr	r3, [r7, #24]
 801a8e6:	4a3f      	ldr	r2, [pc, #252]	; (801a9e4 <ip4_frag+0x288>)
 801a8e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a8ea:	6979      	ldr	r1, [r7, #20]
 801a8ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a8ee:	f7f6 fd45 	bl	801137c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a8f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a8f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8fa:	1ad3      	subs	r3, r2, r3
 801a8fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a904:	2b00      	cmp	r3, #0
 801a906:	d004      	beq.n	801a912 <ip4_frag+0x1b6>
        poff = 0;
 801a908:	2300      	movs	r3, #0
 801a90a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a912:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a916:	2b00      	cmp	r3, #0
 801a918:	d196      	bne.n	801a848 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a91a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a91c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a920:	4413      	add	r3, r2
 801a922:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a924:	68bb      	ldr	r3, [r7, #8]
 801a926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a928:	f1a3 0213 	sub.w	r2, r3, #19
 801a92c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a930:	429a      	cmp	r2, r3
 801a932:	bfcc      	ite	gt
 801a934:	2301      	movgt	r3, #1
 801a936:	2300      	movle	r3, #0
 801a938:	b2db      	uxtb	r3, r3
 801a93a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a93c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a944:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a946:	6a3b      	ldr	r3, [r7, #32]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d002      	beq.n	801a952 <ip4_frag+0x1f6>
 801a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d003      	beq.n	801a95a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a952:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a958:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a95a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a95c:	4618      	mov	r0, r3
 801a95e:	f7f5 f81b 	bl	800f998 <lwip_htons>
 801a962:	4603      	mov	r3, r0
 801a964:	461a      	mov	r2, r3
 801a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a968:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a96a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a96c:	3314      	adds	r3, #20
 801a96e:	b29b      	uxth	r3, r3
 801a970:	4618      	mov	r0, r3
 801a972:	f7f5 f811 	bl	800f998 <lwip_htons>
 801a976:	4603      	mov	r3, r0
 801a978:	461a      	mov	r2, r3
 801a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a97c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a980:	2200      	movs	r2, #0
 801a982:	729a      	strb	r2, [r3, #10]
 801a984:	2200      	movs	r2, #0
 801a986:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	695b      	ldr	r3, [r3, #20]
 801a98c:	687a      	ldr	r2, [r7, #4]
 801a98e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a990:	68b8      	ldr	r0, [r7, #8]
 801a992:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a996:	f7f6 fc23 	bl	80111e0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a99a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a99e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a9a0:	1ad3      	subs	r3, r2, r3
 801a9a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a9a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a9aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a9ac:	4413      	add	r3, r2
 801a9ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a9b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	f47f af19 	bne.w	801a7ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a9bc:	2300      	movs	r3, #0
 801a9be:	e002      	b.n	801a9c6 <ip4_frag+0x26a>
      goto memerr;
 801a9c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a9c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	3748      	adds	r7, #72	; 0x48
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	bd80      	pop	{r7, pc}
 801a9ce:	bf00      	nop
 801a9d0:	0801fa84 	.word	0x0801fa84
 801a9d4:	0801fc60 	.word	0x0801fc60
 801a9d8:	0801facc 	.word	0x0801facc
 801a9dc:	0801fc7c 	.word	0x0801fc7c
 801a9e0:	0801fc9c 	.word	0x0801fc9c
 801a9e4:	0801a6f5 	.word	0x0801a6f5

0801a9e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b086      	sub	sp, #24
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
 801a9f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a9f2:	230e      	movs	r3, #14
 801a9f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	895b      	ldrh	r3, [r3, #10]
 801a9fa:	2b0e      	cmp	r3, #14
 801a9fc:	d96e      	bls.n	801aadc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	7bdb      	ldrb	r3, [r3, #15]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d106      	bne.n	801aa14 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801aa06:	683b      	ldr	r3, [r7, #0]
 801aa08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	b2da      	uxtb	r2, r3
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	685b      	ldr	r3, [r3, #4]
 801aa18:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	7b1a      	ldrb	r2, [r3, #12]
 801aa1e:	7b5b      	ldrb	r3, [r3, #13]
 801aa20:	021b      	lsls	r3, r3, #8
 801aa22:	4313      	orrs	r3, r2
 801aa24:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801aa26:	693b      	ldr	r3, [r7, #16]
 801aa28:	781b      	ldrb	r3, [r3, #0]
 801aa2a:	f003 0301 	and.w	r3, r3, #1
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d023      	beq.n	801aa7a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801aa32:	693b      	ldr	r3, [r7, #16]
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d10f      	bne.n	801aa5a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aa3a:	693b      	ldr	r3, [r7, #16]
 801aa3c:	785b      	ldrb	r3, [r3, #1]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d11b      	bne.n	801aa7a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aa42:	693b      	ldr	r3, [r7, #16]
 801aa44:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aa46:	2b5e      	cmp	r3, #94	; 0x5e
 801aa48:	d117      	bne.n	801aa7a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	7b5b      	ldrb	r3, [r3, #13]
 801aa4e:	f043 0310 	orr.w	r3, r3, #16
 801aa52:	b2da      	uxtb	r2, r3
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	735a      	strb	r2, [r3, #13]
 801aa58:	e00f      	b.n	801aa7a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	2206      	movs	r2, #6
 801aa5e:	4928      	ldr	r1, [pc, #160]	; (801ab00 <ethernet_input+0x118>)
 801aa60:	4618      	mov	r0, r3
 801aa62:	f000 fcbf 	bl	801b3e4 <memcmp>
 801aa66:	4603      	mov	r3, r0
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d106      	bne.n	801aa7a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	7b5b      	ldrb	r3, [r3, #13]
 801aa70:	f043 0308 	orr.w	r3, r3, #8
 801aa74:	b2da      	uxtb	r2, r3
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801aa7a:	89fb      	ldrh	r3, [r7, #14]
 801aa7c:	2b08      	cmp	r3, #8
 801aa7e:	d003      	beq.n	801aa88 <ethernet_input+0xa0>
 801aa80:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801aa84:	d014      	beq.n	801aab0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aa86:	e032      	b.n	801aaee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aa8e:	f003 0308 	and.w	r3, r3, #8
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d024      	beq.n	801aae0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aa96:	8afb      	ldrh	r3, [r7, #22]
 801aa98:	4619      	mov	r1, r3
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	f7f6 fae8 	bl	8011070 <pbuf_remove_header>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d11e      	bne.n	801aae4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801aaa6:	6839      	ldr	r1, [r7, #0]
 801aaa8:	6878      	ldr	r0, [r7, #4]
 801aaaa:	f7fe fea1 	bl	80197f0 <ip4_input>
      break;
 801aaae:	e013      	b.n	801aad8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aab0:	683b      	ldr	r3, [r7, #0]
 801aab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aab6:	f003 0308 	and.w	r3, r3, #8
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d014      	beq.n	801aae8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aabe:	8afb      	ldrh	r3, [r7, #22]
 801aac0:	4619      	mov	r1, r3
 801aac2:	6878      	ldr	r0, [r7, #4]
 801aac4:	f7f6 fad4 	bl	8011070 <pbuf_remove_header>
 801aac8:	4603      	mov	r3, r0
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d10e      	bne.n	801aaec <ethernet_input+0x104>
        etharp_input(p, netif);
 801aace:	6839      	ldr	r1, [r7, #0]
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	f7fe f841 	bl	8018b58 <etharp_input>
      break;
 801aad6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801aad8:	2300      	movs	r3, #0
 801aada:	e00c      	b.n	801aaf6 <ethernet_input+0x10e>
    goto free_and_return;
 801aadc:	bf00      	nop
 801aade:	e006      	b.n	801aaee <ethernet_input+0x106>
        goto free_and_return;
 801aae0:	bf00      	nop
 801aae2:	e004      	b.n	801aaee <ethernet_input+0x106>
        goto free_and_return;
 801aae4:	bf00      	nop
 801aae6:	e002      	b.n	801aaee <ethernet_input+0x106>
        goto free_and_return;
 801aae8:	bf00      	nop
 801aaea:	e000      	b.n	801aaee <ethernet_input+0x106>
        goto free_and_return;
 801aaec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801aaee:	6878      	ldr	r0, [r7, #4]
 801aaf0:	f7f6 fb76 	bl	80111e0 <pbuf_free>
  return ERR_OK;
 801aaf4:	2300      	movs	r3, #0
}
 801aaf6:	4618      	mov	r0, r3
 801aaf8:	3718      	adds	r7, #24
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}
 801aafe:	bf00      	nop
 801ab00:	0801fec8 	.word	0x0801fec8

0801ab04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b086      	sub	sp, #24
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	60f8      	str	r0, [r7, #12]
 801ab0c:	60b9      	str	r1, [r7, #8]
 801ab0e:	607a      	str	r2, [r7, #4]
 801ab10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ab12:	8c3b      	ldrh	r3, [r7, #32]
 801ab14:	4618      	mov	r0, r3
 801ab16:	f7f4 ff3f 	bl	800f998 <lwip_htons>
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ab1e:	210e      	movs	r1, #14
 801ab20:	68b8      	ldr	r0, [r7, #8]
 801ab22:	f7f6 fa95 	bl	8011050 <pbuf_add_header>
 801ab26:	4603      	mov	r3, r0
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d125      	bne.n	801ab78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	685b      	ldr	r3, [r3, #4]
 801ab30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ab32:	693b      	ldr	r3, [r7, #16]
 801ab34:	8afa      	ldrh	r2, [r7, #22]
 801ab36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	2206      	movs	r2, #6
 801ab3c:	6839      	ldr	r1, [r7, #0]
 801ab3e:	4618      	mov	r0, r3
 801ab40:	f000 fd2b 	bl	801b59a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ab44:	693b      	ldr	r3, [r7, #16]
 801ab46:	3306      	adds	r3, #6
 801ab48:	2206      	movs	r2, #6
 801ab4a:	6879      	ldr	r1, [r7, #4]
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f000 fd24 	bl	801b59a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ab58:	2b06      	cmp	r3, #6
 801ab5a:	d006      	beq.n	801ab6a <ethernet_output+0x66>
 801ab5c:	4b0a      	ldr	r3, [pc, #40]	; (801ab88 <ethernet_output+0x84>)
 801ab5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ab62:	490a      	ldr	r1, [pc, #40]	; (801ab8c <ethernet_output+0x88>)
 801ab64:	480a      	ldr	r0, [pc, #40]	; (801ab90 <ethernet_output+0x8c>)
 801ab66:	f000 faf7 	bl	801b158 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	699b      	ldr	r3, [r3, #24]
 801ab6e:	68b9      	ldr	r1, [r7, #8]
 801ab70:	68f8      	ldr	r0, [r7, #12]
 801ab72:	4798      	blx	r3
 801ab74:	4603      	mov	r3, r0
 801ab76:	e002      	b.n	801ab7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ab78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ab7a:	f06f 0301 	mvn.w	r3, #1
}
 801ab7e:	4618      	mov	r0, r3
 801ab80:	3718      	adds	r7, #24
 801ab82:	46bd      	mov	sp, r7
 801ab84:	bd80      	pop	{r7, pc}
 801ab86:	bf00      	nop
 801ab88:	0801fcac 	.word	0x0801fcac
 801ab8c:	0801fce4 	.word	0x0801fce4
 801ab90:	0801fd18 	.word	0x0801fd18

0801ab94 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b086      	sub	sp, #24
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
 801ab9c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	60bb      	str	r3, [r7, #8]
 801aba2:	2304      	movs	r3, #4
 801aba4:	60fb      	str	r3, [r7, #12]
 801aba6:	2300      	movs	r3, #0
 801aba8:	613b      	str	r3, [r7, #16]
 801abaa:	2300      	movs	r3, #0
 801abac:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801abae:	f107 0308 	add.w	r3, r7, #8
 801abb2:	2100      	movs	r1, #0
 801abb4:	4618      	mov	r0, r3
 801abb6:	f7ee f868 	bl	8008c8a <osMessageCreate>
 801abba:	4602      	mov	r2, r0
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d102      	bne.n	801abce <sys_mbox_new+0x3a>
    return ERR_MEM;
 801abc8:	f04f 33ff 	mov.w	r3, #4294967295
 801abcc:	e000      	b.n	801abd0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801abce:	2300      	movs	r3, #0
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	3718      	adds	r7, #24
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}

0801abd8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b082      	sub	sp, #8
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	4618      	mov	r0, r3
 801abe6:	f7ee f92d 	bl	8008e44 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	4618      	mov	r0, r3
 801abf0:	f7ee f93e 	bl	8008e70 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801abf4:	bf00      	nop
 801abf6:	3708      	adds	r7, #8
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}

0801abfc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b084      	sub	sp, #16
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
 801ac04:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	6839      	ldr	r1, [r7, #0]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f7ee f864 	bl	8008cdc <osMessagePut>
 801ac14:	4603      	mov	r3, r0
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d102      	bne.n	801ac20 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	73fb      	strb	r3, [r7, #15]
 801ac1e:	e001      	b.n	801ac24 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ac20:	23ff      	movs	r3, #255	; 0xff
 801ac22:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ac24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	3710      	adds	r7, #16
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd80      	pop	{r7, pc}

0801ac30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b08c      	sub	sp, #48	; 0x30
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	61f8      	str	r0, [r7, #28]
 801ac38:	61b9      	str	r1, [r7, #24]
 801ac3a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ac3c:	f7ed fe43 	bl	80088c6 <osKernelSysTick>
 801ac40:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ac42:	697b      	ldr	r3, [r7, #20]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d017      	beq.n	801ac78 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ac48:	69fb      	ldr	r3, [r7, #28]
 801ac4a:	6819      	ldr	r1, [r3, #0]
 801ac4c:	f107 0320 	add.w	r3, r7, #32
 801ac50:	697a      	ldr	r2, [r7, #20]
 801ac52:	4618      	mov	r0, r3
 801ac54:	f7ee f882 	bl	8008d5c <osMessageGet>

    if(event.status == osEventMessage)
 801ac58:	6a3b      	ldr	r3, [r7, #32]
 801ac5a:	2b10      	cmp	r3, #16
 801ac5c:	d109      	bne.n	801ac72 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac60:	461a      	mov	r2, r3
 801ac62:	69bb      	ldr	r3, [r7, #24]
 801ac64:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ac66:	f7ed fe2e 	bl	80088c6 <osKernelSysTick>
 801ac6a:	4602      	mov	r2, r0
 801ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac6e:	1ad3      	subs	r3, r2, r3
 801ac70:	e019      	b.n	801aca6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ac72:	f04f 33ff 	mov.w	r3, #4294967295
 801ac76:	e016      	b.n	801aca6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ac78:	69fb      	ldr	r3, [r7, #28]
 801ac7a:	6819      	ldr	r1, [r3, #0]
 801ac7c:	463b      	mov	r3, r7
 801ac7e:	f04f 32ff 	mov.w	r2, #4294967295
 801ac82:	4618      	mov	r0, r3
 801ac84:	f7ee f86a 	bl	8008d5c <osMessageGet>
 801ac88:	f107 0320 	add.w	r3, r7, #32
 801ac8c:	463a      	mov	r2, r7
 801ac8e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ac90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac96:	461a      	mov	r2, r3
 801ac98:	69bb      	ldr	r3, [r7, #24]
 801ac9a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ac9c:	f7ed fe13 	bl	80088c6 <osKernelSysTick>
 801aca0:	4602      	mov	r2, r0
 801aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aca4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	3730      	adds	r7, #48	; 0x30
 801acaa:	46bd      	mov	sp, r7
 801acac:	bd80      	pop	{r7, pc}

0801acae <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801acae:	b580      	push	{r7, lr}
 801acb0:	b086      	sub	sp, #24
 801acb2:	af00      	add	r7, sp, #0
 801acb4:	6078      	str	r0, [r7, #4]
 801acb6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	6819      	ldr	r1, [r3, #0]
 801acbc:	f107 030c 	add.w	r3, r7, #12
 801acc0:	2200      	movs	r2, #0
 801acc2:	4618      	mov	r0, r3
 801acc4:	f7ee f84a 	bl	8008d5c <osMessageGet>

  if(event.status == osEventMessage)
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	2b10      	cmp	r3, #16
 801accc:	d105      	bne.n	801acda <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801acce:	693b      	ldr	r3, [r7, #16]
 801acd0:	461a      	mov	r2, r3
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801acd6:	2300      	movs	r3, #0
 801acd8:	e001      	b.n	801acde <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801acda:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801acde:	4618      	mov	r0, r3
 801ace0:	3718      	adds	r7, #24
 801ace2:	46bd      	mov	sp, r7
 801ace4:	bd80      	pop	{r7, pc}

0801ace6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ace6:	b480      	push	{r7}
 801ace8:	b083      	sub	sp, #12
 801acea:	af00      	add	r7, sp, #0
 801acec:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d101      	bne.n	801acfa <sys_mbox_valid+0x14>
    return 0;
 801acf6:	2300      	movs	r3, #0
 801acf8:	e000      	b.n	801acfc <sys_mbox_valid+0x16>
  else
    return 1;
 801acfa:	2301      	movs	r3, #1
}
 801acfc:	4618      	mov	r0, r3
 801acfe:	370c      	adds	r7, #12
 801ad00:	46bd      	mov	sp, r7
 801ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad06:	4770      	bx	lr

0801ad08 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ad08:	b480      	push	{r7}
 801ad0a:	b083      	sub	sp, #12
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	2200      	movs	r2, #0
 801ad14:	601a      	str	r2, [r3, #0]
}
 801ad16:	bf00      	nop
 801ad18:	370c      	adds	r7, #12
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad20:	4770      	bx	lr

0801ad22 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ad22:	b580      	push	{r7, lr}
 801ad24:	b084      	sub	sp, #16
 801ad26:	af00      	add	r7, sp, #0
 801ad28:	6078      	str	r0, [r7, #4]
 801ad2a:	460b      	mov	r3, r1
 801ad2c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801ad2e:	2300      	movs	r3, #0
 801ad30:	60bb      	str	r3, [r7, #8]
 801ad32:	2300      	movs	r3, #0
 801ad34:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801ad36:	f107 0308 	add.w	r3, r7, #8
 801ad3a:	2101      	movs	r1, #1
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	f7ed fedb 	bl	8008af8 <osSemaphoreCreate>
 801ad42:	4602      	mov	r2, r0
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d102      	bne.n	801ad56 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ad50:	f04f 33ff 	mov.w	r3, #4294967295
 801ad54:	e009      	b.n	801ad6a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801ad56:	78fb      	ldrb	r3, [r7, #3]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d105      	bne.n	801ad68 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	2100      	movs	r1, #0
 801ad62:	4618      	mov	r0, r3
 801ad64:	f7ed fefa 	bl	8008b5c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ad68:	2300      	movs	r3, #0
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3710      	adds	r7, #16
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}

0801ad72 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ad72:	b580      	push	{r7, lr}
 801ad74:	b084      	sub	sp, #16
 801ad76:	af00      	add	r7, sp, #0
 801ad78:	6078      	str	r0, [r7, #4]
 801ad7a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801ad7c:	f7ed fda3 	bl	80088c6 <osKernelSysTick>
 801ad80:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d011      	beq.n	801adac <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	6839      	ldr	r1, [r7, #0]
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7ed fee4 	bl	8008b5c <osSemaphoreWait>
 801ad94:	4603      	mov	r3, r0
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d105      	bne.n	801ada6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801ad9a:	f7ed fd94 	bl	80088c6 <osKernelSysTick>
 801ad9e:	4602      	mov	r2, r0
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	1ad3      	subs	r3, r2, r3
 801ada4:	e012      	b.n	801adcc <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ada6:	f04f 33ff 	mov.w	r3, #4294967295
 801adaa:	e00f      	b.n	801adcc <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801adac:	bf00      	nop
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	f04f 31ff 	mov.w	r1, #4294967295
 801adb6:	4618      	mov	r0, r3
 801adb8:	f7ed fed0 	bl	8008b5c <osSemaphoreWait>
 801adbc:	4603      	mov	r3, r0
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d1f5      	bne.n	801adae <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801adc2:	f7ed fd80 	bl	80088c6 <osKernelSysTick>
 801adc6:	4602      	mov	r2, r0
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801adcc:	4618      	mov	r0, r3
 801adce:	3710      	adds	r7, #16
 801add0:	46bd      	mov	sp, r7
 801add2:	bd80      	pop	{r7, pc}

0801add4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b082      	sub	sp, #8
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	4618      	mov	r0, r3
 801ade2:	f7ed ff09 	bl	8008bf8 <osSemaphoreRelease>
}
 801ade6:	bf00      	nop
 801ade8:	3708      	adds	r7, #8
 801adea:	46bd      	mov	sp, r7
 801adec:	bd80      	pop	{r7, pc}

0801adee <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801adee:	b580      	push	{r7, lr}
 801adf0:	b082      	sub	sp, #8
 801adf2:	af00      	add	r7, sp, #0
 801adf4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7ed ff32 	bl	8008c64 <osSemaphoreDelete>
}
 801ae00:	bf00      	nop
 801ae02:	3708      	adds	r7, #8
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bd80      	pop	{r7, pc}

0801ae08 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ae08:	b480      	push	{r7}
 801ae0a:	b083      	sub	sp, #12
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d101      	bne.n	801ae1c <sys_sem_valid+0x14>
    return 0;
 801ae18:	2300      	movs	r3, #0
 801ae1a:	e000      	b.n	801ae1e <sys_sem_valid+0x16>
  else
    return 1;
 801ae1c:	2301      	movs	r3, #1
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	370c      	adds	r7, #12
 801ae22:	46bd      	mov	sp, r7
 801ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae28:	4770      	bx	lr

0801ae2a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ae2a:	b480      	push	{r7}
 801ae2c:	b083      	sub	sp, #12
 801ae2e:	af00      	add	r7, sp, #0
 801ae30:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2200      	movs	r2, #0
 801ae36:	601a      	str	r2, [r3, #0]
}
 801ae38:	bf00      	nop
 801ae3a:	370c      	adds	r7, #12
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae42:	4770      	bx	lr

0801ae44 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ae48:	4803      	ldr	r0, [pc, #12]	; (801ae58 <sys_init+0x14>)
 801ae4a:	f7ed fdb8 	bl	80089be <osMutexCreate>
 801ae4e:	4603      	mov	r3, r0
 801ae50:	4a02      	ldr	r2, [pc, #8]	; (801ae5c <sys_init+0x18>)
 801ae52:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ae54:	bf00      	nop
 801ae56:	bd80      	pop	{r7, pc}
 801ae58:	0801fed8 	.word	0x0801fed8
 801ae5c:	2003d238 	.word	0x2003d238

0801ae60 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b084      	sub	sp, #16
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801ae68:	2300      	movs	r3, #0
 801ae6a:	60bb      	str	r3, [r7, #8]
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ae70:	f107 0308 	add.w	r3, r7, #8
 801ae74:	4618      	mov	r0, r3
 801ae76:	f7ed fda2 	bl	80089be <osMutexCreate>
 801ae7a:	4602      	mov	r2, r0
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d102      	bne.n	801ae8e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ae88:	f04f 33ff 	mov.w	r3, #4294967295
 801ae8c:	e000      	b.n	801ae90 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ae8e:	2300      	movs	r3, #0
}
 801ae90:	4618      	mov	r0, r3
 801ae92:	3710      	adds	r7, #16
 801ae94:	46bd      	mov	sp, r7
 801ae96:	bd80      	pop	{r7, pc}

0801ae98 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b082      	sub	sp, #8
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f04f 31ff 	mov.w	r1, #4294967295
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f7ed fda1 	bl	80089f0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801aeae:	bf00      	nop
 801aeb0:	3708      	adds	r7, #8
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}

0801aeb6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801aeb6:	b580      	push	{r7, lr}
 801aeb8:	b082      	sub	sp, #8
 801aeba:	af00      	add	r7, sp, #0
 801aebc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	4618      	mov	r0, r3
 801aec4:	f7ed fde2 	bl	8008a8c <osMutexRelease>
}
 801aec8:	bf00      	nop
 801aeca:	3708      	adds	r7, #8
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}

0801aed0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b08c      	sub	sp, #48	; 0x30
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	60f8      	str	r0, [r7, #12]
 801aed8:	60b9      	str	r1, [r7, #8]
 801aeda:	607a      	str	r2, [r7, #4]
 801aedc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801aede:	f107 0314 	add.w	r3, r7, #20
 801aee2:	2200      	movs	r2, #0
 801aee4:	601a      	str	r2, [r3, #0]
 801aee6:	605a      	str	r2, [r3, #4]
 801aee8:	609a      	str	r2, [r3, #8]
 801aeea:	60da      	str	r2, [r3, #12]
 801aeec:	611a      	str	r2, [r3, #16]
 801aeee:	615a      	str	r2, [r3, #20]
 801aef0:	619a      	str	r2, [r3, #24]
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	617b      	str	r3, [r7, #20]
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	61bb      	str	r3, [r7, #24]
 801aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aefc:	b21b      	sxth	r3, r3
 801aefe:	83bb      	strh	r3, [r7, #28]
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801af04:	f107 0314 	add.w	r3, r7, #20
 801af08:	6879      	ldr	r1, [r7, #4]
 801af0a:	4618      	mov	r0, r3
 801af0c:	f7ed fceb 	bl	80088e6 <osThreadCreate>
 801af10:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801af12:	4618      	mov	r0, r3
 801af14:	3730      	adds	r7, #48	; 0x30
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}
	...

0801af1c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801af20:	4b04      	ldr	r3, [pc, #16]	; (801af34 <sys_arch_protect+0x18>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	f04f 31ff 	mov.w	r1, #4294967295
 801af28:	4618      	mov	r0, r3
 801af2a:	f7ed fd61 	bl	80089f0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801af2e:	2301      	movs	r3, #1
}
 801af30:	4618      	mov	r0, r3
 801af32:	bd80      	pop	{r7, pc}
 801af34:	2003d238 	.word	0x2003d238

0801af38 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801af40:	4b04      	ldr	r3, [pc, #16]	; (801af54 <sys_arch_unprotect+0x1c>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	4618      	mov	r0, r3
 801af46:	f7ed fda1 	bl	8008a8c <osMutexRelease>
}
 801af4a:	bf00      	nop
 801af4c:	3708      	adds	r7, #8
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
 801af52:	bf00      	nop
 801af54:	2003d238 	.word	0x2003d238

0801af58 <rand>:
 801af58:	4b16      	ldr	r3, [pc, #88]	; (801afb4 <rand+0x5c>)
 801af5a:	b510      	push	{r4, lr}
 801af5c:	681c      	ldr	r4, [r3, #0]
 801af5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801af60:	b9b3      	cbnz	r3, 801af90 <rand+0x38>
 801af62:	2018      	movs	r0, #24
 801af64:	f000 fb92 	bl	801b68c <malloc>
 801af68:	4602      	mov	r2, r0
 801af6a:	6320      	str	r0, [r4, #48]	; 0x30
 801af6c:	b920      	cbnz	r0, 801af78 <rand+0x20>
 801af6e:	4b12      	ldr	r3, [pc, #72]	; (801afb8 <rand+0x60>)
 801af70:	4812      	ldr	r0, [pc, #72]	; (801afbc <rand+0x64>)
 801af72:	2152      	movs	r1, #82	; 0x52
 801af74:	f000 fb20 	bl	801b5b8 <__assert_func>
 801af78:	4911      	ldr	r1, [pc, #68]	; (801afc0 <rand+0x68>)
 801af7a:	4b12      	ldr	r3, [pc, #72]	; (801afc4 <rand+0x6c>)
 801af7c:	e9c0 1300 	strd	r1, r3, [r0]
 801af80:	4b11      	ldr	r3, [pc, #68]	; (801afc8 <rand+0x70>)
 801af82:	6083      	str	r3, [r0, #8]
 801af84:	230b      	movs	r3, #11
 801af86:	8183      	strh	r3, [r0, #12]
 801af88:	2100      	movs	r1, #0
 801af8a:	2001      	movs	r0, #1
 801af8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801af90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801af92:	480e      	ldr	r0, [pc, #56]	; (801afcc <rand+0x74>)
 801af94:	690b      	ldr	r3, [r1, #16]
 801af96:	694c      	ldr	r4, [r1, #20]
 801af98:	4a0d      	ldr	r2, [pc, #52]	; (801afd0 <rand+0x78>)
 801af9a:	4358      	muls	r0, r3
 801af9c:	fb02 0004 	mla	r0, r2, r4, r0
 801afa0:	fba3 3202 	umull	r3, r2, r3, r2
 801afa4:	3301      	adds	r3, #1
 801afa6:	eb40 0002 	adc.w	r0, r0, r2
 801afaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801afae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801afb2:	bd10      	pop	{r4, pc}
 801afb4:	20000088 	.word	0x20000088
 801afb8:	0801fee0 	.word	0x0801fee0
 801afbc:	0801fef7 	.word	0x0801fef7
 801afc0:	abcd330e 	.word	0xabcd330e
 801afc4:	e66d1234 	.word	0xe66d1234
 801afc8:	0005deec 	.word	0x0005deec
 801afcc:	5851f42d 	.word	0x5851f42d
 801afd0:	4c957f2d 	.word	0x4c957f2d

0801afd4 <std>:
 801afd4:	2300      	movs	r3, #0
 801afd6:	b510      	push	{r4, lr}
 801afd8:	4604      	mov	r4, r0
 801afda:	e9c0 3300 	strd	r3, r3, [r0]
 801afde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801afe2:	6083      	str	r3, [r0, #8]
 801afe4:	8181      	strh	r1, [r0, #12]
 801afe6:	6643      	str	r3, [r0, #100]	; 0x64
 801afe8:	81c2      	strh	r2, [r0, #14]
 801afea:	6183      	str	r3, [r0, #24]
 801afec:	4619      	mov	r1, r3
 801afee:	2208      	movs	r2, #8
 801aff0:	305c      	adds	r0, #92	; 0x5c
 801aff2:	f000 fa07 	bl	801b404 <memset>
 801aff6:	4b0d      	ldr	r3, [pc, #52]	; (801b02c <std+0x58>)
 801aff8:	6263      	str	r3, [r4, #36]	; 0x24
 801affa:	4b0d      	ldr	r3, [pc, #52]	; (801b030 <std+0x5c>)
 801affc:	62a3      	str	r3, [r4, #40]	; 0x28
 801affe:	4b0d      	ldr	r3, [pc, #52]	; (801b034 <std+0x60>)
 801b000:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b002:	4b0d      	ldr	r3, [pc, #52]	; (801b038 <std+0x64>)
 801b004:	6323      	str	r3, [r4, #48]	; 0x30
 801b006:	4b0d      	ldr	r3, [pc, #52]	; (801b03c <std+0x68>)
 801b008:	6224      	str	r4, [r4, #32]
 801b00a:	429c      	cmp	r4, r3
 801b00c:	d006      	beq.n	801b01c <std+0x48>
 801b00e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b012:	4294      	cmp	r4, r2
 801b014:	d002      	beq.n	801b01c <std+0x48>
 801b016:	33d0      	adds	r3, #208	; 0xd0
 801b018:	429c      	cmp	r4, r3
 801b01a:	d105      	bne.n	801b028 <std+0x54>
 801b01c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b024:	f000 bab6 	b.w	801b594 <__retarget_lock_init_recursive>
 801b028:	bd10      	pop	{r4, pc}
 801b02a:	bf00      	nop
 801b02c:	0801b235 	.word	0x0801b235
 801b030:	0801b257 	.word	0x0801b257
 801b034:	0801b28f 	.word	0x0801b28f
 801b038:	0801b2b3 	.word	0x0801b2b3
 801b03c:	2003d23c 	.word	0x2003d23c

0801b040 <stdio_exit_handler>:
 801b040:	4a02      	ldr	r2, [pc, #8]	; (801b04c <stdio_exit_handler+0xc>)
 801b042:	4903      	ldr	r1, [pc, #12]	; (801b050 <stdio_exit_handler+0x10>)
 801b044:	4803      	ldr	r0, [pc, #12]	; (801b054 <stdio_exit_handler+0x14>)
 801b046:	f000 b869 	b.w	801b11c <_fwalk_sglue>
 801b04a:	bf00      	nop
 801b04c:	20000030 	.word	0x20000030
 801b050:	0801bea9 	.word	0x0801bea9
 801b054:	2000003c 	.word	0x2000003c

0801b058 <cleanup_stdio>:
 801b058:	6841      	ldr	r1, [r0, #4]
 801b05a:	4b0c      	ldr	r3, [pc, #48]	; (801b08c <cleanup_stdio+0x34>)
 801b05c:	4299      	cmp	r1, r3
 801b05e:	b510      	push	{r4, lr}
 801b060:	4604      	mov	r4, r0
 801b062:	d001      	beq.n	801b068 <cleanup_stdio+0x10>
 801b064:	f000 ff20 	bl	801bea8 <_fflush_r>
 801b068:	68a1      	ldr	r1, [r4, #8]
 801b06a:	4b09      	ldr	r3, [pc, #36]	; (801b090 <cleanup_stdio+0x38>)
 801b06c:	4299      	cmp	r1, r3
 801b06e:	d002      	beq.n	801b076 <cleanup_stdio+0x1e>
 801b070:	4620      	mov	r0, r4
 801b072:	f000 ff19 	bl	801bea8 <_fflush_r>
 801b076:	68e1      	ldr	r1, [r4, #12]
 801b078:	4b06      	ldr	r3, [pc, #24]	; (801b094 <cleanup_stdio+0x3c>)
 801b07a:	4299      	cmp	r1, r3
 801b07c:	d004      	beq.n	801b088 <cleanup_stdio+0x30>
 801b07e:	4620      	mov	r0, r4
 801b080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b084:	f000 bf10 	b.w	801bea8 <_fflush_r>
 801b088:	bd10      	pop	{r4, pc}
 801b08a:	bf00      	nop
 801b08c:	2003d23c 	.word	0x2003d23c
 801b090:	2003d2a4 	.word	0x2003d2a4
 801b094:	2003d30c 	.word	0x2003d30c

0801b098 <global_stdio_init.part.0>:
 801b098:	b510      	push	{r4, lr}
 801b09a:	4b0b      	ldr	r3, [pc, #44]	; (801b0c8 <global_stdio_init.part.0+0x30>)
 801b09c:	4c0b      	ldr	r4, [pc, #44]	; (801b0cc <global_stdio_init.part.0+0x34>)
 801b09e:	4a0c      	ldr	r2, [pc, #48]	; (801b0d0 <global_stdio_init.part.0+0x38>)
 801b0a0:	601a      	str	r2, [r3, #0]
 801b0a2:	4620      	mov	r0, r4
 801b0a4:	2200      	movs	r2, #0
 801b0a6:	2104      	movs	r1, #4
 801b0a8:	f7ff ff94 	bl	801afd4 <std>
 801b0ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b0b0:	2201      	movs	r2, #1
 801b0b2:	2109      	movs	r1, #9
 801b0b4:	f7ff ff8e 	bl	801afd4 <std>
 801b0b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b0bc:	2202      	movs	r2, #2
 801b0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0c2:	2112      	movs	r1, #18
 801b0c4:	f7ff bf86 	b.w	801afd4 <std>
 801b0c8:	2003d374 	.word	0x2003d374
 801b0cc:	2003d23c 	.word	0x2003d23c
 801b0d0:	0801b041 	.word	0x0801b041

0801b0d4 <__sfp_lock_acquire>:
 801b0d4:	4801      	ldr	r0, [pc, #4]	; (801b0dc <__sfp_lock_acquire+0x8>)
 801b0d6:	f000 ba5e 	b.w	801b596 <__retarget_lock_acquire_recursive>
 801b0da:	bf00      	nop
 801b0dc:	2003d37d 	.word	0x2003d37d

0801b0e0 <__sfp_lock_release>:
 801b0e0:	4801      	ldr	r0, [pc, #4]	; (801b0e8 <__sfp_lock_release+0x8>)
 801b0e2:	f000 ba59 	b.w	801b598 <__retarget_lock_release_recursive>
 801b0e6:	bf00      	nop
 801b0e8:	2003d37d 	.word	0x2003d37d

0801b0ec <__sinit>:
 801b0ec:	b510      	push	{r4, lr}
 801b0ee:	4604      	mov	r4, r0
 801b0f0:	f7ff fff0 	bl	801b0d4 <__sfp_lock_acquire>
 801b0f4:	6a23      	ldr	r3, [r4, #32]
 801b0f6:	b11b      	cbz	r3, 801b100 <__sinit+0x14>
 801b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0fc:	f7ff bff0 	b.w	801b0e0 <__sfp_lock_release>
 801b100:	4b04      	ldr	r3, [pc, #16]	; (801b114 <__sinit+0x28>)
 801b102:	6223      	str	r3, [r4, #32]
 801b104:	4b04      	ldr	r3, [pc, #16]	; (801b118 <__sinit+0x2c>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d1f5      	bne.n	801b0f8 <__sinit+0xc>
 801b10c:	f7ff ffc4 	bl	801b098 <global_stdio_init.part.0>
 801b110:	e7f2      	b.n	801b0f8 <__sinit+0xc>
 801b112:	bf00      	nop
 801b114:	0801b059 	.word	0x0801b059
 801b118:	2003d374 	.word	0x2003d374

0801b11c <_fwalk_sglue>:
 801b11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b120:	4607      	mov	r7, r0
 801b122:	4688      	mov	r8, r1
 801b124:	4614      	mov	r4, r2
 801b126:	2600      	movs	r6, #0
 801b128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b12c:	f1b9 0901 	subs.w	r9, r9, #1
 801b130:	d505      	bpl.n	801b13e <_fwalk_sglue+0x22>
 801b132:	6824      	ldr	r4, [r4, #0]
 801b134:	2c00      	cmp	r4, #0
 801b136:	d1f7      	bne.n	801b128 <_fwalk_sglue+0xc>
 801b138:	4630      	mov	r0, r6
 801b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b13e:	89ab      	ldrh	r3, [r5, #12]
 801b140:	2b01      	cmp	r3, #1
 801b142:	d907      	bls.n	801b154 <_fwalk_sglue+0x38>
 801b144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b148:	3301      	adds	r3, #1
 801b14a:	d003      	beq.n	801b154 <_fwalk_sglue+0x38>
 801b14c:	4629      	mov	r1, r5
 801b14e:	4638      	mov	r0, r7
 801b150:	47c0      	blx	r8
 801b152:	4306      	orrs	r6, r0
 801b154:	3568      	adds	r5, #104	; 0x68
 801b156:	e7e9      	b.n	801b12c <_fwalk_sglue+0x10>

0801b158 <iprintf>:
 801b158:	b40f      	push	{r0, r1, r2, r3}
 801b15a:	b507      	push	{r0, r1, r2, lr}
 801b15c:	4906      	ldr	r1, [pc, #24]	; (801b178 <iprintf+0x20>)
 801b15e:	ab04      	add	r3, sp, #16
 801b160:	6808      	ldr	r0, [r1, #0]
 801b162:	f853 2b04 	ldr.w	r2, [r3], #4
 801b166:	6881      	ldr	r1, [r0, #8]
 801b168:	9301      	str	r3, [sp, #4]
 801b16a:	f000 fb6d 	bl	801b848 <_vfiprintf_r>
 801b16e:	b003      	add	sp, #12
 801b170:	f85d eb04 	ldr.w	lr, [sp], #4
 801b174:	b004      	add	sp, #16
 801b176:	4770      	bx	lr
 801b178:	20000088 	.word	0x20000088

0801b17c <_puts_r>:
 801b17c:	6a03      	ldr	r3, [r0, #32]
 801b17e:	b570      	push	{r4, r5, r6, lr}
 801b180:	6884      	ldr	r4, [r0, #8]
 801b182:	4605      	mov	r5, r0
 801b184:	460e      	mov	r6, r1
 801b186:	b90b      	cbnz	r3, 801b18c <_puts_r+0x10>
 801b188:	f7ff ffb0 	bl	801b0ec <__sinit>
 801b18c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b18e:	07db      	lsls	r3, r3, #31
 801b190:	d405      	bmi.n	801b19e <_puts_r+0x22>
 801b192:	89a3      	ldrh	r3, [r4, #12]
 801b194:	0598      	lsls	r0, r3, #22
 801b196:	d402      	bmi.n	801b19e <_puts_r+0x22>
 801b198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b19a:	f000 f9fc 	bl	801b596 <__retarget_lock_acquire_recursive>
 801b19e:	89a3      	ldrh	r3, [r4, #12]
 801b1a0:	0719      	lsls	r1, r3, #28
 801b1a2:	d513      	bpl.n	801b1cc <_puts_r+0x50>
 801b1a4:	6923      	ldr	r3, [r4, #16]
 801b1a6:	b18b      	cbz	r3, 801b1cc <_puts_r+0x50>
 801b1a8:	3e01      	subs	r6, #1
 801b1aa:	68a3      	ldr	r3, [r4, #8]
 801b1ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b1b0:	3b01      	subs	r3, #1
 801b1b2:	60a3      	str	r3, [r4, #8]
 801b1b4:	b9e9      	cbnz	r1, 801b1f2 <_puts_r+0x76>
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	da2e      	bge.n	801b218 <_puts_r+0x9c>
 801b1ba:	4622      	mov	r2, r4
 801b1bc:	210a      	movs	r1, #10
 801b1be:	4628      	mov	r0, r5
 801b1c0:	f000 f87b 	bl	801b2ba <__swbuf_r>
 801b1c4:	3001      	adds	r0, #1
 801b1c6:	d007      	beq.n	801b1d8 <_puts_r+0x5c>
 801b1c8:	250a      	movs	r5, #10
 801b1ca:	e007      	b.n	801b1dc <_puts_r+0x60>
 801b1cc:	4621      	mov	r1, r4
 801b1ce:	4628      	mov	r0, r5
 801b1d0:	f000 f8b0 	bl	801b334 <__swsetup_r>
 801b1d4:	2800      	cmp	r0, #0
 801b1d6:	d0e7      	beq.n	801b1a8 <_puts_r+0x2c>
 801b1d8:	f04f 35ff 	mov.w	r5, #4294967295
 801b1dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1de:	07da      	lsls	r2, r3, #31
 801b1e0:	d405      	bmi.n	801b1ee <_puts_r+0x72>
 801b1e2:	89a3      	ldrh	r3, [r4, #12]
 801b1e4:	059b      	lsls	r3, r3, #22
 801b1e6:	d402      	bmi.n	801b1ee <_puts_r+0x72>
 801b1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1ea:	f000 f9d5 	bl	801b598 <__retarget_lock_release_recursive>
 801b1ee:	4628      	mov	r0, r5
 801b1f0:	bd70      	pop	{r4, r5, r6, pc}
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	da04      	bge.n	801b200 <_puts_r+0x84>
 801b1f6:	69a2      	ldr	r2, [r4, #24]
 801b1f8:	429a      	cmp	r2, r3
 801b1fa:	dc06      	bgt.n	801b20a <_puts_r+0x8e>
 801b1fc:	290a      	cmp	r1, #10
 801b1fe:	d004      	beq.n	801b20a <_puts_r+0x8e>
 801b200:	6823      	ldr	r3, [r4, #0]
 801b202:	1c5a      	adds	r2, r3, #1
 801b204:	6022      	str	r2, [r4, #0]
 801b206:	7019      	strb	r1, [r3, #0]
 801b208:	e7cf      	b.n	801b1aa <_puts_r+0x2e>
 801b20a:	4622      	mov	r2, r4
 801b20c:	4628      	mov	r0, r5
 801b20e:	f000 f854 	bl	801b2ba <__swbuf_r>
 801b212:	3001      	adds	r0, #1
 801b214:	d1c9      	bne.n	801b1aa <_puts_r+0x2e>
 801b216:	e7df      	b.n	801b1d8 <_puts_r+0x5c>
 801b218:	6823      	ldr	r3, [r4, #0]
 801b21a:	250a      	movs	r5, #10
 801b21c:	1c5a      	adds	r2, r3, #1
 801b21e:	6022      	str	r2, [r4, #0]
 801b220:	701d      	strb	r5, [r3, #0]
 801b222:	e7db      	b.n	801b1dc <_puts_r+0x60>

0801b224 <puts>:
 801b224:	4b02      	ldr	r3, [pc, #8]	; (801b230 <puts+0xc>)
 801b226:	4601      	mov	r1, r0
 801b228:	6818      	ldr	r0, [r3, #0]
 801b22a:	f7ff bfa7 	b.w	801b17c <_puts_r>
 801b22e:	bf00      	nop
 801b230:	20000088 	.word	0x20000088

0801b234 <__sread>:
 801b234:	b510      	push	{r4, lr}
 801b236:	460c      	mov	r4, r1
 801b238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b23c:	f000 f962 	bl	801b504 <_read_r>
 801b240:	2800      	cmp	r0, #0
 801b242:	bfab      	itete	ge
 801b244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b246:	89a3      	ldrhlt	r3, [r4, #12]
 801b248:	181b      	addge	r3, r3, r0
 801b24a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b24e:	bfac      	ite	ge
 801b250:	6563      	strge	r3, [r4, #84]	; 0x54
 801b252:	81a3      	strhlt	r3, [r4, #12]
 801b254:	bd10      	pop	{r4, pc}

0801b256 <__swrite>:
 801b256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b25a:	461f      	mov	r7, r3
 801b25c:	898b      	ldrh	r3, [r1, #12]
 801b25e:	05db      	lsls	r3, r3, #23
 801b260:	4605      	mov	r5, r0
 801b262:	460c      	mov	r4, r1
 801b264:	4616      	mov	r6, r2
 801b266:	d505      	bpl.n	801b274 <__swrite+0x1e>
 801b268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b26c:	2302      	movs	r3, #2
 801b26e:	2200      	movs	r2, #0
 801b270:	f000 f936 	bl	801b4e0 <_lseek_r>
 801b274:	89a3      	ldrh	r3, [r4, #12]
 801b276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b27a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b27e:	81a3      	strh	r3, [r4, #12]
 801b280:	4632      	mov	r2, r6
 801b282:	463b      	mov	r3, r7
 801b284:	4628      	mov	r0, r5
 801b286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b28a:	f000 b94d 	b.w	801b528 <_write_r>

0801b28e <__sseek>:
 801b28e:	b510      	push	{r4, lr}
 801b290:	460c      	mov	r4, r1
 801b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b296:	f000 f923 	bl	801b4e0 <_lseek_r>
 801b29a:	1c43      	adds	r3, r0, #1
 801b29c:	89a3      	ldrh	r3, [r4, #12]
 801b29e:	bf15      	itete	ne
 801b2a0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b2a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b2a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b2aa:	81a3      	strheq	r3, [r4, #12]
 801b2ac:	bf18      	it	ne
 801b2ae:	81a3      	strhne	r3, [r4, #12]
 801b2b0:	bd10      	pop	{r4, pc}

0801b2b2 <__sclose>:
 801b2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2b6:	f000 b8ad 	b.w	801b414 <_close_r>

0801b2ba <__swbuf_r>:
 801b2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2bc:	460e      	mov	r6, r1
 801b2be:	4614      	mov	r4, r2
 801b2c0:	4605      	mov	r5, r0
 801b2c2:	b118      	cbz	r0, 801b2cc <__swbuf_r+0x12>
 801b2c4:	6a03      	ldr	r3, [r0, #32]
 801b2c6:	b90b      	cbnz	r3, 801b2cc <__swbuf_r+0x12>
 801b2c8:	f7ff ff10 	bl	801b0ec <__sinit>
 801b2cc:	69a3      	ldr	r3, [r4, #24]
 801b2ce:	60a3      	str	r3, [r4, #8]
 801b2d0:	89a3      	ldrh	r3, [r4, #12]
 801b2d2:	071a      	lsls	r2, r3, #28
 801b2d4:	d525      	bpl.n	801b322 <__swbuf_r+0x68>
 801b2d6:	6923      	ldr	r3, [r4, #16]
 801b2d8:	b31b      	cbz	r3, 801b322 <__swbuf_r+0x68>
 801b2da:	6823      	ldr	r3, [r4, #0]
 801b2dc:	6922      	ldr	r2, [r4, #16]
 801b2de:	1a98      	subs	r0, r3, r2
 801b2e0:	6963      	ldr	r3, [r4, #20]
 801b2e2:	b2f6      	uxtb	r6, r6
 801b2e4:	4283      	cmp	r3, r0
 801b2e6:	4637      	mov	r7, r6
 801b2e8:	dc04      	bgt.n	801b2f4 <__swbuf_r+0x3a>
 801b2ea:	4621      	mov	r1, r4
 801b2ec:	4628      	mov	r0, r5
 801b2ee:	f000 fddb 	bl	801bea8 <_fflush_r>
 801b2f2:	b9e0      	cbnz	r0, 801b32e <__swbuf_r+0x74>
 801b2f4:	68a3      	ldr	r3, [r4, #8]
 801b2f6:	3b01      	subs	r3, #1
 801b2f8:	60a3      	str	r3, [r4, #8]
 801b2fa:	6823      	ldr	r3, [r4, #0]
 801b2fc:	1c5a      	adds	r2, r3, #1
 801b2fe:	6022      	str	r2, [r4, #0]
 801b300:	701e      	strb	r6, [r3, #0]
 801b302:	6962      	ldr	r2, [r4, #20]
 801b304:	1c43      	adds	r3, r0, #1
 801b306:	429a      	cmp	r2, r3
 801b308:	d004      	beq.n	801b314 <__swbuf_r+0x5a>
 801b30a:	89a3      	ldrh	r3, [r4, #12]
 801b30c:	07db      	lsls	r3, r3, #31
 801b30e:	d506      	bpl.n	801b31e <__swbuf_r+0x64>
 801b310:	2e0a      	cmp	r6, #10
 801b312:	d104      	bne.n	801b31e <__swbuf_r+0x64>
 801b314:	4621      	mov	r1, r4
 801b316:	4628      	mov	r0, r5
 801b318:	f000 fdc6 	bl	801bea8 <_fflush_r>
 801b31c:	b938      	cbnz	r0, 801b32e <__swbuf_r+0x74>
 801b31e:	4638      	mov	r0, r7
 801b320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b322:	4621      	mov	r1, r4
 801b324:	4628      	mov	r0, r5
 801b326:	f000 f805 	bl	801b334 <__swsetup_r>
 801b32a:	2800      	cmp	r0, #0
 801b32c:	d0d5      	beq.n	801b2da <__swbuf_r+0x20>
 801b32e:	f04f 37ff 	mov.w	r7, #4294967295
 801b332:	e7f4      	b.n	801b31e <__swbuf_r+0x64>

0801b334 <__swsetup_r>:
 801b334:	b538      	push	{r3, r4, r5, lr}
 801b336:	4b2a      	ldr	r3, [pc, #168]	; (801b3e0 <__swsetup_r+0xac>)
 801b338:	4605      	mov	r5, r0
 801b33a:	6818      	ldr	r0, [r3, #0]
 801b33c:	460c      	mov	r4, r1
 801b33e:	b118      	cbz	r0, 801b348 <__swsetup_r+0x14>
 801b340:	6a03      	ldr	r3, [r0, #32]
 801b342:	b90b      	cbnz	r3, 801b348 <__swsetup_r+0x14>
 801b344:	f7ff fed2 	bl	801b0ec <__sinit>
 801b348:	89a3      	ldrh	r3, [r4, #12]
 801b34a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b34e:	0718      	lsls	r0, r3, #28
 801b350:	d422      	bmi.n	801b398 <__swsetup_r+0x64>
 801b352:	06d9      	lsls	r1, r3, #27
 801b354:	d407      	bmi.n	801b366 <__swsetup_r+0x32>
 801b356:	2309      	movs	r3, #9
 801b358:	602b      	str	r3, [r5, #0]
 801b35a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b35e:	81a3      	strh	r3, [r4, #12]
 801b360:	f04f 30ff 	mov.w	r0, #4294967295
 801b364:	e034      	b.n	801b3d0 <__swsetup_r+0x9c>
 801b366:	0758      	lsls	r0, r3, #29
 801b368:	d512      	bpl.n	801b390 <__swsetup_r+0x5c>
 801b36a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b36c:	b141      	cbz	r1, 801b380 <__swsetup_r+0x4c>
 801b36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b372:	4299      	cmp	r1, r3
 801b374:	d002      	beq.n	801b37c <__swsetup_r+0x48>
 801b376:	4628      	mov	r0, r5
 801b378:	f000 f93c 	bl	801b5f4 <_free_r>
 801b37c:	2300      	movs	r3, #0
 801b37e:	6363      	str	r3, [r4, #52]	; 0x34
 801b380:	89a3      	ldrh	r3, [r4, #12]
 801b382:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b386:	81a3      	strh	r3, [r4, #12]
 801b388:	2300      	movs	r3, #0
 801b38a:	6063      	str	r3, [r4, #4]
 801b38c:	6923      	ldr	r3, [r4, #16]
 801b38e:	6023      	str	r3, [r4, #0]
 801b390:	89a3      	ldrh	r3, [r4, #12]
 801b392:	f043 0308 	orr.w	r3, r3, #8
 801b396:	81a3      	strh	r3, [r4, #12]
 801b398:	6923      	ldr	r3, [r4, #16]
 801b39a:	b94b      	cbnz	r3, 801b3b0 <__swsetup_r+0x7c>
 801b39c:	89a3      	ldrh	r3, [r4, #12]
 801b39e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b3a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3a6:	d003      	beq.n	801b3b0 <__swsetup_r+0x7c>
 801b3a8:	4621      	mov	r1, r4
 801b3aa:	4628      	mov	r0, r5
 801b3ac:	f000 fddc 	bl	801bf68 <__smakebuf_r>
 801b3b0:	89a0      	ldrh	r0, [r4, #12]
 801b3b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3b6:	f010 0301 	ands.w	r3, r0, #1
 801b3ba:	d00a      	beq.n	801b3d2 <__swsetup_r+0x9e>
 801b3bc:	2300      	movs	r3, #0
 801b3be:	60a3      	str	r3, [r4, #8]
 801b3c0:	6963      	ldr	r3, [r4, #20]
 801b3c2:	425b      	negs	r3, r3
 801b3c4:	61a3      	str	r3, [r4, #24]
 801b3c6:	6923      	ldr	r3, [r4, #16]
 801b3c8:	b943      	cbnz	r3, 801b3dc <__swsetup_r+0xa8>
 801b3ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b3ce:	d1c4      	bne.n	801b35a <__swsetup_r+0x26>
 801b3d0:	bd38      	pop	{r3, r4, r5, pc}
 801b3d2:	0781      	lsls	r1, r0, #30
 801b3d4:	bf58      	it	pl
 801b3d6:	6963      	ldrpl	r3, [r4, #20]
 801b3d8:	60a3      	str	r3, [r4, #8]
 801b3da:	e7f4      	b.n	801b3c6 <__swsetup_r+0x92>
 801b3dc:	2000      	movs	r0, #0
 801b3de:	e7f7      	b.n	801b3d0 <__swsetup_r+0x9c>
 801b3e0:	20000088 	.word	0x20000088

0801b3e4 <memcmp>:
 801b3e4:	b510      	push	{r4, lr}
 801b3e6:	3901      	subs	r1, #1
 801b3e8:	4402      	add	r2, r0
 801b3ea:	4290      	cmp	r0, r2
 801b3ec:	d101      	bne.n	801b3f2 <memcmp+0xe>
 801b3ee:	2000      	movs	r0, #0
 801b3f0:	e005      	b.n	801b3fe <memcmp+0x1a>
 801b3f2:	7803      	ldrb	r3, [r0, #0]
 801b3f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b3f8:	42a3      	cmp	r3, r4
 801b3fa:	d001      	beq.n	801b400 <memcmp+0x1c>
 801b3fc:	1b18      	subs	r0, r3, r4
 801b3fe:	bd10      	pop	{r4, pc}
 801b400:	3001      	adds	r0, #1
 801b402:	e7f2      	b.n	801b3ea <memcmp+0x6>

0801b404 <memset>:
 801b404:	4402      	add	r2, r0
 801b406:	4603      	mov	r3, r0
 801b408:	4293      	cmp	r3, r2
 801b40a:	d100      	bne.n	801b40e <memset+0xa>
 801b40c:	4770      	bx	lr
 801b40e:	f803 1b01 	strb.w	r1, [r3], #1
 801b412:	e7f9      	b.n	801b408 <memset+0x4>

0801b414 <_close_r>:
 801b414:	b538      	push	{r3, r4, r5, lr}
 801b416:	4d06      	ldr	r5, [pc, #24]	; (801b430 <_close_r+0x1c>)
 801b418:	2300      	movs	r3, #0
 801b41a:	4604      	mov	r4, r0
 801b41c:	4608      	mov	r0, r1
 801b41e:	602b      	str	r3, [r5, #0]
 801b420:	f7e6 fdf3 	bl	800200a <_close>
 801b424:	1c43      	adds	r3, r0, #1
 801b426:	d102      	bne.n	801b42e <_close_r+0x1a>
 801b428:	682b      	ldr	r3, [r5, #0]
 801b42a:	b103      	cbz	r3, 801b42e <_close_r+0x1a>
 801b42c:	6023      	str	r3, [r4, #0]
 801b42e:	bd38      	pop	{r3, r4, r5, pc}
 801b430:	2003d378 	.word	0x2003d378

0801b434 <_reclaim_reent>:
 801b434:	4b29      	ldr	r3, [pc, #164]	; (801b4dc <_reclaim_reent+0xa8>)
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	4283      	cmp	r3, r0
 801b43a:	b570      	push	{r4, r5, r6, lr}
 801b43c:	4604      	mov	r4, r0
 801b43e:	d04b      	beq.n	801b4d8 <_reclaim_reent+0xa4>
 801b440:	69c3      	ldr	r3, [r0, #28]
 801b442:	b143      	cbz	r3, 801b456 <_reclaim_reent+0x22>
 801b444:	68db      	ldr	r3, [r3, #12]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d144      	bne.n	801b4d4 <_reclaim_reent+0xa0>
 801b44a:	69e3      	ldr	r3, [r4, #28]
 801b44c:	6819      	ldr	r1, [r3, #0]
 801b44e:	b111      	cbz	r1, 801b456 <_reclaim_reent+0x22>
 801b450:	4620      	mov	r0, r4
 801b452:	f000 f8cf 	bl	801b5f4 <_free_r>
 801b456:	6961      	ldr	r1, [r4, #20]
 801b458:	b111      	cbz	r1, 801b460 <_reclaim_reent+0x2c>
 801b45a:	4620      	mov	r0, r4
 801b45c:	f000 f8ca 	bl	801b5f4 <_free_r>
 801b460:	69e1      	ldr	r1, [r4, #28]
 801b462:	b111      	cbz	r1, 801b46a <_reclaim_reent+0x36>
 801b464:	4620      	mov	r0, r4
 801b466:	f000 f8c5 	bl	801b5f4 <_free_r>
 801b46a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b46c:	b111      	cbz	r1, 801b474 <_reclaim_reent+0x40>
 801b46e:	4620      	mov	r0, r4
 801b470:	f000 f8c0 	bl	801b5f4 <_free_r>
 801b474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b476:	b111      	cbz	r1, 801b47e <_reclaim_reent+0x4a>
 801b478:	4620      	mov	r0, r4
 801b47a:	f000 f8bb 	bl	801b5f4 <_free_r>
 801b47e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b480:	b111      	cbz	r1, 801b488 <_reclaim_reent+0x54>
 801b482:	4620      	mov	r0, r4
 801b484:	f000 f8b6 	bl	801b5f4 <_free_r>
 801b488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b48a:	b111      	cbz	r1, 801b492 <_reclaim_reent+0x5e>
 801b48c:	4620      	mov	r0, r4
 801b48e:	f000 f8b1 	bl	801b5f4 <_free_r>
 801b492:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b494:	b111      	cbz	r1, 801b49c <_reclaim_reent+0x68>
 801b496:	4620      	mov	r0, r4
 801b498:	f000 f8ac 	bl	801b5f4 <_free_r>
 801b49c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b49e:	b111      	cbz	r1, 801b4a6 <_reclaim_reent+0x72>
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f000 f8a7 	bl	801b5f4 <_free_r>
 801b4a6:	6a23      	ldr	r3, [r4, #32]
 801b4a8:	b1b3      	cbz	r3, 801b4d8 <_reclaim_reent+0xa4>
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4b0:	4718      	bx	r3
 801b4b2:	5949      	ldr	r1, [r1, r5]
 801b4b4:	b941      	cbnz	r1, 801b4c8 <_reclaim_reent+0x94>
 801b4b6:	3504      	adds	r5, #4
 801b4b8:	69e3      	ldr	r3, [r4, #28]
 801b4ba:	2d80      	cmp	r5, #128	; 0x80
 801b4bc:	68d9      	ldr	r1, [r3, #12]
 801b4be:	d1f8      	bne.n	801b4b2 <_reclaim_reent+0x7e>
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	f000 f897 	bl	801b5f4 <_free_r>
 801b4c6:	e7c0      	b.n	801b44a <_reclaim_reent+0x16>
 801b4c8:	680e      	ldr	r6, [r1, #0]
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f000 f892 	bl	801b5f4 <_free_r>
 801b4d0:	4631      	mov	r1, r6
 801b4d2:	e7ef      	b.n	801b4b4 <_reclaim_reent+0x80>
 801b4d4:	2500      	movs	r5, #0
 801b4d6:	e7ef      	b.n	801b4b8 <_reclaim_reent+0x84>
 801b4d8:	bd70      	pop	{r4, r5, r6, pc}
 801b4da:	bf00      	nop
 801b4dc:	20000088 	.word	0x20000088

0801b4e0 <_lseek_r>:
 801b4e0:	b538      	push	{r3, r4, r5, lr}
 801b4e2:	4d07      	ldr	r5, [pc, #28]	; (801b500 <_lseek_r+0x20>)
 801b4e4:	4604      	mov	r4, r0
 801b4e6:	4608      	mov	r0, r1
 801b4e8:	4611      	mov	r1, r2
 801b4ea:	2200      	movs	r2, #0
 801b4ec:	602a      	str	r2, [r5, #0]
 801b4ee:	461a      	mov	r2, r3
 801b4f0:	f7e6 fdb2 	bl	8002058 <_lseek>
 801b4f4:	1c43      	adds	r3, r0, #1
 801b4f6:	d102      	bne.n	801b4fe <_lseek_r+0x1e>
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	b103      	cbz	r3, 801b4fe <_lseek_r+0x1e>
 801b4fc:	6023      	str	r3, [r4, #0]
 801b4fe:	bd38      	pop	{r3, r4, r5, pc}
 801b500:	2003d378 	.word	0x2003d378

0801b504 <_read_r>:
 801b504:	b538      	push	{r3, r4, r5, lr}
 801b506:	4d07      	ldr	r5, [pc, #28]	; (801b524 <_read_r+0x20>)
 801b508:	4604      	mov	r4, r0
 801b50a:	4608      	mov	r0, r1
 801b50c:	4611      	mov	r1, r2
 801b50e:	2200      	movs	r2, #0
 801b510:	602a      	str	r2, [r5, #0]
 801b512:	461a      	mov	r2, r3
 801b514:	f7e6 fd5c 	bl	8001fd0 <_read>
 801b518:	1c43      	adds	r3, r0, #1
 801b51a:	d102      	bne.n	801b522 <_read_r+0x1e>
 801b51c:	682b      	ldr	r3, [r5, #0]
 801b51e:	b103      	cbz	r3, 801b522 <_read_r+0x1e>
 801b520:	6023      	str	r3, [r4, #0]
 801b522:	bd38      	pop	{r3, r4, r5, pc}
 801b524:	2003d378 	.word	0x2003d378

0801b528 <_write_r>:
 801b528:	b538      	push	{r3, r4, r5, lr}
 801b52a:	4d07      	ldr	r5, [pc, #28]	; (801b548 <_write_r+0x20>)
 801b52c:	4604      	mov	r4, r0
 801b52e:	4608      	mov	r0, r1
 801b530:	4611      	mov	r1, r2
 801b532:	2200      	movs	r2, #0
 801b534:	602a      	str	r2, [r5, #0]
 801b536:	461a      	mov	r2, r3
 801b538:	f7e6 f90e 	bl	8001758 <_write>
 801b53c:	1c43      	adds	r3, r0, #1
 801b53e:	d102      	bne.n	801b546 <_write_r+0x1e>
 801b540:	682b      	ldr	r3, [r5, #0]
 801b542:	b103      	cbz	r3, 801b546 <_write_r+0x1e>
 801b544:	6023      	str	r3, [r4, #0]
 801b546:	bd38      	pop	{r3, r4, r5, pc}
 801b548:	2003d378 	.word	0x2003d378

0801b54c <__libc_init_array>:
 801b54c:	b570      	push	{r4, r5, r6, lr}
 801b54e:	4d0d      	ldr	r5, [pc, #52]	; (801b584 <__libc_init_array+0x38>)
 801b550:	4c0d      	ldr	r4, [pc, #52]	; (801b588 <__libc_init_array+0x3c>)
 801b552:	1b64      	subs	r4, r4, r5
 801b554:	10a4      	asrs	r4, r4, #2
 801b556:	2600      	movs	r6, #0
 801b558:	42a6      	cmp	r6, r4
 801b55a:	d109      	bne.n	801b570 <__libc_init_array+0x24>
 801b55c:	4d0b      	ldr	r5, [pc, #44]	; (801b58c <__libc_init_array+0x40>)
 801b55e:	4c0c      	ldr	r4, [pc, #48]	; (801b590 <__libc_init_array+0x44>)
 801b560:	f000 fdbc 	bl	801c0dc <_init>
 801b564:	1b64      	subs	r4, r4, r5
 801b566:	10a4      	asrs	r4, r4, #2
 801b568:	2600      	movs	r6, #0
 801b56a:	42a6      	cmp	r6, r4
 801b56c:	d105      	bne.n	801b57a <__libc_init_array+0x2e>
 801b56e:	bd70      	pop	{r4, r5, r6, pc}
 801b570:	f855 3b04 	ldr.w	r3, [r5], #4
 801b574:	4798      	blx	r3
 801b576:	3601      	adds	r6, #1
 801b578:	e7ee      	b.n	801b558 <__libc_init_array+0xc>
 801b57a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b57e:	4798      	blx	r3
 801b580:	3601      	adds	r6, #1
 801b582:	e7f2      	b.n	801b56a <__libc_init_array+0x1e>
 801b584:	0801ffc8 	.word	0x0801ffc8
 801b588:	0801ffc8 	.word	0x0801ffc8
 801b58c:	0801ffc8 	.word	0x0801ffc8
 801b590:	0801ffcc 	.word	0x0801ffcc

0801b594 <__retarget_lock_init_recursive>:
 801b594:	4770      	bx	lr

0801b596 <__retarget_lock_acquire_recursive>:
 801b596:	4770      	bx	lr

0801b598 <__retarget_lock_release_recursive>:
 801b598:	4770      	bx	lr

0801b59a <memcpy>:
 801b59a:	440a      	add	r2, r1
 801b59c:	4291      	cmp	r1, r2
 801b59e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b5a2:	d100      	bne.n	801b5a6 <memcpy+0xc>
 801b5a4:	4770      	bx	lr
 801b5a6:	b510      	push	{r4, lr}
 801b5a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b5b0:	4291      	cmp	r1, r2
 801b5b2:	d1f9      	bne.n	801b5a8 <memcpy+0xe>
 801b5b4:	bd10      	pop	{r4, pc}
	...

0801b5b8 <__assert_func>:
 801b5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b5ba:	4614      	mov	r4, r2
 801b5bc:	461a      	mov	r2, r3
 801b5be:	4b09      	ldr	r3, [pc, #36]	; (801b5e4 <__assert_func+0x2c>)
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	4605      	mov	r5, r0
 801b5c4:	68d8      	ldr	r0, [r3, #12]
 801b5c6:	b14c      	cbz	r4, 801b5dc <__assert_func+0x24>
 801b5c8:	4b07      	ldr	r3, [pc, #28]	; (801b5e8 <__assert_func+0x30>)
 801b5ca:	9100      	str	r1, [sp, #0]
 801b5cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b5d0:	4906      	ldr	r1, [pc, #24]	; (801b5ec <__assert_func+0x34>)
 801b5d2:	462b      	mov	r3, r5
 801b5d4:	f000 fc90 	bl	801bef8 <fiprintf>
 801b5d8:	f000 fd34 	bl	801c044 <abort>
 801b5dc:	4b04      	ldr	r3, [pc, #16]	; (801b5f0 <__assert_func+0x38>)
 801b5de:	461c      	mov	r4, r3
 801b5e0:	e7f3      	b.n	801b5ca <__assert_func+0x12>
 801b5e2:	bf00      	nop
 801b5e4:	20000088 	.word	0x20000088
 801b5e8:	0801ff4f 	.word	0x0801ff4f
 801b5ec:	0801ff5c 	.word	0x0801ff5c
 801b5f0:	0801ff8a 	.word	0x0801ff8a

0801b5f4 <_free_r>:
 801b5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5f6:	2900      	cmp	r1, #0
 801b5f8:	d044      	beq.n	801b684 <_free_r+0x90>
 801b5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5fe:	9001      	str	r0, [sp, #4]
 801b600:	2b00      	cmp	r3, #0
 801b602:	f1a1 0404 	sub.w	r4, r1, #4
 801b606:	bfb8      	it	lt
 801b608:	18e4      	addlt	r4, r4, r3
 801b60a:	f000 f8e7 	bl	801b7dc <__malloc_lock>
 801b60e:	4a1e      	ldr	r2, [pc, #120]	; (801b688 <_free_r+0x94>)
 801b610:	9801      	ldr	r0, [sp, #4]
 801b612:	6813      	ldr	r3, [r2, #0]
 801b614:	b933      	cbnz	r3, 801b624 <_free_r+0x30>
 801b616:	6063      	str	r3, [r4, #4]
 801b618:	6014      	str	r4, [r2, #0]
 801b61a:	b003      	add	sp, #12
 801b61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b620:	f000 b8e2 	b.w	801b7e8 <__malloc_unlock>
 801b624:	42a3      	cmp	r3, r4
 801b626:	d908      	bls.n	801b63a <_free_r+0x46>
 801b628:	6825      	ldr	r5, [r4, #0]
 801b62a:	1961      	adds	r1, r4, r5
 801b62c:	428b      	cmp	r3, r1
 801b62e:	bf01      	itttt	eq
 801b630:	6819      	ldreq	r1, [r3, #0]
 801b632:	685b      	ldreq	r3, [r3, #4]
 801b634:	1949      	addeq	r1, r1, r5
 801b636:	6021      	streq	r1, [r4, #0]
 801b638:	e7ed      	b.n	801b616 <_free_r+0x22>
 801b63a:	461a      	mov	r2, r3
 801b63c:	685b      	ldr	r3, [r3, #4]
 801b63e:	b10b      	cbz	r3, 801b644 <_free_r+0x50>
 801b640:	42a3      	cmp	r3, r4
 801b642:	d9fa      	bls.n	801b63a <_free_r+0x46>
 801b644:	6811      	ldr	r1, [r2, #0]
 801b646:	1855      	adds	r5, r2, r1
 801b648:	42a5      	cmp	r5, r4
 801b64a:	d10b      	bne.n	801b664 <_free_r+0x70>
 801b64c:	6824      	ldr	r4, [r4, #0]
 801b64e:	4421      	add	r1, r4
 801b650:	1854      	adds	r4, r2, r1
 801b652:	42a3      	cmp	r3, r4
 801b654:	6011      	str	r1, [r2, #0]
 801b656:	d1e0      	bne.n	801b61a <_free_r+0x26>
 801b658:	681c      	ldr	r4, [r3, #0]
 801b65a:	685b      	ldr	r3, [r3, #4]
 801b65c:	6053      	str	r3, [r2, #4]
 801b65e:	440c      	add	r4, r1
 801b660:	6014      	str	r4, [r2, #0]
 801b662:	e7da      	b.n	801b61a <_free_r+0x26>
 801b664:	d902      	bls.n	801b66c <_free_r+0x78>
 801b666:	230c      	movs	r3, #12
 801b668:	6003      	str	r3, [r0, #0]
 801b66a:	e7d6      	b.n	801b61a <_free_r+0x26>
 801b66c:	6825      	ldr	r5, [r4, #0]
 801b66e:	1961      	adds	r1, r4, r5
 801b670:	428b      	cmp	r3, r1
 801b672:	bf04      	itt	eq
 801b674:	6819      	ldreq	r1, [r3, #0]
 801b676:	685b      	ldreq	r3, [r3, #4]
 801b678:	6063      	str	r3, [r4, #4]
 801b67a:	bf04      	itt	eq
 801b67c:	1949      	addeq	r1, r1, r5
 801b67e:	6021      	streq	r1, [r4, #0]
 801b680:	6054      	str	r4, [r2, #4]
 801b682:	e7ca      	b.n	801b61a <_free_r+0x26>
 801b684:	b003      	add	sp, #12
 801b686:	bd30      	pop	{r4, r5, pc}
 801b688:	2003d380 	.word	0x2003d380

0801b68c <malloc>:
 801b68c:	4b02      	ldr	r3, [pc, #8]	; (801b698 <malloc+0xc>)
 801b68e:	4601      	mov	r1, r0
 801b690:	6818      	ldr	r0, [r3, #0]
 801b692:	f000 b823 	b.w	801b6dc <_malloc_r>
 801b696:	bf00      	nop
 801b698:	20000088 	.word	0x20000088

0801b69c <sbrk_aligned>:
 801b69c:	b570      	push	{r4, r5, r6, lr}
 801b69e:	4e0e      	ldr	r6, [pc, #56]	; (801b6d8 <sbrk_aligned+0x3c>)
 801b6a0:	460c      	mov	r4, r1
 801b6a2:	6831      	ldr	r1, [r6, #0]
 801b6a4:	4605      	mov	r5, r0
 801b6a6:	b911      	cbnz	r1, 801b6ae <sbrk_aligned+0x12>
 801b6a8:	f000 fcbc 	bl	801c024 <_sbrk_r>
 801b6ac:	6030      	str	r0, [r6, #0]
 801b6ae:	4621      	mov	r1, r4
 801b6b0:	4628      	mov	r0, r5
 801b6b2:	f000 fcb7 	bl	801c024 <_sbrk_r>
 801b6b6:	1c43      	adds	r3, r0, #1
 801b6b8:	d00a      	beq.n	801b6d0 <sbrk_aligned+0x34>
 801b6ba:	1cc4      	adds	r4, r0, #3
 801b6bc:	f024 0403 	bic.w	r4, r4, #3
 801b6c0:	42a0      	cmp	r0, r4
 801b6c2:	d007      	beq.n	801b6d4 <sbrk_aligned+0x38>
 801b6c4:	1a21      	subs	r1, r4, r0
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	f000 fcac 	bl	801c024 <_sbrk_r>
 801b6cc:	3001      	adds	r0, #1
 801b6ce:	d101      	bne.n	801b6d4 <sbrk_aligned+0x38>
 801b6d0:	f04f 34ff 	mov.w	r4, #4294967295
 801b6d4:	4620      	mov	r0, r4
 801b6d6:	bd70      	pop	{r4, r5, r6, pc}
 801b6d8:	2003d384 	.word	0x2003d384

0801b6dc <_malloc_r>:
 801b6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6e0:	1ccd      	adds	r5, r1, #3
 801b6e2:	f025 0503 	bic.w	r5, r5, #3
 801b6e6:	3508      	adds	r5, #8
 801b6e8:	2d0c      	cmp	r5, #12
 801b6ea:	bf38      	it	cc
 801b6ec:	250c      	movcc	r5, #12
 801b6ee:	2d00      	cmp	r5, #0
 801b6f0:	4607      	mov	r7, r0
 801b6f2:	db01      	blt.n	801b6f8 <_malloc_r+0x1c>
 801b6f4:	42a9      	cmp	r1, r5
 801b6f6:	d905      	bls.n	801b704 <_malloc_r+0x28>
 801b6f8:	230c      	movs	r3, #12
 801b6fa:	603b      	str	r3, [r7, #0]
 801b6fc:	2600      	movs	r6, #0
 801b6fe:	4630      	mov	r0, r6
 801b700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b7d8 <_malloc_r+0xfc>
 801b708:	f000 f868 	bl	801b7dc <__malloc_lock>
 801b70c:	f8d8 3000 	ldr.w	r3, [r8]
 801b710:	461c      	mov	r4, r3
 801b712:	bb5c      	cbnz	r4, 801b76c <_malloc_r+0x90>
 801b714:	4629      	mov	r1, r5
 801b716:	4638      	mov	r0, r7
 801b718:	f7ff ffc0 	bl	801b69c <sbrk_aligned>
 801b71c:	1c43      	adds	r3, r0, #1
 801b71e:	4604      	mov	r4, r0
 801b720:	d155      	bne.n	801b7ce <_malloc_r+0xf2>
 801b722:	f8d8 4000 	ldr.w	r4, [r8]
 801b726:	4626      	mov	r6, r4
 801b728:	2e00      	cmp	r6, #0
 801b72a:	d145      	bne.n	801b7b8 <_malloc_r+0xdc>
 801b72c:	2c00      	cmp	r4, #0
 801b72e:	d048      	beq.n	801b7c2 <_malloc_r+0xe6>
 801b730:	6823      	ldr	r3, [r4, #0]
 801b732:	4631      	mov	r1, r6
 801b734:	4638      	mov	r0, r7
 801b736:	eb04 0903 	add.w	r9, r4, r3
 801b73a:	f000 fc73 	bl	801c024 <_sbrk_r>
 801b73e:	4581      	cmp	r9, r0
 801b740:	d13f      	bne.n	801b7c2 <_malloc_r+0xe6>
 801b742:	6821      	ldr	r1, [r4, #0]
 801b744:	1a6d      	subs	r5, r5, r1
 801b746:	4629      	mov	r1, r5
 801b748:	4638      	mov	r0, r7
 801b74a:	f7ff ffa7 	bl	801b69c <sbrk_aligned>
 801b74e:	3001      	adds	r0, #1
 801b750:	d037      	beq.n	801b7c2 <_malloc_r+0xe6>
 801b752:	6823      	ldr	r3, [r4, #0]
 801b754:	442b      	add	r3, r5
 801b756:	6023      	str	r3, [r4, #0]
 801b758:	f8d8 3000 	ldr.w	r3, [r8]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d038      	beq.n	801b7d2 <_malloc_r+0xf6>
 801b760:	685a      	ldr	r2, [r3, #4]
 801b762:	42a2      	cmp	r2, r4
 801b764:	d12b      	bne.n	801b7be <_malloc_r+0xe2>
 801b766:	2200      	movs	r2, #0
 801b768:	605a      	str	r2, [r3, #4]
 801b76a:	e00f      	b.n	801b78c <_malloc_r+0xb0>
 801b76c:	6822      	ldr	r2, [r4, #0]
 801b76e:	1b52      	subs	r2, r2, r5
 801b770:	d41f      	bmi.n	801b7b2 <_malloc_r+0xd6>
 801b772:	2a0b      	cmp	r2, #11
 801b774:	d917      	bls.n	801b7a6 <_malloc_r+0xca>
 801b776:	1961      	adds	r1, r4, r5
 801b778:	42a3      	cmp	r3, r4
 801b77a:	6025      	str	r5, [r4, #0]
 801b77c:	bf18      	it	ne
 801b77e:	6059      	strne	r1, [r3, #4]
 801b780:	6863      	ldr	r3, [r4, #4]
 801b782:	bf08      	it	eq
 801b784:	f8c8 1000 	streq.w	r1, [r8]
 801b788:	5162      	str	r2, [r4, r5]
 801b78a:	604b      	str	r3, [r1, #4]
 801b78c:	4638      	mov	r0, r7
 801b78e:	f104 060b 	add.w	r6, r4, #11
 801b792:	f000 f829 	bl	801b7e8 <__malloc_unlock>
 801b796:	f026 0607 	bic.w	r6, r6, #7
 801b79a:	1d23      	adds	r3, r4, #4
 801b79c:	1af2      	subs	r2, r6, r3
 801b79e:	d0ae      	beq.n	801b6fe <_malloc_r+0x22>
 801b7a0:	1b9b      	subs	r3, r3, r6
 801b7a2:	50a3      	str	r3, [r4, r2]
 801b7a4:	e7ab      	b.n	801b6fe <_malloc_r+0x22>
 801b7a6:	42a3      	cmp	r3, r4
 801b7a8:	6862      	ldr	r2, [r4, #4]
 801b7aa:	d1dd      	bne.n	801b768 <_malloc_r+0x8c>
 801b7ac:	f8c8 2000 	str.w	r2, [r8]
 801b7b0:	e7ec      	b.n	801b78c <_malloc_r+0xb0>
 801b7b2:	4623      	mov	r3, r4
 801b7b4:	6864      	ldr	r4, [r4, #4]
 801b7b6:	e7ac      	b.n	801b712 <_malloc_r+0x36>
 801b7b8:	4634      	mov	r4, r6
 801b7ba:	6876      	ldr	r6, [r6, #4]
 801b7bc:	e7b4      	b.n	801b728 <_malloc_r+0x4c>
 801b7be:	4613      	mov	r3, r2
 801b7c0:	e7cc      	b.n	801b75c <_malloc_r+0x80>
 801b7c2:	230c      	movs	r3, #12
 801b7c4:	603b      	str	r3, [r7, #0]
 801b7c6:	4638      	mov	r0, r7
 801b7c8:	f000 f80e 	bl	801b7e8 <__malloc_unlock>
 801b7cc:	e797      	b.n	801b6fe <_malloc_r+0x22>
 801b7ce:	6025      	str	r5, [r4, #0]
 801b7d0:	e7dc      	b.n	801b78c <_malloc_r+0xb0>
 801b7d2:	605b      	str	r3, [r3, #4]
 801b7d4:	deff      	udf	#255	; 0xff
 801b7d6:	bf00      	nop
 801b7d8:	2003d380 	.word	0x2003d380

0801b7dc <__malloc_lock>:
 801b7dc:	4801      	ldr	r0, [pc, #4]	; (801b7e4 <__malloc_lock+0x8>)
 801b7de:	f7ff beda 	b.w	801b596 <__retarget_lock_acquire_recursive>
 801b7e2:	bf00      	nop
 801b7e4:	2003d37c 	.word	0x2003d37c

0801b7e8 <__malloc_unlock>:
 801b7e8:	4801      	ldr	r0, [pc, #4]	; (801b7f0 <__malloc_unlock+0x8>)
 801b7ea:	f7ff bed5 	b.w	801b598 <__retarget_lock_release_recursive>
 801b7ee:	bf00      	nop
 801b7f0:	2003d37c 	.word	0x2003d37c

0801b7f4 <__sfputc_r>:
 801b7f4:	6893      	ldr	r3, [r2, #8]
 801b7f6:	3b01      	subs	r3, #1
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	b410      	push	{r4}
 801b7fc:	6093      	str	r3, [r2, #8]
 801b7fe:	da08      	bge.n	801b812 <__sfputc_r+0x1e>
 801b800:	6994      	ldr	r4, [r2, #24]
 801b802:	42a3      	cmp	r3, r4
 801b804:	db01      	blt.n	801b80a <__sfputc_r+0x16>
 801b806:	290a      	cmp	r1, #10
 801b808:	d103      	bne.n	801b812 <__sfputc_r+0x1e>
 801b80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b80e:	f7ff bd54 	b.w	801b2ba <__swbuf_r>
 801b812:	6813      	ldr	r3, [r2, #0]
 801b814:	1c58      	adds	r0, r3, #1
 801b816:	6010      	str	r0, [r2, #0]
 801b818:	7019      	strb	r1, [r3, #0]
 801b81a:	4608      	mov	r0, r1
 801b81c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b820:	4770      	bx	lr

0801b822 <__sfputs_r>:
 801b822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b824:	4606      	mov	r6, r0
 801b826:	460f      	mov	r7, r1
 801b828:	4614      	mov	r4, r2
 801b82a:	18d5      	adds	r5, r2, r3
 801b82c:	42ac      	cmp	r4, r5
 801b82e:	d101      	bne.n	801b834 <__sfputs_r+0x12>
 801b830:	2000      	movs	r0, #0
 801b832:	e007      	b.n	801b844 <__sfputs_r+0x22>
 801b834:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b838:	463a      	mov	r2, r7
 801b83a:	4630      	mov	r0, r6
 801b83c:	f7ff ffda 	bl	801b7f4 <__sfputc_r>
 801b840:	1c43      	adds	r3, r0, #1
 801b842:	d1f3      	bne.n	801b82c <__sfputs_r+0xa>
 801b844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b848 <_vfiprintf_r>:
 801b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b84c:	460d      	mov	r5, r1
 801b84e:	b09d      	sub	sp, #116	; 0x74
 801b850:	4614      	mov	r4, r2
 801b852:	4698      	mov	r8, r3
 801b854:	4606      	mov	r6, r0
 801b856:	b118      	cbz	r0, 801b860 <_vfiprintf_r+0x18>
 801b858:	6a03      	ldr	r3, [r0, #32]
 801b85a:	b90b      	cbnz	r3, 801b860 <_vfiprintf_r+0x18>
 801b85c:	f7ff fc46 	bl	801b0ec <__sinit>
 801b860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b862:	07d9      	lsls	r1, r3, #31
 801b864:	d405      	bmi.n	801b872 <_vfiprintf_r+0x2a>
 801b866:	89ab      	ldrh	r3, [r5, #12]
 801b868:	059a      	lsls	r2, r3, #22
 801b86a:	d402      	bmi.n	801b872 <_vfiprintf_r+0x2a>
 801b86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b86e:	f7ff fe92 	bl	801b596 <__retarget_lock_acquire_recursive>
 801b872:	89ab      	ldrh	r3, [r5, #12]
 801b874:	071b      	lsls	r3, r3, #28
 801b876:	d501      	bpl.n	801b87c <_vfiprintf_r+0x34>
 801b878:	692b      	ldr	r3, [r5, #16]
 801b87a:	b99b      	cbnz	r3, 801b8a4 <_vfiprintf_r+0x5c>
 801b87c:	4629      	mov	r1, r5
 801b87e:	4630      	mov	r0, r6
 801b880:	f7ff fd58 	bl	801b334 <__swsetup_r>
 801b884:	b170      	cbz	r0, 801b8a4 <_vfiprintf_r+0x5c>
 801b886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b888:	07dc      	lsls	r4, r3, #31
 801b88a:	d504      	bpl.n	801b896 <_vfiprintf_r+0x4e>
 801b88c:	f04f 30ff 	mov.w	r0, #4294967295
 801b890:	b01d      	add	sp, #116	; 0x74
 801b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b896:	89ab      	ldrh	r3, [r5, #12]
 801b898:	0598      	lsls	r0, r3, #22
 801b89a:	d4f7      	bmi.n	801b88c <_vfiprintf_r+0x44>
 801b89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b89e:	f7ff fe7b 	bl	801b598 <__retarget_lock_release_recursive>
 801b8a2:	e7f3      	b.n	801b88c <_vfiprintf_r+0x44>
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8a8:	2320      	movs	r3, #32
 801b8aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b8ae:	f8cd 800c 	str.w	r8, [sp, #12]
 801b8b2:	2330      	movs	r3, #48	; 0x30
 801b8b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ba68 <_vfiprintf_r+0x220>
 801b8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b8bc:	f04f 0901 	mov.w	r9, #1
 801b8c0:	4623      	mov	r3, r4
 801b8c2:	469a      	mov	sl, r3
 801b8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b8c8:	b10a      	cbz	r2, 801b8ce <_vfiprintf_r+0x86>
 801b8ca:	2a25      	cmp	r2, #37	; 0x25
 801b8cc:	d1f9      	bne.n	801b8c2 <_vfiprintf_r+0x7a>
 801b8ce:	ebba 0b04 	subs.w	fp, sl, r4
 801b8d2:	d00b      	beq.n	801b8ec <_vfiprintf_r+0xa4>
 801b8d4:	465b      	mov	r3, fp
 801b8d6:	4622      	mov	r2, r4
 801b8d8:	4629      	mov	r1, r5
 801b8da:	4630      	mov	r0, r6
 801b8dc:	f7ff ffa1 	bl	801b822 <__sfputs_r>
 801b8e0:	3001      	adds	r0, #1
 801b8e2:	f000 80a9 	beq.w	801ba38 <_vfiprintf_r+0x1f0>
 801b8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8e8:	445a      	add	r2, fp
 801b8ea:	9209      	str	r2, [sp, #36]	; 0x24
 801b8ec:	f89a 3000 	ldrb.w	r3, [sl]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	f000 80a1 	beq.w	801ba38 <_vfiprintf_r+0x1f0>
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	f04f 32ff 	mov.w	r2, #4294967295
 801b8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b900:	f10a 0a01 	add.w	sl, sl, #1
 801b904:	9304      	str	r3, [sp, #16]
 801b906:	9307      	str	r3, [sp, #28]
 801b908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b90c:	931a      	str	r3, [sp, #104]	; 0x68
 801b90e:	4654      	mov	r4, sl
 801b910:	2205      	movs	r2, #5
 801b912:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b916:	4854      	ldr	r0, [pc, #336]	; (801ba68 <_vfiprintf_r+0x220>)
 801b918:	f7e4 fc9a 	bl	8000250 <memchr>
 801b91c:	9a04      	ldr	r2, [sp, #16]
 801b91e:	b9d8      	cbnz	r0, 801b958 <_vfiprintf_r+0x110>
 801b920:	06d1      	lsls	r1, r2, #27
 801b922:	bf44      	itt	mi
 801b924:	2320      	movmi	r3, #32
 801b926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b92a:	0713      	lsls	r3, r2, #28
 801b92c:	bf44      	itt	mi
 801b92e:	232b      	movmi	r3, #43	; 0x2b
 801b930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b934:	f89a 3000 	ldrb.w	r3, [sl]
 801b938:	2b2a      	cmp	r3, #42	; 0x2a
 801b93a:	d015      	beq.n	801b968 <_vfiprintf_r+0x120>
 801b93c:	9a07      	ldr	r2, [sp, #28]
 801b93e:	4654      	mov	r4, sl
 801b940:	2000      	movs	r0, #0
 801b942:	f04f 0c0a 	mov.w	ip, #10
 801b946:	4621      	mov	r1, r4
 801b948:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b94c:	3b30      	subs	r3, #48	; 0x30
 801b94e:	2b09      	cmp	r3, #9
 801b950:	d94d      	bls.n	801b9ee <_vfiprintf_r+0x1a6>
 801b952:	b1b0      	cbz	r0, 801b982 <_vfiprintf_r+0x13a>
 801b954:	9207      	str	r2, [sp, #28]
 801b956:	e014      	b.n	801b982 <_vfiprintf_r+0x13a>
 801b958:	eba0 0308 	sub.w	r3, r0, r8
 801b95c:	fa09 f303 	lsl.w	r3, r9, r3
 801b960:	4313      	orrs	r3, r2
 801b962:	9304      	str	r3, [sp, #16]
 801b964:	46a2      	mov	sl, r4
 801b966:	e7d2      	b.n	801b90e <_vfiprintf_r+0xc6>
 801b968:	9b03      	ldr	r3, [sp, #12]
 801b96a:	1d19      	adds	r1, r3, #4
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	9103      	str	r1, [sp, #12]
 801b970:	2b00      	cmp	r3, #0
 801b972:	bfbb      	ittet	lt
 801b974:	425b      	neglt	r3, r3
 801b976:	f042 0202 	orrlt.w	r2, r2, #2
 801b97a:	9307      	strge	r3, [sp, #28]
 801b97c:	9307      	strlt	r3, [sp, #28]
 801b97e:	bfb8      	it	lt
 801b980:	9204      	strlt	r2, [sp, #16]
 801b982:	7823      	ldrb	r3, [r4, #0]
 801b984:	2b2e      	cmp	r3, #46	; 0x2e
 801b986:	d10c      	bne.n	801b9a2 <_vfiprintf_r+0x15a>
 801b988:	7863      	ldrb	r3, [r4, #1]
 801b98a:	2b2a      	cmp	r3, #42	; 0x2a
 801b98c:	d134      	bne.n	801b9f8 <_vfiprintf_r+0x1b0>
 801b98e:	9b03      	ldr	r3, [sp, #12]
 801b990:	1d1a      	adds	r2, r3, #4
 801b992:	681b      	ldr	r3, [r3, #0]
 801b994:	9203      	str	r2, [sp, #12]
 801b996:	2b00      	cmp	r3, #0
 801b998:	bfb8      	it	lt
 801b99a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b99e:	3402      	adds	r4, #2
 801b9a0:	9305      	str	r3, [sp, #20]
 801b9a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ba78 <_vfiprintf_r+0x230>
 801b9a6:	7821      	ldrb	r1, [r4, #0]
 801b9a8:	2203      	movs	r2, #3
 801b9aa:	4650      	mov	r0, sl
 801b9ac:	f7e4 fc50 	bl	8000250 <memchr>
 801b9b0:	b138      	cbz	r0, 801b9c2 <_vfiprintf_r+0x17a>
 801b9b2:	9b04      	ldr	r3, [sp, #16]
 801b9b4:	eba0 000a 	sub.w	r0, r0, sl
 801b9b8:	2240      	movs	r2, #64	; 0x40
 801b9ba:	4082      	lsls	r2, r0
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	3401      	adds	r4, #1
 801b9c0:	9304      	str	r3, [sp, #16]
 801b9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9c6:	4829      	ldr	r0, [pc, #164]	; (801ba6c <_vfiprintf_r+0x224>)
 801b9c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b9cc:	2206      	movs	r2, #6
 801b9ce:	f7e4 fc3f 	bl	8000250 <memchr>
 801b9d2:	2800      	cmp	r0, #0
 801b9d4:	d03f      	beq.n	801ba56 <_vfiprintf_r+0x20e>
 801b9d6:	4b26      	ldr	r3, [pc, #152]	; (801ba70 <_vfiprintf_r+0x228>)
 801b9d8:	bb1b      	cbnz	r3, 801ba22 <_vfiprintf_r+0x1da>
 801b9da:	9b03      	ldr	r3, [sp, #12]
 801b9dc:	3307      	adds	r3, #7
 801b9de:	f023 0307 	bic.w	r3, r3, #7
 801b9e2:	3308      	adds	r3, #8
 801b9e4:	9303      	str	r3, [sp, #12]
 801b9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9e8:	443b      	add	r3, r7
 801b9ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b9ec:	e768      	b.n	801b8c0 <_vfiprintf_r+0x78>
 801b9ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9f2:	460c      	mov	r4, r1
 801b9f4:	2001      	movs	r0, #1
 801b9f6:	e7a6      	b.n	801b946 <_vfiprintf_r+0xfe>
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	3401      	adds	r4, #1
 801b9fc:	9305      	str	r3, [sp, #20]
 801b9fe:	4619      	mov	r1, r3
 801ba00:	f04f 0c0a 	mov.w	ip, #10
 801ba04:	4620      	mov	r0, r4
 801ba06:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba0a:	3a30      	subs	r2, #48	; 0x30
 801ba0c:	2a09      	cmp	r2, #9
 801ba0e:	d903      	bls.n	801ba18 <_vfiprintf_r+0x1d0>
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d0c6      	beq.n	801b9a2 <_vfiprintf_r+0x15a>
 801ba14:	9105      	str	r1, [sp, #20]
 801ba16:	e7c4      	b.n	801b9a2 <_vfiprintf_r+0x15a>
 801ba18:	fb0c 2101 	mla	r1, ip, r1, r2
 801ba1c:	4604      	mov	r4, r0
 801ba1e:	2301      	movs	r3, #1
 801ba20:	e7f0      	b.n	801ba04 <_vfiprintf_r+0x1bc>
 801ba22:	ab03      	add	r3, sp, #12
 801ba24:	9300      	str	r3, [sp, #0]
 801ba26:	462a      	mov	r2, r5
 801ba28:	4b12      	ldr	r3, [pc, #72]	; (801ba74 <_vfiprintf_r+0x22c>)
 801ba2a:	a904      	add	r1, sp, #16
 801ba2c:	4630      	mov	r0, r6
 801ba2e:	f3af 8000 	nop.w
 801ba32:	4607      	mov	r7, r0
 801ba34:	1c78      	adds	r0, r7, #1
 801ba36:	d1d6      	bne.n	801b9e6 <_vfiprintf_r+0x19e>
 801ba38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ba3a:	07d9      	lsls	r1, r3, #31
 801ba3c:	d405      	bmi.n	801ba4a <_vfiprintf_r+0x202>
 801ba3e:	89ab      	ldrh	r3, [r5, #12]
 801ba40:	059a      	lsls	r2, r3, #22
 801ba42:	d402      	bmi.n	801ba4a <_vfiprintf_r+0x202>
 801ba44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ba46:	f7ff fda7 	bl	801b598 <__retarget_lock_release_recursive>
 801ba4a:	89ab      	ldrh	r3, [r5, #12]
 801ba4c:	065b      	lsls	r3, r3, #25
 801ba4e:	f53f af1d 	bmi.w	801b88c <_vfiprintf_r+0x44>
 801ba52:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba54:	e71c      	b.n	801b890 <_vfiprintf_r+0x48>
 801ba56:	ab03      	add	r3, sp, #12
 801ba58:	9300      	str	r3, [sp, #0]
 801ba5a:	462a      	mov	r2, r5
 801ba5c:	4b05      	ldr	r3, [pc, #20]	; (801ba74 <_vfiprintf_r+0x22c>)
 801ba5e:	a904      	add	r1, sp, #16
 801ba60:	4630      	mov	r0, r6
 801ba62:	f000 f879 	bl	801bb58 <_printf_i>
 801ba66:	e7e4      	b.n	801ba32 <_vfiprintf_r+0x1ea>
 801ba68:	0801ff8b 	.word	0x0801ff8b
 801ba6c:	0801ff95 	.word	0x0801ff95
 801ba70:	00000000 	.word	0x00000000
 801ba74:	0801b823 	.word	0x0801b823
 801ba78:	0801ff91 	.word	0x0801ff91

0801ba7c <_printf_common>:
 801ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba80:	4616      	mov	r6, r2
 801ba82:	4699      	mov	r9, r3
 801ba84:	688a      	ldr	r2, [r1, #8]
 801ba86:	690b      	ldr	r3, [r1, #16]
 801ba88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	bfb8      	it	lt
 801ba90:	4613      	movlt	r3, r2
 801ba92:	6033      	str	r3, [r6, #0]
 801ba94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ba98:	4607      	mov	r7, r0
 801ba9a:	460c      	mov	r4, r1
 801ba9c:	b10a      	cbz	r2, 801baa2 <_printf_common+0x26>
 801ba9e:	3301      	adds	r3, #1
 801baa0:	6033      	str	r3, [r6, #0]
 801baa2:	6823      	ldr	r3, [r4, #0]
 801baa4:	0699      	lsls	r1, r3, #26
 801baa6:	bf42      	ittt	mi
 801baa8:	6833      	ldrmi	r3, [r6, #0]
 801baaa:	3302      	addmi	r3, #2
 801baac:	6033      	strmi	r3, [r6, #0]
 801baae:	6825      	ldr	r5, [r4, #0]
 801bab0:	f015 0506 	ands.w	r5, r5, #6
 801bab4:	d106      	bne.n	801bac4 <_printf_common+0x48>
 801bab6:	f104 0a19 	add.w	sl, r4, #25
 801baba:	68e3      	ldr	r3, [r4, #12]
 801babc:	6832      	ldr	r2, [r6, #0]
 801babe:	1a9b      	subs	r3, r3, r2
 801bac0:	42ab      	cmp	r3, r5
 801bac2:	dc26      	bgt.n	801bb12 <_printf_common+0x96>
 801bac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bac8:	1e13      	subs	r3, r2, #0
 801baca:	6822      	ldr	r2, [r4, #0]
 801bacc:	bf18      	it	ne
 801bace:	2301      	movne	r3, #1
 801bad0:	0692      	lsls	r2, r2, #26
 801bad2:	d42b      	bmi.n	801bb2c <_printf_common+0xb0>
 801bad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bad8:	4649      	mov	r1, r9
 801bada:	4638      	mov	r0, r7
 801badc:	47c0      	blx	r8
 801bade:	3001      	adds	r0, #1
 801bae0:	d01e      	beq.n	801bb20 <_printf_common+0xa4>
 801bae2:	6823      	ldr	r3, [r4, #0]
 801bae4:	6922      	ldr	r2, [r4, #16]
 801bae6:	f003 0306 	and.w	r3, r3, #6
 801baea:	2b04      	cmp	r3, #4
 801baec:	bf02      	ittt	eq
 801baee:	68e5      	ldreq	r5, [r4, #12]
 801baf0:	6833      	ldreq	r3, [r6, #0]
 801baf2:	1aed      	subeq	r5, r5, r3
 801baf4:	68a3      	ldr	r3, [r4, #8]
 801baf6:	bf0c      	ite	eq
 801baf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bafc:	2500      	movne	r5, #0
 801bafe:	4293      	cmp	r3, r2
 801bb00:	bfc4      	itt	gt
 801bb02:	1a9b      	subgt	r3, r3, r2
 801bb04:	18ed      	addgt	r5, r5, r3
 801bb06:	2600      	movs	r6, #0
 801bb08:	341a      	adds	r4, #26
 801bb0a:	42b5      	cmp	r5, r6
 801bb0c:	d11a      	bne.n	801bb44 <_printf_common+0xc8>
 801bb0e:	2000      	movs	r0, #0
 801bb10:	e008      	b.n	801bb24 <_printf_common+0xa8>
 801bb12:	2301      	movs	r3, #1
 801bb14:	4652      	mov	r2, sl
 801bb16:	4649      	mov	r1, r9
 801bb18:	4638      	mov	r0, r7
 801bb1a:	47c0      	blx	r8
 801bb1c:	3001      	adds	r0, #1
 801bb1e:	d103      	bne.n	801bb28 <_printf_common+0xac>
 801bb20:	f04f 30ff 	mov.w	r0, #4294967295
 801bb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb28:	3501      	adds	r5, #1
 801bb2a:	e7c6      	b.n	801baba <_printf_common+0x3e>
 801bb2c:	18e1      	adds	r1, r4, r3
 801bb2e:	1c5a      	adds	r2, r3, #1
 801bb30:	2030      	movs	r0, #48	; 0x30
 801bb32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bb36:	4422      	add	r2, r4
 801bb38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bb3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bb40:	3302      	adds	r3, #2
 801bb42:	e7c7      	b.n	801bad4 <_printf_common+0x58>
 801bb44:	2301      	movs	r3, #1
 801bb46:	4622      	mov	r2, r4
 801bb48:	4649      	mov	r1, r9
 801bb4a:	4638      	mov	r0, r7
 801bb4c:	47c0      	blx	r8
 801bb4e:	3001      	adds	r0, #1
 801bb50:	d0e6      	beq.n	801bb20 <_printf_common+0xa4>
 801bb52:	3601      	adds	r6, #1
 801bb54:	e7d9      	b.n	801bb0a <_printf_common+0x8e>
	...

0801bb58 <_printf_i>:
 801bb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb5c:	7e0f      	ldrb	r7, [r1, #24]
 801bb5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bb60:	2f78      	cmp	r7, #120	; 0x78
 801bb62:	4691      	mov	r9, r2
 801bb64:	4680      	mov	r8, r0
 801bb66:	460c      	mov	r4, r1
 801bb68:	469a      	mov	sl, r3
 801bb6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bb6e:	d807      	bhi.n	801bb80 <_printf_i+0x28>
 801bb70:	2f62      	cmp	r7, #98	; 0x62
 801bb72:	d80a      	bhi.n	801bb8a <_printf_i+0x32>
 801bb74:	2f00      	cmp	r7, #0
 801bb76:	f000 80d4 	beq.w	801bd22 <_printf_i+0x1ca>
 801bb7a:	2f58      	cmp	r7, #88	; 0x58
 801bb7c:	f000 80c0 	beq.w	801bd00 <_printf_i+0x1a8>
 801bb80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bb88:	e03a      	b.n	801bc00 <_printf_i+0xa8>
 801bb8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bb8e:	2b15      	cmp	r3, #21
 801bb90:	d8f6      	bhi.n	801bb80 <_printf_i+0x28>
 801bb92:	a101      	add	r1, pc, #4	; (adr r1, 801bb98 <_printf_i+0x40>)
 801bb94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bb98:	0801bbf1 	.word	0x0801bbf1
 801bb9c:	0801bc05 	.word	0x0801bc05
 801bba0:	0801bb81 	.word	0x0801bb81
 801bba4:	0801bb81 	.word	0x0801bb81
 801bba8:	0801bb81 	.word	0x0801bb81
 801bbac:	0801bb81 	.word	0x0801bb81
 801bbb0:	0801bc05 	.word	0x0801bc05
 801bbb4:	0801bb81 	.word	0x0801bb81
 801bbb8:	0801bb81 	.word	0x0801bb81
 801bbbc:	0801bb81 	.word	0x0801bb81
 801bbc0:	0801bb81 	.word	0x0801bb81
 801bbc4:	0801bd09 	.word	0x0801bd09
 801bbc8:	0801bc31 	.word	0x0801bc31
 801bbcc:	0801bcc3 	.word	0x0801bcc3
 801bbd0:	0801bb81 	.word	0x0801bb81
 801bbd4:	0801bb81 	.word	0x0801bb81
 801bbd8:	0801bd2b 	.word	0x0801bd2b
 801bbdc:	0801bb81 	.word	0x0801bb81
 801bbe0:	0801bc31 	.word	0x0801bc31
 801bbe4:	0801bb81 	.word	0x0801bb81
 801bbe8:	0801bb81 	.word	0x0801bb81
 801bbec:	0801bccb 	.word	0x0801bccb
 801bbf0:	682b      	ldr	r3, [r5, #0]
 801bbf2:	1d1a      	adds	r2, r3, #4
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	602a      	str	r2, [r5, #0]
 801bbf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bbfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bc00:	2301      	movs	r3, #1
 801bc02:	e09f      	b.n	801bd44 <_printf_i+0x1ec>
 801bc04:	6820      	ldr	r0, [r4, #0]
 801bc06:	682b      	ldr	r3, [r5, #0]
 801bc08:	0607      	lsls	r7, r0, #24
 801bc0a:	f103 0104 	add.w	r1, r3, #4
 801bc0e:	6029      	str	r1, [r5, #0]
 801bc10:	d501      	bpl.n	801bc16 <_printf_i+0xbe>
 801bc12:	681e      	ldr	r6, [r3, #0]
 801bc14:	e003      	b.n	801bc1e <_printf_i+0xc6>
 801bc16:	0646      	lsls	r6, r0, #25
 801bc18:	d5fb      	bpl.n	801bc12 <_printf_i+0xba>
 801bc1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bc1e:	2e00      	cmp	r6, #0
 801bc20:	da03      	bge.n	801bc2a <_printf_i+0xd2>
 801bc22:	232d      	movs	r3, #45	; 0x2d
 801bc24:	4276      	negs	r6, r6
 801bc26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc2a:	485a      	ldr	r0, [pc, #360]	; (801bd94 <_printf_i+0x23c>)
 801bc2c:	230a      	movs	r3, #10
 801bc2e:	e012      	b.n	801bc56 <_printf_i+0xfe>
 801bc30:	682b      	ldr	r3, [r5, #0]
 801bc32:	6820      	ldr	r0, [r4, #0]
 801bc34:	1d19      	adds	r1, r3, #4
 801bc36:	6029      	str	r1, [r5, #0]
 801bc38:	0605      	lsls	r5, r0, #24
 801bc3a:	d501      	bpl.n	801bc40 <_printf_i+0xe8>
 801bc3c:	681e      	ldr	r6, [r3, #0]
 801bc3e:	e002      	b.n	801bc46 <_printf_i+0xee>
 801bc40:	0641      	lsls	r1, r0, #25
 801bc42:	d5fb      	bpl.n	801bc3c <_printf_i+0xe4>
 801bc44:	881e      	ldrh	r6, [r3, #0]
 801bc46:	4853      	ldr	r0, [pc, #332]	; (801bd94 <_printf_i+0x23c>)
 801bc48:	2f6f      	cmp	r7, #111	; 0x6f
 801bc4a:	bf0c      	ite	eq
 801bc4c:	2308      	moveq	r3, #8
 801bc4e:	230a      	movne	r3, #10
 801bc50:	2100      	movs	r1, #0
 801bc52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bc56:	6865      	ldr	r5, [r4, #4]
 801bc58:	60a5      	str	r5, [r4, #8]
 801bc5a:	2d00      	cmp	r5, #0
 801bc5c:	bfa2      	ittt	ge
 801bc5e:	6821      	ldrge	r1, [r4, #0]
 801bc60:	f021 0104 	bicge.w	r1, r1, #4
 801bc64:	6021      	strge	r1, [r4, #0]
 801bc66:	b90e      	cbnz	r6, 801bc6c <_printf_i+0x114>
 801bc68:	2d00      	cmp	r5, #0
 801bc6a:	d04b      	beq.n	801bd04 <_printf_i+0x1ac>
 801bc6c:	4615      	mov	r5, r2
 801bc6e:	fbb6 f1f3 	udiv	r1, r6, r3
 801bc72:	fb03 6711 	mls	r7, r3, r1, r6
 801bc76:	5dc7      	ldrb	r7, [r0, r7]
 801bc78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bc7c:	4637      	mov	r7, r6
 801bc7e:	42bb      	cmp	r3, r7
 801bc80:	460e      	mov	r6, r1
 801bc82:	d9f4      	bls.n	801bc6e <_printf_i+0x116>
 801bc84:	2b08      	cmp	r3, #8
 801bc86:	d10b      	bne.n	801bca0 <_printf_i+0x148>
 801bc88:	6823      	ldr	r3, [r4, #0]
 801bc8a:	07de      	lsls	r6, r3, #31
 801bc8c:	d508      	bpl.n	801bca0 <_printf_i+0x148>
 801bc8e:	6923      	ldr	r3, [r4, #16]
 801bc90:	6861      	ldr	r1, [r4, #4]
 801bc92:	4299      	cmp	r1, r3
 801bc94:	bfde      	ittt	le
 801bc96:	2330      	movle	r3, #48	; 0x30
 801bc98:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bc9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bca0:	1b52      	subs	r2, r2, r5
 801bca2:	6122      	str	r2, [r4, #16]
 801bca4:	f8cd a000 	str.w	sl, [sp]
 801bca8:	464b      	mov	r3, r9
 801bcaa:	aa03      	add	r2, sp, #12
 801bcac:	4621      	mov	r1, r4
 801bcae:	4640      	mov	r0, r8
 801bcb0:	f7ff fee4 	bl	801ba7c <_printf_common>
 801bcb4:	3001      	adds	r0, #1
 801bcb6:	d14a      	bne.n	801bd4e <_printf_i+0x1f6>
 801bcb8:	f04f 30ff 	mov.w	r0, #4294967295
 801bcbc:	b004      	add	sp, #16
 801bcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcc2:	6823      	ldr	r3, [r4, #0]
 801bcc4:	f043 0320 	orr.w	r3, r3, #32
 801bcc8:	6023      	str	r3, [r4, #0]
 801bcca:	4833      	ldr	r0, [pc, #204]	; (801bd98 <_printf_i+0x240>)
 801bccc:	2778      	movs	r7, #120	; 0x78
 801bcce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bcd2:	6823      	ldr	r3, [r4, #0]
 801bcd4:	6829      	ldr	r1, [r5, #0]
 801bcd6:	061f      	lsls	r7, r3, #24
 801bcd8:	f851 6b04 	ldr.w	r6, [r1], #4
 801bcdc:	d402      	bmi.n	801bce4 <_printf_i+0x18c>
 801bcde:	065f      	lsls	r7, r3, #25
 801bce0:	bf48      	it	mi
 801bce2:	b2b6      	uxthmi	r6, r6
 801bce4:	07df      	lsls	r7, r3, #31
 801bce6:	bf48      	it	mi
 801bce8:	f043 0320 	orrmi.w	r3, r3, #32
 801bcec:	6029      	str	r1, [r5, #0]
 801bcee:	bf48      	it	mi
 801bcf0:	6023      	strmi	r3, [r4, #0]
 801bcf2:	b91e      	cbnz	r6, 801bcfc <_printf_i+0x1a4>
 801bcf4:	6823      	ldr	r3, [r4, #0]
 801bcf6:	f023 0320 	bic.w	r3, r3, #32
 801bcfa:	6023      	str	r3, [r4, #0]
 801bcfc:	2310      	movs	r3, #16
 801bcfe:	e7a7      	b.n	801bc50 <_printf_i+0xf8>
 801bd00:	4824      	ldr	r0, [pc, #144]	; (801bd94 <_printf_i+0x23c>)
 801bd02:	e7e4      	b.n	801bcce <_printf_i+0x176>
 801bd04:	4615      	mov	r5, r2
 801bd06:	e7bd      	b.n	801bc84 <_printf_i+0x12c>
 801bd08:	682b      	ldr	r3, [r5, #0]
 801bd0a:	6826      	ldr	r6, [r4, #0]
 801bd0c:	6961      	ldr	r1, [r4, #20]
 801bd0e:	1d18      	adds	r0, r3, #4
 801bd10:	6028      	str	r0, [r5, #0]
 801bd12:	0635      	lsls	r5, r6, #24
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	d501      	bpl.n	801bd1c <_printf_i+0x1c4>
 801bd18:	6019      	str	r1, [r3, #0]
 801bd1a:	e002      	b.n	801bd22 <_printf_i+0x1ca>
 801bd1c:	0670      	lsls	r0, r6, #25
 801bd1e:	d5fb      	bpl.n	801bd18 <_printf_i+0x1c0>
 801bd20:	8019      	strh	r1, [r3, #0]
 801bd22:	2300      	movs	r3, #0
 801bd24:	6123      	str	r3, [r4, #16]
 801bd26:	4615      	mov	r5, r2
 801bd28:	e7bc      	b.n	801bca4 <_printf_i+0x14c>
 801bd2a:	682b      	ldr	r3, [r5, #0]
 801bd2c:	1d1a      	adds	r2, r3, #4
 801bd2e:	602a      	str	r2, [r5, #0]
 801bd30:	681d      	ldr	r5, [r3, #0]
 801bd32:	6862      	ldr	r2, [r4, #4]
 801bd34:	2100      	movs	r1, #0
 801bd36:	4628      	mov	r0, r5
 801bd38:	f7e4 fa8a 	bl	8000250 <memchr>
 801bd3c:	b108      	cbz	r0, 801bd42 <_printf_i+0x1ea>
 801bd3e:	1b40      	subs	r0, r0, r5
 801bd40:	6060      	str	r0, [r4, #4]
 801bd42:	6863      	ldr	r3, [r4, #4]
 801bd44:	6123      	str	r3, [r4, #16]
 801bd46:	2300      	movs	r3, #0
 801bd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd4c:	e7aa      	b.n	801bca4 <_printf_i+0x14c>
 801bd4e:	6923      	ldr	r3, [r4, #16]
 801bd50:	462a      	mov	r2, r5
 801bd52:	4649      	mov	r1, r9
 801bd54:	4640      	mov	r0, r8
 801bd56:	47d0      	blx	sl
 801bd58:	3001      	adds	r0, #1
 801bd5a:	d0ad      	beq.n	801bcb8 <_printf_i+0x160>
 801bd5c:	6823      	ldr	r3, [r4, #0]
 801bd5e:	079b      	lsls	r3, r3, #30
 801bd60:	d413      	bmi.n	801bd8a <_printf_i+0x232>
 801bd62:	68e0      	ldr	r0, [r4, #12]
 801bd64:	9b03      	ldr	r3, [sp, #12]
 801bd66:	4298      	cmp	r0, r3
 801bd68:	bfb8      	it	lt
 801bd6a:	4618      	movlt	r0, r3
 801bd6c:	e7a6      	b.n	801bcbc <_printf_i+0x164>
 801bd6e:	2301      	movs	r3, #1
 801bd70:	4632      	mov	r2, r6
 801bd72:	4649      	mov	r1, r9
 801bd74:	4640      	mov	r0, r8
 801bd76:	47d0      	blx	sl
 801bd78:	3001      	adds	r0, #1
 801bd7a:	d09d      	beq.n	801bcb8 <_printf_i+0x160>
 801bd7c:	3501      	adds	r5, #1
 801bd7e:	68e3      	ldr	r3, [r4, #12]
 801bd80:	9903      	ldr	r1, [sp, #12]
 801bd82:	1a5b      	subs	r3, r3, r1
 801bd84:	42ab      	cmp	r3, r5
 801bd86:	dcf2      	bgt.n	801bd6e <_printf_i+0x216>
 801bd88:	e7eb      	b.n	801bd62 <_printf_i+0x20a>
 801bd8a:	2500      	movs	r5, #0
 801bd8c:	f104 0619 	add.w	r6, r4, #25
 801bd90:	e7f5      	b.n	801bd7e <_printf_i+0x226>
 801bd92:	bf00      	nop
 801bd94:	0801ff9c 	.word	0x0801ff9c
 801bd98:	0801ffad 	.word	0x0801ffad

0801bd9c <__sflush_r>:
 801bd9c:	898a      	ldrh	r2, [r1, #12]
 801bd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bda2:	4605      	mov	r5, r0
 801bda4:	0710      	lsls	r0, r2, #28
 801bda6:	460c      	mov	r4, r1
 801bda8:	d458      	bmi.n	801be5c <__sflush_r+0xc0>
 801bdaa:	684b      	ldr	r3, [r1, #4]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	dc05      	bgt.n	801bdbc <__sflush_r+0x20>
 801bdb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	dc02      	bgt.n	801bdbc <__sflush_r+0x20>
 801bdb6:	2000      	movs	r0, #0
 801bdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bdbe:	2e00      	cmp	r6, #0
 801bdc0:	d0f9      	beq.n	801bdb6 <__sflush_r+0x1a>
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bdc8:	682f      	ldr	r7, [r5, #0]
 801bdca:	6a21      	ldr	r1, [r4, #32]
 801bdcc:	602b      	str	r3, [r5, #0]
 801bdce:	d032      	beq.n	801be36 <__sflush_r+0x9a>
 801bdd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bdd2:	89a3      	ldrh	r3, [r4, #12]
 801bdd4:	075a      	lsls	r2, r3, #29
 801bdd6:	d505      	bpl.n	801bde4 <__sflush_r+0x48>
 801bdd8:	6863      	ldr	r3, [r4, #4]
 801bdda:	1ac0      	subs	r0, r0, r3
 801bddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bdde:	b10b      	cbz	r3, 801bde4 <__sflush_r+0x48>
 801bde0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bde2:	1ac0      	subs	r0, r0, r3
 801bde4:	2300      	movs	r3, #0
 801bde6:	4602      	mov	r2, r0
 801bde8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bdea:	6a21      	ldr	r1, [r4, #32]
 801bdec:	4628      	mov	r0, r5
 801bdee:	47b0      	blx	r6
 801bdf0:	1c43      	adds	r3, r0, #1
 801bdf2:	89a3      	ldrh	r3, [r4, #12]
 801bdf4:	d106      	bne.n	801be04 <__sflush_r+0x68>
 801bdf6:	6829      	ldr	r1, [r5, #0]
 801bdf8:	291d      	cmp	r1, #29
 801bdfa:	d82b      	bhi.n	801be54 <__sflush_r+0xb8>
 801bdfc:	4a29      	ldr	r2, [pc, #164]	; (801bea4 <__sflush_r+0x108>)
 801bdfe:	410a      	asrs	r2, r1
 801be00:	07d6      	lsls	r6, r2, #31
 801be02:	d427      	bmi.n	801be54 <__sflush_r+0xb8>
 801be04:	2200      	movs	r2, #0
 801be06:	6062      	str	r2, [r4, #4]
 801be08:	04d9      	lsls	r1, r3, #19
 801be0a:	6922      	ldr	r2, [r4, #16]
 801be0c:	6022      	str	r2, [r4, #0]
 801be0e:	d504      	bpl.n	801be1a <__sflush_r+0x7e>
 801be10:	1c42      	adds	r2, r0, #1
 801be12:	d101      	bne.n	801be18 <__sflush_r+0x7c>
 801be14:	682b      	ldr	r3, [r5, #0]
 801be16:	b903      	cbnz	r3, 801be1a <__sflush_r+0x7e>
 801be18:	6560      	str	r0, [r4, #84]	; 0x54
 801be1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be1c:	602f      	str	r7, [r5, #0]
 801be1e:	2900      	cmp	r1, #0
 801be20:	d0c9      	beq.n	801bdb6 <__sflush_r+0x1a>
 801be22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801be26:	4299      	cmp	r1, r3
 801be28:	d002      	beq.n	801be30 <__sflush_r+0x94>
 801be2a:	4628      	mov	r0, r5
 801be2c:	f7ff fbe2 	bl	801b5f4 <_free_r>
 801be30:	2000      	movs	r0, #0
 801be32:	6360      	str	r0, [r4, #52]	; 0x34
 801be34:	e7c0      	b.n	801bdb8 <__sflush_r+0x1c>
 801be36:	2301      	movs	r3, #1
 801be38:	4628      	mov	r0, r5
 801be3a:	47b0      	blx	r6
 801be3c:	1c41      	adds	r1, r0, #1
 801be3e:	d1c8      	bne.n	801bdd2 <__sflush_r+0x36>
 801be40:	682b      	ldr	r3, [r5, #0]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d0c5      	beq.n	801bdd2 <__sflush_r+0x36>
 801be46:	2b1d      	cmp	r3, #29
 801be48:	d001      	beq.n	801be4e <__sflush_r+0xb2>
 801be4a:	2b16      	cmp	r3, #22
 801be4c:	d101      	bne.n	801be52 <__sflush_r+0xb6>
 801be4e:	602f      	str	r7, [r5, #0]
 801be50:	e7b1      	b.n	801bdb6 <__sflush_r+0x1a>
 801be52:	89a3      	ldrh	r3, [r4, #12]
 801be54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be58:	81a3      	strh	r3, [r4, #12]
 801be5a:	e7ad      	b.n	801bdb8 <__sflush_r+0x1c>
 801be5c:	690f      	ldr	r7, [r1, #16]
 801be5e:	2f00      	cmp	r7, #0
 801be60:	d0a9      	beq.n	801bdb6 <__sflush_r+0x1a>
 801be62:	0793      	lsls	r3, r2, #30
 801be64:	680e      	ldr	r6, [r1, #0]
 801be66:	bf08      	it	eq
 801be68:	694b      	ldreq	r3, [r1, #20]
 801be6a:	600f      	str	r7, [r1, #0]
 801be6c:	bf18      	it	ne
 801be6e:	2300      	movne	r3, #0
 801be70:	eba6 0807 	sub.w	r8, r6, r7
 801be74:	608b      	str	r3, [r1, #8]
 801be76:	f1b8 0f00 	cmp.w	r8, #0
 801be7a:	dd9c      	ble.n	801bdb6 <__sflush_r+0x1a>
 801be7c:	6a21      	ldr	r1, [r4, #32]
 801be7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801be80:	4643      	mov	r3, r8
 801be82:	463a      	mov	r2, r7
 801be84:	4628      	mov	r0, r5
 801be86:	47b0      	blx	r6
 801be88:	2800      	cmp	r0, #0
 801be8a:	dc06      	bgt.n	801be9a <__sflush_r+0xfe>
 801be8c:	89a3      	ldrh	r3, [r4, #12]
 801be8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be92:	81a3      	strh	r3, [r4, #12]
 801be94:	f04f 30ff 	mov.w	r0, #4294967295
 801be98:	e78e      	b.n	801bdb8 <__sflush_r+0x1c>
 801be9a:	4407      	add	r7, r0
 801be9c:	eba8 0800 	sub.w	r8, r8, r0
 801bea0:	e7e9      	b.n	801be76 <__sflush_r+0xda>
 801bea2:	bf00      	nop
 801bea4:	dfbffffe 	.word	0xdfbffffe

0801bea8 <_fflush_r>:
 801bea8:	b538      	push	{r3, r4, r5, lr}
 801beaa:	690b      	ldr	r3, [r1, #16]
 801beac:	4605      	mov	r5, r0
 801beae:	460c      	mov	r4, r1
 801beb0:	b913      	cbnz	r3, 801beb8 <_fflush_r+0x10>
 801beb2:	2500      	movs	r5, #0
 801beb4:	4628      	mov	r0, r5
 801beb6:	bd38      	pop	{r3, r4, r5, pc}
 801beb8:	b118      	cbz	r0, 801bec2 <_fflush_r+0x1a>
 801beba:	6a03      	ldr	r3, [r0, #32]
 801bebc:	b90b      	cbnz	r3, 801bec2 <_fflush_r+0x1a>
 801bebe:	f7ff f915 	bl	801b0ec <__sinit>
 801bec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d0f3      	beq.n	801beb2 <_fflush_r+0xa>
 801beca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801becc:	07d0      	lsls	r0, r2, #31
 801bece:	d404      	bmi.n	801beda <_fflush_r+0x32>
 801bed0:	0599      	lsls	r1, r3, #22
 801bed2:	d402      	bmi.n	801beda <_fflush_r+0x32>
 801bed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bed6:	f7ff fb5e 	bl	801b596 <__retarget_lock_acquire_recursive>
 801beda:	4628      	mov	r0, r5
 801bedc:	4621      	mov	r1, r4
 801bede:	f7ff ff5d 	bl	801bd9c <__sflush_r>
 801bee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bee4:	07da      	lsls	r2, r3, #31
 801bee6:	4605      	mov	r5, r0
 801bee8:	d4e4      	bmi.n	801beb4 <_fflush_r+0xc>
 801beea:	89a3      	ldrh	r3, [r4, #12]
 801beec:	059b      	lsls	r3, r3, #22
 801beee:	d4e1      	bmi.n	801beb4 <_fflush_r+0xc>
 801bef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bef2:	f7ff fb51 	bl	801b598 <__retarget_lock_release_recursive>
 801bef6:	e7dd      	b.n	801beb4 <_fflush_r+0xc>

0801bef8 <fiprintf>:
 801bef8:	b40e      	push	{r1, r2, r3}
 801befa:	b503      	push	{r0, r1, lr}
 801befc:	4601      	mov	r1, r0
 801befe:	ab03      	add	r3, sp, #12
 801bf00:	4805      	ldr	r0, [pc, #20]	; (801bf18 <fiprintf+0x20>)
 801bf02:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf06:	6800      	ldr	r0, [r0, #0]
 801bf08:	9301      	str	r3, [sp, #4]
 801bf0a:	f7ff fc9d 	bl	801b848 <_vfiprintf_r>
 801bf0e:	b002      	add	sp, #8
 801bf10:	f85d eb04 	ldr.w	lr, [sp], #4
 801bf14:	b003      	add	sp, #12
 801bf16:	4770      	bx	lr
 801bf18:	20000088 	.word	0x20000088

0801bf1c <__swhatbuf_r>:
 801bf1c:	b570      	push	{r4, r5, r6, lr}
 801bf1e:	460c      	mov	r4, r1
 801bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf24:	2900      	cmp	r1, #0
 801bf26:	b096      	sub	sp, #88	; 0x58
 801bf28:	4615      	mov	r5, r2
 801bf2a:	461e      	mov	r6, r3
 801bf2c:	da0d      	bge.n	801bf4a <__swhatbuf_r+0x2e>
 801bf2e:	89a3      	ldrh	r3, [r4, #12]
 801bf30:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bf34:	f04f 0100 	mov.w	r1, #0
 801bf38:	bf0c      	ite	eq
 801bf3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bf3e:	2340      	movne	r3, #64	; 0x40
 801bf40:	2000      	movs	r0, #0
 801bf42:	6031      	str	r1, [r6, #0]
 801bf44:	602b      	str	r3, [r5, #0]
 801bf46:	b016      	add	sp, #88	; 0x58
 801bf48:	bd70      	pop	{r4, r5, r6, pc}
 801bf4a:	466a      	mov	r2, sp
 801bf4c:	f000 f848 	bl	801bfe0 <_fstat_r>
 801bf50:	2800      	cmp	r0, #0
 801bf52:	dbec      	blt.n	801bf2e <__swhatbuf_r+0x12>
 801bf54:	9901      	ldr	r1, [sp, #4]
 801bf56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bf5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bf5e:	4259      	negs	r1, r3
 801bf60:	4159      	adcs	r1, r3
 801bf62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bf66:	e7eb      	b.n	801bf40 <__swhatbuf_r+0x24>

0801bf68 <__smakebuf_r>:
 801bf68:	898b      	ldrh	r3, [r1, #12]
 801bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bf6c:	079d      	lsls	r5, r3, #30
 801bf6e:	4606      	mov	r6, r0
 801bf70:	460c      	mov	r4, r1
 801bf72:	d507      	bpl.n	801bf84 <__smakebuf_r+0x1c>
 801bf74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bf78:	6023      	str	r3, [r4, #0]
 801bf7a:	6123      	str	r3, [r4, #16]
 801bf7c:	2301      	movs	r3, #1
 801bf7e:	6163      	str	r3, [r4, #20]
 801bf80:	b002      	add	sp, #8
 801bf82:	bd70      	pop	{r4, r5, r6, pc}
 801bf84:	ab01      	add	r3, sp, #4
 801bf86:	466a      	mov	r2, sp
 801bf88:	f7ff ffc8 	bl	801bf1c <__swhatbuf_r>
 801bf8c:	9900      	ldr	r1, [sp, #0]
 801bf8e:	4605      	mov	r5, r0
 801bf90:	4630      	mov	r0, r6
 801bf92:	f7ff fba3 	bl	801b6dc <_malloc_r>
 801bf96:	b948      	cbnz	r0, 801bfac <__smakebuf_r+0x44>
 801bf98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf9c:	059a      	lsls	r2, r3, #22
 801bf9e:	d4ef      	bmi.n	801bf80 <__smakebuf_r+0x18>
 801bfa0:	f023 0303 	bic.w	r3, r3, #3
 801bfa4:	f043 0302 	orr.w	r3, r3, #2
 801bfa8:	81a3      	strh	r3, [r4, #12]
 801bfaa:	e7e3      	b.n	801bf74 <__smakebuf_r+0xc>
 801bfac:	89a3      	ldrh	r3, [r4, #12]
 801bfae:	6020      	str	r0, [r4, #0]
 801bfb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bfb4:	81a3      	strh	r3, [r4, #12]
 801bfb6:	9b00      	ldr	r3, [sp, #0]
 801bfb8:	6163      	str	r3, [r4, #20]
 801bfba:	9b01      	ldr	r3, [sp, #4]
 801bfbc:	6120      	str	r0, [r4, #16]
 801bfbe:	b15b      	cbz	r3, 801bfd8 <__smakebuf_r+0x70>
 801bfc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bfc4:	4630      	mov	r0, r6
 801bfc6:	f000 f81d 	bl	801c004 <_isatty_r>
 801bfca:	b128      	cbz	r0, 801bfd8 <__smakebuf_r+0x70>
 801bfcc:	89a3      	ldrh	r3, [r4, #12]
 801bfce:	f023 0303 	bic.w	r3, r3, #3
 801bfd2:	f043 0301 	orr.w	r3, r3, #1
 801bfd6:	81a3      	strh	r3, [r4, #12]
 801bfd8:	89a3      	ldrh	r3, [r4, #12]
 801bfda:	431d      	orrs	r5, r3
 801bfdc:	81a5      	strh	r5, [r4, #12]
 801bfde:	e7cf      	b.n	801bf80 <__smakebuf_r+0x18>

0801bfe0 <_fstat_r>:
 801bfe0:	b538      	push	{r3, r4, r5, lr}
 801bfe2:	4d07      	ldr	r5, [pc, #28]	; (801c000 <_fstat_r+0x20>)
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	4608      	mov	r0, r1
 801bfea:	4611      	mov	r1, r2
 801bfec:	602b      	str	r3, [r5, #0]
 801bfee:	f7e6 f818 	bl	8002022 <_fstat>
 801bff2:	1c43      	adds	r3, r0, #1
 801bff4:	d102      	bne.n	801bffc <_fstat_r+0x1c>
 801bff6:	682b      	ldr	r3, [r5, #0]
 801bff8:	b103      	cbz	r3, 801bffc <_fstat_r+0x1c>
 801bffa:	6023      	str	r3, [r4, #0]
 801bffc:	bd38      	pop	{r3, r4, r5, pc}
 801bffe:	bf00      	nop
 801c000:	2003d378 	.word	0x2003d378

0801c004 <_isatty_r>:
 801c004:	b538      	push	{r3, r4, r5, lr}
 801c006:	4d06      	ldr	r5, [pc, #24]	; (801c020 <_isatty_r+0x1c>)
 801c008:	2300      	movs	r3, #0
 801c00a:	4604      	mov	r4, r0
 801c00c:	4608      	mov	r0, r1
 801c00e:	602b      	str	r3, [r5, #0]
 801c010:	f7e6 f817 	bl	8002042 <_isatty>
 801c014:	1c43      	adds	r3, r0, #1
 801c016:	d102      	bne.n	801c01e <_isatty_r+0x1a>
 801c018:	682b      	ldr	r3, [r5, #0]
 801c01a:	b103      	cbz	r3, 801c01e <_isatty_r+0x1a>
 801c01c:	6023      	str	r3, [r4, #0]
 801c01e:	bd38      	pop	{r3, r4, r5, pc}
 801c020:	2003d378 	.word	0x2003d378

0801c024 <_sbrk_r>:
 801c024:	b538      	push	{r3, r4, r5, lr}
 801c026:	4d06      	ldr	r5, [pc, #24]	; (801c040 <_sbrk_r+0x1c>)
 801c028:	2300      	movs	r3, #0
 801c02a:	4604      	mov	r4, r0
 801c02c:	4608      	mov	r0, r1
 801c02e:	602b      	str	r3, [r5, #0]
 801c030:	f7e6 f820 	bl	8002074 <_sbrk>
 801c034:	1c43      	adds	r3, r0, #1
 801c036:	d102      	bne.n	801c03e <_sbrk_r+0x1a>
 801c038:	682b      	ldr	r3, [r5, #0]
 801c03a:	b103      	cbz	r3, 801c03e <_sbrk_r+0x1a>
 801c03c:	6023      	str	r3, [r4, #0]
 801c03e:	bd38      	pop	{r3, r4, r5, pc}
 801c040:	2003d378 	.word	0x2003d378

0801c044 <abort>:
 801c044:	b508      	push	{r3, lr}
 801c046:	2006      	movs	r0, #6
 801c048:	f000 f82c 	bl	801c0a4 <raise>
 801c04c:	2001      	movs	r0, #1
 801c04e:	f7e5 ffb5 	bl	8001fbc <_exit>

0801c052 <_raise_r>:
 801c052:	291f      	cmp	r1, #31
 801c054:	b538      	push	{r3, r4, r5, lr}
 801c056:	4604      	mov	r4, r0
 801c058:	460d      	mov	r5, r1
 801c05a:	d904      	bls.n	801c066 <_raise_r+0x14>
 801c05c:	2316      	movs	r3, #22
 801c05e:	6003      	str	r3, [r0, #0]
 801c060:	f04f 30ff 	mov.w	r0, #4294967295
 801c064:	bd38      	pop	{r3, r4, r5, pc}
 801c066:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c068:	b112      	cbz	r2, 801c070 <_raise_r+0x1e>
 801c06a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c06e:	b94b      	cbnz	r3, 801c084 <_raise_r+0x32>
 801c070:	4620      	mov	r0, r4
 801c072:	f000 f831 	bl	801c0d8 <_getpid_r>
 801c076:	462a      	mov	r2, r5
 801c078:	4601      	mov	r1, r0
 801c07a:	4620      	mov	r0, r4
 801c07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c080:	f000 b818 	b.w	801c0b4 <_kill_r>
 801c084:	2b01      	cmp	r3, #1
 801c086:	d00a      	beq.n	801c09e <_raise_r+0x4c>
 801c088:	1c59      	adds	r1, r3, #1
 801c08a:	d103      	bne.n	801c094 <_raise_r+0x42>
 801c08c:	2316      	movs	r3, #22
 801c08e:	6003      	str	r3, [r0, #0]
 801c090:	2001      	movs	r0, #1
 801c092:	e7e7      	b.n	801c064 <_raise_r+0x12>
 801c094:	2400      	movs	r4, #0
 801c096:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c09a:	4628      	mov	r0, r5
 801c09c:	4798      	blx	r3
 801c09e:	2000      	movs	r0, #0
 801c0a0:	e7e0      	b.n	801c064 <_raise_r+0x12>
	...

0801c0a4 <raise>:
 801c0a4:	4b02      	ldr	r3, [pc, #8]	; (801c0b0 <raise+0xc>)
 801c0a6:	4601      	mov	r1, r0
 801c0a8:	6818      	ldr	r0, [r3, #0]
 801c0aa:	f7ff bfd2 	b.w	801c052 <_raise_r>
 801c0ae:	bf00      	nop
 801c0b0:	20000088 	.word	0x20000088

0801c0b4 <_kill_r>:
 801c0b4:	b538      	push	{r3, r4, r5, lr}
 801c0b6:	4d07      	ldr	r5, [pc, #28]	; (801c0d4 <_kill_r+0x20>)
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	4604      	mov	r4, r0
 801c0bc:	4608      	mov	r0, r1
 801c0be:	4611      	mov	r1, r2
 801c0c0:	602b      	str	r3, [r5, #0]
 801c0c2:	f7e5 ff69 	bl	8001f98 <_kill>
 801c0c6:	1c43      	adds	r3, r0, #1
 801c0c8:	d102      	bne.n	801c0d0 <_kill_r+0x1c>
 801c0ca:	682b      	ldr	r3, [r5, #0]
 801c0cc:	b103      	cbz	r3, 801c0d0 <_kill_r+0x1c>
 801c0ce:	6023      	str	r3, [r4, #0]
 801c0d0:	bd38      	pop	{r3, r4, r5, pc}
 801c0d2:	bf00      	nop
 801c0d4:	2003d378 	.word	0x2003d378

0801c0d8 <_getpid_r>:
 801c0d8:	f7e5 bf56 	b.w	8001f88 <_getpid>

0801c0dc <_init>:
 801c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0de:	bf00      	nop
 801c0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0e2:	bc08      	pop	{r3}
 801c0e4:	469e      	mov	lr, r3
 801c0e6:	4770      	bx	lr

0801c0e8 <_fini>:
 801c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0ea:	bf00      	nop
 801c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c0ee:	bc08      	pop	{r3}
 801c0f0:	469e      	mov	lr, r3
 801c0f2:	4770      	bx	lr
