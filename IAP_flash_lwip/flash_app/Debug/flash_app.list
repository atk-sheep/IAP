
flash_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155dc  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e98  080557dc  080557dc  000257dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08058674  08058674  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08058674  08058674  00028674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805867c  0805867c  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805867c  0805867c  0002867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08058680  08058680  00028680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08058684  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08058710  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080587b0  0003012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000238ac  200001cc  08058850  000301cc  2**2
                  ALLOC
 12 ._user_heap_stack 00004000  20023a78  08058850  00033a78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY
 15 .debug_info   00032b55  00000000  00000000  0003023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008313  00000000  00000000  00062d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002428  00000000  00000000  0006b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001c6e  00000000  00000000  0006d4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003a2a6  00000000  00000000  0006f13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003c8ec  00000000  00000000  000a93e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00123021  00000000  00000000  000e5cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009b60  00000000  00000000  00208cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  00212854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	200001cc 	.word	0x200001cc
 804021c:	00000000 	.word	0x00000000
 8040220:	080557c4 	.word	0x080557c4

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	200001d0 	.word	0x200001d0
 804023c:	080557c4 	.word	0x080557c4

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b970 	b.w	80405d8 <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9e08      	ldr	r6, [sp, #32]
 8040316:	460d      	mov	r5, r1
 8040318:	4604      	mov	r4, r0
 804031a:	460f      	mov	r7, r1
 804031c:	2b00      	cmp	r3, #0
 804031e:	d14a      	bne.n	80403b6 <__udivmoddi4+0xa6>
 8040320:	428a      	cmp	r2, r1
 8040322:	4694      	mov	ip, r2
 8040324:	d965      	bls.n	80403f2 <__udivmoddi4+0xe2>
 8040326:	fab2 f382 	clz	r3, r2
 804032a:	b143      	cbz	r3, 804033e <__udivmoddi4+0x2e>
 804032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8040330:	f1c3 0220 	rsb	r2, r3, #32
 8040334:	409f      	lsls	r7, r3
 8040336:	fa20 f202 	lsr.w	r2, r0, r2
 804033a:	4317      	orrs	r7, r2
 804033c:	409c      	lsls	r4, r3
 804033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8040342:	fa1f f58c 	uxth.w	r5, ip
 8040346:	fbb7 f1fe 	udiv	r1, r7, lr
 804034a:	0c22      	lsrs	r2, r4, #16
 804034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8040350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8040354:	fb01 f005 	mul.w	r0, r1, r5
 8040358:	4290      	cmp	r0, r2
 804035a:	d90a      	bls.n	8040372 <__udivmoddi4+0x62>
 804035c:	eb1c 0202 	adds.w	r2, ip, r2
 8040360:	f101 37ff 	add.w	r7, r1, #4294967295
 8040364:	f080 811c 	bcs.w	80405a0 <__udivmoddi4+0x290>
 8040368:	4290      	cmp	r0, r2
 804036a:	f240 8119 	bls.w	80405a0 <__udivmoddi4+0x290>
 804036e:	3902      	subs	r1, #2
 8040370:	4462      	add	r2, ip
 8040372:	1a12      	subs	r2, r2, r0
 8040374:	b2a4      	uxth	r4, r4
 8040376:	fbb2 f0fe 	udiv	r0, r2, lr
 804037a:	fb0e 2210 	mls	r2, lr, r0, r2
 804037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8040382:	fb00 f505 	mul.w	r5, r0, r5
 8040386:	42a5      	cmp	r5, r4
 8040388:	d90a      	bls.n	80403a0 <__udivmoddi4+0x90>
 804038a:	eb1c 0404 	adds.w	r4, ip, r4
 804038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8040392:	f080 8107 	bcs.w	80405a4 <__udivmoddi4+0x294>
 8040396:	42a5      	cmp	r5, r4
 8040398:	f240 8104 	bls.w	80405a4 <__udivmoddi4+0x294>
 804039c:	4464      	add	r4, ip
 804039e:	3802      	subs	r0, #2
 80403a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80403a4:	1b64      	subs	r4, r4, r5
 80403a6:	2100      	movs	r1, #0
 80403a8:	b11e      	cbz	r6, 80403b2 <__udivmoddi4+0xa2>
 80403aa:	40dc      	lsrs	r4, r3
 80403ac:	2300      	movs	r3, #0
 80403ae:	e9c6 4300 	strd	r4, r3, [r6]
 80403b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403b6:	428b      	cmp	r3, r1
 80403b8:	d908      	bls.n	80403cc <__udivmoddi4+0xbc>
 80403ba:	2e00      	cmp	r6, #0
 80403bc:	f000 80ed 	beq.w	804059a <__udivmoddi4+0x28a>
 80403c0:	2100      	movs	r1, #0
 80403c2:	e9c6 0500 	strd	r0, r5, [r6]
 80403c6:	4608      	mov	r0, r1
 80403c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403cc:	fab3 f183 	clz	r1, r3
 80403d0:	2900      	cmp	r1, #0
 80403d2:	d149      	bne.n	8040468 <__udivmoddi4+0x158>
 80403d4:	42ab      	cmp	r3, r5
 80403d6:	d302      	bcc.n	80403de <__udivmoddi4+0xce>
 80403d8:	4282      	cmp	r2, r0
 80403da:	f200 80f8 	bhi.w	80405ce <__udivmoddi4+0x2be>
 80403de:	1a84      	subs	r4, r0, r2
 80403e0:	eb65 0203 	sbc.w	r2, r5, r3
 80403e4:	2001      	movs	r0, #1
 80403e6:	4617      	mov	r7, r2
 80403e8:	2e00      	cmp	r6, #0
 80403ea:	d0e2      	beq.n	80403b2 <__udivmoddi4+0xa2>
 80403ec:	e9c6 4700 	strd	r4, r7, [r6]
 80403f0:	e7df      	b.n	80403b2 <__udivmoddi4+0xa2>
 80403f2:	b902      	cbnz	r2, 80403f6 <__udivmoddi4+0xe6>
 80403f4:	deff      	udf	#255	; 0xff
 80403f6:	fab2 f382 	clz	r3, r2
 80403fa:	2b00      	cmp	r3, #0
 80403fc:	f040 8090 	bne.w	8040520 <__udivmoddi4+0x210>
 8040400:	1a8a      	subs	r2, r1, r2
 8040402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040406:	fa1f fe8c 	uxth.w	lr, ip
 804040a:	2101      	movs	r1, #1
 804040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8040410:	fb07 2015 	mls	r0, r7, r5, r2
 8040414:	0c22      	lsrs	r2, r4, #16
 8040416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 804041a:	fb0e f005 	mul.w	r0, lr, r5
 804041e:	4290      	cmp	r0, r2
 8040420:	d908      	bls.n	8040434 <__udivmoddi4+0x124>
 8040422:	eb1c 0202 	adds.w	r2, ip, r2
 8040426:	f105 38ff 	add.w	r8, r5, #4294967295
 804042a:	d202      	bcs.n	8040432 <__udivmoddi4+0x122>
 804042c:	4290      	cmp	r0, r2
 804042e:	f200 80cb 	bhi.w	80405c8 <__udivmoddi4+0x2b8>
 8040432:	4645      	mov	r5, r8
 8040434:	1a12      	subs	r2, r2, r0
 8040436:	b2a4      	uxth	r4, r4
 8040438:	fbb2 f0f7 	udiv	r0, r2, r7
 804043c:	fb07 2210 	mls	r2, r7, r0, r2
 8040440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8040444:	fb0e fe00 	mul.w	lr, lr, r0
 8040448:	45a6      	cmp	lr, r4
 804044a:	d908      	bls.n	804045e <__udivmoddi4+0x14e>
 804044c:	eb1c 0404 	adds.w	r4, ip, r4
 8040450:	f100 32ff 	add.w	r2, r0, #4294967295
 8040454:	d202      	bcs.n	804045c <__udivmoddi4+0x14c>
 8040456:	45a6      	cmp	lr, r4
 8040458:	f200 80bb 	bhi.w	80405d2 <__udivmoddi4+0x2c2>
 804045c:	4610      	mov	r0, r2
 804045e:	eba4 040e 	sub.w	r4, r4, lr
 8040462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8040466:	e79f      	b.n	80403a8 <__udivmoddi4+0x98>
 8040468:	f1c1 0720 	rsb	r7, r1, #32
 804046c:	408b      	lsls	r3, r1
 804046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8040472:	ea4c 0c03 	orr.w	ip, ip, r3
 8040476:	fa05 f401 	lsl.w	r4, r5, r1
 804047a:	fa20 f307 	lsr.w	r3, r0, r7
 804047e:	40fd      	lsrs	r5, r7
 8040480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040484:	4323      	orrs	r3, r4
 8040486:	fbb5 f8f9 	udiv	r8, r5, r9
 804048a:	fa1f fe8c 	uxth.w	lr, ip
 804048e:	fb09 5518 	mls	r5, r9, r8, r5
 8040492:	0c1c      	lsrs	r4, r3, #16
 8040494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8040498:	fb08 f50e 	mul.w	r5, r8, lr
 804049c:	42a5      	cmp	r5, r4
 804049e:	fa02 f201 	lsl.w	r2, r2, r1
 80404a2:	fa00 f001 	lsl.w	r0, r0, r1
 80404a6:	d90b      	bls.n	80404c0 <__udivmoddi4+0x1b0>
 80404a8:	eb1c 0404 	adds.w	r4, ip, r4
 80404ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80404b0:	f080 8088 	bcs.w	80405c4 <__udivmoddi4+0x2b4>
 80404b4:	42a5      	cmp	r5, r4
 80404b6:	f240 8085 	bls.w	80405c4 <__udivmoddi4+0x2b4>
 80404ba:	f1a8 0802 	sub.w	r8, r8, #2
 80404be:	4464      	add	r4, ip
 80404c0:	1b64      	subs	r4, r4, r5
 80404c2:	b29d      	uxth	r5, r3
 80404c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80404c8:	fb09 4413 	mls	r4, r9, r3, r4
 80404cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80404d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80404d4:	45a6      	cmp	lr, r4
 80404d6:	d908      	bls.n	80404ea <__udivmoddi4+0x1da>
 80404d8:	eb1c 0404 	adds.w	r4, ip, r4
 80404dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80404e0:	d26c      	bcs.n	80405bc <__udivmoddi4+0x2ac>
 80404e2:	45a6      	cmp	lr, r4
 80404e4:	d96a      	bls.n	80405bc <__udivmoddi4+0x2ac>
 80404e6:	3b02      	subs	r3, #2
 80404e8:	4464      	add	r4, ip
 80404ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80404ee:	fba3 9502 	umull	r9, r5, r3, r2
 80404f2:	eba4 040e 	sub.w	r4, r4, lr
 80404f6:	42ac      	cmp	r4, r5
 80404f8:	46c8      	mov	r8, r9
 80404fa:	46ae      	mov	lr, r5
 80404fc:	d356      	bcc.n	80405ac <__udivmoddi4+0x29c>
 80404fe:	d053      	beq.n	80405a8 <__udivmoddi4+0x298>
 8040500:	b156      	cbz	r6, 8040518 <__udivmoddi4+0x208>
 8040502:	ebb0 0208 	subs.w	r2, r0, r8
 8040506:	eb64 040e 	sbc.w	r4, r4, lr
 804050a:	fa04 f707 	lsl.w	r7, r4, r7
 804050e:	40ca      	lsrs	r2, r1
 8040510:	40cc      	lsrs	r4, r1
 8040512:	4317      	orrs	r7, r2
 8040514:	e9c6 7400 	strd	r7, r4, [r6]
 8040518:	4618      	mov	r0, r3
 804051a:	2100      	movs	r1, #0
 804051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040520:	f1c3 0120 	rsb	r1, r3, #32
 8040524:	fa02 fc03 	lsl.w	ip, r2, r3
 8040528:	fa20 f201 	lsr.w	r2, r0, r1
 804052c:	fa25 f101 	lsr.w	r1, r5, r1
 8040530:	409d      	lsls	r5, r3
 8040532:	432a      	orrs	r2, r5
 8040534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040538:	fa1f fe8c 	uxth.w	lr, ip
 804053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8040540:	fb07 1510 	mls	r5, r7, r0, r1
 8040544:	0c11      	lsrs	r1, r2, #16
 8040546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 804054a:	fb00 f50e 	mul.w	r5, r0, lr
 804054e:	428d      	cmp	r5, r1
 8040550:	fa04 f403 	lsl.w	r4, r4, r3
 8040554:	d908      	bls.n	8040568 <__udivmoddi4+0x258>
 8040556:	eb1c 0101 	adds.w	r1, ip, r1
 804055a:	f100 38ff 	add.w	r8, r0, #4294967295
 804055e:	d22f      	bcs.n	80405c0 <__udivmoddi4+0x2b0>
 8040560:	428d      	cmp	r5, r1
 8040562:	d92d      	bls.n	80405c0 <__udivmoddi4+0x2b0>
 8040564:	3802      	subs	r0, #2
 8040566:	4461      	add	r1, ip
 8040568:	1b49      	subs	r1, r1, r5
 804056a:	b292      	uxth	r2, r2
 804056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8040570:	fb07 1115 	mls	r1, r7, r5, r1
 8040574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8040578:	fb05 f10e 	mul.w	r1, r5, lr
 804057c:	4291      	cmp	r1, r2
 804057e:	d908      	bls.n	8040592 <__udivmoddi4+0x282>
 8040580:	eb1c 0202 	adds.w	r2, ip, r2
 8040584:	f105 38ff 	add.w	r8, r5, #4294967295
 8040588:	d216      	bcs.n	80405b8 <__udivmoddi4+0x2a8>
 804058a:	4291      	cmp	r1, r2
 804058c:	d914      	bls.n	80405b8 <__udivmoddi4+0x2a8>
 804058e:	3d02      	subs	r5, #2
 8040590:	4462      	add	r2, ip
 8040592:	1a52      	subs	r2, r2, r1
 8040594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8040598:	e738      	b.n	804040c <__udivmoddi4+0xfc>
 804059a:	4631      	mov	r1, r6
 804059c:	4630      	mov	r0, r6
 804059e:	e708      	b.n	80403b2 <__udivmoddi4+0xa2>
 80405a0:	4639      	mov	r1, r7
 80405a2:	e6e6      	b.n	8040372 <__udivmoddi4+0x62>
 80405a4:	4610      	mov	r0, r2
 80405a6:	e6fb      	b.n	80403a0 <__udivmoddi4+0x90>
 80405a8:	4548      	cmp	r0, r9
 80405aa:	d2a9      	bcs.n	8040500 <__udivmoddi4+0x1f0>
 80405ac:	ebb9 0802 	subs.w	r8, r9, r2
 80405b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80405b4:	3b01      	subs	r3, #1
 80405b6:	e7a3      	b.n	8040500 <__udivmoddi4+0x1f0>
 80405b8:	4645      	mov	r5, r8
 80405ba:	e7ea      	b.n	8040592 <__udivmoddi4+0x282>
 80405bc:	462b      	mov	r3, r5
 80405be:	e794      	b.n	80404ea <__udivmoddi4+0x1da>
 80405c0:	4640      	mov	r0, r8
 80405c2:	e7d1      	b.n	8040568 <__udivmoddi4+0x258>
 80405c4:	46d0      	mov	r8, sl
 80405c6:	e77b      	b.n	80404c0 <__udivmoddi4+0x1b0>
 80405c8:	3d02      	subs	r5, #2
 80405ca:	4462      	add	r2, ip
 80405cc:	e732      	b.n	8040434 <__udivmoddi4+0x124>
 80405ce:	4608      	mov	r0, r1
 80405d0:	e70a      	b.n	80403e8 <__udivmoddi4+0xd8>
 80405d2:	4464      	add	r4, ip
 80405d4:	3802      	subs	r0, #2
 80405d6:	e742      	b.n	804045e <__udivmoddi4+0x14e>

080405d8 <__aeabi_idiv0>:
 80405d8:	4770      	bx	lr
 80405da:	bf00      	nop

080405dc <delay_init>:
static uint16_t fac_us = 0;
static uint32_t fac_ms = 0;

/*初始化*/
void delay_init(void)
{
 80405dc:	b480      	push	{r7}
 80405de:	af00      	add	r7, sp, #0
#if	(!Timebase_Source_is_SysTick)
	fac_ms = 1000000;				//作为时基的计数器时钟频率在HAL_InitTick()中被设为了1MHz
 80405e0:	4b08      	ldr	r3, [pc, #32]	; (8040604 <delay_init+0x28>)
 80405e2:	4a09      	ldr	r2, [pc, #36]	; (8040608 <delay_init+0x2c>)
 80405e4:	601a      	str	r2, [r3, #0]
	fac_us = fac_ms / 1000;
 80405e6:	4b07      	ldr	r3, [pc, #28]	; (8040604 <delay_init+0x28>)
 80405e8:	681b      	ldr	r3, [r3, #0]
 80405ea:	4a08      	ldr	r2, [pc, #32]	; (804060c <delay_init+0x30>)
 80405ec:	fba2 2303 	umull	r2, r3, r2, r3
 80405f0:	099b      	lsrs	r3, r3, #6
 80405f2:	b29a      	uxth	r2, r3
 80405f4:	4b06      	ldr	r3, [pc, #24]	; (8040610 <delay_init+0x34>)
 80405f6:	801a      	strh	r2, [r3, #0]
#else
	fac_ms = SystemCoreClock / 1000;
	fac_us = fac_ms / 1000;
#endif
}
 80405f8:	bf00      	nop
 80405fa:	46bd      	mov	sp, r7
 80405fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040600:	4770      	bx	lr
 8040602:	bf00      	nop
 8040604:	200001ec 	.word	0x200001ec
 8040608:	000f4240 	.word	0x000f4240
 804060c:	10624dd3 	.word	0x10624dd3
 8040610:	200001e8 	.word	0x200001e8

08040614 <delay_us>:

/*微秒级延时*/
void delay_us(uint32_t nus)
{
 8040614:	b480      	push	{r7}
 8040616:	b089      	sub	sp, #36	; 0x24
 8040618:	af00      	add	r7, sp, #0
 804061a:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 804061c:	2300      	movs	r3, #0
 804061e:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 8040620:	2300      	movs	r3, #0
 8040622:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 8040624:	2300      	movs	r3, #0
 8040626:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 8040628:	2300      	movs	r3, #0
 804062a:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 804062c:	2300      	movs	r3, #0
 804062e:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 8040630:	4b1b      	ldr	r3, [pc, #108]	; (80406a0 <delay_us+0x8c>)
 8040632:	681b      	ldr	r3, [r3, #0]
 8040634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8040636:	60fb      	str	r3, [r7, #12]

	ticks = nus * fac_us;
 8040638:	4b1a      	ldr	r3, [pc, #104]	; (80406a4 <delay_us+0x90>)
 804063a:	881b      	ldrh	r3, [r3, #0]
 804063c:	461a      	mov	r2, r3
 804063e:	687b      	ldr	r3, [r7, #4]
 8040640:	fb02 f303 	mul.w	r3, r2, r3
 8040644:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 8040646:	4b16      	ldr	r3, [pc, #88]	; (80406a0 <delay_us+0x8c>)
 8040648:	681b      	ldr	r3, [r3, #0]
 804064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804064c:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 804064e:	4b14      	ldr	r3, [pc, #80]	; (80406a0 <delay_us+0x8c>)
 8040650:	681b      	ldr	r3, [r3, #0]
 8040652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040654:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 8040656:	693a      	ldr	r2, [r7, #16]
 8040658:	69fb      	ldr	r3, [r7, #28]
 804065a:	429a      	cmp	r2, r3
 804065c:	d0f7      	beq.n	804064e <delay_us+0x3a>
		{
			if (tnow < told)
 804065e:	693a      	ldr	r2, [r7, #16]
 8040660:	69fb      	ldr	r3, [r7, #28]
 8040662:	429a      	cmp	r2, r3
 8040664:	d206      	bcs.n	8040674 <delay_us+0x60>
			{
				tcnt += told - tnow;
 8040666:	69fa      	ldr	r2, [r7, #28]
 8040668:	693b      	ldr	r3, [r7, #16]
 804066a:	1ad3      	subs	r3, r2, r3
 804066c:	69ba      	ldr	r2, [r7, #24]
 804066e:	4413      	add	r3, r2
 8040670:	61bb      	str	r3, [r7, #24]
 8040672:	e007      	b.n	8040684 <delay_us+0x70>
			}
			else
			{
				tcnt += reload - tnow + told;
 8040674:	68fa      	ldr	r2, [r7, #12]
 8040676:	693b      	ldr	r3, [r7, #16]
 8040678:	1ad2      	subs	r2, r2, r3
 804067a:	69fb      	ldr	r3, [r7, #28]
 804067c:	4413      	add	r3, r2
 804067e:	69ba      	ldr	r2, [r7, #24]
 8040680:	4413      	add	r3, r2
 8040682:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8040684:	693b      	ldr	r3, [r7, #16]
 8040686:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 8040688:	69ba      	ldr	r2, [r7, #24]
 804068a:	697b      	ldr	r3, [r7, #20]
 804068c:	429a      	cmp	r2, r3
 804068e:	d200      	bcs.n	8040692 <delay_us+0x7e>
		tnow = Delay_GetCounter();
 8040690:	e7dd      	b.n	804064e <delay_us+0x3a>
			{
				break;
 8040692:	bf00      	nop
			}
		}
	}
}
 8040694:	bf00      	nop
 8040696:	3724      	adds	r7, #36	; 0x24
 8040698:	46bd      	mov	sp, r7
 804069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804069e:	4770      	bx	lr
 80406a0:	20002298 	.word	0x20002298
 80406a4:	200001e8 	.word	0x200001e8

080406a8 <delay_ms>:

/*毫秒级延时*/
void delay_ms(uint32_t nms)
{
 80406a8:	b480      	push	{r7}
 80406aa:	b089      	sub	sp, #36	; 0x24
 80406ac:	af00      	add	r7, sp, #0
 80406ae:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 80406b0:	2300      	movs	r3, #0
 80406b2:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 80406b4:	2300      	movs	r3, #0
 80406b6:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 80406b8:	2300      	movs	r3, #0
 80406ba:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 80406bc:	2300      	movs	r3, #0
 80406be:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 80406c0:	2300      	movs	r3, #0
 80406c2:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 80406c4:	4b1b      	ldr	r3, [pc, #108]	; (8040734 <delay_ms+0x8c>)
 80406c6:	681b      	ldr	r3, [r3, #0]
 80406c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80406ca:	60fb      	str	r3, [r7, #12]

	ticks = nms * fac_ms;
 80406cc:	4b1a      	ldr	r3, [pc, #104]	; (8040738 <delay_ms+0x90>)
 80406ce:	681a      	ldr	r2, [r3, #0]
 80406d0:	687b      	ldr	r3, [r7, #4]
 80406d2:	fb02 f303 	mul.w	r3, r2, r3
 80406d6:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 80406d8:	4b16      	ldr	r3, [pc, #88]	; (8040734 <delay_ms+0x8c>)
 80406da:	681b      	ldr	r3, [r3, #0]
 80406dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80406de:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 80406e0:	4b14      	ldr	r3, [pc, #80]	; (8040734 <delay_ms+0x8c>)
 80406e2:	681b      	ldr	r3, [r3, #0]
 80406e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80406e6:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 80406e8:	693a      	ldr	r2, [r7, #16]
 80406ea:	69fb      	ldr	r3, [r7, #28]
 80406ec:	429a      	cmp	r2, r3
 80406ee:	d0f7      	beq.n	80406e0 <delay_ms+0x38>
		{
			if (tnow < told)
 80406f0:	693a      	ldr	r2, [r7, #16]
 80406f2:	69fb      	ldr	r3, [r7, #28]
 80406f4:	429a      	cmp	r2, r3
 80406f6:	d206      	bcs.n	8040706 <delay_ms+0x5e>
			{
				tcnt += told - tnow;
 80406f8:	69fa      	ldr	r2, [r7, #28]
 80406fa:	693b      	ldr	r3, [r7, #16]
 80406fc:	1ad3      	subs	r3, r2, r3
 80406fe:	69ba      	ldr	r2, [r7, #24]
 8040700:	4413      	add	r3, r2
 8040702:	61bb      	str	r3, [r7, #24]
 8040704:	e007      	b.n	8040716 <delay_ms+0x6e>
			}
			else
			{
				tcnt += reload - tnow + told;
 8040706:	68fa      	ldr	r2, [r7, #12]
 8040708:	693b      	ldr	r3, [r7, #16]
 804070a:	1ad2      	subs	r2, r2, r3
 804070c:	69fb      	ldr	r3, [r7, #28]
 804070e:	4413      	add	r3, r2
 8040710:	69ba      	ldr	r2, [r7, #24]
 8040712:	4413      	add	r3, r2
 8040714:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8040716:	693b      	ldr	r3, [r7, #16]
 8040718:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 804071a:	69ba      	ldr	r2, [r7, #24]
 804071c:	697b      	ldr	r3, [r7, #20]
 804071e:	429a      	cmp	r2, r3
 8040720:	d200      	bcs.n	8040724 <delay_ms+0x7c>
		tnow = Delay_GetCounter();
 8040722:	e7dd      	b.n	80406e0 <delay_ms+0x38>
			{
				break;
 8040724:	bf00      	nop
			}
		}
	}
}
 8040726:	bf00      	nop
 8040728:	3724      	adds	r7, #36	; 0x24
 804072a:	46bd      	mov	sp, r7
 804072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040730:	4770      	bx	lr
 8040732:	bf00      	nop
 8040734:	20002298 	.word	0x20002298
 8040738:	200001ec 	.word	0x200001ec

0804073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 804073c:	b580      	push	{r7, lr}
 804073e:	b082      	sub	sp, #8
 8040740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8040742:	4b10      	ldr	r3, [pc, #64]	; (8040784 <MX_DMA_Init+0x48>)
 8040744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040746:	4a0f      	ldr	r2, [pc, #60]	; (8040784 <MX_DMA_Init+0x48>)
 8040748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804074c:	6313      	str	r3, [r2, #48]	; 0x30
 804074e:	4b0d      	ldr	r3, [pc, #52]	; (8040784 <MX_DMA_Init+0x48>)
 8040750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8040756:	607b      	str	r3, [r7, #4]
 8040758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 804075a:	2200      	movs	r2, #0
 804075c:	2105      	movs	r1, #5
 804075e:	203a      	movs	r0, #58	; 0x3a
 8040760:	f001 fa16 	bl	8041b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8040764:	203a      	movs	r0, #58	; 0x3a
 8040766:	f001 fa2f 	bl	8041bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 804076a:	2200      	movs	r2, #0
 804076c:	2105      	movs	r1, #5
 804076e:	2046      	movs	r0, #70	; 0x46
 8040770:	f001 fa0e 	bl	8041b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8040774:	2046      	movs	r0, #70	; 0x46
 8040776:	f001 fa27 	bl	8041bc8 <HAL_NVIC_EnableIRQ>

}
 804077a:	bf00      	nop
 804077c:	3708      	adds	r7, #8
 804077e:	46bd      	mov	sp, r7
 8040780:	bd80      	pop	{r7, pc}
 8040782:	bf00      	nop
 8040784:	40023800 	.word	0x40023800

08040788 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8040788:	b480      	push	{r7}
 804078a:	b085      	sub	sp, #20
 804078c:	af00      	add	r7, sp, #0
 804078e:	60f8      	str	r0, [r7, #12]
 8040790:	60b9      	str	r1, [r7, #8]
 8040792:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8040794:	68fb      	ldr	r3, [r7, #12]
 8040796:	4a07      	ldr	r2, [pc, #28]	; (80407b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8040798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 804079a:	68bb      	ldr	r3, [r7, #8]
 804079c:	4a06      	ldr	r2, [pc, #24]	; (80407b8 <vApplicationGetIdleTaskMemory+0x30>)
 804079e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80407a0:	687b      	ldr	r3, [r7, #4]
 80407a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80407a6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80407a8:	bf00      	nop
 80407aa:	3714      	adds	r7, #20
 80407ac:	46bd      	mov	sp, r7
 80407ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407b2:	4770      	bx	lr
 80407b4:	200001f8 	.word	0x200001f8
 80407b8:	20000298 	.word	0x20000298

080407bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80407bc:	b5b0      	push	{r4, r5, r7, lr}
 80407be:	b08e      	sub	sp, #56	; 0x38
 80407c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80407c2:	4b14      	ldr	r3, [pc, #80]	; (8040814 <MX_FREERTOS_Init+0x58>)
 80407c4:	f107 041c 	add.w	r4, r7, #28
 80407c8:	461d      	mov	r5, r3
 80407ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80407cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80407ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80407d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80407d6:	f107 031c 	add.w	r3, r7, #28
 80407da:	2100      	movs	r1, #0
 80407dc:	4618      	mov	r0, r3
 80407de:	f006 feac 	bl	804753a <osThreadCreate>
 80407e2:	4603      	mov	r3, r0
 80407e4:	4a0c      	ldr	r2, [pc, #48]	; (8040818 <MX_FREERTOS_Init+0x5c>)
 80407e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of feedDogTask */
  osThreadDef(feedDogTask, StartTask02, osPriorityIdle, 0, 2048);
 80407e8:	4b0c      	ldr	r3, [pc, #48]	; (804081c <MX_FREERTOS_Init+0x60>)
 80407ea:	463c      	mov	r4, r7
 80407ec:	461d      	mov	r5, r3
 80407ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80407f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80407f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80407f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  feedDogTaskHandle = osThreadCreate(osThread(feedDogTask), NULL);
 80407fa:	463b      	mov	r3, r7
 80407fc:	2100      	movs	r1, #0
 80407fe:	4618      	mov	r0, r3
 8040800:	f006 fe9b 	bl	804753a <osThreadCreate>
 8040804:	4603      	mov	r3, r0
 8040806:	4a06      	ldr	r2, [pc, #24]	; (8040820 <MX_FREERTOS_Init+0x64>)
 8040808:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
//  osThreadDef(dmaReceiveTask, StartTask03, osPriorityIdle, 0, 2048);
//  dmaReceiveTaskHandle = osThreadCreate(osThread(dmaReceiveTask), NULL);
  /* USER CODE END RTOS_THREADS */

}
 804080a:	bf00      	nop
 804080c:	3738      	adds	r7, #56	; 0x38
 804080e:	46bd      	mov	sp, r7
 8040810:	bdb0      	pop	{r4, r5, r7, pc}
 8040812:	bf00      	nop
 8040814:	08055860 	.word	0x08055860
 8040818:	200001f0 	.word	0x200001f0
 804081c:	08055888 	.word	0x08055888
 8040820:	200001f4 	.word	0x200001f4

08040824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8040824:	b580      	push	{r7, lr}
 8040826:	b082      	sub	sp, #8
 8040828:	af00      	add	r7, sp, #0
 804082a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 804082c:	f005 ffb8 	bl	80467a0 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  printf("flashapp defult task started!!!\r\n");
 8040830:	480c      	ldr	r0, [pc, #48]	; (8040864 <StartDefaultTask+0x40>)
 8040832:	f014 f86b 	bl	805490c <puts>

  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8040836:	2201      	movs	r2, #1
 8040838:	2102      	movs	r1, #2
 804083a:	480b      	ldr	r0, [pc, #44]	; (8040868 <StartDefaultTask+0x44>)
 804083c:	f003 f9ee 	bl	8043c1c <HAL_GPIO_WritePin>
	  osDelay(500);
 8040840:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8040844:	f006 fed1 	bl	80475ea <osDelay>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8040848:	2200      	movs	r2, #0
 804084a:	2102      	movs	r1, #2
 804084c:	4806      	ldr	r0, [pc, #24]	; (8040868 <StartDefaultTask+0x44>)
 804084e:	f003 f9e5 	bl	8043c1c <HAL_GPIO_WritePin>
	  osDelay(500);
 8040852:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8040856:	f006 fec8 	bl	80475ea <osDelay>

	  printf("hello flashApp\r\n");
 804085a:	4804      	ldr	r0, [pc, #16]	; (804086c <StartDefaultTask+0x48>)
 804085c:	f014 f856 	bl	805490c <puts>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8040860:	e7e9      	b.n	8040836 <StartDefaultTask+0x12>
 8040862:	bf00      	nop
 8040864:	080558a4 	.word	0x080558a4
 8040868:	40020400 	.word	0x40020400
 804086c:	080558c8 	.word	0x080558c8

08040870 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8040870:	b480      	push	{r7}
 8040872:	b083      	sub	sp, #12
 8040874:	af00      	add	r7, sp, #0
 8040876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
 8040878:	e7fe      	b.n	8040878 <StartTask02+0x8>
	...

0804087c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 804087c:	b580      	push	{r7, lr}
 804087e:	b08c      	sub	sp, #48	; 0x30
 8040880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040882:	f107 031c 	add.w	r3, r7, #28
 8040886:	2200      	movs	r2, #0
 8040888:	601a      	str	r2, [r3, #0]
 804088a:	605a      	str	r2, [r3, #4]
 804088c:	609a      	str	r2, [r3, #8]
 804088e:	60da      	str	r2, [r3, #12]
 8040890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040892:	4b40      	ldr	r3, [pc, #256]	; (8040994 <MX_GPIO_Init+0x118>)
 8040894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040896:	4a3f      	ldr	r2, [pc, #252]	; (8040994 <MX_GPIO_Init+0x118>)
 8040898:	f043 0310 	orr.w	r3, r3, #16
 804089c:	6313      	str	r3, [r2, #48]	; 0x30
 804089e:	4b3d      	ldr	r3, [pc, #244]	; (8040994 <MX_GPIO_Init+0x118>)
 80408a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408a2:	f003 0310 	and.w	r3, r3, #16
 80408a6:	61bb      	str	r3, [r7, #24]
 80408a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80408aa:	4b3a      	ldr	r3, [pc, #232]	; (8040994 <MX_GPIO_Init+0x118>)
 80408ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ae:	4a39      	ldr	r2, [pc, #228]	; (8040994 <MX_GPIO_Init+0x118>)
 80408b0:	f043 0304 	orr.w	r3, r3, #4
 80408b4:	6313      	str	r3, [r2, #48]	; 0x30
 80408b6:	4b37      	ldr	r3, [pc, #220]	; (8040994 <MX_GPIO_Init+0x118>)
 80408b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ba:	f003 0304 	and.w	r3, r3, #4
 80408be:	617b      	str	r3, [r7, #20]
 80408c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80408c2:	4b34      	ldr	r3, [pc, #208]	; (8040994 <MX_GPIO_Init+0x118>)
 80408c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408c6:	4a33      	ldr	r2, [pc, #204]	; (8040994 <MX_GPIO_Init+0x118>)
 80408c8:	f043 0320 	orr.w	r3, r3, #32
 80408cc:	6313      	str	r3, [r2, #48]	; 0x30
 80408ce:	4b31      	ldr	r3, [pc, #196]	; (8040994 <MX_GPIO_Init+0x118>)
 80408d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408d2:	f003 0320 	and.w	r3, r3, #32
 80408d6:	613b      	str	r3, [r7, #16]
 80408d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80408da:	4b2e      	ldr	r3, [pc, #184]	; (8040994 <MX_GPIO_Init+0x118>)
 80408dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408de:	4a2d      	ldr	r2, [pc, #180]	; (8040994 <MX_GPIO_Init+0x118>)
 80408e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80408e4:	6313      	str	r3, [r2, #48]	; 0x30
 80408e6:	4b2b      	ldr	r3, [pc, #172]	; (8040994 <MX_GPIO_Init+0x118>)
 80408e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80408ee:	60fb      	str	r3, [r7, #12]
 80408f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80408f2:	4b28      	ldr	r3, [pc, #160]	; (8040994 <MX_GPIO_Init+0x118>)
 80408f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408f6:	4a27      	ldr	r2, [pc, #156]	; (8040994 <MX_GPIO_Init+0x118>)
 80408f8:	f043 0301 	orr.w	r3, r3, #1
 80408fc:	6313      	str	r3, [r2, #48]	; 0x30
 80408fe:	4b25      	ldr	r3, [pc, #148]	; (8040994 <MX_GPIO_Init+0x118>)
 8040900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040902:	f003 0301 	and.w	r3, r3, #1
 8040906:	60bb      	str	r3, [r7, #8]
 8040908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804090a:	4b22      	ldr	r3, [pc, #136]	; (8040994 <MX_GPIO_Init+0x118>)
 804090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804090e:	4a21      	ldr	r2, [pc, #132]	; (8040994 <MX_GPIO_Init+0x118>)
 8040910:	f043 0302 	orr.w	r3, r3, #2
 8040914:	6313      	str	r3, [r2, #48]	; 0x30
 8040916:	4b1f      	ldr	r3, [pc, #124]	; (8040994 <MX_GPIO_Init+0x118>)
 8040918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804091a:	f003 0302 	and.w	r3, r3, #2
 804091e:	607b      	str	r3, [r7, #4]
 8040920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040922:	4b1c      	ldr	r3, [pc, #112]	; (8040994 <MX_GPIO_Init+0x118>)
 8040924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040926:	4a1b      	ldr	r2, [pc, #108]	; (8040994 <MX_GPIO_Init+0x118>)
 8040928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804092c:	6313      	str	r3, [r2, #48]	; 0x30
 804092e:	4b19      	ldr	r3, [pc, #100]	; (8040994 <MX_GPIO_Init+0x118>)
 8040930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040936:	603b      	str	r3, [r7, #0]
 8040938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 804093a:	2201      	movs	r2, #1
 804093c:	2103      	movs	r1, #3
 804093e:	4816      	ldr	r0, [pc, #88]	; (8040998 <MX_GPIO_Init+0x11c>)
 8040940:	f003 f96c 	bl	8043c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8040944:	2308      	movs	r3, #8
 8040946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 804094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804094e:	2301      	movs	r3, #1
 8040950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8040952:	f107 031c 	add.w	r3, r7, #28
 8040956:	4619      	mov	r1, r3
 8040958:	4810      	ldr	r0, [pc, #64]	; (804099c <MX_GPIO_Init+0x120>)
 804095a:	f002 ff9b 	bl	8043894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 804095e:	2303      	movs	r3, #3
 8040960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040962:	2301      	movs	r3, #1
 8040964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040966:	2300      	movs	r3, #0
 8040968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804096a:	2300      	movs	r3, #0
 804096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804096e:	f107 031c 	add.w	r3, r7, #28
 8040972:	4619      	mov	r1, r3
 8040974:	4808      	ldr	r0, [pc, #32]	; (8040998 <MX_GPIO_Init+0x11c>)
 8040976:	f002 ff8d 	bl	8043894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 804097a:	2200      	movs	r2, #0
 804097c:	2105      	movs	r1, #5
 804097e:	2009      	movs	r0, #9
 8040980:	f001 f906 	bl	8041b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8040984:	2009      	movs	r0, #9
 8040986:	f001 f91f 	bl	8041bc8 <HAL_NVIC_EnableIRQ>

}
 804098a:	bf00      	nop
 804098c:	3730      	adds	r7, #48	; 0x30
 804098e:	46bd      	mov	sp, r7
 8040990:	bd80      	pop	{r7, pc}
 8040992:	bf00      	nop
 8040994:	40023800 	.word	0x40023800
 8040998:	40020400 	.word	0x40020400
 804099c:	40021c00 	.word	0x40021c00

080409a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80409a0:	b580      	push	{r7, lr}
 80409a2:	b082      	sub	sp, #8
 80409a4:	af00      	add	r7, sp, #0
 80409a6:	4603      	mov	r3, r0
 80409a8:	80fb      	strh	r3, [r7, #6]
    delay_ms(200);  //延时消抖
 80409aa:	20c8      	movs	r0, #200	; 0xc8
 80409ac:	f7ff fe7c 	bl	80406a8 <delay_ms>

    switch (GPIO_Pin)
 80409b0:	88fb      	ldrh	r3, [r7, #6]
 80409b2:	2b08      	cmp	r3, #8
 80409b4:	d103      	bne.n	80409be <HAL_GPIO_EXTI_Callback+0x1e>
    {
    case KEY0_Pin:
      printf("key0 press\r\n");
 80409b6:	4804      	ldr	r0, [pc, #16]	; (80409c8 <HAL_GPIO_EXTI_Callback+0x28>)
 80409b8:	f013 ffa8 	bl	805490c <puts>
      
      break;
 80409bc:	e000      	b.n	80409c0 <HAL_GPIO_EXTI_Callback+0x20>
    
    default:
      break;
 80409be:	bf00      	nop
    }
}
 80409c0:	bf00      	nop
 80409c2:	3708      	adds	r7, #8
 80409c4:	46bd      	mov	sp, r7
 80409c6:	bd80      	pop	{r7, pc}
 80409c8:	080558d8 	.word	0x080558d8

080409cc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80409cc:	b480      	push	{r7}
 80409ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80409d0:	f3bf 8f4f 	dsb	sy
}
 80409d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80409d6:	f3bf 8f6f 	isb	sy
}
 80409da:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80409dc:	4b0d      	ldr	r3, [pc, #52]	; (8040a14 <SCB_EnableICache+0x48>)
 80409de:	2200      	movs	r2, #0
 80409e0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80409e4:	f3bf 8f4f 	dsb	sy
}
 80409e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80409ea:	f3bf 8f6f 	isb	sy
}
 80409ee:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80409f0:	4b08      	ldr	r3, [pc, #32]	; (8040a14 <SCB_EnableICache+0x48>)
 80409f2:	695b      	ldr	r3, [r3, #20]
 80409f4:	4a07      	ldr	r2, [pc, #28]	; (8040a14 <SCB_EnableICache+0x48>)
 80409f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80409fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80409fc:	f3bf 8f4f 	dsb	sy
}
 8040a00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8040a02:	f3bf 8f6f 	isb	sy
}
 8040a06:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8040a08:	bf00      	nop
 8040a0a:	46bd      	mov	sp, r7
 8040a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a10:	4770      	bx	lr
 8040a12:	bf00      	nop
 8040a14:	e000ed00 	.word	0xe000ed00

08040a18 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8040a18:	b480      	push	{r7}
 8040a1a:	b085      	sub	sp, #20
 8040a1c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8040a1e:	4b1f      	ldr	r3, [pc, #124]	; (8040a9c <SCB_EnableDCache+0x84>)
 8040a20:	2200      	movs	r2, #0
 8040a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8040a26:	f3bf 8f4f 	dsb	sy
}
 8040a2a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8040a2c:	4b1b      	ldr	r3, [pc, #108]	; (8040a9c <SCB_EnableDCache+0x84>)
 8040a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040a32:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8040a34:	687b      	ldr	r3, [r7, #4]
 8040a36:	0b5b      	lsrs	r3, r3, #13
 8040a38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8040a3c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8040a3e:	687b      	ldr	r3, [r7, #4]
 8040a40:	08db      	lsrs	r3, r3, #3
 8040a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8040a46:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8040a48:	68fb      	ldr	r3, [r7, #12]
 8040a4a:	015a      	lsls	r2, r3, #5
 8040a4c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8040a50:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8040a52:	68ba      	ldr	r2, [r7, #8]
 8040a54:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8040a56:	4911      	ldr	r1, [pc, #68]	; (8040a9c <SCB_EnableDCache+0x84>)
 8040a58:	4313      	orrs	r3, r2
 8040a5a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8040a5e:	68bb      	ldr	r3, [r7, #8]
 8040a60:	1e5a      	subs	r2, r3, #1
 8040a62:	60ba      	str	r2, [r7, #8]
 8040a64:	2b00      	cmp	r3, #0
 8040a66:	d1ef      	bne.n	8040a48 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8040a68:	68fb      	ldr	r3, [r7, #12]
 8040a6a:	1e5a      	subs	r2, r3, #1
 8040a6c:	60fa      	str	r2, [r7, #12]
 8040a6e:	2b00      	cmp	r3, #0
 8040a70:	d1e5      	bne.n	8040a3e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8040a72:	f3bf 8f4f 	dsb	sy
}
 8040a76:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8040a78:	4b08      	ldr	r3, [pc, #32]	; (8040a9c <SCB_EnableDCache+0x84>)
 8040a7a:	695b      	ldr	r3, [r3, #20]
 8040a7c:	4a07      	ldr	r2, [pc, #28]	; (8040a9c <SCB_EnableDCache+0x84>)
 8040a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8040a82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8040a84:	f3bf 8f4f 	dsb	sy
}
 8040a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8040a8a:	f3bf 8f6f 	isb	sy
}
 8040a8e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8040a90:	bf00      	nop
 8040a92:	3714      	adds	r7, #20
 8040a94:	46bd      	mov	sp, r7
 8040a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a9a:	4770      	bx	lr
 8040a9c:	e000ed00 	.word	0xe000ed00

08040aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040aa0:	b580      	push	{r7, lr}
 8040aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SCB->VTOR = FLASH_BASE | 0x40000;
 8040aa4:	4b17      	ldr	r3, [pc, #92]	; (8040b04 <main+0x64>)
 8040aa6:	4a18      	ldr	r2, [pc, #96]	; (8040b08 <main+0x68>)
 8040aa8:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8040aaa:	f7ff ff8f 	bl	80409cc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8040aae:	f7ff ffb3 	bl	8040a18 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040ab2:	f000 ff57 	bl	8041964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040ab6:	f000 f829 	bl	8040b0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->CACR|=1<<2;  //强制D-Cache�?写,如�?开�?�,实际使用中�?�能�?�到�?��?问题
 8040aba:	4b12      	ldr	r3, [pc, #72]	; (8040b04 <main+0x64>)
 8040abc:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8040ac0:	4a10      	ldr	r2, [pc, #64]	; (8040b04 <main+0x64>)
 8040ac2:	f043 0304 	orr.w	r3, r3, #4
 8040ac6:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
  delay_init();
 8040aca:	f7ff fd87 	bl	80405dc <delay_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040ace:	f7ff fed5 	bl	804087c <MX_GPIO_Init>
  MX_DMA_Init();
 8040ad2:	f7ff fe33 	bl	804073c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8040ad6:	f000 fcbf 	bl	8041458 <MX_USART1_UART_Init>
  //MX_QUADSPI_Init();
  /* USER CODE BEGIN 2 */
  //iwdg_init中已�?开�?�iwdg
  PCF8574_Init();
 8040ada:	f000 fa4d 	bl	8040f78 <PCF8574_Init>
	PCF8574_WriteBit(ETH_RESET_IO,1);
 8040ade:	2101      	movs	r1, #1
 8040ae0:	2007      	movs	r0, #7
 8040ae2:	f000 fab6 	bl	8041052 <PCF8574_WriteBit>
	delay_ms(100);
 8040ae6:	2064      	movs	r0, #100	; 0x64
 8040ae8:	f7ff fdde 	bl	80406a8 <delay_ms>
	PCF8574_WriteBit(ETH_RESET_IO,0);
 8040aec:	2100      	movs	r1, #0
 8040aee:	2007      	movs	r0, #7
 8040af0:	f000 faaf 	bl	8041052 <PCF8574_WriteBit>
	delay_ms(100);
 8040af4:	2064      	movs	r0, #100	; 0x64
 8040af6:	f7ff fdd7 	bl	80406a8 <delay_ms>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8040afa:	f7ff fe5f 	bl	80407bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8040afe:	f006 fd05 	bl	804750c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8040b02:	e7fe      	b.n	8040b02 <main+0x62>
 8040b04:	e000ed00 	.word	0xe000ed00
 8040b08:	08040000 	.word	0x08040000

08040b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040b0c:	b580      	push	{r7, lr}
 8040b0e:	b094      	sub	sp, #80	; 0x50
 8040b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040b12:	f107 031c 	add.w	r3, r7, #28
 8040b16:	2234      	movs	r2, #52	; 0x34
 8040b18:	2100      	movs	r1, #0
 8040b1a:	4618      	mov	r0, r3
 8040b1c:	f013 ffe6 	bl	8054aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040b20:	f107 0308 	add.w	r3, r7, #8
 8040b24:	2200      	movs	r2, #0
 8040b26:	601a      	str	r2, [r3, #0]
 8040b28:	605a      	str	r2, [r3, #4]
 8040b2a:	609a      	str	r2, [r3, #8]
 8040b2c:	60da      	str	r2, [r3, #12]
 8040b2e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8040b30:	f003 f8a6 	bl	8043c80 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040b34:	4b2b      	ldr	r3, [pc, #172]	; (8040be4 <SystemClock_Config+0xd8>)
 8040b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b38:	4a2a      	ldr	r2, [pc, #168]	; (8040be4 <SystemClock_Config+0xd8>)
 8040b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8040b40:	4b28      	ldr	r3, [pc, #160]	; (8040be4 <SystemClock_Config+0xd8>)
 8040b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040b48:	607b      	str	r3, [r7, #4]
 8040b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040b4c:	4b26      	ldr	r3, [pc, #152]	; (8040be8 <SystemClock_Config+0xdc>)
 8040b4e:	681b      	ldr	r3, [r3, #0]
 8040b50:	4a25      	ldr	r2, [pc, #148]	; (8040be8 <SystemClock_Config+0xdc>)
 8040b52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8040b56:	6013      	str	r3, [r2, #0]
 8040b58:	4b23      	ldr	r3, [pc, #140]	; (8040be8 <SystemClock_Config+0xdc>)
 8040b5a:	681b      	ldr	r3, [r3, #0]
 8040b5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040b60:	603b      	str	r3, [r7, #0]
 8040b62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040b64:	2302      	movs	r3, #2
 8040b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040b68:	2301      	movs	r3, #1
 8040b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040b6c:	2310      	movs	r3, #16
 8040b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040b70:	2302      	movs	r3, #2
 8040b72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8040b74:	2300      	movs	r3, #0
 8040b76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8040b78:	2308      	movs	r3, #8
 8040b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8040b7c:	23d8      	movs	r3, #216	; 0xd8
 8040b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8040b80:	2302      	movs	r3, #2
 8040b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8040b84:	2302      	movs	r3, #2
 8040b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040b88:	2302      	movs	r3, #2
 8040b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040b8c:	f107 031c 	add.w	r3, r7, #28
 8040b90:	4618      	mov	r0, r3
 8040b92:	f003 f8d5 	bl	8043d40 <HAL_RCC_OscConfig>
 8040b96:	4603      	mov	r3, r0
 8040b98:	2b00      	cmp	r3, #0
 8040b9a:	d001      	beq.n	8040ba0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8040b9c:	f000 f838 	bl	8040c10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8040ba0:	f003 f87e 	bl	8043ca0 <HAL_PWREx_EnableOverDrive>
 8040ba4:	4603      	mov	r3, r0
 8040ba6:	2b00      	cmp	r3, #0
 8040ba8:	d001      	beq.n	8040bae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8040baa:	f000 f831 	bl	8040c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040bae:	230f      	movs	r3, #15
 8040bb0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040bb2:	2302      	movs	r3, #2
 8040bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040bb6:	2300      	movs	r3, #0
 8040bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8040bba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8040bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8040bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040bc4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8040bc6:	f107 0308 	add.w	r3, r7, #8
 8040bca:	2107      	movs	r1, #7
 8040bcc:	4618      	mov	r0, r3
 8040bce:	f003 fb65 	bl	804429c <HAL_RCC_ClockConfig>
 8040bd2:	4603      	mov	r3, r0
 8040bd4:	2b00      	cmp	r3, #0
 8040bd6:	d001      	beq.n	8040bdc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8040bd8:	f000 f81a 	bl	8040c10 <Error_Handler>
  }
}
 8040bdc:	bf00      	nop
 8040bde:	3750      	adds	r7, #80	; 0x50
 8040be0:	46bd      	mov	sp, r7
 8040be2:	bd80      	pop	{r7, pc}
 8040be4:	40023800 	.word	0x40023800
 8040be8:	40007000 	.word	0x40007000

08040bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040bec:	b580      	push	{r7, lr}
 8040bee:	b082      	sub	sp, #8
 8040bf0:	af00      	add	r7, sp, #0
 8040bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8040bf4:	687b      	ldr	r3, [r7, #4]
 8040bf6:	681b      	ldr	r3, [r3, #0]
 8040bf8:	4a04      	ldr	r2, [pc, #16]	; (8040c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040bfa:	4293      	cmp	r3, r2
 8040bfc:	d101      	bne.n	8040c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040bfe:	f000 febf 	bl	8041980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040c02:	bf00      	nop
 8040c04:	3708      	adds	r7, #8
 8040c06:	46bd      	mov	sp, r7
 8040c08:	bd80      	pop	{r7, pc}
 8040c0a:	bf00      	nop
 8040c0c:	40014400 	.word	0x40014400

08040c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040c10:	b480      	push	{r7}
 8040c12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8040c14:	b672      	cpsid	i
}
 8040c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040c18:	e7fe      	b.n	8040c18 <Error_Handler+0x8>
	...

08040c1c <IIC_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//IIC��ʼ��
void IIC_Init(void)
{
 8040c1c:	b580      	push	{r7, lr}
 8040c1e:	b086      	sub	sp, #24
 8040c20:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    
    __HAL_RCC_GPIOH_CLK_ENABLE();   //ʹ��GPIOHʱ��
 8040c22:	4b13      	ldr	r3, [pc, #76]	; (8040c70 <IIC_Init+0x54>)
 8040c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c26:	4a12      	ldr	r2, [pc, #72]	; (8040c70 <IIC_Init+0x54>)
 8040c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8040c2e:	4b10      	ldr	r3, [pc, #64]	; (8040c70 <IIC_Init+0x54>)
 8040c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040c36:	603b      	str	r3, [r7, #0]
 8040c38:	683b      	ldr	r3, [r7, #0]
    
    //PH4,5��ʼ������
    GPIO_Initure.Pin=GPIO_PIN_4|GPIO_PIN_5;
 8040c3a:	2330      	movs	r3, #48	; 0x30
 8040c3c:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //�������
 8040c3e:	2301      	movs	r3, #1
 8040c40:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8040c42:	2301      	movs	r3, #1
 8040c44:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FAST;     //����
 8040c46:	2302      	movs	r3, #2
 8040c48:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOH,&GPIO_Initure);
 8040c4a:	1d3b      	adds	r3, r7, #4
 8040c4c:	4619      	mov	r1, r3
 8040c4e:	4809      	ldr	r0, [pc, #36]	; (8040c74 <IIC_Init+0x58>)
 8040c50:	f002 fe20 	bl	8043894 <HAL_GPIO_Init>
    
    IIC_SDA(1);
 8040c54:	2201      	movs	r2, #1
 8040c56:	2120      	movs	r1, #32
 8040c58:	4806      	ldr	r0, [pc, #24]	; (8040c74 <IIC_Init+0x58>)
 8040c5a:	f002 ffdf 	bl	8043c1c <HAL_GPIO_WritePin>
    IIC_SCL(1);  
 8040c5e:	2201      	movs	r2, #1
 8040c60:	2110      	movs	r1, #16
 8040c62:	4804      	ldr	r0, [pc, #16]	; (8040c74 <IIC_Init+0x58>)
 8040c64:	f002 ffda 	bl	8043c1c <HAL_GPIO_WritePin>
}
 8040c68:	bf00      	nop
 8040c6a:	3718      	adds	r7, #24
 8040c6c:	46bd      	mov	sp, r7
 8040c6e:	bd80      	pop	{r7, pc}
 8040c70:	40023800 	.word	0x40023800
 8040c74:	40021c00 	.word	0x40021c00

08040c78 <IIC_Start>:

//����IIC��ʼ�ź�
void IIC_Start(void)
{
 8040c78:	b580      	push	{r7, lr}
 8040c7a:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda�����
 8040c7c:	4b13      	ldr	r3, [pc, #76]	; (8040ccc <IIC_Start+0x54>)
 8040c7e:	681b      	ldr	r3, [r3, #0]
 8040c80:	4a12      	ldr	r2, [pc, #72]	; (8040ccc <IIC_Start+0x54>)
 8040c82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040c86:	6013      	str	r3, [r2, #0]
 8040c88:	4b10      	ldr	r3, [pc, #64]	; (8040ccc <IIC_Start+0x54>)
 8040c8a:	681b      	ldr	r3, [r3, #0]
 8040c8c:	4a0f      	ldr	r2, [pc, #60]	; (8040ccc <IIC_Start+0x54>)
 8040c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040c92:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);	  	  
 8040c94:	2201      	movs	r2, #1
 8040c96:	2120      	movs	r1, #32
 8040c98:	480c      	ldr	r0, [pc, #48]	; (8040ccc <IIC_Start+0x54>)
 8040c9a:	f002 ffbf 	bl	8043c1c <HAL_GPIO_WritePin>
	IIC_SCL(1);
 8040c9e:	2201      	movs	r2, #1
 8040ca0:	2110      	movs	r1, #16
 8040ca2:	480a      	ldr	r0, [pc, #40]	; (8040ccc <IIC_Start+0x54>)
 8040ca4:	f002 ffba 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(4);
 8040ca8:	2004      	movs	r0, #4
 8040caa:	f7ff fcb3 	bl	8040614 <delay_us>
 	IIC_SDA(0);//START:when CLK is high,DATA change form high to low 
 8040cae:	2200      	movs	r2, #0
 8040cb0:	2120      	movs	r1, #32
 8040cb2:	4806      	ldr	r0, [pc, #24]	; (8040ccc <IIC_Start+0x54>)
 8040cb4:	f002 ffb2 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(4);
 8040cb8:	2004      	movs	r0, #4
 8040cba:	f7ff fcab 	bl	8040614 <delay_us>
	IIC_SCL(0);//ǯסI2C���ߣ�׼�����ͻ�������� 
 8040cbe:	2200      	movs	r2, #0
 8040cc0:	2110      	movs	r1, #16
 8040cc2:	4802      	ldr	r0, [pc, #8]	; (8040ccc <IIC_Start+0x54>)
 8040cc4:	f002 ffaa 	bl	8043c1c <HAL_GPIO_WritePin>
}	  
 8040cc8:	bf00      	nop
 8040cca:	bd80      	pop	{r7, pc}
 8040ccc:	40021c00 	.word	0x40021c00

08040cd0 <IIC_Stop>:
//����IICֹͣ�ź�
void IIC_Stop(void)
{
 8040cd0:	b580      	push	{r7, lr}
 8040cd2:	af00      	add	r7, sp, #0
	SDA_OUT();//sda�����
 8040cd4:	4b13      	ldr	r3, [pc, #76]	; (8040d24 <IIC_Stop+0x54>)
 8040cd6:	681b      	ldr	r3, [r3, #0]
 8040cd8:	4a12      	ldr	r2, [pc, #72]	; (8040d24 <IIC_Stop+0x54>)
 8040cda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040cde:	6013      	str	r3, [r2, #0]
 8040ce0:	4b10      	ldr	r3, [pc, #64]	; (8040d24 <IIC_Stop+0x54>)
 8040ce2:	681b      	ldr	r3, [r3, #0]
 8040ce4:	4a0f      	ldr	r2, [pc, #60]	; (8040d24 <IIC_Stop+0x54>)
 8040ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040cea:	6013      	str	r3, [r2, #0]
	IIC_SCL(0);
 8040cec:	2200      	movs	r2, #0
 8040cee:	2110      	movs	r1, #16
 8040cf0:	480c      	ldr	r0, [pc, #48]	; (8040d24 <IIC_Stop+0x54>)
 8040cf2:	f002 ff93 	bl	8043c1c <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 8040cf6:	2200      	movs	r2, #0
 8040cf8:	2120      	movs	r1, #32
 8040cfa:	480a      	ldr	r0, [pc, #40]	; (8040d24 <IIC_Stop+0x54>)
 8040cfc:	f002 ff8e 	bl	8043c1c <HAL_GPIO_WritePin>
 	delay_us(4);
 8040d00:	2004      	movs	r0, #4
 8040d02:	f7ff fc87 	bl	8040614 <delay_us>
	IIC_SCL(1); 
 8040d06:	2201      	movs	r2, #1
 8040d08:	2110      	movs	r1, #16
 8040d0a:	4806      	ldr	r0, [pc, #24]	; (8040d24 <IIC_Stop+0x54>)
 8040d0c:	f002 ff86 	bl	8043c1c <HAL_GPIO_WritePin>
	IIC_SDA(1);//����I2C���߽����ź�
 8040d10:	2201      	movs	r2, #1
 8040d12:	2120      	movs	r1, #32
 8040d14:	4803      	ldr	r0, [pc, #12]	; (8040d24 <IIC_Stop+0x54>)
 8040d16:	f002 ff81 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(4);							   	
 8040d1a:	2004      	movs	r0, #4
 8040d1c:	f7ff fc7a 	bl	8040614 <delay_us>
}
 8040d20:	bf00      	nop
 8040d22:	bd80      	pop	{r7, pc}
 8040d24:	40021c00 	.word	0x40021c00

08040d28 <IIC_Wait_Ack>:
//�ȴ�Ӧ���źŵ���
//����ֵ��1������Ӧ��ʧ��
//        0������Ӧ��ɹ�
uint8_t IIC_Wait_Ack(void)
{
 8040d28:	b580      	push	{r7, lr}
 8040d2a:	b082      	sub	sp, #8
 8040d2c:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8040d2e:	2300      	movs	r3, #0
 8040d30:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA����Ϊ����  
 8040d32:	4b1b      	ldr	r3, [pc, #108]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d34:	681b      	ldr	r3, [r3, #0]
 8040d36:	4a1a      	ldr	r2, [pc, #104]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040d3c:	6013      	str	r3, [r2, #0]
 8040d3e:	4b18      	ldr	r3, [pc, #96]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d40:	4a17      	ldr	r2, [pc, #92]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d42:	681b      	ldr	r3, [r3, #0]
 8040d44:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);delay_us(1);	   
 8040d46:	2201      	movs	r2, #1
 8040d48:	2120      	movs	r1, #32
 8040d4a:	4815      	ldr	r0, [pc, #84]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d4c:	f002 ff66 	bl	8043c1c <HAL_GPIO_WritePin>
 8040d50:	2001      	movs	r0, #1
 8040d52:	f7ff fc5f 	bl	8040614 <delay_us>
	IIC_SCL(1);delay_us(1);	 
 8040d56:	2201      	movs	r2, #1
 8040d58:	2110      	movs	r1, #16
 8040d5a:	4811      	ldr	r0, [pc, #68]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d5c:	f002 ff5e 	bl	8043c1c <HAL_GPIO_WritePin>
 8040d60:	2001      	movs	r0, #1
 8040d62:	f7ff fc57 	bl	8040614 <delay_us>
	while(READ_SDA)
 8040d66:	e009      	b.n	8040d7c <IIC_Wait_Ack+0x54>
	{
		ucErrTime++;
 8040d68:	79fb      	ldrb	r3, [r7, #7]
 8040d6a:	3301      	adds	r3, #1
 8040d6c:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8040d6e:	79fb      	ldrb	r3, [r7, #7]
 8040d70:	2bfa      	cmp	r3, #250	; 0xfa
 8040d72:	d903      	bls.n	8040d7c <IIC_Wait_Ack+0x54>
		{
			IIC_Stop();
 8040d74:	f7ff ffac 	bl	8040cd0 <IIC_Stop>
			return 1;
 8040d78:	2301      	movs	r3, #1
 8040d7a:	e00c      	b.n	8040d96 <IIC_Wait_Ack+0x6e>
	while(READ_SDA)
 8040d7c:	2120      	movs	r1, #32
 8040d7e:	4808      	ldr	r0, [pc, #32]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d80:	f002 ff34 	bl	8043bec <HAL_GPIO_ReadPin>
 8040d84:	4603      	mov	r3, r0
 8040d86:	2b00      	cmp	r3, #0
 8040d88:	d1ee      	bne.n	8040d68 <IIC_Wait_Ack+0x40>
		}
	}
	IIC_SCL(0);//ʱ�����0 	   
 8040d8a:	2200      	movs	r2, #0
 8040d8c:	2110      	movs	r1, #16
 8040d8e:	4804      	ldr	r0, [pc, #16]	; (8040da0 <IIC_Wait_Ack+0x78>)
 8040d90:	f002 ff44 	bl	8043c1c <HAL_GPIO_WritePin>
	return 0;  
 8040d94:	2300      	movs	r3, #0
} 
 8040d96:	4618      	mov	r0, r3
 8040d98:	3708      	adds	r7, #8
 8040d9a:	46bd      	mov	sp, r7
 8040d9c:	bd80      	pop	{r7, pc}
 8040d9e:	bf00      	nop
 8040da0:	40021c00 	.word	0x40021c00

08040da4 <IIC_Ack>:
//����ACKӦ��
void IIC_Ack(void)
{
 8040da4:	b580      	push	{r7, lr}
 8040da6:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8040da8:	2200      	movs	r2, #0
 8040daa:	2110      	movs	r1, #16
 8040dac:	4812      	ldr	r0, [pc, #72]	; (8040df8 <IIC_Ack+0x54>)
 8040dae:	f002 ff35 	bl	8043c1c <HAL_GPIO_WritePin>
	SDA_OUT();
 8040db2:	4b11      	ldr	r3, [pc, #68]	; (8040df8 <IIC_Ack+0x54>)
 8040db4:	681b      	ldr	r3, [r3, #0]
 8040db6:	4a10      	ldr	r2, [pc, #64]	; (8040df8 <IIC_Ack+0x54>)
 8040db8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040dbc:	6013      	str	r3, [r2, #0]
 8040dbe:	4b0e      	ldr	r3, [pc, #56]	; (8040df8 <IIC_Ack+0x54>)
 8040dc0:	681b      	ldr	r3, [r3, #0]
 8040dc2:	4a0d      	ldr	r2, [pc, #52]	; (8040df8 <IIC_Ack+0x54>)
 8040dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040dc8:	6013      	str	r3, [r2, #0]
	IIC_SDA(0);
 8040dca:	2200      	movs	r2, #0
 8040dcc:	2120      	movs	r1, #32
 8040dce:	480a      	ldr	r0, [pc, #40]	; (8040df8 <IIC_Ack+0x54>)
 8040dd0:	f002 ff24 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(2);
 8040dd4:	2002      	movs	r0, #2
 8040dd6:	f7ff fc1d 	bl	8040614 <delay_us>
	IIC_SCL(1);
 8040dda:	2201      	movs	r2, #1
 8040ddc:	2110      	movs	r1, #16
 8040dde:	4806      	ldr	r0, [pc, #24]	; (8040df8 <IIC_Ack+0x54>)
 8040de0:	f002 ff1c 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(2);
 8040de4:	2002      	movs	r0, #2
 8040de6:	f7ff fc15 	bl	8040614 <delay_us>
	IIC_SCL(0);
 8040dea:	2200      	movs	r2, #0
 8040dec:	2110      	movs	r1, #16
 8040dee:	4802      	ldr	r0, [pc, #8]	; (8040df8 <IIC_Ack+0x54>)
 8040df0:	f002 ff14 	bl	8043c1c <HAL_GPIO_WritePin>
}
 8040df4:	bf00      	nop
 8040df6:	bd80      	pop	{r7, pc}
 8040df8:	40021c00 	.word	0x40021c00

08040dfc <IIC_NAck>:
//������ACKӦ��		    
void IIC_NAck(void)
{
 8040dfc:	b580      	push	{r7, lr}
 8040dfe:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8040e00:	2200      	movs	r2, #0
 8040e02:	2110      	movs	r1, #16
 8040e04:	4812      	ldr	r0, [pc, #72]	; (8040e50 <IIC_NAck+0x54>)
 8040e06:	f002 ff09 	bl	8043c1c <HAL_GPIO_WritePin>
	SDA_OUT();
 8040e0a:	4b11      	ldr	r3, [pc, #68]	; (8040e50 <IIC_NAck+0x54>)
 8040e0c:	681b      	ldr	r3, [r3, #0]
 8040e0e:	4a10      	ldr	r2, [pc, #64]	; (8040e50 <IIC_NAck+0x54>)
 8040e10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040e14:	6013      	str	r3, [r2, #0]
 8040e16:	4b0e      	ldr	r3, [pc, #56]	; (8040e50 <IIC_NAck+0x54>)
 8040e18:	681b      	ldr	r3, [r3, #0]
 8040e1a:	4a0d      	ldr	r2, [pc, #52]	; (8040e50 <IIC_NAck+0x54>)
 8040e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040e20:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);
 8040e22:	2201      	movs	r2, #1
 8040e24:	2120      	movs	r1, #32
 8040e26:	480a      	ldr	r0, [pc, #40]	; (8040e50 <IIC_NAck+0x54>)
 8040e28:	f002 fef8 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(2);
 8040e2c:	2002      	movs	r0, #2
 8040e2e:	f7ff fbf1 	bl	8040614 <delay_us>
	IIC_SCL(1);
 8040e32:	2201      	movs	r2, #1
 8040e34:	2110      	movs	r1, #16
 8040e36:	4806      	ldr	r0, [pc, #24]	; (8040e50 <IIC_NAck+0x54>)
 8040e38:	f002 fef0 	bl	8043c1c <HAL_GPIO_WritePin>
	delay_us(2);
 8040e3c:	2002      	movs	r0, #2
 8040e3e:	f7ff fbe9 	bl	8040614 <delay_us>
	IIC_SCL(0);
 8040e42:	2200      	movs	r2, #0
 8040e44:	2110      	movs	r1, #16
 8040e46:	4802      	ldr	r0, [pc, #8]	; (8040e50 <IIC_NAck+0x54>)
 8040e48:	f002 fee8 	bl	8043c1c <HAL_GPIO_WritePin>
}					 				     
 8040e4c:	bf00      	nop
 8040e4e:	bd80      	pop	{r7, pc}
 8040e50:	40021c00 	.word	0x40021c00

08040e54 <IIC_Send_Byte>:
//IIC����һ���ֽ�
//���شӻ�����Ӧ��
//1����Ӧ��
//0����Ӧ��			  
void IIC_Send_Byte(uint8_t txd)
{                        
 8040e54:	b580      	push	{r7, lr}
 8040e56:	b084      	sub	sp, #16
 8040e58:	af00      	add	r7, sp, #0
 8040e5a:	4603      	mov	r3, r0
 8040e5c:	71fb      	strb	r3, [r7, #7]
    uint8_t t;   
	SDA_OUT(); 	    
 8040e5e:	4b22      	ldr	r3, [pc, #136]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040e60:	681b      	ldr	r3, [r3, #0]
 8040e62:	4a21      	ldr	r2, [pc, #132]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040e64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040e68:	6013      	str	r3, [r2, #0]
 8040e6a:	4b1f      	ldr	r3, [pc, #124]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040e6c:	681b      	ldr	r3, [r3, #0]
 8040e6e:	4a1e      	ldr	r2, [pc, #120]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8040e74:	6013      	str	r3, [r2, #0]
    IIC_SCL(0);//����ʱ�ӿ�ʼ���ݴ���
 8040e76:	2200      	movs	r2, #0
 8040e78:	2110      	movs	r1, #16
 8040e7a:	481b      	ldr	r0, [pc, #108]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040e7c:	f002 fece 	bl	8043c1c <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8040e80:	2300      	movs	r3, #0
 8040e82:	73fb      	strb	r3, [r7, #15]
 8040e84:	e027      	b.n	8040ed6 <IIC_Send_Byte+0x82>
    {              
        IIC_SDA((txd&0x80)>>7);
 8040e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e8a:	2b00      	cmp	r3, #0
 8040e8c:	da05      	bge.n	8040e9a <IIC_Send_Byte+0x46>
 8040e8e:	2201      	movs	r2, #1
 8040e90:	2120      	movs	r1, #32
 8040e92:	4815      	ldr	r0, [pc, #84]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040e94:	f002 fec2 	bl	8043c1c <HAL_GPIO_WritePin>
 8040e98:	e004      	b.n	8040ea4 <IIC_Send_Byte+0x50>
 8040e9a:	2200      	movs	r2, #0
 8040e9c:	2120      	movs	r1, #32
 8040e9e:	4812      	ldr	r0, [pc, #72]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040ea0:	f002 febc 	bl	8043c1c <HAL_GPIO_WritePin>
        txd<<=1; 	  
 8040ea4:	79fb      	ldrb	r3, [r7, #7]
 8040ea6:	005b      	lsls	r3, r3, #1
 8040ea8:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //��TEA5767��������ʱ���Ǳ����
 8040eaa:	2002      	movs	r0, #2
 8040eac:	f7ff fbb2 	bl	8040614 <delay_us>
		IIC_SCL(1);
 8040eb0:	2201      	movs	r2, #1
 8040eb2:	2110      	movs	r1, #16
 8040eb4:	480c      	ldr	r0, [pc, #48]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040eb6:	f002 feb1 	bl	8043c1c <HAL_GPIO_WritePin>
		delay_us(2); 
 8040eba:	2002      	movs	r0, #2
 8040ebc:	f7ff fbaa 	bl	8040614 <delay_us>
		IIC_SCL(0);	
 8040ec0:	2200      	movs	r2, #0
 8040ec2:	2110      	movs	r1, #16
 8040ec4:	4808      	ldr	r0, [pc, #32]	; (8040ee8 <IIC_Send_Byte+0x94>)
 8040ec6:	f002 fea9 	bl	8043c1c <HAL_GPIO_WritePin>
		delay_us(2);
 8040eca:	2002      	movs	r0, #2
 8040ecc:	f7ff fba2 	bl	8040614 <delay_us>
    for(t=0;t<8;t++)
 8040ed0:	7bfb      	ldrb	r3, [r7, #15]
 8040ed2:	3301      	adds	r3, #1
 8040ed4:	73fb      	strb	r3, [r7, #15]
 8040ed6:	7bfb      	ldrb	r3, [r7, #15]
 8040ed8:	2b07      	cmp	r3, #7
 8040eda:	d9d4      	bls.n	8040e86 <IIC_Send_Byte+0x32>
    }	 
} 	    
 8040edc:	bf00      	nop
 8040ede:	bf00      	nop
 8040ee0:	3710      	adds	r7, #16
 8040ee2:	46bd      	mov	sp, r7
 8040ee4:	bd80      	pop	{r7, pc}
 8040ee6:	bf00      	nop
 8040ee8:	40021c00 	.word	0x40021c00

08040eec <IIC_Read_Byte>:
//��1���ֽڣ�ack=1ʱ������ACK��ack=0������nACK   
uint8_t IIC_Read_Byte(unsigned char ack)
{
 8040eec:	b580      	push	{r7, lr}
 8040eee:	b084      	sub	sp, #16
 8040ef0:	af00      	add	r7, sp, #0
 8040ef2:	4603      	mov	r3, r0
 8040ef4:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8040ef6:	2300      	movs	r3, #0
 8040ef8:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA����Ϊ����
 8040efa:	4b1e      	ldr	r3, [pc, #120]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040efc:	681b      	ldr	r3, [r3, #0]
 8040efe:	4a1d      	ldr	r2, [pc, #116]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040f00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8040f04:	6013      	str	r3, [r2, #0]
 8040f06:	4b1b      	ldr	r3, [pc, #108]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040f08:	4a1a      	ldr	r2, [pc, #104]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040f0a:	681b      	ldr	r3, [r3, #0]
 8040f0c:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 8040f0e:	2300      	movs	r3, #0
 8040f10:	73fb      	strb	r3, [r7, #15]
 8040f12:	e01f      	b.n	8040f54 <IIC_Read_Byte+0x68>
	{
        IIC_SCL(0); 
 8040f14:	2200      	movs	r2, #0
 8040f16:	2110      	movs	r1, #16
 8040f18:	4816      	ldr	r0, [pc, #88]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040f1a:	f002 fe7f 	bl	8043c1c <HAL_GPIO_WritePin>
        delay_us(2);
 8040f1e:	2002      	movs	r0, #2
 8040f20:	f7ff fb78 	bl	8040614 <delay_us>
		IIC_SCL(1);
 8040f24:	2201      	movs	r2, #1
 8040f26:	2110      	movs	r1, #16
 8040f28:	4812      	ldr	r0, [pc, #72]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040f2a:	f002 fe77 	bl	8043c1c <HAL_GPIO_WritePin>
        receive<<=1;
 8040f2e:	7bbb      	ldrb	r3, [r7, #14]
 8040f30:	005b      	lsls	r3, r3, #1
 8040f32:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;   
 8040f34:	2120      	movs	r1, #32
 8040f36:	480f      	ldr	r0, [pc, #60]	; (8040f74 <IIC_Read_Byte+0x88>)
 8040f38:	f002 fe58 	bl	8043bec <HAL_GPIO_ReadPin>
 8040f3c:	4603      	mov	r3, r0
 8040f3e:	2b00      	cmp	r3, #0
 8040f40:	d002      	beq.n	8040f48 <IIC_Read_Byte+0x5c>
 8040f42:	7bbb      	ldrb	r3, [r7, #14]
 8040f44:	3301      	adds	r3, #1
 8040f46:	73bb      	strb	r3, [r7, #14]
		delay_us(1); 
 8040f48:	2001      	movs	r0, #1
 8040f4a:	f7ff fb63 	bl	8040614 <delay_us>
    for(i=0;i<8;i++ )
 8040f4e:	7bfb      	ldrb	r3, [r7, #15]
 8040f50:	3301      	adds	r3, #1
 8040f52:	73fb      	strb	r3, [r7, #15]
 8040f54:	7bfb      	ldrb	r3, [r7, #15]
 8040f56:	2b07      	cmp	r3, #7
 8040f58:	d9dc      	bls.n	8040f14 <IIC_Read_Byte+0x28>
    }					 
    if (!ack)
 8040f5a:	79fb      	ldrb	r3, [r7, #7]
 8040f5c:	2b00      	cmp	r3, #0
 8040f5e:	d102      	bne.n	8040f66 <IIC_Read_Byte+0x7a>
        IIC_NAck();//����nACK
 8040f60:	f7ff ff4c 	bl	8040dfc <IIC_NAck>
 8040f64:	e001      	b.n	8040f6a <IIC_Read_Byte+0x7e>
    else
        IIC_Ack(); //����ACK   
 8040f66:	f7ff ff1d 	bl	8040da4 <IIC_Ack>
    return receive;
 8040f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8040f6c:	4618      	mov	r0, r3
 8040f6e:	3710      	adds	r7, #16
 8040f70:	46bd      	mov	sp, r7
 8040f72:	bd80      	pop	{r7, pc}
 8040f74:	40021c00 	.word	0x40021c00

08040f78 <PCF8574_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//��ʼ��PCF8574
uint8_t PCF8574_Init(void)
{
 8040f78:	b580      	push	{r7, lr}
 8040f7a:	b088      	sub	sp, #32
 8040f7c:	af00      	add	r7, sp, #0
    uint8_t temp=0;
 8040f7e:	2300      	movs	r3, #0
 8040f80:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef GPIO_Initure;
    __HAL_RCC_GPIOB_CLK_ENABLE();           //ʹ��GPIOBʱ��
 8040f82:	4b18      	ldr	r3, [pc, #96]	; (8040fe4 <PCF8574_Init+0x6c>)
 8040f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f86:	4a17      	ldr	r2, [pc, #92]	; (8040fe4 <PCF8574_Init+0x6c>)
 8040f88:	f043 0302 	orr.w	r3, r3, #2
 8040f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8040f8e:	4b15      	ldr	r3, [pc, #84]	; (8040fe4 <PCF8574_Init+0x6c>)
 8040f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f92:	f003 0302 	and.w	r3, r3, #2
 8040f96:	607b      	str	r3, [r7, #4]
 8040f98:	687b      	ldr	r3, [r7, #4]
	
    GPIO_Initure.Pin=GPIO_PIN_12;           //PB12
 8040f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040f9e:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_INPUT;      //����
 8040fa0:	2300      	movs	r3, #0
 8040fa2:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //����
 8040fa4:	2301      	movs	r3, #1
 8040fa6:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;     //����
 8040fa8:	2303      	movs	r3, #3
 8040faa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //��ʼ��
 8040fac:	f107 0308 	add.w	r3, r7, #8
 8040fb0:	4619      	mov	r1, r3
 8040fb2:	480d      	ldr	r0, [pc, #52]	; (8040fe8 <PCF8574_Init+0x70>)
 8040fb4:	f002 fc6e 	bl	8043894 <HAL_GPIO_Init>
    IIC_Init();					            //IIC��ʼ�� 	
 8040fb8:	f7ff fe30 	bl	8040c1c <IIC_Init>
	//���PCF8574�Ƿ���λ
    IIC_Start();    	 	   
 8040fbc:	f7ff fe5c 	bl	8040c78 <IIC_Start>
	IIC_Send_Byte(PCF8574_ADDR);            //д��ַ			   
 8040fc0:	2040      	movs	r0, #64	; 0x40
 8040fc2:	f7ff ff47 	bl	8040e54 <IIC_Send_Byte>
	temp=IIC_Wait_Ack();		            //�ȴ�Ӧ��,ͨ���ж��Ƿ���ACKӦ��,���ж�PCF8574��״̬
 8040fc6:	f7ff feaf 	bl	8040d28 <IIC_Wait_Ack>
 8040fca:	4603      	mov	r3, r0
 8040fcc:	77fb      	strb	r3, [r7, #31]
    IIC_Stop();					            //����һ��ֹͣ����
 8040fce:	f7ff fe7f 	bl	8040cd0 <IIC_Stop>
    PCF8574_WriteOneByte(0XFF);	            //Ĭ�����������IO����ߵ�ƽ
 8040fd2:	20ff      	movs	r0, #255	; 0xff
 8040fd4:	f000 f822 	bl	804101c <PCF8574_WriteOneByte>
	return temp;
 8040fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8040fda:	4618      	mov	r0, r3
 8040fdc:	3720      	adds	r7, #32
 8040fde:	46bd      	mov	sp, r7
 8040fe0:	bd80      	pop	{r7, pc}
 8040fe2:	bf00      	nop
 8040fe4:	40023800 	.word	0x40023800
 8040fe8:	40020400 	.word	0x40020400

08040fec <PCF8574_ReadOneByte>:

//��ȡPCF8574��8λIOֵ
//����ֵ:����������
uint8_t PCF8574_ReadOneByte(void)
{				  
 8040fec:	b580      	push	{r7, lr}
 8040fee:	b082      	sub	sp, #8
 8040ff0:	af00      	add	r7, sp, #0
	uint8_t temp=0;		  	    																 
 8040ff2:	2300      	movs	r3, #0
 8040ff4:	71fb      	strb	r3, [r7, #7]
    IIC_Start();    	 	   
 8040ff6:	f7ff fe3f 	bl	8040c78 <IIC_Start>
	IIC_Send_Byte(PCF8574_ADDR|0X01);   //�������ģʽ			   
 8040ffa:	2041      	movs	r0, #65	; 0x41
 8040ffc:	f7ff ff2a 	bl	8040e54 <IIC_Send_Byte>
	IIC_Wait_Ack();	 
 8041000:	f7ff fe92 	bl	8040d28 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);		   
 8041004:	2000      	movs	r0, #0
 8041006:	f7ff ff71 	bl	8040eec <IIC_Read_Byte>
 804100a:	4603      	mov	r3, r0
 804100c:	71fb      	strb	r3, [r7, #7]
    IIC_Stop();							//����һ��ֹͣ����	    
 804100e:	f7ff fe5f 	bl	8040cd0 <IIC_Stop>
	return temp;
 8041012:	79fb      	ldrb	r3, [r7, #7]
}
 8041014:	4618      	mov	r0, r3
 8041016:	3708      	adds	r7, #8
 8041018:	46bd      	mov	sp, r7
 804101a:	bd80      	pop	{r7, pc}

0804101c <PCF8574_WriteOneByte>:
//��PCF8574д��8λIOֵ  
//DataToWrite:Ҫд�������
void PCF8574_WriteOneByte(uint8_t DataToWrite)
{				   	  	    																 
 804101c:	b580      	push	{r7, lr}
 804101e:	b082      	sub	sp, #8
 8041020:	af00      	add	r7, sp, #0
 8041022:	4603      	mov	r3, r0
 8041024:	71fb      	strb	r3, [r7, #7]
    IIC_Start();  
 8041026:	f7ff fe27 	bl	8040c78 <IIC_Start>
    IIC_Send_Byte(PCF8574_ADDR|0X00);   //����������ַ0X40,д���� 	 
 804102a:	2040      	movs	r0, #64	; 0x40
 804102c:	f7ff ff12 	bl	8040e54 <IIC_Send_Byte>
	IIC_Wait_Ack();	    										  		   
 8041030:	f7ff fe7a 	bl	8040d28 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);    	 	//�����ֽ�							   
 8041034:	79fb      	ldrb	r3, [r7, #7]
 8041036:	4618      	mov	r0, r3
 8041038:	f7ff ff0c 	bl	8040e54 <IIC_Send_Byte>
	IIC_Wait_Ack();      
 804103c:	f7ff fe74 	bl	8040d28 <IIC_Wait_Ack>
    IIC_Stop();							//����һ��ֹͣ���� 
 8041040:	f7ff fe46 	bl	8040cd0 <IIC_Stop>
	delay_ms(10);	 
 8041044:	200a      	movs	r0, #10
 8041046:	f7ff fb2f 	bl	80406a8 <delay_ms>
}
 804104a:	bf00      	nop
 804104c:	3708      	adds	r7, #8
 804104e:	46bd      	mov	sp, r7
 8041050:	bd80      	pop	{r7, pc}

08041052 <PCF8574_WriteBit>:

//����PCF8574ĳ��IO�ĸߵ͵�ƽ
//bit:Ҫ���õ�IO���,0~7
//sta:IO��״̬;0��1
void PCF8574_WriteBit(uint8_t bit,uint8_t sta)
{
 8041052:	b580      	push	{r7, lr}
 8041054:	b084      	sub	sp, #16
 8041056:	af00      	add	r7, sp, #0
 8041058:	4603      	mov	r3, r0
 804105a:	460a      	mov	r2, r1
 804105c:	71fb      	strb	r3, [r7, #7]
 804105e:	4613      	mov	r3, r2
 8041060:	71bb      	strb	r3, [r7, #6]
    uint8_t data;
    data=PCF8574_ReadOneByte(); //�ȶ���ԭ��������
 8041062:	f7ff ffc3 	bl	8040fec <PCF8574_ReadOneByte>
 8041066:	4603      	mov	r3, r0
 8041068:	73fb      	strb	r3, [r7, #15]
    if(sta==0)data&=~(1<<bit);     
 804106a:	79bb      	ldrb	r3, [r7, #6]
 804106c:	2b00      	cmp	r3, #0
 804106e:	d10c      	bne.n	804108a <PCF8574_WriteBit+0x38>
 8041070:	79fb      	ldrb	r3, [r7, #7]
 8041072:	2201      	movs	r2, #1
 8041074:	fa02 f303 	lsl.w	r3, r2, r3
 8041078:	b25b      	sxtb	r3, r3
 804107a:	43db      	mvns	r3, r3
 804107c:	b25a      	sxtb	r2, r3
 804107e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041082:	4013      	ands	r3, r2
 8041084:	b25b      	sxtb	r3, r3
 8041086:	73fb      	strb	r3, [r7, #15]
 8041088:	e009      	b.n	804109e <PCF8574_WriteBit+0x4c>
    else data|=1<<bit;
 804108a:	79fb      	ldrb	r3, [r7, #7]
 804108c:	2201      	movs	r2, #1
 804108e:	fa02 f303 	lsl.w	r3, r2, r3
 8041092:	b25a      	sxtb	r2, r3
 8041094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041098:	4313      	orrs	r3, r2
 804109a:	b25b      	sxtb	r3, r3
 804109c:	73fb      	strb	r3, [r7, #15]
    PCF8574_WriteOneByte(data); //д���µ�����
 804109e:	7bfb      	ldrb	r3, [r7, #15]
 80410a0:	4618      	mov	r0, r3
 80410a2:	f7ff ffbb 	bl	804101c <PCF8574_WriteOneByte>
}
 80410a6:	bf00      	nop
 80410a8:	3710      	adds	r7, #16
 80410aa:	46bd      	mov	sp, r7
 80410ac:	bd80      	pop	{r7, pc}

080410ae <UART_GetTXState>:
 * 
 * @param huart 
 * @return HAL_UART_StateTypeDef 
 */
HAL_UART_StateTypeDef UART_GetTXState(const UART_HandleTypeDef *huart)
{
 80410ae:	b480      	push	{r7}
 80410b0:	b085      	sub	sp, #20
 80410b2:	af00      	add	r7, sp, #0
 80410b4:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  temp1 = huart->gState;
 80410b6:	687b      	ldr	r3, [r7, #4]
 80410b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80410ba:	60fb      	str	r3, [r7, #12]

  return (HAL_UART_StateTypeDef)(temp1);
 80410bc:	68fb      	ldr	r3, [r7, #12]
}
 80410be:	4618      	mov	r0, r3
 80410c0:	3714      	adds	r7, #20
 80410c2:	46bd      	mov	sp, r7
 80410c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410c8:	4770      	bx	lr
	...

080410cc <_write>:

int _write(int file, char *ptr, int len){
 80410cc:	b580      	push	{r7, lr}
 80410ce:	b084      	sub	sp, #16
 80410d0:	af00      	add	r7, sp, #0
 80410d2:	60f8      	str	r0, [r7, #12]
 80410d4:	60b9      	str	r1, [r7, #8]
 80410d6:	607a      	str	r2, [r7, #4]
	//阻塞发送
	//HAL_UART_Transmit(&huart1,(uint8_t*)ptr, len, 0xFFFF);

	//DMA发送
	//SCB_CleanDCache_by_Addr(ptr, len);	//更新cache到内存（如果未开启透写）
	HAL_UART_Transmit_DMA(&huart1, ptr, len);	//DMA发送
 80410d8:	687b      	ldr	r3, [r7, #4]
 80410da:	b29b      	uxth	r3, r3
 80410dc:	461a      	mov	r2, r3
 80410de:	68b9      	ldr	r1, [r7, #8]
 80410e0:	4807      	ldr	r0, [pc, #28]	; (8041100 <_write+0x34>)
 80410e2:	f004 fa49 	bl	8045578 <HAL_UART_Transmit_DMA>
	
	while (UART_GetTXState(&huart1) != HAL_UART_STATE_READY)
 80410e6:	bf00      	nop
 80410e8:	4805      	ldr	r0, [pc, #20]	; (8041100 <_write+0x34>)
 80410ea:	f7ff ffe0 	bl	80410ae <UART_GetTXState>
 80410ee:	4603      	mov	r3, r0
 80410f0:	2b20      	cmp	r3, #32
 80410f2:	d1f9      	bne.n	80410e8 <_write+0x1c>

	//not work
	// while (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_READY)
	// {
	// }
	return len;
 80410f4:	687b      	ldr	r3, [r7, #4]
}
 80410f6:	4618      	mov	r0, r3
 80410f8:	3710      	adds	r7, #16
 80410fa:	46bd      	mov	sp, r7
 80410fc:	bd80      	pop	{r7, pc}
 80410fe:	bf00      	nop
 8041100:	200022e8 	.word	0x200022e8

08041104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041104:	b580      	push	{r7, lr}
 8041106:	b082      	sub	sp, #8
 8041108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 804110a:	4b11      	ldr	r3, [pc, #68]	; (8041150 <HAL_MspInit+0x4c>)
 804110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804110e:	4a10      	ldr	r2, [pc, #64]	; (8041150 <HAL_MspInit+0x4c>)
 8041110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041114:	6413      	str	r3, [r2, #64]	; 0x40
 8041116:	4b0e      	ldr	r3, [pc, #56]	; (8041150 <HAL_MspInit+0x4c>)
 8041118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804111e:	607b      	str	r3, [r7, #4]
 8041120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041122:	4b0b      	ldr	r3, [pc, #44]	; (8041150 <HAL_MspInit+0x4c>)
 8041124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041126:	4a0a      	ldr	r2, [pc, #40]	; (8041150 <HAL_MspInit+0x4c>)
 8041128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804112c:	6453      	str	r3, [r2, #68]	; 0x44
 804112e:	4b08      	ldr	r3, [pc, #32]	; (8041150 <HAL_MspInit+0x4c>)
 8041130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041136:	603b      	str	r3, [r7, #0]
 8041138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 804113a:	2200      	movs	r2, #0
 804113c:	210f      	movs	r1, #15
 804113e:	f06f 0001 	mvn.w	r0, #1
 8041142:	f000 fd25 	bl	8041b90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8041146:	bf00      	nop
 8041148:	3708      	adds	r7, #8
 804114a:	46bd      	mov	sp, r7
 804114c:	bd80      	pop	{r7, pc}
 804114e:	bf00      	nop
 8041150:	40023800 	.word	0x40023800

08041154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041154:	b580      	push	{r7, lr}
 8041156:	b08c      	sub	sp, #48	; 0x30
 8041158:	af00      	add	r7, sp, #0
 804115a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 804115c:	2300      	movs	r3, #0
 804115e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8041160:	2300      	movs	r3, #0
 8041162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8041164:	4b2f      	ldr	r3, [pc, #188]	; (8041224 <HAL_InitTick+0xd0>)
 8041166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041168:	4a2e      	ldr	r2, [pc, #184]	; (8041224 <HAL_InitTick+0xd0>)
 804116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804116e:	6453      	str	r3, [r2, #68]	; 0x44
 8041170:	4b2c      	ldr	r3, [pc, #176]	; (8041224 <HAL_InitTick+0xd0>)
 8041172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041178:	60bb      	str	r3, [r7, #8]
 804117a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 804117c:	f107 020c 	add.w	r2, r7, #12
 8041180:	f107 0310 	add.w	r3, r7, #16
 8041184:	4611      	mov	r1, r2
 8041186:	4618      	mov	r0, r3
 8041188:	f003 fa6e 	bl	8044668 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 804118c:	f003 fa58 	bl	8044640 <HAL_RCC_GetPCLK2Freq>
 8041190:	4603      	mov	r3, r0
 8041192:	005b      	lsls	r3, r3, #1
 8041194:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041198:	4a23      	ldr	r2, [pc, #140]	; (8041228 <HAL_InitTick+0xd4>)
 804119a:	fba2 2303 	umull	r2, r3, r2, r3
 804119e:	0c9b      	lsrs	r3, r3, #18
 80411a0:	3b01      	subs	r3, #1
 80411a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80411a4:	4b21      	ldr	r3, [pc, #132]	; (804122c <HAL_InitTick+0xd8>)
 80411a6:	4a22      	ldr	r2, [pc, #136]	; (8041230 <HAL_InitTick+0xdc>)
 80411a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80411aa:	4b20      	ldr	r3, [pc, #128]	; (804122c <HAL_InitTick+0xd8>)
 80411ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80411b0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80411b2:	4a1e      	ldr	r2, [pc, #120]	; (804122c <HAL_InitTick+0xd8>)
 80411b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80411b6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80411b8:	4b1c      	ldr	r3, [pc, #112]	; (804122c <HAL_InitTick+0xd8>)
 80411ba:	2200      	movs	r2, #0
 80411bc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80411be:	4b1b      	ldr	r3, [pc, #108]	; (804122c <HAL_InitTick+0xd8>)
 80411c0:	2200      	movs	r2, #0
 80411c2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80411c4:	4b19      	ldr	r3, [pc, #100]	; (804122c <HAL_InitTick+0xd8>)
 80411c6:	2200      	movs	r2, #0
 80411c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80411ca:	4818      	ldr	r0, [pc, #96]	; (804122c <HAL_InitTick+0xd8>)
 80411cc:	f003 fea6 	bl	8044f1c <HAL_TIM_Base_Init>
 80411d0:	4603      	mov	r3, r0
 80411d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80411d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80411da:	2b00      	cmp	r3, #0
 80411dc:	d11b      	bne.n	8041216 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 80411de:	4813      	ldr	r0, [pc, #76]	; (804122c <HAL_InitTick+0xd8>)
 80411e0:	f003 fefe 	bl	8044fe0 <HAL_TIM_Base_Start_IT>
 80411e4:	4603      	mov	r3, r0
 80411e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80411ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80411ee:	2b00      	cmp	r3, #0
 80411f0:	d111      	bne.n	8041216 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80411f2:	2019      	movs	r0, #25
 80411f4:	f000 fce8 	bl	8041bc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80411f8:	687b      	ldr	r3, [r7, #4]
 80411fa:	2b0f      	cmp	r3, #15
 80411fc:	d808      	bhi.n	8041210 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80411fe:	2200      	movs	r2, #0
 8041200:	6879      	ldr	r1, [r7, #4]
 8041202:	2019      	movs	r0, #25
 8041204:	f000 fcc4 	bl	8041b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041208:	4a0a      	ldr	r2, [pc, #40]	; (8041234 <HAL_InitTick+0xe0>)
 804120a:	687b      	ldr	r3, [r7, #4]
 804120c:	6013      	str	r3, [r2, #0]
 804120e:	e002      	b.n	8041216 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8041210:	2301      	movs	r3, #1
 8041212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8041216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804121a:	4618      	mov	r0, r3
 804121c:	3730      	adds	r7, #48	; 0x30
 804121e:	46bd      	mov	sp, r7
 8041220:	bd80      	pop	{r7, pc}
 8041222:	bf00      	nop
 8041224:	40023800 	.word	0x40023800
 8041228:	431bde83 	.word	0x431bde83
 804122c:	20002298 	.word	0x20002298
 8041230:	40014400 	.word	0x40014400
 8041234:	20000004 	.word	0x20000004

08041238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041238:	b480      	push	{r7}
 804123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 804123c:	e7fe      	b.n	804123c <NMI_Handler+0x4>

0804123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804123e:	b480      	push	{r7}
 8041240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041242:	e7fe      	b.n	8041242 <HardFault_Handler+0x4>

08041244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041244:	b480      	push	{r7}
 8041246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041248:	e7fe      	b.n	8041248 <MemManage_Handler+0x4>

0804124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804124a:	b480      	push	{r7}
 804124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804124e:	e7fe      	b.n	804124e <BusFault_Handler+0x4>

08041250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041250:	b480      	push	{r7}
 8041252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041254:	e7fe      	b.n	8041254 <UsageFault_Handler+0x4>

08041256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041256:	b480      	push	{r7}
 8041258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 804125a:	bf00      	nop
 804125c:	46bd      	mov	sp, r7
 804125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041262:	4770      	bx	lr

08041264 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8041264:	b580      	push	{r7, lr}
 8041266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8041268:	2008      	movs	r0, #8
 804126a:	f002 fcf1 	bl	8043c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 804126e:	bf00      	nop
 8041270:	bd80      	pop	{r7, pc}
	...

08041274 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8041274:	b580      	push	{r7, lr}
 8041276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8041278:	4802      	ldr	r0, [pc, #8]	; (8041284 <TIM1_UP_TIM10_IRQHandler+0x10>)
 804127a:	f003 ff29 	bl	80450d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 804127e:	bf00      	nop
 8041280:	bd80      	pop	{r7, pc}
 8041282:	bf00      	nop
 8041284:	20002298 	.word	0x20002298

08041288 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8041288:	b580      	push	{r7, lr}
 804128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 804128c:	4802      	ldr	r0, [pc, #8]	; (8041298 <USART1_IRQHandler+0x10>)
 804128e:	f004 f9ef 	bl	8045670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8041292:	bf00      	nop
 8041294:	bd80      	pop	{r7, pc}
 8041296:	bf00      	nop
 8041298:	200022e8 	.word	0x200022e8

0804129c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 804129c:	b580      	push	{r7, lr}
 804129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80412a0:	4802      	ldr	r0, [pc, #8]	; (80412ac <DMA2_Stream2_IRQHandler+0x10>)
 80412a2:	f000 fe3f 	bl	8041f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80412a6:	bf00      	nop
 80412a8:	bd80      	pop	{r7, pc}
 80412aa:	bf00      	nop
 80412ac:	200023d0 	.word	0x200023d0

080412b0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80412b0:	b580      	push	{r7, lr}
 80412b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80412b4:	4802      	ldr	r0, [pc, #8]	; (80412c0 <ETH_IRQHandler+0x10>)
 80412b6:	f001 fc19 	bl	8042aec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80412ba:	bf00      	nop
 80412bc:	bd80      	pop	{r7, pc}
 80412be:	bf00      	nop
 80412c0:	20006e14 	.word	0x20006e14

080412c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80412c4:	b580      	push	{r7, lr}
 80412c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80412c8:	4802      	ldr	r0, [pc, #8]	; (80412d4 <DMA2_Stream7_IRQHandler+0x10>)
 80412ca:	f000 fe2b 	bl	8041f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80412ce:	bf00      	nop
 80412d0:	bd80      	pop	{r7, pc}
 80412d2:	bf00      	nop
 80412d4:	20002370 	.word	0x20002370

080412d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80412d8:	b480      	push	{r7}
 80412da:	af00      	add	r7, sp, #0
  return 1;
 80412dc:	2301      	movs	r3, #1
}
 80412de:	4618      	mov	r0, r3
 80412e0:	46bd      	mov	sp, r7
 80412e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412e6:	4770      	bx	lr

080412e8 <_kill>:

int _kill(int pid, int sig)
{
 80412e8:	b480      	push	{r7}
 80412ea:	b083      	sub	sp, #12
 80412ec:	af00      	add	r7, sp, #0
 80412ee:	6078      	str	r0, [r7, #4]
 80412f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80412f2:	4b05      	ldr	r3, [pc, #20]	; (8041308 <_kill+0x20>)
 80412f4:	2216      	movs	r2, #22
 80412f6:	601a      	str	r2, [r3, #0]
  return -1;
 80412f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80412fc:	4618      	mov	r0, r3
 80412fe:	370c      	adds	r7, #12
 8041300:	46bd      	mov	sp, r7
 8041302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041306:	4770      	bx	lr
 8041308:	20023a68 	.word	0x20023a68

0804130c <_exit>:

void _exit (int status)
{
 804130c:	b580      	push	{r7, lr}
 804130e:	b082      	sub	sp, #8
 8041310:	af00      	add	r7, sp, #0
 8041312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8041314:	f04f 31ff 	mov.w	r1, #4294967295
 8041318:	6878      	ldr	r0, [r7, #4]
 804131a:	f7ff ffe5 	bl	80412e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 804131e:	e7fe      	b.n	804131e <_exit+0x12>

08041320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041320:	b580      	push	{r7, lr}
 8041322:	b086      	sub	sp, #24
 8041324:	af00      	add	r7, sp, #0
 8041326:	60f8      	str	r0, [r7, #12]
 8041328:	60b9      	str	r1, [r7, #8]
 804132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804132c:	2300      	movs	r3, #0
 804132e:	617b      	str	r3, [r7, #20]
 8041330:	e00a      	b.n	8041348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8041332:	f3af 8000 	nop.w
 8041336:	4601      	mov	r1, r0
 8041338:	68bb      	ldr	r3, [r7, #8]
 804133a:	1c5a      	adds	r2, r3, #1
 804133c:	60ba      	str	r2, [r7, #8]
 804133e:	b2ca      	uxtb	r2, r1
 8041340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041342:	697b      	ldr	r3, [r7, #20]
 8041344:	3301      	adds	r3, #1
 8041346:	617b      	str	r3, [r7, #20]
 8041348:	697a      	ldr	r2, [r7, #20]
 804134a:	687b      	ldr	r3, [r7, #4]
 804134c:	429a      	cmp	r2, r3
 804134e:	dbf0      	blt.n	8041332 <_read+0x12>
  }

  return len;
 8041350:	687b      	ldr	r3, [r7, #4]
}
 8041352:	4618      	mov	r0, r3
 8041354:	3718      	adds	r7, #24
 8041356:	46bd      	mov	sp, r7
 8041358:	bd80      	pop	{r7, pc}

0804135a <_close>:
  }
  return len;
}

int _close(int file)
{
 804135a:	b480      	push	{r7}
 804135c:	b083      	sub	sp, #12
 804135e:	af00      	add	r7, sp, #0
 8041360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8041362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041366:	4618      	mov	r0, r3
 8041368:	370c      	adds	r7, #12
 804136a:	46bd      	mov	sp, r7
 804136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041370:	4770      	bx	lr

08041372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041372:	b480      	push	{r7}
 8041374:	b083      	sub	sp, #12
 8041376:	af00      	add	r7, sp, #0
 8041378:	6078      	str	r0, [r7, #4]
 804137a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 804137c:	683b      	ldr	r3, [r7, #0]
 804137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041382:	605a      	str	r2, [r3, #4]
  return 0;
 8041384:	2300      	movs	r3, #0
}
 8041386:	4618      	mov	r0, r3
 8041388:	370c      	adds	r7, #12
 804138a:	46bd      	mov	sp, r7
 804138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041390:	4770      	bx	lr

08041392 <_isatty>:

int _isatty(int file)
{
 8041392:	b480      	push	{r7}
 8041394:	b083      	sub	sp, #12
 8041396:	af00      	add	r7, sp, #0
 8041398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 804139a:	2301      	movs	r3, #1
}
 804139c:	4618      	mov	r0, r3
 804139e:	370c      	adds	r7, #12
 80413a0:	46bd      	mov	sp, r7
 80413a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413a6:	4770      	bx	lr

080413a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80413a8:	b480      	push	{r7}
 80413aa:	b085      	sub	sp, #20
 80413ac:	af00      	add	r7, sp, #0
 80413ae:	60f8      	str	r0, [r7, #12]
 80413b0:	60b9      	str	r1, [r7, #8]
 80413b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80413b4:	2300      	movs	r3, #0
}
 80413b6:	4618      	mov	r0, r3
 80413b8:	3714      	adds	r7, #20
 80413ba:	46bd      	mov	sp, r7
 80413bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413c0:	4770      	bx	lr
	...

080413c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80413c4:	b480      	push	{r7}
 80413c6:	b087      	sub	sp, #28
 80413c8:	af00      	add	r7, sp, #0
 80413ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80413cc:	4a14      	ldr	r2, [pc, #80]	; (8041420 <_sbrk+0x5c>)
 80413ce:	4b15      	ldr	r3, [pc, #84]	; (8041424 <_sbrk+0x60>)
 80413d0:	1ad3      	subs	r3, r2, r3
 80413d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80413d4:	697b      	ldr	r3, [r7, #20]
 80413d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80413d8:	4b13      	ldr	r3, [pc, #76]	; (8041428 <_sbrk+0x64>)
 80413da:	681b      	ldr	r3, [r3, #0]
 80413dc:	2b00      	cmp	r3, #0
 80413de:	d102      	bne.n	80413e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80413e0:	4b11      	ldr	r3, [pc, #68]	; (8041428 <_sbrk+0x64>)
 80413e2:	4a12      	ldr	r2, [pc, #72]	; (804142c <_sbrk+0x68>)
 80413e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80413e6:	4b10      	ldr	r3, [pc, #64]	; (8041428 <_sbrk+0x64>)
 80413e8:	681a      	ldr	r2, [r3, #0]
 80413ea:	687b      	ldr	r3, [r7, #4]
 80413ec:	4413      	add	r3, r2
 80413ee:	693a      	ldr	r2, [r7, #16]
 80413f0:	429a      	cmp	r2, r3
 80413f2:	d205      	bcs.n	8041400 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80413f4:	4b0e      	ldr	r3, [pc, #56]	; (8041430 <_sbrk+0x6c>)
 80413f6:	220c      	movs	r2, #12
 80413f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80413fa:	f04f 33ff 	mov.w	r3, #4294967295
 80413fe:	e009      	b.n	8041414 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8041400:	4b09      	ldr	r3, [pc, #36]	; (8041428 <_sbrk+0x64>)
 8041402:	681b      	ldr	r3, [r3, #0]
 8041404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8041406:	4b08      	ldr	r3, [pc, #32]	; (8041428 <_sbrk+0x64>)
 8041408:	681a      	ldr	r2, [r3, #0]
 804140a:	687b      	ldr	r3, [r7, #4]
 804140c:	4413      	add	r3, r2
 804140e:	4a06      	ldr	r2, [pc, #24]	; (8041428 <_sbrk+0x64>)
 8041410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8041412:	68fb      	ldr	r3, [r7, #12]
}
 8041414:	4618      	mov	r0, r3
 8041416:	371c      	adds	r7, #28
 8041418:	46bd      	mov	sp, r7
 804141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804141e:	4770      	bx	lr
 8041420:	20080000 	.word	0x20080000
 8041424:	00002000 	.word	0x00002000
 8041428:	200022e4 	.word	0x200022e4
 804142c:	20023a78 	.word	0x20023a78
 8041430:	20023a68 	.word	0x20023a68

08041434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041434:	b480      	push	{r7}
 8041436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041438:	4b06      	ldr	r3, [pc, #24]	; (8041454 <SystemInit+0x20>)
 804143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804143e:	4a05      	ldr	r2, [pc, #20]	; (8041454 <SystemInit+0x20>)
 8041440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8041448:	bf00      	nop
 804144a:	46bd      	mov	sp, r7
 804144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041450:	4770      	bx	lr
 8041452:	bf00      	nop
 8041454:	e000ed00 	.word	0xe000ed00

08041458 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8041458:	b580      	push	{r7, lr}
 804145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 804145c:	4b14      	ldr	r3, [pc, #80]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 804145e:	4a15      	ldr	r2, [pc, #84]	; (80414b4 <MX_USART1_UART_Init+0x5c>)
 8041460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8041462:	4b13      	ldr	r3, [pc, #76]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 8041464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8041468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804146a:	4b11      	ldr	r3, [pc, #68]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 804146c:	2200      	movs	r2, #0
 804146e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8041470:	4b0f      	ldr	r3, [pc, #60]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 8041472:	2200      	movs	r2, #0
 8041474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8041476:	4b0e      	ldr	r3, [pc, #56]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 8041478:	2200      	movs	r2, #0
 804147a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 804147c:	4b0c      	ldr	r3, [pc, #48]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 804147e:	220c      	movs	r2, #12
 8041480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041482:	4b0b      	ldr	r3, [pc, #44]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 8041484:	2200      	movs	r2, #0
 8041486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8041488:	4b09      	ldr	r3, [pc, #36]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 804148a:	2200      	movs	r2, #0
 804148c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804148e:	4b08      	ldr	r3, [pc, #32]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 8041490:	2200      	movs	r2, #0
 8041492:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8041494:	4b06      	ldr	r3, [pc, #24]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 8041496:	2200      	movs	r2, #0
 8041498:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 804149a:	4805      	ldr	r0, [pc, #20]	; (80414b0 <MX_USART1_UART_Init+0x58>)
 804149c:	f004 f81e 	bl	80454dc <HAL_UART_Init>
 80414a0:	4603      	mov	r3, r0
 80414a2:	2b00      	cmp	r3, #0
 80414a4:	d001      	beq.n	80414aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80414a6:	f7ff fbb3 	bl	8040c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80414aa:	bf00      	nop
 80414ac:	bd80      	pop	{r7, pc}
 80414ae:	bf00      	nop
 80414b0:	200022e8 	.word	0x200022e8
 80414b4:	40011000 	.word	0x40011000

080414b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80414b8:	b580      	push	{r7, lr}
 80414ba:	b0ae      	sub	sp, #184	; 0xb8
 80414bc:	af00      	add	r7, sp, #0
 80414be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80414c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80414c4:	2200      	movs	r2, #0
 80414c6:	601a      	str	r2, [r3, #0]
 80414c8:	605a      	str	r2, [r3, #4]
 80414ca:	609a      	str	r2, [r3, #8]
 80414cc:	60da      	str	r2, [r3, #12]
 80414ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80414d0:	f107 0314 	add.w	r3, r7, #20
 80414d4:	2290      	movs	r2, #144	; 0x90
 80414d6:	2100      	movs	r1, #0
 80414d8:	4618      	mov	r0, r3
 80414da:	f013 fb07 	bl	8054aec <memset>
  if(uartHandle->Instance==USART1)
 80414de:	687b      	ldr	r3, [r7, #4]
 80414e0:	681b      	ldr	r3, [r3, #0]
 80414e2:	4a54      	ldr	r2, [pc, #336]	; (8041634 <HAL_UART_MspInit+0x17c>)
 80414e4:	4293      	cmp	r3, r2
 80414e6:	f040 80a0 	bne.w	804162a <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80414ea:	2340      	movs	r3, #64	; 0x40
 80414ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80414ee:	2301      	movs	r3, #1
 80414f0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80414f2:	f107 0314 	add.w	r3, r7, #20
 80414f6:	4618      	mov	r0, r3
 80414f8:	f003 f8e8 	bl	80446cc <HAL_RCCEx_PeriphCLKConfig>
 80414fc:	4603      	mov	r3, r0
 80414fe:	2b00      	cmp	r3, #0
 8041500:	d001      	beq.n	8041506 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8041502:	f7ff fb85 	bl	8040c10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8041506:	4b4c      	ldr	r3, [pc, #304]	; (8041638 <HAL_UART_MspInit+0x180>)
 8041508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804150a:	4a4b      	ldr	r2, [pc, #300]	; (8041638 <HAL_UART_MspInit+0x180>)
 804150c:	f043 0310 	orr.w	r3, r3, #16
 8041510:	6453      	str	r3, [r2, #68]	; 0x44
 8041512:	4b49      	ldr	r3, [pc, #292]	; (8041638 <HAL_UART_MspInit+0x180>)
 8041514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041516:	f003 0310 	and.w	r3, r3, #16
 804151a:	613b      	str	r3, [r7, #16]
 804151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804151e:	4b46      	ldr	r3, [pc, #280]	; (8041638 <HAL_UART_MspInit+0x180>)
 8041520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041522:	4a45      	ldr	r2, [pc, #276]	; (8041638 <HAL_UART_MspInit+0x180>)
 8041524:	f043 0301 	orr.w	r3, r3, #1
 8041528:	6313      	str	r3, [r2, #48]	; 0x30
 804152a:	4b43      	ldr	r3, [pc, #268]	; (8041638 <HAL_UART_MspInit+0x180>)
 804152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804152e:	f003 0301 	and.w	r3, r3, #1
 8041532:	60fb      	str	r3, [r7, #12]
 8041534:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8041536:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804153a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804153e:	2302      	movs	r3, #2
 8041540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041544:	2300      	movs	r3, #0
 8041546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804154a:	2303      	movs	r3, #3
 804154c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8041550:	2307      	movs	r3, #7
 8041552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041556:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 804155a:	4619      	mov	r1, r3
 804155c:	4837      	ldr	r0, [pc, #220]	; (804163c <HAL_UART_MspInit+0x184>)
 804155e:	f002 f999 	bl	8043894 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8041562:	4b37      	ldr	r3, [pc, #220]	; (8041640 <HAL_UART_MspInit+0x188>)
 8041564:	4a37      	ldr	r2, [pc, #220]	; (8041644 <HAL_UART_MspInit+0x18c>)
 8041566:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8041568:	4b35      	ldr	r3, [pc, #212]	; (8041640 <HAL_UART_MspInit+0x188>)
 804156a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 804156e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8041570:	4b33      	ldr	r3, [pc, #204]	; (8041640 <HAL_UART_MspInit+0x188>)
 8041572:	2240      	movs	r2, #64	; 0x40
 8041574:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041576:	4b32      	ldr	r3, [pc, #200]	; (8041640 <HAL_UART_MspInit+0x188>)
 8041578:	2200      	movs	r2, #0
 804157a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 804157c:	4b30      	ldr	r3, [pc, #192]	; (8041640 <HAL_UART_MspInit+0x188>)
 804157e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8041582:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041584:	4b2e      	ldr	r3, [pc, #184]	; (8041640 <HAL_UART_MspInit+0x188>)
 8041586:	2200      	movs	r2, #0
 8041588:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804158a:	4b2d      	ldr	r3, [pc, #180]	; (8041640 <HAL_UART_MspInit+0x188>)
 804158c:	2200      	movs	r2, #0
 804158e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8041590:	4b2b      	ldr	r3, [pc, #172]	; (8041640 <HAL_UART_MspInit+0x188>)
 8041592:	2200      	movs	r2, #0
 8041594:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8041596:	4b2a      	ldr	r3, [pc, #168]	; (8041640 <HAL_UART_MspInit+0x188>)
 8041598:	2200      	movs	r2, #0
 804159a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 804159c:	4b28      	ldr	r3, [pc, #160]	; (8041640 <HAL_UART_MspInit+0x188>)
 804159e:	2200      	movs	r2, #0
 80415a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80415a2:	4827      	ldr	r0, [pc, #156]	; (8041640 <HAL_UART_MspInit+0x188>)
 80415a4:	f000 fb1e 	bl	8041be4 <HAL_DMA_Init>
 80415a8:	4603      	mov	r3, r0
 80415aa:	2b00      	cmp	r3, #0
 80415ac:	d001      	beq.n	80415b2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80415ae:	f7ff fb2f 	bl	8040c10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80415b2:	687b      	ldr	r3, [r7, #4]
 80415b4:	4a22      	ldr	r2, [pc, #136]	; (8041640 <HAL_UART_MspInit+0x188>)
 80415b6:	671a      	str	r2, [r3, #112]	; 0x70
 80415b8:	4a21      	ldr	r2, [pc, #132]	; (8041640 <HAL_UART_MspInit+0x188>)
 80415ba:	687b      	ldr	r3, [r7, #4]
 80415bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80415be:	4b22      	ldr	r3, [pc, #136]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415c0:	4a22      	ldr	r2, [pc, #136]	; (804164c <HAL_UART_MspInit+0x194>)
 80415c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80415c4:	4b20      	ldr	r3, [pc, #128]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80415ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80415cc:	4b1e      	ldr	r3, [pc, #120]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415ce:	2200      	movs	r2, #0
 80415d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80415d2:	4b1d      	ldr	r3, [pc, #116]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415d4:	2200      	movs	r2, #0
 80415d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80415d8:	4b1b      	ldr	r3, [pc, #108]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80415de:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80415e0:	4b19      	ldr	r3, [pc, #100]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415e2:	2200      	movs	r2, #0
 80415e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80415e6:	4b18      	ldr	r3, [pc, #96]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415e8:	2200      	movs	r2, #0
 80415ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80415ec:	4b16      	ldr	r3, [pc, #88]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415ee:	2200      	movs	r2, #0
 80415f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80415f2:	4b15      	ldr	r3, [pc, #84]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415f4:	2200      	movs	r2, #0
 80415f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80415f8:	4b13      	ldr	r3, [pc, #76]	; (8041648 <HAL_UART_MspInit+0x190>)
 80415fa:	2200      	movs	r2, #0
 80415fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80415fe:	4812      	ldr	r0, [pc, #72]	; (8041648 <HAL_UART_MspInit+0x190>)
 8041600:	f000 faf0 	bl	8041be4 <HAL_DMA_Init>
 8041604:	4603      	mov	r3, r0
 8041606:	2b00      	cmp	r3, #0
 8041608:	d001      	beq.n	804160e <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 804160a:	f7ff fb01 	bl	8040c10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 804160e:	687b      	ldr	r3, [r7, #4]
 8041610:	4a0d      	ldr	r2, [pc, #52]	; (8041648 <HAL_UART_MspInit+0x190>)
 8041612:	675a      	str	r2, [r3, #116]	; 0x74
 8041614:	4a0c      	ldr	r2, [pc, #48]	; (8041648 <HAL_UART_MspInit+0x190>)
 8041616:	687b      	ldr	r3, [r7, #4]
 8041618:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 804161a:	2200      	movs	r2, #0
 804161c:	2105      	movs	r1, #5
 804161e:	2025      	movs	r0, #37	; 0x25
 8041620:	f000 fab6 	bl	8041b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8041624:	2025      	movs	r0, #37	; 0x25
 8041626:	f000 facf 	bl	8041bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    // hdma_usart1_tx.XferCpltCallback = usart_transfer_complete_callback;
  /* USER CODE END USART1_MspInit 1 */
  }
}
 804162a:	bf00      	nop
 804162c:	37b8      	adds	r7, #184	; 0xb8
 804162e:	46bd      	mov	sp, r7
 8041630:	bd80      	pop	{r7, pc}
 8041632:	bf00      	nop
 8041634:	40011000 	.word	0x40011000
 8041638:	40023800 	.word	0x40023800
 804163c:	40020000 	.word	0x40020000
 8041640:	20002370 	.word	0x20002370
 8041644:	400264b8 	.word	0x400264b8
 8041648:	200023d0 	.word	0x200023d0
 804164c:	40026440 	.word	0x40026440

08041650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8041650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041654:	480d      	ldr	r0, [pc, #52]	; (804168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041656:	490e      	ldr	r1, [pc, #56]	; (8041690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041658:	4a0e      	ldr	r2, [pc, #56]	; (8041694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 804165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 804165c:	e002      	b.n	8041664 <LoopCopyDataInit>

0804165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041662:	3304      	adds	r3, #4

08041664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041668:	d3f9      	bcc.n	804165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804166a:	4a0b      	ldr	r2, [pc, #44]	; (8041698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 804166c:	4c0b      	ldr	r4, [pc, #44]	; (804169c <LoopFillZerobss+0x26>)
  movs r3, #0
 804166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041670:	e001      	b.n	8041676 <LoopFillZerobss>

08041672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041674:	3204      	adds	r2, #4

08041676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041678:	d3fb      	bcc.n	8041672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 804167a:	f7ff fedb 	bl	8041434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804167e:	f013 fad9 	bl	8054c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8041682:	f7ff fa0d 	bl	8040aa0 <main>
  bx  lr    
 8041686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8041688:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 804168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8041690:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8041694:	08058684 	.word	0x08058684
  ldr r2, =_sbss
 8041698:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 804169c:	20023a78 	.word	0x20023a78

080416a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80416a0:	e7fe      	b.n	80416a0 <ADC_IRQHandler>

080416a2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80416a2:	b480      	push	{r7}
 80416a4:	b083      	sub	sp, #12
 80416a6:	af00      	add	r7, sp, #0
 80416a8:	6078      	str	r0, [r7, #4]
 80416aa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80416ac:	687b      	ldr	r3, [r7, #4]
 80416ae:	2b00      	cmp	r3, #0
 80416b0:	d00b      	beq.n	80416ca <LAN8742_RegisterBusIO+0x28>
 80416b2:	683b      	ldr	r3, [r7, #0]
 80416b4:	68db      	ldr	r3, [r3, #12]
 80416b6:	2b00      	cmp	r3, #0
 80416b8:	d007      	beq.n	80416ca <LAN8742_RegisterBusIO+0x28>
 80416ba:	683b      	ldr	r3, [r7, #0]
 80416bc:	689b      	ldr	r3, [r3, #8]
 80416be:	2b00      	cmp	r3, #0
 80416c0:	d003      	beq.n	80416ca <LAN8742_RegisterBusIO+0x28>
 80416c2:	683b      	ldr	r3, [r7, #0]
 80416c4:	691b      	ldr	r3, [r3, #16]
 80416c6:	2b00      	cmp	r3, #0
 80416c8:	d102      	bne.n	80416d0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80416ca:	f04f 33ff 	mov.w	r3, #4294967295
 80416ce:	e014      	b.n	80416fa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80416d0:	683b      	ldr	r3, [r7, #0]
 80416d2:	681a      	ldr	r2, [r3, #0]
 80416d4:	687b      	ldr	r3, [r7, #4]
 80416d6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80416d8:	683b      	ldr	r3, [r7, #0]
 80416da:	685a      	ldr	r2, [r3, #4]
 80416dc:	687b      	ldr	r3, [r7, #4]
 80416de:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80416e0:	683b      	ldr	r3, [r7, #0]
 80416e2:	68da      	ldr	r2, [r3, #12]
 80416e4:	687b      	ldr	r3, [r7, #4]
 80416e6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80416e8:	683b      	ldr	r3, [r7, #0]
 80416ea:	689a      	ldr	r2, [r3, #8]
 80416ec:	687b      	ldr	r3, [r7, #4]
 80416ee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80416f0:	683b      	ldr	r3, [r7, #0]
 80416f2:	691a      	ldr	r2, [r3, #16]
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80416f8:	2300      	movs	r3, #0
}
 80416fa:	4618      	mov	r0, r3
 80416fc:	370c      	adds	r7, #12
 80416fe:	46bd      	mov	sp, r7
 8041700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041704:	4770      	bx	lr

08041706 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8041706:	b580      	push	{r7, lr}
 8041708:	b086      	sub	sp, #24
 804170a:	af00      	add	r7, sp, #0
 804170c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 804170e:	2300      	movs	r3, #0
 8041710:	60fb      	str	r3, [r7, #12]
 8041712:	2300      	movs	r3, #0
 8041714:	60bb      	str	r3, [r7, #8]
 8041716:	2300      	movs	r3, #0
 8041718:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 804171a:	2300      	movs	r3, #0
 804171c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 804171e:	687b      	ldr	r3, [r7, #4]
 8041720:	685b      	ldr	r3, [r3, #4]
 8041722:	2b00      	cmp	r3, #0
 8041724:	d17c      	bne.n	8041820 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8041726:	687b      	ldr	r3, [r7, #4]
 8041728:	689b      	ldr	r3, [r3, #8]
 804172a:	2b00      	cmp	r3, #0
 804172c:	d002      	beq.n	8041734 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 804172e:	687b      	ldr	r3, [r7, #4]
 8041730:	689b      	ldr	r3, [r3, #8]
 8041732:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8041734:	687b      	ldr	r3, [r7, #4]
 8041736:	2220      	movs	r2, #32
 8041738:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 804173a:	2300      	movs	r3, #0
 804173c:	617b      	str	r3, [r7, #20]
 804173e:	e01c      	b.n	804177a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8041740:	687b      	ldr	r3, [r7, #4]
 8041742:	695b      	ldr	r3, [r3, #20]
 8041744:	f107 0208 	add.w	r2, r7, #8
 8041748:	2112      	movs	r1, #18
 804174a:	6978      	ldr	r0, [r7, #20]
 804174c:	4798      	blx	r3
 804174e:	4603      	mov	r3, r0
 8041750:	2b00      	cmp	r3, #0
 8041752:	da03      	bge.n	804175c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8041754:	f06f 0304 	mvn.w	r3, #4
 8041758:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 804175a:	e00b      	b.n	8041774 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 804175c:	68bb      	ldr	r3, [r7, #8]
 804175e:	f003 031f 	and.w	r3, r3, #31
 8041762:	697a      	ldr	r2, [r7, #20]
 8041764:	429a      	cmp	r2, r3
 8041766:	d105      	bne.n	8041774 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8041768:	687b      	ldr	r3, [r7, #4]
 804176a:	697a      	ldr	r2, [r7, #20]
 804176c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 804176e:	2300      	movs	r3, #0
 8041770:	613b      	str	r3, [r7, #16]
         break;
 8041772:	e005      	b.n	8041780 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8041774:	697b      	ldr	r3, [r7, #20]
 8041776:	3301      	adds	r3, #1
 8041778:	617b      	str	r3, [r7, #20]
 804177a:	697b      	ldr	r3, [r7, #20]
 804177c:	2b1f      	cmp	r3, #31
 804177e:	d9df      	bls.n	8041740 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8041780:	687b      	ldr	r3, [r7, #4]
 8041782:	681b      	ldr	r3, [r3, #0]
 8041784:	2b1f      	cmp	r3, #31
 8041786:	d902      	bls.n	804178e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8041788:	f06f 0302 	mvn.w	r3, #2
 804178c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 804178e:	693b      	ldr	r3, [r7, #16]
 8041790:	2b00      	cmp	r3, #0
 8041792:	d145      	bne.n	8041820 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8041794:	687b      	ldr	r3, [r7, #4]
 8041796:	691b      	ldr	r3, [r3, #16]
 8041798:	687a      	ldr	r2, [r7, #4]
 804179a:	6810      	ldr	r0, [r2, #0]
 804179c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80417a0:	2100      	movs	r1, #0
 80417a2:	4798      	blx	r3
 80417a4:	4603      	mov	r3, r0
 80417a6:	2b00      	cmp	r3, #0
 80417a8:	db37      	blt.n	804181a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80417aa:	687b      	ldr	r3, [r7, #4]
 80417ac:	695b      	ldr	r3, [r3, #20]
 80417ae:	687a      	ldr	r2, [r7, #4]
 80417b0:	6810      	ldr	r0, [r2, #0]
 80417b2:	f107 0208 	add.w	r2, r7, #8
 80417b6:	2100      	movs	r1, #0
 80417b8:	4798      	blx	r3
 80417ba:	4603      	mov	r3, r0
 80417bc:	2b00      	cmp	r3, #0
 80417be:	db28      	blt.n	8041812 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80417c0:	687b      	ldr	r3, [r7, #4]
 80417c2:	699b      	ldr	r3, [r3, #24]
 80417c4:	4798      	blx	r3
 80417c6:	4603      	mov	r3, r0
 80417c8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80417ca:	e01c      	b.n	8041806 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80417cc:	687b      	ldr	r3, [r7, #4]
 80417ce:	699b      	ldr	r3, [r3, #24]
 80417d0:	4798      	blx	r3
 80417d2:	4603      	mov	r3, r0
 80417d4:	461a      	mov	r2, r3
 80417d6:	68fb      	ldr	r3, [r7, #12]
 80417d8:	1ad3      	subs	r3, r2, r3
 80417da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80417de:	d80e      	bhi.n	80417fe <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80417e0:	687b      	ldr	r3, [r7, #4]
 80417e2:	695b      	ldr	r3, [r3, #20]
 80417e4:	687a      	ldr	r2, [r7, #4]
 80417e6:	6810      	ldr	r0, [r2, #0]
 80417e8:	f107 0208 	add.w	r2, r7, #8
 80417ec:	2100      	movs	r1, #0
 80417ee:	4798      	blx	r3
 80417f0:	4603      	mov	r3, r0
 80417f2:	2b00      	cmp	r3, #0
 80417f4:	da07      	bge.n	8041806 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80417f6:	f06f 0304 	mvn.w	r3, #4
 80417fa:	613b      	str	r3, [r7, #16]
                 break;
 80417fc:	e010      	b.n	8041820 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80417fe:	f06f 0301 	mvn.w	r3, #1
 8041802:	613b      	str	r3, [r7, #16]
               break;
 8041804:	e00c      	b.n	8041820 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8041806:	68bb      	ldr	r3, [r7, #8]
 8041808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804180c:	2b00      	cmp	r3, #0
 804180e:	d1dd      	bne.n	80417cc <LAN8742_Init+0xc6>
 8041810:	e006      	b.n	8041820 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8041812:	f06f 0304 	mvn.w	r3, #4
 8041816:	613b      	str	r3, [r7, #16]
 8041818:	e002      	b.n	8041820 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 804181a:	f06f 0303 	mvn.w	r3, #3
 804181e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8041820:	693b      	ldr	r3, [r7, #16]
 8041822:	2b00      	cmp	r3, #0
 8041824:	d112      	bne.n	804184c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8041826:	687b      	ldr	r3, [r7, #4]
 8041828:	699b      	ldr	r3, [r3, #24]
 804182a:	4798      	blx	r3
 804182c:	4603      	mov	r3, r0
 804182e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8041830:	bf00      	nop
 8041832:	687b      	ldr	r3, [r7, #4]
 8041834:	699b      	ldr	r3, [r3, #24]
 8041836:	4798      	blx	r3
 8041838:	4603      	mov	r3, r0
 804183a:	461a      	mov	r2, r3
 804183c:	68fb      	ldr	r3, [r7, #12]
 804183e:	1ad3      	subs	r3, r2, r3
 8041840:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8041844:	d9f5      	bls.n	8041832 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8041846:	687b      	ldr	r3, [r7, #4]
 8041848:	2201      	movs	r2, #1
 804184a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 804184c:	693b      	ldr	r3, [r7, #16]
 }
 804184e:	4618      	mov	r0, r3
 8041850:	3718      	adds	r7, #24
 8041852:	46bd      	mov	sp, r7
 8041854:	bd80      	pop	{r7, pc}

08041856 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8041856:	b580      	push	{r7, lr}
 8041858:	b084      	sub	sp, #16
 804185a:	af00      	add	r7, sp, #0
 804185c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 804185e:	2300      	movs	r3, #0
 8041860:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8041862:	687b      	ldr	r3, [r7, #4]
 8041864:	695b      	ldr	r3, [r3, #20]
 8041866:	687a      	ldr	r2, [r7, #4]
 8041868:	6810      	ldr	r0, [r2, #0]
 804186a:	f107 020c 	add.w	r2, r7, #12
 804186e:	2101      	movs	r1, #1
 8041870:	4798      	blx	r3
 8041872:	4603      	mov	r3, r0
 8041874:	2b00      	cmp	r3, #0
 8041876:	da02      	bge.n	804187e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8041878:	f06f 0304 	mvn.w	r3, #4
 804187c:	e06e      	b.n	804195c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 804187e:	687b      	ldr	r3, [r7, #4]
 8041880:	695b      	ldr	r3, [r3, #20]
 8041882:	687a      	ldr	r2, [r7, #4]
 8041884:	6810      	ldr	r0, [r2, #0]
 8041886:	f107 020c 	add.w	r2, r7, #12
 804188a:	2101      	movs	r1, #1
 804188c:	4798      	blx	r3
 804188e:	4603      	mov	r3, r0
 8041890:	2b00      	cmp	r3, #0
 8041892:	da02      	bge.n	804189a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8041894:	f06f 0304 	mvn.w	r3, #4
 8041898:	e060      	b.n	804195c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 804189a:	68fb      	ldr	r3, [r7, #12]
 804189c:	f003 0304 	and.w	r3, r3, #4
 80418a0:	2b00      	cmp	r3, #0
 80418a2:	d101      	bne.n	80418a8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80418a4:	2301      	movs	r3, #1
 80418a6:	e059      	b.n	804195c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80418a8:	687b      	ldr	r3, [r7, #4]
 80418aa:	695b      	ldr	r3, [r3, #20]
 80418ac:	687a      	ldr	r2, [r7, #4]
 80418ae:	6810      	ldr	r0, [r2, #0]
 80418b0:	f107 020c 	add.w	r2, r7, #12
 80418b4:	2100      	movs	r1, #0
 80418b6:	4798      	blx	r3
 80418b8:	4603      	mov	r3, r0
 80418ba:	2b00      	cmp	r3, #0
 80418bc:	da02      	bge.n	80418c4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80418be:	f06f 0304 	mvn.w	r3, #4
 80418c2:	e04b      	b.n	804195c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80418c4:	68fb      	ldr	r3, [r7, #12]
 80418c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80418ca:	2b00      	cmp	r3, #0
 80418cc:	d11b      	bne.n	8041906 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80418ce:	68fb      	ldr	r3, [r7, #12]
 80418d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80418d4:	2b00      	cmp	r3, #0
 80418d6:	d006      	beq.n	80418e6 <LAN8742_GetLinkState+0x90>
 80418d8:	68fb      	ldr	r3, [r7, #12]
 80418da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80418de:	2b00      	cmp	r3, #0
 80418e0:	d001      	beq.n	80418e6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80418e2:	2302      	movs	r3, #2
 80418e4:	e03a      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80418e6:	68fb      	ldr	r3, [r7, #12]
 80418e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80418ec:	2b00      	cmp	r3, #0
 80418ee:	d001      	beq.n	80418f4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80418f0:	2303      	movs	r3, #3
 80418f2:	e033      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80418f4:	68fb      	ldr	r3, [r7, #12]
 80418f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80418fa:	2b00      	cmp	r3, #0
 80418fc:	d001      	beq.n	8041902 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80418fe:	2304      	movs	r3, #4
 8041900:	e02c      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8041902:	2305      	movs	r3, #5
 8041904:	e02a      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8041906:	687b      	ldr	r3, [r7, #4]
 8041908:	695b      	ldr	r3, [r3, #20]
 804190a:	687a      	ldr	r2, [r7, #4]
 804190c:	6810      	ldr	r0, [r2, #0]
 804190e:	f107 020c 	add.w	r2, r7, #12
 8041912:	211f      	movs	r1, #31
 8041914:	4798      	blx	r3
 8041916:	4603      	mov	r3, r0
 8041918:	2b00      	cmp	r3, #0
 804191a:	da02      	bge.n	8041922 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 804191c:	f06f 0304 	mvn.w	r3, #4
 8041920:	e01c      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8041922:	68fb      	ldr	r3, [r7, #12]
 8041924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041928:	2b00      	cmp	r3, #0
 804192a:	d101      	bne.n	8041930 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 804192c:	2306      	movs	r3, #6
 804192e:	e015      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8041930:	68fb      	ldr	r3, [r7, #12]
 8041932:	f003 031c 	and.w	r3, r3, #28
 8041936:	2b18      	cmp	r3, #24
 8041938:	d101      	bne.n	804193e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 804193a:	2302      	movs	r3, #2
 804193c:	e00e      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 804193e:	68fb      	ldr	r3, [r7, #12]
 8041940:	f003 031c 	and.w	r3, r3, #28
 8041944:	2b08      	cmp	r3, #8
 8041946:	d101      	bne.n	804194c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8041948:	2303      	movs	r3, #3
 804194a:	e007      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 804194c:	68fb      	ldr	r3, [r7, #12]
 804194e:	f003 031c 	and.w	r3, r3, #28
 8041952:	2b14      	cmp	r3, #20
 8041954:	d101      	bne.n	804195a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8041956:	2304      	movs	r3, #4
 8041958:	e000      	b.n	804195c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 804195a:	2305      	movs	r3, #5
    }				
  }
}
 804195c:	4618      	mov	r0, r3
 804195e:	3710      	adds	r7, #16
 8041960:	46bd      	mov	sp, r7
 8041962:	bd80      	pop	{r7, pc}

08041964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8041964:	b580      	push	{r7, lr}
 8041966:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8041968:	2003      	movs	r0, #3
 804196a:	f000 f906 	bl	8041b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 804196e:	200f      	movs	r0, #15
 8041970:	f7ff fbf0 	bl	8041154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8041974:	f7ff fbc6 	bl	8041104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8041978:	2300      	movs	r3, #0
}
 804197a:	4618      	mov	r0, r3
 804197c:	bd80      	pop	{r7, pc}
	...

08041980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041980:	b480      	push	{r7}
 8041982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8041984:	4b06      	ldr	r3, [pc, #24]	; (80419a0 <HAL_IncTick+0x20>)
 8041986:	781b      	ldrb	r3, [r3, #0]
 8041988:	461a      	mov	r2, r3
 804198a:	4b06      	ldr	r3, [pc, #24]	; (80419a4 <HAL_IncTick+0x24>)
 804198c:	681b      	ldr	r3, [r3, #0]
 804198e:	4413      	add	r3, r2
 8041990:	4a04      	ldr	r2, [pc, #16]	; (80419a4 <HAL_IncTick+0x24>)
 8041992:	6013      	str	r3, [r2, #0]
}
 8041994:	bf00      	nop
 8041996:	46bd      	mov	sp, r7
 8041998:	f85d 7b04 	ldr.w	r7, [sp], #4
 804199c:	4770      	bx	lr
 804199e:	bf00      	nop
 80419a0:	20000008 	.word	0x20000008
 80419a4:	20002430 	.word	0x20002430

080419a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80419a8:	b480      	push	{r7}
 80419aa:	af00      	add	r7, sp, #0
  return uwTick;
 80419ac:	4b03      	ldr	r3, [pc, #12]	; (80419bc <HAL_GetTick+0x14>)
 80419ae:	681b      	ldr	r3, [r3, #0]
}
 80419b0:	4618      	mov	r0, r3
 80419b2:	46bd      	mov	sp, r7
 80419b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419b8:	4770      	bx	lr
 80419ba:	bf00      	nop
 80419bc:	20002430 	.word	0x20002430

080419c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80419c0:	b580      	push	{r7, lr}
 80419c2:	b084      	sub	sp, #16
 80419c4:	af00      	add	r7, sp, #0
 80419c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80419c8:	f7ff ffee 	bl	80419a8 <HAL_GetTick>
 80419cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80419ce:	687b      	ldr	r3, [r7, #4]
 80419d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80419d2:	68fb      	ldr	r3, [r7, #12]
 80419d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80419d8:	d005      	beq.n	80419e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80419da:	4b0a      	ldr	r3, [pc, #40]	; (8041a04 <HAL_Delay+0x44>)
 80419dc:	781b      	ldrb	r3, [r3, #0]
 80419de:	461a      	mov	r2, r3
 80419e0:	68fb      	ldr	r3, [r7, #12]
 80419e2:	4413      	add	r3, r2
 80419e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80419e6:	bf00      	nop
 80419e8:	f7ff ffde 	bl	80419a8 <HAL_GetTick>
 80419ec:	4602      	mov	r2, r0
 80419ee:	68bb      	ldr	r3, [r7, #8]
 80419f0:	1ad3      	subs	r3, r2, r3
 80419f2:	68fa      	ldr	r2, [r7, #12]
 80419f4:	429a      	cmp	r2, r3
 80419f6:	d8f7      	bhi.n	80419e8 <HAL_Delay+0x28>
  {
  }
}
 80419f8:	bf00      	nop
 80419fa:	bf00      	nop
 80419fc:	3710      	adds	r7, #16
 80419fe:	46bd      	mov	sp, r7
 8041a00:	bd80      	pop	{r7, pc}
 8041a02:	bf00      	nop
 8041a04:	20000008 	.word	0x20000008

08041a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8041a08:	b480      	push	{r7}
 8041a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8041a0c:	4b03      	ldr	r3, [pc, #12]	; (8041a1c <HAL_GetREVID+0x14>)
 8041a0e:	681b      	ldr	r3, [r3, #0]
 8041a10:	0c1b      	lsrs	r3, r3, #16
}
 8041a12:	4618      	mov	r0, r3
 8041a14:	46bd      	mov	sp, r7
 8041a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a1a:	4770      	bx	lr
 8041a1c:	e0042000 	.word	0xe0042000

08041a20 <__NVIC_SetPriorityGrouping>:
{
 8041a20:	b480      	push	{r7}
 8041a22:	b085      	sub	sp, #20
 8041a24:	af00      	add	r7, sp, #0
 8041a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8041a28:	687b      	ldr	r3, [r7, #4]
 8041a2a:	f003 0307 	and.w	r3, r3, #7
 8041a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8041a30:	4b0b      	ldr	r3, [pc, #44]	; (8041a60 <__NVIC_SetPriorityGrouping+0x40>)
 8041a32:	68db      	ldr	r3, [r3, #12]
 8041a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8041a36:	68ba      	ldr	r2, [r7, #8]
 8041a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8041a3c:	4013      	ands	r3, r2
 8041a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8041a40:	68fb      	ldr	r3, [r7, #12]
 8041a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8041a44:	68bb      	ldr	r3, [r7, #8]
 8041a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8041a48:	4b06      	ldr	r3, [pc, #24]	; (8041a64 <__NVIC_SetPriorityGrouping+0x44>)
 8041a4a:	4313      	orrs	r3, r2
 8041a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8041a4e:	4a04      	ldr	r2, [pc, #16]	; (8041a60 <__NVIC_SetPriorityGrouping+0x40>)
 8041a50:	68bb      	ldr	r3, [r7, #8]
 8041a52:	60d3      	str	r3, [r2, #12]
}
 8041a54:	bf00      	nop
 8041a56:	3714      	adds	r7, #20
 8041a58:	46bd      	mov	sp, r7
 8041a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a5e:	4770      	bx	lr
 8041a60:	e000ed00 	.word	0xe000ed00
 8041a64:	05fa0000 	.word	0x05fa0000

08041a68 <__NVIC_GetPriorityGrouping>:
{
 8041a68:	b480      	push	{r7}
 8041a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8041a6c:	4b04      	ldr	r3, [pc, #16]	; (8041a80 <__NVIC_GetPriorityGrouping+0x18>)
 8041a6e:	68db      	ldr	r3, [r3, #12]
 8041a70:	0a1b      	lsrs	r3, r3, #8
 8041a72:	f003 0307 	and.w	r3, r3, #7
}
 8041a76:	4618      	mov	r0, r3
 8041a78:	46bd      	mov	sp, r7
 8041a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a7e:	4770      	bx	lr
 8041a80:	e000ed00 	.word	0xe000ed00

08041a84 <__NVIC_EnableIRQ>:
{
 8041a84:	b480      	push	{r7}
 8041a86:	b083      	sub	sp, #12
 8041a88:	af00      	add	r7, sp, #0
 8041a8a:	4603      	mov	r3, r0
 8041a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041a92:	2b00      	cmp	r3, #0
 8041a94:	db0b      	blt.n	8041aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8041a96:	79fb      	ldrb	r3, [r7, #7]
 8041a98:	f003 021f 	and.w	r2, r3, #31
 8041a9c:	4907      	ldr	r1, [pc, #28]	; (8041abc <__NVIC_EnableIRQ+0x38>)
 8041a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041aa2:	095b      	lsrs	r3, r3, #5
 8041aa4:	2001      	movs	r0, #1
 8041aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8041aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8041aae:	bf00      	nop
 8041ab0:	370c      	adds	r7, #12
 8041ab2:	46bd      	mov	sp, r7
 8041ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ab8:	4770      	bx	lr
 8041aba:	bf00      	nop
 8041abc:	e000e100 	.word	0xe000e100

08041ac0 <__NVIC_SetPriority>:
{
 8041ac0:	b480      	push	{r7}
 8041ac2:	b083      	sub	sp, #12
 8041ac4:	af00      	add	r7, sp, #0
 8041ac6:	4603      	mov	r3, r0
 8041ac8:	6039      	str	r1, [r7, #0]
 8041aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041ad0:	2b00      	cmp	r3, #0
 8041ad2:	db0a      	blt.n	8041aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041ad4:	683b      	ldr	r3, [r7, #0]
 8041ad6:	b2da      	uxtb	r2, r3
 8041ad8:	490c      	ldr	r1, [pc, #48]	; (8041b0c <__NVIC_SetPriority+0x4c>)
 8041ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041ade:	0112      	lsls	r2, r2, #4
 8041ae0:	b2d2      	uxtb	r2, r2
 8041ae2:	440b      	add	r3, r1
 8041ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8041ae8:	e00a      	b.n	8041b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041aea:	683b      	ldr	r3, [r7, #0]
 8041aec:	b2da      	uxtb	r2, r3
 8041aee:	4908      	ldr	r1, [pc, #32]	; (8041b10 <__NVIC_SetPriority+0x50>)
 8041af0:	79fb      	ldrb	r3, [r7, #7]
 8041af2:	f003 030f 	and.w	r3, r3, #15
 8041af6:	3b04      	subs	r3, #4
 8041af8:	0112      	lsls	r2, r2, #4
 8041afa:	b2d2      	uxtb	r2, r2
 8041afc:	440b      	add	r3, r1
 8041afe:	761a      	strb	r2, [r3, #24]
}
 8041b00:	bf00      	nop
 8041b02:	370c      	adds	r7, #12
 8041b04:	46bd      	mov	sp, r7
 8041b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b0a:	4770      	bx	lr
 8041b0c:	e000e100 	.word	0xe000e100
 8041b10:	e000ed00 	.word	0xe000ed00

08041b14 <NVIC_EncodePriority>:
{
 8041b14:	b480      	push	{r7}
 8041b16:	b089      	sub	sp, #36	; 0x24
 8041b18:	af00      	add	r7, sp, #0
 8041b1a:	60f8      	str	r0, [r7, #12]
 8041b1c:	60b9      	str	r1, [r7, #8]
 8041b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041b20:	68fb      	ldr	r3, [r7, #12]
 8041b22:	f003 0307 	and.w	r3, r3, #7
 8041b26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041b28:	69fb      	ldr	r3, [r7, #28]
 8041b2a:	f1c3 0307 	rsb	r3, r3, #7
 8041b2e:	2b04      	cmp	r3, #4
 8041b30:	bf28      	it	cs
 8041b32:	2304      	movcs	r3, #4
 8041b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8041b36:	69fb      	ldr	r3, [r7, #28]
 8041b38:	3304      	adds	r3, #4
 8041b3a:	2b06      	cmp	r3, #6
 8041b3c:	d902      	bls.n	8041b44 <NVIC_EncodePriority+0x30>
 8041b3e:	69fb      	ldr	r3, [r7, #28]
 8041b40:	3b03      	subs	r3, #3
 8041b42:	e000      	b.n	8041b46 <NVIC_EncodePriority+0x32>
 8041b44:	2300      	movs	r3, #0
 8041b46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041b48:	f04f 32ff 	mov.w	r2, #4294967295
 8041b4c:	69bb      	ldr	r3, [r7, #24]
 8041b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8041b52:	43da      	mvns	r2, r3
 8041b54:	68bb      	ldr	r3, [r7, #8]
 8041b56:	401a      	ands	r2, r3
 8041b58:	697b      	ldr	r3, [r7, #20]
 8041b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8041b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8041b60:	697b      	ldr	r3, [r7, #20]
 8041b62:	fa01 f303 	lsl.w	r3, r1, r3
 8041b66:	43d9      	mvns	r1, r3
 8041b68:	687b      	ldr	r3, [r7, #4]
 8041b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041b6c:	4313      	orrs	r3, r2
}
 8041b6e:	4618      	mov	r0, r3
 8041b70:	3724      	adds	r7, #36	; 0x24
 8041b72:	46bd      	mov	sp, r7
 8041b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b78:	4770      	bx	lr

08041b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041b7a:	b580      	push	{r7, lr}
 8041b7c:	b082      	sub	sp, #8
 8041b7e:	af00      	add	r7, sp, #0
 8041b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041b82:	6878      	ldr	r0, [r7, #4]
 8041b84:	f7ff ff4c 	bl	8041a20 <__NVIC_SetPriorityGrouping>
}
 8041b88:	bf00      	nop
 8041b8a:	3708      	adds	r7, #8
 8041b8c:	46bd      	mov	sp, r7
 8041b8e:	bd80      	pop	{r7, pc}

08041b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8041b90:	b580      	push	{r7, lr}
 8041b92:	b086      	sub	sp, #24
 8041b94:	af00      	add	r7, sp, #0
 8041b96:	4603      	mov	r3, r0
 8041b98:	60b9      	str	r1, [r7, #8]
 8041b9a:	607a      	str	r2, [r7, #4]
 8041b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8041b9e:	2300      	movs	r3, #0
 8041ba0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8041ba2:	f7ff ff61 	bl	8041a68 <__NVIC_GetPriorityGrouping>
 8041ba6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041ba8:	687a      	ldr	r2, [r7, #4]
 8041baa:	68b9      	ldr	r1, [r7, #8]
 8041bac:	6978      	ldr	r0, [r7, #20]
 8041bae:	f7ff ffb1 	bl	8041b14 <NVIC_EncodePriority>
 8041bb2:	4602      	mov	r2, r0
 8041bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041bb8:	4611      	mov	r1, r2
 8041bba:	4618      	mov	r0, r3
 8041bbc:	f7ff ff80 	bl	8041ac0 <__NVIC_SetPriority>
}
 8041bc0:	bf00      	nop
 8041bc2:	3718      	adds	r7, #24
 8041bc4:	46bd      	mov	sp, r7
 8041bc6:	bd80      	pop	{r7, pc}

08041bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041bc8:	b580      	push	{r7, lr}
 8041bca:	b082      	sub	sp, #8
 8041bcc:	af00      	add	r7, sp, #0
 8041bce:	4603      	mov	r3, r0
 8041bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041bd6:	4618      	mov	r0, r3
 8041bd8:	f7ff ff54 	bl	8041a84 <__NVIC_EnableIRQ>
}
 8041bdc:	bf00      	nop
 8041bde:	3708      	adds	r7, #8
 8041be0:	46bd      	mov	sp, r7
 8041be2:	bd80      	pop	{r7, pc}

08041be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8041be4:	b580      	push	{r7, lr}
 8041be6:	b086      	sub	sp, #24
 8041be8:	af00      	add	r7, sp, #0
 8041bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8041bec:	2300      	movs	r3, #0
 8041bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8041bf0:	f7ff feda 	bl	80419a8 <HAL_GetTick>
 8041bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8041bf6:	687b      	ldr	r3, [r7, #4]
 8041bf8:	2b00      	cmp	r3, #0
 8041bfa:	d101      	bne.n	8041c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8041bfc:	2301      	movs	r3, #1
 8041bfe:	e099      	b.n	8041d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8041c00:	687b      	ldr	r3, [r7, #4]
 8041c02:	2202      	movs	r2, #2
 8041c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	2200      	movs	r2, #0
 8041c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8041c10:	687b      	ldr	r3, [r7, #4]
 8041c12:	681b      	ldr	r3, [r3, #0]
 8041c14:	681a      	ldr	r2, [r3, #0]
 8041c16:	687b      	ldr	r3, [r7, #4]
 8041c18:	681b      	ldr	r3, [r3, #0]
 8041c1a:	f022 0201 	bic.w	r2, r2, #1
 8041c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041c20:	e00f      	b.n	8041c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8041c22:	f7ff fec1 	bl	80419a8 <HAL_GetTick>
 8041c26:	4602      	mov	r2, r0
 8041c28:	693b      	ldr	r3, [r7, #16]
 8041c2a:	1ad3      	subs	r3, r2, r3
 8041c2c:	2b05      	cmp	r3, #5
 8041c2e:	d908      	bls.n	8041c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041c30:	687b      	ldr	r3, [r7, #4]
 8041c32:	2220      	movs	r2, #32
 8041c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041c36:	687b      	ldr	r3, [r7, #4]
 8041c38:	2203      	movs	r2, #3
 8041c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8041c3e:	2303      	movs	r3, #3
 8041c40:	e078      	b.n	8041d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041c42:	687b      	ldr	r3, [r7, #4]
 8041c44:	681b      	ldr	r3, [r3, #0]
 8041c46:	681b      	ldr	r3, [r3, #0]
 8041c48:	f003 0301 	and.w	r3, r3, #1
 8041c4c:	2b00      	cmp	r3, #0
 8041c4e:	d1e8      	bne.n	8041c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8041c50:	687b      	ldr	r3, [r7, #4]
 8041c52:	681b      	ldr	r3, [r3, #0]
 8041c54:	681b      	ldr	r3, [r3, #0]
 8041c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8041c58:	697a      	ldr	r2, [r7, #20]
 8041c5a:	4b38      	ldr	r3, [pc, #224]	; (8041d3c <HAL_DMA_Init+0x158>)
 8041c5c:	4013      	ands	r3, r2
 8041c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8041c60:	687b      	ldr	r3, [r7, #4]
 8041c62:	685a      	ldr	r2, [r3, #4]
 8041c64:	687b      	ldr	r3, [r7, #4]
 8041c66:	689b      	ldr	r3, [r3, #8]
 8041c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041c6a:	687b      	ldr	r3, [r7, #4]
 8041c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8041c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041c70:	687b      	ldr	r3, [r7, #4]
 8041c72:	691b      	ldr	r3, [r3, #16]
 8041c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041c76:	687b      	ldr	r3, [r7, #4]
 8041c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041c7c:	687b      	ldr	r3, [r7, #4]
 8041c7e:	699b      	ldr	r3, [r3, #24]
 8041c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8041c82:	687b      	ldr	r3, [r7, #4]
 8041c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8041c88:	687b      	ldr	r3, [r7, #4]
 8041c8a:	6a1b      	ldr	r3, [r3, #32]
 8041c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8041c8e:	697a      	ldr	r2, [r7, #20]
 8041c90:	4313      	orrs	r3, r2
 8041c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8041c94:	687b      	ldr	r3, [r7, #4]
 8041c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c98:	2b04      	cmp	r3, #4
 8041c9a:	d107      	bne.n	8041cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8041c9c:	687b      	ldr	r3, [r7, #4]
 8041c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8041ca0:	687b      	ldr	r3, [r7, #4]
 8041ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ca4:	4313      	orrs	r3, r2
 8041ca6:	697a      	ldr	r2, [r7, #20]
 8041ca8:	4313      	orrs	r3, r2
 8041caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8041cac:	687b      	ldr	r3, [r7, #4]
 8041cae:	681b      	ldr	r3, [r3, #0]
 8041cb0:	697a      	ldr	r2, [r7, #20]
 8041cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8041cb4:	687b      	ldr	r3, [r7, #4]
 8041cb6:	681b      	ldr	r3, [r3, #0]
 8041cb8:	695b      	ldr	r3, [r3, #20]
 8041cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8041cbc:	697b      	ldr	r3, [r7, #20]
 8041cbe:	f023 0307 	bic.w	r3, r3, #7
 8041cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8041cc4:	687b      	ldr	r3, [r7, #4]
 8041cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cc8:	697a      	ldr	r2, [r7, #20]
 8041cca:	4313      	orrs	r3, r2
 8041ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8041cce:	687b      	ldr	r3, [r7, #4]
 8041cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cd2:	2b04      	cmp	r3, #4
 8041cd4:	d117      	bne.n	8041d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8041cd6:	687b      	ldr	r3, [r7, #4]
 8041cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041cda:	697a      	ldr	r2, [r7, #20]
 8041cdc:	4313      	orrs	r3, r2
 8041cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8041ce0:	687b      	ldr	r3, [r7, #4]
 8041ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041ce4:	2b00      	cmp	r3, #0
 8041ce6:	d00e      	beq.n	8041d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8041ce8:	6878      	ldr	r0, [r7, #4]
 8041cea:	f000 fb09 	bl	8042300 <DMA_CheckFifoParam>
 8041cee:	4603      	mov	r3, r0
 8041cf0:	2b00      	cmp	r3, #0
 8041cf2:	d008      	beq.n	8041d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	2240      	movs	r2, #64	; 0x40
 8041cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8041cfa:	687b      	ldr	r3, [r7, #4]
 8041cfc:	2201      	movs	r2, #1
 8041cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8041d02:	2301      	movs	r3, #1
 8041d04:	e016      	b.n	8041d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8041d06:	687b      	ldr	r3, [r7, #4]
 8041d08:	681b      	ldr	r3, [r3, #0]
 8041d0a:	697a      	ldr	r2, [r7, #20]
 8041d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8041d0e:	6878      	ldr	r0, [r7, #4]
 8041d10:	f000 fac0 	bl	8042294 <DMA_CalcBaseAndBitshift>
 8041d14:	4603      	mov	r3, r0
 8041d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041d18:	687b      	ldr	r3, [r7, #4]
 8041d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041d1c:	223f      	movs	r2, #63	; 0x3f
 8041d1e:	409a      	lsls	r2, r3
 8041d20:	68fb      	ldr	r3, [r7, #12]
 8041d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041d24:	687b      	ldr	r3, [r7, #4]
 8041d26:	2200      	movs	r2, #0
 8041d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8041d2a:	687b      	ldr	r3, [r7, #4]
 8041d2c:	2201      	movs	r2, #1
 8041d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8041d32:	2300      	movs	r3, #0
}
 8041d34:	4618      	mov	r0, r3
 8041d36:	3718      	adds	r7, #24
 8041d38:	46bd      	mov	sp, r7
 8041d3a:	bd80      	pop	{r7, pc}
 8041d3c:	e010803f 	.word	0xe010803f

08041d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8041d40:	b580      	push	{r7, lr}
 8041d42:	b086      	sub	sp, #24
 8041d44:	af00      	add	r7, sp, #0
 8041d46:	60f8      	str	r0, [r7, #12]
 8041d48:	60b9      	str	r1, [r7, #8]
 8041d4a:	607a      	str	r2, [r7, #4]
 8041d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041d4e:	2300      	movs	r3, #0
 8041d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8041d52:	68fb      	ldr	r3, [r7, #12]
 8041d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8041d58:	68fb      	ldr	r3, [r7, #12]
 8041d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8041d5e:	2b01      	cmp	r3, #1
 8041d60:	d101      	bne.n	8041d66 <HAL_DMA_Start_IT+0x26>
 8041d62:	2302      	movs	r3, #2
 8041d64:	e048      	b.n	8041df8 <HAL_DMA_Start_IT+0xb8>
 8041d66:	68fb      	ldr	r3, [r7, #12]
 8041d68:	2201      	movs	r2, #1
 8041d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8041d6e:	68fb      	ldr	r3, [r7, #12]
 8041d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041d74:	b2db      	uxtb	r3, r3
 8041d76:	2b01      	cmp	r3, #1
 8041d78:	d137      	bne.n	8041dea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8041d7a:	68fb      	ldr	r3, [r7, #12]
 8041d7c:	2202      	movs	r2, #2
 8041d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041d82:	68fb      	ldr	r3, [r7, #12]
 8041d84:	2200      	movs	r2, #0
 8041d86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8041d88:	683b      	ldr	r3, [r7, #0]
 8041d8a:	687a      	ldr	r2, [r7, #4]
 8041d8c:	68b9      	ldr	r1, [r7, #8]
 8041d8e:	68f8      	ldr	r0, [r7, #12]
 8041d90:	f000 fa52 	bl	8042238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041d94:	68fb      	ldr	r3, [r7, #12]
 8041d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041d98:	223f      	movs	r2, #63	; 0x3f
 8041d9a:	409a      	lsls	r2, r3
 8041d9c:	693b      	ldr	r3, [r7, #16]
 8041d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8041da0:	68fb      	ldr	r3, [r7, #12]
 8041da2:	681b      	ldr	r3, [r3, #0]
 8041da4:	681a      	ldr	r2, [r3, #0]
 8041da6:	68fb      	ldr	r3, [r7, #12]
 8041da8:	681b      	ldr	r3, [r3, #0]
 8041daa:	f042 0216 	orr.w	r2, r2, #22
 8041dae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8041db0:	68fb      	ldr	r3, [r7, #12]
 8041db2:	681b      	ldr	r3, [r3, #0]
 8041db4:	695a      	ldr	r2, [r3, #20]
 8041db6:	68fb      	ldr	r3, [r7, #12]
 8041db8:	681b      	ldr	r3, [r3, #0]
 8041dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8041dbe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8041dc0:	68fb      	ldr	r3, [r7, #12]
 8041dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041dc4:	2b00      	cmp	r3, #0
 8041dc6:	d007      	beq.n	8041dd8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8041dc8:	68fb      	ldr	r3, [r7, #12]
 8041dca:	681b      	ldr	r3, [r3, #0]
 8041dcc:	681a      	ldr	r2, [r3, #0]
 8041dce:	68fb      	ldr	r3, [r7, #12]
 8041dd0:	681b      	ldr	r3, [r3, #0]
 8041dd2:	f042 0208 	orr.w	r2, r2, #8
 8041dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8041dd8:	68fb      	ldr	r3, [r7, #12]
 8041dda:	681b      	ldr	r3, [r3, #0]
 8041ddc:	681a      	ldr	r2, [r3, #0]
 8041dde:	68fb      	ldr	r3, [r7, #12]
 8041de0:	681b      	ldr	r3, [r3, #0]
 8041de2:	f042 0201 	orr.w	r2, r2, #1
 8041de6:	601a      	str	r2, [r3, #0]
 8041de8:	e005      	b.n	8041df6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8041dea:	68fb      	ldr	r3, [r7, #12]
 8041dec:	2200      	movs	r2, #0
 8041dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8041df2:	2302      	movs	r3, #2
 8041df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8041df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8041df8:	4618      	mov	r0, r3
 8041dfa:	3718      	adds	r7, #24
 8041dfc:	46bd      	mov	sp, r7
 8041dfe:	bd80      	pop	{r7, pc}

08041e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8041e00:	b580      	push	{r7, lr}
 8041e02:	b084      	sub	sp, #16
 8041e04:	af00      	add	r7, sp, #0
 8041e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8041e0e:	f7ff fdcb 	bl	80419a8 <HAL_GetTick>
 8041e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041e14:	687b      	ldr	r3, [r7, #4]
 8041e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041e1a:	b2db      	uxtb	r3, r3
 8041e1c:	2b02      	cmp	r3, #2
 8041e1e:	d008      	beq.n	8041e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041e20:	687b      	ldr	r3, [r7, #4]
 8041e22:	2280      	movs	r2, #128	; 0x80
 8041e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041e26:	687b      	ldr	r3, [r7, #4]
 8041e28:	2200      	movs	r2, #0
 8041e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8041e2e:	2301      	movs	r3, #1
 8041e30:	e052      	b.n	8041ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8041e32:	687b      	ldr	r3, [r7, #4]
 8041e34:	681b      	ldr	r3, [r3, #0]
 8041e36:	681a      	ldr	r2, [r3, #0]
 8041e38:	687b      	ldr	r3, [r7, #4]
 8041e3a:	681b      	ldr	r3, [r3, #0]
 8041e3c:	f022 0216 	bic.w	r2, r2, #22
 8041e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8041e42:	687b      	ldr	r3, [r7, #4]
 8041e44:	681b      	ldr	r3, [r3, #0]
 8041e46:	695a      	ldr	r2, [r3, #20]
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	681b      	ldr	r3, [r3, #0]
 8041e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8041e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041e56:	2b00      	cmp	r3, #0
 8041e58:	d103      	bne.n	8041e62 <HAL_DMA_Abort+0x62>
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041e5e:	2b00      	cmp	r3, #0
 8041e60:	d007      	beq.n	8041e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	681b      	ldr	r3, [r3, #0]
 8041e66:	681a      	ldr	r2, [r3, #0]
 8041e68:	687b      	ldr	r3, [r7, #4]
 8041e6a:	681b      	ldr	r3, [r3, #0]
 8041e6c:	f022 0208 	bic.w	r2, r2, #8
 8041e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8041e72:	687b      	ldr	r3, [r7, #4]
 8041e74:	681b      	ldr	r3, [r3, #0]
 8041e76:	681a      	ldr	r2, [r3, #0]
 8041e78:	687b      	ldr	r3, [r7, #4]
 8041e7a:	681b      	ldr	r3, [r3, #0]
 8041e7c:	f022 0201 	bic.w	r2, r2, #1
 8041e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041e82:	e013      	b.n	8041eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8041e84:	f7ff fd90 	bl	80419a8 <HAL_GetTick>
 8041e88:	4602      	mov	r2, r0
 8041e8a:	68bb      	ldr	r3, [r7, #8]
 8041e8c:	1ad3      	subs	r3, r2, r3
 8041e8e:	2b05      	cmp	r3, #5
 8041e90:	d90c      	bls.n	8041eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041e92:	687b      	ldr	r3, [r7, #4]
 8041e94:	2220      	movs	r2, #32
 8041e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041e98:	687b      	ldr	r3, [r7, #4]
 8041e9a:	2203      	movs	r2, #3
 8041e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8041ea0:	687b      	ldr	r3, [r7, #4]
 8041ea2:	2200      	movs	r2, #0
 8041ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8041ea8:	2303      	movs	r3, #3
 8041eaa:	e015      	b.n	8041ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041eac:	687b      	ldr	r3, [r7, #4]
 8041eae:	681b      	ldr	r3, [r3, #0]
 8041eb0:	681b      	ldr	r3, [r3, #0]
 8041eb2:	f003 0301 	and.w	r3, r3, #1
 8041eb6:	2b00      	cmp	r3, #0
 8041eb8:	d1e4      	bne.n	8041e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041eba:	687b      	ldr	r3, [r7, #4]
 8041ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041ebe:	223f      	movs	r2, #63	; 0x3f
 8041ec0:	409a      	lsls	r2, r3
 8041ec2:	68fb      	ldr	r3, [r7, #12]
 8041ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8041ec6:	687b      	ldr	r3, [r7, #4]
 8041ec8:	2201      	movs	r2, #1
 8041eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041ece:	687b      	ldr	r3, [r7, #4]
 8041ed0:	2200      	movs	r2, #0
 8041ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8041ed6:	2300      	movs	r3, #0
}
 8041ed8:	4618      	mov	r0, r3
 8041eda:	3710      	adds	r7, #16
 8041edc:	46bd      	mov	sp, r7
 8041ede:	bd80      	pop	{r7, pc}

08041ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8041ee0:	b480      	push	{r7}
 8041ee2:	b083      	sub	sp, #12
 8041ee4:	af00      	add	r7, sp, #0
 8041ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041ee8:	687b      	ldr	r3, [r7, #4]
 8041eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041eee:	b2db      	uxtb	r3, r3
 8041ef0:	2b02      	cmp	r3, #2
 8041ef2:	d004      	beq.n	8041efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041ef4:	687b      	ldr	r3, [r7, #4]
 8041ef6:	2280      	movs	r2, #128	; 0x80
 8041ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8041efa:	2301      	movs	r3, #1
 8041efc:	e00c      	b.n	8041f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8041efe:	687b      	ldr	r3, [r7, #4]
 8041f00:	2205      	movs	r2, #5
 8041f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8041f06:	687b      	ldr	r3, [r7, #4]
 8041f08:	681b      	ldr	r3, [r3, #0]
 8041f0a:	681a      	ldr	r2, [r3, #0]
 8041f0c:	687b      	ldr	r3, [r7, #4]
 8041f0e:	681b      	ldr	r3, [r3, #0]
 8041f10:	f022 0201 	bic.w	r2, r2, #1
 8041f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8041f16:	2300      	movs	r3, #0
}
 8041f18:	4618      	mov	r0, r3
 8041f1a:	370c      	adds	r7, #12
 8041f1c:	46bd      	mov	sp, r7
 8041f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f22:	4770      	bx	lr

08041f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8041f24:	b580      	push	{r7, lr}
 8041f26:	b086      	sub	sp, #24
 8041f28:	af00      	add	r7, sp, #0
 8041f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8041f2c:	2300      	movs	r3, #0
 8041f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8041f30:	4b8e      	ldr	r3, [pc, #568]	; (804216c <HAL_DMA_IRQHandler+0x248>)
 8041f32:	681b      	ldr	r3, [r3, #0]
 8041f34:	4a8e      	ldr	r2, [pc, #568]	; (8042170 <HAL_DMA_IRQHandler+0x24c>)
 8041f36:	fba2 2303 	umull	r2, r3, r2, r3
 8041f3a:	0a9b      	lsrs	r3, r3, #10
 8041f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8041f3e:	687b      	ldr	r3, [r7, #4]
 8041f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8041f44:	693b      	ldr	r3, [r7, #16]
 8041f46:	681b      	ldr	r3, [r3, #0]
 8041f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8041f4a:	687b      	ldr	r3, [r7, #4]
 8041f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041f4e:	2208      	movs	r2, #8
 8041f50:	409a      	lsls	r2, r3
 8041f52:	68fb      	ldr	r3, [r7, #12]
 8041f54:	4013      	ands	r3, r2
 8041f56:	2b00      	cmp	r3, #0
 8041f58:	d01a      	beq.n	8041f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8041f5a:	687b      	ldr	r3, [r7, #4]
 8041f5c:	681b      	ldr	r3, [r3, #0]
 8041f5e:	681b      	ldr	r3, [r3, #0]
 8041f60:	f003 0304 	and.w	r3, r3, #4
 8041f64:	2b00      	cmp	r3, #0
 8041f66:	d013      	beq.n	8041f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8041f68:	687b      	ldr	r3, [r7, #4]
 8041f6a:	681b      	ldr	r3, [r3, #0]
 8041f6c:	681a      	ldr	r2, [r3, #0]
 8041f6e:	687b      	ldr	r3, [r7, #4]
 8041f70:	681b      	ldr	r3, [r3, #0]
 8041f72:	f022 0204 	bic.w	r2, r2, #4
 8041f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8041f78:	687b      	ldr	r3, [r7, #4]
 8041f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041f7c:	2208      	movs	r2, #8
 8041f7e:	409a      	lsls	r2, r3
 8041f80:	693b      	ldr	r3, [r7, #16]
 8041f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8041f84:	687b      	ldr	r3, [r7, #4]
 8041f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041f88:	f043 0201 	orr.w	r2, r3, #1
 8041f8c:	687b      	ldr	r3, [r7, #4]
 8041f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041f94:	2201      	movs	r2, #1
 8041f96:	409a      	lsls	r2, r3
 8041f98:	68fb      	ldr	r3, [r7, #12]
 8041f9a:	4013      	ands	r3, r2
 8041f9c:	2b00      	cmp	r3, #0
 8041f9e:	d012      	beq.n	8041fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8041fa0:	687b      	ldr	r3, [r7, #4]
 8041fa2:	681b      	ldr	r3, [r3, #0]
 8041fa4:	695b      	ldr	r3, [r3, #20]
 8041fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041faa:	2b00      	cmp	r3, #0
 8041fac:	d00b      	beq.n	8041fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8041fae:	687b      	ldr	r3, [r7, #4]
 8041fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041fb2:	2201      	movs	r2, #1
 8041fb4:	409a      	lsls	r2, r3
 8041fb6:	693b      	ldr	r3, [r7, #16]
 8041fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8041fba:	687b      	ldr	r3, [r7, #4]
 8041fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041fbe:	f043 0202 	orr.w	r2, r3, #2
 8041fc2:	687b      	ldr	r3, [r7, #4]
 8041fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8041fc6:	687b      	ldr	r3, [r7, #4]
 8041fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041fca:	2204      	movs	r2, #4
 8041fcc:	409a      	lsls	r2, r3
 8041fce:	68fb      	ldr	r3, [r7, #12]
 8041fd0:	4013      	ands	r3, r2
 8041fd2:	2b00      	cmp	r3, #0
 8041fd4:	d012      	beq.n	8041ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8041fd6:	687b      	ldr	r3, [r7, #4]
 8041fd8:	681b      	ldr	r3, [r3, #0]
 8041fda:	681b      	ldr	r3, [r3, #0]
 8041fdc:	f003 0302 	and.w	r3, r3, #2
 8041fe0:	2b00      	cmp	r3, #0
 8041fe2:	d00b      	beq.n	8041ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8041fe4:	687b      	ldr	r3, [r7, #4]
 8041fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041fe8:	2204      	movs	r2, #4
 8041fea:	409a      	lsls	r2, r3
 8041fec:	693b      	ldr	r3, [r7, #16]
 8041fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8041ff0:	687b      	ldr	r3, [r7, #4]
 8041ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041ff4:	f043 0204 	orr.w	r2, r3, #4
 8041ff8:	687b      	ldr	r3, [r7, #4]
 8041ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8041ffc:	687b      	ldr	r3, [r7, #4]
 8041ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042000:	2210      	movs	r2, #16
 8042002:	409a      	lsls	r2, r3
 8042004:	68fb      	ldr	r3, [r7, #12]
 8042006:	4013      	ands	r3, r2
 8042008:	2b00      	cmp	r3, #0
 804200a:	d043      	beq.n	8042094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 804200c:	687b      	ldr	r3, [r7, #4]
 804200e:	681b      	ldr	r3, [r3, #0]
 8042010:	681b      	ldr	r3, [r3, #0]
 8042012:	f003 0308 	and.w	r3, r3, #8
 8042016:	2b00      	cmp	r3, #0
 8042018:	d03c      	beq.n	8042094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804201e:	2210      	movs	r2, #16
 8042020:	409a      	lsls	r2, r3
 8042022:	693b      	ldr	r3, [r7, #16]
 8042024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8042026:	687b      	ldr	r3, [r7, #4]
 8042028:	681b      	ldr	r3, [r3, #0]
 804202a:	681b      	ldr	r3, [r3, #0]
 804202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042030:	2b00      	cmp	r3, #0
 8042032:	d018      	beq.n	8042066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8042034:	687b      	ldr	r3, [r7, #4]
 8042036:	681b      	ldr	r3, [r3, #0]
 8042038:	681b      	ldr	r3, [r3, #0]
 804203a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804203e:	2b00      	cmp	r3, #0
 8042040:	d108      	bne.n	8042054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8042042:	687b      	ldr	r3, [r7, #4]
 8042044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042046:	2b00      	cmp	r3, #0
 8042048:	d024      	beq.n	8042094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 804204a:	687b      	ldr	r3, [r7, #4]
 804204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804204e:	6878      	ldr	r0, [r7, #4]
 8042050:	4798      	blx	r3
 8042052:	e01f      	b.n	8042094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8042054:	687b      	ldr	r3, [r7, #4]
 8042056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042058:	2b00      	cmp	r3, #0
 804205a:	d01b      	beq.n	8042094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 804205c:	687b      	ldr	r3, [r7, #4]
 804205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042060:	6878      	ldr	r0, [r7, #4]
 8042062:	4798      	blx	r3
 8042064:	e016      	b.n	8042094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8042066:	687b      	ldr	r3, [r7, #4]
 8042068:	681b      	ldr	r3, [r3, #0]
 804206a:	681b      	ldr	r3, [r3, #0]
 804206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042070:	2b00      	cmp	r3, #0
 8042072:	d107      	bne.n	8042084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8042074:	687b      	ldr	r3, [r7, #4]
 8042076:	681b      	ldr	r3, [r3, #0]
 8042078:	681a      	ldr	r2, [r3, #0]
 804207a:	687b      	ldr	r3, [r7, #4]
 804207c:	681b      	ldr	r3, [r3, #0]
 804207e:	f022 0208 	bic.w	r2, r2, #8
 8042082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8042084:	687b      	ldr	r3, [r7, #4]
 8042086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042088:	2b00      	cmp	r3, #0
 804208a:	d003      	beq.n	8042094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 804208c:	687b      	ldr	r3, [r7, #4]
 804208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042090:	6878      	ldr	r0, [r7, #4]
 8042092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042098:	2220      	movs	r2, #32
 804209a:	409a      	lsls	r2, r3
 804209c:	68fb      	ldr	r3, [r7, #12]
 804209e:	4013      	ands	r3, r2
 80420a0:	2b00      	cmp	r3, #0
 80420a2:	f000 808f 	beq.w	80421c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80420a6:	687b      	ldr	r3, [r7, #4]
 80420a8:	681b      	ldr	r3, [r3, #0]
 80420aa:	681b      	ldr	r3, [r3, #0]
 80420ac:	f003 0310 	and.w	r3, r3, #16
 80420b0:	2b00      	cmp	r3, #0
 80420b2:	f000 8087 	beq.w	80421c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80420b6:	687b      	ldr	r3, [r7, #4]
 80420b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80420ba:	2220      	movs	r2, #32
 80420bc:	409a      	lsls	r2, r3
 80420be:	693b      	ldr	r3, [r7, #16]
 80420c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80420c2:	687b      	ldr	r3, [r7, #4]
 80420c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80420c8:	b2db      	uxtb	r3, r3
 80420ca:	2b05      	cmp	r3, #5
 80420cc:	d136      	bne.n	804213c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80420ce:	687b      	ldr	r3, [r7, #4]
 80420d0:	681b      	ldr	r3, [r3, #0]
 80420d2:	681a      	ldr	r2, [r3, #0]
 80420d4:	687b      	ldr	r3, [r7, #4]
 80420d6:	681b      	ldr	r3, [r3, #0]
 80420d8:	f022 0216 	bic.w	r2, r2, #22
 80420dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80420de:	687b      	ldr	r3, [r7, #4]
 80420e0:	681b      	ldr	r3, [r3, #0]
 80420e2:	695a      	ldr	r2, [r3, #20]
 80420e4:	687b      	ldr	r3, [r7, #4]
 80420e6:	681b      	ldr	r3, [r3, #0]
 80420e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80420ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80420ee:	687b      	ldr	r3, [r7, #4]
 80420f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80420f2:	2b00      	cmp	r3, #0
 80420f4:	d103      	bne.n	80420fe <HAL_DMA_IRQHandler+0x1da>
 80420f6:	687b      	ldr	r3, [r7, #4]
 80420f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80420fa:	2b00      	cmp	r3, #0
 80420fc:	d007      	beq.n	804210e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80420fe:	687b      	ldr	r3, [r7, #4]
 8042100:	681b      	ldr	r3, [r3, #0]
 8042102:	681a      	ldr	r2, [r3, #0]
 8042104:	687b      	ldr	r3, [r7, #4]
 8042106:	681b      	ldr	r3, [r3, #0]
 8042108:	f022 0208 	bic.w	r2, r2, #8
 804210c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 804210e:	687b      	ldr	r3, [r7, #4]
 8042110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042112:	223f      	movs	r2, #63	; 0x3f
 8042114:	409a      	lsls	r2, r3
 8042116:	693b      	ldr	r3, [r7, #16]
 8042118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804211a:	687b      	ldr	r3, [r7, #4]
 804211c:	2201      	movs	r2, #1
 804211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	2200      	movs	r2, #0
 8042126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 804212a:	687b      	ldr	r3, [r7, #4]
 804212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804212e:	2b00      	cmp	r3, #0
 8042130:	d07e      	beq.n	8042230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8042132:	687b      	ldr	r3, [r7, #4]
 8042134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042136:	6878      	ldr	r0, [r7, #4]
 8042138:	4798      	blx	r3
        }
        return;
 804213a:	e079      	b.n	8042230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	681b      	ldr	r3, [r3, #0]
 8042140:	681b      	ldr	r3, [r3, #0]
 8042142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042146:	2b00      	cmp	r3, #0
 8042148:	d01d      	beq.n	8042186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 804214a:	687b      	ldr	r3, [r7, #4]
 804214c:	681b      	ldr	r3, [r3, #0]
 804214e:	681b      	ldr	r3, [r3, #0]
 8042150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042154:	2b00      	cmp	r3, #0
 8042156:	d10d      	bne.n	8042174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8042158:	687b      	ldr	r3, [r7, #4]
 804215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804215c:	2b00      	cmp	r3, #0
 804215e:	d031      	beq.n	80421c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8042160:	687b      	ldr	r3, [r7, #4]
 8042162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042164:	6878      	ldr	r0, [r7, #4]
 8042166:	4798      	blx	r3
 8042168:	e02c      	b.n	80421c4 <HAL_DMA_IRQHandler+0x2a0>
 804216a:	bf00      	nop
 804216c:	20000000 	.word	0x20000000
 8042170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8042174:	687b      	ldr	r3, [r7, #4]
 8042176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042178:	2b00      	cmp	r3, #0
 804217a:	d023      	beq.n	80421c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 804217c:	687b      	ldr	r3, [r7, #4]
 804217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042180:	6878      	ldr	r0, [r7, #4]
 8042182:	4798      	blx	r3
 8042184:	e01e      	b.n	80421c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8042186:	687b      	ldr	r3, [r7, #4]
 8042188:	681b      	ldr	r3, [r3, #0]
 804218a:	681b      	ldr	r3, [r3, #0]
 804218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042190:	2b00      	cmp	r3, #0
 8042192:	d10f      	bne.n	80421b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8042194:	687b      	ldr	r3, [r7, #4]
 8042196:	681b      	ldr	r3, [r3, #0]
 8042198:	681a      	ldr	r2, [r3, #0]
 804219a:	687b      	ldr	r3, [r7, #4]
 804219c:	681b      	ldr	r3, [r3, #0]
 804219e:	f022 0210 	bic.w	r2, r2, #16
 80421a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80421a4:	687b      	ldr	r3, [r7, #4]
 80421a6:	2201      	movs	r2, #1
 80421a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80421ac:	687b      	ldr	r3, [r7, #4]
 80421ae:	2200      	movs	r2, #0
 80421b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80421b4:	687b      	ldr	r3, [r7, #4]
 80421b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80421b8:	2b00      	cmp	r3, #0
 80421ba:	d003      	beq.n	80421c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80421bc:	687b      	ldr	r3, [r7, #4]
 80421be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80421c0:	6878      	ldr	r0, [r7, #4]
 80421c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80421c4:	687b      	ldr	r3, [r7, #4]
 80421c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80421c8:	2b00      	cmp	r3, #0
 80421ca:	d032      	beq.n	8042232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80421cc:	687b      	ldr	r3, [r7, #4]
 80421ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80421d0:	f003 0301 	and.w	r3, r3, #1
 80421d4:	2b00      	cmp	r3, #0
 80421d6:	d022      	beq.n	804221e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80421d8:	687b      	ldr	r3, [r7, #4]
 80421da:	2205      	movs	r2, #5
 80421dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80421e0:	687b      	ldr	r3, [r7, #4]
 80421e2:	681b      	ldr	r3, [r3, #0]
 80421e4:	681a      	ldr	r2, [r3, #0]
 80421e6:	687b      	ldr	r3, [r7, #4]
 80421e8:	681b      	ldr	r3, [r3, #0]
 80421ea:	f022 0201 	bic.w	r2, r2, #1
 80421ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80421f0:	68bb      	ldr	r3, [r7, #8]
 80421f2:	3301      	adds	r3, #1
 80421f4:	60bb      	str	r3, [r7, #8]
 80421f6:	697a      	ldr	r2, [r7, #20]
 80421f8:	429a      	cmp	r2, r3
 80421fa:	d307      	bcc.n	804220c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80421fc:	687b      	ldr	r3, [r7, #4]
 80421fe:	681b      	ldr	r3, [r3, #0]
 8042200:	681b      	ldr	r3, [r3, #0]
 8042202:	f003 0301 	and.w	r3, r3, #1
 8042206:	2b00      	cmp	r3, #0
 8042208:	d1f2      	bne.n	80421f0 <HAL_DMA_IRQHandler+0x2cc>
 804220a:	e000      	b.n	804220e <HAL_DMA_IRQHandler+0x2ea>
          break;
 804220c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 804220e:	687b      	ldr	r3, [r7, #4]
 8042210:	2201      	movs	r2, #1
 8042212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8042216:	687b      	ldr	r3, [r7, #4]
 8042218:	2200      	movs	r2, #0
 804221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 804221e:	687b      	ldr	r3, [r7, #4]
 8042220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042222:	2b00      	cmp	r3, #0
 8042224:	d005      	beq.n	8042232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8042226:	687b      	ldr	r3, [r7, #4]
 8042228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804222a:	6878      	ldr	r0, [r7, #4]
 804222c:	4798      	blx	r3
 804222e:	e000      	b.n	8042232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8042230:	bf00      	nop
    }
  }
}
 8042232:	3718      	adds	r7, #24
 8042234:	46bd      	mov	sp, r7
 8042236:	bd80      	pop	{r7, pc}

08042238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8042238:	b480      	push	{r7}
 804223a:	b085      	sub	sp, #20
 804223c:	af00      	add	r7, sp, #0
 804223e:	60f8      	str	r0, [r7, #12]
 8042240:	60b9      	str	r1, [r7, #8]
 8042242:	607a      	str	r2, [r7, #4]
 8042244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8042246:	68fb      	ldr	r3, [r7, #12]
 8042248:	681b      	ldr	r3, [r3, #0]
 804224a:	681a      	ldr	r2, [r3, #0]
 804224c:	68fb      	ldr	r3, [r7, #12]
 804224e:	681b      	ldr	r3, [r3, #0]
 8042250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8042254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8042256:	68fb      	ldr	r3, [r7, #12]
 8042258:	681b      	ldr	r3, [r3, #0]
 804225a:	683a      	ldr	r2, [r7, #0]
 804225c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 804225e:	68fb      	ldr	r3, [r7, #12]
 8042260:	689b      	ldr	r3, [r3, #8]
 8042262:	2b40      	cmp	r3, #64	; 0x40
 8042264:	d108      	bne.n	8042278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8042266:	68fb      	ldr	r3, [r7, #12]
 8042268:	681b      	ldr	r3, [r3, #0]
 804226a:	687a      	ldr	r2, [r7, #4]
 804226c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 804226e:	68fb      	ldr	r3, [r7, #12]
 8042270:	681b      	ldr	r3, [r3, #0]
 8042272:	68ba      	ldr	r2, [r7, #8]
 8042274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8042276:	e007      	b.n	8042288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8042278:	68fb      	ldr	r3, [r7, #12]
 804227a:	681b      	ldr	r3, [r3, #0]
 804227c:	68ba      	ldr	r2, [r7, #8]
 804227e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8042280:	68fb      	ldr	r3, [r7, #12]
 8042282:	681b      	ldr	r3, [r3, #0]
 8042284:	687a      	ldr	r2, [r7, #4]
 8042286:	60da      	str	r2, [r3, #12]
}
 8042288:	bf00      	nop
 804228a:	3714      	adds	r7, #20
 804228c:	46bd      	mov	sp, r7
 804228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042292:	4770      	bx	lr

08042294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8042294:	b480      	push	{r7}
 8042296:	b085      	sub	sp, #20
 8042298:	af00      	add	r7, sp, #0
 804229a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 804229c:	687b      	ldr	r3, [r7, #4]
 804229e:	681b      	ldr	r3, [r3, #0]
 80422a0:	b2db      	uxtb	r3, r3
 80422a2:	3b10      	subs	r3, #16
 80422a4:	4a13      	ldr	r2, [pc, #76]	; (80422f4 <DMA_CalcBaseAndBitshift+0x60>)
 80422a6:	fba2 2303 	umull	r2, r3, r2, r3
 80422aa:	091b      	lsrs	r3, r3, #4
 80422ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80422ae:	4a12      	ldr	r2, [pc, #72]	; (80422f8 <DMA_CalcBaseAndBitshift+0x64>)
 80422b0:	68fb      	ldr	r3, [r7, #12]
 80422b2:	4413      	add	r3, r2
 80422b4:	781b      	ldrb	r3, [r3, #0]
 80422b6:	461a      	mov	r2, r3
 80422b8:	687b      	ldr	r3, [r7, #4]
 80422ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80422bc:	68fb      	ldr	r3, [r7, #12]
 80422be:	2b03      	cmp	r3, #3
 80422c0:	d908      	bls.n	80422d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80422c2:	687b      	ldr	r3, [r7, #4]
 80422c4:	681b      	ldr	r3, [r3, #0]
 80422c6:	461a      	mov	r2, r3
 80422c8:	4b0c      	ldr	r3, [pc, #48]	; (80422fc <DMA_CalcBaseAndBitshift+0x68>)
 80422ca:	4013      	ands	r3, r2
 80422cc:	1d1a      	adds	r2, r3, #4
 80422ce:	687b      	ldr	r3, [r7, #4]
 80422d0:	659a      	str	r2, [r3, #88]	; 0x58
 80422d2:	e006      	b.n	80422e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80422d4:	687b      	ldr	r3, [r7, #4]
 80422d6:	681b      	ldr	r3, [r3, #0]
 80422d8:	461a      	mov	r2, r3
 80422da:	4b08      	ldr	r3, [pc, #32]	; (80422fc <DMA_CalcBaseAndBitshift+0x68>)
 80422dc:	4013      	ands	r3, r2
 80422de:	687a      	ldr	r2, [r7, #4]
 80422e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80422e2:	687b      	ldr	r3, [r7, #4]
 80422e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80422e6:	4618      	mov	r0, r3
 80422e8:	3714      	adds	r7, #20
 80422ea:	46bd      	mov	sp, r7
 80422ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422f0:	4770      	bx	lr
 80422f2:	bf00      	nop
 80422f4:	aaaaaaab 	.word	0xaaaaaaab
 80422f8:	08058454 	.word	0x08058454
 80422fc:	fffffc00 	.word	0xfffffc00

08042300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8042300:	b480      	push	{r7}
 8042302:	b085      	sub	sp, #20
 8042304:	af00      	add	r7, sp, #0
 8042306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8042308:	2300      	movs	r3, #0
 804230a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 804230c:	687b      	ldr	r3, [r7, #4]
 804230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8042312:	687b      	ldr	r3, [r7, #4]
 8042314:	699b      	ldr	r3, [r3, #24]
 8042316:	2b00      	cmp	r3, #0
 8042318:	d11f      	bne.n	804235a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 804231a:	68bb      	ldr	r3, [r7, #8]
 804231c:	2b03      	cmp	r3, #3
 804231e:	d856      	bhi.n	80423ce <DMA_CheckFifoParam+0xce>
 8042320:	a201      	add	r2, pc, #4	; (adr r2, 8042328 <DMA_CheckFifoParam+0x28>)
 8042322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042326:	bf00      	nop
 8042328:	08042339 	.word	0x08042339
 804232c:	0804234b 	.word	0x0804234b
 8042330:	08042339 	.word	0x08042339
 8042334:	080423cf 	.word	0x080423cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8042338:	687b      	ldr	r3, [r7, #4]
 804233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804233c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042340:	2b00      	cmp	r3, #0
 8042342:	d046      	beq.n	80423d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8042344:	2301      	movs	r3, #1
 8042346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042348:	e043      	b.n	80423d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804234e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8042352:	d140      	bne.n	80423d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8042354:	2301      	movs	r3, #1
 8042356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042358:	e03d      	b.n	80423d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 804235a:	687b      	ldr	r3, [r7, #4]
 804235c:	699b      	ldr	r3, [r3, #24]
 804235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042362:	d121      	bne.n	80423a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8042364:	68bb      	ldr	r3, [r7, #8]
 8042366:	2b03      	cmp	r3, #3
 8042368:	d837      	bhi.n	80423da <DMA_CheckFifoParam+0xda>
 804236a:	a201      	add	r2, pc, #4	; (adr r2, 8042370 <DMA_CheckFifoParam+0x70>)
 804236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042370:	08042381 	.word	0x08042381
 8042374:	08042387 	.word	0x08042387
 8042378:	08042381 	.word	0x08042381
 804237c:	08042399 	.word	0x08042399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8042380:	2301      	movs	r3, #1
 8042382:	73fb      	strb	r3, [r7, #15]
      break;
 8042384:	e030      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8042386:	687b      	ldr	r3, [r7, #4]
 8042388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804238a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804238e:	2b00      	cmp	r3, #0
 8042390:	d025      	beq.n	80423de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8042392:	2301      	movs	r3, #1
 8042394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042396:	e022      	b.n	80423de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8042398:	687b      	ldr	r3, [r7, #4]
 804239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804239c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80423a0:	d11f      	bne.n	80423e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80423a2:	2301      	movs	r3, #1
 80423a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80423a6:	e01c      	b.n	80423e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80423a8:	68bb      	ldr	r3, [r7, #8]
 80423aa:	2b02      	cmp	r3, #2
 80423ac:	d903      	bls.n	80423b6 <DMA_CheckFifoParam+0xb6>
 80423ae:	68bb      	ldr	r3, [r7, #8]
 80423b0:	2b03      	cmp	r3, #3
 80423b2:	d003      	beq.n	80423bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80423b4:	e018      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80423b6:	2301      	movs	r3, #1
 80423b8:	73fb      	strb	r3, [r7, #15]
      break;
 80423ba:	e015      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80423bc:	687b      	ldr	r3, [r7, #4]
 80423be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80423c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80423c4:	2b00      	cmp	r3, #0
 80423c6:	d00e      	beq.n	80423e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80423c8:	2301      	movs	r3, #1
 80423ca:	73fb      	strb	r3, [r7, #15]
      break;
 80423cc:	e00b      	b.n	80423e6 <DMA_CheckFifoParam+0xe6>
      break;
 80423ce:	bf00      	nop
 80423d0:	e00a      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      break;
 80423d2:	bf00      	nop
 80423d4:	e008      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      break;
 80423d6:	bf00      	nop
 80423d8:	e006      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      break;
 80423da:	bf00      	nop
 80423dc:	e004      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      break;
 80423de:	bf00      	nop
 80423e0:	e002      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80423e2:	bf00      	nop
 80423e4:	e000      	b.n	80423e8 <DMA_CheckFifoParam+0xe8>
      break;
 80423e6:	bf00      	nop
    }
  } 
  
  return status; 
 80423e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80423ea:	4618      	mov	r0, r3
 80423ec:	3714      	adds	r7, #20
 80423ee:	46bd      	mov	sp, r7
 80423f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423f4:	4770      	bx	lr
 80423f6:	bf00      	nop

080423f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80423f8:	b580      	push	{r7, lr}
 80423fa:	b084      	sub	sp, #16
 80423fc:	af00      	add	r7, sp, #0
 80423fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8042400:	687b      	ldr	r3, [r7, #4]
 8042402:	2b00      	cmp	r3, #0
 8042404:	d101      	bne.n	804240a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8042406:	2301      	movs	r3, #1
 8042408:	e06a      	b.n	80424e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 804240a:	687b      	ldr	r3, [r7, #4]
 804240c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042410:	2b00      	cmp	r3, #0
 8042412:	d106      	bne.n	8042422 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8042414:	687b      	ldr	r3, [r7, #4]
 8042416:	2223      	movs	r2, #35	; 0x23
 8042418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 804241c:	6878      	ldr	r0, [r7, #4]
 804241e:	f004 fdfd 	bl	804701c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042422:	4b31      	ldr	r3, [pc, #196]	; (80424e8 <HAL_ETH_Init+0xf0>)
 8042424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042426:	4a30      	ldr	r2, [pc, #192]	; (80424e8 <HAL_ETH_Init+0xf0>)
 8042428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804242c:	6453      	str	r3, [r2, #68]	; 0x44
 804242e:	4b2e      	ldr	r3, [pc, #184]	; (80424e8 <HAL_ETH_Init+0xf0>)
 8042430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042436:	60bb      	str	r3, [r7, #8]
 8042438:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 804243a:	4b2c      	ldr	r3, [pc, #176]	; (80424ec <HAL_ETH_Init+0xf4>)
 804243c:	685b      	ldr	r3, [r3, #4]
 804243e:	4a2b      	ldr	r2, [pc, #172]	; (80424ec <HAL_ETH_Init+0xf4>)
 8042440:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8042444:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8042446:	4b29      	ldr	r3, [pc, #164]	; (80424ec <HAL_ETH_Init+0xf4>)
 8042448:	685a      	ldr	r2, [r3, #4]
 804244a:	687b      	ldr	r3, [r7, #4]
 804244c:	689b      	ldr	r3, [r3, #8]
 804244e:	4927      	ldr	r1, [pc, #156]	; (80424ec <HAL_ETH_Init+0xf4>)
 8042450:	4313      	orrs	r3, r2
 8042452:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8042454:	4b25      	ldr	r3, [pc, #148]	; (80424ec <HAL_ETH_Init+0xf4>)
 8042456:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8042458:	687b      	ldr	r3, [r7, #4]
 804245a:	681b      	ldr	r3, [r3, #0]
 804245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042460:	681b      	ldr	r3, [r3, #0]
 8042462:	687a      	ldr	r2, [r7, #4]
 8042464:	6812      	ldr	r2, [r2, #0]
 8042466:	f043 0301 	orr.w	r3, r3, #1
 804246a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 804246e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042470:	f7ff fa9a 	bl	80419a8 <HAL_GetTick>
 8042474:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8042476:	e011      	b.n	804249c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8042478:	f7ff fa96 	bl	80419a8 <HAL_GetTick>
 804247c:	4602      	mov	r2, r0
 804247e:	68fb      	ldr	r3, [r7, #12]
 8042480:	1ad3      	subs	r3, r2, r3
 8042482:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8042486:	d909      	bls.n	804249c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8042488:	687b      	ldr	r3, [r7, #4]
 804248a:	2204      	movs	r2, #4
 804248c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8042490:	687b      	ldr	r3, [r7, #4]
 8042492:	22e0      	movs	r2, #224	; 0xe0
 8042494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8042498:	2301      	movs	r3, #1
 804249a:	e021      	b.n	80424e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	681b      	ldr	r3, [r3, #0]
 80424a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80424a4:	681b      	ldr	r3, [r3, #0]
 80424a6:	f003 0301 	and.w	r3, r3, #1
 80424aa:	2b00      	cmp	r3, #0
 80424ac:	d1e4      	bne.n	8042478 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80424ae:	6878      	ldr	r0, [r7, #4]
 80424b0:	f000 ff4c 	bl	804334c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80424b4:	6878      	ldr	r0, [r7, #4]
 80424b6:	f000 fff3 	bl	80434a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80424ba:	6878      	ldr	r0, [r7, #4]
 80424bc:	f001 f849 	bl	8043552 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80424c0:	687b      	ldr	r3, [r7, #4]
 80424c2:	685b      	ldr	r3, [r3, #4]
 80424c4:	461a      	mov	r2, r3
 80424c6:	2100      	movs	r1, #0
 80424c8:	6878      	ldr	r0, [r7, #4]
 80424ca:	f000 ffb1 	bl	8043430 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	2200      	movs	r2, #0
 80424d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80424d6:	687b      	ldr	r3, [r7, #4]
 80424d8:	2210      	movs	r2, #16
 80424da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80424de:	2300      	movs	r3, #0
}
 80424e0:	4618      	mov	r0, r3
 80424e2:	3710      	adds	r7, #16
 80424e4:	46bd      	mov	sp, r7
 80424e6:	bd80      	pop	{r7, pc}
 80424e8:	40023800 	.word	0x40023800
 80424ec:	40013800 	.word	0x40013800

080424f0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80424f0:	b580      	push	{r7, lr}
 80424f2:	b084      	sub	sp, #16
 80424f4:	af00      	add	r7, sp, #0
 80424f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80424f8:	687b      	ldr	r3, [r7, #4]
 80424fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80424fe:	2b10      	cmp	r3, #16
 8042500:	d17b      	bne.n	80425fa <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	2223      	movs	r2, #35	; 0x23
 8042506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 804250a:	687b      	ldr	r3, [r7, #4]
 804250c:	2201      	movs	r2, #1
 804250e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8042510:	687b      	ldr	r3, [r7, #4]
 8042512:	681b      	ldr	r3, [r3, #0]
 8042514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042516:	687b      	ldr	r3, [r7, #4]
 8042518:	681b      	ldr	r3, [r3, #0]
 804251a:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 804251e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8042520:	687b      	ldr	r3, [r7, #4]
 8042522:	681b      	ldr	r3, [r3, #0]
 8042524:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8042528:	687b      	ldr	r3, [r7, #4]
 804252a:	681a      	ldr	r2, [r3, #0]
 804252c:	4b35      	ldr	r3, [pc, #212]	; (8042604 <HAL_ETH_Start_IT+0x114>)
 804252e:	430b      	orrs	r3, r1
 8042530:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8042534:	687b      	ldr	r3, [r7, #4]
 8042536:	681b      	ldr	r3, [r3, #0]
 8042538:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 804253c:	687b      	ldr	r3, [r7, #4]
 804253e:	681b      	ldr	r3, [r3, #0]
 8042540:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8042544:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8042548:	687b      	ldr	r3, [r7, #4]
 804254a:	2204      	movs	r2, #4
 804254c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 804254e:	6878      	ldr	r0, [r7, #4]
 8042550:	f000 f9fc 	bl	804294c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8042554:	687b      	ldr	r3, [r7, #4]
 8042556:	681b      	ldr	r3, [r3, #0]
 8042558:	681a      	ldr	r2, [r3, #0]
 804255a:	687b      	ldr	r3, [r7, #4]
 804255c:	681b      	ldr	r3, [r3, #0]
 804255e:	f042 0208 	orr.w	r2, r2, #8
 8042562:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	681b      	ldr	r3, [r3, #0]
 8042568:	681b      	ldr	r3, [r3, #0]
 804256a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 804256c:	2001      	movs	r0, #1
 804256e:	f7ff fa27 	bl	80419c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8042572:	687b      	ldr	r3, [r7, #4]
 8042574:	681b      	ldr	r3, [r3, #0]
 8042576:	68fa      	ldr	r2, [r7, #12]
 8042578:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 804257a:	687b      	ldr	r3, [r7, #4]
 804257c:	681b      	ldr	r3, [r3, #0]
 804257e:	681a      	ldr	r2, [r3, #0]
 8042580:	687b      	ldr	r3, [r7, #4]
 8042582:	681b      	ldr	r3, [r3, #0]
 8042584:	f042 0204 	orr.w	r2, r2, #4
 8042588:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 804258a:	687b      	ldr	r3, [r7, #4]
 804258c:	681b      	ldr	r3, [r3, #0]
 804258e:	681b      	ldr	r3, [r3, #0]
 8042590:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8042592:	2001      	movs	r0, #1
 8042594:	f7ff fa14 	bl	80419c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8042598:	687b      	ldr	r3, [r7, #4]
 804259a:	681b      	ldr	r3, [r3, #0]
 804259c:	68fa      	ldr	r2, [r7, #12]
 804259e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80425a0:	6878      	ldr	r0, [r7, #4]
 80425a2:	f000 fd74 	bl	804308e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80425a6:	687b      	ldr	r3, [r7, #4]
 80425a8:	681b      	ldr	r3, [r3, #0]
 80425aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80425ae:	699b      	ldr	r3, [r3, #24]
 80425b0:	687a      	ldr	r2, [r7, #4]
 80425b2:	6812      	ldr	r2, [r2, #0]
 80425b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80425b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80425bc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80425be:	687b      	ldr	r3, [r7, #4]
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80425c6:	699b      	ldr	r3, [r3, #24]
 80425c8:	687a      	ldr	r2, [r7, #4]
 80425ca:	6812      	ldr	r2, [r2, #0]
 80425cc:	f043 0302 	orr.w	r3, r3, #2
 80425d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80425d4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80425d6:	687b      	ldr	r3, [r7, #4]
 80425d8:	681b      	ldr	r3, [r3, #0]
 80425da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80425de:	69d9      	ldr	r1, [r3, #28]
 80425e0:	687b      	ldr	r3, [r7, #4]
 80425e2:	681a      	ldr	r2, [r3, #0]
 80425e4:	4b08      	ldr	r3, [pc, #32]	; (8042608 <HAL_ETH_Start_IT+0x118>)
 80425e6:	430b      	orrs	r3, r1
 80425e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80425ec:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80425ee:	687b      	ldr	r3, [r7, #4]
 80425f0:	2223      	movs	r2, #35	; 0x23
 80425f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80425f6:	2300      	movs	r3, #0
 80425f8:	e000      	b.n	80425fc <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80425fa:	2301      	movs	r3, #1
  }
}
 80425fc:	4618      	mov	r0, r3
 80425fe:	3710      	adds	r7, #16
 8042600:	46bd      	mov	sp, r7
 8042602:	bd80      	pop	{r7, pc}
 8042604:	00020060 	.word	0x00020060
 8042608:	0001a0c1 	.word	0x0001a0c1

0804260c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 804260c:	b580      	push	{r7, lr}
 804260e:	b086      	sub	sp, #24
 8042610:	af00      	add	r7, sp, #0
 8042612:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8042614:	687b      	ldr	r3, [r7, #4]
 8042616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804261a:	2b23      	cmp	r3, #35	; 0x23
 804261c:	d16e      	bne.n	80426fc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 804261e:	687b      	ldr	r3, [r7, #4]
 8042620:	2223      	movs	r2, #35	; 0x23
 8042622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8042626:	687b      	ldr	r3, [r7, #4]
 8042628:	681b      	ldr	r3, [r3, #0]
 804262a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804262e:	69d9      	ldr	r1, [r3, #28]
 8042630:	687b      	ldr	r3, [r7, #4]
 8042632:	681a      	ldr	r2, [r3, #0]
 8042634:	4b34      	ldr	r3, [pc, #208]	; (8042708 <HAL_ETH_Stop_IT+0xfc>)
 8042636:	400b      	ands	r3, r1
 8042638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 804263c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 804263e:	687b      	ldr	r3, [r7, #4]
 8042640:	681b      	ldr	r3, [r3, #0]
 8042642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042646:	699b      	ldr	r3, [r3, #24]
 8042648:	687a      	ldr	r2, [r7, #4]
 804264a:	6812      	ldr	r2, [r2, #0]
 804264c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8042650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8042654:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8042656:	687b      	ldr	r3, [r7, #4]
 8042658:	681b      	ldr	r3, [r3, #0]
 804265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804265e:	699b      	ldr	r3, [r3, #24]
 8042660:	687a      	ldr	r2, [r7, #4]
 8042662:	6812      	ldr	r2, [r2, #0]
 8042664:	f023 0302 	bic.w	r3, r3, #2
 8042668:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 804266c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 804266e:	687b      	ldr	r3, [r7, #4]
 8042670:	681b      	ldr	r3, [r3, #0]
 8042672:	681a      	ldr	r2, [r3, #0]
 8042674:	687b      	ldr	r3, [r7, #4]
 8042676:	681b      	ldr	r3, [r3, #0]
 8042678:	f022 0204 	bic.w	r2, r2, #4
 804267c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	681b      	ldr	r3, [r3, #0]
 8042682:	681b      	ldr	r3, [r3, #0]
 8042684:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8042686:	2001      	movs	r0, #1
 8042688:	f7ff f99a 	bl	80419c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 804268c:	687b      	ldr	r3, [r7, #4]
 804268e:	681b      	ldr	r3, [r3, #0]
 8042690:	693a      	ldr	r2, [r7, #16]
 8042692:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8042694:	6878      	ldr	r0, [r7, #4]
 8042696:	f000 fcfa 	bl	804308e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 804269a:	687b      	ldr	r3, [r7, #4]
 804269c:	681b      	ldr	r3, [r3, #0]
 804269e:	681a      	ldr	r2, [r3, #0]
 80426a0:	687b      	ldr	r3, [r7, #4]
 80426a2:	681b      	ldr	r3, [r3, #0]
 80426a4:	f022 0208 	bic.w	r2, r2, #8
 80426a8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80426aa:	687b      	ldr	r3, [r7, #4]
 80426ac:	681b      	ldr	r3, [r3, #0]
 80426ae:	681b      	ldr	r3, [r3, #0]
 80426b0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80426b2:	2001      	movs	r0, #1
 80426b4:	f7ff f984 	bl	80419c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80426b8:	687b      	ldr	r3, [r7, #4]
 80426ba:	681b      	ldr	r3, [r3, #0]
 80426bc:	693a      	ldr	r2, [r7, #16]
 80426be:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80426c0:	2300      	movs	r3, #0
 80426c2:	617b      	str	r3, [r7, #20]
 80426c4:	e00e      	b.n	80426e4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80426c6:	687b      	ldr	r3, [r7, #4]
 80426c8:	697a      	ldr	r2, [r7, #20]
 80426ca:	3212      	adds	r2, #18
 80426cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80426d0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80426d2:	68fb      	ldr	r3, [r7, #12]
 80426d4:	685b      	ldr	r3, [r3, #4]
 80426d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80426da:	68fb      	ldr	r3, [r7, #12]
 80426dc:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80426de:	697b      	ldr	r3, [r7, #20]
 80426e0:	3301      	adds	r3, #1
 80426e2:	617b      	str	r3, [r7, #20]
 80426e4:	697b      	ldr	r3, [r7, #20]
 80426e6:	2b03      	cmp	r3, #3
 80426e8:	d9ed      	bls.n	80426c6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80426ea:	687b      	ldr	r3, [r7, #4]
 80426ec:	2200      	movs	r2, #0
 80426ee:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80426f0:	687b      	ldr	r3, [r7, #4]
 80426f2:	2210      	movs	r2, #16
 80426f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80426f8:	2300      	movs	r3, #0
 80426fa:	e000      	b.n	80426fe <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80426fc:	2301      	movs	r3, #1
  }
}
 80426fe:	4618      	mov	r0, r3
 8042700:	3718      	adds	r7, #24
 8042702:	46bd      	mov	sp, r7
 8042704:	bd80      	pop	{r7, pc}
 8042706:	bf00      	nop
 8042708:	fffe5f3e 	.word	0xfffe5f3e

0804270c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 804270c:	b580      	push	{r7, lr}
 804270e:	b082      	sub	sp, #8
 8042710:	af00      	add	r7, sp, #0
 8042712:	6078      	str	r0, [r7, #4]
 8042714:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8042716:	683b      	ldr	r3, [r7, #0]
 8042718:	2b00      	cmp	r3, #0
 804271a:	d109      	bne.n	8042730 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 804271c:	687b      	ldr	r3, [r7, #4]
 804271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042722:	f043 0201 	orr.w	r2, r3, #1
 8042726:	687b      	ldr	r3, [r7, #4]
 8042728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 804272c:	2301      	movs	r3, #1
 804272e:	e045      	b.n	80427bc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8042730:	687b      	ldr	r3, [r7, #4]
 8042732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042736:	2b23      	cmp	r3, #35	; 0x23
 8042738:	d13f      	bne.n	80427ba <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 804273a:	683b      	ldr	r3, [r7, #0]
 804273c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804273e:	687b      	ldr	r3, [r7, #4]
 8042740:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8042742:	2201      	movs	r2, #1
 8042744:	6839      	ldr	r1, [r7, #0]
 8042746:	6878      	ldr	r0, [r7, #4]
 8042748:	f000 ff70 	bl	804362c <ETH_Prepare_Tx_Descriptors>
 804274c:	4603      	mov	r3, r0
 804274e:	2b00      	cmp	r3, #0
 8042750:	d009      	beq.n	8042766 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8042752:	687b      	ldr	r3, [r7, #4]
 8042754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042758:	f043 0202 	orr.w	r2, r3, #2
 804275c:	687b      	ldr	r3, [r7, #4]
 804275e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8042762:	2301      	movs	r3, #1
 8042764:	e02a      	b.n	80427bc <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8042766:	f3bf 8f4f 	dsb	sy
}
 804276a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 804276c:	687b      	ldr	r3, [r7, #4]
 804276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042770:	1c5a      	adds	r2, r3, #1
 8042772:	687b      	ldr	r3, [r7, #4]
 8042774:	629a      	str	r2, [r3, #40]	; 0x28
 8042776:	687b      	ldr	r3, [r7, #4]
 8042778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804277a:	2b03      	cmp	r3, #3
 804277c:	d904      	bls.n	8042788 <HAL_ETH_Transmit_IT+0x7c>
 804277e:	687b      	ldr	r3, [r7, #4]
 8042780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042782:	1f1a      	subs	r2, r3, #4
 8042784:	687b      	ldr	r3, [r7, #4]
 8042786:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8042788:	687b      	ldr	r3, [r7, #4]
 804278a:	681b      	ldr	r3, [r3, #0]
 804278c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042790:	695b      	ldr	r3, [r3, #20]
 8042792:	f003 0304 	and.w	r3, r3, #4
 8042796:	2b00      	cmp	r3, #0
 8042798:	d00d      	beq.n	80427b6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 804279a:	687b      	ldr	r3, [r7, #4]
 804279c:	681b      	ldr	r3, [r3, #0]
 804279e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80427a2:	461a      	mov	r2, r3
 80427a4:	2304      	movs	r3, #4
 80427a6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80427a8:	687b      	ldr	r3, [r7, #4]
 80427aa:	681b      	ldr	r3, [r3, #0]
 80427ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80427b0:	461a      	mov	r2, r3
 80427b2:	2300      	movs	r3, #0
 80427b4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80427b6:	2300      	movs	r3, #0
 80427b8:	e000      	b.n	80427bc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80427ba:	2301      	movs	r3, #1
  }
}
 80427bc:	4618      	mov	r0, r3
 80427be:	3708      	adds	r7, #8
 80427c0:	46bd      	mov	sp, r7
 80427c2:	bd80      	pop	{r7, pc}

080427c4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80427c4:	b580      	push	{r7, lr}
 80427c6:	b088      	sub	sp, #32
 80427c8:	af00      	add	r7, sp, #0
 80427ca:	6078      	str	r0, [r7, #4]
 80427cc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80427ce:	2300      	movs	r3, #0
 80427d0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80427d2:	2300      	movs	r3, #0
 80427d4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80427d6:	683b      	ldr	r3, [r7, #0]
 80427d8:	2b00      	cmp	r3, #0
 80427da:	d109      	bne.n	80427f0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80427dc:	687b      	ldr	r3, [r7, #4]
 80427de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427e2:	f043 0201 	orr.w	r2, r3, #1
 80427e6:	687b      	ldr	r3, [r7, #4]
 80427e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80427ec:	2301      	movs	r3, #1
 80427ee:	e0a8      	b.n	8042942 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80427f0:	687b      	ldr	r3, [r7, #4]
 80427f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80427f6:	2b23      	cmp	r3, #35	; 0x23
 80427f8:	d001      	beq.n	80427fe <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80427fa:	2301      	movs	r3, #1
 80427fc:	e0a1      	b.n	8042942 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80427fe:	687b      	ldr	r3, [r7, #4]
 8042800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042802:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8042804:	687b      	ldr	r3, [r7, #4]
 8042806:	69fa      	ldr	r2, [r7, #28]
 8042808:	3212      	adds	r2, #18
 804280a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804280e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8042810:	687b      	ldr	r3, [r7, #4]
 8042812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042814:	f1c3 0304 	rsb	r3, r3, #4
 8042818:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 804281a:	e06a      	b.n	80428f2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 804281c:	69bb      	ldr	r3, [r7, #24]
 804281e:	681b      	ldr	r3, [r3, #0]
 8042820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042824:	2b00      	cmp	r3, #0
 8042826:	d007      	beq.n	8042838 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8042828:	69bb      	ldr	r3, [r7, #24]
 804282a:	699a      	ldr	r2, [r3, #24]
 804282c:	687b      	ldr	r3, [r7, #4]
 804282e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8042830:	69bb      	ldr	r3, [r7, #24]
 8042832:	69da      	ldr	r2, [r3, #28]
 8042834:	687b      	ldr	r3, [r7, #4]
 8042836:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8042838:	69bb      	ldr	r3, [r7, #24]
 804283a:	681b      	ldr	r3, [r3, #0]
 804283c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042840:	2b00      	cmp	r3, #0
 8042842:	d103      	bne.n	804284c <HAL_ETH_ReadData+0x88>
 8042844:	687b      	ldr	r3, [r7, #4]
 8042846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042848:	2b00      	cmp	r3, #0
 804284a:	d040      	beq.n	80428ce <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 804284c:	69bb      	ldr	r3, [r7, #24]
 804284e:	681b      	ldr	r3, [r3, #0]
 8042850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042854:	2b00      	cmp	r3, #0
 8042856:	d005      	beq.n	8042864 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8042858:	687b      	ldr	r3, [r7, #4]
 804285a:	2200      	movs	r2, #0
 804285c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 804285e:	687b      	ldr	r3, [r7, #4]
 8042860:	2200      	movs	r2, #0
 8042862:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8042864:	687b      	ldr	r3, [r7, #4]
 8042866:	695b      	ldr	r3, [r3, #20]
 8042868:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 804286a:	69bb      	ldr	r3, [r7, #24]
 804286c:	681b      	ldr	r3, [r3, #0]
 804286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042872:	2b00      	cmp	r3, #0
 8042874:	d00c      	beq.n	8042890 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8042876:	69bb      	ldr	r3, [r7, #24]
 8042878:	681b      	ldr	r3, [r3, #0]
 804287a:	0c1b      	lsrs	r3, r3, #16
 804287c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8042880:	3b04      	subs	r3, #4
 8042882:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8042884:	69bb      	ldr	r3, [r7, #24]
 8042886:	681a      	ldr	r2, [r3, #0]
 8042888:	687b      	ldr	r3, [r7, #4]
 804288a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 804288c:	2301      	movs	r3, #1
 804288e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8042890:	69bb      	ldr	r3, [r7, #24]
 8042892:	689a      	ldr	r2, [r3, #8]
 8042894:	69bb      	ldr	r3, [r7, #24]
 8042896:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8042898:	687b      	ldr	r3, [r7, #4]
 804289a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 804289e:	687b      	ldr	r3, [r7, #4]
 80428a0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80428a4:	69bb      	ldr	r3, [r7, #24]
 80428a6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80428a8:	461a      	mov	r2, r3
 80428aa:	693b      	ldr	r3, [r7, #16]
 80428ac:	b29b      	uxth	r3, r3
 80428ae:	f004 fd81 	bl	80473b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80428b6:	1c5a      	adds	r2, r3, #1
 80428b8:	687b      	ldr	r3, [r7, #4]
 80428ba:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80428bc:	687b      	ldr	r3, [r7, #4]
 80428be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80428c0:	693b      	ldr	r3, [r7, #16]
 80428c2:	441a      	add	r2, r3
 80428c4:	687b      	ldr	r3, [r7, #4]
 80428c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80428c8:	69bb      	ldr	r3, [r7, #24]
 80428ca:	2200      	movs	r2, #0
 80428cc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80428ce:	69fb      	ldr	r3, [r7, #28]
 80428d0:	3301      	adds	r3, #1
 80428d2:	61fb      	str	r3, [r7, #28]
 80428d4:	69fb      	ldr	r3, [r7, #28]
 80428d6:	2b03      	cmp	r3, #3
 80428d8:	d902      	bls.n	80428e0 <HAL_ETH_ReadData+0x11c>
 80428da:	69fb      	ldr	r3, [r7, #28]
 80428dc:	3b04      	subs	r3, #4
 80428de:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80428e0:	687b      	ldr	r3, [r7, #4]
 80428e2:	69fa      	ldr	r2, [r7, #28]
 80428e4:	3212      	adds	r2, #18
 80428e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80428ea:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80428ec:	697b      	ldr	r3, [r7, #20]
 80428ee:	3301      	adds	r3, #1
 80428f0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80428f2:	69bb      	ldr	r3, [r7, #24]
 80428f4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80428f6:	2b00      	cmp	r3, #0
 80428f8:	db06      	blt.n	8042908 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80428fa:	697a      	ldr	r2, [r7, #20]
 80428fc:	68bb      	ldr	r3, [r7, #8]
 80428fe:	429a      	cmp	r2, r3
 8042900:	d202      	bcs.n	8042908 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8042902:	7bfb      	ldrb	r3, [r7, #15]
 8042904:	2b00      	cmp	r3, #0
 8042906:	d089      	beq.n	804281c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8042908:	687b      	ldr	r3, [r7, #4]
 804290a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 804290c:	697b      	ldr	r3, [r7, #20]
 804290e:	441a      	add	r2, r3
 8042910:	687b      	ldr	r3, [r7, #4]
 8042912:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8042914:	687b      	ldr	r3, [r7, #4]
 8042916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042918:	2b00      	cmp	r3, #0
 804291a:	d002      	beq.n	8042922 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 804291c:	6878      	ldr	r0, [r7, #4]
 804291e:	f000 f815 	bl	804294c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8042922:	687b      	ldr	r3, [r7, #4]
 8042924:	69fa      	ldr	r2, [r7, #28]
 8042926:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8042928:	7bfb      	ldrb	r3, [r7, #15]
 804292a:	2b01      	cmp	r3, #1
 804292c:	d108      	bne.n	8042940 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 804292e:	687b      	ldr	r3, [r7, #4]
 8042930:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8042932:	683b      	ldr	r3, [r7, #0]
 8042934:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8042936:	687b      	ldr	r3, [r7, #4]
 8042938:	2200      	movs	r2, #0
 804293a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 804293c:	2300      	movs	r3, #0
 804293e:	e000      	b.n	8042942 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8042940:	2301      	movs	r3, #1
}
 8042942:	4618      	mov	r0, r3
 8042944:	3720      	adds	r7, #32
 8042946:	46bd      	mov	sp, r7
 8042948:	bd80      	pop	{r7, pc}
	...

0804294c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 804294c:	b580      	push	{r7, lr}
 804294e:	b088      	sub	sp, #32
 8042950:	af00      	add	r7, sp, #0
 8042952:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8042954:	2300      	movs	r3, #0
 8042956:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8042958:	2301      	movs	r3, #1
 804295a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 804295c:	687b      	ldr	r3, [r7, #4]
 804295e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042960:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8042962:	687b      	ldr	r3, [r7, #4]
 8042964:	69fa      	ldr	r2, [r7, #28]
 8042966:	3212      	adds	r2, #18
 8042968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804296c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 804296e:	687b      	ldr	r3, [r7, #4]
 8042970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042972:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8042974:	e040      	b.n	80429f8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8042976:	697b      	ldr	r3, [r7, #20]
 8042978:	6a1b      	ldr	r3, [r3, #32]
 804297a:	2b00      	cmp	r3, #0
 804297c:	d112      	bne.n	80429a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 804297e:	f107 030c 	add.w	r3, r7, #12
 8042982:	4618      	mov	r0, r3
 8042984:	f004 fce6 	bl	8047354 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8042988:	68fb      	ldr	r3, [r7, #12]
 804298a:	2b00      	cmp	r3, #0
 804298c:	d102      	bne.n	8042994 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 804298e:	2300      	movs	r3, #0
 8042990:	74fb      	strb	r3, [r7, #19]
 8042992:	e007      	b.n	80429a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8042994:	68fb      	ldr	r3, [r7, #12]
 8042996:	461a      	mov	r2, r3
 8042998:	697b      	ldr	r3, [r7, #20]
 804299a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 804299c:	68fb      	ldr	r3, [r7, #12]
 804299e:	461a      	mov	r2, r3
 80429a0:	697b      	ldr	r3, [r7, #20]
 80429a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80429a4:	7cfb      	ldrb	r3, [r7, #19]
 80429a6:	2b00      	cmp	r3, #0
 80429a8:	d026      	beq.n	80429f8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80429aa:	687b      	ldr	r3, [r7, #4]
 80429ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80429ae:	2b00      	cmp	r3, #0
 80429b0:	d103      	bne.n	80429ba <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80429b2:	697b      	ldr	r3, [r7, #20]
 80429b4:	4a1e      	ldr	r2, [pc, #120]	; (8042a30 <ETH_UpdateDescriptor+0xe4>)
 80429b6:	605a      	str	r2, [r3, #4]
 80429b8:	e003      	b.n	80429c2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80429ba:	697b      	ldr	r3, [r7, #20]
 80429bc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80429c0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80429c2:	f3bf 8f5f 	dmb	sy
}
 80429c6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80429c8:	697b      	ldr	r3, [r7, #20]
 80429ca:	681b      	ldr	r3, [r3, #0]
 80429cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80429d0:	697b      	ldr	r3, [r7, #20]
 80429d2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80429d4:	69fb      	ldr	r3, [r7, #28]
 80429d6:	3301      	adds	r3, #1
 80429d8:	61fb      	str	r3, [r7, #28]
 80429da:	69fb      	ldr	r3, [r7, #28]
 80429dc:	2b03      	cmp	r3, #3
 80429de:	d902      	bls.n	80429e6 <ETH_UpdateDescriptor+0x9a>
 80429e0:	69fb      	ldr	r3, [r7, #28]
 80429e2:	3b04      	subs	r3, #4
 80429e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80429e6:	687b      	ldr	r3, [r7, #4]
 80429e8:	69fa      	ldr	r2, [r7, #28]
 80429ea:	3212      	adds	r2, #18
 80429ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80429f0:	617b      	str	r3, [r7, #20]
      desccount--;
 80429f2:	69bb      	ldr	r3, [r7, #24]
 80429f4:	3b01      	subs	r3, #1
 80429f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80429f8:	69bb      	ldr	r3, [r7, #24]
 80429fa:	2b00      	cmp	r3, #0
 80429fc:	d002      	beq.n	8042a04 <ETH_UpdateDescriptor+0xb8>
 80429fe:	7cfb      	ldrb	r3, [r7, #19]
 8042a00:	2b00      	cmp	r3, #0
 8042a02:	d1b8      	bne.n	8042976 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042a08:	69ba      	ldr	r2, [r7, #24]
 8042a0a:	429a      	cmp	r2, r3
 8042a0c:	d00c      	beq.n	8042a28 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8042a0e:	687b      	ldr	r3, [r7, #4]
 8042a10:	681b      	ldr	r3, [r3, #0]
 8042a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042a16:	461a      	mov	r2, r3
 8042a18:	2300      	movs	r3, #0
 8042a1a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8042a1c:	687b      	ldr	r3, [r7, #4]
 8042a1e:	69fa      	ldr	r2, [r7, #28]
 8042a20:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	69ba      	ldr	r2, [r7, #24]
 8042a26:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8042a28:	bf00      	nop
 8042a2a:	3720      	adds	r7, #32
 8042a2c:	46bd      	mov	sp, r7
 8042a2e:	bd80      	pop	{r7, pc}
 8042a30:	80004600 	.word	0x80004600

08042a34 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8042a34:	b580      	push	{r7, lr}
 8042a36:	b086      	sub	sp, #24
 8042a38:	af00      	add	r7, sp, #0
 8042a3a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8042a3c:	687b      	ldr	r3, [r7, #4]
 8042a3e:	3318      	adds	r3, #24
 8042a40:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8042a42:	68bb      	ldr	r3, [r7, #8]
 8042a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042a46:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8042a48:	68bb      	ldr	r3, [r7, #8]
 8042a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042a4c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8042a4e:	2301      	movs	r3, #1
 8042a50:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8042a52:	e03f      	b.n	8042ad4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8042a54:	2301      	movs	r3, #1
 8042a56:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8042a58:	697b      	ldr	r3, [r7, #20]
 8042a5a:	3b01      	subs	r3, #1
 8042a5c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8042a5e:	68ba      	ldr	r2, [r7, #8]
 8042a60:	693b      	ldr	r3, [r7, #16]
 8042a62:	3304      	adds	r3, #4
 8042a64:	009b      	lsls	r3, r3, #2
 8042a66:	4413      	add	r3, r2
 8042a68:	685b      	ldr	r3, [r3, #4]
 8042a6a:	2b00      	cmp	r3, #0
 8042a6c:	d106      	bne.n	8042a7c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8042a6e:	693b      	ldr	r3, [r7, #16]
 8042a70:	3301      	adds	r3, #1
 8042a72:	f003 0303 	and.w	r3, r3, #3
 8042a76:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8042a78:	2300      	movs	r3, #0
 8042a7a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8042a7c:	7bbb      	ldrb	r3, [r7, #14]
 8042a7e:	2b00      	cmp	r3, #0
 8042a80:	d028      	beq.n	8042ad4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8042a82:	687b      	ldr	r3, [r7, #4]
 8042a84:	68d9      	ldr	r1, [r3, #12]
 8042a86:	693a      	ldr	r2, [r7, #16]
 8042a88:	4613      	mov	r3, r2
 8042a8a:	009b      	lsls	r3, r3, #2
 8042a8c:	4413      	add	r3, r2
 8042a8e:	00db      	lsls	r3, r3, #3
 8042a90:	440b      	add	r3, r1
 8042a92:	681b      	ldr	r3, [r3, #0]
 8042a94:	2b00      	cmp	r3, #0
 8042a96:	db1b      	blt.n	8042ad0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8042a98:	68ba      	ldr	r2, [r7, #8]
 8042a9a:	693b      	ldr	r3, [r7, #16]
 8042a9c:	3304      	adds	r3, #4
 8042a9e:	009b      	lsls	r3, r3, #2
 8042aa0:	4413      	add	r3, r2
 8042aa2:	685b      	ldr	r3, [r3, #4]
 8042aa4:	4618      	mov	r0, r3
 8042aa6:	f004 fcc7 	bl	8047438 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8042aaa:	68ba      	ldr	r2, [r7, #8]
 8042aac:	693b      	ldr	r3, [r7, #16]
 8042aae:	3304      	adds	r3, #4
 8042ab0:	009b      	lsls	r3, r3, #2
 8042ab2:	4413      	add	r3, r2
 8042ab4:	2200      	movs	r2, #0
 8042ab6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8042ab8:	693b      	ldr	r3, [r7, #16]
 8042aba:	3301      	adds	r3, #1
 8042abc:	f003 0303 	and.w	r3, r3, #3
 8042ac0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8042ac2:	68bb      	ldr	r3, [r7, #8]
 8042ac4:	697a      	ldr	r2, [r7, #20]
 8042ac6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8042ac8:	68bb      	ldr	r3, [r7, #8]
 8042aca:	693a      	ldr	r2, [r7, #16]
 8042acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8042ace:	e001      	b.n	8042ad4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8042ad0:	2300      	movs	r3, #0
 8042ad2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8042ad4:	697b      	ldr	r3, [r7, #20]
 8042ad6:	2b00      	cmp	r3, #0
 8042ad8:	d002      	beq.n	8042ae0 <HAL_ETH_ReleaseTxPacket+0xac>
 8042ada:	7bfb      	ldrb	r3, [r7, #15]
 8042adc:	2b00      	cmp	r3, #0
 8042ade:	d1b9      	bne.n	8042a54 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8042ae0:	2300      	movs	r3, #0
}
 8042ae2:	4618      	mov	r0, r3
 8042ae4:	3718      	adds	r7, #24
 8042ae6:	46bd      	mov	sp, r7
 8042ae8:	bd80      	pop	{r7, pc}
	...

08042aec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8042aec:	b580      	push	{r7, lr}
 8042aee:	b082      	sub	sp, #8
 8042af0:	af00      	add	r7, sp, #0
 8042af2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8042af4:	687b      	ldr	r3, [r7, #4]
 8042af6:	681b      	ldr	r3, [r3, #0]
 8042af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042afc:	695b      	ldr	r3, [r3, #20]
 8042afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042b02:	2b40      	cmp	r3, #64	; 0x40
 8042b04:	d112      	bne.n	8042b2c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	681b      	ldr	r3, [r3, #0]
 8042b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b0e:	69db      	ldr	r3, [r3, #28]
 8042b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042b14:	2b40      	cmp	r3, #64	; 0x40
 8042b16:	d109      	bne.n	8042b2c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8042b18:	687b      	ldr	r3, [r7, #4]
 8042b1a:	681b      	ldr	r3, [r3, #0]
 8042b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b20:	461a      	mov	r2, r3
 8042b22:	4b50      	ldr	r3, [pc, #320]	; (8042c64 <HAL_ETH_IRQHandler+0x178>)
 8042b24:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8042b26:	6878      	ldr	r0, [r7, #4]
 8042b28:	f003 ffa8 	bl	8046a7c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8042b2c:	687b      	ldr	r3, [r7, #4]
 8042b2e:	681b      	ldr	r3, [r3, #0]
 8042b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b34:	695b      	ldr	r3, [r3, #20]
 8042b36:	f003 0301 	and.w	r3, r3, #1
 8042b3a:	2b01      	cmp	r3, #1
 8042b3c:	d113      	bne.n	8042b66 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8042b3e:	687b      	ldr	r3, [r7, #4]
 8042b40:	681b      	ldr	r3, [r3, #0]
 8042b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b46:	69db      	ldr	r3, [r3, #28]
 8042b48:	f003 0301 	and.w	r3, r3, #1
 8042b4c:	2b01      	cmp	r3, #1
 8042b4e:	d10a      	bne.n	8042b66 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8042b50:	687b      	ldr	r3, [r7, #4]
 8042b52:	681b      	ldr	r3, [r3, #0]
 8042b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b58:	461a      	mov	r2, r3
 8042b5a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8042b5e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8042b60:	6878      	ldr	r0, [r7, #4]
 8042b62:	f003 ff9b 	bl	8046a9c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8042b66:	687b      	ldr	r3, [r7, #4]
 8042b68:	681b      	ldr	r3, [r3, #0]
 8042b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b6e:	695b      	ldr	r3, [r3, #20]
 8042b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8042b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042b78:	d14c      	bne.n	8042c14 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8042b7a:	687b      	ldr	r3, [r7, #4]
 8042b7c:	681b      	ldr	r3, [r3, #0]
 8042b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042b82:	69db      	ldr	r3, [r3, #28]
 8042b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8042b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042b8c:	d142      	bne.n	8042c14 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8042b8e:	687b      	ldr	r3, [r7, #4]
 8042b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b94:	f043 0208 	orr.w	r2, r3, #8
 8042b98:	687b      	ldr	r3, [r7, #4]
 8042b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8042b9e:	687b      	ldr	r3, [r7, #4]
 8042ba0:	681b      	ldr	r3, [r3, #0]
 8042ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042ba6:	695b      	ldr	r3, [r3, #20]
 8042ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042bb0:	d11a      	bne.n	8042be8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8042bb2:	687b      	ldr	r3, [r7, #4]
 8042bb4:	681b      	ldr	r3, [r3, #0]
 8042bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042bba:	695a      	ldr	r2, [r3, #20]
 8042bbc:	4b2a      	ldr	r3, [pc, #168]	; (8042c68 <HAL_ETH_IRQHandler+0x17c>)
 8042bbe:	4013      	ands	r3, r2
 8042bc0:	687a      	ldr	r2, [r7, #4]
 8042bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8042bc6:	687b      	ldr	r3, [r7, #4]
 8042bc8:	681b      	ldr	r3, [r3, #0]
 8042bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042bce:	69db      	ldr	r3, [r3, #28]
 8042bd0:	687a      	ldr	r2, [r7, #4]
 8042bd2:	6812      	ldr	r2, [r2, #0]
 8042bd4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8042bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8042bdc:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8042bde:	687b      	ldr	r3, [r7, #4]
 8042be0:	22e0      	movs	r2, #224	; 0xe0
 8042be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8042be6:	e012      	b.n	8042c0e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8042be8:	687b      	ldr	r3, [r7, #4]
 8042bea:	681b      	ldr	r3, [r3, #0]
 8042bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042bf0:	695a      	ldr	r2, [r3, #20]
 8042bf2:	f248 6380 	movw	r3, #34432	; 0x8680
 8042bf6:	4013      	ands	r3, r2
 8042bf8:	687a      	ldr	r2, [r7, #4]
 8042bfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	681b      	ldr	r3, [r3, #0]
 8042c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042c06:	461a      	mov	r2, r3
 8042c08:	f248 6380 	movw	r3, #34432	; 0x8680
 8042c0c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8042c0e:	6878      	ldr	r0, [r7, #4]
 8042c10:	f003 ff54 	bl	8046abc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	681b      	ldr	r3, [r3, #0]
 8042c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042c1a:	f003 0308 	and.w	r3, r3, #8
 8042c1e:	2b08      	cmp	r3, #8
 8042c20:	d10e      	bne.n	8042c40 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8042c22:	687b      	ldr	r3, [r7, #4]
 8042c24:	681b      	ldr	r3, [r3, #0]
 8042c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042c28:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8042c2c:	687b      	ldr	r3, [r7, #4]
 8042c2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8042c32:	6878      	ldr	r0, [r7, #4]
 8042c34:	f000 f81c 	bl	8042c70 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8042c38:	687b      	ldr	r3, [r7, #4]
 8042c3a:	2200      	movs	r2, #0
 8042c3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8042c40:	4b0a      	ldr	r3, [pc, #40]	; (8042c6c <HAL_ETH_IRQHandler+0x180>)
 8042c42:	695b      	ldr	r3, [r3, #20]
 8042c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042c48:	2b00      	cmp	r3, #0
 8042c4a:	d006      	beq.n	8042c5a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8042c4c:	4b07      	ldr	r3, [pc, #28]	; (8042c6c <HAL_ETH_IRQHandler+0x180>)
 8042c4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8042c52:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8042c54:	6878      	ldr	r0, [r7, #4]
 8042c56:	f000 f815 	bl	8042c84 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8042c5a:	bf00      	nop
 8042c5c:	3708      	adds	r7, #8
 8042c5e:	46bd      	mov	sp, r7
 8042c60:	bd80      	pop	{r7, pc}
 8042c62:	bf00      	nop
 8042c64:	00010040 	.word	0x00010040
 8042c68:	007e2000 	.word	0x007e2000
 8042c6c:	40013c00 	.word	0x40013c00

08042c70 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8042c70:	b480      	push	{r7}
 8042c72:	b083      	sub	sp, #12
 8042c74:	af00      	add	r7, sp, #0
 8042c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8042c78:	bf00      	nop
 8042c7a:	370c      	adds	r7, #12
 8042c7c:	46bd      	mov	sp, r7
 8042c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c82:	4770      	bx	lr

08042c84 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8042c84:	b480      	push	{r7}
 8042c86:	b083      	sub	sp, #12
 8042c88:	af00      	add	r7, sp, #0
 8042c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8042c8c:	bf00      	nop
 8042c8e:	370c      	adds	r7, #12
 8042c90:	46bd      	mov	sp, r7
 8042c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c96:	4770      	bx	lr

08042c98 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8042c98:	b580      	push	{r7, lr}
 8042c9a:	b086      	sub	sp, #24
 8042c9c:	af00      	add	r7, sp, #0
 8042c9e:	60f8      	str	r0, [r7, #12]
 8042ca0:	60b9      	str	r1, [r7, #8]
 8042ca2:	607a      	str	r2, [r7, #4]
 8042ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8042ca6:	68fb      	ldr	r3, [r7, #12]
 8042ca8:	681b      	ldr	r3, [r3, #0]
 8042caa:	691b      	ldr	r3, [r3, #16]
 8042cac:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8042cae:	697b      	ldr	r3, [r7, #20]
 8042cb0:	f003 031c 	and.w	r3, r3, #28
 8042cb4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8042cb6:	68bb      	ldr	r3, [r7, #8]
 8042cb8:	02db      	lsls	r3, r3, #11
 8042cba:	b29b      	uxth	r3, r3
 8042cbc:	697a      	ldr	r2, [r7, #20]
 8042cbe:	4313      	orrs	r3, r2
 8042cc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8042cc2:	687b      	ldr	r3, [r7, #4]
 8042cc4:	019b      	lsls	r3, r3, #6
 8042cc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8042cca:	697a      	ldr	r2, [r7, #20]
 8042ccc:	4313      	orrs	r3, r2
 8042cce:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8042cd0:	697b      	ldr	r3, [r7, #20]
 8042cd2:	f023 0302 	bic.w	r3, r3, #2
 8042cd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8042cd8:	697b      	ldr	r3, [r7, #20]
 8042cda:	f043 0301 	orr.w	r3, r3, #1
 8042cde:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8042ce0:	68fb      	ldr	r3, [r7, #12]
 8042ce2:	681b      	ldr	r3, [r3, #0]
 8042ce4:	697a      	ldr	r2, [r7, #20]
 8042ce6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8042ce8:	f7fe fe5e 	bl	80419a8 <HAL_GetTick>
 8042cec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8042cee:	e00d      	b.n	8042d0c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8042cf0:	f7fe fe5a 	bl	80419a8 <HAL_GetTick>
 8042cf4:	4602      	mov	r2, r0
 8042cf6:	693b      	ldr	r3, [r7, #16]
 8042cf8:	1ad3      	subs	r3, r2, r3
 8042cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042cfe:	d301      	bcc.n	8042d04 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8042d00:	2301      	movs	r3, #1
 8042d02:	e010      	b.n	8042d26 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8042d04:	68fb      	ldr	r3, [r7, #12]
 8042d06:	681b      	ldr	r3, [r3, #0]
 8042d08:	691b      	ldr	r3, [r3, #16]
 8042d0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8042d0c:	697b      	ldr	r3, [r7, #20]
 8042d0e:	f003 0301 	and.w	r3, r3, #1
 8042d12:	2b00      	cmp	r3, #0
 8042d14:	d1ec      	bne.n	8042cf0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8042d16:	68fb      	ldr	r3, [r7, #12]
 8042d18:	681b      	ldr	r3, [r3, #0]
 8042d1a:	695b      	ldr	r3, [r3, #20]
 8042d1c:	b29b      	uxth	r3, r3
 8042d1e:	461a      	mov	r2, r3
 8042d20:	683b      	ldr	r3, [r7, #0]
 8042d22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8042d24:	2300      	movs	r3, #0
}
 8042d26:	4618      	mov	r0, r3
 8042d28:	3718      	adds	r7, #24
 8042d2a:	46bd      	mov	sp, r7
 8042d2c:	bd80      	pop	{r7, pc}

08042d2e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8042d2e:	b580      	push	{r7, lr}
 8042d30:	b086      	sub	sp, #24
 8042d32:	af00      	add	r7, sp, #0
 8042d34:	60f8      	str	r0, [r7, #12]
 8042d36:	60b9      	str	r1, [r7, #8]
 8042d38:	607a      	str	r2, [r7, #4]
 8042d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8042d3c:	68fb      	ldr	r3, [r7, #12]
 8042d3e:	681b      	ldr	r3, [r3, #0]
 8042d40:	691b      	ldr	r3, [r3, #16]
 8042d42:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8042d44:	697b      	ldr	r3, [r7, #20]
 8042d46:	f003 031c 	and.w	r3, r3, #28
 8042d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8042d4c:	68bb      	ldr	r3, [r7, #8]
 8042d4e:	02db      	lsls	r3, r3, #11
 8042d50:	b29b      	uxth	r3, r3
 8042d52:	697a      	ldr	r2, [r7, #20]
 8042d54:	4313      	orrs	r3, r2
 8042d56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8042d58:	687b      	ldr	r3, [r7, #4]
 8042d5a:	019b      	lsls	r3, r3, #6
 8042d5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8042d60:	697a      	ldr	r2, [r7, #20]
 8042d62:	4313      	orrs	r3, r2
 8042d64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8042d66:	697b      	ldr	r3, [r7, #20]
 8042d68:	f043 0302 	orr.w	r3, r3, #2
 8042d6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8042d6e:	697b      	ldr	r3, [r7, #20]
 8042d70:	f043 0301 	orr.w	r3, r3, #1
 8042d74:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8042d76:	683b      	ldr	r3, [r7, #0]
 8042d78:	b29a      	uxth	r2, r3
 8042d7a:	68fb      	ldr	r3, [r7, #12]
 8042d7c:	681b      	ldr	r3, [r3, #0]
 8042d7e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8042d80:	68fb      	ldr	r3, [r7, #12]
 8042d82:	681b      	ldr	r3, [r3, #0]
 8042d84:	697a      	ldr	r2, [r7, #20]
 8042d86:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042d88:	f7fe fe0e 	bl	80419a8 <HAL_GetTick>
 8042d8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8042d8e:	e00d      	b.n	8042dac <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8042d90:	f7fe fe0a 	bl	80419a8 <HAL_GetTick>
 8042d94:	4602      	mov	r2, r0
 8042d96:	693b      	ldr	r3, [r7, #16]
 8042d98:	1ad3      	subs	r3, r2, r3
 8042d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042d9e:	d301      	bcc.n	8042da4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8042da0:	2301      	movs	r3, #1
 8042da2:	e009      	b.n	8042db8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8042da4:	68fb      	ldr	r3, [r7, #12]
 8042da6:	681b      	ldr	r3, [r3, #0]
 8042da8:	691b      	ldr	r3, [r3, #16]
 8042daa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8042dac:	697b      	ldr	r3, [r7, #20]
 8042dae:	f003 0301 	and.w	r3, r3, #1
 8042db2:	2b00      	cmp	r3, #0
 8042db4:	d1ec      	bne.n	8042d90 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8042db6:	2300      	movs	r3, #0
}
 8042db8:	4618      	mov	r0, r3
 8042dba:	3718      	adds	r7, #24
 8042dbc:	46bd      	mov	sp, r7
 8042dbe:	bd80      	pop	{r7, pc}

08042dc0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8042dc0:	b480      	push	{r7}
 8042dc2:	b083      	sub	sp, #12
 8042dc4:	af00      	add	r7, sp, #0
 8042dc6:	6078      	str	r0, [r7, #4]
 8042dc8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8042dca:	683b      	ldr	r3, [r7, #0]
 8042dcc:	2b00      	cmp	r3, #0
 8042dce:	d101      	bne.n	8042dd4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8042dd0:	2301      	movs	r3, #1
 8042dd2:	e0d9      	b.n	8042f88 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8042dd4:	687b      	ldr	r3, [r7, #4]
 8042dd6:	681b      	ldr	r3, [r3, #0]
 8042dd8:	681b      	ldr	r3, [r3, #0]
 8042dda:	f003 0310 	and.w	r3, r3, #16
 8042dde:	2b00      	cmp	r3, #0
 8042de0:	bf14      	ite	ne
 8042de2:	2301      	movne	r3, #1
 8042de4:	2300      	moveq	r3, #0
 8042de6:	b2db      	uxtb	r3, r3
 8042de8:	461a      	mov	r2, r3
 8042dea:	683b      	ldr	r3, [r7, #0]
 8042dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8042df0:	687b      	ldr	r3, [r7, #4]
 8042df2:	681b      	ldr	r3, [r3, #0]
 8042df4:	681b      	ldr	r3, [r3, #0]
 8042df6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8042dfa:	683b      	ldr	r3, [r7, #0]
 8042dfc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8042dfe:	687b      	ldr	r3, [r7, #4]
 8042e00:	681b      	ldr	r3, [r3, #0]
 8042e02:	681b      	ldr	r3, [r3, #0]
 8042e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042e08:	2b00      	cmp	r3, #0
 8042e0a:	bf0c      	ite	eq
 8042e0c:	2301      	moveq	r3, #1
 8042e0e:	2300      	movne	r3, #0
 8042e10:	b2db      	uxtb	r3, r3
 8042e12:	461a      	mov	r2, r3
 8042e14:	683b      	ldr	r3, [r7, #0]
 8042e16:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8042e1a:	687b      	ldr	r3, [r7, #4]
 8042e1c:	681b      	ldr	r3, [r3, #0]
 8042e1e:	681b      	ldr	r3, [r3, #0]
 8042e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8042e24:	2b00      	cmp	r3, #0
 8042e26:	bf14      	ite	ne
 8042e28:	2301      	movne	r3, #1
 8042e2a:	2300      	moveq	r3, #0
 8042e2c:	b2db      	uxtb	r3, r3
 8042e2e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8042e30:	683b      	ldr	r3, [r7, #0]
 8042e32:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8042e34:	687b      	ldr	r3, [r7, #4]
 8042e36:	681b      	ldr	r3, [r3, #0]
 8042e38:	681b      	ldr	r3, [r3, #0]
 8042e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042e3e:	2b00      	cmp	r3, #0
 8042e40:	bf0c      	ite	eq
 8042e42:	2301      	moveq	r3, #1
 8042e44:	2300      	movne	r3, #0
 8042e46:	b2db      	uxtb	r3, r3
 8042e48:	461a      	mov	r2, r3
 8042e4a:	683b      	ldr	r3, [r7, #0]
 8042e4c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8042e4e:	687b      	ldr	r3, [r7, #4]
 8042e50:	681b      	ldr	r3, [r3, #0]
 8042e52:	681b      	ldr	r3, [r3, #0]
 8042e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042e58:	2b00      	cmp	r3, #0
 8042e5a:	bf14      	ite	ne
 8042e5c:	2301      	movne	r3, #1
 8042e5e:	2300      	moveq	r3, #0
 8042e60:	b2db      	uxtb	r3, r3
 8042e62:	461a      	mov	r2, r3
 8042e64:	683b      	ldr	r3, [r7, #0]
 8042e66:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8042e68:	687b      	ldr	r3, [r7, #4]
 8042e6a:	681b      	ldr	r3, [r3, #0]
 8042e6c:	681b      	ldr	r3, [r3, #0]
 8042e6e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8042e72:	683b      	ldr	r3, [r7, #0]
 8042e74:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	681b      	ldr	r3, [r3, #0]
 8042e7c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8042e80:	683b      	ldr	r3, [r7, #0]
 8042e82:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8042e84:	687b      	ldr	r3, [r7, #4]
 8042e86:	681b      	ldr	r3, [r3, #0]
 8042e88:	681b      	ldr	r3, [r3, #0]
 8042e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042e8e:	2b00      	cmp	r3, #0
 8042e90:	bf0c      	ite	eq
 8042e92:	2301      	moveq	r3, #1
 8042e94:	2300      	movne	r3, #0
 8042e96:	b2db      	uxtb	r3, r3
 8042e98:	461a      	mov	r2, r3
 8042e9a:	683b      	ldr	r3, [r7, #0]
 8042e9c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8042e9e:	687b      	ldr	r3, [r7, #4]
 8042ea0:	681b      	ldr	r3, [r3, #0]
 8042ea2:	681b      	ldr	r3, [r3, #0]
 8042ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042ea8:	2b00      	cmp	r3, #0
 8042eaa:	bf0c      	ite	eq
 8042eac:	2301      	moveq	r3, #1
 8042eae:	2300      	movne	r3, #0
 8042eb0:	b2db      	uxtb	r3, r3
 8042eb2:	461a      	mov	r2, r3
 8042eb4:	683b      	ldr	r3, [r7, #0]
 8042eb6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8042eb8:	687b      	ldr	r3, [r7, #4]
 8042eba:	681b      	ldr	r3, [r3, #0]
 8042ebc:	681b      	ldr	r3, [r3, #0]
 8042ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042ec2:	2b00      	cmp	r3, #0
 8042ec4:	bf14      	ite	ne
 8042ec6:	2301      	movne	r3, #1
 8042ec8:	2300      	moveq	r3, #0
 8042eca:	b2db      	uxtb	r3, r3
 8042ecc:	461a      	mov	r2, r3
 8042ece:	683b      	ldr	r3, [r7, #0]
 8042ed0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8042ed2:	687b      	ldr	r3, [r7, #4]
 8042ed4:	681b      	ldr	r3, [r3, #0]
 8042ed6:	681b      	ldr	r3, [r3, #0]
 8042ed8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8042edc:	683b      	ldr	r3, [r7, #0]
 8042ede:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8042ee0:	687b      	ldr	r3, [r7, #4]
 8042ee2:	681b      	ldr	r3, [r3, #0]
 8042ee4:	681b      	ldr	r3, [r3, #0]
 8042ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042eea:	2b00      	cmp	r3, #0
 8042eec:	bf14      	ite	ne
 8042eee:	2301      	movne	r3, #1
 8042ef0:	2300      	moveq	r3, #0
 8042ef2:	b2db      	uxtb	r3, r3
 8042ef4:	461a      	mov	r2, r3
 8042ef6:	683b      	ldr	r3, [r7, #0]
 8042ef8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8042efa:	687b      	ldr	r3, [r7, #4]
 8042efc:	681b      	ldr	r3, [r3, #0]
 8042efe:	699b      	ldr	r3, [r3, #24]
 8042f00:	f003 0302 	and.w	r3, r3, #2
 8042f04:	2b00      	cmp	r3, #0
 8042f06:	bf14      	ite	ne
 8042f08:	2301      	movne	r3, #1
 8042f0a:	2300      	moveq	r3, #0
 8042f0c:	b2db      	uxtb	r3, r3
 8042f0e:	461a      	mov	r2, r3
 8042f10:	683b      	ldr	r3, [r7, #0]
 8042f12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8042f16:	687b      	ldr	r3, [r7, #4]
 8042f18:	681b      	ldr	r3, [r3, #0]
 8042f1a:	699b      	ldr	r3, [r3, #24]
 8042f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042f20:	2b00      	cmp	r3, #0
 8042f22:	bf0c      	ite	eq
 8042f24:	2301      	moveq	r3, #1
 8042f26:	2300      	movne	r3, #0
 8042f28:	b2db      	uxtb	r3, r3
 8042f2a:	461a      	mov	r2, r3
 8042f2c:	683b      	ldr	r3, [r7, #0]
 8042f2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8042f32:	687b      	ldr	r3, [r7, #4]
 8042f34:	681b      	ldr	r3, [r3, #0]
 8042f36:	699b      	ldr	r3, [r3, #24]
 8042f38:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8042f3c:	683b      	ldr	r3, [r7, #0]
 8042f3e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8042f40:	687b      	ldr	r3, [r7, #4]
 8042f42:	681b      	ldr	r3, [r3, #0]
 8042f44:	699b      	ldr	r3, [r3, #24]
 8042f46:	0c1b      	lsrs	r3, r3, #16
 8042f48:	b29a      	uxth	r2, r3
 8042f4a:	683b      	ldr	r3, [r7, #0]
 8042f4c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8042f4e:	687b      	ldr	r3, [r7, #4]
 8042f50:	681b      	ldr	r3, [r3, #0]
 8042f52:	699b      	ldr	r3, [r3, #24]
 8042f54:	f003 0304 	and.w	r3, r3, #4
 8042f58:	2b00      	cmp	r3, #0
 8042f5a:	bf14      	ite	ne
 8042f5c:	2301      	movne	r3, #1
 8042f5e:	2300      	moveq	r3, #0
 8042f60:	b2db      	uxtb	r3, r3
 8042f62:	461a      	mov	r2, r3
 8042f64:	683b      	ldr	r3, [r7, #0]
 8042f66:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8042f6a:	687b      	ldr	r3, [r7, #4]
 8042f6c:	681b      	ldr	r3, [r3, #0]
 8042f6e:	699b      	ldr	r3, [r3, #24]
 8042f70:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8042f74:	2b00      	cmp	r3, #0
 8042f76:	bf14      	ite	ne
 8042f78:	2301      	movne	r3, #1
 8042f7a:	2300      	moveq	r3, #0
 8042f7c:	b2db      	uxtb	r3, r3
 8042f7e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8042f80:	683b      	ldr	r3, [r7, #0]
 8042f82:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8042f86:	2300      	movs	r3, #0
}
 8042f88:	4618      	mov	r0, r3
 8042f8a:	370c      	adds	r7, #12
 8042f8c:	46bd      	mov	sp, r7
 8042f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f92:	4770      	bx	lr

08042f94 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8042f94:	b580      	push	{r7, lr}
 8042f96:	b082      	sub	sp, #8
 8042f98:	af00      	add	r7, sp, #0
 8042f9a:	6078      	str	r0, [r7, #4]
 8042f9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8042f9e:	683b      	ldr	r3, [r7, #0]
 8042fa0:	2b00      	cmp	r3, #0
 8042fa2:	d101      	bne.n	8042fa8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8042fa4:	2301      	movs	r3, #1
 8042fa6:	e00b      	b.n	8042fc0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8042fa8:	687b      	ldr	r3, [r7, #4]
 8042faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042fae:	2b10      	cmp	r3, #16
 8042fb0:	d105      	bne.n	8042fbe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8042fb2:	6839      	ldr	r1, [r7, #0]
 8042fb4:	6878      	ldr	r0, [r7, #4]
 8042fb6:	f000 f88f 	bl	80430d8 <ETH_SetMACConfig>

    return HAL_OK;
 8042fba:	2300      	movs	r3, #0
 8042fbc:	e000      	b.n	8042fc0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8042fbe:	2301      	movs	r3, #1
  }
}
 8042fc0:	4618      	mov	r0, r3
 8042fc2:	3708      	adds	r7, #8
 8042fc4:	46bd      	mov	sp, r7
 8042fc6:	bd80      	pop	{r7, pc}

08042fc8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8042fc8:	b580      	push	{r7, lr}
 8042fca:	b084      	sub	sp, #16
 8042fcc:	af00      	add	r7, sp, #0
 8042fce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8042fd0:	687b      	ldr	r3, [r7, #4]
 8042fd2:	681b      	ldr	r3, [r3, #0]
 8042fd4:	691b      	ldr	r3, [r3, #16]
 8042fd6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8042fd8:	68fb      	ldr	r3, [r7, #12]
 8042fda:	f023 031c 	bic.w	r3, r3, #28
 8042fde:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8042fe0:	f001 fb0e 	bl	8044600 <HAL_RCC_GetHCLKFreq>
 8042fe4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8042fe6:	68bb      	ldr	r3, [r7, #8]
 8042fe8:	4a1d      	ldr	r2, [pc, #116]	; (8043060 <HAL_ETH_SetMDIOClockRange+0x98>)
 8042fea:	4293      	cmp	r3, r2
 8042fec:	d908      	bls.n	8043000 <HAL_ETH_SetMDIOClockRange+0x38>
 8042fee:	68bb      	ldr	r3, [r7, #8]
 8042ff0:	4a1c      	ldr	r2, [pc, #112]	; (8043064 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8042ff2:	4293      	cmp	r3, r2
 8042ff4:	d804      	bhi.n	8043000 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8042ff6:	68fb      	ldr	r3, [r7, #12]
 8042ff8:	f043 0308 	orr.w	r3, r3, #8
 8042ffc:	60fb      	str	r3, [r7, #12]
 8042ffe:	e027      	b.n	8043050 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8043000:	68bb      	ldr	r3, [r7, #8]
 8043002:	4a18      	ldr	r2, [pc, #96]	; (8043064 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8043004:	4293      	cmp	r3, r2
 8043006:	d908      	bls.n	804301a <HAL_ETH_SetMDIOClockRange+0x52>
 8043008:	68bb      	ldr	r3, [r7, #8]
 804300a:	4a17      	ldr	r2, [pc, #92]	; (8043068 <HAL_ETH_SetMDIOClockRange+0xa0>)
 804300c:	4293      	cmp	r3, r2
 804300e:	d204      	bcs.n	804301a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8043010:	68fb      	ldr	r3, [r7, #12]
 8043012:	f043 030c 	orr.w	r3, r3, #12
 8043016:	60fb      	str	r3, [r7, #12]
 8043018:	e01a      	b.n	8043050 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 804301a:	68bb      	ldr	r3, [r7, #8]
 804301c:	4a12      	ldr	r2, [pc, #72]	; (8043068 <HAL_ETH_SetMDIOClockRange+0xa0>)
 804301e:	4293      	cmp	r3, r2
 8043020:	d303      	bcc.n	804302a <HAL_ETH_SetMDIOClockRange+0x62>
 8043022:	68bb      	ldr	r3, [r7, #8]
 8043024:	4a11      	ldr	r2, [pc, #68]	; (804306c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8043026:	4293      	cmp	r3, r2
 8043028:	d911      	bls.n	804304e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 804302a:	68bb      	ldr	r3, [r7, #8]
 804302c:	4a0f      	ldr	r2, [pc, #60]	; (804306c <HAL_ETH_SetMDIOClockRange+0xa4>)
 804302e:	4293      	cmp	r3, r2
 8043030:	d908      	bls.n	8043044 <HAL_ETH_SetMDIOClockRange+0x7c>
 8043032:	68bb      	ldr	r3, [r7, #8]
 8043034:	4a0e      	ldr	r2, [pc, #56]	; (8043070 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8043036:	4293      	cmp	r3, r2
 8043038:	d804      	bhi.n	8043044 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 804303a:	68fb      	ldr	r3, [r7, #12]
 804303c:	f043 0304 	orr.w	r3, r3, #4
 8043040:	60fb      	str	r3, [r7, #12]
 8043042:	e005      	b.n	8043050 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8043044:	68fb      	ldr	r3, [r7, #12]
 8043046:	f043 0310 	orr.w	r3, r3, #16
 804304a:	60fb      	str	r3, [r7, #12]
 804304c:	e000      	b.n	8043050 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 804304e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8043050:	687b      	ldr	r3, [r7, #4]
 8043052:	681b      	ldr	r3, [r3, #0]
 8043054:	68fa      	ldr	r2, [r7, #12]
 8043056:	611a      	str	r2, [r3, #16]
}
 8043058:	bf00      	nop
 804305a:	3710      	adds	r7, #16
 804305c:	46bd      	mov	sp, r7
 804305e:	bd80      	pop	{r7, pc}
 8043060:	01312cff 	.word	0x01312cff
 8043064:	02160ebf 	.word	0x02160ebf
 8043068:	03938700 	.word	0x03938700
 804306c:	05f5e0ff 	.word	0x05f5e0ff
 8043070:	08f0d17f 	.word	0x08f0d17f

08043074 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8043074:	b480      	push	{r7}
 8043076:	b083      	sub	sp, #12
 8043078:	af00      	add	r7, sp, #0
 804307a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 804307c:	687b      	ldr	r3, [r7, #4]
 804307e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8043082:	4618      	mov	r0, r3
 8043084:	370c      	adds	r7, #12
 8043086:	46bd      	mov	sp, r7
 8043088:	f85d 7b04 	ldr.w	r7, [sp], #4
 804308c:	4770      	bx	lr

0804308e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 804308e:	b580      	push	{r7, lr}
 8043090:	b084      	sub	sp, #16
 8043092:	af00      	add	r7, sp, #0
 8043094:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8043096:	2300      	movs	r3, #0
 8043098:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 804309a:	687b      	ldr	r3, [r7, #4]
 804309c:	681b      	ldr	r3, [r3, #0]
 804309e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80430a2:	699b      	ldr	r3, [r3, #24]
 80430a4:	687a      	ldr	r2, [r7, #4]
 80430a6:	6812      	ldr	r2, [r2, #0]
 80430a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80430ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80430b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80430b2:	687b      	ldr	r3, [r7, #4]
 80430b4:	681b      	ldr	r3, [r3, #0]
 80430b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80430ba:	699b      	ldr	r3, [r3, #24]
 80430bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80430be:	2001      	movs	r0, #1
 80430c0:	f7fe fc7e 	bl	80419c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80430c4:	687b      	ldr	r3, [r7, #4]
 80430c6:	681a      	ldr	r2, [r3, #0]
 80430c8:	68fb      	ldr	r3, [r7, #12]
 80430ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80430ce:	6193      	str	r3, [r2, #24]
}
 80430d0:	bf00      	nop
 80430d2:	3710      	adds	r7, #16
 80430d4:	46bd      	mov	sp, r7
 80430d6:	bd80      	pop	{r7, pc}

080430d8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80430d8:	b580      	push	{r7, lr}
 80430da:	b084      	sub	sp, #16
 80430dc:	af00      	add	r7, sp, #0
 80430de:	6078      	str	r0, [r7, #4]
 80430e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80430e2:	687b      	ldr	r3, [r7, #4]
 80430e4:	681b      	ldr	r3, [r3, #0]
 80430e6:	681b      	ldr	r3, [r3, #0]
 80430e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80430ea:	68fa      	ldr	r2, [r7, #12]
 80430ec:	4b51      	ldr	r3, [pc, #324]	; (8043234 <ETH_SetMACConfig+0x15c>)
 80430ee:	4013      	ands	r3, r2
 80430f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80430f2:	683b      	ldr	r3, [r7, #0]
 80430f4:	7c1b      	ldrb	r3, [r3, #16]
 80430f6:	2b00      	cmp	r3, #0
 80430f8:	d102      	bne.n	8043100 <ETH_SetMACConfig+0x28>
 80430fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80430fe:	e000      	b.n	8043102 <ETH_SetMACConfig+0x2a>
 8043100:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8043102:	683b      	ldr	r3, [r7, #0]
 8043104:	7c5b      	ldrb	r3, [r3, #17]
 8043106:	2b00      	cmp	r3, #0
 8043108:	d102      	bne.n	8043110 <ETH_SetMACConfig+0x38>
 804310a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 804310e:	e000      	b.n	8043112 <ETH_SetMACConfig+0x3a>
 8043110:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8043112:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8043114:	683b      	ldr	r3, [r7, #0]
 8043116:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8043118:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 804311a:	683b      	ldr	r3, [r7, #0]
 804311c:	7fdb      	ldrb	r3, [r3, #31]
 804311e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8043120:	431a      	orrs	r2, r3
                        macconf->Speed |
 8043122:	683b      	ldr	r3, [r7, #0]
 8043124:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8043126:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8043128:	683a      	ldr	r2, [r7, #0]
 804312a:	7f92      	ldrb	r2, [r2, #30]
 804312c:	2a00      	cmp	r2, #0
 804312e:	d102      	bne.n	8043136 <ETH_SetMACConfig+0x5e>
 8043130:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8043134:	e000      	b.n	8043138 <ETH_SetMACConfig+0x60>
 8043136:	2200      	movs	r2, #0
                        macconf->Speed |
 8043138:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 804313a:	683b      	ldr	r3, [r7, #0]
 804313c:	7f1b      	ldrb	r3, [r3, #28]
 804313e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8043140:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8043142:	683b      	ldr	r3, [r7, #0]
 8043144:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8043146:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8043148:	683b      	ldr	r3, [r7, #0]
 804314a:	791b      	ldrb	r3, [r3, #4]
 804314c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 804314e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8043150:	683a      	ldr	r2, [r7, #0]
 8043152:	f892 2020 	ldrb.w	r2, [r2, #32]
 8043156:	2a00      	cmp	r2, #0
 8043158:	d102      	bne.n	8043160 <ETH_SetMACConfig+0x88>
 804315a:	f44f 7200 	mov.w	r2, #512	; 0x200
 804315e:	e000      	b.n	8043162 <ETH_SetMACConfig+0x8a>
 8043160:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8043162:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8043164:	683b      	ldr	r3, [r7, #0]
 8043166:	7bdb      	ldrb	r3, [r3, #15]
 8043168:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 804316a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 804316c:	683b      	ldr	r3, [r7, #0]
 804316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8043170:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8043172:	683b      	ldr	r3, [r7, #0]
 8043174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8043178:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 804317a:	4313      	orrs	r3, r2
 804317c:	68fa      	ldr	r2, [r7, #12]
 804317e:	4313      	orrs	r3, r2
 8043180:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8043182:	687b      	ldr	r3, [r7, #4]
 8043184:	681b      	ldr	r3, [r3, #0]
 8043186:	68fa      	ldr	r2, [r7, #12]
 8043188:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 804318a:	687b      	ldr	r3, [r7, #4]
 804318c:	681b      	ldr	r3, [r3, #0]
 804318e:	681b      	ldr	r3, [r3, #0]
 8043190:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8043192:	2001      	movs	r0, #1
 8043194:	f7fe fc14 	bl	80419c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8043198:	687b      	ldr	r3, [r7, #4]
 804319a:	681b      	ldr	r3, [r3, #0]
 804319c:	68fa      	ldr	r2, [r7, #12]
 804319e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80431a0:	687b      	ldr	r3, [r7, #4]
 80431a2:	681b      	ldr	r3, [r3, #0]
 80431a4:	699b      	ldr	r3, [r3, #24]
 80431a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80431a8:	68fa      	ldr	r2, [r7, #12]
 80431aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80431ae:	4013      	ands	r3, r2
 80431b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80431b2:	683b      	ldr	r3, [r7, #0]
 80431b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80431b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80431b8:	683a      	ldr	r2, [r7, #0]
 80431ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80431be:	2a00      	cmp	r2, #0
 80431c0:	d101      	bne.n	80431c6 <ETH_SetMACConfig+0xee>
 80431c2:	2280      	movs	r2, #128	; 0x80
 80431c4:	e000      	b.n	80431c8 <ETH_SetMACConfig+0xf0>
 80431c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80431c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80431ca:	683b      	ldr	r3, [r7, #0]
 80431cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80431ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80431d0:	683a      	ldr	r2, [r7, #0]
 80431d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80431d6:	2a01      	cmp	r2, #1
 80431d8:	d101      	bne.n	80431de <ETH_SetMACConfig+0x106>
 80431da:	2208      	movs	r2, #8
 80431dc:	e000      	b.n	80431e0 <ETH_SetMACConfig+0x108>
 80431de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80431e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80431e2:	683a      	ldr	r2, [r7, #0]
 80431e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80431e8:	2a01      	cmp	r2, #1
 80431ea:	d101      	bne.n	80431f0 <ETH_SetMACConfig+0x118>
 80431ec:	2204      	movs	r2, #4
 80431ee:	e000      	b.n	80431f2 <ETH_SetMACConfig+0x11a>
 80431f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80431f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80431f4:	683a      	ldr	r2, [r7, #0]
 80431f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80431fa:	2a01      	cmp	r2, #1
 80431fc:	d101      	bne.n	8043202 <ETH_SetMACConfig+0x12a>
 80431fe:	2202      	movs	r2, #2
 8043200:	e000      	b.n	8043204 <ETH_SetMACConfig+0x12c>
 8043202:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8043204:	4313      	orrs	r3, r2
 8043206:	68fa      	ldr	r2, [r7, #12]
 8043208:	4313      	orrs	r3, r2
 804320a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 804320c:	687b      	ldr	r3, [r7, #4]
 804320e:	681b      	ldr	r3, [r3, #0]
 8043210:	68fa      	ldr	r2, [r7, #12]
 8043212:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8043214:	687b      	ldr	r3, [r7, #4]
 8043216:	681b      	ldr	r3, [r3, #0]
 8043218:	699b      	ldr	r3, [r3, #24]
 804321a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 804321c:	2001      	movs	r0, #1
 804321e:	f7fe fbcf 	bl	80419c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8043222:	687b      	ldr	r3, [r7, #4]
 8043224:	681b      	ldr	r3, [r3, #0]
 8043226:	68fa      	ldr	r2, [r7, #12]
 8043228:	619a      	str	r2, [r3, #24]
}
 804322a:	bf00      	nop
 804322c:	3710      	adds	r7, #16
 804322e:	46bd      	mov	sp, r7
 8043230:	bd80      	pop	{r7, pc}
 8043232:	bf00      	nop
 8043234:	ff20810f 	.word	0xff20810f

08043238 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8043238:	b580      	push	{r7, lr}
 804323a:	b084      	sub	sp, #16
 804323c:	af00      	add	r7, sp, #0
 804323e:	6078      	str	r0, [r7, #4]
 8043240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8043242:	687b      	ldr	r3, [r7, #4]
 8043244:	681b      	ldr	r3, [r3, #0]
 8043246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804324a:	699b      	ldr	r3, [r3, #24]
 804324c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 804324e:	68fa      	ldr	r2, [r7, #12]
 8043250:	4b3d      	ldr	r3, [pc, #244]	; (8043348 <ETH_SetDMAConfig+0x110>)
 8043252:	4013      	ands	r3, r2
 8043254:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8043256:	683b      	ldr	r3, [r7, #0]
 8043258:	7b1b      	ldrb	r3, [r3, #12]
 804325a:	2b00      	cmp	r3, #0
 804325c:	d102      	bne.n	8043264 <ETH_SetDMAConfig+0x2c>
 804325e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8043262:	e000      	b.n	8043266 <ETH_SetDMAConfig+0x2e>
 8043264:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8043266:	683b      	ldr	r3, [r7, #0]
 8043268:	7b5b      	ldrb	r3, [r3, #13]
 804326a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 804326c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 804326e:	683a      	ldr	r2, [r7, #0]
 8043270:	7f52      	ldrb	r2, [r2, #29]
 8043272:	2a00      	cmp	r2, #0
 8043274:	d102      	bne.n	804327c <ETH_SetDMAConfig+0x44>
 8043276:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804327a:	e000      	b.n	804327e <ETH_SetDMAConfig+0x46>
 804327c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 804327e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8043280:	683b      	ldr	r3, [r7, #0]
 8043282:	7b9b      	ldrb	r3, [r3, #14]
 8043284:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8043286:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8043288:	683b      	ldr	r3, [r7, #0]
 804328a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 804328c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 804328e:	683b      	ldr	r3, [r7, #0]
 8043290:	7f1b      	ldrb	r3, [r3, #28]
 8043292:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8043294:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8043296:	683b      	ldr	r3, [r7, #0]
 8043298:	7f9b      	ldrb	r3, [r3, #30]
 804329a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 804329c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 804329e:	683b      	ldr	r3, [r7, #0]
 80432a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80432a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80432a4:	683b      	ldr	r3, [r7, #0]
 80432a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80432aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80432ac:	4313      	orrs	r3, r2
 80432ae:	68fa      	ldr	r2, [r7, #12]
 80432b0:	4313      	orrs	r3, r2
 80432b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80432b4:	687b      	ldr	r3, [r7, #4]
 80432b6:	681b      	ldr	r3, [r3, #0]
 80432b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80432bc:	461a      	mov	r2, r3
 80432be:	68fb      	ldr	r3, [r7, #12]
 80432c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80432c2:	687b      	ldr	r3, [r7, #4]
 80432c4:	681b      	ldr	r3, [r3, #0]
 80432c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80432ca:	699b      	ldr	r3, [r3, #24]
 80432cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80432ce:	2001      	movs	r0, #1
 80432d0:	f7fe fb76 	bl	80419c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80432d4:	687b      	ldr	r3, [r7, #4]
 80432d6:	681b      	ldr	r3, [r3, #0]
 80432d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80432dc:	461a      	mov	r2, r3
 80432de:	68fb      	ldr	r3, [r7, #12]
 80432e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80432e2:	683b      	ldr	r3, [r7, #0]
 80432e4:	791b      	ldrb	r3, [r3, #4]
 80432e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80432e8:	683b      	ldr	r3, [r7, #0]
 80432ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80432ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80432ee:	683b      	ldr	r3, [r7, #0]
 80432f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80432f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80432f4:	683b      	ldr	r3, [r7, #0]
 80432f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80432f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80432fa:	683b      	ldr	r3, [r7, #0]
 80432fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8043300:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8043302:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8043304:	683b      	ldr	r3, [r7, #0]
 8043306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043308:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 804330a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 804330c:	683b      	ldr	r3, [r7, #0]
 804330e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8043310:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8043312:	687a      	ldr	r2, [r7, #4]
 8043314:	6812      	ldr	r2, [r2, #0]
 8043316:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804331a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 804331e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8043320:	687b      	ldr	r3, [r7, #4]
 8043322:	681b      	ldr	r3, [r3, #0]
 8043324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043328:	681b      	ldr	r3, [r3, #0]
 804332a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 804332c:	2001      	movs	r0, #1
 804332e:	f7fe fb47 	bl	80419c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	681b      	ldr	r3, [r3, #0]
 8043336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804333a:	461a      	mov	r2, r3
 804333c:	68fb      	ldr	r3, [r7, #12]
 804333e:	6013      	str	r3, [r2, #0]
}
 8043340:	bf00      	nop
 8043342:	3710      	adds	r7, #16
 8043344:	46bd      	mov	sp, r7
 8043346:	bd80      	pop	{r7, pc}
 8043348:	f8de3f23 	.word	0xf8de3f23

0804334c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 804334c:	b580      	push	{r7, lr}
 804334e:	b0a6      	sub	sp, #152	; 0x98
 8043350:	af00      	add	r7, sp, #0
 8043352:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8043354:	2301      	movs	r3, #1
 8043356:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 804335a:	2301      	movs	r3, #1
 804335c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8043360:	2300      	movs	r3, #0
 8043362:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8043364:	2300      	movs	r3, #0
 8043366:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 804336a:	2301      	movs	r3, #1
 804336c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8043370:	2300      	movs	r3, #0
 8043372:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8043376:	2301      	movs	r3, #1
 8043378:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 804337c:	2300      	movs	r3, #0
 804337e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8043382:	2300      	movs	r3, #0
 8043384:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8043388:	2300      	movs	r3, #0
 804338a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 804338c:	2300      	movs	r3, #0
 804338e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8043392:	2300      	movs	r3, #0
 8043394:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8043396:	2300      	movs	r3, #0
 8043398:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 804339c:	2300      	movs	r3, #0
 804339e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80433a2:	2300      	movs	r3, #0
 80433a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80433a8:	2300      	movs	r3, #0
 80433aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80433ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80433b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80433b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80433b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80433ba:	2300      	movs	r3, #0
 80433bc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80433c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80433c4:	4619      	mov	r1, r3
 80433c6:	6878      	ldr	r0, [r7, #4]
 80433c8:	f7ff fe86 	bl	80430d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80433cc:	2301      	movs	r3, #1
 80433ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80433d0:	2301      	movs	r3, #1
 80433d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80433d4:	2301      	movs	r3, #1
 80433d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80433da:	2301      	movs	r3, #1
 80433dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80433de:	2300      	movs	r3, #0
 80433e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80433e2:	2300      	movs	r3, #0
 80433e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80433e8:	2300      	movs	r3, #0
 80433ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80433ee:	2300      	movs	r3, #0
 80433f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80433f2:	2301      	movs	r3, #1
 80433f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80433f8:	2301      	movs	r3, #1
 80433fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80433fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8043400:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8043402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8043406:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8043408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804340c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 804340e:	2301      	movs	r3, #1
 8043410:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8043414:	2300      	movs	r3, #0
 8043416:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8043418:	2300      	movs	r3, #0
 804341a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 804341c:	f107 0308 	add.w	r3, r7, #8
 8043420:	4619      	mov	r1, r3
 8043422:	6878      	ldr	r0, [r7, #4]
 8043424:	f7ff ff08 	bl	8043238 <ETH_SetDMAConfig>
}
 8043428:	bf00      	nop
 804342a:	3798      	adds	r7, #152	; 0x98
 804342c:	46bd      	mov	sp, r7
 804342e:	bd80      	pop	{r7, pc}

08043430 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8043430:	b480      	push	{r7}
 8043432:	b087      	sub	sp, #28
 8043434:	af00      	add	r7, sp, #0
 8043436:	60f8      	str	r0, [r7, #12]
 8043438:	60b9      	str	r1, [r7, #8]
 804343a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 804343c:	687b      	ldr	r3, [r7, #4]
 804343e:	3305      	adds	r3, #5
 8043440:	781b      	ldrb	r3, [r3, #0]
 8043442:	021b      	lsls	r3, r3, #8
 8043444:	687a      	ldr	r2, [r7, #4]
 8043446:	3204      	adds	r2, #4
 8043448:	7812      	ldrb	r2, [r2, #0]
 804344a:	4313      	orrs	r3, r2
 804344c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 804344e:	68ba      	ldr	r2, [r7, #8]
 8043450:	4b11      	ldr	r3, [pc, #68]	; (8043498 <ETH_MACAddressConfig+0x68>)
 8043452:	4413      	add	r3, r2
 8043454:	461a      	mov	r2, r3
 8043456:	697b      	ldr	r3, [r7, #20]
 8043458:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 804345a:	687b      	ldr	r3, [r7, #4]
 804345c:	3303      	adds	r3, #3
 804345e:	781b      	ldrb	r3, [r3, #0]
 8043460:	061a      	lsls	r2, r3, #24
 8043462:	687b      	ldr	r3, [r7, #4]
 8043464:	3302      	adds	r3, #2
 8043466:	781b      	ldrb	r3, [r3, #0]
 8043468:	041b      	lsls	r3, r3, #16
 804346a:	431a      	orrs	r2, r3
 804346c:	687b      	ldr	r3, [r7, #4]
 804346e:	3301      	adds	r3, #1
 8043470:	781b      	ldrb	r3, [r3, #0]
 8043472:	021b      	lsls	r3, r3, #8
 8043474:	4313      	orrs	r3, r2
 8043476:	687a      	ldr	r2, [r7, #4]
 8043478:	7812      	ldrb	r2, [r2, #0]
 804347a:	4313      	orrs	r3, r2
 804347c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 804347e:	68ba      	ldr	r2, [r7, #8]
 8043480:	4b06      	ldr	r3, [pc, #24]	; (804349c <ETH_MACAddressConfig+0x6c>)
 8043482:	4413      	add	r3, r2
 8043484:	461a      	mov	r2, r3
 8043486:	697b      	ldr	r3, [r7, #20]
 8043488:	6013      	str	r3, [r2, #0]
}
 804348a:	bf00      	nop
 804348c:	371c      	adds	r7, #28
 804348e:	46bd      	mov	sp, r7
 8043490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043494:	4770      	bx	lr
 8043496:	bf00      	nop
 8043498:	40028040 	.word	0x40028040
 804349c:	40028044 	.word	0x40028044

080434a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80434a0:	b480      	push	{r7}
 80434a2:	b085      	sub	sp, #20
 80434a4:	af00      	add	r7, sp, #0
 80434a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80434a8:	2300      	movs	r3, #0
 80434aa:	60fb      	str	r3, [r7, #12]
 80434ac:	e03e      	b.n	804352c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80434ae:	687b      	ldr	r3, [r7, #4]
 80434b0:	68d9      	ldr	r1, [r3, #12]
 80434b2:	68fa      	ldr	r2, [r7, #12]
 80434b4:	4613      	mov	r3, r2
 80434b6:	009b      	lsls	r3, r3, #2
 80434b8:	4413      	add	r3, r2
 80434ba:	00db      	lsls	r3, r3, #3
 80434bc:	440b      	add	r3, r1
 80434be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80434c0:	68bb      	ldr	r3, [r7, #8]
 80434c2:	2200      	movs	r2, #0
 80434c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80434c6:	68bb      	ldr	r3, [r7, #8]
 80434c8:	2200      	movs	r2, #0
 80434ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80434cc:	68bb      	ldr	r3, [r7, #8]
 80434ce:	2200      	movs	r2, #0
 80434d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80434d2:	68bb      	ldr	r3, [r7, #8]
 80434d4:	2200      	movs	r2, #0
 80434d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80434d8:	68b9      	ldr	r1, [r7, #8]
 80434da:	687b      	ldr	r3, [r7, #4]
 80434dc:	68fa      	ldr	r2, [r7, #12]
 80434de:	3206      	adds	r2, #6
 80434e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80434e4:	68bb      	ldr	r3, [r7, #8]
 80434e6:	681b      	ldr	r3, [r3, #0]
 80434e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80434ec:	68bb      	ldr	r3, [r7, #8]
 80434ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80434f0:	68fb      	ldr	r3, [r7, #12]
 80434f2:	2b02      	cmp	r3, #2
 80434f4:	d80c      	bhi.n	8043510 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80434f6:	687b      	ldr	r3, [r7, #4]
 80434f8:	68d9      	ldr	r1, [r3, #12]
 80434fa:	68fb      	ldr	r3, [r7, #12]
 80434fc:	1c5a      	adds	r2, r3, #1
 80434fe:	4613      	mov	r3, r2
 8043500:	009b      	lsls	r3, r3, #2
 8043502:	4413      	add	r3, r2
 8043504:	00db      	lsls	r3, r3, #3
 8043506:	440b      	add	r3, r1
 8043508:	461a      	mov	r2, r3
 804350a:	68bb      	ldr	r3, [r7, #8]
 804350c:	60da      	str	r2, [r3, #12]
 804350e:	e004      	b.n	804351a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8043510:	687b      	ldr	r3, [r7, #4]
 8043512:	68db      	ldr	r3, [r3, #12]
 8043514:	461a      	mov	r2, r3
 8043516:	68bb      	ldr	r3, [r7, #8]
 8043518:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 804351a:	68bb      	ldr	r3, [r7, #8]
 804351c:	681b      	ldr	r3, [r3, #0]
 804351e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8043522:	68bb      	ldr	r3, [r7, #8]
 8043524:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8043526:	68fb      	ldr	r3, [r7, #12]
 8043528:	3301      	adds	r3, #1
 804352a:	60fb      	str	r3, [r7, #12]
 804352c:	68fb      	ldr	r3, [r7, #12]
 804352e:	2b03      	cmp	r3, #3
 8043530:	d9bd      	bls.n	80434ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8043532:	687b      	ldr	r3, [r7, #4]
 8043534:	2200      	movs	r2, #0
 8043536:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8043538:	687b      	ldr	r3, [r7, #4]
 804353a:	68da      	ldr	r2, [r3, #12]
 804353c:	687b      	ldr	r3, [r7, #4]
 804353e:	681b      	ldr	r3, [r3, #0]
 8043540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043544:	611a      	str	r2, [r3, #16]
}
 8043546:	bf00      	nop
 8043548:	3714      	adds	r7, #20
 804354a:	46bd      	mov	sp, r7
 804354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043550:	4770      	bx	lr

08043552 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8043552:	b480      	push	{r7}
 8043554:	b085      	sub	sp, #20
 8043556:	af00      	add	r7, sp, #0
 8043558:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 804355a:	2300      	movs	r3, #0
 804355c:	60fb      	str	r3, [r7, #12]
 804355e:	e046      	b.n	80435ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8043560:	687b      	ldr	r3, [r7, #4]
 8043562:	6919      	ldr	r1, [r3, #16]
 8043564:	68fa      	ldr	r2, [r7, #12]
 8043566:	4613      	mov	r3, r2
 8043568:	009b      	lsls	r3, r3, #2
 804356a:	4413      	add	r3, r2
 804356c:	00db      	lsls	r3, r3, #3
 804356e:	440b      	add	r3, r1
 8043570:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8043572:	68bb      	ldr	r3, [r7, #8]
 8043574:	2200      	movs	r2, #0
 8043576:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8043578:	68bb      	ldr	r3, [r7, #8]
 804357a:	2200      	movs	r2, #0
 804357c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 804357e:	68bb      	ldr	r3, [r7, #8]
 8043580:	2200      	movs	r2, #0
 8043582:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8043584:	68bb      	ldr	r3, [r7, #8]
 8043586:	2200      	movs	r2, #0
 8043588:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 804358a:	68bb      	ldr	r3, [r7, #8]
 804358c:	2200      	movs	r2, #0
 804358e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8043590:	68bb      	ldr	r3, [r7, #8]
 8043592:	2200      	movs	r2, #0
 8043594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8043596:	68bb      	ldr	r3, [r7, #8]
 8043598:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 804359c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 804359e:	68bb      	ldr	r3, [r7, #8]
 80435a0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80435a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80435a6:	68bb      	ldr	r3, [r7, #8]
 80435a8:	685b      	ldr	r3, [r3, #4]
 80435aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80435ae:	68bb      	ldr	r3, [r7, #8]
 80435b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80435b2:	68b9      	ldr	r1, [r7, #8]
 80435b4:	687b      	ldr	r3, [r7, #4]
 80435b6:	68fa      	ldr	r2, [r7, #12]
 80435b8:	3212      	adds	r2, #18
 80435ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80435be:	68fb      	ldr	r3, [r7, #12]
 80435c0:	2b02      	cmp	r3, #2
 80435c2:	d80c      	bhi.n	80435de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80435c4:	687b      	ldr	r3, [r7, #4]
 80435c6:	6919      	ldr	r1, [r3, #16]
 80435c8:	68fb      	ldr	r3, [r7, #12]
 80435ca:	1c5a      	adds	r2, r3, #1
 80435cc:	4613      	mov	r3, r2
 80435ce:	009b      	lsls	r3, r3, #2
 80435d0:	4413      	add	r3, r2
 80435d2:	00db      	lsls	r3, r3, #3
 80435d4:	440b      	add	r3, r1
 80435d6:	461a      	mov	r2, r3
 80435d8:	68bb      	ldr	r3, [r7, #8]
 80435da:	60da      	str	r2, [r3, #12]
 80435dc:	e004      	b.n	80435e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80435de:	687b      	ldr	r3, [r7, #4]
 80435e0:	691b      	ldr	r3, [r3, #16]
 80435e2:	461a      	mov	r2, r3
 80435e4:	68bb      	ldr	r3, [r7, #8]
 80435e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80435e8:	68fb      	ldr	r3, [r7, #12]
 80435ea:	3301      	adds	r3, #1
 80435ec:	60fb      	str	r3, [r7, #12]
 80435ee:	68fb      	ldr	r3, [r7, #12]
 80435f0:	2b03      	cmp	r3, #3
 80435f2:	d9b5      	bls.n	8043560 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80435f4:	687b      	ldr	r3, [r7, #4]
 80435f6:	2200      	movs	r2, #0
 80435f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80435fa:	687b      	ldr	r3, [r7, #4]
 80435fc:	2200      	movs	r2, #0
 80435fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8043600:	687b      	ldr	r3, [r7, #4]
 8043602:	2200      	movs	r2, #0
 8043604:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8043606:	687b      	ldr	r3, [r7, #4]
 8043608:	2200      	movs	r2, #0
 804360a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 804360c:	687b      	ldr	r3, [r7, #4]
 804360e:	2200      	movs	r2, #0
 8043610:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8043612:	687b      	ldr	r3, [r7, #4]
 8043614:	691a      	ldr	r2, [r3, #16]
 8043616:	687b      	ldr	r3, [r7, #4]
 8043618:	681b      	ldr	r3, [r3, #0]
 804361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804361e:	60da      	str	r2, [r3, #12]
}
 8043620:	bf00      	nop
 8043622:	3714      	adds	r7, #20
 8043624:	46bd      	mov	sp, r7
 8043626:	f85d 7b04 	ldr.w	r7, [sp], #4
 804362a:	4770      	bx	lr

0804362c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 804362c:	b480      	push	{r7}
 804362e:	b08d      	sub	sp, #52	; 0x34
 8043630:	af00      	add	r7, sp, #0
 8043632:	60f8      	str	r0, [r7, #12]
 8043634:	60b9      	str	r1, [r7, #8]
 8043636:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8043638:	68fb      	ldr	r3, [r7, #12]
 804363a:	3318      	adds	r3, #24
 804363c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 804363e:	697b      	ldr	r3, [r7, #20]
 8043640:	691b      	ldr	r3, [r3, #16]
 8043642:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8043644:	697b      	ldr	r3, [r7, #20]
 8043646:	691b      	ldr	r3, [r3, #16]
 8043648:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 804364a:	2300      	movs	r3, #0
 804364c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 804364e:	697b      	ldr	r3, [r7, #20]
 8043650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8043652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043656:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8043658:	68bb      	ldr	r3, [r7, #8]
 804365a:	689b      	ldr	r3, [r3, #8]
 804365c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 804365e:	2300      	movs	r3, #0
 8043660:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8043662:	6a3b      	ldr	r3, [r7, #32]
 8043664:	681b      	ldr	r3, [r3, #0]
 8043666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804366a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804366e:	d007      	beq.n	8043680 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8043670:	697a      	ldr	r2, [r7, #20]
 8043672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043674:	3304      	adds	r3, #4
 8043676:	009b      	lsls	r3, r3, #2
 8043678:	4413      	add	r3, r2
 804367a:	685b      	ldr	r3, [r3, #4]
 804367c:	2b00      	cmp	r3, #0
 804367e:	d001      	beq.n	8043684 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8043680:	2302      	movs	r3, #2
 8043682:	e0ff      	b.n	8043884 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8043684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043686:	3301      	adds	r3, #1
 8043688:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 804368a:	69fb      	ldr	r3, [r7, #28]
 804368c:	681b      	ldr	r3, [r3, #0]
 804368e:	461a      	mov	r2, r3
 8043690:	6a3b      	ldr	r3, [r7, #32]
 8043692:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8043694:	6a3b      	ldr	r3, [r7, #32]
 8043696:	685a      	ldr	r2, [r3, #4]
 8043698:	4b7d      	ldr	r3, [pc, #500]	; (8043890 <ETH_Prepare_Tx_Descriptors+0x264>)
 804369a:	4013      	ands	r3, r2
 804369c:	69fa      	ldr	r2, [r7, #28]
 804369e:	6852      	ldr	r2, [r2, #4]
 80436a0:	431a      	orrs	r2, r3
 80436a2:	6a3b      	ldr	r3, [r7, #32]
 80436a4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80436a6:	68bb      	ldr	r3, [r7, #8]
 80436a8:	681b      	ldr	r3, [r3, #0]
 80436aa:	f003 0301 	and.w	r3, r3, #1
 80436ae:	2b00      	cmp	r3, #0
 80436b0:	d008      	beq.n	80436c4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80436b2:	6a3b      	ldr	r3, [r7, #32]
 80436b4:	681b      	ldr	r3, [r3, #0]
 80436b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80436ba:	68bb      	ldr	r3, [r7, #8]
 80436bc:	695b      	ldr	r3, [r3, #20]
 80436be:	431a      	orrs	r2, r3
 80436c0:	6a3b      	ldr	r3, [r7, #32]
 80436c2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80436c4:	68bb      	ldr	r3, [r7, #8]
 80436c6:	681b      	ldr	r3, [r3, #0]
 80436c8:	f003 0320 	and.w	r3, r3, #32
 80436cc:	2b00      	cmp	r3, #0
 80436ce:	d008      	beq.n	80436e2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80436d0:	6a3b      	ldr	r3, [r7, #32]
 80436d2:	681b      	ldr	r3, [r3, #0]
 80436d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80436d8:	68bb      	ldr	r3, [r7, #8]
 80436da:	691b      	ldr	r3, [r3, #16]
 80436dc:	431a      	orrs	r2, r3
 80436de:	6a3b      	ldr	r3, [r7, #32]
 80436e0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80436e2:	68bb      	ldr	r3, [r7, #8]
 80436e4:	681b      	ldr	r3, [r3, #0]
 80436e6:	f003 0304 	and.w	r3, r3, #4
 80436ea:	2b00      	cmp	r3, #0
 80436ec:	d005      	beq.n	80436fa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80436ee:	6a3b      	ldr	r3, [r7, #32]
 80436f0:	681b      	ldr	r3, [r3, #0]
 80436f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80436f6:	6a3b      	ldr	r3, [r7, #32]
 80436f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80436fa:	6a3b      	ldr	r3, [r7, #32]
 80436fc:	681b      	ldr	r3, [r3, #0]
 80436fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8043702:	6a3b      	ldr	r3, [r7, #32]
 8043704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8043706:	f3bf 8f5f 	dmb	sy
}
 804370a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 804370c:	6a3b      	ldr	r3, [r7, #32]
 804370e:	681b      	ldr	r3, [r3, #0]
 8043710:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8043714:	6a3b      	ldr	r3, [r7, #32]
 8043716:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8043718:	e082      	b.n	8043820 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 804371a:	6a3b      	ldr	r3, [r7, #32]
 804371c:	681b      	ldr	r3, [r3, #0]
 804371e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8043722:	6a3b      	ldr	r3, [r7, #32]
 8043724:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8043726:	687b      	ldr	r3, [r7, #4]
 8043728:	2b00      	cmp	r3, #0
 804372a:	d006      	beq.n	804373a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 804372c:	6a3b      	ldr	r3, [r7, #32]
 804372e:	681b      	ldr	r3, [r3, #0]
 8043730:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8043734:	6a3b      	ldr	r3, [r7, #32]
 8043736:	601a      	str	r2, [r3, #0]
 8043738:	e005      	b.n	8043746 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 804373a:	6a3b      	ldr	r3, [r7, #32]
 804373c:	681b      	ldr	r3, [r3, #0]
 804373e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8043742:	6a3b      	ldr	r3, [r7, #32]
 8043744:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8043746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043748:	3301      	adds	r3, #1
 804374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 804374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804374e:	2b03      	cmp	r3, #3
 8043750:	d902      	bls.n	8043758 <ETH_Prepare_Tx_Descriptors+0x12c>
 8043752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043754:	3b04      	subs	r3, #4
 8043756:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8043758:	697b      	ldr	r3, [r7, #20]
 804375a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043760:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8043762:	6a3b      	ldr	r3, [r7, #32]
 8043764:	681b      	ldr	r3, [r3, #0]
 8043766:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 804376a:	6a3b      	ldr	r3, [r7, #32]
 804376c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 804376e:	6a3b      	ldr	r3, [r7, #32]
 8043770:	681b      	ldr	r3, [r3, #0]
 8043772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8043776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804377a:	d007      	beq.n	804378c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 804377c:	697a      	ldr	r2, [r7, #20]
 804377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043780:	3304      	adds	r3, #4
 8043782:	009b      	lsls	r3, r3, #2
 8043784:	4413      	add	r3, r2
 8043786:	685b      	ldr	r3, [r3, #4]
 8043788:	2b00      	cmp	r3, #0
 804378a:	d029      	beq.n	80437e0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 804378c:	693b      	ldr	r3, [r7, #16]
 804378e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8043790:	697b      	ldr	r3, [r7, #20]
 8043792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8043794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043798:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 804379a:	2300      	movs	r3, #0
 804379c:	62bb      	str	r3, [r7, #40]	; 0x28
 804379e:	e019      	b.n	80437d4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80437a0:	f3bf 8f5f 	dmb	sy
}
 80437a4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80437a6:	6a3b      	ldr	r3, [r7, #32]
 80437a8:	681b      	ldr	r3, [r3, #0]
 80437aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80437ae:	6a3b      	ldr	r3, [r7, #32]
 80437b0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80437b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80437b4:	3301      	adds	r3, #1
 80437b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80437b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80437ba:	2b03      	cmp	r3, #3
 80437bc:	d902      	bls.n	80437c4 <ETH_Prepare_Tx_Descriptors+0x198>
 80437be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80437c0:	3b04      	subs	r3, #4
 80437c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80437c4:	697b      	ldr	r3, [r7, #20]
 80437c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80437c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80437cc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80437ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80437d0:	3301      	adds	r3, #1
 80437d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80437d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80437d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80437d8:	429a      	cmp	r2, r3
 80437da:	d3e1      	bcc.n	80437a0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80437dc:	2302      	movs	r3, #2
 80437de:	e051      	b.n	8043884 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80437e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80437e2:	3301      	adds	r3, #1
 80437e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80437e6:	69fb      	ldr	r3, [r7, #28]
 80437e8:	689b      	ldr	r3, [r3, #8]
 80437ea:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80437ec:	69fb      	ldr	r3, [r7, #28]
 80437ee:	681b      	ldr	r3, [r3, #0]
 80437f0:	461a      	mov	r2, r3
 80437f2:	6a3b      	ldr	r3, [r7, #32]
 80437f4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80437f6:	6a3b      	ldr	r3, [r7, #32]
 80437f8:	685a      	ldr	r2, [r3, #4]
 80437fa:	4b25      	ldr	r3, [pc, #148]	; (8043890 <ETH_Prepare_Tx_Descriptors+0x264>)
 80437fc:	4013      	ands	r3, r2
 80437fe:	69fa      	ldr	r2, [r7, #28]
 8043800:	6852      	ldr	r2, [r2, #4]
 8043802:	431a      	orrs	r2, r3
 8043804:	6a3b      	ldr	r3, [r7, #32]
 8043806:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8043808:	69bb      	ldr	r3, [r7, #24]
 804380a:	3301      	adds	r3, #1
 804380c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 804380e:	f3bf 8f5f 	dmb	sy
}
 8043812:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8043814:	6a3b      	ldr	r3, [r7, #32]
 8043816:	681b      	ldr	r3, [r3, #0]
 8043818:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 804381c:	6a3b      	ldr	r3, [r7, #32]
 804381e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8043820:	69fb      	ldr	r3, [r7, #28]
 8043822:	689b      	ldr	r3, [r3, #8]
 8043824:	2b00      	cmp	r3, #0
 8043826:	f47f af78 	bne.w	804371a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 804382a:	687b      	ldr	r3, [r7, #4]
 804382c:	2b00      	cmp	r3, #0
 804382e:	d006      	beq.n	804383e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8043830:	6a3b      	ldr	r3, [r7, #32]
 8043832:	681b      	ldr	r3, [r3, #0]
 8043834:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8043838:	6a3b      	ldr	r3, [r7, #32]
 804383a:	601a      	str	r2, [r3, #0]
 804383c:	e005      	b.n	804384a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 804383e:	6a3b      	ldr	r3, [r7, #32]
 8043840:	681b      	ldr	r3, [r3, #0]
 8043842:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8043846:	6a3b      	ldr	r3, [r7, #32]
 8043848:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 804384a:	6a3b      	ldr	r3, [r7, #32]
 804384c:	681b      	ldr	r3, [r3, #0]
 804384e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8043852:	6a3b      	ldr	r3, [r7, #32]
 8043854:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8043856:	697b      	ldr	r3, [r7, #20]
 8043858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804385a:	6979      	ldr	r1, [r7, #20]
 804385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804385e:	3304      	adds	r3, #4
 8043860:	009b      	lsls	r3, r3, #2
 8043862:	440b      	add	r3, r1
 8043864:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8043866:	697b      	ldr	r3, [r7, #20]
 8043868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804386a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 804386c:	b672      	cpsid	i
}
 804386e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8043870:	697b      	ldr	r3, [r7, #20]
 8043872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8043874:	69bb      	ldr	r3, [r7, #24]
 8043876:	4413      	add	r3, r2
 8043878:	1c5a      	adds	r2, r3, #1
 804387a:	697b      	ldr	r3, [r7, #20]
 804387c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 804387e:	b662      	cpsie	i
}
 8043880:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8043882:	2300      	movs	r3, #0
}
 8043884:	4618      	mov	r0, r3
 8043886:	3734      	adds	r7, #52	; 0x34
 8043888:	46bd      	mov	sp, r7
 804388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804388e:	4770      	bx	lr
 8043890:	ffffe000 	.word	0xffffe000

08043894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8043894:	b480      	push	{r7}
 8043896:	b089      	sub	sp, #36	; 0x24
 8043898:	af00      	add	r7, sp, #0
 804389a:	6078      	str	r0, [r7, #4]
 804389c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 804389e:	2300      	movs	r3, #0
 80438a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80438a2:	2300      	movs	r3, #0
 80438a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80438a6:	2300      	movs	r3, #0
 80438a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80438aa:	2300      	movs	r3, #0
 80438ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80438ae:	2300      	movs	r3, #0
 80438b0:	61fb      	str	r3, [r7, #28]
 80438b2:	e175      	b.n	8043ba0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80438b4:	2201      	movs	r2, #1
 80438b6:	69fb      	ldr	r3, [r7, #28]
 80438b8:	fa02 f303 	lsl.w	r3, r2, r3
 80438bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80438be:	683b      	ldr	r3, [r7, #0]
 80438c0:	681b      	ldr	r3, [r3, #0]
 80438c2:	697a      	ldr	r2, [r7, #20]
 80438c4:	4013      	ands	r3, r2
 80438c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80438c8:	693a      	ldr	r2, [r7, #16]
 80438ca:	697b      	ldr	r3, [r7, #20]
 80438cc:	429a      	cmp	r2, r3
 80438ce:	f040 8164 	bne.w	8043b9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80438d2:	683b      	ldr	r3, [r7, #0]
 80438d4:	685b      	ldr	r3, [r3, #4]
 80438d6:	f003 0303 	and.w	r3, r3, #3
 80438da:	2b01      	cmp	r3, #1
 80438dc:	d005      	beq.n	80438ea <HAL_GPIO_Init+0x56>
 80438de:	683b      	ldr	r3, [r7, #0]
 80438e0:	685b      	ldr	r3, [r3, #4]
 80438e2:	f003 0303 	and.w	r3, r3, #3
 80438e6:	2b02      	cmp	r3, #2
 80438e8:	d130      	bne.n	804394c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80438ea:	687b      	ldr	r3, [r7, #4]
 80438ec:	689b      	ldr	r3, [r3, #8]
 80438ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80438f0:	69fb      	ldr	r3, [r7, #28]
 80438f2:	005b      	lsls	r3, r3, #1
 80438f4:	2203      	movs	r2, #3
 80438f6:	fa02 f303 	lsl.w	r3, r2, r3
 80438fa:	43db      	mvns	r3, r3
 80438fc:	69ba      	ldr	r2, [r7, #24]
 80438fe:	4013      	ands	r3, r2
 8043900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8043902:	683b      	ldr	r3, [r7, #0]
 8043904:	68da      	ldr	r2, [r3, #12]
 8043906:	69fb      	ldr	r3, [r7, #28]
 8043908:	005b      	lsls	r3, r3, #1
 804390a:	fa02 f303 	lsl.w	r3, r2, r3
 804390e:	69ba      	ldr	r2, [r7, #24]
 8043910:	4313      	orrs	r3, r2
 8043912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8043914:	687b      	ldr	r3, [r7, #4]
 8043916:	69ba      	ldr	r2, [r7, #24]
 8043918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 804391a:	687b      	ldr	r3, [r7, #4]
 804391c:	685b      	ldr	r3, [r3, #4]
 804391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043920:	2201      	movs	r2, #1
 8043922:	69fb      	ldr	r3, [r7, #28]
 8043924:	fa02 f303 	lsl.w	r3, r2, r3
 8043928:	43db      	mvns	r3, r3
 804392a:	69ba      	ldr	r2, [r7, #24]
 804392c:	4013      	ands	r3, r2
 804392e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8043930:	683b      	ldr	r3, [r7, #0]
 8043932:	685b      	ldr	r3, [r3, #4]
 8043934:	091b      	lsrs	r3, r3, #4
 8043936:	f003 0201 	and.w	r2, r3, #1
 804393a:	69fb      	ldr	r3, [r7, #28]
 804393c:	fa02 f303 	lsl.w	r3, r2, r3
 8043940:	69ba      	ldr	r2, [r7, #24]
 8043942:	4313      	orrs	r3, r2
 8043944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8043946:	687b      	ldr	r3, [r7, #4]
 8043948:	69ba      	ldr	r2, [r7, #24]
 804394a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 804394c:	683b      	ldr	r3, [r7, #0]
 804394e:	685b      	ldr	r3, [r3, #4]
 8043950:	f003 0303 	and.w	r3, r3, #3
 8043954:	2b03      	cmp	r3, #3
 8043956:	d017      	beq.n	8043988 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8043958:	687b      	ldr	r3, [r7, #4]
 804395a:	68db      	ldr	r3, [r3, #12]
 804395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 804395e:	69fb      	ldr	r3, [r7, #28]
 8043960:	005b      	lsls	r3, r3, #1
 8043962:	2203      	movs	r2, #3
 8043964:	fa02 f303 	lsl.w	r3, r2, r3
 8043968:	43db      	mvns	r3, r3
 804396a:	69ba      	ldr	r2, [r7, #24]
 804396c:	4013      	ands	r3, r2
 804396e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8043970:	683b      	ldr	r3, [r7, #0]
 8043972:	689a      	ldr	r2, [r3, #8]
 8043974:	69fb      	ldr	r3, [r7, #28]
 8043976:	005b      	lsls	r3, r3, #1
 8043978:	fa02 f303 	lsl.w	r3, r2, r3
 804397c:	69ba      	ldr	r2, [r7, #24]
 804397e:	4313      	orrs	r3, r2
 8043980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8043982:	687b      	ldr	r3, [r7, #4]
 8043984:	69ba      	ldr	r2, [r7, #24]
 8043986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8043988:	683b      	ldr	r3, [r7, #0]
 804398a:	685b      	ldr	r3, [r3, #4]
 804398c:	f003 0303 	and.w	r3, r3, #3
 8043990:	2b02      	cmp	r3, #2
 8043992:	d123      	bne.n	80439dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8043994:	69fb      	ldr	r3, [r7, #28]
 8043996:	08da      	lsrs	r2, r3, #3
 8043998:	687b      	ldr	r3, [r7, #4]
 804399a:	3208      	adds	r2, #8
 804399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80439a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80439a2:	69fb      	ldr	r3, [r7, #28]
 80439a4:	f003 0307 	and.w	r3, r3, #7
 80439a8:	009b      	lsls	r3, r3, #2
 80439aa:	220f      	movs	r2, #15
 80439ac:	fa02 f303 	lsl.w	r3, r2, r3
 80439b0:	43db      	mvns	r3, r3
 80439b2:	69ba      	ldr	r2, [r7, #24]
 80439b4:	4013      	ands	r3, r2
 80439b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80439b8:	683b      	ldr	r3, [r7, #0]
 80439ba:	691a      	ldr	r2, [r3, #16]
 80439bc:	69fb      	ldr	r3, [r7, #28]
 80439be:	f003 0307 	and.w	r3, r3, #7
 80439c2:	009b      	lsls	r3, r3, #2
 80439c4:	fa02 f303 	lsl.w	r3, r2, r3
 80439c8:	69ba      	ldr	r2, [r7, #24]
 80439ca:	4313      	orrs	r3, r2
 80439cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80439ce:	69fb      	ldr	r3, [r7, #28]
 80439d0:	08da      	lsrs	r2, r3, #3
 80439d2:	687b      	ldr	r3, [r7, #4]
 80439d4:	3208      	adds	r2, #8
 80439d6:	69b9      	ldr	r1, [r7, #24]
 80439d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80439dc:	687b      	ldr	r3, [r7, #4]
 80439de:	681b      	ldr	r3, [r3, #0]
 80439e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80439e2:	69fb      	ldr	r3, [r7, #28]
 80439e4:	005b      	lsls	r3, r3, #1
 80439e6:	2203      	movs	r2, #3
 80439e8:	fa02 f303 	lsl.w	r3, r2, r3
 80439ec:	43db      	mvns	r3, r3
 80439ee:	69ba      	ldr	r2, [r7, #24]
 80439f0:	4013      	ands	r3, r2
 80439f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80439f4:	683b      	ldr	r3, [r7, #0]
 80439f6:	685b      	ldr	r3, [r3, #4]
 80439f8:	f003 0203 	and.w	r2, r3, #3
 80439fc:	69fb      	ldr	r3, [r7, #28]
 80439fe:	005b      	lsls	r3, r3, #1
 8043a00:	fa02 f303 	lsl.w	r3, r2, r3
 8043a04:	69ba      	ldr	r2, [r7, #24]
 8043a06:	4313      	orrs	r3, r2
 8043a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8043a0a:	687b      	ldr	r3, [r7, #4]
 8043a0c:	69ba      	ldr	r2, [r7, #24]
 8043a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8043a10:	683b      	ldr	r3, [r7, #0]
 8043a12:	685b      	ldr	r3, [r3, #4]
 8043a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8043a18:	2b00      	cmp	r3, #0
 8043a1a:	f000 80be 	beq.w	8043b9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043a1e:	4b66      	ldr	r3, [pc, #408]	; (8043bb8 <HAL_GPIO_Init+0x324>)
 8043a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043a22:	4a65      	ldr	r2, [pc, #404]	; (8043bb8 <HAL_GPIO_Init+0x324>)
 8043a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8043a28:	6453      	str	r3, [r2, #68]	; 0x44
 8043a2a:	4b63      	ldr	r3, [pc, #396]	; (8043bb8 <HAL_GPIO_Init+0x324>)
 8043a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043a32:	60fb      	str	r3, [r7, #12]
 8043a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8043a36:	4a61      	ldr	r2, [pc, #388]	; (8043bbc <HAL_GPIO_Init+0x328>)
 8043a38:	69fb      	ldr	r3, [r7, #28]
 8043a3a:	089b      	lsrs	r3, r3, #2
 8043a3c:	3302      	adds	r3, #2
 8043a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8043a44:	69fb      	ldr	r3, [r7, #28]
 8043a46:	f003 0303 	and.w	r3, r3, #3
 8043a4a:	009b      	lsls	r3, r3, #2
 8043a4c:	220f      	movs	r2, #15
 8043a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8043a52:	43db      	mvns	r3, r3
 8043a54:	69ba      	ldr	r2, [r7, #24]
 8043a56:	4013      	ands	r3, r2
 8043a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8043a5a:	687b      	ldr	r3, [r7, #4]
 8043a5c:	4a58      	ldr	r2, [pc, #352]	; (8043bc0 <HAL_GPIO_Init+0x32c>)
 8043a5e:	4293      	cmp	r3, r2
 8043a60:	d037      	beq.n	8043ad2 <HAL_GPIO_Init+0x23e>
 8043a62:	687b      	ldr	r3, [r7, #4]
 8043a64:	4a57      	ldr	r2, [pc, #348]	; (8043bc4 <HAL_GPIO_Init+0x330>)
 8043a66:	4293      	cmp	r3, r2
 8043a68:	d031      	beq.n	8043ace <HAL_GPIO_Init+0x23a>
 8043a6a:	687b      	ldr	r3, [r7, #4]
 8043a6c:	4a56      	ldr	r2, [pc, #344]	; (8043bc8 <HAL_GPIO_Init+0x334>)
 8043a6e:	4293      	cmp	r3, r2
 8043a70:	d02b      	beq.n	8043aca <HAL_GPIO_Init+0x236>
 8043a72:	687b      	ldr	r3, [r7, #4]
 8043a74:	4a55      	ldr	r2, [pc, #340]	; (8043bcc <HAL_GPIO_Init+0x338>)
 8043a76:	4293      	cmp	r3, r2
 8043a78:	d025      	beq.n	8043ac6 <HAL_GPIO_Init+0x232>
 8043a7a:	687b      	ldr	r3, [r7, #4]
 8043a7c:	4a54      	ldr	r2, [pc, #336]	; (8043bd0 <HAL_GPIO_Init+0x33c>)
 8043a7e:	4293      	cmp	r3, r2
 8043a80:	d01f      	beq.n	8043ac2 <HAL_GPIO_Init+0x22e>
 8043a82:	687b      	ldr	r3, [r7, #4]
 8043a84:	4a53      	ldr	r2, [pc, #332]	; (8043bd4 <HAL_GPIO_Init+0x340>)
 8043a86:	4293      	cmp	r3, r2
 8043a88:	d019      	beq.n	8043abe <HAL_GPIO_Init+0x22a>
 8043a8a:	687b      	ldr	r3, [r7, #4]
 8043a8c:	4a52      	ldr	r2, [pc, #328]	; (8043bd8 <HAL_GPIO_Init+0x344>)
 8043a8e:	4293      	cmp	r3, r2
 8043a90:	d013      	beq.n	8043aba <HAL_GPIO_Init+0x226>
 8043a92:	687b      	ldr	r3, [r7, #4]
 8043a94:	4a51      	ldr	r2, [pc, #324]	; (8043bdc <HAL_GPIO_Init+0x348>)
 8043a96:	4293      	cmp	r3, r2
 8043a98:	d00d      	beq.n	8043ab6 <HAL_GPIO_Init+0x222>
 8043a9a:	687b      	ldr	r3, [r7, #4]
 8043a9c:	4a50      	ldr	r2, [pc, #320]	; (8043be0 <HAL_GPIO_Init+0x34c>)
 8043a9e:	4293      	cmp	r3, r2
 8043aa0:	d007      	beq.n	8043ab2 <HAL_GPIO_Init+0x21e>
 8043aa2:	687b      	ldr	r3, [r7, #4]
 8043aa4:	4a4f      	ldr	r2, [pc, #316]	; (8043be4 <HAL_GPIO_Init+0x350>)
 8043aa6:	4293      	cmp	r3, r2
 8043aa8:	d101      	bne.n	8043aae <HAL_GPIO_Init+0x21a>
 8043aaa:	2309      	movs	r3, #9
 8043aac:	e012      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043aae:	230a      	movs	r3, #10
 8043ab0:	e010      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043ab2:	2308      	movs	r3, #8
 8043ab4:	e00e      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043ab6:	2307      	movs	r3, #7
 8043ab8:	e00c      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043aba:	2306      	movs	r3, #6
 8043abc:	e00a      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043abe:	2305      	movs	r3, #5
 8043ac0:	e008      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043ac2:	2304      	movs	r3, #4
 8043ac4:	e006      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043ac6:	2303      	movs	r3, #3
 8043ac8:	e004      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043aca:	2302      	movs	r3, #2
 8043acc:	e002      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043ace:	2301      	movs	r3, #1
 8043ad0:	e000      	b.n	8043ad4 <HAL_GPIO_Init+0x240>
 8043ad2:	2300      	movs	r3, #0
 8043ad4:	69fa      	ldr	r2, [r7, #28]
 8043ad6:	f002 0203 	and.w	r2, r2, #3
 8043ada:	0092      	lsls	r2, r2, #2
 8043adc:	4093      	lsls	r3, r2
 8043ade:	69ba      	ldr	r2, [r7, #24]
 8043ae0:	4313      	orrs	r3, r2
 8043ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8043ae4:	4935      	ldr	r1, [pc, #212]	; (8043bbc <HAL_GPIO_Init+0x328>)
 8043ae6:	69fb      	ldr	r3, [r7, #28]
 8043ae8:	089b      	lsrs	r3, r3, #2
 8043aea:	3302      	adds	r3, #2
 8043aec:	69ba      	ldr	r2, [r7, #24]
 8043aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8043af2:	4b3d      	ldr	r3, [pc, #244]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043af4:	689b      	ldr	r3, [r3, #8]
 8043af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043af8:	693b      	ldr	r3, [r7, #16]
 8043afa:	43db      	mvns	r3, r3
 8043afc:	69ba      	ldr	r2, [r7, #24]
 8043afe:	4013      	ands	r3, r2
 8043b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8043b02:	683b      	ldr	r3, [r7, #0]
 8043b04:	685b      	ldr	r3, [r3, #4]
 8043b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043b0a:	2b00      	cmp	r3, #0
 8043b0c:	d003      	beq.n	8043b16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8043b0e:	69ba      	ldr	r2, [r7, #24]
 8043b10:	693b      	ldr	r3, [r7, #16]
 8043b12:	4313      	orrs	r3, r2
 8043b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8043b16:	4a34      	ldr	r2, [pc, #208]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b18:	69bb      	ldr	r3, [r7, #24]
 8043b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8043b1c:	4b32      	ldr	r3, [pc, #200]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b1e:	68db      	ldr	r3, [r3, #12]
 8043b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043b22:	693b      	ldr	r3, [r7, #16]
 8043b24:	43db      	mvns	r3, r3
 8043b26:	69ba      	ldr	r2, [r7, #24]
 8043b28:	4013      	ands	r3, r2
 8043b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8043b2c:	683b      	ldr	r3, [r7, #0]
 8043b2e:	685b      	ldr	r3, [r3, #4]
 8043b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043b34:	2b00      	cmp	r3, #0
 8043b36:	d003      	beq.n	8043b40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8043b38:	69ba      	ldr	r2, [r7, #24]
 8043b3a:	693b      	ldr	r3, [r7, #16]
 8043b3c:	4313      	orrs	r3, r2
 8043b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8043b40:	4a29      	ldr	r2, [pc, #164]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b42:	69bb      	ldr	r3, [r7, #24]
 8043b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8043b46:	4b28      	ldr	r3, [pc, #160]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b48:	685b      	ldr	r3, [r3, #4]
 8043b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043b4c:	693b      	ldr	r3, [r7, #16]
 8043b4e:	43db      	mvns	r3, r3
 8043b50:	69ba      	ldr	r2, [r7, #24]
 8043b52:	4013      	ands	r3, r2
 8043b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8043b56:	683b      	ldr	r3, [r7, #0]
 8043b58:	685b      	ldr	r3, [r3, #4]
 8043b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043b5e:	2b00      	cmp	r3, #0
 8043b60:	d003      	beq.n	8043b6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8043b62:	69ba      	ldr	r2, [r7, #24]
 8043b64:	693b      	ldr	r3, [r7, #16]
 8043b66:	4313      	orrs	r3, r2
 8043b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8043b6a:	4a1f      	ldr	r2, [pc, #124]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b6c:	69bb      	ldr	r3, [r7, #24]
 8043b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8043b70:	4b1d      	ldr	r3, [pc, #116]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b72:	681b      	ldr	r3, [r3, #0]
 8043b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043b76:	693b      	ldr	r3, [r7, #16]
 8043b78:	43db      	mvns	r3, r3
 8043b7a:	69ba      	ldr	r2, [r7, #24]
 8043b7c:	4013      	ands	r3, r2
 8043b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8043b80:	683b      	ldr	r3, [r7, #0]
 8043b82:	685b      	ldr	r3, [r3, #4]
 8043b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043b88:	2b00      	cmp	r3, #0
 8043b8a:	d003      	beq.n	8043b94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8043b8c:	69ba      	ldr	r2, [r7, #24]
 8043b8e:	693b      	ldr	r3, [r7, #16]
 8043b90:	4313      	orrs	r3, r2
 8043b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8043b94:	4a14      	ldr	r2, [pc, #80]	; (8043be8 <HAL_GPIO_Init+0x354>)
 8043b96:	69bb      	ldr	r3, [r7, #24]
 8043b98:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8043b9a:	69fb      	ldr	r3, [r7, #28]
 8043b9c:	3301      	adds	r3, #1
 8043b9e:	61fb      	str	r3, [r7, #28]
 8043ba0:	69fb      	ldr	r3, [r7, #28]
 8043ba2:	2b0f      	cmp	r3, #15
 8043ba4:	f67f ae86 	bls.w	80438b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8043ba8:	bf00      	nop
 8043baa:	bf00      	nop
 8043bac:	3724      	adds	r7, #36	; 0x24
 8043bae:	46bd      	mov	sp, r7
 8043bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bb4:	4770      	bx	lr
 8043bb6:	bf00      	nop
 8043bb8:	40023800 	.word	0x40023800
 8043bbc:	40013800 	.word	0x40013800
 8043bc0:	40020000 	.word	0x40020000
 8043bc4:	40020400 	.word	0x40020400
 8043bc8:	40020800 	.word	0x40020800
 8043bcc:	40020c00 	.word	0x40020c00
 8043bd0:	40021000 	.word	0x40021000
 8043bd4:	40021400 	.word	0x40021400
 8043bd8:	40021800 	.word	0x40021800
 8043bdc:	40021c00 	.word	0x40021c00
 8043be0:	40022000 	.word	0x40022000
 8043be4:	40022400 	.word	0x40022400
 8043be8:	40013c00 	.word	0x40013c00

08043bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8043bec:	b480      	push	{r7}
 8043bee:	b085      	sub	sp, #20
 8043bf0:	af00      	add	r7, sp, #0
 8043bf2:	6078      	str	r0, [r7, #4]
 8043bf4:	460b      	mov	r3, r1
 8043bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8043bf8:	687b      	ldr	r3, [r7, #4]
 8043bfa:	691a      	ldr	r2, [r3, #16]
 8043bfc:	887b      	ldrh	r3, [r7, #2]
 8043bfe:	4013      	ands	r3, r2
 8043c00:	2b00      	cmp	r3, #0
 8043c02:	d002      	beq.n	8043c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8043c04:	2301      	movs	r3, #1
 8043c06:	73fb      	strb	r3, [r7, #15]
 8043c08:	e001      	b.n	8043c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8043c0a:	2300      	movs	r3, #0
 8043c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8043c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8043c10:	4618      	mov	r0, r3
 8043c12:	3714      	adds	r7, #20
 8043c14:	46bd      	mov	sp, r7
 8043c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c1a:	4770      	bx	lr

08043c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8043c1c:	b480      	push	{r7}
 8043c1e:	b083      	sub	sp, #12
 8043c20:	af00      	add	r7, sp, #0
 8043c22:	6078      	str	r0, [r7, #4]
 8043c24:	460b      	mov	r3, r1
 8043c26:	807b      	strh	r3, [r7, #2]
 8043c28:	4613      	mov	r3, r2
 8043c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8043c2c:	787b      	ldrb	r3, [r7, #1]
 8043c2e:	2b00      	cmp	r3, #0
 8043c30:	d003      	beq.n	8043c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8043c32:	887a      	ldrh	r2, [r7, #2]
 8043c34:	687b      	ldr	r3, [r7, #4]
 8043c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8043c38:	e003      	b.n	8043c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8043c3a:	887b      	ldrh	r3, [r7, #2]
 8043c3c:	041a      	lsls	r2, r3, #16
 8043c3e:	687b      	ldr	r3, [r7, #4]
 8043c40:	619a      	str	r2, [r3, #24]
}
 8043c42:	bf00      	nop
 8043c44:	370c      	adds	r7, #12
 8043c46:	46bd      	mov	sp, r7
 8043c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c4c:	4770      	bx	lr
	...

08043c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8043c50:	b580      	push	{r7, lr}
 8043c52:	b082      	sub	sp, #8
 8043c54:	af00      	add	r7, sp, #0
 8043c56:	4603      	mov	r3, r0
 8043c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8043c5a:	4b08      	ldr	r3, [pc, #32]	; (8043c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8043c5c:	695a      	ldr	r2, [r3, #20]
 8043c5e:	88fb      	ldrh	r3, [r7, #6]
 8043c60:	4013      	ands	r3, r2
 8043c62:	2b00      	cmp	r3, #0
 8043c64:	d006      	beq.n	8043c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8043c66:	4a05      	ldr	r2, [pc, #20]	; (8043c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8043c68:	88fb      	ldrh	r3, [r7, #6]
 8043c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8043c6c:	88fb      	ldrh	r3, [r7, #6]
 8043c6e:	4618      	mov	r0, r3
 8043c70:	f7fc fe96 	bl	80409a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8043c74:	bf00      	nop
 8043c76:	3708      	adds	r7, #8
 8043c78:	46bd      	mov	sp, r7
 8043c7a:	bd80      	pop	{r7, pc}
 8043c7c:	40013c00 	.word	0x40013c00

08043c80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8043c80:	b480      	push	{r7}
 8043c82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8043c84:	4b05      	ldr	r3, [pc, #20]	; (8043c9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8043c86:	681b      	ldr	r3, [r3, #0]
 8043c88:	4a04      	ldr	r2, [pc, #16]	; (8043c9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8043c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043c8e:	6013      	str	r3, [r2, #0]
}
 8043c90:	bf00      	nop
 8043c92:	46bd      	mov	sp, r7
 8043c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c98:	4770      	bx	lr
 8043c9a:	bf00      	nop
 8043c9c:	40007000 	.word	0x40007000

08043ca0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8043ca0:	b580      	push	{r7, lr}
 8043ca2:	b082      	sub	sp, #8
 8043ca4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8043ca6:	2300      	movs	r3, #0
 8043ca8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8043caa:	4b23      	ldr	r3, [pc, #140]	; (8043d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8043cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043cae:	4a22      	ldr	r2, [pc, #136]	; (8043d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8043cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8043cb6:	4b20      	ldr	r3, [pc, #128]	; (8043d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8043cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043cbe:	603b      	str	r3, [r7, #0]
 8043cc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8043cc2:	4b1e      	ldr	r3, [pc, #120]	; (8043d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8043cc4:	681b      	ldr	r3, [r3, #0]
 8043cc6:	4a1d      	ldr	r2, [pc, #116]	; (8043d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8043cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043ccc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8043cce:	f7fd fe6b 	bl	80419a8 <HAL_GetTick>
 8043cd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8043cd4:	e009      	b.n	8043cea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8043cd6:	f7fd fe67 	bl	80419a8 <HAL_GetTick>
 8043cda:	4602      	mov	r2, r0
 8043cdc:	687b      	ldr	r3, [r7, #4]
 8043cde:	1ad3      	subs	r3, r2, r3
 8043ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8043ce4:	d901      	bls.n	8043cea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8043ce6:	2303      	movs	r3, #3
 8043ce8:	e022      	b.n	8043d30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8043cea:	4b14      	ldr	r3, [pc, #80]	; (8043d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8043cec:	685b      	ldr	r3, [r3, #4]
 8043cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043cf6:	d1ee      	bne.n	8043cd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8043cf8:	4b10      	ldr	r3, [pc, #64]	; (8043d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8043cfa:	681b      	ldr	r3, [r3, #0]
 8043cfc:	4a0f      	ldr	r2, [pc, #60]	; (8043d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8043cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043d02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8043d04:	f7fd fe50 	bl	80419a8 <HAL_GetTick>
 8043d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8043d0a:	e009      	b.n	8043d20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8043d0c:	f7fd fe4c 	bl	80419a8 <HAL_GetTick>
 8043d10:	4602      	mov	r2, r0
 8043d12:	687b      	ldr	r3, [r7, #4]
 8043d14:	1ad3      	subs	r3, r2, r3
 8043d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8043d1a:	d901      	bls.n	8043d20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8043d1c:	2303      	movs	r3, #3
 8043d1e:	e007      	b.n	8043d30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8043d20:	4b06      	ldr	r3, [pc, #24]	; (8043d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8043d22:	685b      	ldr	r3, [r3, #4]
 8043d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8043d2c:	d1ee      	bne.n	8043d0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8043d2e:	2300      	movs	r3, #0
}
 8043d30:	4618      	mov	r0, r3
 8043d32:	3708      	adds	r7, #8
 8043d34:	46bd      	mov	sp, r7
 8043d36:	bd80      	pop	{r7, pc}
 8043d38:	40023800 	.word	0x40023800
 8043d3c:	40007000 	.word	0x40007000

08043d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8043d40:	b580      	push	{r7, lr}
 8043d42:	b086      	sub	sp, #24
 8043d44:	af00      	add	r7, sp, #0
 8043d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8043d48:	2300      	movs	r3, #0
 8043d4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8043d4c:	687b      	ldr	r3, [r7, #4]
 8043d4e:	2b00      	cmp	r3, #0
 8043d50:	d101      	bne.n	8043d56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8043d52:	2301      	movs	r3, #1
 8043d54:	e29b      	b.n	804428e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8043d56:	687b      	ldr	r3, [r7, #4]
 8043d58:	681b      	ldr	r3, [r3, #0]
 8043d5a:	f003 0301 	and.w	r3, r3, #1
 8043d5e:	2b00      	cmp	r3, #0
 8043d60:	f000 8087 	beq.w	8043e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8043d64:	4b96      	ldr	r3, [pc, #600]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043d66:	689b      	ldr	r3, [r3, #8]
 8043d68:	f003 030c 	and.w	r3, r3, #12
 8043d6c:	2b04      	cmp	r3, #4
 8043d6e:	d00c      	beq.n	8043d8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8043d70:	4b93      	ldr	r3, [pc, #588]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043d72:	689b      	ldr	r3, [r3, #8]
 8043d74:	f003 030c 	and.w	r3, r3, #12
 8043d78:	2b08      	cmp	r3, #8
 8043d7a:	d112      	bne.n	8043da2 <HAL_RCC_OscConfig+0x62>
 8043d7c:	4b90      	ldr	r3, [pc, #576]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043d7e:	685b      	ldr	r3, [r3, #4]
 8043d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8043d88:	d10b      	bne.n	8043da2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043d8a:	4b8d      	ldr	r3, [pc, #564]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043d8c:	681b      	ldr	r3, [r3, #0]
 8043d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043d92:	2b00      	cmp	r3, #0
 8043d94:	d06c      	beq.n	8043e70 <HAL_RCC_OscConfig+0x130>
 8043d96:	687b      	ldr	r3, [r7, #4]
 8043d98:	685b      	ldr	r3, [r3, #4]
 8043d9a:	2b00      	cmp	r3, #0
 8043d9c:	d168      	bne.n	8043e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8043d9e:	2301      	movs	r3, #1
 8043da0:	e275      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043da2:	687b      	ldr	r3, [r7, #4]
 8043da4:	685b      	ldr	r3, [r3, #4]
 8043da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043daa:	d106      	bne.n	8043dba <HAL_RCC_OscConfig+0x7a>
 8043dac:	4b84      	ldr	r3, [pc, #528]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043dae:	681b      	ldr	r3, [r3, #0]
 8043db0:	4a83      	ldr	r2, [pc, #524]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043db6:	6013      	str	r3, [r2, #0]
 8043db8:	e02e      	b.n	8043e18 <HAL_RCC_OscConfig+0xd8>
 8043dba:	687b      	ldr	r3, [r7, #4]
 8043dbc:	685b      	ldr	r3, [r3, #4]
 8043dbe:	2b00      	cmp	r3, #0
 8043dc0:	d10c      	bne.n	8043ddc <HAL_RCC_OscConfig+0x9c>
 8043dc2:	4b7f      	ldr	r3, [pc, #508]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043dc4:	681b      	ldr	r3, [r3, #0]
 8043dc6:	4a7e      	ldr	r2, [pc, #504]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8043dcc:	6013      	str	r3, [r2, #0]
 8043dce:	4b7c      	ldr	r3, [pc, #496]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043dd0:	681b      	ldr	r3, [r3, #0]
 8043dd2:	4a7b      	ldr	r2, [pc, #492]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8043dd8:	6013      	str	r3, [r2, #0]
 8043dda:	e01d      	b.n	8043e18 <HAL_RCC_OscConfig+0xd8>
 8043ddc:	687b      	ldr	r3, [r7, #4]
 8043dde:	685b      	ldr	r3, [r3, #4]
 8043de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8043de4:	d10c      	bne.n	8043e00 <HAL_RCC_OscConfig+0xc0>
 8043de6:	4b76      	ldr	r3, [pc, #472]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043de8:	681b      	ldr	r3, [r3, #0]
 8043dea:	4a75      	ldr	r2, [pc, #468]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8043df0:	6013      	str	r3, [r2, #0]
 8043df2:	4b73      	ldr	r3, [pc, #460]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043df4:	681b      	ldr	r3, [r3, #0]
 8043df6:	4a72      	ldr	r2, [pc, #456]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043dfc:	6013      	str	r3, [r2, #0]
 8043dfe:	e00b      	b.n	8043e18 <HAL_RCC_OscConfig+0xd8>
 8043e00:	4b6f      	ldr	r3, [pc, #444]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e02:	681b      	ldr	r3, [r3, #0]
 8043e04:	4a6e      	ldr	r2, [pc, #440]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8043e0a:	6013      	str	r3, [r2, #0]
 8043e0c:	4b6c      	ldr	r3, [pc, #432]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e0e:	681b      	ldr	r3, [r3, #0]
 8043e10:	4a6b      	ldr	r2, [pc, #428]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8043e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8043e18:	687b      	ldr	r3, [r7, #4]
 8043e1a:	685b      	ldr	r3, [r3, #4]
 8043e1c:	2b00      	cmp	r3, #0
 8043e1e:	d013      	beq.n	8043e48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043e20:	f7fd fdc2 	bl	80419a8 <HAL_GetTick>
 8043e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043e26:	e008      	b.n	8043e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043e28:	f7fd fdbe 	bl	80419a8 <HAL_GetTick>
 8043e2c:	4602      	mov	r2, r0
 8043e2e:	693b      	ldr	r3, [r7, #16]
 8043e30:	1ad3      	subs	r3, r2, r3
 8043e32:	2b64      	cmp	r3, #100	; 0x64
 8043e34:	d901      	bls.n	8043e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8043e36:	2303      	movs	r3, #3
 8043e38:	e229      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8043e3a:	4b61      	ldr	r3, [pc, #388]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e3c:	681b      	ldr	r3, [r3, #0]
 8043e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043e42:	2b00      	cmp	r3, #0
 8043e44:	d0f0      	beq.n	8043e28 <HAL_RCC_OscConfig+0xe8>
 8043e46:	e014      	b.n	8043e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043e48:	f7fd fdae 	bl	80419a8 <HAL_GetTick>
 8043e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043e4e:	e008      	b.n	8043e62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043e50:	f7fd fdaa 	bl	80419a8 <HAL_GetTick>
 8043e54:	4602      	mov	r2, r0
 8043e56:	693b      	ldr	r3, [r7, #16]
 8043e58:	1ad3      	subs	r3, r2, r3
 8043e5a:	2b64      	cmp	r3, #100	; 0x64
 8043e5c:	d901      	bls.n	8043e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8043e5e:	2303      	movs	r3, #3
 8043e60:	e215      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8043e62:	4b57      	ldr	r3, [pc, #348]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e64:	681b      	ldr	r3, [r3, #0]
 8043e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043e6a:	2b00      	cmp	r3, #0
 8043e6c:	d1f0      	bne.n	8043e50 <HAL_RCC_OscConfig+0x110>
 8043e6e:	e000      	b.n	8043e72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8043e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8043e72:	687b      	ldr	r3, [r7, #4]
 8043e74:	681b      	ldr	r3, [r3, #0]
 8043e76:	f003 0302 	and.w	r3, r3, #2
 8043e7a:	2b00      	cmp	r3, #0
 8043e7c:	d069      	beq.n	8043f52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8043e7e:	4b50      	ldr	r3, [pc, #320]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e80:	689b      	ldr	r3, [r3, #8]
 8043e82:	f003 030c 	and.w	r3, r3, #12
 8043e86:	2b00      	cmp	r3, #0
 8043e88:	d00b      	beq.n	8043ea2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8043e8a:	4b4d      	ldr	r3, [pc, #308]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e8c:	689b      	ldr	r3, [r3, #8]
 8043e8e:	f003 030c 	and.w	r3, r3, #12
 8043e92:	2b08      	cmp	r3, #8
 8043e94:	d11c      	bne.n	8043ed0 <HAL_RCC_OscConfig+0x190>
 8043e96:	4b4a      	ldr	r3, [pc, #296]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043e98:	685b      	ldr	r3, [r3, #4]
 8043e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043e9e:	2b00      	cmp	r3, #0
 8043ea0:	d116      	bne.n	8043ed0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043ea2:	4b47      	ldr	r3, [pc, #284]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043ea4:	681b      	ldr	r3, [r3, #0]
 8043ea6:	f003 0302 	and.w	r3, r3, #2
 8043eaa:	2b00      	cmp	r3, #0
 8043eac:	d005      	beq.n	8043eba <HAL_RCC_OscConfig+0x17a>
 8043eae:	687b      	ldr	r3, [r7, #4]
 8043eb0:	68db      	ldr	r3, [r3, #12]
 8043eb2:	2b01      	cmp	r3, #1
 8043eb4:	d001      	beq.n	8043eba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8043eb6:	2301      	movs	r3, #1
 8043eb8:	e1e9      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043eba:	4b41      	ldr	r3, [pc, #260]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043ebc:	681b      	ldr	r3, [r3, #0]
 8043ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8043ec2:	687b      	ldr	r3, [r7, #4]
 8043ec4:	691b      	ldr	r3, [r3, #16]
 8043ec6:	00db      	lsls	r3, r3, #3
 8043ec8:	493d      	ldr	r1, [pc, #244]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043eca:	4313      	orrs	r3, r2
 8043ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8043ece:	e040      	b.n	8043f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8043ed0:	687b      	ldr	r3, [r7, #4]
 8043ed2:	68db      	ldr	r3, [r3, #12]
 8043ed4:	2b00      	cmp	r3, #0
 8043ed6:	d023      	beq.n	8043f20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8043ed8:	4b39      	ldr	r3, [pc, #228]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043eda:	681b      	ldr	r3, [r3, #0]
 8043edc:	4a38      	ldr	r2, [pc, #224]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043ede:	f043 0301 	orr.w	r3, r3, #1
 8043ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043ee4:	f7fd fd60 	bl	80419a8 <HAL_GetTick>
 8043ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043eea:	e008      	b.n	8043efe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043eec:	f7fd fd5c 	bl	80419a8 <HAL_GetTick>
 8043ef0:	4602      	mov	r2, r0
 8043ef2:	693b      	ldr	r3, [r7, #16]
 8043ef4:	1ad3      	subs	r3, r2, r3
 8043ef6:	2b02      	cmp	r3, #2
 8043ef8:	d901      	bls.n	8043efe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8043efa:	2303      	movs	r3, #3
 8043efc:	e1c7      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043efe:	4b30      	ldr	r3, [pc, #192]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f00:	681b      	ldr	r3, [r3, #0]
 8043f02:	f003 0302 	and.w	r3, r3, #2
 8043f06:	2b00      	cmp	r3, #0
 8043f08:	d0f0      	beq.n	8043eec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043f0a:	4b2d      	ldr	r3, [pc, #180]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f0c:	681b      	ldr	r3, [r3, #0]
 8043f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8043f12:	687b      	ldr	r3, [r7, #4]
 8043f14:	691b      	ldr	r3, [r3, #16]
 8043f16:	00db      	lsls	r3, r3, #3
 8043f18:	4929      	ldr	r1, [pc, #164]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f1a:	4313      	orrs	r3, r2
 8043f1c:	600b      	str	r3, [r1, #0]
 8043f1e:	e018      	b.n	8043f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8043f20:	4b27      	ldr	r3, [pc, #156]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f22:	681b      	ldr	r3, [r3, #0]
 8043f24:	4a26      	ldr	r2, [pc, #152]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f26:	f023 0301 	bic.w	r3, r3, #1
 8043f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043f2c:	f7fd fd3c 	bl	80419a8 <HAL_GetTick>
 8043f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043f32:	e008      	b.n	8043f46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043f34:	f7fd fd38 	bl	80419a8 <HAL_GetTick>
 8043f38:	4602      	mov	r2, r0
 8043f3a:	693b      	ldr	r3, [r7, #16]
 8043f3c:	1ad3      	subs	r3, r2, r3
 8043f3e:	2b02      	cmp	r3, #2
 8043f40:	d901      	bls.n	8043f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8043f42:	2303      	movs	r3, #3
 8043f44:	e1a3      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8043f46:	4b1e      	ldr	r3, [pc, #120]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f48:	681b      	ldr	r3, [r3, #0]
 8043f4a:	f003 0302 	and.w	r3, r3, #2
 8043f4e:	2b00      	cmp	r3, #0
 8043f50:	d1f0      	bne.n	8043f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8043f52:	687b      	ldr	r3, [r7, #4]
 8043f54:	681b      	ldr	r3, [r3, #0]
 8043f56:	f003 0308 	and.w	r3, r3, #8
 8043f5a:	2b00      	cmp	r3, #0
 8043f5c:	d038      	beq.n	8043fd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8043f5e:	687b      	ldr	r3, [r7, #4]
 8043f60:	695b      	ldr	r3, [r3, #20]
 8043f62:	2b00      	cmp	r3, #0
 8043f64:	d019      	beq.n	8043f9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8043f66:	4b16      	ldr	r3, [pc, #88]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043f6a:	4a15      	ldr	r2, [pc, #84]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f6c:	f043 0301 	orr.w	r3, r3, #1
 8043f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043f72:	f7fd fd19 	bl	80419a8 <HAL_GetTick>
 8043f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043f78:	e008      	b.n	8043f8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043f7a:	f7fd fd15 	bl	80419a8 <HAL_GetTick>
 8043f7e:	4602      	mov	r2, r0
 8043f80:	693b      	ldr	r3, [r7, #16]
 8043f82:	1ad3      	subs	r3, r2, r3
 8043f84:	2b02      	cmp	r3, #2
 8043f86:	d901      	bls.n	8043f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8043f88:	2303      	movs	r3, #3
 8043f8a:	e180      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043f8c:	4b0c      	ldr	r3, [pc, #48]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043f90:	f003 0302 	and.w	r3, r3, #2
 8043f94:	2b00      	cmp	r3, #0
 8043f96:	d0f0      	beq.n	8043f7a <HAL_RCC_OscConfig+0x23a>
 8043f98:	e01a      	b.n	8043fd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8043f9a:	4b09      	ldr	r3, [pc, #36]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043f9e:	4a08      	ldr	r2, [pc, #32]	; (8043fc0 <HAL_RCC_OscConfig+0x280>)
 8043fa0:	f023 0301 	bic.w	r3, r3, #1
 8043fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043fa6:	f7fd fcff 	bl	80419a8 <HAL_GetTick>
 8043faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043fac:	e00a      	b.n	8043fc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043fae:	f7fd fcfb 	bl	80419a8 <HAL_GetTick>
 8043fb2:	4602      	mov	r2, r0
 8043fb4:	693b      	ldr	r3, [r7, #16]
 8043fb6:	1ad3      	subs	r3, r2, r3
 8043fb8:	2b02      	cmp	r3, #2
 8043fba:	d903      	bls.n	8043fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8043fbc:	2303      	movs	r3, #3
 8043fbe:	e166      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
 8043fc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8043fc4:	4b92      	ldr	r3, [pc, #584]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8043fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043fc8:	f003 0302 	and.w	r3, r3, #2
 8043fcc:	2b00      	cmp	r3, #0
 8043fce:	d1ee      	bne.n	8043fae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8043fd0:	687b      	ldr	r3, [r7, #4]
 8043fd2:	681b      	ldr	r3, [r3, #0]
 8043fd4:	f003 0304 	and.w	r3, r3, #4
 8043fd8:	2b00      	cmp	r3, #0
 8043fda:	f000 80a4 	beq.w	8044126 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8043fde:	4b8c      	ldr	r3, [pc, #560]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8043fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043fe6:	2b00      	cmp	r3, #0
 8043fe8:	d10d      	bne.n	8044006 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8043fea:	4b89      	ldr	r3, [pc, #548]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8043fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043fee:	4a88      	ldr	r2, [pc, #544]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8043ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8043ff6:	4b86      	ldr	r3, [pc, #536]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8043ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043ffe:	60bb      	str	r3, [r7, #8]
 8044000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8044002:	2301      	movs	r3, #1
 8044004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8044006:	4b83      	ldr	r3, [pc, #524]	; (8044214 <HAL_RCC_OscConfig+0x4d4>)
 8044008:	681b      	ldr	r3, [r3, #0]
 804400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804400e:	2b00      	cmp	r3, #0
 8044010:	d118      	bne.n	8044044 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8044012:	4b80      	ldr	r3, [pc, #512]	; (8044214 <HAL_RCC_OscConfig+0x4d4>)
 8044014:	681b      	ldr	r3, [r3, #0]
 8044016:	4a7f      	ldr	r2, [pc, #508]	; (8044214 <HAL_RCC_OscConfig+0x4d4>)
 8044018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804401c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804401e:	f7fd fcc3 	bl	80419a8 <HAL_GetTick>
 8044022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8044024:	e008      	b.n	8044038 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044026:	f7fd fcbf 	bl	80419a8 <HAL_GetTick>
 804402a:	4602      	mov	r2, r0
 804402c:	693b      	ldr	r3, [r7, #16]
 804402e:	1ad3      	subs	r3, r2, r3
 8044030:	2b64      	cmp	r3, #100	; 0x64
 8044032:	d901      	bls.n	8044038 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8044034:	2303      	movs	r3, #3
 8044036:	e12a      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8044038:	4b76      	ldr	r3, [pc, #472]	; (8044214 <HAL_RCC_OscConfig+0x4d4>)
 804403a:	681b      	ldr	r3, [r3, #0]
 804403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044040:	2b00      	cmp	r3, #0
 8044042:	d0f0      	beq.n	8044026 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8044044:	687b      	ldr	r3, [r7, #4]
 8044046:	689b      	ldr	r3, [r3, #8]
 8044048:	2b01      	cmp	r3, #1
 804404a:	d106      	bne.n	804405a <HAL_RCC_OscConfig+0x31a>
 804404c:	4b70      	ldr	r3, [pc, #448]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 804404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044050:	4a6f      	ldr	r2, [pc, #444]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044052:	f043 0301 	orr.w	r3, r3, #1
 8044056:	6713      	str	r3, [r2, #112]	; 0x70
 8044058:	e02d      	b.n	80440b6 <HAL_RCC_OscConfig+0x376>
 804405a:	687b      	ldr	r3, [r7, #4]
 804405c:	689b      	ldr	r3, [r3, #8]
 804405e:	2b00      	cmp	r3, #0
 8044060:	d10c      	bne.n	804407c <HAL_RCC_OscConfig+0x33c>
 8044062:	4b6b      	ldr	r3, [pc, #428]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044066:	4a6a      	ldr	r2, [pc, #424]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044068:	f023 0301 	bic.w	r3, r3, #1
 804406c:	6713      	str	r3, [r2, #112]	; 0x70
 804406e:	4b68      	ldr	r3, [pc, #416]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044072:	4a67      	ldr	r2, [pc, #412]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044074:	f023 0304 	bic.w	r3, r3, #4
 8044078:	6713      	str	r3, [r2, #112]	; 0x70
 804407a:	e01c      	b.n	80440b6 <HAL_RCC_OscConfig+0x376>
 804407c:	687b      	ldr	r3, [r7, #4]
 804407e:	689b      	ldr	r3, [r3, #8]
 8044080:	2b05      	cmp	r3, #5
 8044082:	d10c      	bne.n	804409e <HAL_RCC_OscConfig+0x35e>
 8044084:	4b62      	ldr	r3, [pc, #392]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044088:	4a61      	ldr	r2, [pc, #388]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 804408a:	f043 0304 	orr.w	r3, r3, #4
 804408e:	6713      	str	r3, [r2, #112]	; 0x70
 8044090:	4b5f      	ldr	r3, [pc, #380]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044094:	4a5e      	ldr	r2, [pc, #376]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044096:	f043 0301 	orr.w	r3, r3, #1
 804409a:	6713      	str	r3, [r2, #112]	; 0x70
 804409c:	e00b      	b.n	80440b6 <HAL_RCC_OscConfig+0x376>
 804409e:	4b5c      	ldr	r3, [pc, #368]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80440a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80440a2:	4a5b      	ldr	r2, [pc, #364]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80440a4:	f023 0301 	bic.w	r3, r3, #1
 80440a8:	6713      	str	r3, [r2, #112]	; 0x70
 80440aa:	4b59      	ldr	r3, [pc, #356]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80440ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80440ae:	4a58      	ldr	r2, [pc, #352]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80440b0:	f023 0304 	bic.w	r3, r3, #4
 80440b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80440b6:	687b      	ldr	r3, [r7, #4]
 80440b8:	689b      	ldr	r3, [r3, #8]
 80440ba:	2b00      	cmp	r3, #0
 80440bc:	d015      	beq.n	80440ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80440be:	f7fd fc73 	bl	80419a8 <HAL_GetTick>
 80440c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80440c4:	e00a      	b.n	80440dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80440c6:	f7fd fc6f 	bl	80419a8 <HAL_GetTick>
 80440ca:	4602      	mov	r2, r0
 80440cc:	693b      	ldr	r3, [r7, #16]
 80440ce:	1ad3      	subs	r3, r2, r3
 80440d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80440d4:	4293      	cmp	r3, r2
 80440d6:	d901      	bls.n	80440dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80440d8:	2303      	movs	r3, #3
 80440da:	e0d8      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80440dc:	4b4c      	ldr	r3, [pc, #304]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80440de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80440e0:	f003 0302 	and.w	r3, r3, #2
 80440e4:	2b00      	cmp	r3, #0
 80440e6:	d0ee      	beq.n	80440c6 <HAL_RCC_OscConfig+0x386>
 80440e8:	e014      	b.n	8044114 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80440ea:	f7fd fc5d 	bl	80419a8 <HAL_GetTick>
 80440ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80440f0:	e00a      	b.n	8044108 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80440f2:	f7fd fc59 	bl	80419a8 <HAL_GetTick>
 80440f6:	4602      	mov	r2, r0
 80440f8:	693b      	ldr	r3, [r7, #16]
 80440fa:	1ad3      	subs	r3, r2, r3
 80440fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8044100:	4293      	cmp	r3, r2
 8044102:	d901      	bls.n	8044108 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8044104:	2303      	movs	r3, #3
 8044106:	e0c2      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8044108:	4b41      	ldr	r3, [pc, #260]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 804410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804410c:	f003 0302 	and.w	r3, r3, #2
 8044110:	2b00      	cmp	r3, #0
 8044112:	d1ee      	bne.n	80440f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8044114:	7dfb      	ldrb	r3, [r7, #23]
 8044116:	2b01      	cmp	r3, #1
 8044118:	d105      	bne.n	8044126 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804411a:	4b3d      	ldr	r3, [pc, #244]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 804411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804411e:	4a3c      	ldr	r2, [pc, #240]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8044124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8044126:	687b      	ldr	r3, [r7, #4]
 8044128:	699b      	ldr	r3, [r3, #24]
 804412a:	2b00      	cmp	r3, #0
 804412c:	f000 80ae 	beq.w	804428c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8044130:	4b37      	ldr	r3, [pc, #220]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044132:	689b      	ldr	r3, [r3, #8]
 8044134:	f003 030c 	and.w	r3, r3, #12
 8044138:	2b08      	cmp	r3, #8
 804413a:	d06d      	beq.n	8044218 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 804413c:	687b      	ldr	r3, [r7, #4]
 804413e:	699b      	ldr	r3, [r3, #24]
 8044140:	2b02      	cmp	r3, #2
 8044142:	d14b      	bne.n	80441dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8044144:	4b32      	ldr	r3, [pc, #200]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044146:	681b      	ldr	r3, [r3, #0]
 8044148:	4a31      	ldr	r2, [pc, #196]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 804414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044150:	f7fd fc2a 	bl	80419a8 <HAL_GetTick>
 8044154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044156:	e008      	b.n	804416a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8044158:	f7fd fc26 	bl	80419a8 <HAL_GetTick>
 804415c:	4602      	mov	r2, r0
 804415e:	693b      	ldr	r3, [r7, #16]
 8044160:	1ad3      	subs	r3, r2, r3
 8044162:	2b02      	cmp	r3, #2
 8044164:	d901      	bls.n	804416a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8044166:	2303      	movs	r3, #3
 8044168:	e091      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804416a:	4b29      	ldr	r3, [pc, #164]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 804416c:	681b      	ldr	r3, [r3, #0]
 804416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044172:	2b00      	cmp	r3, #0
 8044174:	d1f0      	bne.n	8044158 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8044176:	687b      	ldr	r3, [r7, #4]
 8044178:	69da      	ldr	r2, [r3, #28]
 804417a:	687b      	ldr	r3, [r7, #4]
 804417c:	6a1b      	ldr	r3, [r3, #32]
 804417e:	431a      	orrs	r2, r3
 8044180:	687b      	ldr	r3, [r7, #4]
 8044182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044184:	019b      	lsls	r3, r3, #6
 8044186:	431a      	orrs	r2, r3
 8044188:	687b      	ldr	r3, [r7, #4]
 804418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804418c:	085b      	lsrs	r3, r3, #1
 804418e:	3b01      	subs	r3, #1
 8044190:	041b      	lsls	r3, r3, #16
 8044192:	431a      	orrs	r2, r3
 8044194:	687b      	ldr	r3, [r7, #4]
 8044196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044198:	061b      	lsls	r3, r3, #24
 804419a:	431a      	orrs	r2, r3
 804419c:	687b      	ldr	r3, [r7, #4]
 804419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80441a0:	071b      	lsls	r3, r3, #28
 80441a2:	491b      	ldr	r1, [pc, #108]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80441a4:	4313      	orrs	r3, r2
 80441a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80441a8:	4b19      	ldr	r3, [pc, #100]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80441aa:	681b      	ldr	r3, [r3, #0]
 80441ac:	4a18      	ldr	r2, [pc, #96]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80441ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80441b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80441b4:	f7fd fbf8 	bl	80419a8 <HAL_GetTick>
 80441b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80441ba:	e008      	b.n	80441ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80441bc:	f7fd fbf4 	bl	80419a8 <HAL_GetTick>
 80441c0:	4602      	mov	r2, r0
 80441c2:	693b      	ldr	r3, [r7, #16]
 80441c4:	1ad3      	subs	r3, r2, r3
 80441c6:	2b02      	cmp	r3, #2
 80441c8:	d901      	bls.n	80441ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80441ca:	2303      	movs	r3, #3
 80441cc:	e05f      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80441ce:	4b10      	ldr	r3, [pc, #64]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80441d0:	681b      	ldr	r3, [r3, #0]
 80441d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80441d6:	2b00      	cmp	r3, #0
 80441d8:	d0f0      	beq.n	80441bc <HAL_RCC_OscConfig+0x47c>
 80441da:	e057      	b.n	804428c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80441dc:	4b0c      	ldr	r3, [pc, #48]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80441de:	681b      	ldr	r3, [r3, #0]
 80441e0:	4a0b      	ldr	r2, [pc, #44]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 80441e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80441e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80441e8:	f7fd fbde 	bl	80419a8 <HAL_GetTick>
 80441ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80441ee:	e008      	b.n	8044202 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80441f0:	f7fd fbda 	bl	80419a8 <HAL_GetTick>
 80441f4:	4602      	mov	r2, r0
 80441f6:	693b      	ldr	r3, [r7, #16]
 80441f8:	1ad3      	subs	r3, r2, r3
 80441fa:	2b02      	cmp	r3, #2
 80441fc:	d901      	bls.n	8044202 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80441fe:	2303      	movs	r3, #3
 8044200:	e045      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044202:	4b03      	ldr	r3, [pc, #12]	; (8044210 <HAL_RCC_OscConfig+0x4d0>)
 8044204:	681b      	ldr	r3, [r3, #0]
 8044206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804420a:	2b00      	cmp	r3, #0
 804420c:	d1f0      	bne.n	80441f0 <HAL_RCC_OscConfig+0x4b0>
 804420e:	e03d      	b.n	804428c <HAL_RCC_OscConfig+0x54c>
 8044210:	40023800 	.word	0x40023800
 8044214:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8044218:	4b1f      	ldr	r3, [pc, #124]	; (8044298 <HAL_RCC_OscConfig+0x558>)
 804421a:	685b      	ldr	r3, [r3, #4]
 804421c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804421e:	687b      	ldr	r3, [r7, #4]
 8044220:	699b      	ldr	r3, [r3, #24]
 8044222:	2b01      	cmp	r3, #1
 8044224:	d030      	beq.n	8044288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8044226:	68fb      	ldr	r3, [r7, #12]
 8044228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 804422c:	687b      	ldr	r3, [r7, #4]
 804422e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8044230:	429a      	cmp	r2, r3
 8044232:	d129      	bne.n	8044288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8044234:	68fb      	ldr	r3, [r7, #12]
 8044236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804423a:	687b      	ldr	r3, [r7, #4]
 804423c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804423e:	429a      	cmp	r2, r3
 8044240:	d122      	bne.n	8044288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8044242:	68fa      	ldr	r2, [r7, #12]
 8044244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8044248:	4013      	ands	r3, r2
 804424a:	687a      	ldr	r2, [r7, #4]
 804424c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804424e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8044250:	4293      	cmp	r3, r2
 8044252:	d119      	bne.n	8044288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8044254:	68fb      	ldr	r3, [r7, #12]
 8044256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804425a:	687b      	ldr	r3, [r7, #4]
 804425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804425e:	085b      	lsrs	r3, r3, #1
 8044260:	3b01      	subs	r3, #1
 8044262:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8044264:	429a      	cmp	r2, r3
 8044266:	d10f      	bne.n	8044288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8044268:	68fb      	ldr	r3, [r7, #12]
 804426a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 804426e:	687b      	ldr	r3, [r7, #4]
 8044270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044272:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8044274:	429a      	cmp	r2, r3
 8044276:	d107      	bne.n	8044288 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8044278:	68fb      	ldr	r3, [r7, #12]
 804427a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 804427e:	687b      	ldr	r3, [r7, #4]
 8044280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044282:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8044284:	429a      	cmp	r2, r3
 8044286:	d001      	beq.n	804428c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8044288:	2301      	movs	r3, #1
 804428a:	e000      	b.n	804428e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 804428c:	2300      	movs	r3, #0
}
 804428e:	4618      	mov	r0, r3
 8044290:	3718      	adds	r7, #24
 8044292:	46bd      	mov	sp, r7
 8044294:	bd80      	pop	{r7, pc}
 8044296:	bf00      	nop
 8044298:	40023800 	.word	0x40023800

0804429c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804429c:	b580      	push	{r7, lr}
 804429e:	b084      	sub	sp, #16
 80442a0:	af00      	add	r7, sp, #0
 80442a2:	6078      	str	r0, [r7, #4]
 80442a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80442a6:	2300      	movs	r3, #0
 80442a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80442aa:	687b      	ldr	r3, [r7, #4]
 80442ac:	2b00      	cmp	r3, #0
 80442ae:	d101      	bne.n	80442b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80442b0:	2301      	movs	r3, #1
 80442b2:	e0d0      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80442b4:	4b6a      	ldr	r3, [pc, #424]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80442b6:	681b      	ldr	r3, [r3, #0]
 80442b8:	f003 030f 	and.w	r3, r3, #15
 80442bc:	683a      	ldr	r2, [r7, #0]
 80442be:	429a      	cmp	r2, r3
 80442c0:	d910      	bls.n	80442e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80442c2:	4b67      	ldr	r3, [pc, #412]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80442c4:	681b      	ldr	r3, [r3, #0]
 80442c6:	f023 020f 	bic.w	r2, r3, #15
 80442ca:	4965      	ldr	r1, [pc, #404]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80442cc:	683b      	ldr	r3, [r7, #0]
 80442ce:	4313      	orrs	r3, r2
 80442d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80442d2:	4b63      	ldr	r3, [pc, #396]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80442d4:	681b      	ldr	r3, [r3, #0]
 80442d6:	f003 030f 	and.w	r3, r3, #15
 80442da:	683a      	ldr	r2, [r7, #0]
 80442dc:	429a      	cmp	r2, r3
 80442de:	d001      	beq.n	80442e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80442e0:	2301      	movs	r3, #1
 80442e2:	e0b8      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80442e4:	687b      	ldr	r3, [r7, #4]
 80442e6:	681b      	ldr	r3, [r3, #0]
 80442e8:	f003 0302 	and.w	r3, r3, #2
 80442ec:	2b00      	cmp	r3, #0
 80442ee:	d020      	beq.n	8044332 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80442f0:	687b      	ldr	r3, [r7, #4]
 80442f2:	681b      	ldr	r3, [r3, #0]
 80442f4:	f003 0304 	and.w	r3, r3, #4
 80442f8:	2b00      	cmp	r3, #0
 80442fa:	d005      	beq.n	8044308 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80442fc:	4b59      	ldr	r3, [pc, #356]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 80442fe:	689b      	ldr	r3, [r3, #8]
 8044300:	4a58      	ldr	r2, [pc, #352]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8044306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8044308:	687b      	ldr	r3, [r7, #4]
 804430a:	681b      	ldr	r3, [r3, #0]
 804430c:	f003 0308 	and.w	r3, r3, #8
 8044310:	2b00      	cmp	r3, #0
 8044312:	d005      	beq.n	8044320 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8044314:	4b53      	ldr	r3, [pc, #332]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044316:	689b      	ldr	r3, [r3, #8]
 8044318:	4a52      	ldr	r2, [pc, #328]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 804431a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 804431e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8044320:	4b50      	ldr	r3, [pc, #320]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044322:	689b      	ldr	r3, [r3, #8]
 8044324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8044328:	687b      	ldr	r3, [r7, #4]
 804432a:	689b      	ldr	r3, [r3, #8]
 804432c:	494d      	ldr	r1, [pc, #308]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 804432e:	4313      	orrs	r3, r2
 8044330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8044332:	687b      	ldr	r3, [r7, #4]
 8044334:	681b      	ldr	r3, [r3, #0]
 8044336:	f003 0301 	and.w	r3, r3, #1
 804433a:	2b00      	cmp	r3, #0
 804433c:	d040      	beq.n	80443c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804433e:	687b      	ldr	r3, [r7, #4]
 8044340:	685b      	ldr	r3, [r3, #4]
 8044342:	2b01      	cmp	r3, #1
 8044344:	d107      	bne.n	8044356 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044346:	4b47      	ldr	r3, [pc, #284]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044348:	681b      	ldr	r3, [r3, #0]
 804434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804434e:	2b00      	cmp	r3, #0
 8044350:	d115      	bne.n	804437e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8044352:	2301      	movs	r3, #1
 8044354:	e07f      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8044356:	687b      	ldr	r3, [r7, #4]
 8044358:	685b      	ldr	r3, [r3, #4]
 804435a:	2b02      	cmp	r3, #2
 804435c:	d107      	bne.n	804436e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804435e:	4b41      	ldr	r3, [pc, #260]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044360:	681b      	ldr	r3, [r3, #0]
 8044362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044366:	2b00      	cmp	r3, #0
 8044368:	d109      	bne.n	804437e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804436a:	2301      	movs	r3, #1
 804436c:	e073      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804436e:	4b3d      	ldr	r3, [pc, #244]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044370:	681b      	ldr	r3, [r3, #0]
 8044372:	f003 0302 	and.w	r3, r3, #2
 8044376:	2b00      	cmp	r3, #0
 8044378:	d101      	bne.n	804437e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804437a:	2301      	movs	r3, #1
 804437c:	e06b      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804437e:	4b39      	ldr	r3, [pc, #228]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044380:	689b      	ldr	r3, [r3, #8]
 8044382:	f023 0203 	bic.w	r2, r3, #3
 8044386:	687b      	ldr	r3, [r7, #4]
 8044388:	685b      	ldr	r3, [r3, #4]
 804438a:	4936      	ldr	r1, [pc, #216]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 804438c:	4313      	orrs	r3, r2
 804438e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044390:	f7fd fb0a 	bl	80419a8 <HAL_GetTick>
 8044394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044396:	e00a      	b.n	80443ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8044398:	f7fd fb06 	bl	80419a8 <HAL_GetTick>
 804439c:	4602      	mov	r2, r0
 804439e:	68fb      	ldr	r3, [r7, #12]
 80443a0:	1ad3      	subs	r3, r2, r3
 80443a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80443a6:	4293      	cmp	r3, r2
 80443a8:	d901      	bls.n	80443ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80443aa:	2303      	movs	r3, #3
 80443ac:	e053      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80443ae:	4b2d      	ldr	r3, [pc, #180]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 80443b0:	689b      	ldr	r3, [r3, #8]
 80443b2:	f003 020c 	and.w	r2, r3, #12
 80443b6:	687b      	ldr	r3, [r7, #4]
 80443b8:	685b      	ldr	r3, [r3, #4]
 80443ba:	009b      	lsls	r3, r3, #2
 80443bc:	429a      	cmp	r2, r3
 80443be:	d1eb      	bne.n	8044398 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80443c0:	4b27      	ldr	r3, [pc, #156]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80443c2:	681b      	ldr	r3, [r3, #0]
 80443c4:	f003 030f 	and.w	r3, r3, #15
 80443c8:	683a      	ldr	r2, [r7, #0]
 80443ca:	429a      	cmp	r2, r3
 80443cc:	d210      	bcs.n	80443f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80443ce:	4b24      	ldr	r3, [pc, #144]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80443d0:	681b      	ldr	r3, [r3, #0]
 80443d2:	f023 020f 	bic.w	r2, r3, #15
 80443d6:	4922      	ldr	r1, [pc, #136]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80443d8:	683b      	ldr	r3, [r7, #0]
 80443da:	4313      	orrs	r3, r2
 80443dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80443de:	4b20      	ldr	r3, [pc, #128]	; (8044460 <HAL_RCC_ClockConfig+0x1c4>)
 80443e0:	681b      	ldr	r3, [r3, #0]
 80443e2:	f003 030f 	and.w	r3, r3, #15
 80443e6:	683a      	ldr	r2, [r7, #0]
 80443e8:	429a      	cmp	r2, r3
 80443ea:	d001      	beq.n	80443f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80443ec:	2301      	movs	r3, #1
 80443ee:	e032      	b.n	8044456 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80443f0:	687b      	ldr	r3, [r7, #4]
 80443f2:	681b      	ldr	r3, [r3, #0]
 80443f4:	f003 0304 	and.w	r3, r3, #4
 80443f8:	2b00      	cmp	r3, #0
 80443fa:	d008      	beq.n	804440e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80443fc:	4b19      	ldr	r3, [pc, #100]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 80443fe:	689b      	ldr	r3, [r3, #8]
 8044400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8044404:	687b      	ldr	r3, [r7, #4]
 8044406:	68db      	ldr	r3, [r3, #12]
 8044408:	4916      	ldr	r1, [pc, #88]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 804440a:	4313      	orrs	r3, r2
 804440c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804440e:	687b      	ldr	r3, [r7, #4]
 8044410:	681b      	ldr	r3, [r3, #0]
 8044412:	f003 0308 	and.w	r3, r3, #8
 8044416:	2b00      	cmp	r3, #0
 8044418:	d009      	beq.n	804442e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 804441a:	4b12      	ldr	r3, [pc, #72]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 804441c:	689b      	ldr	r3, [r3, #8]
 804441e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8044422:	687b      	ldr	r3, [r7, #4]
 8044424:	691b      	ldr	r3, [r3, #16]
 8044426:	00db      	lsls	r3, r3, #3
 8044428:	490e      	ldr	r1, [pc, #56]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 804442a:	4313      	orrs	r3, r2
 804442c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 804442e:	f000 f821 	bl	8044474 <HAL_RCC_GetSysClockFreq>
 8044432:	4602      	mov	r2, r0
 8044434:	4b0b      	ldr	r3, [pc, #44]	; (8044464 <HAL_RCC_ClockConfig+0x1c8>)
 8044436:	689b      	ldr	r3, [r3, #8]
 8044438:	091b      	lsrs	r3, r3, #4
 804443a:	f003 030f 	and.w	r3, r3, #15
 804443e:	490a      	ldr	r1, [pc, #40]	; (8044468 <HAL_RCC_ClockConfig+0x1cc>)
 8044440:	5ccb      	ldrb	r3, [r1, r3]
 8044442:	fa22 f303 	lsr.w	r3, r2, r3
 8044446:	4a09      	ldr	r2, [pc, #36]	; (804446c <HAL_RCC_ClockConfig+0x1d0>)
 8044448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 804444a:	4b09      	ldr	r3, [pc, #36]	; (8044470 <HAL_RCC_ClockConfig+0x1d4>)
 804444c:	681b      	ldr	r3, [r3, #0]
 804444e:	4618      	mov	r0, r3
 8044450:	f7fc fe80 	bl	8041154 <HAL_InitTick>

  return HAL_OK;
 8044454:	2300      	movs	r3, #0
}
 8044456:	4618      	mov	r0, r3
 8044458:	3710      	adds	r7, #16
 804445a:	46bd      	mov	sp, r7
 804445c:	bd80      	pop	{r7, pc}
 804445e:	bf00      	nop
 8044460:	40023c00 	.word	0x40023c00
 8044464:	40023800 	.word	0x40023800
 8044468:	0805843c 	.word	0x0805843c
 804446c:	20000000 	.word	0x20000000
 8044470:	20000004 	.word	0x20000004

08044474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8044474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8044478:	b090      	sub	sp, #64	; 0x40
 804447a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 804447c:	2300      	movs	r3, #0
 804447e:	637b      	str	r3, [r7, #52]	; 0x34
 8044480:	2300      	movs	r3, #0
 8044482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8044484:	2300      	movs	r3, #0
 8044486:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8044488:	2300      	movs	r3, #0
 804448a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 804448c:	4b59      	ldr	r3, [pc, #356]	; (80445f4 <HAL_RCC_GetSysClockFreq+0x180>)
 804448e:	689b      	ldr	r3, [r3, #8]
 8044490:	f003 030c 	and.w	r3, r3, #12
 8044494:	2b08      	cmp	r3, #8
 8044496:	d00d      	beq.n	80444b4 <HAL_RCC_GetSysClockFreq+0x40>
 8044498:	2b08      	cmp	r3, #8
 804449a:	f200 80a1 	bhi.w	80445e0 <HAL_RCC_GetSysClockFreq+0x16c>
 804449e:	2b00      	cmp	r3, #0
 80444a0:	d002      	beq.n	80444a8 <HAL_RCC_GetSysClockFreq+0x34>
 80444a2:	2b04      	cmp	r3, #4
 80444a4:	d003      	beq.n	80444ae <HAL_RCC_GetSysClockFreq+0x3a>
 80444a6:	e09b      	b.n	80445e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80444a8:	4b53      	ldr	r3, [pc, #332]	; (80445f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80444aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80444ac:	e09b      	b.n	80445e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80444ae:	4b53      	ldr	r3, [pc, #332]	; (80445fc <HAL_RCC_GetSysClockFreq+0x188>)
 80444b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80444b2:	e098      	b.n	80445e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80444b4:	4b4f      	ldr	r3, [pc, #316]	; (80445f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80444b6:	685b      	ldr	r3, [r3, #4]
 80444b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80444bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80444be:	4b4d      	ldr	r3, [pc, #308]	; (80445f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80444c0:	685b      	ldr	r3, [r3, #4]
 80444c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80444c6:	2b00      	cmp	r3, #0
 80444c8:	d028      	beq.n	804451c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80444ca:	4b4a      	ldr	r3, [pc, #296]	; (80445f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80444cc:	685b      	ldr	r3, [r3, #4]
 80444ce:	099b      	lsrs	r3, r3, #6
 80444d0:	2200      	movs	r2, #0
 80444d2:	623b      	str	r3, [r7, #32]
 80444d4:	627a      	str	r2, [r7, #36]	; 0x24
 80444d6:	6a3b      	ldr	r3, [r7, #32]
 80444d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80444dc:	2100      	movs	r1, #0
 80444de:	4b47      	ldr	r3, [pc, #284]	; (80445fc <HAL_RCC_GetSysClockFreq+0x188>)
 80444e0:	fb03 f201 	mul.w	r2, r3, r1
 80444e4:	2300      	movs	r3, #0
 80444e6:	fb00 f303 	mul.w	r3, r0, r3
 80444ea:	4413      	add	r3, r2
 80444ec:	4a43      	ldr	r2, [pc, #268]	; (80445fc <HAL_RCC_GetSysClockFreq+0x188>)
 80444ee:	fba0 1202 	umull	r1, r2, r0, r2
 80444f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80444f4:	460a      	mov	r2, r1
 80444f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80444f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80444fa:	4413      	add	r3, r2
 80444fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80444fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044500:	2200      	movs	r2, #0
 8044502:	61bb      	str	r3, [r7, #24]
 8044504:	61fa      	str	r2, [r7, #28]
 8044506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 804450a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 804450e:	f7fb fee7 	bl	80402e0 <__aeabi_uldivmod>
 8044512:	4602      	mov	r2, r0
 8044514:	460b      	mov	r3, r1
 8044516:	4613      	mov	r3, r2
 8044518:	63fb      	str	r3, [r7, #60]	; 0x3c
 804451a:	e053      	b.n	80445c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804451c:	4b35      	ldr	r3, [pc, #212]	; (80445f4 <HAL_RCC_GetSysClockFreq+0x180>)
 804451e:	685b      	ldr	r3, [r3, #4]
 8044520:	099b      	lsrs	r3, r3, #6
 8044522:	2200      	movs	r2, #0
 8044524:	613b      	str	r3, [r7, #16]
 8044526:	617a      	str	r2, [r7, #20]
 8044528:	693b      	ldr	r3, [r7, #16]
 804452a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 804452e:	f04f 0b00 	mov.w	fp, #0
 8044532:	4652      	mov	r2, sl
 8044534:	465b      	mov	r3, fp
 8044536:	f04f 0000 	mov.w	r0, #0
 804453a:	f04f 0100 	mov.w	r1, #0
 804453e:	0159      	lsls	r1, r3, #5
 8044540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8044544:	0150      	lsls	r0, r2, #5
 8044546:	4602      	mov	r2, r0
 8044548:	460b      	mov	r3, r1
 804454a:	ebb2 080a 	subs.w	r8, r2, sl
 804454e:	eb63 090b 	sbc.w	r9, r3, fp
 8044552:	f04f 0200 	mov.w	r2, #0
 8044556:	f04f 0300 	mov.w	r3, #0
 804455a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 804455e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8044562:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8044566:	ebb2 0408 	subs.w	r4, r2, r8
 804456a:	eb63 0509 	sbc.w	r5, r3, r9
 804456e:	f04f 0200 	mov.w	r2, #0
 8044572:	f04f 0300 	mov.w	r3, #0
 8044576:	00eb      	lsls	r3, r5, #3
 8044578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 804457c:	00e2      	lsls	r2, r4, #3
 804457e:	4614      	mov	r4, r2
 8044580:	461d      	mov	r5, r3
 8044582:	eb14 030a 	adds.w	r3, r4, sl
 8044586:	603b      	str	r3, [r7, #0]
 8044588:	eb45 030b 	adc.w	r3, r5, fp
 804458c:	607b      	str	r3, [r7, #4]
 804458e:	f04f 0200 	mov.w	r2, #0
 8044592:	f04f 0300 	mov.w	r3, #0
 8044596:	e9d7 4500 	ldrd	r4, r5, [r7]
 804459a:	4629      	mov	r1, r5
 804459c:	028b      	lsls	r3, r1, #10
 804459e:	4621      	mov	r1, r4
 80445a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80445a4:	4621      	mov	r1, r4
 80445a6:	028a      	lsls	r2, r1, #10
 80445a8:	4610      	mov	r0, r2
 80445aa:	4619      	mov	r1, r3
 80445ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80445ae:	2200      	movs	r2, #0
 80445b0:	60bb      	str	r3, [r7, #8]
 80445b2:	60fa      	str	r2, [r7, #12]
 80445b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80445b8:	f7fb fe92 	bl	80402e0 <__aeabi_uldivmod>
 80445bc:	4602      	mov	r2, r0
 80445be:	460b      	mov	r3, r1
 80445c0:	4613      	mov	r3, r2
 80445c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80445c4:	4b0b      	ldr	r3, [pc, #44]	; (80445f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80445c6:	685b      	ldr	r3, [r3, #4]
 80445c8:	0c1b      	lsrs	r3, r3, #16
 80445ca:	f003 0303 	and.w	r3, r3, #3
 80445ce:	3301      	adds	r3, #1
 80445d0:	005b      	lsls	r3, r3, #1
 80445d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80445d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80445d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80445d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80445dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80445de:	e002      	b.n	80445e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80445e0:	4b05      	ldr	r3, [pc, #20]	; (80445f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80445e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80445e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80445e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80445e8:	4618      	mov	r0, r3
 80445ea:	3740      	adds	r7, #64	; 0x40
 80445ec:	46bd      	mov	sp, r7
 80445ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80445f2:	bf00      	nop
 80445f4:	40023800 	.word	0x40023800
 80445f8:	00f42400 	.word	0x00f42400
 80445fc:	017d7840 	.word	0x017d7840

08044600 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8044600:	b480      	push	{r7}
 8044602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8044604:	4b03      	ldr	r3, [pc, #12]	; (8044614 <HAL_RCC_GetHCLKFreq+0x14>)
 8044606:	681b      	ldr	r3, [r3, #0]
}
 8044608:	4618      	mov	r0, r3
 804460a:	46bd      	mov	sp, r7
 804460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044610:	4770      	bx	lr
 8044612:	bf00      	nop
 8044614:	20000000 	.word	0x20000000

08044618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8044618:	b580      	push	{r7, lr}
 804461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 804461c:	f7ff fff0 	bl	8044600 <HAL_RCC_GetHCLKFreq>
 8044620:	4602      	mov	r2, r0
 8044622:	4b05      	ldr	r3, [pc, #20]	; (8044638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8044624:	689b      	ldr	r3, [r3, #8]
 8044626:	0a9b      	lsrs	r3, r3, #10
 8044628:	f003 0307 	and.w	r3, r3, #7
 804462c:	4903      	ldr	r1, [pc, #12]	; (804463c <HAL_RCC_GetPCLK1Freq+0x24>)
 804462e:	5ccb      	ldrb	r3, [r1, r3]
 8044630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044634:	4618      	mov	r0, r3
 8044636:	bd80      	pop	{r7, pc}
 8044638:	40023800 	.word	0x40023800
 804463c:	0805844c 	.word	0x0805844c

08044640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8044640:	b580      	push	{r7, lr}
 8044642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8044644:	f7ff ffdc 	bl	8044600 <HAL_RCC_GetHCLKFreq>
 8044648:	4602      	mov	r2, r0
 804464a:	4b05      	ldr	r3, [pc, #20]	; (8044660 <HAL_RCC_GetPCLK2Freq+0x20>)
 804464c:	689b      	ldr	r3, [r3, #8]
 804464e:	0b5b      	lsrs	r3, r3, #13
 8044650:	f003 0307 	and.w	r3, r3, #7
 8044654:	4903      	ldr	r1, [pc, #12]	; (8044664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8044656:	5ccb      	ldrb	r3, [r1, r3]
 8044658:	fa22 f303 	lsr.w	r3, r2, r3
}
 804465c:	4618      	mov	r0, r3
 804465e:	bd80      	pop	{r7, pc}
 8044660:	40023800 	.word	0x40023800
 8044664:	0805844c 	.word	0x0805844c

08044668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8044668:	b480      	push	{r7}
 804466a:	b083      	sub	sp, #12
 804466c:	af00      	add	r7, sp, #0
 804466e:	6078      	str	r0, [r7, #4]
 8044670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8044672:	687b      	ldr	r3, [r7, #4]
 8044674:	220f      	movs	r2, #15
 8044676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8044678:	4b12      	ldr	r3, [pc, #72]	; (80446c4 <HAL_RCC_GetClockConfig+0x5c>)
 804467a:	689b      	ldr	r3, [r3, #8]
 804467c:	f003 0203 	and.w	r2, r3, #3
 8044680:	687b      	ldr	r3, [r7, #4]
 8044682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8044684:	4b0f      	ldr	r3, [pc, #60]	; (80446c4 <HAL_RCC_GetClockConfig+0x5c>)
 8044686:	689b      	ldr	r3, [r3, #8]
 8044688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 804468c:	687b      	ldr	r3, [r7, #4]
 804468e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8044690:	4b0c      	ldr	r3, [pc, #48]	; (80446c4 <HAL_RCC_GetClockConfig+0x5c>)
 8044692:	689b      	ldr	r3, [r3, #8]
 8044694:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8044698:	687b      	ldr	r3, [r7, #4]
 804469a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 804469c:	4b09      	ldr	r3, [pc, #36]	; (80446c4 <HAL_RCC_GetClockConfig+0x5c>)
 804469e:	689b      	ldr	r3, [r3, #8]
 80446a0:	08db      	lsrs	r3, r3, #3
 80446a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80446a6:	687b      	ldr	r3, [r7, #4]
 80446a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80446aa:	4b07      	ldr	r3, [pc, #28]	; (80446c8 <HAL_RCC_GetClockConfig+0x60>)
 80446ac:	681b      	ldr	r3, [r3, #0]
 80446ae:	f003 020f 	and.w	r2, r3, #15
 80446b2:	683b      	ldr	r3, [r7, #0]
 80446b4:	601a      	str	r2, [r3, #0]
}
 80446b6:	bf00      	nop
 80446b8:	370c      	adds	r7, #12
 80446ba:	46bd      	mov	sp, r7
 80446bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446c0:	4770      	bx	lr
 80446c2:	bf00      	nop
 80446c4:	40023800 	.word	0x40023800
 80446c8:	40023c00 	.word	0x40023c00

080446cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80446cc:	b580      	push	{r7, lr}
 80446ce:	b088      	sub	sp, #32
 80446d0:	af00      	add	r7, sp, #0
 80446d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80446d4:	2300      	movs	r3, #0
 80446d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80446d8:	2300      	movs	r3, #0
 80446da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80446dc:	2300      	movs	r3, #0
 80446de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80446e0:	2300      	movs	r3, #0
 80446e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80446e4:	2300      	movs	r3, #0
 80446e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80446e8:	687b      	ldr	r3, [r7, #4]
 80446ea:	681b      	ldr	r3, [r3, #0]
 80446ec:	f003 0301 	and.w	r3, r3, #1
 80446f0:	2b00      	cmp	r3, #0
 80446f2:	d012      	beq.n	804471a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80446f4:	4b69      	ldr	r3, [pc, #420]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80446f6:	689b      	ldr	r3, [r3, #8]
 80446f8:	4a68      	ldr	r2, [pc, #416]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80446fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80446fe:	6093      	str	r3, [r2, #8]
 8044700:	4b66      	ldr	r3, [pc, #408]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044702:	689a      	ldr	r2, [r3, #8]
 8044704:	687b      	ldr	r3, [r7, #4]
 8044706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044708:	4964      	ldr	r1, [pc, #400]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804470a:	4313      	orrs	r3, r2
 804470c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 804470e:	687b      	ldr	r3, [r7, #4]
 8044710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044712:	2b00      	cmp	r3, #0
 8044714:	d101      	bne.n	804471a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8044716:	2301      	movs	r3, #1
 8044718:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 804471a:	687b      	ldr	r3, [r7, #4]
 804471c:	681b      	ldr	r3, [r3, #0]
 804471e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8044722:	2b00      	cmp	r3, #0
 8044724:	d017      	beq.n	8044756 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8044726:	4b5d      	ldr	r3, [pc, #372]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804472c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8044730:	687b      	ldr	r3, [r7, #4]
 8044732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044734:	4959      	ldr	r1, [pc, #356]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044736:	4313      	orrs	r3, r2
 8044738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 804473c:	687b      	ldr	r3, [r7, #4]
 804473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044744:	d101      	bne.n	804474a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8044746:	2301      	movs	r3, #1
 8044748:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 804474a:	687b      	ldr	r3, [r7, #4]
 804474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804474e:	2b00      	cmp	r3, #0
 8044750:	d101      	bne.n	8044756 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8044752:	2301      	movs	r3, #1
 8044754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8044756:	687b      	ldr	r3, [r7, #4]
 8044758:	681b      	ldr	r3, [r3, #0]
 804475a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804475e:	2b00      	cmp	r3, #0
 8044760:	d017      	beq.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8044762:	4b4e      	ldr	r3, [pc, #312]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044768:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 804476c:	687b      	ldr	r3, [r7, #4]
 804476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044770:	494a      	ldr	r1, [pc, #296]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044772:	4313      	orrs	r3, r2
 8044774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8044778:	687b      	ldr	r3, [r7, #4]
 804477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8044780:	d101      	bne.n	8044786 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8044782:	2301      	movs	r3, #1
 8044784:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8044786:	687b      	ldr	r3, [r7, #4]
 8044788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804478a:	2b00      	cmp	r3, #0
 804478c:	d101      	bne.n	8044792 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 804478e:	2301      	movs	r3, #1
 8044790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8044792:	687b      	ldr	r3, [r7, #4]
 8044794:	681b      	ldr	r3, [r3, #0]
 8044796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804479a:	2b00      	cmp	r3, #0
 804479c:	d001      	beq.n	80447a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 804479e:	2301      	movs	r3, #1
 80447a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80447a2:	687b      	ldr	r3, [r7, #4]
 80447a4:	681b      	ldr	r3, [r3, #0]
 80447a6:	f003 0320 	and.w	r3, r3, #32
 80447aa:	2b00      	cmp	r3, #0
 80447ac:	f000 808b 	beq.w	80448c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80447b0:	4b3a      	ldr	r3, [pc, #232]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80447b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80447b4:	4a39      	ldr	r2, [pc, #228]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80447b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80447ba:	6413      	str	r3, [r2, #64]	; 0x40
 80447bc:	4b37      	ldr	r3, [pc, #220]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80447be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80447c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80447c4:	60bb      	str	r3, [r7, #8]
 80447c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80447c8:	4b35      	ldr	r3, [pc, #212]	; (80448a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80447ca:	681b      	ldr	r3, [r3, #0]
 80447cc:	4a34      	ldr	r2, [pc, #208]	; (80448a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80447ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80447d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80447d4:	f7fd f8e8 	bl	80419a8 <HAL_GetTick>
 80447d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80447da:	e008      	b.n	80447ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80447dc:	f7fd f8e4 	bl	80419a8 <HAL_GetTick>
 80447e0:	4602      	mov	r2, r0
 80447e2:	697b      	ldr	r3, [r7, #20]
 80447e4:	1ad3      	subs	r3, r2, r3
 80447e6:	2b64      	cmp	r3, #100	; 0x64
 80447e8:	d901      	bls.n	80447ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80447ea:	2303      	movs	r3, #3
 80447ec:	e38f      	b.n	8044f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80447ee:	4b2c      	ldr	r3, [pc, #176]	; (80448a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80447f0:	681b      	ldr	r3, [r3, #0]
 80447f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80447f6:	2b00      	cmp	r3, #0
 80447f8:	d0f0      	beq.n	80447dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80447fa:	4b28      	ldr	r3, [pc, #160]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80447fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80447fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044802:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8044804:	693b      	ldr	r3, [r7, #16]
 8044806:	2b00      	cmp	r3, #0
 8044808:	d035      	beq.n	8044876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 804480a:	687b      	ldr	r3, [r7, #4]
 804480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804480e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044812:	693a      	ldr	r2, [r7, #16]
 8044814:	429a      	cmp	r2, r3
 8044816:	d02e      	beq.n	8044876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8044818:	4b20      	ldr	r3, [pc, #128]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044820:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8044822:	4b1e      	ldr	r3, [pc, #120]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044826:	4a1d      	ldr	r2, [pc, #116]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804482c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 804482e:	4b1b      	ldr	r3, [pc, #108]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044832:	4a1a      	ldr	r2, [pc, #104]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8044838:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 804483a:	4a18      	ldr	r2, [pc, #96]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804483c:	693b      	ldr	r3, [r7, #16]
 804483e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8044840:	4b16      	ldr	r3, [pc, #88]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044844:	f003 0301 	and.w	r3, r3, #1
 8044848:	2b01      	cmp	r3, #1
 804484a:	d114      	bne.n	8044876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804484c:	f7fd f8ac 	bl	80419a8 <HAL_GetTick>
 8044850:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044852:	e00a      	b.n	804486a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044854:	f7fd f8a8 	bl	80419a8 <HAL_GetTick>
 8044858:	4602      	mov	r2, r0
 804485a:	697b      	ldr	r3, [r7, #20]
 804485c:	1ad3      	subs	r3, r2, r3
 804485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8044862:	4293      	cmp	r3, r2
 8044864:	d901      	bls.n	804486a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8044866:	2303      	movs	r3, #3
 8044868:	e351      	b.n	8044f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804486a:	4b0c      	ldr	r3, [pc, #48]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804486e:	f003 0302 	and.w	r3, r3, #2
 8044872:	2b00      	cmp	r3, #0
 8044874:	d0ee      	beq.n	8044854 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8044876:	687b      	ldr	r3, [r7, #4]
 8044878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804487e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044882:	d111      	bne.n	80448a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8044884:	4b05      	ldr	r3, [pc, #20]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044886:	689b      	ldr	r3, [r3, #8]
 8044888:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 804488c:	687b      	ldr	r3, [r7, #4]
 804488e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8044890:	4b04      	ldr	r3, [pc, #16]	; (80448a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8044892:	400b      	ands	r3, r1
 8044894:	4901      	ldr	r1, [pc, #4]	; (804489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8044896:	4313      	orrs	r3, r2
 8044898:	608b      	str	r3, [r1, #8]
 804489a:	e00b      	b.n	80448b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 804489c:	40023800 	.word	0x40023800
 80448a0:	40007000 	.word	0x40007000
 80448a4:	0ffffcff 	.word	0x0ffffcff
 80448a8:	4bac      	ldr	r3, [pc, #688]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448aa:	689b      	ldr	r3, [r3, #8]
 80448ac:	4aab      	ldr	r2, [pc, #684]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80448b2:	6093      	str	r3, [r2, #8]
 80448b4:	4ba9      	ldr	r3, [pc, #676]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80448b8:	687b      	ldr	r3, [r7, #4]
 80448ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80448bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80448c0:	49a6      	ldr	r1, [pc, #664]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448c2:	4313      	orrs	r3, r2
 80448c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80448c6:	687b      	ldr	r3, [r7, #4]
 80448c8:	681b      	ldr	r3, [r3, #0]
 80448ca:	f003 0310 	and.w	r3, r3, #16
 80448ce:	2b00      	cmp	r3, #0
 80448d0:	d010      	beq.n	80448f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80448d2:	4ba2      	ldr	r3, [pc, #648]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80448d8:	4aa0      	ldr	r2, [pc, #640]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80448de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80448e2:	4b9e      	ldr	r3, [pc, #632]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80448e8:	687b      	ldr	r3, [r7, #4]
 80448ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80448ec:	499b      	ldr	r1, [pc, #620]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80448ee:	4313      	orrs	r3, r2
 80448f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80448f4:	687b      	ldr	r3, [r7, #4]
 80448f6:	681b      	ldr	r3, [r3, #0]
 80448f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80448fc:	2b00      	cmp	r3, #0
 80448fe:	d00a      	beq.n	8044916 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8044900:	4b96      	ldr	r3, [pc, #600]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804490a:	687b      	ldr	r3, [r7, #4]
 804490c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804490e:	4993      	ldr	r1, [pc, #588]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044910:	4313      	orrs	r3, r2
 8044912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8044916:	687b      	ldr	r3, [r7, #4]
 8044918:	681b      	ldr	r3, [r3, #0]
 804491a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804491e:	2b00      	cmp	r3, #0
 8044920:	d00a      	beq.n	8044938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8044922:	4b8e      	ldr	r3, [pc, #568]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 804492c:	687b      	ldr	r3, [r7, #4]
 804492e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8044930:	498a      	ldr	r1, [pc, #552]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044932:	4313      	orrs	r3, r2
 8044934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8044938:	687b      	ldr	r3, [r7, #4]
 804493a:	681b      	ldr	r3, [r3, #0]
 804493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044940:	2b00      	cmp	r3, #0
 8044942:	d00a      	beq.n	804495a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8044944:	4b85      	ldr	r3, [pc, #532]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804494a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804494e:	687b      	ldr	r3, [r7, #4]
 8044950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8044952:	4982      	ldr	r1, [pc, #520]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044954:	4313      	orrs	r3, r2
 8044956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804495a:	687b      	ldr	r3, [r7, #4]
 804495c:	681b      	ldr	r3, [r3, #0]
 804495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044962:	2b00      	cmp	r3, #0
 8044964:	d00a      	beq.n	804497c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8044966:	4b7d      	ldr	r3, [pc, #500]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804496c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8044970:	687b      	ldr	r3, [r7, #4]
 8044972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044974:	4979      	ldr	r1, [pc, #484]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044976:	4313      	orrs	r3, r2
 8044978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804497c:	687b      	ldr	r3, [r7, #4]
 804497e:	681b      	ldr	r3, [r3, #0]
 8044980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044984:	2b00      	cmp	r3, #0
 8044986:	d00a      	beq.n	804499e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8044988:	4b74      	ldr	r3, [pc, #464]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 804498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804498e:	f023 0203 	bic.w	r2, r3, #3
 8044992:	687b      	ldr	r3, [r7, #4]
 8044994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044996:	4971      	ldr	r1, [pc, #452]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044998:	4313      	orrs	r3, r2
 804499a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 804499e:	687b      	ldr	r3, [r7, #4]
 80449a0:	681b      	ldr	r3, [r3, #0]
 80449a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80449a6:	2b00      	cmp	r3, #0
 80449a8:	d00a      	beq.n	80449c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80449aa:	4b6c      	ldr	r3, [pc, #432]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80449ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80449b0:	f023 020c 	bic.w	r2, r3, #12
 80449b4:	687b      	ldr	r3, [r7, #4]
 80449b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80449b8:	4968      	ldr	r1, [pc, #416]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80449ba:	4313      	orrs	r3, r2
 80449bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80449c0:	687b      	ldr	r3, [r7, #4]
 80449c2:	681b      	ldr	r3, [r3, #0]
 80449c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80449c8:	2b00      	cmp	r3, #0
 80449ca:	d00a      	beq.n	80449e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80449cc:	4b63      	ldr	r3, [pc, #396]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80449ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80449d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80449d6:	687b      	ldr	r3, [r7, #4]
 80449d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80449da:	4960      	ldr	r1, [pc, #384]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80449dc:	4313      	orrs	r3, r2
 80449de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80449e2:	687b      	ldr	r3, [r7, #4]
 80449e4:	681b      	ldr	r3, [r3, #0]
 80449e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80449ea:	2b00      	cmp	r3, #0
 80449ec:	d00a      	beq.n	8044a04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80449ee:	4b5b      	ldr	r3, [pc, #364]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80449f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80449f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80449f8:	687b      	ldr	r3, [r7, #4]
 80449fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80449fc:	4957      	ldr	r1, [pc, #348]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80449fe:	4313      	orrs	r3, r2
 8044a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8044a04:	687b      	ldr	r3, [r7, #4]
 8044a06:	681b      	ldr	r3, [r3, #0]
 8044a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8044a0c:	2b00      	cmp	r3, #0
 8044a0e:	d00a      	beq.n	8044a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8044a10:	4b52      	ldr	r3, [pc, #328]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8044a1a:	687b      	ldr	r3, [r7, #4]
 8044a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044a1e:	494f      	ldr	r1, [pc, #316]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a20:	4313      	orrs	r3, r2
 8044a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8044a26:	687b      	ldr	r3, [r7, #4]
 8044a28:	681b      	ldr	r3, [r3, #0]
 8044a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8044a2e:	2b00      	cmp	r3, #0
 8044a30:	d00a      	beq.n	8044a48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8044a32:	4b4a      	ldr	r3, [pc, #296]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044a38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8044a3c:	687b      	ldr	r3, [r7, #4]
 8044a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044a40:	4946      	ldr	r1, [pc, #280]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a42:	4313      	orrs	r3, r2
 8044a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8044a48:	687b      	ldr	r3, [r7, #4]
 8044a4a:	681b      	ldr	r3, [r3, #0]
 8044a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8044a50:	2b00      	cmp	r3, #0
 8044a52:	d00a      	beq.n	8044a6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8044a54:	4b41      	ldr	r3, [pc, #260]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044a5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8044a5e:	687b      	ldr	r3, [r7, #4]
 8044a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044a62:	493e      	ldr	r1, [pc, #248]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a64:	4313      	orrs	r3, r2
 8044a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8044a6a:	687b      	ldr	r3, [r7, #4]
 8044a6c:	681b      	ldr	r3, [r3, #0]
 8044a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8044a72:	2b00      	cmp	r3, #0
 8044a74:	d00a      	beq.n	8044a8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8044a76:	4b39      	ldr	r3, [pc, #228]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044a7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8044a80:	687b      	ldr	r3, [r7, #4]
 8044a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8044a84:	4935      	ldr	r1, [pc, #212]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a86:	4313      	orrs	r3, r2
 8044a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8044a8c:	687b      	ldr	r3, [r7, #4]
 8044a8e:	681b      	ldr	r3, [r3, #0]
 8044a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8044a94:	2b00      	cmp	r3, #0
 8044a96:	d00a      	beq.n	8044aae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8044a98:	4b30      	ldr	r3, [pc, #192]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044a9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8044aa2:	687b      	ldr	r3, [r7, #4]
 8044aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8044aa6:	492d      	ldr	r1, [pc, #180]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044aa8:	4313      	orrs	r3, r2
 8044aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8044aae:	687b      	ldr	r3, [r7, #4]
 8044ab0:	681b      	ldr	r3, [r3, #0]
 8044ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044ab6:	2b00      	cmp	r3, #0
 8044ab8:	d011      	beq.n	8044ade <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8044aba:	4b28      	ldr	r3, [pc, #160]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044ac0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8044ac4:	687b      	ldr	r3, [r7, #4]
 8044ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044ac8:	4924      	ldr	r1, [pc, #144]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044aca:	4313      	orrs	r3, r2
 8044acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8044ad0:	687b      	ldr	r3, [r7, #4]
 8044ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044ad8:	d101      	bne.n	8044ade <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8044ada:	2301      	movs	r3, #1
 8044adc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8044ade:	687b      	ldr	r3, [r7, #4]
 8044ae0:	681b      	ldr	r3, [r3, #0]
 8044ae2:	f003 0308 	and.w	r3, r3, #8
 8044ae6:	2b00      	cmp	r3, #0
 8044ae8:	d001      	beq.n	8044aee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8044aea:	2301      	movs	r3, #1
 8044aec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8044aee:	687b      	ldr	r3, [r7, #4]
 8044af0:	681b      	ldr	r3, [r3, #0]
 8044af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8044af6:	2b00      	cmp	r3, #0
 8044af8:	d00a      	beq.n	8044b10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8044afa:	4b18      	ldr	r3, [pc, #96]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044b00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8044b04:	687b      	ldr	r3, [r7, #4]
 8044b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044b08:	4914      	ldr	r1, [pc, #80]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044b0a:	4313      	orrs	r3, r2
 8044b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8044b10:	687b      	ldr	r3, [r7, #4]
 8044b12:	681b      	ldr	r3, [r3, #0]
 8044b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8044b18:	2b00      	cmp	r3, #0
 8044b1a:	d00b      	beq.n	8044b34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8044b1c:	4b0f      	ldr	r3, [pc, #60]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044b22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8044b26:	687b      	ldr	r3, [r7, #4]
 8044b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8044b2c:	490b      	ldr	r1, [pc, #44]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044b2e:	4313      	orrs	r3, r2
 8044b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8044b34:	687b      	ldr	r3, [r7, #4]
 8044b36:	681b      	ldr	r3, [r3, #0]
 8044b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8044b3c:	2b00      	cmp	r3, #0
 8044b3e:	d00f      	beq.n	8044b60 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8044b40:	4b06      	ldr	r3, [pc, #24]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044b46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8044b4a:	687b      	ldr	r3, [r7, #4]
 8044b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044b50:	4902      	ldr	r1, [pc, #8]	; (8044b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8044b52:	4313      	orrs	r3, r2
 8044b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8044b58:	e002      	b.n	8044b60 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8044b5a:	bf00      	nop
 8044b5c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8044b60:	687b      	ldr	r3, [r7, #4]
 8044b62:	681b      	ldr	r3, [r3, #0]
 8044b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044b68:	2b00      	cmp	r3, #0
 8044b6a:	d00b      	beq.n	8044b84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8044b6c:	4b8a      	ldr	r3, [pc, #552]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044b72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8044b76:	687b      	ldr	r3, [r7, #4]
 8044b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044b7c:	4986      	ldr	r1, [pc, #536]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044b7e:	4313      	orrs	r3, r2
 8044b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8044b84:	687b      	ldr	r3, [r7, #4]
 8044b86:	681b      	ldr	r3, [r3, #0]
 8044b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044b8c:	2b00      	cmp	r3, #0
 8044b8e:	d00b      	beq.n	8044ba8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8044b90:	4b81      	ldr	r3, [pc, #516]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044b96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8044b9a:	687b      	ldr	r3, [r7, #4]
 8044b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044ba0:	497d      	ldr	r1, [pc, #500]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044ba2:	4313      	orrs	r3, r2
 8044ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8044ba8:	69fb      	ldr	r3, [r7, #28]
 8044baa:	2b01      	cmp	r3, #1
 8044bac:	d006      	beq.n	8044bbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8044bae:	687b      	ldr	r3, [r7, #4]
 8044bb0:	681b      	ldr	r3, [r3, #0]
 8044bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044bb6:	2b00      	cmp	r3, #0
 8044bb8:	f000 80d6 	beq.w	8044d68 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8044bbc:	4b76      	ldr	r3, [pc, #472]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044bbe:	681b      	ldr	r3, [r3, #0]
 8044bc0:	4a75      	ldr	r2, [pc, #468]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8044bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044bc8:	f7fc feee 	bl	80419a8 <HAL_GetTick>
 8044bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8044bce:	e008      	b.n	8044be2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8044bd0:	f7fc feea 	bl	80419a8 <HAL_GetTick>
 8044bd4:	4602      	mov	r2, r0
 8044bd6:	697b      	ldr	r3, [r7, #20]
 8044bd8:	1ad3      	subs	r3, r2, r3
 8044bda:	2b64      	cmp	r3, #100	; 0x64
 8044bdc:	d901      	bls.n	8044be2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044bde:	2303      	movs	r3, #3
 8044be0:	e195      	b.n	8044f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8044be2:	4b6d      	ldr	r3, [pc, #436]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044be4:	681b      	ldr	r3, [r3, #0]
 8044be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044bea:	2b00      	cmp	r3, #0
 8044bec:	d1f0      	bne.n	8044bd0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8044bee:	687b      	ldr	r3, [r7, #4]
 8044bf0:	681b      	ldr	r3, [r3, #0]
 8044bf2:	f003 0301 	and.w	r3, r3, #1
 8044bf6:	2b00      	cmp	r3, #0
 8044bf8:	d021      	beq.n	8044c3e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8044bfa:	687b      	ldr	r3, [r7, #4]
 8044bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044bfe:	2b00      	cmp	r3, #0
 8044c00:	d11d      	bne.n	8044c3e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8044c02:	4b65      	ldr	r3, [pc, #404]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044c08:	0c1b      	lsrs	r3, r3, #16
 8044c0a:	f003 0303 	and.w	r3, r3, #3
 8044c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8044c10:	4b61      	ldr	r3, [pc, #388]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044c16:	0e1b      	lsrs	r3, r3, #24
 8044c18:	f003 030f 	and.w	r3, r3, #15
 8044c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8044c1e:	687b      	ldr	r3, [r7, #4]
 8044c20:	685b      	ldr	r3, [r3, #4]
 8044c22:	019a      	lsls	r2, r3, #6
 8044c24:	693b      	ldr	r3, [r7, #16]
 8044c26:	041b      	lsls	r3, r3, #16
 8044c28:	431a      	orrs	r2, r3
 8044c2a:	68fb      	ldr	r3, [r7, #12]
 8044c2c:	061b      	lsls	r3, r3, #24
 8044c2e:	431a      	orrs	r2, r3
 8044c30:	687b      	ldr	r3, [r7, #4]
 8044c32:	689b      	ldr	r3, [r3, #8]
 8044c34:	071b      	lsls	r3, r3, #28
 8044c36:	4958      	ldr	r1, [pc, #352]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044c38:	4313      	orrs	r3, r2
 8044c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8044c3e:	687b      	ldr	r3, [r7, #4]
 8044c40:	681b      	ldr	r3, [r3, #0]
 8044c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8044c46:	2b00      	cmp	r3, #0
 8044c48:	d004      	beq.n	8044c54 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8044c4a:	687b      	ldr	r3, [r7, #4]
 8044c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044c52:	d00a      	beq.n	8044c6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8044c54:	687b      	ldr	r3, [r7, #4]
 8044c56:	681b      	ldr	r3, [r3, #0]
 8044c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8044c5c:	2b00      	cmp	r3, #0
 8044c5e:	d02e      	beq.n	8044cbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8044c60:	687b      	ldr	r3, [r7, #4]
 8044c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8044c68:	d129      	bne.n	8044cbe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8044c6a:	4b4b      	ldr	r3, [pc, #300]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044c70:	0c1b      	lsrs	r3, r3, #16
 8044c72:	f003 0303 	and.w	r3, r3, #3
 8044c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8044c78:	4b47      	ldr	r3, [pc, #284]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044c7e:	0f1b      	lsrs	r3, r3, #28
 8044c80:	f003 0307 	and.w	r3, r3, #7
 8044c84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8044c86:	687b      	ldr	r3, [r7, #4]
 8044c88:	685b      	ldr	r3, [r3, #4]
 8044c8a:	019a      	lsls	r2, r3, #6
 8044c8c:	693b      	ldr	r3, [r7, #16]
 8044c8e:	041b      	lsls	r3, r3, #16
 8044c90:	431a      	orrs	r2, r3
 8044c92:	687b      	ldr	r3, [r7, #4]
 8044c94:	68db      	ldr	r3, [r3, #12]
 8044c96:	061b      	lsls	r3, r3, #24
 8044c98:	431a      	orrs	r2, r3
 8044c9a:	68fb      	ldr	r3, [r7, #12]
 8044c9c:	071b      	lsls	r3, r3, #28
 8044c9e:	493e      	ldr	r1, [pc, #248]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044ca0:	4313      	orrs	r3, r2
 8044ca2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8044ca6:	4b3c      	ldr	r3, [pc, #240]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044cac:	f023 021f 	bic.w	r2, r3, #31
 8044cb0:	687b      	ldr	r3, [r7, #4]
 8044cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044cb4:	3b01      	subs	r3, #1
 8044cb6:	4938      	ldr	r1, [pc, #224]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044cb8:	4313      	orrs	r3, r2
 8044cba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8044cbe:	687b      	ldr	r3, [r7, #4]
 8044cc0:	681b      	ldr	r3, [r3, #0]
 8044cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044cc6:	2b00      	cmp	r3, #0
 8044cc8:	d01d      	beq.n	8044d06 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8044cca:	4b33      	ldr	r3, [pc, #204]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044cd0:	0e1b      	lsrs	r3, r3, #24
 8044cd2:	f003 030f 	and.w	r3, r3, #15
 8044cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8044cd8:	4b2f      	ldr	r3, [pc, #188]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044cde:	0f1b      	lsrs	r3, r3, #28
 8044ce0:	f003 0307 	and.w	r3, r3, #7
 8044ce4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8044ce6:	687b      	ldr	r3, [r7, #4]
 8044ce8:	685b      	ldr	r3, [r3, #4]
 8044cea:	019a      	lsls	r2, r3, #6
 8044cec:	687b      	ldr	r3, [r7, #4]
 8044cee:	691b      	ldr	r3, [r3, #16]
 8044cf0:	041b      	lsls	r3, r3, #16
 8044cf2:	431a      	orrs	r2, r3
 8044cf4:	693b      	ldr	r3, [r7, #16]
 8044cf6:	061b      	lsls	r3, r3, #24
 8044cf8:	431a      	orrs	r2, r3
 8044cfa:	68fb      	ldr	r3, [r7, #12]
 8044cfc:	071b      	lsls	r3, r3, #28
 8044cfe:	4926      	ldr	r1, [pc, #152]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d00:	4313      	orrs	r3, r2
 8044d02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8044d06:	687b      	ldr	r3, [r7, #4]
 8044d08:	681b      	ldr	r3, [r3, #0]
 8044d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044d0e:	2b00      	cmp	r3, #0
 8044d10:	d011      	beq.n	8044d36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8044d12:	687b      	ldr	r3, [r7, #4]
 8044d14:	685b      	ldr	r3, [r3, #4]
 8044d16:	019a      	lsls	r2, r3, #6
 8044d18:	687b      	ldr	r3, [r7, #4]
 8044d1a:	691b      	ldr	r3, [r3, #16]
 8044d1c:	041b      	lsls	r3, r3, #16
 8044d1e:	431a      	orrs	r2, r3
 8044d20:	687b      	ldr	r3, [r7, #4]
 8044d22:	68db      	ldr	r3, [r3, #12]
 8044d24:	061b      	lsls	r3, r3, #24
 8044d26:	431a      	orrs	r2, r3
 8044d28:	687b      	ldr	r3, [r7, #4]
 8044d2a:	689b      	ldr	r3, [r3, #8]
 8044d2c:	071b      	lsls	r3, r3, #28
 8044d2e:	491a      	ldr	r1, [pc, #104]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d30:	4313      	orrs	r3, r2
 8044d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8044d36:	4b18      	ldr	r3, [pc, #96]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d38:	681b      	ldr	r3, [r3, #0]
 8044d3a:	4a17      	ldr	r2, [pc, #92]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8044d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044d42:	f7fc fe31 	bl	80419a8 <HAL_GetTick>
 8044d46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8044d48:	e008      	b.n	8044d5c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8044d4a:	f7fc fe2d 	bl	80419a8 <HAL_GetTick>
 8044d4e:	4602      	mov	r2, r0
 8044d50:	697b      	ldr	r3, [r7, #20]
 8044d52:	1ad3      	subs	r3, r2, r3
 8044d54:	2b64      	cmp	r3, #100	; 0x64
 8044d56:	d901      	bls.n	8044d5c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044d58:	2303      	movs	r3, #3
 8044d5a:	e0d8      	b.n	8044f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8044d5c:	4b0e      	ldr	r3, [pc, #56]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d5e:	681b      	ldr	r3, [r3, #0]
 8044d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044d64:	2b00      	cmp	r3, #0
 8044d66:	d0f0      	beq.n	8044d4a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8044d68:	69bb      	ldr	r3, [r7, #24]
 8044d6a:	2b01      	cmp	r3, #1
 8044d6c:	f040 80ce 	bne.w	8044f0c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8044d70:	4b09      	ldr	r3, [pc, #36]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d72:	681b      	ldr	r3, [r3, #0]
 8044d74:	4a08      	ldr	r2, [pc, #32]	; (8044d98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8044d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8044d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044d7c:	f7fc fe14 	bl	80419a8 <HAL_GetTick>
 8044d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8044d82:	e00b      	b.n	8044d9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8044d84:	f7fc fe10 	bl	80419a8 <HAL_GetTick>
 8044d88:	4602      	mov	r2, r0
 8044d8a:	697b      	ldr	r3, [r7, #20]
 8044d8c:	1ad3      	subs	r3, r2, r3
 8044d8e:	2b64      	cmp	r3, #100	; 0x64
 8044d90:	d904      	bls.n	8044d9c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044d92:	2303      	movs	r3, #3
 8044d94:	e0bb      	b.n	8044f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8044d96:	bf00      	nop
 8044d98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8044d9c:	4b5e      	ldr	r3, [pc, #376]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044d9e:	681b      	ldr	r3, [r3, #0]
 8044da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044da8:	d0ec      	beq.n	8044d84 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8044daa:	687b      	ldr	r3, [r7, #4]
 8044dac:	681b      	ldr	r3, [r3, #0]
 8044dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8044db2:	2b00      	cmp	r3, #0
 8044db4:	d003      	beq.n	8044dbe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8044db6:	687b      	ldr	r3, [r7, #4]
 8044db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044dba:	2b00      	cmp	r3, #0
 8044dbc:	d009      	beq.n	8044dd2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8044dbe:	687b      	ldr	r3, [r7, #4]
 8044dc0:	681b      	ldr	r3, [r3, #0]
 8044dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8044dc6:	2b00      	cmp	r3, #0
 8044dc8:	d02e      	beq.n	8044e28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8044dca:	687b      	ldr	r3, [r7, #4]
 8044dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044dce:	2b00      	cmp	r3, #0
 8044dd0:	d12a      	bne.n	8044e28 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8044dd2:	4b51      	ldr	r3, [pc, #324]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044dd8:	0c1b      	lsrs	r3, r3, #16
 8044dda:	f003 0303 	and.w	r3, r3, #3
 8044dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8044de0:	4b4d      	ldr	r3, [pc, #308]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044de6:	0f1b      	lsrs	r3, r3, #28
 8044de8:	f003 0307 	and.w	r3, r3, #7
 8044dec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8044dee:	687b      	ldr	r3, [r7, #4]
 8044df0:	695b      	ldr	r3, [r3, #20]
 8044df2:	019a      	lsls	r2, r3, #6
 8044df4:	693b      	ldr	r3, [r7, #16]
 8044df6:	041b      	lsls	r3, r3, #16
 8044df8:	431a      	orrs	r2, r3
 8044dfa:	687b      	ldr	r3, [r7, #4]
 8044dfc:	699b      	ldr	r3, [r3, #24]
 8044dfe:	061b      	lsls	r3, r3, #24
 8044e00:	431a      	orrs	r2, r3
 8044e02:	68fb      	ldr	r3, [r7, #12]
 8044e04:	071b      	lsls	r3, r3, #28
 8044e06:	4944      	ldr	r1, [pc, #272]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e08:	4313      	orrs	r3, r2
 8044e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8044e0e:	4b42      	ldr	r3, [pc, #264]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044e14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8044e18:	687b      	ldr	r3, [r7, #4]
 8044e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044e1c:	3b01      	subs	r3, #1
 8044e1e:	021b      	lsls	r3, r3, #8
 8044e20:	493d      	ldr	r1, [pc, #244]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e22:	4313      	orrs	r3, r2
 8044e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8044e28:	687b      	ldr	r3, [r7, #4]
 8044e2a:	681b      	ldr	r3, [r3, #0]
 8044e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044e30:	2b00      	cmp	r3, #0
 8044e32:	d022      	beq.n	8044e7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8044e34:	687b      	ldr	r3, [r7, #4]
 8044e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044e3c:	d11d      	bne.n	8044e7a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8044e3e:	4b36      	ldr	r3, [pc, #216]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044e44:	0e1b      	lsrs	r3, r3, #24
 8044e46:	f003 030f 	and.w	r3, r3, #15
 8044e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8044e4c:	4b32      	ldr	r3, [pc, #200]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044e52:	0f1b      	lsrs	r3, r3, #28
 8044e54:	f003 0307 	and.w	r3, r3, #7
 8044e58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8044e5a:	687b      	ldr	r3, [r7, #4]
 8044e5c:	695b      	ldr	r3, [r3, #20]
 8044e5e:	019a      	lsls	r2, r3, #6
 8044e60:	687b      	ldr	r3, [r7, #4]
 8044e62:	6a1b      	ldr	r3, [r3, #32]
 8044e64:	041b      	lsls	r3, r3, #16
 8044e66:	431a      	orrs	r2, r3
 8044e68:	693b      	ldr	r3, [r7, #16]
 8044e6a:	061b      	lsls	r3, r3, #24
 8044e6c:	431a      	orrs	r2, r3
 8044e6e:	68fb      	ldr	r3, [r7, #12]
 8044e70:	071b      	lsls	r3, r3, #28
 8044e72:	4929      	ldr	r1, [pc, #164]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e74:	4313      	orrs	r3, r2
 8044e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8044e7a:	687b      	ldr	r3, [r7, #4]
 8044e7c:	681b      	ldr	r3, [r3, #0]
 8044e7e:	f003 0308 	and.w	r3, r3, #8
 8044e82:	2b00      	cmp	r3, #0
 8044e84:	d028      	beq.n	8044ed8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8044e86:	4b24      	ldr	r3, [pc, #144]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044e8c:	0e1b      	lsrs	r3, r3, #24
 8044e8e:	f003 030f 	and.w	r3, r3, #15
 8044e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8044e94:	4b20      	ldr	r3, [pc, #128]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044e9a:	0c1b      	lsrs	r3, r3, #16
 8044e9c:	f003 0303 	and.w	r3, r3, #3
 8044ea0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8044ea2:	687b      	ldr	r3, [r7, #4]
 8044ea4:	695b      	ldr	r3, [r3, #20]
 8044ea6:	019a      	lsls	r2, r3, #6
 8044ea8:	68fb      	ldr	r3, [r7, #12]
 8044eaa:	041b      	lsls	r3, r3, #16
 8044eac:	431a      	orrs	r2, r3
 8044eae:	693b      	ldr	r3, [r7, #16]
 8044eb0:	061b      	lsls	r3, r3, #24
 8044eb2:	431a      	orrs	r2, r3
 8044eb4:	687b      	ldr	r3, [r7, #4]
 8044eb6:	69db      	ldr	r3, [r3, #28]
 8044eb8:	071b      	lsls	r3, r3, #28
 8044eba:	4917      	ldr	r1, [pc, #92]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044ebc:	4313      	orrs	r3, r2
 8044ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8044ec2:	4b15      	ldr	r3, [pc, #84]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8044ecc:	687b      	ldr	r3, [r7, #4]
 8044ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044ed0:	4911      	ldr	r1, [pc, #68]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044ed2:	4313      	orrs	r3, r2
 8044ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8044ed8:	4b0f      	ldr	r3, [pc, #60]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044eda:	681b      	ldr	r3, [r3, #0]
 8044edc:	4a0e      	ldr	r2, [pc, #56]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044ee4:	f7fc fd60 	bl	80419a8 <HAL_GetTick>
 8044ee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8044eea:	e008      	b.n	8044efe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8044eec:	f7fc fd5c 	bl	80419a8 <HAL_GetTick>
 8044ef0:	4602      	mov	r2, r0
 8044ef2:	697b      	ldr	r3, [r7, #20]
 8044ef4:	1ad3      	subs	r3, r2, r3
 8044ef6:	2b64      	cmp	r3, #100	; 0x64
 8044ef8:	d901      	bls.n	8044efe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044efa:	2303      	movs	r3, #3
 8044efc:	e007      	b.n	8044f0e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8044efe:	4b06      	ldr	r3, [pc, #24]	; (8044f18 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8044f00:	681b      	ldr	r3, [r3, #0]
 8044f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044f0a:	d1ef      	bne.n	8044eec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8044f0c:	2300      	movs	r3, #0
}
 8044f0e:	4618      	mov	r0, r3
 8044f10:	3720      	adds	r7, #32
 8044f12:	46bd      	mov	sp, r7
 8044f14:	bd80      	pop	{r7, pc}
 8044f16:	bf00      	nop
 8044f18:	40023800 	.word	0x40023800

08044f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8044f1c:	b580      	push	{r7, lr}
 8044f1e:	b082      	sub	sp, #8
 8044f20:	af00      	add	r7, sp, #0
 8044f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8044f24:	687b      	ldr	r3, [r7, #4]
 8044f26:	2b00      	cmp	r3, #0
 8044f28:	d101      	bne.n	8044f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8044f2a:	2301      	movs	r3, #1
 8044f2c:	e049      	b.n	8044fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8044f2e:	687b      	ldr	r3, [r7, #4]
 8044f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8044f34:	b2db      	uxtb	r3, r3
 8044f36:	2b00      	cmp	r3, #0
 8044f38:	d106      	bne.n	8044f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8044f3a:	687b      	ldr	r3, [r7, #4]
 8044f3c:	2200      	movs	r2, #0
 8044f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8044f42:	6878      	ldr	r0, [r7, #4]
 8044f44:	f000 f841 	bl	8044fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8044f48:	687b      	ldr	r3, [r7, #4]
 8044f4a:	2202      	movs	r2, #2
 8044f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8044f50:	687b      	ldr	r3, [r7, #4]
 8044f52:	681a      	ldr	r2, [r3, #0]
 8044f54:	687b      	ldr	r3, [r7, #4]
 8044f56:	3304      	adds	r3, #4
 8044f58:	4619      	mov	r1, r3
 8044f5a:	4610      	mov	r0, r2
 8044f5c:	f000 fa00 	bl	8045360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8044f60:	687b      	ldr	r3, [r7, #4]
 8044f62:	2201      	movs	r2, #1
 8044f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8044f68:	687b      	ldr	r3, [r7, #4]
 8044f6a:	2201      	movs	r2, #1
 8044f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8044f70:	687b      	ldr	r3, [r7, #4]
 8044f72:	2201      	movs	r2, #1
 8044f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8044f78:	687b      	ldr	r3, [r7, #4]
 8044f7a:	2201      	movs	r2, #1
 8044f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8044f80:	687b      	ldr	r3, [r7, #4]
 8044f82:	2201      	movs	r2, #1
 8044f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8044f88:	687b      	ldr	r3, [r7, #4]
 8044f8a:	2201      	movs	r2, #1
 8044f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8044f90:	687b      	ldr	r3, [r7, #4]
 8044f92:	2201      	movs	r2, #1
 8044f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8044f98:	687b      	ldr	r3, [r7, #4]
 8044f9a:	2201      	movs	r2, #1
 8044f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8044fa0:	687b      	ldr	r3, [r7, #4]
 8044fa2:	2201      	movs	r2, #1
 8044fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8044fa8:	687b      	ldr	r3, [r7, #4]
 8044faa:	2201      	movs	r2, #1
 8044fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8044fb0:	687b      	ldr	r3, [r7, #4]
 8044fb2:	2201      	movs	r2, #1
 8044fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8044fb8:	687b      	ldr	r3, [r7, #4]
 8044fba:	2201      	movs	r2, #1
 8044fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8044fc0:	2300      	movs	r3, #0
}
 8044fc2:	4618      	mov	r0, r3
 8044fc4:	3708      	adds	r7, #8
 8044fc6:	46bd      	mov	sp, r7
 8044fc8:	bd80      	pop	{r7, pc}

08044fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8044fca:	b480      	push	{r7}
 8044fcc:	b083      	sub	sp, #12
 8044fce:	af00      	add	r7, sp, #0
 8044fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8044fd2:	bf00      	nop
 8044fd4:	370c      	adds	r7, #12
 8044fd6:	46bd      	mov	sp, r7
 8044fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044fdc:	4770      	bx	lr
	...

08044fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8044fe0:	b480      	push	{r7}
 8044fe2:	b085      	sub	sp, #20
 8044fe4:	af00      	add	r7, sp, #0
 8044fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8044fe8:	687b      	ldr	r3, [r7, #4]
 8044fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8044fee:	b2db      	uxtb	r3, r3
 8044ff0:	2b01      	cmp	r3, #1
 8044ff2:	d001      	beq.n	8044ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8044ff4:	2301      	movs	r3, #1
 8044ff6:	e054      	b.n	80450a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8044ff8:	687b      	ldr	r3, [r7, #4]
 8044ffa:	2202      	movs	r2, #2
 8044ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8045000:	687b      	ldr	r3, [r7, #4]
 8045002:	681b      	ldr	r3, [r3, #0]
 8045004:	68da      	ldr	r2, [r3, #12]
 8045006:	687b      	ldr	r3, [r7, #4]
 8045008:	681b      	ldr	r3, [r3, #0]
 804500a:	f042 0201 	orr.w	r2, r2, #1
 804500e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8045010:	687b      	ldr	r3, [r7, #4]
 8045012:	681b      	ldr	r3, [r3, #0]
 8045014:	4a26      	ldr	r2, [pc, #152]	; (80450b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8045016:	4293      	cmp	r3, r2
 8045018:	d022      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 804501a:	687b      	ldr	r3, [r7, #4]
 804501c:	681b      	ldr	r3, [r3, #0]
 804501e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045022:	d01d      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 8045024:	687b      	ldr	r3, [r7, #4]
 8045026:	681b      	ldr	r3, [r3, #0]
 8045028:	4a22      	ldr	r2, [pc, #136]	; (80450b4 <HAL_TIM_Base_Start_IT+0xd4>)
 804502a:	4293      	cmp	r3, r2
 804502c:	d018      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 804502e:	687b      	ldr	r3, [r7, #4]
 8045030:	681b      	ldr	r3, [r3, #0]
 8045032:	4a21      	ldr	r2, [pc, #132]	; (80450b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8045034:	4293      	cmp	r3, r2
 8045036:	d013      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 8045038:	687b      	ldr	r3, [r7, #4]
 804503a:	681b      	ldr	r3, [r3, #0]
 804503c:	4a1f      	ldr	r2, [pc, #124]	; (80450bc <HAL_TIM_Base_Start_IT+0xdc>)
 804503e:	4293      	cmp	r3, r2
 8045040:	d00e      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 8045042:	687b      	ldr	r3, [r7, #4]
 8045044:	681b      	ldr	r3, [r3, #0]
 8045046:	4a1e      	ldr	r2, [pc, #120]	; (80450c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8045048:	4293      	cmp	r3, r2
 804504a:	d009      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 804504c:	687b      	ldr	r3, [r7, #4]
 804504e:	681b      	ldr	r3, [r3, #0]
 8045050:	4a1c      	ldr	r2, [pc, #112]	; (80450c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8045052:	4293      	cmp	r3, r2
 8045054:	d004      	beq.n	8045060 <HAL_TIM_Base_Start_IT+0x80>
 8045056:	687b      	ldr	r3, [r7, #4]
 8045058:	681b      	ldr	r3, [r3, #0]
 804505a:	4a1b      	ldr	r2, [pc, #108]	; (80450c8 <HAL_TIM_Base_Start_IT+0xe8>)
 804505c:	4293      	cmp	r3, r2
 804505e:	d115      	bne.n	804508c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8045060:	687b      	ldr	r3, [r7, #4]
 8045062:	681b      	ldr	r3, [r3, #0]
 8045064:	689a      	ldr	r2, [r3, #8]
 8045066:	4b19      	ldr	r3, [pc, #100]	; (80450cc <HAL_TIM_Base_Start_IT+0xec>)
 8045068:	4013      	ands	r3, r2
 804506a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804506c:	68fb      	ldr	r3, [r7, #12]
 804506e:	2b06      	cmp	r3, #6
 8045070:	d015      	beq.n	804509e <HAL_TIM_Base_Start_IT+0xbe>
 8045072:	68fb      	ldr	r3, [r7, #12]
 8045074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8045078:	d011      	beq.n	804509e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 804507a:	687b      	ldr	r3, [r7, #4]
 804507c:	681b      	ldr	r3, [r3, #0]
 804507e:	681a      	ldr	r2, [r3, #0]
 8045080:	687b      	ldr	r3, [r7, #4]
 8045082:	681b      	ldr	r3, [r3, #0]
 8045084:	f042 0201 	orr.w	r2, r2, #1
 8045088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804508a:	e008      	b.n	804509e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	681b      	ldr	r3, [r3, #0]
 8045090:	681a      	ldr	r2, [r3, #0]
 8045092:	687b      	ldr	r3, [r7, #4]
 8045094:	681b      	ldr	r3, [r3, #0]
 8045096:	f042 0201 	orr.w	r2, r2, #1
 804509a:	601a      	str	r2, [r3, #0]
 804509c:	e000      	b.n	80450a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804509e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80450a0:	2300      	movs	r3, #0
}
 80450a2:	4618      	mov	r0, r3
 80450a4:	3714      	adds	r7, #20
 80450a6:	46bd      	mov	sp, r7
 80450a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450ac:	4770      	bx	lr
 80450ae:	bf00      	nop
 80450b0:	40010000 	.word	0x40010000
 80450b4:	40000400 	.word	0x40000400
 80450b8:	40000800 	.word	0x40000800
 80450bc:	40000c00 	.word	0x40000c00
 80450c0:	40010400 	.word	0x40010400
 80450c4:	40014000 	.word	0x40014000
 80450c8:	40001800 	.word	0x40001800
 80450cc:	00010007 	.word	0x00010007

080450d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80450d0:	b580      	push	{r7, lr}
 80450d2:	b082      	sub	sp, #8
 80450d4:	af00      	add	r7, sp, #0
 80450d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80450d8:	687b      	ldr	r3, [r7, #4]
 80450da:	681b      	ldr	r3, [r3, #0]
 80450dc:	691b      	ldr	r3, [r3, #16]
 80450de:	f003 0302 	and.w	r3, r3, #2
 80450e2:	2b02      	cmp	r3, #2
 80450e4:	d122      	bne.n	804512c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80450e6:	687b      	ldr	r3, [r7, #4]
 80450e8:	681b      	ldr	r3, [r3, #0]
 80450ea:	68db      	ldr	r3, [r3, #12]
 80450ec:	f003 0302 	and.w	r3, r3, #2
 80450f0:	2b02      	cmp	r3, #2
 80450f2:	d11b      	bne.n	804512c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80450f4:	687b      	ldr	r3, [r7, #4]
 80450f6:	681b      	ldr	r3, [r3, #0]
 80450f8:	f06f 0202 	mvn.w	r2, #2
 80450fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80450fe:	687b      	ldr	r3, [r7, #4]
 8045100:	2201      	movs	r2, #1
 8045102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045104:	687b      	ldr	r3, [r7, #4]
 8045106:	681b      	ldr	r3, [r3, #0]
 8045108:	699b      	ldr	r3, [r3, #24]
 804510a:	f003 0303 	and.w	r3, r3, #3
 804510e:	2b00      	cmp	r3, #0
 8045110:	d003      	beq.n	804511a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8045112:	6878      	ldr	r0, [r7, #4]
 8045114:	f000 f905 	bl	8045322 <HAL_TIM_IC_CaptureCallback>
 8045118:	e005      	b.n	8045126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 804511a:	6878      	ldr	r0, [r7, #4]
 804511c:	f000 f8f7 	bl	804530e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045120:	6878      	ldr	r0, [r7, #4]
 8045122:	f000 f908 	bl	8045336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045126:	687b      	ldr	r3, [r7, #4]
 8045128:	2200      	movs	r2, #0
 804512a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804512c:	687b      	ldr	r3, [r7, #4]
 804512e:	681b      	ldr	r3, [r3, #0]
 8045130:	691b      	ldr	r3, [r3, #16]
 8045132:	f003 0304 	and.w	r3, r3, #4
 8045136:	2b04      	cmp	r3, #4
 8045138:	d122      	bne.n	8045180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804513a:	687b      	ldr	r3, [r7, #4]
 804513c:	681b      	ldr	r3, [r3, #0]
 804513e:	68db      	ldr	r3, [r3, #12]
 8045140:	f003 0304 	and.w	r3, r3, #4
 8045144:	2b04      	cmp	r3, #4
 8045146:	d11b      	bne.n	8045180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8045148:	687b      	ldr	r3, [r7, #4]
 804514a:	681b      	ldr	r3, [r3, #0]
 804514c:	f06f 0204 	mvn.w	r2, #4
 8045150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8045152:	687b      	ldr	r3, [r7, #4]
 8045154:	2202      	movs	r2, #2
 8045156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045158:	687b      	ldr	r3, [r7, #4]
 804515a:	681b      	ldr	r3, [r3, #0]
 804515c:	699b      	ldr	r3, [r3, #24]
 804515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045162:	2b00      	cmp	r3, #0
 8045164:	d003      	beq.n	804516e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045166:	6878      	ldr	r0, [r7, #4]
 8045168:	f000 f8db 	bl	8045322 <HAL_TIM_IC_CaptureCallback>
 804516c:	e005      	b.n	804517a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804516e:	6878      	ldr	r0, [r7, #4]
 8045170:	f000 f8cd 	bl	804530e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045174:	6878      	ldr	r0, [r7, #4]
 8045176:	f000 f8de 	bl	8045336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804517a:	687b      	ldr	r3, [r7, #4]
 804517c:	2200      	movs	r2, #0
 804517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8045180:	687b      	ldr	r3, [r7, #4]
 8045182:	681b      	ldr	r3, [r3, #0]
 8045184:	691b      	ldr	r3, [r3, #16]
 8045186:	f003 0308 	and.w	r3, r3, #8
 804518a:	2b08      	cmp	r3, #8
 804518c:	d122      	bne.n	80451d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804518e:	687b      	ldr	r3, [r7, #4]
 8045190:	681b      	ldr	r3, [r3, #0]
 8045192:	68db      	ldr	r3, [r3, #12]
 8045194:	f003 0308 	and.w	r3, r3, #8
 8045198:	2b08      	cmp	r3, #8
 804519a:	d11b      	bne.n	80451d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804519c:	687b      	ldr	r3, [r7, #4]
 804519e:	681b      	ldr	r3, [r3, #0]
 80451a0:	f06f 0208 	mvn.w	r2, #8
 80451a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80451a6:	687b      	ldr	r3, [r7, #4]
 80451a8:	2204      	movs	r2, #4
 80451aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80451ac:	687b      	ldr	r3, [r7, #4]
 80451ae:	681b      	ldr	r3, [r3, #0]
 80451b0:	69db      	ldr	r3, [r3, #28]
 80451b2:	f003 0303 	and.w	r3, r3, #3
 80451b6:	2b00      	cmp	r3, #0
 80451b8:	d003      	beq.n	80451c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80451ba:	6878      	ldr	r0, [r7, #4]
 80451bc:	f000 f8b1 	bl	8045322 <HAL_TIM_IC_CaptureCallback>
 80451c0:	e005      	b.n	80451ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80451c2:	6878      	ldr	r0, [r7, #4]
 80451c4:	f000 f8a3 	bl	804530e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80451c8:	6878      	ldr	r0, [r7, #4]
 80451ca:	f000 f8b4 	bl	8045336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80451ce:	687b      	ldr	r3, [r7, #4]
 80451d0:	2200      	movs	r2, #0
 80451d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80451d4:	687b      	ldr	r3, [r7, #4]
 80451d6:	681b      	ldr	r3, [r3, #0]
 80451d8:	691b      	ldr	r3, [r3, #16]
 80451da:	f003 0310 	and.w	r3, r3, #16
 80451de:	2b10      	cmp	r3, #16
 80451e0:	d122      	bne.n	8045228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80451e2:	687b      	ldr	r3, [r7, #4]
 80451e4:	681b      	ldr	r3, [r3, #0]
 80451e6:	68db      	ldr	r3, [r3, #12]
 80451e8:	f003 0310 	and.w	r3, r3, #16
 80451ec:	2b10      	cmp	r3, #16
 80451ee:	d11b      	bne.n	8045228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80451f0:	687b      	ldr	r3, [r7, #4]
 80451f2:	681b      	ldr	r3, [r3, #0]
 80451f4:	f06f 0210 	mvn.w	r2, #16
 80451f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80451fa:	687b      	ldr	r3, [r7, #4]
 80451fc:	2208      	movs	r2, #8
 80451fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045200:	687b      	ldr	r3, [r7, #4]
 8045202:	681b      	ldr	r3, [r3, #0]
 8045204:	69db      	ldr	r3, [r3, #28]
 8045206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804520a:	2b00      	cmp	r3, #0
 804520c:	d003      	beq.n	8045216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804520e:	6878      	ldr	r0, [r7, #4]
 8045210:	f000 f887 	bl	8045322 <HAL_TIM_IC_CaptureCallback>
 8045214:	e005      	b.n	8045222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045216:	6878      	ldr	r0, [r7, #4]
 8045218:	f000 f879 	bl	804530e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804521c:	6878      	ldr	r0, [r7, #4]
 804521e:	f000 f88a 	bl	8045336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045222:	687b      	ldr	r3, [r7, #4]
 8045224:	2200      	movs	r2, #0
 8045226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8045228:	687b      	ldr	r3, [r7, #4]
 804522a:	681b      	ldr	r3, [r3, #0]
 804522c:	691b      	ldr	r3, [r3, #16]
 804522e:	f003 0301 	and.w	r3, r3, #1
 8045232:	2b01      	cmp	r3, #1
 8045234:	d10e      	bne.n	8045254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8045236:	687b      	ldr	r3, [r7, #4]
 8045238:	681b      	ldr	r3, [r3, #0]
 804523a:	68db      	ldr	r3, [r3, #12]
 804523c:	f003 0301 	and.w	r3, r3, #1
 8045240:	2b01      	cmp	r3, #1
 8045242:	d107      	bne.n	8045254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8045244:	687b      	ldr	r3, [r7, #4]
 8045246:	681b      	ldr	r3, [r3, #0]
 8045248:	f06f 0201 	mvn.w	r2, #1
 804524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 804524e:	6878      	ldr	r0, [r7, #4]
 8045250:	f7fb fccc 	bl	8040bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8045254:	687b      	ldr	r3, [r7, #4]
 8045256:	681b      	ldr	r3, [r3, #0]
 8045258:	691b      	ldr	r3, [r3, #16]
 804525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804525e:	2b80      	cmp	r3, #128	; 0x80
 8045260:	d10e      	bne.n	8045280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8045262:	687b      	ldr	r3, [r7, #4]
 8045264:	681b      	ldr	r3, [r3, #0]
 8045266:	68db      	ldr	r3, [r3, #12]
 8045268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804526c:	2b80      	cmp	r3, #128	; 0x80
 804526e:	d107      	bne.n	8045280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8045270:	687b      	ldr	r3, [r7, #4]
 8045272:	681b      	ldr	r3, [r3, #0]
 8045274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8045278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 804527a:	6878      	ldr	r0, [r7, #4]
 804527c:	f000 f91a 	bl	80454b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8045280:	687b      	ldr	r3, [r7, #4]
 8045282:	681b      	ldr	r3, [r3, #0]
 8045284:	691b      	ldr	r3, [r3, #16]
 8045286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804528a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804528e:	d10e      	bne.n	80452ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8045290:	687b      	ldr	r3, [r7, #4]
 8045292:	681b      	ldr	r3, [r3, #0]
 8045294:	68db      	ldr	r3, [r3, #12]
 8045296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804529a:	2b80      	cmp	r3, #128	; 0x80
 804529c:	d107      	bne.n	80452ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804529e:	687b      	ldr	r3, [r7, #4]
 80452a0:	681b      	ldr	r3, [r3, #0]
 80452a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80452a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80452a8:	6878      	ldr	r0, [r7, #4]
 80452aa:	f000 f90d 	bl	80454c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80452ae:	687b      	ldr	r3, [r7, #4]
 80452b0:	681b      	ldr	r3, [r3, #0]
 80452b2:	691b      	ldr	r3, [r3, #16]
 80452b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80452b8:	2b40      	cmp	r3, #64	; 0x40
 80452ba:	d10e      	bne.n	80452da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80452bc:	687b      	ldr	r3, [r7, #4]
 80452be:	681b      	ldr	r3, [r3, #0]
 80452c0:	68db      	ldr	r3, [r3, #12]
 80452c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80452c6:	2b40      	cmp	r3, #64	; 0x40
 80452c8:	d107      	bne.n	80452da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80452ca:	687b      	ldr	r3, [r7, #4]
 80452cc:	681b      	ldr	r3, [r3, #0]
 80452ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80452d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80452d4:	6878      	ldr	r0, [r7, #4]
 80452d6:	f000 f838 	bl	804534a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80452da:	687b      	ldr	r3, [r7, #4]
 80452dc:	681b      	ldr	r3, [r3, #0]
 80452de:	691b      	ldr	r3, [r3, #16]
 80452e0:	f003 0320 	and.w	r3, r3, #32
 80452e4:	2b20      	cmp	r3, #32
 80452e6:	d10e      	bne.n	8045306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80452e8:	687b      	ldr	r3, [r7, #4]
 80452ea:	681b      	ldr	r3, [r3, #0]
 80452ec:	68db      	ldr	r3, [r3, #12]
 80452ee:	f003 0320 	and.w	r3, r3, #32
 80452f2:	2b20      	cmp	r3, #32
 80452f4:	d107      	bne.n	8045306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80452f6:	687b      	ldr	r3, [r7, #4]
 80452f8:	681b      	ldr	r3, [r3, #0]
 80452fa:	f06f 0220 	mvn.w	r2, #32
 80452fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8045300:	6878      	ldr	r0, [r7, #4]
 8045302:	f000 f8cd 	bl	80454a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8045306:	bf00      	nop
 8045308:	3708      	adds	r7, #8
 804530a:	46bd      	mov	sp, r7
 804530c:	bd80      	pop	{r7, pc}

0804530e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804530e:	b480      	push	{r7}
 8045310:	b083      	sub	sp, #12
 8045312:	af00      	add	r7, sp, #0
 8045314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8045316:	bf00      	nop
 8045318:	370c      	adds	r7, #12
 804531a:	46bd      	mov	sp, r7
 804531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045320:	4770      	bx	lr

08045322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8045322:	b480      	push	{r7}
 8045324:	b083      	sub	sp, #12
 8045326:	af00      	add	r7, sp, #0
 8045328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804532a:	bf00      	nop
 804532c:	370c      	adds	r7, #12
 804532e:	46bd      	mov	sp, r7
 8045330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045334:	4770      	bx	lr

08045336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8045336:	b480      	push	{r7}
 8045338:	b083      	sub	sp, #12
 804533a:	af00      	add	r7, sp, #0
 804533c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804533e:	bf00      	nop
 8045340:	370c      	adds	r7, #12
 8045342:	46bd      	mov	sp, r7
 8045344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045348:	4770      	bx	lr

0804534a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804534a:	b480      	push	{r7}
 804534c:	b083      	sub	sp, #12
 804534e:	af00      	add	r7, sp, #0
 8045350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8045352:	bf00      	nop
 8045354:	370c      	adds	r7, #12
 8045356:	46bd      	mov	sp, r7
 8045358:	f85d 7b04 	ldr.w	r7, [sp], #4
 804535c:	4770      	bx	lr
	...

08045360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8045360:	b480      	push	{r7}
 8045362:	b085      	sub	sp, #20
 8045364:	af00      	add	r7, sp, #0
 8045366:	6078      	str	r0, [r7, #4]
 8045368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804536a:	687b      	ldr	r3, [r7, #4]
 804536c:	681b      	ldr	r3, [r3, #0]
 804536e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045370:	687b      	ldr	r3, [r7, #4]
 8045372:	4a40      	ldr	r2, [pc, #256]	; (8045474 <TIM_Base_SetConfig+0x114>)
 8045374:	4293      	cmp	r3, r2
 8045376:	d013      	beq.n	80453a0 <TIM_Base_SetConfig+0x40>
 8045378:	687b      	ldr	r3, [r7, #4]
 804537a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804537e:	d00f      	beq.n	80453a0 <TIM_Base_SetConfig+0x40>
 8045380:	687b      	ldr	r3, [r7, #4]
 8045382:	4a3d      	ldr	r2, [pc, #244]	; (8045478 <TIM_Base_SetConfig+0x118>)
 8045384:	4293      	cmp	r3, r2
 8045386:	d00b      	beq.n	80453a0 <TIM_Base_SetConfig+0x40>
 8045388:	687b      	ldr	r3, [r7, #4]
 804538a:	4a3c      	ldr	r2, [pc, #240]	; (804547c <TIM_Base_SetConfig+0x11c>)
 804538c:	4293      	cmp	r3, r2
 804538e:	d007      	beq.n	80453a0 <TIM_Base_SetConfig+0x40>
 8045390:	687b      	ldr	r3, [r7, #4]
 8045392:	4a3b      	ldr	r2, [pc, #236]	; (8045480 <TIM_Base_SetConfig+0x120>)
 8045394:	4293      	cmp	r3, r2
 8045396:	d003      	beq.n	80453a0 <TIM_Base_SetConfig+0x40>
 8045398:	687b      	ldr	r3, [r7, #4]
 804539a:	4a3a      	ldr	r2, [pc, #232]	; (8045484 <TIM_Base_SetConfig+0x124>)
 804539c:	4293      	cmp	r3, r2
 804539e:	d108      	bne.n	80453b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80453a0:	68fb      	ldr	r3, [r7, #12]
 80453a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80453a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80453a8:	683b      	ldr	r3, [r7, #0]
 80453aa:	685b      	ldr	r3, [r3, #4]
 80453ac:	68fa      	ldr	r2, [r7, #12]
 80453ae:	4313      	orrs	r3, r2
 80453b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80453b2:	687b      	ldr	r3, [r7, #4]
 80453b4:	4a2f      	ldr	r2, [pc, #188]	; (8045474 <TIM_Base_SetConfig+0x114>)
 80453b6:	4293      	cmp	r3, r2
 80453b8:	d02b      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453ba:	687b      	ldr	r3, [r7, #4]
 80453bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80453c0:	d027      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453c2:	687b      	ldr	r3, [r7, #4]
 80453c4:	4a2c      	ldr	r2, [pc, #176]	; (8045478 <TIM_Base_SetConfig+0x118>)
 80453c6:	4293      	cmp	r3, r2
 80453c8:	d023      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453ca:	687b      	ldr	r3, [r7, #4]
 80453cc:	4a2b      	ldr	r2, [pc, #172]	; (804547c <TIM_Base_SetConfig+0x11c>)
 80453ce:	4293      	cmp	r3, r2
 80453d0:	d01f      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453d2:	687b      	ldr	r3, [r7, #4]
 80453d4:	4a2a      	ldr	r2, [pc, #168]	; (8045480 <TIM_Base_SetConfig+0x120>)
 80453d6:	4293      	cmp	r3, r2
 80453d8:	d01b      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453da:	687b      	ldr	r3, [r7, #4]
 80453dc:	4a29      	ldr	r2, [pc, #164]	; (8045484 <TIM_Base_SetConfig+0x124>)
 80453de:	4293      	cmp	r3, r2
 80453e0:	d017      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453e2:	687b      	ldr	r3, [r7, #4]
 80453e4:	4a28      	ldr	r2, [pc, #160]	; (8045488 <TIM_Base_SetConfig+0x128>)
 80453e6:	4293      	cmp	r3, r2
 80453e8:	d013      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453ea:	687b      	ldr	r3, [r7, #4]
 80453ec:	4a27      	ldr	r2, [pc, #156]	; (804548c <TIM_Base_SetConfig+0x12c>)
 80453ee:	4293      	cmp	r3, r2
 80453f0:	d00f      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453f2:	687b      	ldr	r3, [r7, #4]
 80453f4:	4a26      	ldr	r2, [pc, #152]	; (8045490 <TIM_Base_SetConfig+0x130>)
 80453f6:	4293      	cmp	r3, r2
 80453f8:	d00b      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 80453fa:	687b      	ldr	r3, [r7, #4]
 80453fc:	4a25      	ldr	r2, [pc, #148]	; (8045494 <TIM_Base_SetConfig+0x134>)
 80453fe:	4293      	cmp	r3, r2
 8045400:	d007      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 8045402:	687b      	ldr	r3, [r7, #4]
 8045404:	4a24      	ldr	r2, [pc, #144]	; (8045498 <TIM_Base_SetConfig+0x138>)
 8045406:	4293      	cmp	r3, r2
 8045408:	d003      	beq.n	8045412 <TIM_Base_SetConfig+0xb2>
 804540a:	687b      	ldr	r3, [r7, #4]
 804540c:	4a23      	ldr	r2, [pc, #140]	; (804549c <TIM_Base_SetConfig+0x13c>)
 804540e:	4293      	cmp	r3, r2
 8045410:	d108      	bne.n	8045424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8045412:	68fb      	ldr	r3, [r7, #12]
 8045414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8045418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804541a:	683b      	ldr	r3, [r7, #0]
 804541c:	68db      	ldr	r3, [r3, #12]
 804541e:	68fa      	ldr	r2, [r7, #12]
 8045420:	4313      	orrs	r3, r2
 8045422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8045424:	68fb      	ldr	r3, [r7, #12]
 8045426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804542a:	683b      	ldr	r3, [r7, #0]
 804542c:	695b      	ldr	r3, [r3, #20]
 804542e:	4313      	orrs	r3, r2
 8045430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8045432:	687b      	ldr	r3, [r7, #4]
 8045434:	68fa      	ldr	r2, [r7, #12]
 8045436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8045438:	683b      	ldr	r3, [r7, #0]
 804543a:	689a      	ldr	r2, [r3, #8]
 804543c:	687b      	ldr	r3, [r7, #4]
 804543e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8045440:	683b      	ldr	r3, [r7, #0]
 8045442:	681a      	ldr	r2, [r3, #0]
 8045444:	687b      	ldr	r3, [r7, #4]
 8045446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8045448:	687b      	ldr	r3, [r7, #4]
 804544a:	4a0a      	ldr	r2, [pc, #40]	; (8045474 <TIM_Base_SetConfig+0x114>)
 804544c:	4293      	cmp	r3, r2
 804544e:	d003      	beq.n	8045458 <TIM_Base_SetConfig+0xf8>
 8045450:	687b      	ldr	r3, [r7, #4]
 8045452:	4a0c      	ldr	r2, [pc, #48]	; (8045484 <TIM_Base_SetConfig+0x124>)
 8045454:	4293      	cmp	r3, r2
 8045456:	d103      	bne.n	8045460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8045458:	683b      	ldr	r3, [r7, #0]
 804545a:	691a      	ldr	r2, [r3, #16]
 804545c:	687b      	ldr	r3, [r7, #4]
 804545e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045460:	687b      	ldr	r3, [r7, #4]
 8045462:	2201      	movs	r2, #1
 8045464:	615a      	str	r2, [r3, #20]
}
 8045466:	bf00      	nop
 8045468:	3714      	adds	r7, #20
 804546a:	46bd      	mov	sp, r7
 804546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045470:	4770      	bx	lr
 8045472:	bf00      	nop
 8045474:	40010000 	.word	0x40010000
 8045478:	40000400 	.word	0x40000400
 804547c:	40000800 	.word	0x40000800
 8045480:	40000c00 	.word	0x40000c00
 8045484:	40010400 	.word	0x40010400
 8045488:	40014000 	.word	0x40014000
 804548c:	40014400 	.word	0x40014400
 8045490:	40014800 	.word	0x40014800
 8045494:	40001800 	.word	0x40001800
 8045498:	40001c00 	.word	0x40001c00
 804549c:	40002000 	.word	0x40002000

080454a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80454a0:	b480      	push	{r7}
 80454a2:	b083      	sub	sp, #12
 80454a4:	af00      	add	r7, sp, #0
 80454a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80454a8:	bf00      	nop
 80454aa:	370c      	adds	r7, #12
 80454ac:	46bd      	mov	sp, r7
 80454ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454b2:	4770      	bx	lr

080454b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80454b4:	b480      	push	{r7}
 80454b6:	b083      	sub	sp, #12
 80454b8:	af00      	add	r7, sp, #0
 80454ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80454bc:	bf00      	nop
 80454be:	370c      	adds	r7, #12
 80454c0:	46bd      	mov	sp, r7
 80454c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454c6:	4770      	bx	lr

080454c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80454c8:	b480      	push	{r7}
 80454ca:	b083      	sub	sp, #12
 80454cc:	af00      	add	r7, sp, #0
 80454ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80454d0:	bf00      	nop
 80454d2:	370c      	adds	r7, #12
 80454d4:	46bd      	mov	sp, r7
 80454d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454da:	4770      	bx	lr

080454dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80454dc:	b580      	push	{r7, lr}
 80454de:	b082      	sub	sp, #8
 80454e0:	af00      	add	r7, sp, #0
 80454e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80454e4:	687b      	ldr	r3, [r7, #4]
 80454e6:	2b00      	cmp	r3, #0
 80454e8:	d101      	bne.n	80454ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80454ea:	2301      	movs	r3, #1
 80454ec:	e040      	b.n	8045570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80454ee:	687b      	ldr	r3, [r7, #4]
 80454f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80454f2:	2b00      	cmp	r3, #0
 80454f4:	d106      	bne.n	8045504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80454f6:	687b      	ldr	r3, [r7, #4]
 80454f8:	2200      	movs	r2, #0
 80454fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80454fe:	6878      	ldr	r0, [r7, #4]
 8045500:	f7fb ffda 	bl	80414b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045504:	687b      	ldr	r3, [r7, #4]
 8045506:	2224      	movs	r2, #36	; 0x24
 8045508:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 804550a:	687b      	ldr	r3, [r7, #4]
 804550c:	681b      	ldr	r3, [r3, #0]
 804550e:	681a      	ldr	r2, [r3, #0]
 8045510:	687b      	ldr	r3, [r7, #4]
 8045512:	681b      	ldr	r3, [r3, #0]
 8045514:	f022 0201 	bic.w	r2, r2, #1
 8045518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804551a:	6878      	ldr	r0, [r7, #4]
 804551c:	f000 fbc4 	bl	8045ca8 <UART_SetConfig>
 8045520:	4603      	mov	r3, r0
 8045522:	2b01      	cmp	r3, #1
 8045524:	d101      	bne.n	804552a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8045526:	2301      	movs	r3, #1
 8045528:	e022      	b.n	8045570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804552a:	687b      	ldr	r3, [r7, #4]
 804552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804552e:	2b00      	cmp	r3, #0
 8045530:	d002      	beq.n	8045538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8045532:	6878      	ldr	r0, [r7, #4]
 8045534:	f000 fe1c 	bl	8046170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045538:	687b      	ldr	r3, [r7, #4]
 804553a:	681b      	ldr	r3, [r3, #0]
 804553c:	685a      	ldr	r2, [r3, #4]
 804553e:	687b      	ldr	r3, [r7, #4]
 8045540:	681b      	ldr	r3, [r3, #0]
 8045542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8045546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045548:	687b      	ldr	r3, [r7, #4]
 804554a:	681b      	ldr	r3, [r3, #0]
 804554c:	689a      	ldr	r2, [r3, #8]
 804554e:	687b      	ldr	r3, [r7, #4]
 8045550:	681b      	ldr	r3, [r3, #0]
 8045552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8045556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8045558:	687b      	ldr	r3, [r7, #4]
 804555a:	681b      	ldr	r3, [r3, #0]
 804555c:	681a      	ldr	r2, [r3, #0]
 804555e:	687b      	ldr	r3, [r7, #4]
 8045560:	681b      	ldr	r3, [r3, #0]
 8045562:	f042 0201 	orr.w	r2, r2, #1
 8045566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8045568:	6878      	ldr	r0, [r7, #4]
 804556a:	f000 fea3 	bl	80462b4 <UART_CheckIdleState>
 804556e:	4603      	mov	r3, r0
}
 8045570:	4618      	mov	r0, r3
 8045572:	3708      	adds	r7, #8
 8045574:	46bd      	mov	sp, r7
 8045576:	bd80      	pop	{r7, pc}

08045578 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8045578:	b580      	push	{r7, lr}
 804557a:	b08a      	sub	sp, #40	; 0x28
 804557c:	af00      	add	r7, sp, #0
 804557e:	60f8      	str	r0, [r7, #12]
 8045580:	60b9      	str	r1, [r7, #8]
 8045582:	4613      	mov	r3, r2
 8045584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8045586:	68fb      	ldr	r3, [r7, #12]
 8045588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804558a:	2b20      	cmp	r3, #32
 804558c:	d165      	bne.n	804565a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 804558e:	68bb      	ldr	r3, [r7, #8]
 8045590:	2b00      	cmp	r3, #0
 8045592:	d002      	beq.n	804559a <HAL_UART_Transmit_DMA+0x22>
 8045594:	88fb      	ldrh	r3, [r7, #6]
 8045596:	2b00      	cmp	r3, #0
 8045598:	d101      	bne.n	804559e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 804559a:	2301      	movs	r3, #1
 804559c:	e05e      	b.n	804565c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 804559e:	68fb      	ldr	r3, [r7, #12]
 80455a0:	68ba      	ldr	r2, [r7, #8]
 80455a2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80455a4:	68fb      	ldr	r3, [r7, #12]
 80455a6:	88fa      	ldrh	r2, [r7, #6]
 80455a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80455ac:	68fb      	ldr	r3, [r7, #12]
 80455ae:	88fa      	ldrh	r2, [r7, #6]
 80455b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80455b4:	68fb      	ldr	r3, [r7, #12]
 80455b6:	2200      	movs	r2, #0
 80455b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80455bc:	68fb      	ldr	r3, [r7, #12]
 80455be:	2221      	movs	r2, #33	; 0x21
 80455c0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80455c2:	68fb      	ldr	r3, [r7, #12]
 80455c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80455c6:	2b00      	cmp	r3, #0
 80455c8:	d027      	beq.n	804561a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80455ca:	68fb      	ldr	r3, [r7, #12]
 80455cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80455ce:	4a25      	ldr	r2, [pc, #148]	; (8045664 <HAL_UART_Transmit_DMA+0xec>)
 80455d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80455d2:	68fb      	ldr	r3, [r7, #12]
 80455d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80455d6:	4a24      	ldr	r2, [pc, #144]	; (8045668 <HAL_UART_Transmit_DMA+0xf0>)
 80455d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80455da:	68fb      	ldr	r3, [r7, #12]
 80455dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80455de:	4a23      	ldr	r2, [pc, #140]	; (804566c <HAL_UART_Transmit_DMA+0xf4>)
 80455e0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80455e2:	68fb      	ldr	r3, [r7, #12]
 80455e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80455e6:	2200      	movs	r2, #0
 80455e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80455ea:	68fb      	ldr	r3, [r7, #12]
 80455ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80455ee:	68fb      	ldr	r3, [r7, #12]
 80455f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80455f2:	4619      	mov	r1, r3
 80455f4:	68fb      	ldr	r3, [r7, #12]
 80455f6:	681b      	ldr	r3, [r3, #0]
 80455f8:	3328      	adds	r3, #40	; 0x28
 80455fa:	461a      	mov	r2, r3
 80455fc:	88fb      	ldrh	r3, [r7, #6]
 80455fe:	f7fc fb9f 	bl	8041d40 <HAL_DMA_Start_IT>
 8045602:	4603      	mov	r3, r0
 8045604:	2b00      	cmp	r3, #0
 8045606:	d008      	beq.n	804561a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8045608:	68fb      	ldr	r3, [r7, #12]
 804560a:	2210      	movs	r2, #16
 804560c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8045610:	68fb      	ldr	r3, [r7, #12]
 8045612:	2220      	movs	r2, #32
 8045614:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8045616:	2301      	movs	r3, #1
 8045618:	e020      	b.n	804565c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 804561a:	68fb      	ldr	r3, [r7, #12]
 804561c:	681b      	ldr	r3, [r3, #0]
 804561e:	2240      	movs	r2, #64	; 0x40
 8045620:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8045622:	68fb      	ldr	r3, [r7, #12]
 8045624:	681b      	ldr	r3, [r3, #0]
 8045626:	3308      	adds	r3, #8
 8045628:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804562a:	697b      	ldr	r3, [r7, #20]
 804562c:	e853 3f00 	ldrex	r3, [r3]
 8045630:	613b      	str	r3, [r7, #16]
   return(result);
 8045632:	693b      	ldr	r3, [r7, #16]
 8045634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8045638:	627b      	str	r3, [r7, #36]	; 0x24
 804563a:	68fb      	ldr	r3, [r7, #12]
 804563c:	681b      	ldr	r3, [r3, #0]
 804563e:	3308      	adds	r3, #8
 8045640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8045642:	623a      	str	r2, [r7, #32]
 8045644:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045646:	69f9      	ldr	r1, [r7, #28]
 8045648:	6a3a      	ldr	r2, [r7, #32]
 804564a:	e841 2300 	strex	r3, r2, [r1]
 804564e:	61bb      	str	r3, [r7, #24]
   return(result);
 8045650:	69bb      	ldr	r3, [r7, #24]
 8045652:	2b00      	cmp	r3, #0
 8045654:	d1e5      	bne.n	8045622 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8045656:	2300      	movs	r3, #0
 8045658:	e000      	b.n	804565c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 804565a:	2302      	movs	r3, #2
  }
}
 804565c:	4618      	mov	r0, r3
 804565e:	3728      	adds	r7, #40	; 0x28
 8045660:	46bd      	mov	sp, r7
 8045662:	bd80      	pop	{r7, pc}
 8045664:	080465ef 	.word	0x080465ef
 8045668:	08046685 	.word	0x08046685
 804566c:	080466a1 	.word	0x080466a1

08045670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8045670:	b580      	push	{r7, lr}
 8045672:	b0ba      	sub	sp, #232	; 0xe8
 8045674:	af00      	add	r7, sp, #0
 8045676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8045678:	687b      	ldr	r3, [r7, #4]
 804567a:	681b      	ldr	r3, [r3, #0]
 804567c:	69db      	ldr	r3, [r3, #28]
 804567e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8045682:	687b      	ldr	r3, [r7, #4]
 8045684:	681b      	ldr	r3, [r3, #0]
 8045686:	681b      	ldr	r3, [r3, #0]
 8045688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 804568c:	687b      	ldr	r3, [r7, #4]
 804568e:	681b      	ldr	r3, [r3, #0]
 8045690:	689b      	ldr	r3, [r3, #8]
 8045692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8045696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 804569a:	f640 030f 	movw	r3, #2063	; 0x80f
 804569e:	4013      	ands	r3, r2
 80456a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80456a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80456a8:	2b00      	cmp	r3, #0
 80456aa:	d115      	bne.n	80456d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80456ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80456b0:	f003 0320 	and.w	r3, r3, #32
 80456b4:	2b00      	cmp	r3, #0
 80456b6:	d00f      	beq.n	80456d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80456b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80456bc:	f003 0320 	and.w	r3, r3, #32
 80456c0:	2b00      	cmp	r3, #0
 80456c2:	d009      	beq.n	80456d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80456c4:	687b      	ldr	r3, [r7, #4]
 80456c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80456c8:	2b00      	cmp	r3, #0
 80456ca:	f000 82ac 	beq.w	8045c26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80456ce:	687b      	ldr	r3, [r7, #4]
 80456d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80456d2:	6878      	ldr	r0, [r7, #4]
 80456d4:	4798      	blx	r3
      }
      return;
 80456d6:	e2a6      	b.n	8045c26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80456d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80456dc:	2b00      	cmp	r3, #0
 80456de:	f000 8117 	beq.w	8045910 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80456e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80456e6:	f003 0301 	and.w	r3, r3, #1
 80456ea:	2b00      	cmp	r3, #0
 80456ec:	d106      	bne.n	80456fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80456ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80456f2:	4b85      	ldr	r3, [pc, #532]	; (8045908 <HAL_UART_IRQHandler+0x298>)
 80456f4:	4013      	ands	r3, r2
 80456f6:	2b00      	cmp	r3, #0
 80456f8:	f000 810a 	beq.w	8045910 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80456fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045700:	f003 0301 	and.w	r3, r3, #1
 8045704:	2b00      	cmp	r3, #0
 8045706:	d011      	beq.n	804572c <HAL_UART_IRQHandler+0xbc>
 8045708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045710:	2b00      	cmp	r3, #0
 8045712:	d00b      	beq.n	804572c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8045714:	687b      	ldr	r3, [r7, #4]
 8045716:	681b      	ldr	r3, [r3, #0]
 8045718:	2201      	movs	r2, #1
 804571a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 804571c:	687b      	ldr	r3, [r7, #4]
 804571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045722:	f043 0201 	orr.w	r2, r3, #1
 8045726:	687b      	ldr	r3, [r7, #4]
 8045728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045730:	f003 0302 	and.w	r3, r3, #2
 8045734:	2b00      	cmp	r3, #0
 8045736:	d011      	beq.n	804575c <HAL_UART_IRQHandler+0xec>
 8045738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 804573c:	f003 0301 	and.w	r3, r3, #1
 8045740:	2b00      	cmp	r3, #0
 8045742:	d00b      	beq.n	804575c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8045744:	687b      	ldr	r3, [r7, #4]
 8045746:	681b      	ldr	r3, [r3, #0]
 8045748:	2202      	movs	r2, #2
 804574a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 804574c:	687b      	ldr	r3, [r7, #4]
 804574e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045752:	f043 0204 	orr.w	r2, r3, #4
 8045756:	687b      	ldr	r3, [r7, #4]
 8045758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045760:	f003 0304 	and.w	r3, r3, #4
 8045764:	2b00      	cmp	r3, #0
 8045766:	d011      	beq.n	804578c <HAL_UART_IRQHandler+0x11c>
 8045768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 804576c:	f003 0301 	and.w	r3, r3, #1
 8045770:	2b00      	cmp	r3, #0
 8045772:	d00b      	beq.n	804578c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8045774:	687b      	ldr	r3, [r7, #4]
 8045776:	681b      	ldr	r3, [r3, #0]
 8045778:	2204      	movs	r2, #4
 804577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 804577c:	687b      	ldr	r3, [r7, #4]
 804577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045782:	f043 0202 	orr.w	r2, r3, #2
 8045786:	687b      	ldr	r3, [r7, #4]
 8045788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 804578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045790:	f003 0308 	and.w	r3, r3, #8
 8045794:	2b00      	cmp	r3, #0
 8045796:	d017      	beq.n	80457c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8045798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804579c:	f003 0320 	and.w	r3, r3, #32
 80457a0:	2b00      	cmp	r3, #0
 80457a2:	d105      	bne.n	80457b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80457a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80457a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80457ac:	2b00      	cmp	r3, #0
 80457ae:	d00b      	beq.n	80457c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80457b0:	687b      	ldr	r3, [r7, #4]
 80457b2:	681b      	ldr	r3, [r3, #0]
 80457b4:	2208      	movs	r2, #8
 80457b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80457b8:	687b      	ldr	r3, [r7, #4]
 80457ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80457be:	f043 0208 	orr.w	r2, r3, #8
 80457c2:	687b      	ldr	r3, [r7, #4]
 80457c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80457c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80457cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80457d0:	2b00      	cmp	r3, #0
 80457d2:	d012      	beq.n	80457fa <HAL_UART_IRQHandler+0x18a>
 80457d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80457d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80457dc:	2b00      	cmp	r3, #0
 80457de:	d00c      	beq.n	80457fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80457e0:	687b      	ldr	r3, [r7, #4]
 80457e2:	681b      	ldr	r3, [r3, #0]
 80457e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80457e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80457ea:	687b      	ldr	r3, [r7, #4]
 80457ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80457f0:	f043 0220 	orr.w	r2, r3, #32
 80457f4:	687b      	ldr	r3, [r7, #4]
 80457f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80457fa:	687b      	ldr	r3, [r7, #4]
 80457fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045800:	2b00      	cmp	r3, #0
 8045802:	f000 8212 	beq.w	8045c2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8045806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804580a:	f003 0320 	and.w	r3, r3, #32
 804580e:	2b00      	cmp	r3, #0
 8045810:	d00d      	beq.n	804582e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8045812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045816:	f003 0320 	and.w	r3, r3, #32
 804581a:	2b00      	cmp	r3, #0
 804581c:	d007      	beq.n	804582e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 804581e:	687b      	ldr	r3, [r7, #4]
 8045820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8045822:	2b00      	cmp	r3, #0
 8045824:	d003      	beq.n	804582e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8045826:	687b      	ldr	r3, [r7, #4]
 8045828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804582a:	6878      	ldr	r0, [r7, #4]
 804582c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 804582e:	687b      	ldr	r3, [r7, #4]
 8045830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8045838:	687b      	ldr	r3, [r7, #4]
 804583a:	681b      	ldr	r3, [r3, #0]
 804583c:	689b      	ldr	r3, [r3, #8]
 804583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045842:	2b40      	cmp	r3, #64	; 0x40
 8045844:	d005      	beq.n	8045852 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8045846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 804584a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804584e:	2b00      	cmp	r3, #0
 8045850:	d04f      	beq.n	80458f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8045852:	6878      	ldr	r0, [r7, #4]
 8045854:	f000 fe67 	bl	8046526 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045858:	687b      	ldr	r3, [r7, #4]
 804585a:	681b      	ldr	r3, [r3, #0]
 804585c:	689b      	ldr	r3, [r3, #8]
 804585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045862:	2b40      	cmp	r3, #64	; 0x40
 8045864:	d141      	bne.n	80458ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045866:	687b      	ldr	r3, [r7, #4]
 8045868:	681b      	ldr	r3, [r3, #0]
 804586a:	3308      	adds	r3, #8
 804586c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8045874:	e853 3f00 	ldrex	r3, [r3]
 8045878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 804587c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8045880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8045884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8045888:	687b      	ldr	r3, [r7, #4]
 804588a:	681b      	ldr	r3, [r3, #0]
 804588c:	3308      	adds	r3, #8
 804588e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8045892:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8045896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804589a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 804589e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80458a2:	e841 2300 	strex	r3, r2, [r1]
 80458a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80458aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80458ae:	2b00      	cmp	r3, #0
 80458b0:	d1d9      	bne.n	8045866 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80458b2:	687b      	ldr	r3, [r7, #4]
 80458b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80458b6:	2b00      	cmp	r3, #0
 80458b8:	d013      	beq.n	80458e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80458ba:	687b      	ldr	r3, [r7, #4]
 80458bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80458be:	4a13      	ldr	r2, [pc, #76]	; (804590c <HAL_UART_IRQHandler+0x29c>)
 80458c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80458c2:	687b      	ldr	r3, [r7, #4]
 80458c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80458c6:	4618      	mov	r0, r3
 80458c8:	f7fc fb0a 	bl	8041ee0 <HAL_DMA_Abort_IT>
 80458cc:	4603      	mov	r3, r0
 80458ce:	2b00      	cmp	r3, #0
 80458d0:	d017      	beq.n	8045902 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80458d2:	687b      	ldr	r3, [r7, #4]
 80458d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80458d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80458d8:	687a      	ldr	r2, [r7, #4]
 80458da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80458dc:	4610      	mov	r0, r2
 80458de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80458e0:	e00f      	b.n	8045902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80458e2:	6878      	ldr	r0, [r7, #4]
 80458e4:	f000 f9c0 	bl	8045c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80458e8:	e00b      	b.n	8045902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80458ea:	6878      	ldr	r0, [r7, #4]
 80458ec:	f000 f9bc 	bl	8045c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80458f0:	e007      	b.n	8045902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80458f2:	6878      	ldr	r0, [r7, #4]
 80458f4:	f000 f9b8 	bl	8045c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80458f8:	687b      	ldr	r3, [r7, #4]
 80458fa:	2200      	movs	r2, #0
 80458fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8045900:	e193      	b.n	8045c2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045902:	bf00      	nop
    return;
 8045904:	e191      	b.n	8045c2a <HAL_UART_IRQHandler+0x5ba>
 8045906:	bf00      	nop
 8045908:	04000120 	.word	0x04000120
 804590c:	0804671f 	.word	0x0804671f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8045910:	687b      	ldr	r3, [r7, #4]
 8045912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8045914:	2b01      	cmp	r3, #1
 8045916:	f040 814c 	bne.w	8045bb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 804591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804591e:	f003 0310 	and.w	r3, r3, #16
 8045922:	2b00      	cmp	r3, #0
 8045924:	f000 8145 	beq.w	8045bb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8045928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804592c:	f003 0310 	and.w	r3, r3, #16
 8045930:	2b00      	cmp	r3, #0
 8045932:	f000 813e 	beq.w	8045bb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8045936:	687b      	ldr	r3, [r7, #4]
 8045938:	681b      	ldr	r3, [r3, #0]
 804593a:	2210      	movs	r2, #16
 804593c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804593e:	687b      	ldr	r3, [r7, #4]
 8045940:	681b      	ldr	r3, [r3, #0]
 8045942:	689b      	ldr	r3, [r3, #8]
 8045944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045948:	2b40      	cmp	r3, #64	; 0x40
 804594a:	f040 80b6 	bne.w	8045aba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 804594e:	687b      	ldr	r3, [r7, #4]
 8045950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8045952:	681b      	ldr	r3, [r3, #0]
 8045954:	685b      	ldr	r3, [r3, #4]
 8045956:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 804595a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 804595e:	2b00      	cmp	r3, #0
 8045960:	f000 8165 	beq.w	8045c2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8045964:	687b      	ldr	r3, [r7, #4]
 8045966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 804596a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 804596e:	429a      	cmp	r2, r3
 8045970:	f080 815d 	bcs.w	8045c2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8045974:	687b      	ldr	r3, [r7, #4]
 8045976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 804597a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 804597e:	687b      	ldr	r3, [r7, #4]
 8045980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8045982:	69db      	ldr	r3, [r3, #28]
 8045984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045988:	f000 8086 	beq.w	8045a98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804598c:	687b      	ldr	r3, [r7, #4]
 804598e:	681b      	ldr	r3, [r3, #0]
 8045990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8045998:	e853 3f00 	ldrex	r3, [r3]
 804599c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80459a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80459a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80459a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80459ac:	687b      	ldr	r3, [r7, #4]
 80459ae:	681b      	ldr	r3, [r3, #0]
 80459b0:	461a      	mov	r2, r3
 80459b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80459b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80459ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80459be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80459c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80459c6:	e841 2300 	strex	r3, r2, [r1]
 80459ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80459ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80459d2:	2b00      	cmp	r3, #0
 80459d4:	d1da      	bne.n	804598c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80459d6:	687b      	ldr	r3, [r7, #4]
 80459d8:	681b      	ldr	r3, [r3, #0]
 80459da:	3308      	adds	r3, #8
 80459dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80459de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80459e0:	e853 3f00 	ldrex	r3, [r3]
 80459e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80459e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80459e8:	f023 0301 	bic.w	r3, r3, #1
 80459ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80459f0:	687b      	ldr	r3, [r7, #4]
 80459f2:	681b      	ldr	r3, [r3, #0]
 80459f4:	3308      	adds	r3, #8
 80459f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80459fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80459fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045a00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8045a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8045a06:	e841 2300 	strex	r3, r2, [r1]
 8045a0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8045a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8045a0e:	2b00      	cmp	r3, #0
 8045a10:	d1e1      	bne.n	80459d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045a12:	687b      	ldr	r3, [r7, #4]
 8045a14:	681b      	ldr	r3, [r3, #0]
 8045a16:	3308      	adds	r3, #8
 8045a18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8045a1c:	e853 3f00 	ldrex	r3, [r3]
 8045a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8045a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8045a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8045a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8045a2c:	687b      	ldr	r3, [r7, #4]
 8045a2e:	681b      	ldr	r3, [r3, #0]
 8045a30:	3308      	adds	r3, #8
 8045a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8045a36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8045a38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045a3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8045a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8045a3e:	e841 2300 	strex	r3, r2, [r1]
 8045a42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8045a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8045a46:	2b00      	cmp	r3, #0
 8045a48:	d1e3      	bne.n	8045a12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8045a4a:	687b      	ldr	r3, [r7, #4]
 8045a4c:	2220      	movs	r2, #32
 8045a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045a52:	687b      	ldr	r3, [r7, #4]
 8045a54:	2200      	movs	r2, #0
 8045a56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045a58:	687b      	ldr	r3, [r7, #4]
 8045a5a:	681b      	ldr	r3, [r3, #0]
 8045a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8045a60:	e853 3f00 	ldrex	r3, [r3]
 8045a64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8045a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8045a68:	f023 0310 	bic.w	r3, r3, #16
 8045a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8045a70:	687b      	ldr	r3, [r7, #4]
 8045a72:	681b      	ldr	r3, [r3, #0]
 8045a74:	461a      	mov	r2, r3
 8045a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8045a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8045a7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8045a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8045a82:	e841 2300 	strex	r3, r2, [r1]
 8045a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8045a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8045a8a:	2b00      	cmp	r3, #0
 8045a8c:	d1e4      	bne.n	8045a58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8045a8e:	687b      	ldr	r3, [r7, #4]
 8045a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8045a92:	4618      	mov	r0, r3
 8045a94:	f7fc f9b4 	bl	8041e00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8045a98:	687b      	ldr	r3, [r7, #4]
 8045a9a:	2202      	movs	r2, #2
 8045a9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8045a9e:	687b      	ldr	r3, [r7, #4]
 8045aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8045aa4:	687b      	ldr	r3, [r7, #4]
 8045aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8045aaa:	b29b      	uxth	r3, r3
 8045aac:	1ad3      	subs	r3, r2, r3
 8045aae:	b29b      	uxth	r3, r3
 8045ab0:	4619      	mov	r1, r3
 8045ab2:	6878      	ldr	r0, [r7, #4]
 8045ab4:	f000 f8e2 	bl	8045c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8045ab8:	e0b9      	b.n	8045c2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8045aba:	687b      	ldr	r3, [r7, #4]
 8045abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8045ac0:	687b      	ldr	r3, [r7, #4]
 8045ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8045ac6:	b29b      	uxth	r3, r3
 8045ac8:	1ad3      	subs	r3, r2, r3
 8045aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8045ace:	687b      	ldr	r3, [r7, #4]
 8045ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8045ad4:	b29b      	uxth	r3, r3
 8045ad6:	2b00      	cmp	r3, #0
 8045ad8:	f000 80ab 	beq.w	8045c32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8045adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8045ae0:	2b00      	cmp	r3, #0
 8045ae2:	f000 80a6 	beq.w	8045c32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8045ae6:	687b      	ldr	r3, [r7, #4]
 8045ae8:	681b      	ldr	r3, [r3, #0]
 8045aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045aee:	e853 3f00 	ldrex	r3, [r3]
 8045af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8045af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8045afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8045afe:	687b      	ldr	r3, [r7, #4]
 8045b00:	681b      	ldr	r3, [r3, #0]
 8045b02:	461a      	mov	r2, r3
 8045b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8045b08:	647b      	str	r3, [r7, #68]	; 0x44
 8045b0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8045b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8045b10:	e841 2300 	strex	r3, r2, [r1]
 8045b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8045b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045b18:	2b00      	cmp	r3, #0
 8045b1a:	d1e4      	bne.n	8045ae6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045b1c:	687b      	ldr	r3, [r7, #4]
 8045b1e:	681b      	ldr	r3, [r3, #0]
 8045b20:	3308      	adds	r3, #8
 8045b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b26:	e853 3f00 	ldrex	r3, [r3]
 8045b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8045b2c:	6a3b      	ldr	r3, [r7, #32]
 8045b2e:	f023 0301 	bic.w	r3, r3, #1
 8045b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8045b36:	687b      	ldr	r3, [r7, #4]
 8045b38:	681b      	ldr	r3, [r3, #0]
 8045b3a:	3308      	adds	r3, #8
 8045b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8045b40:	633a      	str	r2, [r7, #48]	; 0x30
 8045b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045b44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8045b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8045b48:	e841 2300 	strex	r3, r2, [r1]
 8045b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8045b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045b50:	2b00      	cmp	r3, #0
 8045b52:	d1e3      	bne.n	8045b1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8045b54:	687b      	ldr	r3, [r7, #4]
 8045b56:	2220      	movs	r2, #32
 8045b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045b5c:	687b      	ldr	r3, [r7, #4]
 8045b5e:	2200      	movs	r2, #0
 8045b60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8045b62:	687b      	ldr	r3, [r7, #4]
 8045b64:	2200      	movs	r2, #0
 8045b66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045b68:	687b      	ldr	r3, [r7, #4]
 8045b6a:	681b      	ldr	r3, [r3, #0]
 8045b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045b6e:	693b      	ldr	r3, [r7, #16]
 8045b70:	e853 3f00 	ldrex	r3, [r3]
 8045b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8045b76:	68fb      	ldr	r3, [r7, #12]
 8045b78:	f023 0310 	bic.w	r3, r3, #16
 8045b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8045b80:	687b      	ldr	r3, [r7, #4]
 8045b82:	681b      	ldr	r3, [r3, #0]
 8045b84:	461a      	mov	r2, r3
 8045b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8045b8a:	61fb      	str	r3, [r7, #28]
 8045b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045b8e:	69b9      	ldr	r1, [r7, #24]
 8045b90:	69fa      	ldr	r2, [r7, #28]
 8045b92:	e841 2300 	strex	r3, r2, [r1]
 8045b96:	617b      	str	r3, [r7, #20]
   return(result);
 8045b98:	697b      	ldr	r3, [r7, #20]
 8045b9a:	2b00      	cmp	r3, #0
 8045b9c:	d1e4      	bne.n	8045b68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8045b9e:	687b      	ldr	r3, [r7, #4]
 8045ba0:	2202      	movs	r2, #2
 8045ba2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8045ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8045ba8:	4619      	mov	r1, r3
 8045baa:	6878      	ldr	r0, [r7, #4]
 8045bac:	f000 f866 	bl	8045c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8045bb0:	e03f      	b.n	8045c32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8045bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8045bba:	2b00      	cmp	r3, #0
 8045bbc:	d00e      	beq.n	8045bdc <HAL_UART_IRQHandler+0x56c>
 8045bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8045bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8045bc6:	2b00      	cmp	r3, #0
 8045bc8:	d008      	beq.n	8045bdc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8045bca:	687b      	ldr	r3, [r7, #4]
 8045bcc:	681b      	ldr	r3, [r3, #0]
 8045bce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8045bd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8045bd4:	6878      	ldr	r0, [r7, #4]
 8045bd6:	f000 f85d 	bl	8045c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8045bda:	e02d      	b.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8045bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045be4:	2b00      	cmp	r3, #0
 8045be6:	d00e      	beq.n	8045c06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8045be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045bf0:	2b00      	cmp	r3, #0
 8045bf2:	d008      	beq.n	8045c06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8045bf4:	687b      	ldr	r3, [r7, #4]
 8045bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8045bf8:	2b00      	cmp	r3, #0
 8045bfa:	d01c      	beq.n	8045c36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8045bfc:	687b      	ldr	r3, [r7, #4]
 8045bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8045c00:	6878      	ldr	r0, [r7, #4]
 8045c02:	4798      	blx	r3
    }
    return;
 8045c04:	e017      	b.n	8045c36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8045c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045c0e:	2b00      	cmp	r3, #0
 8045c10:	d012      	beq.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
 8045c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045c1a:	2b00      	cmp	r3, #0
 8045c1c:	d00c      	beq.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8045c1e:	6878      	ldr	r0, [r7, #4]
 8045c20:	f000 fd93 	bl	804674a <UART_EndTransmit_IT>
    return;
 8045c24:	e008      	b.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8045c26:	bf00      	nop
 8045c28:	e006      	b.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8045c2a:	bf00      	nop
 8045c2c:	e004      	b.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8045c2e:	bf00      	nop
 8045c30:	e002      	b.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8045c32:	bf00      	nop
 8045c34:	e000      	b.n	8045c38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8045c36:	bf00      	nop
  }

}
 8045c38:	37e8      	adds	r7, #232	; 0xe8
 8045c3a:	46bd      	mov	sp, r7
 8045c3c:	bd80      	pop	{r7, pc}
 8045c3e:	bf00      	nop

08045c40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8045c40:	b480      	push	{r7}
 8045c42:	b083      	sub	sp, #12
 8045c44:	af00      	add	r7, sp, #0
 8045c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8045c48:	bf00      	nop
 8045c4a:	370c      	adds	r7, #12
 8045c4c:	46bd      	mov	sp, r7
 8045c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c52:	4770      	bx	lr

08045c54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8045c54:	b480      	push	{r7}
 8045c56:	b083      	sub	sp, #12
 8045c58:	af00      	add	r7, sp, #0
 8045c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8045c5c:	bf00      	nop
 8045c5e:	370c      	adds	r7, #12
 8045c60:	46bd      	mov	sp, r7
 8045c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c66:	4770      	bx	lr

08045c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8045c68:	b480      	push	{r7}
 8045c6a:	b083      	sub	sp, #12
 8045c6c:	af00      	add	r7, sp, #0
 8045c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8045c70:	bf00      	nop
 8045c72:	370c      	adds	r7, #12
 8045c74:	46bd      	mov	sp, r7
 8045c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c7a:	4770      	bx	lr

08045c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8045c7c:	b480      	push	{r7}
 8045c7e:	b083      	sub	sp, #12
 8045c80:	af00      	add	r7, sp, #0
 8045c82:	6078      	str	r0, [r7, #4]
 8045c84:	460b      	mov	r3, r1
 8045c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8045c88:	bf00      	nop
 8045c8a:	370c      	adds	r7, #12
 8045c8c:	46bd      	mov	sp, r7
 8045c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c92:	4770      	bx	lr

08045c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8045c94:	b480      	push	{r7}
 8045c96:	b083      	sub	sp, #12
 8045c98:	af00      	add	r7, sp, #0
 8045c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8045c9c:	bf00      	nop
 8045c9e:	370c      	adds	r7, #12
 8045ca0:	46bd      	mov	sp, r7
 8045ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045ca6:	4770      	bx	lr

08045ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045ca8:	b580      	push	{r7, lr}
 8045caa:	b088      	sub	sp, #32
 8045cac:	af00      	add	r7, sp, #0
 8045cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8045cb0:	2300      	movs	r3, #0
 8045cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8045cb4:	687b      	ldr	r3, [r7, #4]
 8045cb6:	689a      	ldr	r2, [r3, #8]
 8045cb8:	687b      	ldr	r3, [r7, #4]
 8045cba:	691b      	ldr	r3, [r3, #16]
 8045cbc:	431a      	orrs	r2, r3
 8045cbe:	687b      	ldr	r3, [r7, #4]
 8045cc0:	695b      	ldr	r3, [r3, #20]
 8045cc2:	431a      	orrs	r2, r3
 8045cc4:	687b      	ldr	r3, [r7, #4]
 8045cc6:	69db      	ldr	r3, [r3, #28]
 8045cc8:	4313      	orrs	r3, r2
 8045cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8045ccc:	687b      	ldr	r3, [r7, #4]
 8045cce:	681b      	ldr	r3, [r3, #0]
 8045cd0:	681a      	ldr	r2, [r3, #0]
 8045cd2:	4ba6      	ldr	r3, [pc, #664]	; (8045f6c <UART_SetConfig+0x2c4>)
 8045cd4:	4013      	ands	r3, r2
 8045cd6:	687a      	ldr	r2, [r7, #4]
 8045cd8:	6812      	ldr	r2, [r2, #0]
 8045cda:	6979      	ldr	r1, [r7, #20]
 8045cdc:	430b      	orrs	r3, r1
 8045cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045ce0:	687b      	ldr	r3, [r7, #4]
 8045ce2:	681b      	ldr	r3, [r3, #0]
 8045ce4:	685b      	ldr	r3, [r3, #4]
 8045ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8045cea:	687b      	ldr	r3, [r7, #4]
 8045cec:	68da      	ldr	r2, [r3, #12]
 8045cee:	687b      	ldr	r3, [r7, #4]
 8045cf0:	681b      	ldr	r3, [r3, #0]
 8045cf2:	430a      	orrs	r2, r1
 8045cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8045cf6:	687b      	ldr	r3, [r7, #4]
 8045cf8:	699b      	ldr	r3, [r3, #24]
 8045cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8045cfc:	687b      	ldr	r3, [r7, #4]
 8045cfe:	6a1b      	ldr	r3, [r3, #32]
 8045d00:	697a      	ldr	r2, [r7, #20]
 8045d02:	4313      	orrs	r3, r2
 8045d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8045d06:	687b      	ldr	r3, [r7, #4]
 8045d08:	681b      	ldr	r3, [r3, #0]
 8045d0a:	689b      	ldr	r3, [r3, #8]
 8045d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8045d10:	687b      	ldr	r3, [r7, #4]
 8045d12:	681b      	ldr	r3, [r3, #0]
 8045d14:	697a      	ldr	r2, [r7, #20]
 8045d16:	430a      	orrs	r2, r1
 8045d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8045d1a:	687b      	ldr	r3, [r7, #4]
 8045d1c:	681b      	ldr	r3, [r3, #0]
 8045d1e:	4a94      	ldr	r2, [pc, #592]	; (8045f70 <UART_SetConfig+0x2c8>)
 8045d20:	4293      	cmp	r3, r2
 8045d22:	d120      	bne.n	8045d66 <UART_SetConfig+0xbe>
 8045d24:	4b93      	ldr	r3, [pc, #588]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045d2a:	f003 0303 	and.w	r3, r3, #3
 8045d2e:	2b03      	cmp	r3, #3
 8045d30:	d816      	bhi.n	8045d60 <UART_SetConfig+0xb8>
 8045d32:	a201      	add	r2, pc, #4	; (adr r2, 8045d38 <UART_SetConfig+0x90>)
 8045d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045d38:	08045d49 	.word	0x08045d49
 8045d3c:	08045d55 	.word	0x08045d55
 8045d40:	08045d4f 	.word	0x08045d4f
 8045d44:	08045d5b 	.word	0x08045d5b
 8045d48:	2301      	movs	r3, #1
 8045d4a:	77fb      	strb	r3, [r7, #31]
 8045d4c:	e150      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045d4e:	2302      	movs	r3, #2
 8045d50:	77fb      	strb	r3, [r7, #31]
 8045d52:	e14d      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045d54:	2304      	movs	r3, #4
 8045d56:	77fb      	strb	r3, [r7, #31]
 8045d58:	e14a      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045d5a:	2308      	movs	r3, #8
 8045d5c:	77fb      	strb	r3, [r7, #31]
 8045d5e:	e147      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045d60:	2310      	movs	r3, #16
 8045d62:	77fb      	strb	r3, [r7, #31]
 8045d64:	e144      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045d66:	687b      	ldr	r3, [r7, #4]
 8045d68:	681b      	ldr	r3, [r3, #0]
 8045d6a:	4a83      	ldr	r2, [pc, #524]	; (8045f78 <UART_SetConfig+0x2d0>)
 8045d6c:	4293      	cmp	r3, r2
 8045d6e:	d132      	bne.n	8045dd6 <UART_SetConfig+0x12e>
 8045d70:	4b80      	ldr	r3, [pc, #512]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045d76:	f003 030c 	and.w	r3, r3, #12
 8045d7a:	2b0c      	cmp	r3, #12
 8045d7c:	d828      	bhi.n	8045dd0 <UART_SetConfig+0x128>
 8045d7e:	a201      	add	r2, pc, #4	; (adr r2, 8045d84 <UART_SetConfig+0xdc>)
 8045d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045d84:	08045db9 	.word	0x08045db9
 8045d88:	08045dd1 	.word	0x08045dd1
 8045d8c:	08045dd1 	.word	0x08045dd1
 8045d90:	08045dd1 	.word	0x08045dd1
 8045d94:	08045dc5 	.word	0x08045dc5
 8045d98:	08045dd1 	.word	0x08045dd1
 8045d9c:	08045dd1 	.word	0x08045dd1
 8045da0:	08045dd1 	.word	0x08045dd1
 8045da4:	08045dbf 	.word	0x08045dbf
 8045da8:	08045dd1 	.word	0x08045dd1
 8045dac:	08045dd1 	.word	0x08045dd1
 8045db0:	08045dd1 	.word	0x08045dd1
 8045db4:	08045dcb 	.word	0x08045dcb
 8045db8:	2300      	movs	r3, #0
 8045dba:	77fb      	strb	r3, [r7, #31]
 8045dbc:	e118      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045dbe:	2302      	movs	r3, #2
 8045dc0:	77fb      	strb	r3, [r7, #31]
 8045dc2:	e115      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045dc4:	2304      	movs	r3, #4
 8045dc6:	77fb      	strb	r3, [r7, #31]
 8045dc8:	e112      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045dca:	2308      	movs	r3, #8
 8045dcc:	77fb      	strb	r3, [r7, #31]
 8045dce:	e10f      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045dd0:	2310      	movs	r3, #16
 8045dd2:	77fb      	strb	r3, [r7, #31]
 8045dd4:	e10c      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045dd6:	687b      	ldr	r3, [r7, #4]
 8045dd8:	681b      	ldr	r3, [r3, #0]
 8045dda:	4a68      	ldr	r2, [pc, #416]	; (8045f7c <UART_SetConfig+0x2d4>)
 8045ddc:	4293      	cmp	r3, r2
 8045dde:	d120      	bne.n	8045e22 <UART_SetConfig+0x17a>
 8045de0:	4b64      	ldr	r3, [pc, #400]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8045dea:	2b30      	cmp	r3, #48	; 0x30
 8045dec:	d013      	beq.n	8045e16 <UART_SetConfig+0x16e>
 8045dee:	2b30      	cmp	r3, #48	; 0x30
 8045df0:	d814      	bhi.n	8045e1c <UART_SetConfig+0x174>
 8045df2:	2b20      	cmp	r3, #32
 8045df4:	d009      	beq.n	8045e0a <UART_SetConfig+0x162>
 8045df6:	2b20      	cmp	r3, #32
 8045df8:	d810      	bhi.n	8045e1c <UART_SetConfig+0x174>
 8045dfa:	2b00      	cmp	r3, #0
 8045dfc:	d002      	beq.n	8045e04 <UART_SetConfig+0x15c>
 8045dfe:	2b10      	cmp	r3, #16
 8045e00:	d006      	beq.n	8045e10 <UART_SetConfig+0x168>
 8045e02:	e00b      	b.n	8045e1c <UART_SetConfig+0x174>
 8045e04:	2300      	movs	r3, #0
 8045e06:	77fb      	strb	r3, [r7, #31]
 8045e08:	e0f2      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e0a:	2302      	movs	r3, #2
 8045e0c:	77fb      	strb	r3, [r7, #31]
 8045e0e:	e0ef      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e10:	2304      	movs	r3, #4
 8045e12:	77fb      	strb	r3, [r7, #31]
 8045e14:	e0ec      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e16:	2308      	movs	r3, #8
 8045e18:	77fb      	strb	r3, [r7, #31]
 8045e1a:	e0e9      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e1c:	2310      	movs	r3, #16
 8045e1e:	77fb      	strb	r3, [r7, #31]
 8045e20:	e0e6      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e22:	687b      	ldr	r3, [r7, #4]
 8045e24:	681b      	ldr	r3, [r3, #0]
 8045e26:	4a56      	ldr	r2, [pc, #344]	; (8045f80 <UART_SetConfig+0x2d8>)
 8045e28:	4293      	cmp	r3, r2
 8045e2a:	d120      	bne.n	8045e6e <UART_SetConfig+0x1c6>
 8045e2c:	4b51      	ldr	r3, [pc, #324]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8045e36:	2bc0      	cmp	r3, #192	; 0xc0
 8045e38:	d013      	beq.n	8045e62 <UART_SetConfig+0x1ba>
 8045e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8045e3c:	d814      	bhi.n	8045e68 <UART_SetConfig+0x1c0>
 8045e3e:	2b80      	cmp	r3, #128	; 0x80
 8045e40:	d009      	beq.n	8045e56 <UART_SetConfig+0x1ae>
 8045e42:	2b80      	cmp	r3, #128	; 0x80
 8045e44:	d810      	bhi.n	8045e68 <UART_SetConfig+0x1c0>
 8045e46:	2b00      	cmp	r3, #0
 8045e48:	d002      	beq.n	8045e50 <UART_SetConfig+0x1a8>
 8045e4a:	2b40      	cmp	r3, #64	; 0x40
 8045e4c:	d006      	beq.n	8045e5c <UART_SetConfig+0x1b4>
 8045e4e:	e00b      	b.n	8045e68 <UART_SetConfig+0x1c0>
 8045e50:	2300      	movs	r3, #0
 8045e52:	77fb      	strb	r3, [r7, #31]
 8045e54:	e0cc      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e56:	2302      	movs	r3, #2
 8045e58:	77fb      	strb	r3, [r7, #31]
 8045e5a:	e0c9      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e5c:	2304      	movs	r3, #4
 8045e5e:	77fb      	strb	r3, [r7, #31]
 8045e60:	e0c6      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e62:	2308      	movs	r3, #8
 8045e64:	77fb      	strb	r3, [r7, #31]
 8045e66:	e0c3      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e68:	2310      	movs	r3, #16
 8045e6a:	77fb      	strb	r3, [r7, #31]
 8045e6c:	e0c0      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045e6e:	687b      	ldr	r3, [r7, #4]
 8045e70:	681b      	ldr	r3, [r3, #0]
 8045e72:	4a44      	ldr	r2, [pc, #272]	; (8045f84 <UART_SetConfig+0x2dc>)
 8045e74:	4293      	cmp	r3, r2
 8045e76:	d125      	bne.n	8045ec4 <UART_SetConfig+0x21c>
 8045e78:	4b3e      	ldr	r3, [pc, #248]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8045e86:	d017      	beq.n	8045eb8 <UART_SetConfig+0x210>
 8045e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8045e8c:	d817      	bhi.n	8045ebe <UART_SetConfig+0x216>
 8045e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045e92:	d00b      	beq.n	8045eac <UART_SetConfig+0x204>
 8045e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045e98:	d811      	bhi.n	8045ebe <UART_SetConfig+0x216>
 8045e9a:	2b00      	cmp	r3, #0
 8045e9c:	d003      	beq.n	8045ea6 <UART_SetConfig+0x1fe>
 8045e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045ea2:	d006      	beq.n	8045eb2 <UART_SetConfig+0x20a>
 8045ea4:	e00b      	b.n	8045ebe <UART_SetConfig+0x216>
 8045ea6:	2300      	movs	r3, #0
 8045ea8:	77fb      	strb	r3, [r7, #31]
 8045eaa:	e0a1      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045eac:	2302      	movs	r3, #2
 8045eae:	77fb      	strb	r3, [r7, #31]
 8045eb0:	e09e      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045eb2:	2304      	movs	r3, #4
 8045eb4:	77fb      	strb	r3, [r7, #31]
 8045eb6:	e09b      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045eb8:	2308      	movs	r3, #8
 8045eba:	77fb      	strb	r3, [r7, #31]
 8045ebc:	e098      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045ebe:	2310      	movs	r3, #16
 8045ec0:	77fb      	strb	r3, [r7, #31]
 8045ec2:	e095      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045ec4:	687b      	ldr	r3, [r7, #4]
 8045ec6:	681b      	ldr	r3, [r3, #0]
 8045ec8:	4a2f      	ldr	r2, [pc, #188]	; (8045f88 <UART_SetConfig+0x2e0>)
 8045eca:	4293      	cmp	r3, r2
 8045ecc:	d125      	bne.n	8045f1a <UART_SetConfig+0x272>
 8045ece:	4b29      	ldr	r3, [pc, #164]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8045ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8045edc:	d017      	beq.n	8045f0e <UART_SetConfig+0x266>
 8045ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8045ee2:	d817      	bhi.n	8045f14 <UART_SetConfig+0x26c>
 8045ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8045ee8:	d00b      	beq.n	8045f02 <UART_SetConfig+0x25a>
 8045eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8045eee:	d811      	bhi.n	8045f14 <UART_SetConfig+0x26c>
 8045ef0:	2b00      	cmp	r3, #0
 8045ef2:	d003      	beq.n	8045efc <UART_SetConfig+0x254>
 8045ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045ef8:	d006      	beq.n	8045f08 <UART_SetConfig+0x260>
 8045efa:	e00b      	b.n	8045f14 <UART_SetConfig+0x26c>
 8045efc:	2301      	movs	r3, #1
 8045efe:	77fb      	strb	r3, [r7, #31]
 8045f00:	e076      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f02:	2302      	movs	r3, #2
 8045f04:	77fb      	strb	r3, [r7, #31]
 8045f06:	e073      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f08:	2304      	movs	r3, #4
 8045f0a:	77fb      	strb	r3, [r7, #31]
 8045f0c:	e070      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f0e:	2308      	movs	r3, #8
 8045f10:	77fb      	strb	r3, [r7, #31]
 8045f12:	e06d      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f14:	2310      	movs	r3, #16
 8045f16:	77fb      	strb	r3, [r7, #31]
 8045f18:	e06a      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f1a:	687b      	ldr	r3, [r7, #4]
 8045f1c:	681b      	ldr	r3, [r3, #0]
 8045f1e:	4a1b      	ldr	r2, [pc, #108]	; (8045f8c <UART_SetConfig+0x2e4>)
 8045f20:	4293      	cmp	r3, r2
 8045f22:	d138      	bne.n	8045f96 <UART_SetConfig+0x2ee>
 8045f24:	4b13      	ldr	r3, [pc, #76]	; (8045f74 <UART_SetConfig+0x2cc>)
 8045f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8045f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8045f32:	d017      	beq.n	8045f64 <UART_SetConfig+0x2bc>
 8045f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8045f38:	d82a      	bhi.n	8045f90 <UART_SetConfig+0x2e8>
 8045f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8045f3e:	d00b      	beq.n	8045f58 <UART_SetConfig+0x2b0>
 8045f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8045f44:	d824      	bhi.n	8045f90 <UART_SetConfig+0x2e8>
 8045f46:	2b00      	cmp	r3, #0
 8045f48:	d003      	beq.n	8045f52 <UART_SetConfig+0x2aa>
 8045f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8045f4e:	d006      	beq.n	8045f5e <UART_SetConfig+0x2b6>
 8045f50:	e01e      	b.n	8045f90 <UART_SetConfig+0x2e8>
 8045f52:	2300      	movs	r3, #0
 8045f54:	77fb      	strb	r3, [r7, #31]
 8045f56:	e04b      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f58:	2302      	movs	r3, #2
 8045f5a:	77fb      	strb	r3, [r7, #31]
 8045f5c:	e048      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f5e:	2304      	movs	r3, #4
 8045f60:	77fb      	strb	r3, [r7, #31]
 8045f62:	e045      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f64:	2308      	movs	r3, #8
 8045f66:	77fb      	strb	r3, [r7, #31]
 8045f68:	e042      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f6a:	bf00      	nop
 8045f6c:	efff69f3 	.word	0xefff69f3
 8045f70:	40011000 	.word	0x40011000
 8045f74:	40023800 	.word	0x40023800
 8045f78:	40004400 	.word	0x40004400
 8045f7c:	40004800 	.word	0x40004800
 8045f80:	40004c00 	.word	0x40004c00
 8045f84:	40005000 	.word	0x40005000
 8045f88:	40011400 	.word	0x40011400
 8045f8c:	40007800 	.word	0x40007800
 8045f90:	2310      	movs	r3, #16
 8045f92:	77fb      	strb	r3, [r7, #31]
 8045f94:	e02c      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045f96:	687b      	ldr	r3, [r7, #4]
 8045f98:	681b      	ldr	r3, [r3, #0]
 8045f9a:	4a72      	ldr	r2, [pc, #456]	; (8046164 <UART_SetConfig+0x4bc>)
 8045f9c:	4293      	cmp	r3, r2
 8045f9e:	d125      	bne.n	8045fec <UART_SetConfig+0x344>
 8045fa0:	4b71      	ldr	r3, [pc, #452]	; (8046168 <UART_SetConfig+0x4c0>)
 8045fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8045faa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8045fae:	d017      	beq.n	8045fe0 <UART_SetConfig+0x338>
 8045fb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8045fb4:	d817      	bhi.n	8045fe6 <UART_SetConfig+0x33e>
 8045fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8045fba:	d00b      	beq.n	8045fd4 <UART_SetConfig+0x32c>
 8045fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8045fc0:	d811      	bhi.n	8045fe6 <UART_SetConfig+0x33e>
 8045fc2:	2b00      	cmp	r3, #0
 8045fc4:	d003      	beq.n	8045fce <UART_SetConfig+0x326>
 8045fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8045fca:	d006      	beq.n	8045fda <UART_SetConfig+0x332>
 8045fcc:	e00b      	b.n	8045fe6 <UART_SetConfig+0x33e>
 8045fce:	2300      	movs	r3, #0
 8045fd0:	77fb      	strb	r3, [r7, #31]
 8045fd2:	e00d      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045fd4:	2302      	movs	r3, #2
 8045fd6:	77fb      	strb	r3, [r7, #31]
 8045fd8:	e00a      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045fda:	2304      	movs	r3, #4
 8045fdc:	77fb      	strb	r3, [r7, #31]
 8045fde:	e007      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045fe0:	2308      	movs	r3, #8
 8045fe2:	77fb      	strb	r3, [r7, #31]
 8045fe4:	e004      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045fe6:	2310      	movs	r3, #16
 8045fe8:	77fb      	strb	r3, [r7, #31]
 8045fea:	e001      	b.n	8045ff0 <UART_SetConfig+0x348>
 8045fec:	2310      	movs	r3, #16
 8045fee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045ff0:	687b      	ldr	r3, [r7, #4]
 8045ff2:	69db      	ldr	r3, [r3, #28]
 8045ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8045ff8:	d15b      	bne.n	80460b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8045ffa:	7ffb      	ldrb	r3, [r7, #31]
 8045ffc:	2b08      	cmp	r3, #8
 8045ffe:	d828      	bhi.n	8046052 <UART_SetConfig+0x3aa>
 8046000:	a201      	add	r2, pc, #4	; (adr r2, 8046008 <UART_SetConfig+0x360>)
 8046002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046006:	bf00      	nop
 8046008:	0804602d 	.word	0x0804602d
 804600c:	08046035 	.word	0x08046035
 8046010:	0804603d 	.word	0x0804603d
 8046014:	08046053 	.word	0x08046053
 8046018:	08046043 	.word	0x08046043
 804601c:	08046053 	.word	0x08046053
 8046020:	08046053 	.word	0x08046053
 8046024:	08046053 	.word	0x08046053
 8046028:	0804604b 	.word	0x0804604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804602c:	f7fe faf4 	bl	8044618 <HAL_RCC_GetPCLK1Freq>
 8046030:	61b8      	str	r0, [r7, #24]
        break;
 8046032:	e013      	b.n	804605c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8046034:	f7fe fb04 	bl	8044640 <HAL_RCC_GetPCLK2Freq>
 8046038:	61b8      	str	r0, [r7, #24]
        break;
 804603a:	e00f      	b.n	804605c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804603c:	4b4b      	ldr	r3, [pc, #300]	; (804616c <UART_SetConfig+0x4c4>)
 804603e:	61bb      	str	r3, [r7, #24]
        break;
 8046040:	e00c      	b.n	804605c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8046042:	f7fe fa17 	bl	8044474 <HAL_RCC_GetSysClockFreq>
 8046046:	61b8      	str	r0, [r7, #24]
        break;
 8046048:	e008      	b.n	804605c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804604e:	61bb      	str	r3, [r7, #24]
        break;
 8046050:	e004      	b.n	804605c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8046052:	2300      	movs	r3, #0
 8046054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8046056:	2301      	movs	r3, #1
 8046058:	77bb      	strb	r3, [r7, #30]
        break;
 804605a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804605c:	69bb      	ldr	r3, [r7, #24]
 804605e:	2b00      	cmp	r3, #0
 8046060:	d074      	beq.n	804614c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8046062:	69bb      	ldr	r3, [r7, #24]
 8046064:	005a      	lsls	r2, r3, #1
 8046066:	687b      	ldr	r3, [r7, #4]
 8046068:	685b      	ldr	r3, [r3, #4]
 804606a:	085b      	lsrs	r3, r3, #1
 804606c:	441a      	add	r2, r3
 804606e:	687b      	ldr	r3, [r7, #4]
 8046070:	685b      	ldr	r3, [r3, #4]
 8046072:	fbb2 f3f3 	udiv	r3, r2, r3
 8046076:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046078:	693b      	ldr	r3, [r7, #16]
 804607a:	2b0f      	cmp	r3, #15
 804607c:	d916      	bls.n	80460ac <UART_SetConfig+0x404>
 804607e:	693b      	ldr	r3, [r7, #16]
 8046080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046084:	d212      	bcs.n	80460ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8046086:	693b      	ldr	r3, [r7, #16]
 8046088:	b29b      	uxth	r3, r3
 804608a:	f023 030f 	bic.w	r3, r3, #15
 804608e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8046090:	693b      	ldr	r3, [r7, #16]
 8046092:	085b      	lsrs	r3, r3, #1
 8046094:	b29b      	uxth	r3, r3
 8046096:	f003 0307 	and.w	r3, r3, #7
 804609a:	b29a      	uxth	r2, r3
 804609c:	89fb      	ldrh	r3, [r7, #14]
 804609e:	4313      	orrs	r3, r2
 80460a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80460a2:	687b      	ldr	r3, [r7, #4]
 80460a4:	681b      	ldr	r3, [r3, #0]
 80460a6:	89fa      	ldrh	r2, [r7, #14]
 80460a8:	60da      	str	r2, [r3, #12]
 80460aa:	e04f      	b.n	804614c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80460ac:	2301      	movs	r3, #1
 80460ae:	77bb      	strb	r3, [r7, #30]
 80460b0:	e04c      	b.n	804614c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80460b2:	7ffb      	ldrb	r3, [r7, #31]
 80460b4:	2b08      	cmp	r3, #8
 80460b6:	d828      	bhi.n	804610a <UART_SetConfig+0x462>
 80460b8:	a201      	add	r2, pc, #4	; (adr r2, 80460c0 <UART_SetConfig+0x418>)
 80460ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80460be:	bf00      	nop
 80460c0:	080460e5 	.word	0x080460e5
 80460c4:	080460ed 	.word	0x080460ed
 80460c8:	080460f5 	.word	0x080460f5
 80460cc:	0804610b 	.word	0x0804610b
 80460d0:	080460fb 	.word	0x080460fb
 80460d4:	0804610b 	.word	0x0804610b
 80460d8:	0804610b 	.word	0x0804610b
 80460dc:	0804610b 	.word	0x0804610b
 80460e0:	08046103 	.word	0x08046103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80460e4:	f7fe fa98 	bl	8044618 <HAL_RCC_GetPCLK1Freq>
 80460e8:	61b8      	str	r0, [r7, #24]
        break;
 80460ea:	e013      	b.n	8046114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80460ec:	f7fe faa8 	bl	8044640 <HAL_RCC_GetPCLK2Freq>
 80460f0:	61b8      	str	r0, [r7, #24]
        break;
 80460f2:	e00f      	b.n	8046114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80460f4:	4b1d      	ldr	r3, [pc, #116]	; (804616c <UART_SetConfig+0x4c4>)
 80460f6:	61bb      	str	r3, [r7, #24]
        break;
 80460f8:	e00c      	b.n	8046114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80460fa:	f7fe f9bb 	bl	8044474 <HAL_RCC_GetSysClockFreq>
 80460fe:	61b8      	str	r0, [r7, #24]
        break;
 8046100:	e008      	b.n	8046114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8046106:	61bb      	str	r3, [r7, #24]
        break;
 8046108:	e004      	b.n	8046114 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 804610a:	2300      	movs	r3, #0
 804610c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804610e:	2301      	movs	r3, #1
 8046110:	77bb      	strb	r3, [r7, #30]
        break;
 8046112:	bf00      	nop
    }

    if (pclk != 0U)
 8046114:	69bb      	ldr	r3, [r7, #24]
 8046116:	2b00      	cmp	r3, #0
 8046118:	d018      	beq.n	804614c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 804611a:	687b      	ldr	r3, [r7, #4]
 804611c:	685b      	ldr	r3, [r3, #4]
 804611e:	085a      	lsrs	r2, r3, #1
 8046120:	69bb      	ldr	r3, [r7, #24]
 8046122:	441a      	add	r2, r3
 8046124:	687b      	ldr	r3, [r7, #4]
 8046126:	685b      	ldr	r3, [r3, #4]
 8046128:	fbb2 f3f3 	udiv	r3, r2, r3
 804612c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804612e:	693b      	ldr	r3, [r7, #16]
 8046130:	2b0f      	cmp	r3, #15
 8046132:	d909      	bls.n	8046148 <UART_SetConfig+0x4a0>
 8046134:	693b      	ldr	r3, [r7, #16]
 8046136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804613a:	d205      	bcs.n	8046148 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 804613c:	693b      	ldr	r3, [r7, #16]
 804613e:	b29a      	uxth	r2, r3
 8046140:	687b      	ldr	r3, [r7, #4]
 8046142:	681b      	ldr	r3, [r3, #0]
 8046144:	60da      	str	r2, [r3, #12]
 8046146:	e001      	b.n	804614c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8046148:	2301      	movs	r3, #1
 804614a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804614c:	687b      	ldr	r3, [r7, #4]
 804614e:	2200      	movs	r2, #0
 8046150:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8046152:	687b      	ldr	r3, [r7, #4]
 8046154:	2200      	movs	r2, #0
 8046156:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8046158:	7fbb      	ldrb	r3, [r7, #30]
}
 804615a:	4618      	mov	r0, r3
 804615c:	3720      	adds	r7, #32
 804615e:	46bd      	mov	sp, r7
 8046160:	bd80      	pop	{r7, pc}
 8046162:	bf00      	nop
 8046164:	40007c00 	.word	0x40007c00
 8046168:	40023800 	.word	0x40023800
 804616c:	00f42400 	.word	0x00f42400

08046170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8046170:	b480      	push	{r7}
 8046172:	b083      	sub	sp, #12
 8046174:	af00      	add	r7, sp, #0
 8046176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8046178:	687b      	ldr	r3, [r7, #4]
 804617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804617c:	f003 0301 	and.w	r3, r3, #1
 8046180:	2b00      	cmp	r3, #0
 8046182:	d00a      	beq.n	804619a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8046184:	687b      	ldr	r3, [r7, #4]
 8046186:	681b      	ldr	r3, [r3, #0]
 8046188:	685b      	ldr	r3, [r3, #4]
 804618a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804618e:	687b      	ldr	r3, [r7, #4]
 8046190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8046192:	687b      	ldr	r3, [r7, #4]
 8046194:	681b      	ldr	r3, [r3, #0]
 8046196:	430a      	orrs	r2, r1
 8046198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804619a:	687b      	ldr	r3, [r7, #4]
 804619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804619e:	f003 0302 	and.w	r3, r3, #2
 80461a2:	2b00      	cmp	r3, #0
 80461a4:	d00a      	beq.n	80461bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80461a6:	687b      	ldr	r3, [r7, #4]
 80461a8:	681b      	ldr	r3, [r3, #0]
 80461aa:	685b      	ldr	r3, [r3, #4]
 80461ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80461b0:	687b      	ldr	r3, [r7, #4]
 80461b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80461b4:	687b      	ldr	r3, [r7, #4]
 80461b6:	681b      	ldr	r3, [r3, #0]
 80461b8:	430a      	orrs	r2, r1
 80461ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80461bc:	687b      	ldr	r3, [r7, #4]
 80461be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80461c0:	f003 0304 	and.w	r3, r3, #4
 80461c4:	2b00      	cmp	r3, #0
 80461c6:	d00a      	beq.n	80461de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80461c8:	687b      	ldr	r3, [r7, #4]
 80461ca:	681b      	ldr	r3, [r3, #0]
 80461cc:	685b      	ldr	r3, [r3, #4]
 80461ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80461d2:	687b      	ldr	r3, [r7, #4]
 80461d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80461d6:	687b      	ldr	r3, [r7, #4]
 80461d8:	681b      	ldr	r3, [r3, #0]
 80461da:	430a      	orrs	r2, r1
 80461dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80461de:	687b      	ldr	r3, [r7, #4]
 80461e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80461e2:	f003 0308 	and.w	r3, r3, #8
 80461e6:	2b00      	cmp	r3, #0
 80461e8:	d00a      	beq.n	8046200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80461ea:	687b      	ldr	r3, [r7, #4]
 80461ec:	681b      	ldr	r3, [r3, #0]
 80461ee:	685b      	ldr	r3, [r3, #4]
 80461f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80461f4:	687b      	ldr	r3, [r7, #4]
 80461f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80461f8:	687b      	ldr	r3, [r7, #4]
 80461fa:	681b      	ldr	r3, [r3, #0]
 80461fc:	430a      	orrs	r2, r1
 80461fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8046200:	687b      	ldr	r3, [r7, #4]
 8046202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046204:	f003 0310 	and.w	r3, r3, #16
 8046208:	2b00      	cmp	r3, #0
 804620a:	d00a      	beq.n	8046222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804620c:	687b      	ldr	r3, [r7, #4]
 804620e:	681b      	ldr	r3, [r3, #0]
 8046210:	689b      	ldr	r3, [r3, #8]
 8046212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8046216:	687b      	ldr	r3, [r7, #4]
 8046218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804621a:	687b      	ldr	r3, [r7, #4]
 804621c:	681b      	ldr	r3, [r3, #0]
 804621e:	430a      	orrs	r2, r1
 8046220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8046222:	687b      	ldr	r3, [r7, #4]
 8046224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046226:	f003 0320 	and.w	r3, r3, #32
 804622a:	2b00      	cmp	r3, #0
 804622c:	d00a      	beq.n	8046244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804622e:	687b      	ldr	r3, [r7, #4]
 8046230:	681b      	ldr	r3, [r3, #0]
 8046232:	689b      	ldr	r3, [r3, #8]
 8046234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8046238:	687b      	ldr	r3, [r7, #4]
 804623a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804623c:	687b      	ldr	r3, [r7, #4]
 804623e:	681b      	ldr	r3, [r3, #0]
 8046240:	430a      	orrs	r2, r1
 8046242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8046244:	687b      	ldr	r3, [r7, #4]
 8046246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804624c:	2b00      	cmp	r3, #0
 804624e:	d01a      	beq.n	8046286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8046250:	687b      	ldr	r3, [r7, #4]
 8046252:	681b      	ldr	r3, [r3, #0]
 8046254:	685b      	ldr	r3, [r3, #4]
 8046256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804625a:	687b      	ldr	r3, [r7, #4]
 804625c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804625e:	687b      	ldr	r3, [r7, #4]
 8046260:	681b      	ldr	r3, [r3, #0]
 8046262:	430a      	orrs	r2, r1
 8046264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8046266:	687b      	ldr	r3, [r7, #4]
 8046268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804626a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804626e:	d10a      	bne.n	8046286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8046270:	687b      	ldr	r3, [r7, #4]
 8046272:	681b      	ldr	r3, [r3, #0]
 8046274:	685b      	ldr	r3, [r3, #4]
 8046276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804627a:	687b      	ldr	r3, [r7, #4]
 804627c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804627e:	687b      	ldr	r3, [r7, #4]
 8046280:	681b      	ldr	r3, [r3, #0]
 8046282:	430a      	orrs	r2, r1
 8046284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8046286:	687b      	ldr	r3, [r7, #4]
 8046288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804628e:	2b00      	cmp	r3, #0
 8046290:	d00a      	beq.n	80462a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8046292:	687b      	ldr	r3, [r7, #4]
 8046294:	681b      	ldr	r3, [r3, #0]
 8046296:	685b      	ldr	r3, [r3, #4]
 8046298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 804629c:	687b      	ldr	r3, [r7, #4]
 804629e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80462a0:	687b      	ldr	r3, [r7, #4]
 80462a2:	681b      	ldr	r3, [r3, #0]
 80462a4:	430a      	orrs	r2, r1
 80462a6:	605a      	str	r2, [r3, #4]
  }
}
 80462a8:	bf00      	nop
 80462aa:	370c      	adds	r7, #12
 80462ac:	46bd      	mov	sp, r7
 80462ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462b2:	4770      	bx	lr

080462b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80462b4:	b580      	push	{r7, lr}
 80462b6:	b086      	sub	sp, #24
 80462b8:	af02      	add	r7, sp, #8
 80462ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80462bc:	687b      	ldr	r3, [r7, #4]
 80462be:	2200      	movs	r2, #0
 80462c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80462c4:	f7fb fb70 	bl	80419a8 <HAL_GetTick>
 80462c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80462ca:	687b      	ldr	r3, [r7, #4]
 80462cc:	681b      	ldr	r3, [r3, #0]
 80462ce:	681b      	ldr	r3, [r3, #0]
 80462d0:	f003 0308 	and.w	r3, r3, #8
 80462d4:	2b08      	cmp	r3, #8
 80462d6:	d10e      	bne.n	80462f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80462d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80462dc:	9300      	str	r3, [sp, #0]
 80462de:	68fb      	ldr	r3, [r7, #12]
 80462e0:	2200      	movs	r2, #0
 80462e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80462e6:	6878      	ldr	r0, [r7, #4]
 80462e8:	f000 f831 	bl	804634e <UART_WaitOnFlagUntilTimeout>
 80462ec:	4603      	mov	r3, r0
 80462ee:	2b00      	cmp	r3, #0
 80462f0:	d001      	beq.n	80462f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80462f2:	2303      	movs	r3, #3
 80462f4:	e027      	b.n	8046346 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80462f6:	687b      	ldr	r3, [r7, #4]
 80462f8:	681b      	ldr	r3, [r3, #0]
 80462fa:	681b      	ldr	r3, [r3, #0]
 80462fc:	f003 0304 	and.w	r3, r3, #4
 8046300:	2b04      	cmp	r3, #4
 8046302:	d10e      	bne.n	8046322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8046308:	9300      	str	r3, [sp, #0]
 804630a:	68fb      	ldr	r3, [r7, #12]
 804630c:	2200      	movs	r2, #0
 804630e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8046312:	6878      	ldr	r0, [r7, #4]
 8046314:	f000 f81b 	bl	804634e <UART_WaitOnFlagUntilTimeout>
 8046318:	4603      	mov	r3, r0
 804631a:	2b00      	cmp	r3, #0
 804631c:	d001      	beq.n	8046322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804631e:	2303      	movs	r3, #3
 8046320:	e011      	b.n	8046346 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8046322:	687b      	ldr	r3, [r7, #4]
 8046324:	2220      	movs	r2, #32
 8046326:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8046328:	687b      	ldr	r3, [r7, #4]
 804632a:	2220      	movs	r2, #32
 804632c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046330:	687b      	ldr	r3, [r7, #4]
 8046332:	2200      	movs	r2, #0
 8046334:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8046336:	687b      	ldr	r3, [r7, #4]
 8046338:	2200      	movs	r2, #0
 804633a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 804633c:	687b      	ldr	r3, [r7, #4]
 804633e:	2200      	movs	r2, #0
 8046340:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8046344:	2300      	movs	r3, #0
}
 8046346:	4618      	mov	r0, r3
 8046348:	3710      	adds	r7, #16
 804634a:	46bd      	mov	sp, r7
 804634c:	bd80      	pop	{r7, pc}

0804634e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804634e:	b580      	push	{r7, lr}
 8046350:	b09c      	sub	sp, #112	; 0x70
 8046352:	af00      	add	r7, sp, #0
 8046354:	60f8      	str	r0, [r7, #12]
 8046356:	60b9      	str	r1, [r7, #8]
 8046358:	603b      	str	r3, [r7, #0]
 804635a:	4613      	mov	r3, r2
 804635c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804635e:	e0a7      	b.n	80464b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8046362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046366:	f000 80a3 	beq.w	80464b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804636a:	f7fb fb1d 	bl	80419a8 <HAL_GetTick>
 804636e:	4602      	mov	r2, r0
 8046370:	683b      	ldr	r3, [r7, #0]
 8046372:	1ad3      	subs	r3, r2, r3
 8046374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8046376:	429a      	cmp	r2, r3
 8046378:	d302      	bcc.n	8046380 <UART_WaitOnFlagUntilTimeout+0x32>
 804637a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 804637c:	2b00      	cmp	r3, #0
 804637e:	d13f      	bne.n	8046400 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8046380:	68fb      	ldr	r3, [r7, #12]
 8046382:	681b      	ldr	r3, [r3, #0]
 8046384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8046388:	e853 3f00 	ldrex	r3, [r3]
 804638c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 804638e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8046390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8046394:	667b      	str	r3, [r7, #100]	; 0x64
 8046396:	68fb      	ldr	r3, [r7, #12]
 8046398:	681b      	ldr	r3, [r3, #0]
 804639a:	461a      	mov	r2, r3
 804639c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 804639e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80463a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80463a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80463a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80463a6:	e841 2300 	strex	r3, r2, [r1]
 80463aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80463ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80463ae:	2b00      	cmp	r3, #0
 80463b0:	d1e6      	bne.n	8046380 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80463b2:	68fb      	ldr	r3, [r7, #12]
 80463b4:	681b      	ldr	r3, [r3, #0]
 80463b6:	3308      	adds	r3, #8
 80463b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80463ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80463bc:	e853 3f00 	ldrex	r3, [r3]
 80463c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80463c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80463c4:	f023 0301 	bic.w	r3, r3, #1
 80463c8:	663b      	str	r3, [r7, #96]	; 0x60
 80463ca:	68fb      	ldr	r3, [r7, #12]
 80463cc:	681b      	ldr	r3, [r3, #0]
 80463ce:	3308      	adds	r3, #8
 80463d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80463d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80463d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80463d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80463d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80463da:	e841 2300 	strex	r3, r2, [r1]
 80463de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80463e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80463e2:	2b00      	cmp	r3, #0
 80463e4:	d1e5      	bne.n	80463b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80463e6:	68fb      	ldr	r3, [r7, #12]
 80463e8:	2220      	movs	r2, #32
 80463ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80463ec:	68fb      	ldr	r3, [r7, #12]
 80463ee:	2220      	movs	r2, #32
 80463f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80463f4:	68fb      	ldr	r3, [r7, #12]
 80463f6:	2200      	movs	r2, #0
 80463f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80463fc:	2303      	movs	r3, #3
 80463fe:	e068      	b.n	80464d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8046400:	68fb      	ldr	r3, [r7, #12]
 8046402:	681b      	ldr	r3, [r3, #0]
 8046404:	681b      	ldr	r3, [r3, #0]
 8046406:	f003 0304 	and.w	r3, r3, #4
 804640a:	2b00      	cmp	r3, #0
 804640c:	d050      	beq.n	80464b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804640e:	68fb      	ldr	r3, [r7, #12]
 8046410:	681b      	ldr	r3, [r3, #0]
 8046412:	69db      	ldr	r3, [r3, #28]
 8046414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8046418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804641c:	d148      	bne.n	80464b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804641e:	68fb      	ldr	r3, [r7, #12]
 8046420:	681b      	ldr	r3, [r3, #0]
 8046422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8046426:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8046428:	68fb      	ldr	r3, [r7, #12]
 804642a:	681b      	ldr	r3, [r3, #0]
 804642c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8046430:	e853 3f00 	ldrex	r3, [r3]
 8046434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8046436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804643c:	66fb      	str	r3, [r7, #108]	; 0x6c
 804643e:	68fb      	ldr	r3, [r7, #12]
 8046440:	681b      	ldr	r3, [r3, #0]
 8046442:	461a      	mov	r2, r3
 8046444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8046446:	637b      	str	r3, [r7, #52]	; 0x34
 8046448:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804644a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804644c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804644e:	e841 2300 	strex	r3, r2, [r1]
 8046452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8046454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046456:	2b00      	cmp	r3, #0
 8046458:	d1e6      	bne.n	8046428 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804645a:	68fb      	ldr	r3, [r7, #12]
 804645c:	681b      	ldr	r3, [r3, #0]
 804645e:	3308      	adds	r3, #8
 8046460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046462:	697b      	ldr	r3, [r7, #20]
 8046464:	e853 3f00 	ldrex	r3, [r3]
 8046468:	613b      	str	r3, [r7, #16]
   return(result);
 804646a:	693b      	ldr	r3, [r7, #16]
 804646c:	f023 0301 	bic.w	r3, r3, #1
 8046470:	66bb      	str	r3, [r7, #104]	; 0x68
 8046472:	68fb      	ldr	r3, [r7, #12]
 8046474:	681b      	ldr	r3, [r3, #0]
 8046476:	3308      	adds	r3, #8
 8046478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 804647a:	623a      	str	r2, [r7, #32]
 804647c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804647e:	69f9      	ldr	r1, [r7, #28]
 8046480:	6a3a      	ldr	r2, [r7, #32]
 8046482:	e841 2300 	strex	r3, r2, [r1]
 8046486:	61bb      	str	r3, [r7, #24]
   return(result);
 8046488:	69bb      	ldr	r3, [r7, #24]
 804648a:	2b00      	cmp	r3, #0
 804648c:	d1e5      	bne.n	804645a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 804648e:	68fb      	ldr	r3, [r7, #12]
 8046490:	2220      	movs	r2, #32
 8046492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8046494:	68fb      	ldr	r3, [r7, #12]
 8046496:	2220      	movs	r2, #32
 8046498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804649c:	68fb      	ldr	r3, [r7, #12]
 804649e:	2220      	movs	r2, #32
 80464a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80464a4:	68fb      	ldr	r3, [r7, #12]
 80464a6:	2200      	movs	r2, #0
 80464a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80464ac:	2303      	movs	r3, #3
 80464ae:	e010      	b.n	80464d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80464b0:	68fb      	ldr	r3, [r7, #12]
 80464b2:	681b      	ldr	r3, [r3, #0]
 80464b4:	69da      	ldr	r2, [r3, #28]
 80464b6:	68bb      	ldr	r3, [r7, #8]
 80464b8:	4013      	ands	r3, r2
 80464ba:	68ba      	ldr	r2, [r7, #8]
 80464bc:	429a      	cmp	r2, r3
 80464be:	bf0c      	ite	eq
 80464c0:	2301      	moveq	r3, #1
 80464c2:	2300      	movne	r3, #0
 80464c4:	b2db      	uxtb	r3, r3
 80464c6:	461a      	mov	r2, r3
 80464c8:	79fb      	ldrb	r3, [r7, #7]
 80464ca:	429a      	cmp	r2, r3
 80464cc:	f43f af48 	beq.w	8046360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80464d0:	2300      	movs	r3, #0
}
 80464d2:	4618      	mov	r0, r3
 80464d4:	3770      	adds	r7, #112	; 0x70
 80464d6:	46bd      	mov	sp, r7
 80464d8:	bd80      	pop	{r7, pc}

080464da <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80464da:	b480      	push	{r7}
 80464dc:	b089      	sub	sp, #36	; 0x24
 80464de:	af00      	add	r7, sp, #0
 80464e0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80464e2:	687b      	ldr	r3, [r7, #4]
 80464e4:	681b      	ldr	r3, [r3, #0]
 80464e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80464e8:	68fb      	ldr	r3, [r7, #12]
 80464ea:	e853 3f00 	ldrex	r3, [r3]
 80464ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80464f0:	68bb      	ldr	r3, [r7, #8]
 80464f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80464f6:	61fb      	str	r3, [r7, #28]
 80464f8:	687b      	ldr	r3, [r7, #4]
 80464fa:	681b      	ldr	r3, [r3, #0]
 80464fc:	461a      	mov	r2, r3
 80464fe:	69fb      	ldr	r3, [r7, #28]
 8046500:	61bb      	str	r3, [r7, #24]
 8046502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046504:	6979      	ldr	r1, [r7, #20]
 8046506:	69ba      	ldr	r2, [r7, #24]
 8046508:	e841 2300 	strex	r3, r2, [r1]
 804650c:	613b      	str	r3, [r7, #16]
   return(result);
 804650e:	693b      	ldr	r3, [r7, #16]
 8046510:	2b00      	cmp	r3, #0
 8046512:	d1e6      	bne.n	80464e2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8046514:	687b      	ldr	r3, [r7, #4]
 8046516:	2220      	movs	r2, #32
 8046518:	67da      	str	r2, [r3, #124]	; 0x7c
}
 804651a:	bf00      	nop
 804651c:	3724      	adds	r7, #36	; 0x24
 804651e:	46bd      	mov	sp, r7
 8046520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046524:	4770      	bx	lr

08046526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8046526:	b480      	push	{r7}
 8046528:	b095      	sub	sp, #84	; 0x54
 804652a:	af00      	add	r7, sp, #0
 804652c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 804652e:	687b      	ldr	r3, [r7, #4]
 8046530:	681b      	ldr	r3, [r3, #0]
 8046532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8046536:	e853 3f00 	ldrex	r3, [r3]
 804653a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 804653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804653e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8046542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046544:	687b      	ldr	r3, [r7, #4]
 8046546:	681b      	ldr	r3, [r3, #0]
 8046548:	461a      	mov	r2, r3
 804654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804654c:	643b      	str	r3, [r7, #64]	; 0x40
 804654e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8046552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8046554:	e841 2300 	strex	r3, r2, [r1]
 8046558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804655c:	2b00      	cmp	r3, #0
 804655e:	d1e6      	bne.n	804652e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046560:	687b      	ldr	r3, [r7, #4]
 8046562:	681b      	ldr	r3, [r3, #0]
 8046564:	3308      	adds	r3, #8
 8046566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046568:	6a3b      	ldr	r3, [r7, #32]
 804656a:	e853 3f00 	ldrex	r3, [r3]
 804656e:	61fb      	str	r3, [r7, #28]
   return(result);
 8046570:	69fb      	ldr	r3, [r7, #28]
 8046572:	f023 0301 	bic.w	r3, r3, #1
 8046576:	64bb      	str	r3, [r7, #72]	; 0x48
 8046578:	687b      	ldr	r3, [r7, #4]
 804657a:	681b      	ldr	r3, [r3, #0]
 804657c:	3308      	adds	r3, #8
 804657e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8046580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8046582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8046586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8046588:	e841 2300 	strex	r3, r2, [r1]
 804658c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046590:	2b00      	cmp	r3, #0
 8046592:	d1e5      	bne.n	8046560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046594:	687b      	ldr	r3, [r7, #4]
 8046596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046598:	2b01      	cmp	r3, #1
 804659a:	d118      	bne.n	80465ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804659c:	687b      	ldr	r3, [r7, #4]
 804659e:	681b      	ldr	r3, [r3, #0]
 80465a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80465a2:	68fb      	ldr	r3, [r7, #12]
 80465a4:	e853 3f00 	ldrex	r3, [r3]
 80465a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80465aa:	68bb      	ldr	r3, [r7, #8]
 80465ac:	f023 0310 	bic.w	r3, r3, #16
 80465b0:	647b      	str	r3, [r7, #68]	; 0x44
 80465b2:	687b      	ldr	r3, [r7, #4]
 80465b4:	681b      	ldr	r3, [r3, #0]
 80465b6:	461a      	mov	r2, r3
 80465b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80465ba:	61bb      	str	r3, [r7, #24]
 80465bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80465be:	6979      	ldr	r1, [r7, #20]
 80465c0:	69ba      	ldr	r2, [r7, #24]
 80465c2:	e841 2300 	strex	r3, r2, [r1]
 80465c6:	613b      	str	r3, [r7, #16]
   return(result);
 80465c8:	693b      	ldr	r3, [r7, #16]
 80465ca:	2b00      	cmp	r3, #0
 80465cc:	d1e6      	bne.n	804659c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80465ce:	687b      	ldr	r3, [r7, #4]
 80465d0:	2220      	movs	r2, #32
 80465d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80465d6:	687b      	ldr	r3, [r7, #4]
 80465d8:	2200      	movs	r2, #0
 80465da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80465dc:	687b      	ldr	r3, [r7, #4]
 80465de:	2200      	movs	r2, #0
 80465e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80465e2:	bf00      	nop
 80465e4:	3754      	adds	r7, #84	; 0x54
 80465e6:	46bd      	mov	sp, r7
 80465e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80465ec:	4770      	bx	lr

080465ee <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80465ee:	b580      	push	{r7, lr}
 80465f0:	b090      	sub	sp, #64	; 0x40
 80465f2:	af00      	add	r7, sp, #0
 80465f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80465f6:	687b      	ldr	r3, [r7, #4]
 80465f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80465fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80465fc:	687b      	ldr	r3, [r7, #4]
 80465fe:	69db      	ldr	r3, [r3, #28]
 8046600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8046604:	d037      	beq.n	8046676 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8046606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046608:	2200      	movs	r2, #0
 804660a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 804660e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046610:	681b      	ldr	r3, [r3, #0]
 8046612:	3308      	adds	r3, #8
 8046614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046618:	e853 3f00 	ldrex	r3, [r3]
 804661c:	623b      	str	r3, [r7, #32]
   return(result);
 804661e:	6a3b      	ldr	r3, [r7, #32]
 8046620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8046624:	63bb      	str	r3, [r7, #56]	; 0x38
 8046626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046628:	681b      	ldr	r3, [r3, #0]
 804662a:	3308      	adds	r3, #8
 804662c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804662e:	633a      	str	r2, [r7, #48]	; 0x30
 8046630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8046634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8046636:	e841 2300 	strex	r3, r2, [r1]
 804663a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 804663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804663e:	2b00      	cmp	r3, #0
 8046640:	d1e5      	bne.n	804660e <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8046642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046644:	681b      	ldr	r3, [r3, #0]
 8046646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046648:	693b      	ldr	r3, [r7, #16]
 804664a:	e853 3f00 	ldrex	r3, [r3]
 804664e:	60fb      	str	r3, [r7, #12]
   return(result);
 8046650:	68fb      	ldr	r3, [r7, #12]
 8046652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046656:	637b      	str	r3, [r7, #52]	; 0x34
 8046658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804665a:	681b      	ldr	r3, [r3, #0]
 804665c:	461a      	mov	r2, r3
 804665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8046660:	61fb      	str	r3, [r7, #28]
 8046662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046664:	69b9      	ldr	r1, [r7, #24]
 8046666:	69fa      	ldr	r2, [r7, #28]
 8046668:	e841 2300 	strex	r3, r2, [r1]
 804666c:	617b      	str	r3, [r7, #20]
   return(result);
 804666e:	697b      	ldr	r3, [r7, #20]
 8046670:	2b00      	cmp	r3, #0
 8046672:	d1e6      	bne.n	8046642 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8046674:	e002      	b.n	804667c <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8046676:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8046678:	f7ff fae2 	bl	8045c40 <HAL_UART_TxCpltCallback>
}
 804667c:	bf00      	nop
 804667e:	3740      	adds	r7, #64	; 0x40
 8046680:	46bd      	mov	sp, r7
 8046682:	bd80      	pop	{r7, pc}

08046684 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8046684:	b580      	push	{r7, lr}
 8046686:	b084      	sub	sp, #16
 8046688:	af00      	add	r7, sp, #0
 804668a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804668c:	687b      	ldr	r3, [r7, #4]
 804668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046690:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8046692:	68f8      	ldr	r0, [r7, #12]
 8046694:	f7ff fade 	bl	8045c54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8046698:	bf00      	nop
 804669a:	3710      	adds	r7, #16
 804669c:	46bd      	mov	sp, r7
 804669e:	bd80      	pop	{r7, pc}

080466a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80466a0:	b580      	push	{r7, lr}
 80466a2:	b086      	sub	sp, #24
 80466a4:	af00      	add	r7, sp, #0
 80466a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80466a8:	687b      	ldr	r3, [r7, #4]
 80466aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80466ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80466ae:	697b      	ldr	r3, [r7, #20]
 80466b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80466b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80466b4:	697b      	ldr	r3, [r7, #20]
 80466b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80466ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80466bc:	697b      	ldr	r3, [r7, #20]
 80466be:	681b      	ldr	r3, [r3, #0]
 80466c0:	689b      	ldr	r3, [r3, #8]
 80466c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80466c6:	2b80      	cmp	r3, #128	; 0x80
 80466c8:	d109      	bne.n	80466de <UART_DMAError+0x3e>
 80466ca:	693b      	ldr	r3, [r7, #16]
 80466cc:	2b21      	cmp	r3, #33	; 0x21
 80466ce:	d106      	bne.n	80466de <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80466d0:	697b      	ldr	r3, [r7, #20]
 80466d2:	2200      	movs	r2, #0
 80466d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80466d8:	6978      	ldr	r0, [r7, #20]
 80466da:	f7ff fefe 	bl	80464da <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80466de:	697b      	ldr	r3, [r7, #20]
 80466e0:	681b      	ldr	r3, [r3, #0]
 80466e2:	689b      	ldr	r3, [r3, #8]
 80466e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80466e8:	2b40      	cmp	r3, #64	; 0x40
 80466ea:	d109      	bne.n	8046700 <UART_DMAError+0x60>
 80466ec:	68fb      	ldr	r3, [r7, #12]
 80466ee:	2b22      	cmp	r3, #34	; 0x22
 80466f0:	d106      	bne.n	8046700 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80466f2:	697b      	ldr	r3, [r7, #20]
 80466f4:	2200      	movs	r2, #0
 80466f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80466fa:	6978      	ldr	r0, [r7, #20]
 80466fc:	f7ff ff13 	bl	8046526 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8046700:	697b      	ldr	r3, [r7, #20]
 8046702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046706:	f043 0210 	orr.w	r2, r3, #16
 804670a:	697b      	ldr	r3, [r7, #20]
 804670c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8046710:	6978      	ldr	r0, [r7, #20]
 8046712:	f7ff faa9 	bl	8045c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8046716:	bf00      	nop
 8046718:	3718      	adds	r7, #24
 804671a:	46bd      	mov	sp, r7
 804671c:	bd80      	pop	{r7, pc}

0804671e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804671e:	b580      	push	{r7, lr}
 8046720:	b084      	sub	sp, #16
 8046722:	af00      	add	r7, sp, #0
 8046724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8046726:	687b      	ldr	r3, [r7, #4]
 8046728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804672a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 804672c:	68fb      	ldr	r3, [r7, #12]
 804672e:	2200      	movs	r2, #0
 8046730:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8046734:	68fb      	ldr	r3, [r7, #12]
 8046736:	2200      	movs	r2, #0
 8046738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804673c:	68f8      	ldr	r0, [r7, #12]
 804673e:	f7ff fa93 	bl	8045c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8046742:	bf00      	nop
 8046744:	3710      	adds	r7, #16
 8046746:	46bd      	mov	sp, r7
 8046748:	bd80      	pop	{r7, pc}

0804674a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 804674a:	b580      	push	{r7, lr}
 804674c:	b088      	sub	sp, #32
 804674e:	af00      	add	r7, sp, #0
 8046750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8046752:	687b      	ldr	r3, [r7, #4]
 8046754:	681b      	ldr	r3, [r3, #0]
 8046756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046758:	68fb      	ldr	r3, [r7, #12]
 804675a:	e853 3f00 	ldrex	r3, [r3]
 804675e:	60bb      	str	r3, [r7, #8]
   return(result);
 8046760:	68bb      	ldr	r3, [r7, #8]
 8046762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8046766:	61fb      	str	r3, [r7, #28]
 8046768:	687b      	ldr	r3, [r7, #4]
 804676a:	681b      	ldr	r3, [r3, #0]
 804676c:	461a      	mov	r2, r3
 804676e:	69fb      	ldr	r3, [r7, #28]
 8046770:	61bb      	str	r3, [r7, #24]
 8046772:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046774:	6979      	ldr	r1, [r7, #20]
 8046776:	69ba      	ldr	r2, [r7, #24]
 8046778:	e841 2300 	strex	r3, r2, [r1]
 804677c:	613b      	str	r3, [r7, #16]
   return(result);
 804677e:	693b      	ldr	r3, [r7, #16]
 8046780:	2b00      	cmp	r3, #0
 8046782:	d1e6      	bne.n	8046752 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8046784:	687b      	ldr	r3, [r7, #4]
 8046786:	2220      	movs	r2, #32
 8046788:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 804678a:	687b      	ldr	r3, [r7, #4]
 804678c:	2200      	movs	r2, #0
 804678e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8046790:	6878      	ldr	r0, [r7, #4]
 8046792:	f7ff fa55 	bl	8045c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8046796:	bf00      	nop
 8046798:	3720      	adds	r7, #32
 804679a:	46bd      	mov	sp, r7
 804679c:	bd80      	pop	{r7, pc}
	...

080467a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80467a0:	b5b0      	push	{r4, r5, r7, lr}
 80467a2:	b08c      	sub	sp, #48	; 0x30
 80467a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80467a6:	4b8f      	ldr	r3, [pc, #572]	; (80469e4 <MX_LWIP_Init+0x244>)
 80467a8:	22c0      	movs	r2, #192	; 0xc0
 80467aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80467ac:	4b8d      	ldr	r3, [pc, #564]	; (80469e4 <MX_LWIP_Init+0x244>)
 80467ae:	22a8      	movs	r2, #168	; 0xa8
 80467b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80467b2:	4b8c      	ldr	r3, [pc, #560]	; (80469e4 <MX_LWIP_Init+0x244>)
 80467b4:	2201      	movs	r2, #1
 80467b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80467b8:	4b8a      	ldr	r3, [pc, #552]	; (80469e4 <MX_LWIP_Init+0x244>)
 80467ba:	220a      	movs	r2, #10
 80467bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80467be:	4b8a      	ldr	r3, [pc, #552]	; (80469e8 <MX_LWIP_Init+0x248>)
 80467c0:	22ff      	movs	r2, #255	; 0xff
 80467c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80467c4:	4b88      	ldr	r3, [pc, #544]	; (80469e8 <MX_LWIP_Init+0x248>)
 80467c6:	22ff      	movs	r2, #255	; 0xff
 80467c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80467ca:	4b87      	ldr	r3, [pc, #540]	; (80469e8 <MX_LWIP_Init+0x248>)
 80467cc:	22ff      	movs	r2, #255	; 0xff
 80467ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80467d0:	4b85      	ldr	r3, [pc, #532]	; (80469e8 <MX_LWIP_Init+0x248>)
 80467d2:	2200      	movs	r2, #0
 80467d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80467d6:	4b85      	ldr	r3, [pc, #532]	; (80469ec <MX_LWIP_Init+0x24c>)
 80467d8:	22c0      	movs	r2, #192	; 0xc0
 80467da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80467dc:	4b83      	ldr	r3, [pc, #524]	; (80469ec <MX_LWIP_Init+0x24c>)
 80467de:	22a8      	movs	r2, #168	; 0xa8
 80467e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80467e2:	4b82      	ldr	r3, [pc, #520]	; (80469ec <MX_LWIP_Init+0x24c>)
 80467e4:	2201      	movs	r2, #1
 80467e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80467e8:	4b80      	ldr	r3, [pc, #512]	; (80469ec <MX_LWIP_Init+0x24c>)
 80467ea:	2201      	movs	r2, #1
 80467ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80467ee:	2100      	movs	r1, #0
 80467f0:	2000      	movs	r0, #0
 80467f2:	f003 ffe3 	bl	804a7bc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80467f6:	4b7b      	ldr	r3, [pc, #492]	; (80469e4 <MX_LWIP_Init+0x244>)
 80467f8:	781b      	ldrb	r3, [r3, #0]
 80467fa:	061a      	lsls	r2, r3, #24
 80467fc:	4b79      	ldr	r3, [pc, #484]	; (80469e4 <MX_LWIP_Init+0x244>)
 80467fe:	785b      	ldrb	r3, [r3, #1]
 8046800:	041b      	lsls	r3, r3, #16
 8046802:	431a      	orrs	r2, r3
 8046804:	4b77      	ldr	r3, [pc, #476]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046806:	789b      	ldrb	r3, [r3, #2]
 8046808:	021b      	lsls	r3, r3, #8
 804680a:	4313      	orrs	r3, r2
 804680c:	4a75      	ldr	r2, [pc, #468]	; (80469e4 <MX_LWIP_Init+0x244>)
 804680e:	78d2      	ldrb	r2, [r2, #3]
 8046810:	4313      	orrs	r3, r2
 8046812:	061a      	lsls	r2, r3, #24
 8046814:	4b73      	ldr	r3, [pc, #460]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046816:	781b      	ldrb	r3, [r3, #0]
 8046818:	0619      	lsls	r1, r3, #24
 804681a:	4b72      	ldr	r3, [pc, #456]	; (80469e4 <MX_LWIP_Init+0x244>)
 804681c:	785b      	ldrb	r3, [r3, #1]
 804681e:	041b      	lsls	r3, r3, #16
 8046820:	4319      	orrs	r1, r3
 8046822:	4b70      	ldr	r3, [pc, #448]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046824:	789b      	ldrb	r3, [r3, #2]
 8046826:	021b      	lsls	r3, r3, #8
 8046828:	430b      	orrs	r3, r1
 804682a:	496e      	ldr	r1, [pc, #440]	; (80469e4 <MX_LWIP_Init+0x244>)
 804682c:	78c9      	ldrb	r1, [r1, #3]
 804682e:	430b      	orrs	r3, r1
 8046830:	021b      	lsls	r3, r3, #8
 8046832:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8046836:	431a      	orrs	r2, r3
 8046838:	4b6a      	ldr	r3, [pc, #424]	; (80469e4 <MX_LWIP_Init+0x244>)
 804683a:	781b      	ldrb	r3, [r3, #0]
 804683c:	0619      	lsls	r1, r3, #24
 804683e:	4b69      	ldr	r3, [pc, #420]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046840:	785b      	ldrb	r3, [r3, #1]
 8046842:	041b      	lsls	r3, r3, #16
 8046844:	4319      	orrs	r1, r3
 8046846:	4b67      	ldr	r3, [pc, #412]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046848:	789b      	ldrb	r3, [r3, #2]
 804684a:	021b      	lsls	r3, r3, #8
 804684c:	430b      	orrs	r3, r1
 804684e:	4965      	ldr	r1, [pc, #404]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046850:	78c9      	ldrb	r1, [r1, #3]
 8046852:	430b      	orrs	r3, r1
 8046854:	0a1b      	lsrs	r3, r3, #8
 8046856:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804685a:	431a      	orrs	r2, r3
 804685c:	4b61      	ldr	r3, [pc, #388]	; (80469e4 <MX_LWIP_Init+0x244>)
 804685e:	781b      	ldrb	r3, [r3, #0]
 8046860:	0619      	lsls	r1, r3, #24
 8046862:	4b60      	ldr	r3, [pc, #384]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046864:	785b      	ldrb	r3, [r3, #1]
 8046866:	041b      	lsls	r3, r3, #16
 8046868:	4319      	orrs	r1, r3
 804686a:	4b5e      	ldr	r3, [pc, #376]	; (80469e4 <MX_LWIP_Init+0x244>)
 804686c:	789b      	ldrb	r3, [r3, #2]
 804686e:	021b      	lsls	r3, r3, #8
 8046870:	430b      	orrs	r3, r1
 8046872:	495c      	ldr	r1, [pc, #368]	; (80469e4 <MX_LWIP_Init+0x244>)
 8046874:	78c9      	ldrb	r1, [r1, #3]
 8046876:	430b      	orrs	r3, r1
 8046878:	0e1b      	lsrs	r3, r3, #24
 804687a:	4313      	orrs	r3, r2
 804687c:	4a5c      	ldr	r2, [pc, #368]	; (80469f0 <MX_LWIP_Init+0x250>)
 804687e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8046880:	4b59      	ldr	r3, [pc, #356]	; (80469e8 <MX_LWIP_Init+0x248>)
 8046882:	781b      	ldrb	r3, [r3, #0]
 8046884:	061a      	lsls	r2, r3, #24
 8046886:	4b58      	ldr	r3, [pc, #352]	; (80469e8 <MX_LWIP_Init+0x248>)
 8046888:	785b      	ldrb	r3, [r3, #1]
 804688a:	041b      	lsls	r3, r3, #16
 804688c:	431a      	orrs	r2, r3
 804688e:	4b56      	ldr	r3, [pc, #344]	; (80469e8 <MX_LWIP_Init+0x248>)
 8046890:	789b      	ldrb	r3, [r3, #2]
 8046892:	021b      	lsls	r3, r3, #8
 8046894:	4313      	orrs	r3, r2
 8046896:	4a54      	ldr	r2, [pc, #336]	; (80469e8 <MX_LWIP_Init+0x248>)
 8046898:	78d2      	ldrb	r2, [r2, #3]
 804689a:	4313      	orrs	r3, r2
 804689c:	061a      	lsls	r2, r3, #24
 804689e:	4b52      	ldr	r3, [pc, #328]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468a0:	781b      	ldrb	r3, [r3, #0]
 80468a2:	0619      	lsls	r1, r3, #24
 80468a4:	4b50      	ldr	r3, [pc, #320]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468a6:	785b      	ldrb	r3, [r3, #1]
 80468a8:	041b      	lsls	r3, r3, #16
 80468aa:	4319      	orrs	r1, r3
 80468ac:	4b4e      	ldr	r3, [pc, #312]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468ae:	789b      	ldrb	r3, [r3, #2]
 80468b0:	021b      	lsls	r3, r3, #8
 80468b2:	430b      	orrs	r3, r1
 80468b4:	494c      	ldr	r1, [pc, #304]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468b6:	78c9      	ldrb	r1, [r1, #3]
 80468b8:	430b      	orrs	r3, r1
 80468ba:	021b      	lsls	r3, r3, #8
 80468bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80468c0:	431a      	orrs	r2, r3
 80468c2:	4b49      	ldr	r3, [pc, #292]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468c4:	781b      	ldrb	r3, [r3, #0]
 80468c6:	0619      	lsls	r1, r3, #24
 80468c8:	4b47      	ldr	r3, [pc, #284]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468ca:	785b      	ldrb	r3, [r3, #1]
 80468cc:	041b      	lsls	r3, r3, #16
 80468ce:	4319      	orrs	r1, r3
 80468d0:	4b45      	ldr	r3, [pc, #276]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468d2:	789b      	ldrb	r3, [r3, #2]
 80468d4:	021b      	lsls	r3, r3, #8
 80468d6:	430b      	orrs	r3, r1
 80468d8:	4943      	ldr	r1, [pc, #268]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468da:	78c9      	ldrb	r1, [r1, #3]
 80468dc:	430b      	orrs	r3, r1
 80468de:	0a1b      	lsrs	r3, r3, #8
 80468e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80468e4:	431a      	orrs	r2, r3
 80468e6:	4b40      	ldr	r3, [pc, #256]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468e8:	781b      	ldrb	r3, [r3, #0]
 80468ea:	0619      	lsls	r1, r3, #24
 80468ec:	4b3e      	ldr	r3, [pc, #248]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468ee:	785b      	ldrb	r3, [r3, #1]
 80468f0:	041b      	lsls	r3, r3, #16
 80468f2:	4319      	orrs	r1, r3
 80468f4:	4b3c      	ldr	r3, [pc, #240]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468f6:	789b      	ldrb	r3, [r3, #2]
 80468f8:	021b      	lsls	r3, r3, #8
 80468fa:	430b      	orrs	r3, r1
 80468fc:	493a      	ldr	r1, [pc, #232]	; (80469e8 <MX_LWIP_Init+0x248>)
 80468fe:	78c9      	ldrb	r1, [r1, #3]
 8046900:	430b      	orrs	r3, r1
 8046902:	0e1b      	lsrs	r3, r3, #24
 8046904:	4313      	orrs	r3, r2
 8046906:	4a3b      	ldr	r2, [pc, #236]	; (80469f4 <MX_LWIP_Init+0x254>)
 8046908:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 804690a:	4b38      	ldr	r3, [pc, #224]	; (80469ec <MX_LWIP_Init+0x24c>)
 804690c:	781b      	ldrb	r3, [r3, #0]
 804690e:	061a      	lsls	r2, r3, #24
 8046910:	4b36      	ldr	r3, [pc, #216]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046912:	785b      	ldrb	r3, [r3, #1]
 8046914:	041b      	lsls	r3, r3, #16
 8046916:	431a      	orrs	r2, r3
 8046918:	4b34      	ldr	r3, [pc, #208]	; (80469ec <MX_LWIP_Init+0x24c>)
 804691a:	789b      	ldrb	r3, [r3, #2]
 804691c:	021b      	lsls	r3, r3, #8
 804691e:	4313      	orrs	r3, r2
 8046920:	4a32      	ldr	r2, [pc, #200]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046922:	78d2      	ldrb	r2, [r2, #3]
 8046924:	4313      	orrs	r3, r2
 8046926:	061a      	lsls	r2, r3, #24
 8046928:	4b30      	ldr	r3, [pc, #192]	; (80469ec <MX_LWIP_Init+0x24c>)
 804692a:	781b      	ldrb	r3, [r3, #0]
 804692c:	0619      	lsls	r1, r3, #24
 804692e:	4b2f      	ldr	r3, [pc, #188]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046930:	785b      	ldrb	r3, [r3, #1]
 8046932:	041b      	lsls	r3, r3, #16
 8046934:	4319      	orrs	r1, r3
 8046936:	4b2d      	ldr	r3, [pc, #180]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046938:	789b      	ldrb	r3, [r3, #2]
 804693a:	021b      	lsls	r3, r3, #8
 804693c:	430b      	orrs	r3, r1
 804693e:	492b      	ldr	r1, [pc, #172]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046940:	78c9      	ldrb	r1, [r1, #3]
 8046942:	430b      	orrs	r3, r1
 8046944:	021b      	lsls	r3, r3, #8
 8046946:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804694a:	431a      	orrs	r2, r3
 804694c:	4b27      	ldr	r3, [pc, #156]	; (80469ec <MX_LWIP_Init+0x24c>)
 804694e:	781b      	ldrb	r3, [r3, #0]
 8046950:	0619      	lsls	r1, r3, #24
 8046952:	4b26      	ldr	r3, [pc, #152]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046954:	785b      	ldrb	r3, [r3, #1]
 8046956:	041b      	lsls	r3, r3, #16
 8046958:	4319      	orrs	r1, r3
 804695a:	4b24      	ldr	r3, [pc, #144]	; (80469ec <MX_LWIP_Init+0x24c>)
 804695c:	789b      	ldrb	r3, [r3, #2]
 804695e:	021b      	lsls	r3, r3, #8
 8046960:	430b      	orrs	r3, r1
 8046962:	4922      	ldr	r1, [pc, #136]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046964:	78c9      	ldrb	r1, [r1, #3]
 8046966:	430b      	orrs	r3, r1
 8046968:	0a1b      	lsrs	r3, r3, #8
 804696a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804696e:	431a      	orrs	r2, r3
 8046970:	4b1e      	ldr	r3, [pc, #120]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046972:	781b      	ldrb	r3, [r3, #0]
 8046974:	0619      	lsls	r1, r3, #24
 8046976:	4b1d      	ldr	r3, [pc, #116]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046978:	785b      	ldrb	r3, [r3, #1]
 804697a:	041b      	lsls	r3, r3, #16
 804697c:	4319      	orrs	r1, r3
 804697e:	4b1b      	ldr	r3, [pc, #108]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046980:	789b      	ldrb	r3, [r3, #2]
 8046982:	021b      	lsls	r3, r3, #8
 8046984:	430b      	orrs	r3, r1
 8046986:	4919      	ldr	r1, [pc, #100]	; (80469ec <MX_LWIP_Init+0x24c>)
 8046988:	78c9      	ldrb	r1, [r1, #3]
 804698a:	430b      	orrs	r3, r1
 804698c:	0e1b      	lsrs	r3, r3, #24
 804698e:	4313      	orrs	r3, r2
 8046990:	4a19      	ldr	r2, [pc, #100]	; (80469f8 <MX_LWIP_Init+0x258>)
 8046992:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8046994:	4b19      	ldr	r3, [pc, #100]	; (80469fc <MX_LWIP_Init+0x25c>)
 8046996:	9302      	str	r3, [sp, #8]
 8046998:	4b19      	ldr	r3, [pc, #100]	; (8046a00 <MX_LWIP_Init+0x260>)
 804699a:	9301      	str	r3, [sp, #4]
 804699c:	2300      	movs	r3, #0
 804699e:	9300      	str	r3, [sp, #0]
 80469a0:	4b15      	ldr	r3, [pc, #84]	; (80469f8 <MX_LWIP_Init+0x258>)
 80469a2:	4a14      	ldr	r2, [pc, #80]	; (80469f4 <MX_LWIP_Init+0x254>)
 80469a4:	4912      	ldr	r1, [pc, #72]	; (80469f0 <MX_LWIP_Init+0x250>)
 80469a6:	4817      	ldr	r0, [pc, #92]	; (8046a04 <MX_LWIP_Init+0x264>)
 80469a8:	f004 fcd2 	bl	804b350 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80469ac:	4815      	ldr	r0, [pc, #84]	; (8046a04 <MX_LWIP_Init+0x264>)
 80469ae:	f004 fe81 	bl	804b6b4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80469b2:	4814      	ldr	r0, [pc, #80]	; (8046a04 <MX_LWIP_Init+0x264>)
 80469b4:	f004 fe8e 	bl	804b6d4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80469b8:	4913      	ldr	r1, [pc, #76]	; (8046a08 <MX_LWIP_Init+0x268>)
 80469ba:	4812      	ldr	r0, [pc, #72]	; (8046a04 <MX_LWIP_Init+0x264>)
 80469bc:	f004 ff8c 	bl	804b8d8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80469c0:	4b12      	ldr	r3, [pc, #72]	; (8046a0c <MX_LWIP_Init+0x26c>)
 80469c2:	1d3c      	adds	r4, r7, #4
 80469c4:	461d      	mov	r5, r3
 80469c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80469c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80469ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80469ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80469d2:	1d3b      	adds	r3, r7, #4
 80469d4:	490b      	ldr	r1, [pc, #44]	; (8046a04 <MX_LWIP_Init+0x264>)
 80469d6:	4618      	mov	r0, r3
 80469d8:	f000 fdaf 	bl	804753a <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80469dc:	bf00      	nop
 80469de:	3720      	adds	r7, #32
 80469e0:	46bd      	mov	sp, r7
 80469e2:	bdb0      	pop	{r4, r5, r7, pc}
 80469e4:	20002474 	.word	0x20002474
 80469e8:	20002478 	.word	0x20002478
 80469ec:	2000247c 	.word	0x2000247c
 80469f0:	20002468 	.word	0x20002468
 80469f4:	2000246c 	.word	0x2000246c
 80469f8:	20002470 	.word	0x20002470
 80469fc:	0804a6f9 	.word	0x0804a6f9
 8046a00:	08046f71 	.word	0x08046f71
 8046a04:	20002434 	.word	0x20002434
 8046a08:	08046a11 	.word	0x08046a11
 8046a0c:	080558ec 	.word	0x080558ec

08046a10 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8046a10:	b480      	push	{r7}
 8046a12:	b083      	sub	sp, #12
 8046a14:	af00      	add	r7, sp, #0
 8046a16:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8046a18:	bf00      	nop
 8046a1a:	370c      	adds	r7, #12
 8046a1c:	46bd      	mov	sp, r7
 8046a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a22:	4770      	bx	lr

08046a24 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8046a24:	b480      	push	{r7}
 8046a26:	b087      	sub	sp, #28
 8046a28:	af00      	add	r7, sp, #0
 8046a2a:	6078      	str	r0, [r7, #4]
 8046a2c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8046a2e:	683b      	ldr	r3, [r7, #0]
 8046a30:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8046a32:	687b      	ldr	r3, [r7, #4]
 8046a34:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8046a36:	2320      	movs	r3, #32
 8046a38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8046a3a:	f3bf 8f4f 	dsb	sy
}
 8046a3e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8046a40:	e00b      	b.n	8046a5a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8046a42:	4a0d      	ldr	r2, [pc, #52]	; (8046a78 <SCB_InvalidateDCache_by_Addr+0x54>)
 8046a44:	693b      	ldr	r3, [r7, #16]
 8046a46:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8046a4a:	68fb      	ldr	r3, [r7, #12]
 8046a4c:	693a      	ldr	r2, [r7, #16]
 8046a4e:	4413      	add	r3, r2
 8046a50:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8046a52:	697a      	ldr	r2, [r7, #20]
 8046a54:	68fb      	ldr	r3, [r7, #12]
 8046a56:	1ad3      	subs	r3, r2, r3
 8046a58:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8046a5a:	697b      	ldr	r3, [r7, #20]
 8046a5c:	2b00      	cmp	r3, #0
 8046a5e:	dcf0      	bgt.n	8046a42 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8046a60:	f3bf 8f4f 	dsb	sy
}
 8046a64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8046a66:	f3bf 8f6f 	isb	sy
}
 8046a6a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8046a6c:	bf00      	nop
 8046a6e:	371c      	adds	r7, #28
 8046a70:	46bd      	mov	sp, r7
 8046a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a76:	4770      	bx	lr
 8046a78:	e000ed00 	.word	0xe000ed00

08046a7c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8046a7c:	b580      	push	{r7, lr}
 8046a7e:	b082      	sub	sp, #8
 8046a80:	af00      	add	r7, sp, #0
 8046a82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8046a84:	4b04      	ldr	r3, [pc, #16]	; (8046a98 <HAL_ETH_RxCpltCallback+0x1c>)
 8046a86:	681b      	ldr	r3, [r3, #0]
 8046a88:	4618      	mov	r0, r3
 8046a8a:	f000 fedf 	bl	804784c <osSemaphoreRelease>
}
 8046a8e:	bf00      	nop
 8046a90:	3708      	adds	r7, #8
 8046a92:	46bd      	mov	sp, r7
 8046a94:	bd80      	pop	{r7, pc}
 8046a96:	bf00      	nop
 8046a98:	20006e0c 	.word	0x20006e0c

08046a9c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8046a9c:	b580      	push	{r7, lr}
 8046a9e:	b082      	sub	sp, #8
 8046aa0:	af00      	add	r7, sp, #0
 8046aa2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8046aa4:	4b04      	ldr	r3, [pc, #16]	; (8046ab8 <HAL_ETH_TxCpltCallback+0x1c>)
 8046aa6:	681b      	ldr	r3, [r3, #0]
 8046aa8:	4618      	mov	r0, r3
 8046aaa:	f000 fecf 	bl	804784c <osSemaphoreRelease>
}
 8046aae:	bf00      	nop
 8046ab0:	3708      	adds	r7, #8
 8046ab2:	46bd      	mov	sp, r7
 8046ab4:	bd80      	pop	{r7, pc}
 8046ab6:	bf00      	nop
 8046ab8:	20006e10 	.word	0x20006e10

08046abc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8046abc:	b580      	push	{r7, lr}
 8046abe:	b082      	sub	sp, #8
 8046ac0:	af00      	add	r7, sp, #0
 8046ac2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8046ac4:	6878      	ldr	r0, [r7, #4]
 8046ac6:	f7fc fad5 	bl	8043074 <HAL_ETH_GetDMAError>
 8046aca:	4603      	mov	r3, r0
 8046acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046ad0:	2b80      	cmp	r3, #128	; 0x80
 8046ad2:	d104      	bne.n	8046ade <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8046ad4:	4b04      	ldr	r3, [pc, #16]	; (8046ae8 <HAL_ETH_ErrorCallback+0x2c>)
 8046ad6:	681b      	ldr	r3, [r3, #0]
 8046ad8:	4618      	mov	r0, r3
 8046ada:	f000 feb7 	bl	804784c <osSemaphoreRelease>
  }
}
 8046ade:	bf00      	nop
 8046ae0:	3708      	adds	r7, #8
 8046ae2:	46bd      	mov	sp, r7
 8046ae4:	bd80      	pop	{r7, pc}
 8046ae6:	bf00      	nop
 8046ae8:	20006e0c 	.word	0x20006e0c

08046aec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8046aec:	b5b0      	push	{r4, r5, r7, lr}
 8046aee:	b0b4      	sub	sp, #208	; 0xd0
 8046af0:	af00      	add	r7, sp, #0
 8046af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8046af4:	2300      	movs	r3, #0
 8046af6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t duplex, speed = 0;
 8046afa:	2300      	movs	r3, #0
 8046afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int32_t PHYLinkState = 0;
 8046b00:	2300      	movs	r3, #0
 8046b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8046b06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8046b0a:	2264      	movs	r2, #100	; 0x64
 8046b0c:	2100      	movs	r1, #0
 8046b0e:	4618      	mov	r0, r3
 8046b10:	f00d ffec 	bl	8054aec <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8046b14:	4b9b      	ldr	r3, [pc, #620]	; (8046d84 <low_level_init+0x298>)
 8046b16:	4a9c      	ldr	r2, [pc, #624]	; (8046d88 <low_level_init+0x29c>)
 8046b18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8046b1a:	2300      	movs	r3, #0
 8046b1c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  MACAddr[1] = 0x80;
 8046b20:	2380      	movs	r3, #128	; 0x80
 8046b22:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  MACAddr[2] = 0xE1;
 8046b26:	23e1      	movs	r3, #225	; 0xe1
 8046b28:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  MACAddr[3] = 0x00;
 8046b2c:	2300      	movs	r3, #0
 8046b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  MACAddr[4] = 0x00;
 8046b32:	2300      	movs	r3, #0
 8046b34:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  MACAddr[5] = 0x00;
 8046b38:	2300      	movs	r3, #0
 8046b3a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8046b3e:	4a91      	ldr	r2, [pc, #580]	; (8046d84 <low_level_init+0x298>)
 8046b40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8046b44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8046b46:	4b8f      	ldr	r3, [pc, #572]	; (8046d84 <low_level_init+0x298>)
 8046b48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8046b4c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8046b4e:	4b8d      	ldr	r3, [pc, #564]	; (8046d84 <low_level_init+0x298>)
 8046b50:	4a8e      	ldr	r2, [pc, #568]	; (8046d8c <low_level_init+0x2a0>)
 8046b52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8046b54:	4b8b      	ldr	r3, [pc, #556]	; (8046d84 <low_level_init+0x298>)
 8046b56:	4a8e      	ldr	r2, [pc, #568]	; (8046d90 <low_level_init+0x2a4>)
 8046b58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8046b5a:	4b8a      	ldr	r3, [pc, #552]	; (8046d84 <low_level_init+0x298>)
 8046b5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8046b60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8046b62:	4888      	ldr	r0, [pc, #544]	; (8046d84 <low_level_init+0x298>)
 8046b64:	f7fb fc48 	bl	80423f8 <HAL_ETH_Init>
 8046b68:	4603      	mov	r3, r0
 8046b6a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8046b6e:	2238      	movs	r2, #56	; 0x38
 8046b70:	2100      	movs	r1, #0
 8046b72:	4888      	ldr	r0, [pc, #544]	; (8046d94 <low_level_init+0x2a8>)
 8046b74:	f00d ffba 	bl	8054aec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8046b78:	4b86      	ldr	r3, [pc, #536]	; (8046d94 <low_level_init+0x2a8>)
 8046b7a:	2221      	movs	r2, #33	; 0x21
 8046b7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8046b7e:	4b85      	ldr	r3, [pc, #532]	; (8046d94 <low_level_init+0x2a8>)
 8046b80:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8046b84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8046b86:	4b83      	ldr	r3, [pc, #524]	; (8046d94 <low_level_init+0x2a8>)
 8046b88:	2200      	movs	r2, #0
 8046b8a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8046b8c:	4882      	ldr	r0, [pc, #520]	; (8046d98 <low_level_init+0x2ac>)
 8046b8e:	f004 fa99 	bl	804b0c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8046b92:	687b      	ldr	r3, [r7, #4]
 8046b94:	2206      	movs	r2, #6
 8046b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8046b9a:	4b7a      	ldr	r3, [pc, #488]	; (8046d84 <low_level_init+0x298>)
 8046b9c:	685b      	ldr	r3, [r3, #4]
 8046b9e:	781a      	ldrb	r2, [r3, #0]
 8046ba0:	687b      	ldr	r3, [r7, #4]
 8046ba2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8046ba6:	4b77      	ldr	r3, [pc, #476]	; (8046d84 <low_level_init+0x298>)
 8046ba8:	685b      	ldr	r3, [r3, #4]
 8046baa:	785a      	ldrb	r2, [r3, #1]
 8046bac:	687b      	ldr	r3, [r7, #4]
 8046bae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8046bb2:	4b74      	ldr	r3, [pc, #464]	; (8046d84 <low_level_init+0x298>)
 8046bb4:	685b      	ldr	r3, [r3, #4]
 8046bb6:	789a      	ldrb	r2, [r3, #2]
 8046bb8:	687b      	ldr	r3, [r7, #4]
 8046bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8046bbe:	4b71      	ldr	r3, [pc, #452]	; (8046d84 <low_level_init+0x298>)
 8046bc0:	685b      	ldr	r3, [r3, #4]
 8046bc2:	78da      	ldrb	r2, [r3, #3]
 8046bc4:	687b      	ldr	r3, [r7, #4]
 8046bc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8046bca:	4b6e      	ldr	r3, [pc, #440]	; (8046d84 <low_level_init+0x298>)
 8046bcc:	685b      	ldr	r3, [r3, #4]
 8046bce:	791a      	ldrb	r2, [r3, #4]
 8046bd0:	687b      	ldr	r3, [r7, #4]
 8046bd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8046bd6:	4b6b      	ldr	r3, [pc, #428]	; (8046d84 <low_level_init+0x298>)
 8046bd8:	685b      	ldr	r3, [r3, #4]
 8046bda:	795a      	ldrb	r2, [r3, #5]
 8046bdc:	687b      	ldr	r3, [r7, #4]
 8046bde:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8046be2:	687b      	ldr	r3, [r7, #4]
 8046be4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8046be8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8046bea:	687b      	ldr	r3, [r7, #4]
 8046bec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8046bf0:	f043 030a 	orr.w	r3, r3, #10
 8046bf4:	b2da      	uxtb	r2, r3
 8046bf6:	687b      	ldr	r3, [r7, #4]
 8046bf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8046bfc:	2300      	movs	r3, #0
 8046bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046c00:	2300      	movs	r3, #0
 8046c02:	653b      	str	r3, [r7, #80]	; 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8046c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8046c08:	2101      	movs	r1, #1
 8046c0a:	4618      	mov	r0, r3
 8046c0c:	f000 fd9e 	bl	804774c <osSemaphoreCreate>
 8046c10:	4603      	mov	r3, r0
 8046c12:	4a62      	ldr	r2, [pc, #392]	; (8046d9c <low_level_init+0x2b0>)
 8046c14:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8046c16:	2300      	movs	r3, #0
 8046c18:	647b      	str	r3, [r7, #68]	; 0x44
 8046c1a:	2300      	movs	r3, #0
 8046c1c:	64bb      	str	r3, [r7, #72]	; 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8046c1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8046c22:	2101      	movs	r1, #1
 8046c24:	4618      	mov	r0, r3
 8046c26:	f000 fd91 	bl	804774c <osSemaphoreCreate>
 8046c2a:	4603      	mov	r3, r0
 8046c2c:	4a5c      	ldr	r2, [pc, #368]	; (8046da0 <low_level_init+0x2b4>)
 8046c2e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8046c30:	4b5a      	ldr	r3, [pc, #360]	; (8046d9c <low_level_init+0x2b0>)
 8046c32:	681b      	ldr	r3, [r3, #0]
 8046c34:	2100      	movs	r1, #0
 8046c36:	4618      	mov	r0, r3
 8046c38:	f000 fdba 	bl	80477b0 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8046c3c:	4b58      	ldr	r3, [pc, #352]	; (8046da0 <low_level_init+0x2b4>)
 8046c3e:	681b      	ldr	r3, [r3, #0]
 8046c40:	2100      	movs	r1, #0
 8046c42:	4618      	mov	r0, r3
 8046c44:	f000 fdb4 	bl	80477b0 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8046c48:	4b56      	ldr	r3, [pc, #344]	; (8046da4 <low_level_init+0x2b8>)
 8046c4a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8046c4e:	461d      	mov	r5, r3
 8046c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8046c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046c54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8046c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8046c5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8046c60:	6879      	ldr	r1, [r7, #4]
 8046c62:	4618      	mov	r0, r3
 8046c64:	f000 fc69 	bl	804753a <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8046c68:	494f      	ldr	r1, [pc, #316]	; (8046da8 <low_level_init+0x2bc>)
 8046c6a:	4850      	ldr	r0, [pc, #320]	; (8046dac <low_level_init+0x2c0>)
 8046c6c:	f7fa fd19 	bl	80416a2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8046c70:	484e      	ldr	r0, [pc, #312]	; (8046dac <low_level_init+0x2c0>)
 8046c72:	f7fa fd48 	bl	8041706 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8046c76:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8046c7a:	2b00      	cmp	r3, #0
 8046c7c:	d165      	bne.n	8046d4a <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8046c7e:	484b      	ldr	r0, [pc, #300]	; (8046dac <low_level_init+0x2c0>)
 8046c80:	f7fa fde9 	bl	8041856 <LAN8742_GetLinkState>
 8046c84:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8046c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8046c8c:	2b01      	cmp	r3, #1
 8046c8e:	dc06      	bgt.n	8046c9e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8046c90:	6878      	ldr	r0, [r7, #4]
 8046c92:	f004 fdf1 	bl	804b878 <netif_set_link_down>
      netif_set_down(netif);
 8046c96:	6878      	ldr	r0, [r7, #4]
 8046c98:	f004 fd88 	bl	804b7ac <netif_set_down>
 8046c9c:	e057      	b.n	8046d4e <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 8046c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8046ca2:	3b02      	subs	r3, #2
 8046ca4:	2b03      	cmp	r3, #3
 8046ca6:	d82b      	bhi.n	8046d00 <low_level_init+0x214>
 8046ca8:	a201      	add	r2, pc, #4	; (adr r2, 8046cb0 <low_level_init+0x1c4>)
 8046caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046cae:	bf00      	nop
 8046cb0:	08046cc1 	.word	0x08046cc1
 8046cb4:	08046cd3 	.word	0x08046cd3
 8046cb8:	08046ce3 	.word	0x08046ce3
 8046cbc:	08046cf3 	.word	0x08046cf3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8046cc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8046cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8046cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8046ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8046cd0:	e01f      	b.n	8046d12 <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8046cd2:	2300      	movs	r3, #0
 8046cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8046cd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8046cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8046ce0:	e017      	b.n	8046d12 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8046ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8046ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 8046cea:	2300      	movs	r3, #0
 8046cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8046cf0:	e00f      	b.n	8046d12 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8046cf2:	2300      	movs	r3, #0
 8046cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 8046cf8:	2300      	movs	r3, #0
 8046cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8046cfe:	e008      	b.n	8046d12 <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8046d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8046d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8046d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8046d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8046d10:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8046d12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8046d16:	4619      	mov	r1, r3
 8046d18:	481a      	ldr	r0, [pc, #104]	; (8046d84 <low_level_init+0x298>)
 8046d1a:	f7fc f851 	bl	8042dc0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8046d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8046d22:	677b      	str	r3, [r7, #116]	; 0x74
    MACConf.Speed = speed;
 8046d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8046d28:	673b      	str	r3, [r7, #112]	; 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8046d2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8046d2e:	4619      	mov	r1, r3
 8046d30:	4814      	ldr	r0, [pc, #80]	; (8046d84 <low_level_init+0x298>)
 8046d32:	f7fc f92f 	bl	8042f94 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8046d36:	4813      	ldr	r0, [pc, #76]	; (8046d84 <low_level_init+0x298>)
 8046d38:	f7fb fbda 	bl	80424f0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8046d3c:	6878      	ldr	r0, [r7, #4]
 8046d3e:	f004 fcc9 	bl	804b6d4 <netif_set_up>
    netif_set_link_up(netif);
 8046d42:	6878      	ldr	r0, [r7, #4]
 8046d44:	f004 fd64 	bl	804b810 <netif_set_link_up>
 8046d48:	e001      	b.n	8046d4e <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 8046d4a:	f7f9 ff61 	bl	8040c10 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8046d4e:	f7fa fe5b 	bl	8041a08 <HAL_GetREVID>
 8046d52:	4603      	mov	r3, r0
 8046d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8046d58:	d10f      	bne.n	8046d7a <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8046d5a:	4b15      	ldr	r3, [pc, #84]	; (8046db0 <low_level_init+0x2c4>)
 8046d5c:	f107 040c 	add.w	r4, r7, #12
 8046d60:	461d      	mov	r5, r3
 8046d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8046d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046d66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8046d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8046d6e:	f107 030c 	add.w	r3, r7, #12
 8046d72:	2100      	movs	r1, #0
 8046d74:	4618      	mov	r0, r3
 8046d76:	f000 fbe0 	bl	804753a <osThreadCreate>
  }
}
 8046d7a:	bf00      	nop
 8046d7c:	37d0      	adds	r7, #208	; 0xd0
 8046d7e:	46bd      	mov	sp, r7
 8046d80:	bdb0      	pop	{r4, r5, r7, pc}
 8046d82:	bf00      	nop
 8046d84:	20006e14 	.word	0x20006e14
 8046d88:	40028000 	.word	0x40028000
 8046d8c:	2000012c 	.word	0x2000012c
 8046d90:	2000008c 	.word	0x2000008c
 8046d94:	20006ec4 	.word	0x20006ec4
 8046d98:	0805845c 	.word	0x0805845c
 8046d9c:	20006e0c 	.word	0x20006e0c
 8046da0:	20006e10 	.word	0x20006e10
 8046da4:	08055910 	.word	0x08055910
 8046da8:	2000000c 	.word	0x2000000c
 8046dac:	20006efc 	.word	0x20006efc
 8046db0:	0805593c 	.word	0x0805593c

08046db4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8046db4:	b580      	push	{r7, lr}
 8046db6:	b092      	sub	sp, #72	; 0x48
 8046db8:	af00      	add	r7, sp, #0
 8046dba:	6078      	str	r0, [r7, #4]
 8046dbc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8046dbe:	2300      	movs	r3, #0
 8046dc0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8046dc2:	2300      	movs	r3, #0
 8046dc4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8046dc6:	2300      	movs	r3, #0
 8046dc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8046dcc:	f107 030c 	add.w	r3, r7, #12
 8046dd0:	2230      	movs	r2, #48	; 0x30
 8046dd2:	2100      	movs	r1, #0
 8046dd4:	4618      	mov	r0, r3
 8046dd6:	f00d fe89 	bl	8054aec <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8046dda:	f107 030c 	add.w	r3, r7, #12
 8046dde:	2230      	movs	r2, #48	; 0x30
 8046de0:	2100      	movs	r1, #0
 8046de2:	4618      	mov	r0, r3
 8046de4:	f00d fe82 	bl	8054aec <memset>

  for(q = p; q != NULL; q = q->next)
 8046de8:	683b      	ldr	r3, [r7, #0]
 8046dea:	643b      	str	r3, [r7, #64]	; 0x40
 8046dec:	e045      	b.n	8046e7a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8046dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046df0:	2b03      	cmp	r3, #3
 8046df2:	d902      	bls.n	8046dfa <low_level_output+0x46>
      return ERR_IF;
 8046df4:	f06f 030b 	mvn.w	r3, #11
 8046df8:	e06c      	b.n	8046ed4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8046dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046dfc:	6859      	ldr	r1, [r3, #4]
 8046dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8046e00:	4613      	mov	r3, r2
 8046e02:	005b      	lsls	r3, r3, #1
 8046e04:	4413      	add	r3, r2
 8046e06:	009b      	lsls	r3, r3, #2
 8046e08:	3348      	adds	r3, #72	; 0x48
 8046e0a:	443b      	add	r3, r7
 8046e0c:	3b3c      	subs	r3, #60	; 0x3c
 8046e0e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8046e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046e12:	895b      	ldrh	r3, [r3, #10]
 8046e14:	4619      	mov	r1, r3
 8046e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8046e18:	4613      	mov	r3, r2
 8046e1a:	005b      	lsls	r3, r3, #1
 8046e1c:	4413      	add	r3, r2
 8046e1e:	009b      	lsls	r3, r3, #2
 8046e20:	3348      	adds	r3, #72	; 0x48
 8046e22:	443b      	add	r3, r7
 8046e24:	3b38      	subs	r3, #56	; 0x38
 8046e26:	6019      	str	r1, [r3, #0]

    if(i>0)
 8046e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046e2a:	2b00      	cmp	r3, #0
 8046e2c:	d011      	beq.n	8046e52 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8046e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046e30:	1e5a      	subs	r2, r3, #1
 8046e32:	f107 000c 	add.w	r0, r7, #12
 8046e36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8046e38:	460b      	mov	r3, r1
 8046e3a:	005b      	lsls	r3, r3, #1
 8046e3c:	440b      	add	r3, r1
 8046e3e:	009b      	lsls	r3, r3, #2
 8046e40:	18c1      	adds	r1, r0, r3
 8046e42:	4613      	mov	r3, r2
 8046e44:	005b      	lsls	r3, r3, #1
 8046e46:	4413      	add	r3, r2
 8046e48:	009b      	lsls	r3, r3, #2
 8046e4a:	3348      	adds	r3, #72	; 0x48
 8046e4c:	443b      	add	r3, r7
 8046e4e:	3b34      	subs	r3, #52	; 0x34
 8046e50:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8046e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046e54:	681b      	ldr	r3, [r3, #0]
 8046e56:	2b00      	cmp	r3, #0
 8046e58:	d109      	bne.n	8046e6e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8046e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8046e5c:	4613      	mov	r3, r2
 8046e5e:	005b      	lsls	r3, r3, #1
 8046e60:	4413      	add	r3, r2
 8046e62:	009b      	lsls	r3, r3, #2
 8046e64:	3348      	adds	r3, #72	; 0x48
 8046e66:	443b      	add	r3, r7
 8046e68:	3b34      	subs	r3, #52	; 0x34
 8046e6a:	2200      	movs	r2, #0
 8046e6c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8046e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046e70:	3301      	adds	r3, #1
 8046e72:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8046e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046e76:	681b      	ldr	r3, [r3, #0]
 8046e78:	643b      	str	r3, [r7, #64]	; 0x40
 8046e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046e7c:	2b00      	cmp	r3, #0
 8046e7e:	d1b6      	bne.n	8046dee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8046e80:	683b      	ldr	r3, [r7, #0]
 8046e82:	891b      	ldrh	r3, [r3, #8]
 8046e84:	461a      	mov	r2, r3
 8046e86:	4b15      	ldr	r3, [pc, #84]	; (8046edc <low_level_output+0x128>)
 8046e88:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8046e8a:	4a14      	ldr	r2, [pc, #80]	; (8046edc <low_level_output+0x128>)
 8046e8c:	f107 030c 	add.w	r3, r7, #12
 8046e90:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8046e92:	4a12      	ldr	r2, [pc, #72]	; (8046edc <low_level_output+0x128>)
 8046e94:	683b      	ldr	r3, [r7, #0]
 8046e96:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8046e98:	6838      	ldr	r0, [r7, #0]
 8046e9a:	f005 f971 	bl	804c180 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8046e9e:	490f      	ldr	r1, [pc, #60]	; (8046edc <low_level_output+0x128>)
 8046ea0:	480f      	ldr	r0, [pc, #60]	; (8046ee0 <low_level_output+0x12c>)
 8046ea2:	f7fb fc33 	bl	804270c <HAL_ETH_Transmit_IT>
 8046ea6:	4603      	mov	r3, r0
 8046ea8:	2b00      	cmp	r3, #0
 8046eaa:	d10e      	bne.n	8046eca <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8046eac:	bf00      	nop
 8046eae:	4b0d      	ldr	r3, [pc, #52]	; (8046ee4 <low_level_output+0x130>)
 8046eb0:	681b      	ldr	r3, [r3, #0]
 8046eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8046eb6:	4618      	mov	r0, r3
 8046eb8:	f000 fc7a 	bl	80477b0 <osSemaphoreWait>
 8046ebc:	4603      	mov	r3, r0
 8046ebe:	2b00      	cmp	r3, #0
 8046ec0:	d1f5      	bne.n	8046eae <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8046ec2:	4807      	ldr	r0, [pc, #28]	; (8046ee0 <low_level_output+0x12c>)
 8046ec4:	f7fb fdb6 	bl	8042a34 <HAL_ETH_ReleaseTxPacket>
 8046ec8:	e002      	b.n	8046ed0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8046eca:	6838      	ldr	r0, [r7, #0]
 8046ecc:	f005 f8b2 	bl	804c034 <pbuf_free>
  }

  return errval;
 8046ed0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8046ed4:	4618      	mov	r0, r3
 8046ed6:	3748      	adds	r7, #72	; 0x48
 8046ed8:	46bd      	mov	sp, r7
 8046eda:	bd80      	pop	{r7, pc}
 8046edc:	20006ec4 	.word	0x20006ec4
 8046ee0:	20006e14 	.word	0x20006e14
 8046ee4:	20006e10 	.word	0x20006e10

08046ee8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8046ee8:	b580      	push	{r7, lr}
 8046eea:	b084      	sub	sp, #16
 8046eec:	af00      	add	r7, sp, #0
 8046eee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8046ef0:	2300      	movs	r3, #0
 8046ef2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8046ef4:	4b07      	ldr	r3, [pc, #28]	; (8046f14 <low_level_input+0x2c>)
 8046ef6:	781b      	ldrb	r3, [r3, #0]
 8046ef8:	2b00      	cmp	r3, #0
 8046efa:	d105      	bne.n	8046f08 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8046efc:	f107 030c 	add.w	r3, r7, #12
 8046f00:	4619      	mov	r1, r3
 8046f02:	4805      	ldr	r0, [pc, #20]	; (8046f18 <low_level_input+0x30>)
 8046f04:	f7fb fc5e 	bl	80427c4 <HAL_ETH_ReadData>
  }

  return p;
 8046f08:	68fb      	ldr	r3, [r7, #12]
}
 8046f0a:	4618      	mov	r0, r3
 8046f0c:	3710      	adds	r7, #16
 8046f0e:	46bd      	mov	sp, r7
 8046f10:	bd80      	pop	{r7, pc}
 8046f12:	bf00      	nop
 8046f14:	20006e08 	.word	0x20006e08
 8046f18:	20006e14 	.word	0x20006e14

08046f1c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8046f1c:	b580      	push	{r7, lr}
 8046f1e:	b084      	sub	sp, #16
 8046f20:	af00      	add	r7, sp, #0
 8046f22:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8046f24:	2300      	movs	r3, #0
 8046f26:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8046f28:	687b      	ldr	r3, [r7, #4]
 8046f2a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8046f2c:	4b0f      	ldr	r3, [pc, #60]	; (8046f6c <ethernetif_input+0x50>)
 8046f2e:	681b      	ldr	r3, [r3, #0]
 8046f30:	f04f 31ff 	mov.w	r1, #4294967295
 8046f34:	4618      	mov	r0, r3
 8046f36:	f000 fc3b 	bl	80477b0 <osSemaphoreWait>
 8046f3a:	4603      	mov	r3, r0
 8046f3c:	2b00      	cmp	r3, #0
 8046f3e:	d1f5      	bne.n	8046f2c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8046f40:	68b8      	ldr	r0, [r7, #8]
 8046f42:	f7ff ffd1 	bl	8046ee8 <low_level_input>
 8046f46:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8046f48:	68fb      	ldr	r3, [r7, #12]
 8046f4a:	2b00      	cmp	r3, #0
 8046f4c:	d00a      	beq.n	8046f64 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8046f4e:	68bb      	ldr	r3, [r7, #8]
 8046f50:	691b      	ldr	r3, [r3, #16]
 8046f52:	68b9      	ldr	r1, [r7, #8]
 8046f54:	68f8      	ldr	r0, [r7, #12]
 8046f56:	4798      	blx	r3
 8046f58:	4603      	mov	r3, r0
 8046f5a:	2b00      	cmp	r3, #0
 8046f5c:	d002      	beq.n	8046f64 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8046f5e:	68f8      	ldr	r0, [r7, #12]
 8046f60:	f005 f868 	bl	804c034 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8046f64:	68fb      	ldr	r3, [r7, #12]
 8046f66:	2b00      	cmp	r3, #0
 8046f68:	d1ea      	bne.n	8046f40 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8046f6a:	e7df      	b.n	8046f2c <ethernetif_input+0x10>
 8046f6c:	20006e0c 	.word	0x20006e0c

08046f70 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8046f70:	b580      	push	{r7, lr}
 8046f72:	b082      	sub	sp, #8
 8046f74:	af00      	add	r7, sp, #0
 8046f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8046f78:	687b      	ldr	r3, [r7, #4]
 8046f7a:	2b00      	cmp	r3, #0
 8046f7c:	d106      	bne.n	8046f8c <ethernetif_init+0x1c>
 8046f7e:	4b0e      	ldr	r3, [pc, #56]	; (8046fb8 <ethernetif_init+0x48>)
 8046f80:	f240 2202 	movw	r2, #514	; 0x202
 8046f84:	490d      	ldr	r1, [pc, #52]	; (8046fbc <ethernetif_init+0x4c>)
 8046f86:	480e      	ldr	r0, [pc, #56]	; (8046fc0 <ethernetif_init+0x50>)
 8046f88:	f00d fc5a 	bl	8054840 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8046f8c:	687b      	ldr	r3, [r7, #4]
 8046f8e:	2273      	movs	r2, #115	; 0x73
 8046f90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8046f94:	687b      	ldr	r3, [r7, #4]
 8046f96:	2274      	movs	r2, #116	; 0x74
 8046f98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8046f9c:	687b      	ldr	r3, [r7, #4]
 8046f9e:	4a09      	ldr	r2, [pc, #36]	; (8046fc4 <ethernetif_init+0x54>)
 8046fa0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8046fa2:	687b      	ldr	r3, [r7, #4]
 8046fa4:	4a08      	ldr	r2, [pc, #32]	; (8046fc8 <ethernetif_init+0x58>)
 8046fa6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8046fa8:	6878      	ldr	r0, [r7, #4]
 8046faa:	f7ff fd9f 	bl	8046aec <low_level_init>

  return ERR_OK;
 8046fae:	2300      	movs	r3, #0
}
 8046fb0:	4618      	mov	r0, r3
 8046fb2:	3708      	adds	r7, #8
 8046fb4:	46bd      	mov	sp, r7
 8046fb6:	bd80      	pop	{r7, pc}
 8046fb8:	08055958 	.word	0x08055958
 8046fbc:	08055974 	.word	0x08055974
 8046fc0:	08055984 	.word	0x08055984
 8046fc4:	08052721 	.word	0x08052721
 8046fc8:	08046db5 	.word	0x08046db5

08046fcc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8046fcc:	b580      	push	{r7, lr}
 8046fce:	b084      	sub	sp, #16
 8046fd0:	af00      	add	r7, sp, #0
 8046fd2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8046fd4:	687b      	ldr	r3, [r7, #4]
 8046fd6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8046fd8:	68f9      	ldr	r1, [r7, #12]
 8046fda:	4809      	ldr	r0, [pc, #36]	; (8047000 <pbuf_free_custom+0x34>)
 8046fdc:	f004 f962 	bl	804b2a4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8046fe0:	4b08      	ldr	r3, [pc, #32]	; (8047004 <pbuf_free_custom+0x38>)
 8046fe2:	781b      	ldrb	r3, [r3, #0]
 8046fe4:	2b01      	cmp	r3, #1
 8046fe6:	d107      	bne.n	8046ff8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8046fe8:	4b06      	ldr	r3, [pc, #24]	; (8047004 <pbuf_free_custom+0x38>)
 8046fea:	2200      	movs	r2, #0
 8046fec:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8046fee:	4b06      	ldr	r3, [pc, #24]	; (8047008 <pbuf_free_custom+0x3c>)
 8046ff0:	681b      	ldr	r3, [r3, #0]
 8046ff2:	4618      	mov	r0, r3
 8046ff4:	f000 fc2a 	bl	804784c <osSemaphoreRelease>
  }
}
 8046ff8:	bf00      	nop
 8046ffa:	3710      	adds	r7, #16
 8046ffc:	46bd      	mov	sp, r7
 8046ffe:	bd80      	pop	{r7, pc}
 8047000:	0805845c 	.word	0x0805845c
 8047004:	20006e08 	.word	0x20006e08
 8047008:	20006e0c 	.word	0x20006e0c

0804700c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
uint32_t sys_now(void)
{
 804700c:	b580      	push	{r7, lr}
 804700e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8047010:	f7fa fcca 	bl	80419a8 <HAL_GetTick>
 8047014:	4603      	mov	r3, r0
}
 8047016:	4618      	mov	r0, r3
 8047018:	bd80      	pop	{r7, pc}
	...

0804701c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 804701c:	b580      	push	{r7, lr}
 804701e:	b08e      	sub	sp, #56	; 0x38
 8047020:	af00      	add	r7, sp, #0
 8047022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8047024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8047028:	2200      	movs	r2, #0
 804702a:	601a      	str	r2, [r3, #0]
 804702c:	605a      	str	r2, [r3, #4]
 804702e:	609a      	str	r2, [r3, #8]
 8047030:	60da      	str	r2, [r3, #12]
 8047032:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8047034:	687b      	ldr	r3, [r7, #4]
 8047036:	681b      	ldr	r3, [r3, #0]
 8047038:	4a52      	ldr	r2, [pc, #328]	; (8047184 <HAL_ETH_MspInit+0x168>)
 804703a:	4293      	cmp	r3, r2
 804703c:	f040 809e 	bne.w	804717c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8047040:	4b51      	ldr	r3, [pc, #324]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 8047042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047044:	4a50      	ldr	r2, [pc, #320]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 8047046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 804704a:	6313      	str	r3, [r2, #48]	; 0x30
 804704c:	4b4e      	ldr	r3, [pc, #312]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 804704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047054:	623b      	str	r3, [r7, #32]
 8047056:	6a3b      	ldr	r3, [r7, #32]
 8047058:	4b4b      	ldr	r3, [pc, #300]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 804705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804705c:	4a4a      	ldr	r2, [pc, #296]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 804705e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8047062:	6313      	str	r3, [r2, #48]	; 0x30
 8047064:	4b48      	ldr	r3, [pc, #288]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 8047066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804706c:	61fb      	str	r3, [r7, #28]
 804706e:	69fb      	ldr	r3, [r7, #28]
 8047070:	4b45      	ldr	r3, [pc, #276]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 8047072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047074:	4a44      	ldr	r2, [pc, #272]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 8047076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 804707a:	6313      	str	r3, [r2, #48]	; 0x30
 804707c:	4b42      	ldr	r3, [pc, #264]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 804707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8047084:	61bb      	str	r3, [r7, #24]
 8047086:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8047088:	4b3f      	ldr	r3, [pc, #252]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 804708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804708c:	4a3e      	ldr	r2, [pc, #248]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 804708e:	f043 0304 	orr.w	r3, r3, #4
 8047092:	6313      	str	r3, [r2, #48]	; 0x30
 8047094:	4b3c      	ldr	r3, [pc, #240]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 8047096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047098:	f003 0304 	and.w	r3, r3, #4
 804709c:	617b      	str	r3, [r7, #20]
 804709e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80470a0:	4b39      	ldr	r3, [pc, #228]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80470a4:	4a38      	ldr	r2, [pc, #224]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470a6:	f043 0301 	orr.w	r3, r3, #1
 80470aa:	6313      	str	r3, [r2, #48]	; 0x30
 80470ac:	4b36      	ldr	r3, [pc, #216]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80470b0:	f003 0301 	and.w	r3, r3, #1
 80470b4:	613b      	str	r3, [r7, #16]
 80470b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80470b8:	4b33      	ldr	r3, [pc, #204]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80470bc:	4a32      	ldr	r2, [pc, #200]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470be:	f043 0302 	orr.w	r3, r3, #2
 80470c2:	6313      	str	r3, [r2, #48]	; 0x30
 80470c4:	4b30      	ldr	r3, [pc, #192]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80470c8:	f003 0302 	and.w	r3, r3, #2
 80470cc:	60fb      	str	r3, [r7, #12]
 80470ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80470d0:	4b2d      	ldr	r3, [pc, #180]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80470d4:	4a2c      	ldr	r2, [pc, #176]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80470da:	6313      	str	r3, [r2, #48]	; 0x30
 80470dc:	4b2a      	ldr	r3, [pc, #168]	; (8047188 <HAL_ETH_MspInit+0x16c>)
 80470de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80470e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80470e4:	60bb      	str	r3, [r7, #8]
 80470e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80470e8:	2332      	movs	r3, #50	; 0x32
 80470ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80470ec:	2302      	movs	r3, #2
 80470ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80470f0:	2300      	movs	r3, #0
 80470f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80470f4:	2303      	movs	r3, #3
 80470f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80470f8:	230b      	movs	r3, #11
 80470fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80470fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8047100:	4619      	mov	r1, r3
 8047102:	4822      	ldr	r0, [pc, #136]	; (804718c <HAL_ETH_MspInit+0x170>)
 8047104:	f7fc fbc6 	bl	8043894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8047108:	2386      	movs	r3, #134	; 0x86
 804710a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804710c:	2302      	movs	r3, #2
 804710e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8047110:	2300      	movs	r3, #0
 8047112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8047114:	2303      	movs	r3, #3
 8047116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8047118:	230b      	movs	r3, #11
 804711a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804711c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8047120:	4619      	mov	r1, r3
 8047122:	481b      	ldr	r0, [pc, #108]	; (8047190 <HAL_ETH_MspInit+0x174>)
 8047124:	f7fc fbb6 	bl	8043894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8047128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 804712c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804712e:	2302      	movs	r3, #2
 8047130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8047132:	2300      	movs	r3, #0
 8047134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8047136:	2303      	movs	r3, #3
 8047138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 804713a:	230b      	movs	r3, #11
 804713c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804713e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8047142:	4619      	mov	r1, r3
 8047144:	4813      	ldr	r0, [pc, #76]	; (8047194 <HAL_ETH_MspInit+0x178>)
 8047146:	f7fc fba5 	bl	8043894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 804714a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 804714e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8047150:	2302      	movs	r3, #2
 8047152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8047154:	2300      	movs	r3, #0
 8047156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8047158:	2303      	movs	r3, #3
 804715a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 804715c:	230b      	movs	r3, #11
 804715e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8047160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8047164:	4619      	mov	r1, r3
 8047166:	480c      	ldr	r0, [pc, #48]	; (8047198 <HAL_ETH_MspInit+0x17c>)
 8047168:	f7fc fb94 	bl	8043894 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 804716c:	2200      	movs	r2, #0
 804716e:	2105      	movs	r1, #5
 8047170:	203d      	movs	r0, #61	; 0x3d
 8047172:	f7fa fd0d 	bl	8041b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8047176:	203d      	movs	r0, #61	; 0x3d
 8047178:	f7fa fd26 	bl	8041bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 804717c:	bf00      	nop
 804717e:	3738      	adds	r7, #56	; 0x38
 8047180:	46bd      	mov	sp, r7
 8047182:	bd80      	pop	{r7, pc}
 8047184:	40028000 	.word	0x40028000
 8047188:	40023800 	.word	0x40023800
 804718c:	40020800 	.word	0x40020800
 8047190:	40020000 	.word	0x40020000
 8047194:	40020400 	.word	0x40020400
 8047198:	40021800 	.word	0x40021800

0804719c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 804719c:	b580      	push	{r7, lr}
 804719e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80471a0:	4802      	ldr	r0, [pc, #8]	; (80471ac <ETH_PHY_IO_Init+0x10>)
 80471a2:	f7fb ff11 	bl	8042fc8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80471a6:	2300      	movs	r3, #0
}
 80471a8:	4618      	mov	r0, r3
 80471aa:	bd80      	pop	{r7, pc}
 80471ac:	20006e14 	.word	0x20006e14

080471b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80471b0:	b480      	push	{r7}
 80471b2:	af00      	add	r7, sp, #0
  return 0;
 80471b4:	2300      	movs	r3, #0
}
 80471b6:	4618      	mov	r0, r3
 80471b8:	46bd      	mov	sp, r7
 80471ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80471be:	4770      	bx	lr

080471c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80471c0:	b580      	push	{r7, lr}
 80471c2:	b084      	sub	sp, #16
 80471c4:	af00      	add	r7, sp, #0
 80471c6:	60f8      	str	r0, [r7, #12]
 80471c8:	60b9      	str	r1, [r7, #8]
 80471ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80471cc:	687b      	ldr	r3, [r7, #4]
 80471ce:	68ba      	ldr	r2, [r7, #8]
 80471d0:	68f9      	ldr	r1, [r7, #12]
 80471d2:	4807      	ldr	r0, [pc, #28]	; (80471f0 <ETH_PHY_IO_ReadReg+0x30>)
 80471d4:	f7fb fd60 	bl	8042c98 <HAL_ETH_ReadPHYRegister>
 80471d8:	4603      	mov	r3, r0
 80471da:	2b00      	cmp	r3, #0
 80471dc:	d002      	beq.n	80471e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80471de:	f04f 33ff 	mov.w	r3, #4294967295
 80471e2:	e000      	b.n	80471e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80471e4:	2300      	movs	r3, #0
}
 80471e6:	4618      	mov	r0, r3
 80471e8:	3710      	adds	r7, #16
 80471ea:	46bd      	mov	sp, r7
 80471ec:	bd80      	pop	{r7, pc}
 80471ee:	bf00      	nop
 80471f0:	20006e14 	.word	0x20006e14

080471f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80471f4:	b580      	push	{r7, lr}
 80471f6:	b084      	sub	sp, #16
 80471f8:	af00      	add	r7, sp, #0
 80471fa:	60f8      	str	r0, [r7, #12]
 80471fc:	60b9      	str	r1, [r7, #8]
 80471fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8047200:	687b      	ldr	r3, [r7, #4]
 8047202:	68ba      	ldr	r2, [r7, #8]
 8047204:	68f9      	ldr	r1, [r7, #12]
 8047206:	4807      	ldr	r0, [pc, #28]	; (8047224 <ETH_PHY_IO_WriteReg+0x30>)
 8047208:	f7fb fd91 	bl	8042d2e <HAL_ETH_WritePHYRegister>
 804720c:	4603      	mov	r3, r0
 804720e:	2b00      	cmp	r3, #0
 8047210:	d002      	beq.n	8047218 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8047212:	f04f 33ff 	mov.w	r3, #4294967295
 8047216:	e000      	b.n	804721a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8047218:	2300      	movs	r3, #0
}
 804721a:	4618      	mov	r0, r3
 804721c:	3710      	adds	r7, #16
 804721e:	46bd      	mov	sp, r7
 8047220:	bd80      	pop	{r7, pc}
 8047222:	bf00      	nop
 8047224:	20006e14 	.word	0x20006e14

08047228 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8047228:	b580      	push	{r7, lr}
 804722a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 804722c:	f7fa fbbc 	bl	80419a8 <HAL_GetTick>
 8047230:	4603      	mov	r3, r0
}
 8047232:	4618      	mov	r0, r3
 8047234:	bd80      	pop	{r7, pc}
	...

08047238 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8047238:	b580      	push	{r7, lr}
 804723a:	b0a0      	sub	sp, #128	; 0x80
 804723c:	af00      	add	r7, sp, #0
 804723e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8047240:	f107 0308 	add.w	r3, r7, #8
 8047244:	2264      	movs	r2, #100	; 0x64
 8047246:	2100      	movs	r1, #0
 8047248:	4618      	mov	r0, r3
 804724a:	f00d fc4f 	bl	8054aec <memset>
  int32_t PHYLinkState = 0;
 804724e:	2300      	movs	r3, #0
 8047250:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8047252:	2300      	movs	r3, #0
 8047254:	67fb      	str	r3, [r7, #124]	; 0x7c
 8047256:	2300      	movs	r3, #0
 8047258:	67bb      	str	r3, [r7, #120]	; 0x78
 804725a:	2300      	movs	r3, #0
 804725c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 804725e:	687b      	ldr	r3, [r7, #4]
 8047260:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8047262:	483a      	ldr	r0, [pc, #232]	; (804734c <ethernet_link_thread+0x114>)
 8047264:	f7fa faf7 	bl	8041856 <LAN8742_GetLinkState>
 8047268:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 804726a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804726c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8047270:	089b      	lsrs	r3, r3, #2
 8047272:	f003 0301 	and.w	r3, r3, #1
 8047276:	b2db      	uxtb	r3, r3
 8047278:	2b00      	cmp	r3, #0
 804727a:	d00c      	beq.n	8047296 <ethernet_link_thread+0x5e>
 804727c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 804727e:	2b01      	cmp	r3, #1
 8047280:	dc09      	bgt.n	8047296 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8047282:	4833      	ldr	r0, [pc, #204]	; (8047350 <ethernet_link_thread+0x118>)
 8047284:	f7fb f9c2 	bl	804260c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8047288:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 804728a:	f004 fa8f 	bl	804b7ac <netif_set_down>
    netif_set_link_down(netif);
 804728e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8047290:	f004 faf2 	bl	804b878 <netif_set_link_down>
 8047294:	e055      	b.n	8047342 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8047296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8047298:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804729c:	f003 0304 	and.w	r3, r3, #4
 80472a0:	2b00      	cmp	r3, #0
 80472a2:	d14e      	bne.n	8047342 <ethernet_link_thread+0x10a>
 80472a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80472a6:	2b01      	cmp	r3, #1
 80472a8:	dd4b      	ble.n	8047342 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80472aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80472ac:	3b02      	subs	r3, #2
 80472ae:	2b03      	cmp	r3, #3
 80472b0:	d82a      	bhi.n	8047308 <ethernet_link_thread+0xd0>
 80472b2:	a201      	add	r2, pc, #4	; (adr r2, 80472b8 <ethernet_link_thread+0x80>)
 80472b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80472b8:	080472c9 	.word	0x080472c9
 80472bc:	080472db 	.word	0x080472db
 80472c0:	080472eb 	.word	0x080472eb
 80472c4:	080472fb 	.word	0x080472fb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80472c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80472cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80472ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80472d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80472d4:	2301      	movs	r3, #1
 80472d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80472d8:	e017      	b.n	804730a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80472da:	2300      	movs	r3, #0
 80472dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80472de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80472e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80472e4:	2301      	movs	r3, #1
 80472e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80472e8:	e00f      	b.n	804730a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80472ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80472ee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80472f0:	2300      	movs	r3, #0
 80472f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80472f4:	2301      	movs	r3, #1
 80472f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80472f8:	e007      	b.n	804730a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80472fa:	2300      	movs	r3, #0
 80472fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80472fe:	2300      	movs	r3, #0
 8047300:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8047302:	2301      	movs	r3, #1
 8047304:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8047306:	e000      	b.n	804730a <ethernet_link_thread+0xd2>
    default:
      break;
 8047308:	bf00      	nop
    }

    if(linkchanged)
 804730a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 804730c:	2b00      	cmp	r3, #0
 804730e:	d018      	beq.n	8047342 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8047310:	f107 0308 	add.w	r3, r7, #8
 8047314:	4619      	mov	r1, r3
 8047316:	480e      	ldr	r0, [pc, #56]	; (8047350 <ethernet_link_thread+0x118>)
 8047318:	f7fb fd52 	bl	8042dc0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 804731c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 804731e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8047320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8047322:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8047324:	f107 0308 	add.w	r3, r7, #8
 8047328:	4619      	mov	r1, r3
 804732a:	4809      	ldr	r0, [pc, #36]	; (8047350 <ethernet_link_thread+0x118>)
 804732c:	f7fb fe32 	bl	8042f94 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8047330:	4807      	ldr	r0, [pc, #28]	; (8047350 <ethernet_link_thread+0x118>)
 8047332:	f7fb f8dd 	bl	80424f0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8047336:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8047338:	f004 f9cc 	bl	804b6d4 <netif_set_up>
      netif_set_link_up(netif);
 804733c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 804733e:	f004 fa67 	bl	804b810 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8047342:	2064      	movs	r0, #100	; 0x64
 8047344:	f000 f951 	bl	80475ea <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8047348:	e78b      	b.n	8047262 <ethernet_link_thread+0x2a>
 804734a:	bf00      	nop
 804734c:	20006efc 	.word	0x20006efc
 8047350:	20006e14 	.word	0x20006e14

08047354 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8047354:	b580      	push	{r7, lr}
 8047356:	b086      	sub	sp, #24
 8047358:	af02      	add	r7, sp, #8
 804735a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 804735c:	4812      	ldr	r0, [pc, #72]	; (80473a8 <HAL_ETH_RxAllocateCallback+0x54>)
 804735e:	f003 ff2d 	bl	804b1bc <memp_malloc_pool>
 8047362:	60f8      	str	r0, [r7, #12]
  if (p)
 8047364:	68fb      	ldr	r3, [r7, #12]
 8047366:	2b00      	cmp	r3, #0
 8047368:	d014      	beq.n	8047394 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 804736a:	68fb      	ldr	r3, [r7, #12]
 804736c:	f103 0220 	add.w	r2, r3, #32
 8047370:	687b      	ldr	r3, [r7, #4]
 8047372:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8047374:	68fb      	ldr	r3, [r7, #12]
 8047376:	4a0d      	ldr	r2, [pc, #52]	; (80473ac <HAL_ETH_RxAllocateCallback+0x58>)
 8047378:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 804737a:	687b      	ldr	r3, [r7, #4]
 804737c:	681b      	ldr	r3, [r3, #0]
 804737e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8047382:	9201      	str	r2, [sp, #4]
 8047384:	9300      	str	r3, [sp, #0]
 8047386:	68fb      	ldr	r3, [r7, #12]
 8047388:	2241      	movs	r2, #65	; 0x41
 804738a:	2100      	movs	r1, #0
 804738c:	2000      	movs	r0, #0
 804738e:	f004 fc97 	bl	804bcc0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8047392:	e005      	b.n	80473a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8047394:	4b06      	ldr	r3, [pc, #24]	; (80473b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8047396:	2201      	movs	r2, #1
 8047398:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 804739a:	687b      	ldr	r3, [r7, #4]
 804739c:	2200      	movs	r2, #0
 804739e:	601a      	str	r2, [r3, #0]
}
 80473a0:	bf00      	nop
 80473a2:	3710      	adds	r7, #16
 80473a4:	46bd      	mov	sp, r7
 80473a6:	bd80      	pop	{r7, pc}
 80473a8:	0805845c 	.word	0x0805845c
 80473ac:	08046fcd 	.word	0x08046fcd
 80473b0:	20006e08 	.word	0x20006e08

080473b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80473b4:	b580      	push	{r7, lr}
 80473b6:	b088      	sub	sp, #32
 80473b8:	af00      	add	r7, sp, #0
 80473ba:	60f8      	str	r0, [r7, #12]
 80473bc:	60b9      	str	r1, [r7, #8]
 80473be:	607a      	str	r2, [r7, #4]
 80473c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80473c2:	68fb      	ldr	r3, [r7, #12]
 80473c4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80473c6:	68bb      	ldr	r3, [r7, #8]
 80473c8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80473ca:	2300      	movs	r3, #0
 80473cc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80473ce:	687b      	ldr	r3, [r7, #4]
 80473d0:	3b20      	subs	r3, #32
 80473d2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80473d4:	69fb      	ldr	r3, [r7, #28]
 80473d6:	2200      	movs	r2, #0
 80473d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80473da:	69fb      	ldr	r3, [r7, #28]
 80473dc:	2200      	movs	r2, #0
 80473de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80473e0:	69fb      	ldr	r3, [r7, #28]
 80473e2:	887a      	ldrh	r2, [r7, #2]
 80473e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80473e6:	69bb      	ldr	r3, [r7, #24]
 80473e8:	681b      	ldr	r3, [r3, #0]
 80473ea:	2b00      	cmp	r3, #0
 80473ec:	d103      	bne.n	80473f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80473ee:	69bb      	ldr	r3, [r7, #24]
 80473f0:	69fa      	ldr	r2, [r7, #28]
 80473f2:	601a      	str	r2, [r3, #0]
 80473f4:	e003      	b.n	80473fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80473f6:	697b      	ldr	r3, [r7, #20]
 80473f8:	681b      	ldr	r3, [r3, #0]
 80473fa:	69fa      	ldr	r2, [r7, #28]
 80473fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80473fe:	697b      	ldr	r3, [r7, #20]
 8047400:	69fa      	ldr	r2, [r7, #28]
 8047402:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8047404:	69bb      	ldr	r3, [r7, #24]
 8047406:	681b      	ldr	r3, [r3, #0]
 8047408:	61fb      	str	r3, [r7, #28]
 804740a:	e009      	b.n	8047420 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 804740c:	69fb      	ldr	r3, [r7, #28]
 804740e:	891a      	ldrh	r2, [r3, #8]
 8047410:	887b      	ldrh	r3, [r7, #2]
 8047412:	4413      	add	r3, r2
 8047414:	b29a      	uxth	r2, r3
 8047416:	69fb      	ldr	r3, [r7, #28]
 8047418:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 804741a:	69fb      	ldr	r3, [r7, #28]
 804741c:	681b      	ldr	r3, [r3, #0]
 804741e:	61fb      	str	r3, [r7, #28]
 8047420:	69fb      	ldr	r3, [r7, #28]
 8047422:	2b00      	cmp	r3, #0
 8047424:	d1f2      	bne.n	804740c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8047426:	887b      	ldrh	r3, [r7, #2]
 8047428:	4619      	mov	r1, r3
 804742a:	6878      	ldr	r0, [r7, #4]
 804742c:	f7ff fafa 	bl	8046a24 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8047430:	bf00      	nop
 8047432:	3720      	adds	r7, #32
 8047434:	46bd      	mov	sp, r7
 8047436:	bd80      	pop	{r7, pc}

08047438 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8047438:	b580      	push	{r7, lr}
 804743a:	b082      	sub	sp, #8
 804743c:	af00      	add	r7, sp, #0
 804743e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8047440:	6878      	ldr	r0, [r7, #4]
 8047442:	f004 fdf7 	bl	804c034 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8047446:	bf00      	nop
 8047448:	3708      	adds	r7, #8
 804744a:	46bd      	mov	sp, r7
 804744c:	bd80      	pop	{r7, pc}
	...

08047450 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8047450:	b580      	push	{r7, lr}
 8047452:	b082      	sub	sp, #8
 8047454:	af00      	add	r7, sp, #0
 8047456:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8047458:	4b15      	ldr	r3, [pc, #84]	; (80474b0 <RMII_Thread+0x60>)
 804745a:	681b      	ldr	r3, [r3, #0]
 804745c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8047460:	2b00      	cmp	r3, #0
 8047462:	d003      	beq.n	804746c <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 8047464:	2000      	movs	r0, #0
 8047466:	f000 f8b4 	bl	80475d2 <osThreadTerminate>
 804746a:	e7f5      	b.n	8047458 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 804746c:	4b10      	ldr	r3, [pc, #64]	; (80474b0 <RMII_Thread+0x60>)
 804746e:	681b      	ldr	r3, [r3, #0]
 8047470:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8047474:	2b0a      	cmp	r3, #10
 8047476:	d916      	bls.n	80474a6 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8047478:	4b0e      	ldr	r3, [pc, #56]	; (80474b4 <RMII_Thread+0x64>)
 804747a:	685b      	ldr	r3, [r3, #4]
 804747c:	4a0d      	ldr	r2, [pc, #52]	; (80474b4 <RMII_Thread+0x64>)
 804747e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8047482:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8047484:	4b0b      	ldr	r3, [pc, #44]	; (80474b4 <RMII_Thread+0x64>)
 8047486:	685b      	ldr	r3, [r3, #4]
 8047488:	4a0a      	ldr	r2, [pc, #40]	; (80474b4 <RMII_Thread+0x64>)
 804748a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804748e:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8047490:	4b07      	ldr	r3, [pc, #28]	; (80474b0 <RMII_Thread+0x60>)
 8047492:	681b      	ldr	r3, [r3, #0]
 8047494:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8047498:	4b05      	ldr	r3, [pc, #20]	; (80474b0 <RMII_Thread+0x60>)
 804749a:	681b      	ldr	r3, [r3, #0]
 804749c:	f042 0201 	orr.w	r2, r2, #1
 80474a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80474a4:	e7d8      	b.n	8047458 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80474a6:	20c8      	movs	r0, #200	; 0xc8
 80474a8:	f000 f89f 	bl	80475ea <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80474ac:	e7d4      	b.n	8047458 <RMII_Thread+0x8>
 80474ae:	bf00      	nop
 80474b0:	20006e14 	.word	0x20006e14
 80474b4:	40013800 	.word	0x40013800

080474b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80474b8:	b480      	push	{r7}
 80474ba:	b085      	sub	sp, #20
 80474bc:	af00      	add	r7, sp, #0
 80474be:	4603      	mov	r3, r0
 80474c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80474c2:	2300      	movs	r3, #0
 80474c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80474c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80474ca:	2b84      	cmp	r3, #132	; 0x84
 80474cc:	d005      	beq.n	80474da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80474ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80474d2:	68fb      	ldr	r3, [r7, #12]
 80474d4:	4413      	add	r3, r2
 80474d6:	3303      	adds	r3, #3
 80474d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80474da:	68fb      	ldr	r3, [r7, #12]
}
 80474dc:	4618      	mov	r0, r3
 80474de:	3714      	adds	r7, #20
 80474e0:	46bd      	mov	sp, r7
 80474e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474e6:	4770      	bx	lr

080474e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80474e8:	b480      	push	{r7}
 80474ea:	b083      	sub	sp, #12
 80474ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80474ee:	f3ef 8305 	mrs	r3, IPSR
 80474f2:	607b      	str	r3, [r7, #4]
  return(result);
 80474f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80474f6:	2b00      	cmp	r3, #0
 80474f8:	bf14      	ite	ne
 80474fa:	2301      	movne	r3, #1
 80474fc:	2300      	moveq	r3, #0
 80474fe:	b2db      	uxtb	r3, r3
}
 8047500:	4618      	mov	r0, r3
 8047502:	370c      	adds	r7, #12
 8047504:	46bd      	mov	sp, r7
 8047506:	f85d 7b04 	ldr.w	r7, [sp], #4
 804750a:	4770      	bx	lr

0804750c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 804750c:	b580      	push	{r7, lr}
 804750e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8047510:	f001 fd5a 	bl	8048fc8 <vTaskStartScheduler>
  
  return osOK;
 8047514:	2300      	movs	r3, #0
}
 8047516:	4618      	mov	r0, r3
 8047518:	bd80      	pop	{r7, pc}

0804751a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 804751a:	b580      	push	{r7, lr}
 804751c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 804751e:	f7ff ffe3 	bl	80474e8 <inHandlerMode>
 8047522:	4603      	mov	r3, r0
 8047524:	2b00      	cmp	r3, #0
 8047526:	d003      	beq.n	8047530 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8047528:	f001 fe78 	bl	804921c <xTaskGetTickCountFromISR>
 804752c:	4603      	mov	r3, r0
 804752e:	e002      	b.n	8047536 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8047530:	f001 fe64 	bl	80491fc <xTaskGetTickCount>
 8047534:	4603      	mov	r3, r0
  }
}
 8047536:	4618      	mov	r0, r3
 8047538:	bd80      	pop	{r7, pc}

0804753a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 804753a:	b5f0      	push	{r4, r5, r6, r7, lr}
 804753c:	b089      	sub	sp, #36	; 0x24
 804753e:	af04      	add	r7, sp, #16
 8047540:	6078      	str	r0, [r7, #4]
 8047542:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8047544:	687b      	ldr	r3, [r7, #4]
 8047546:	695b      	ldr	r3, [r3, #20]
 8047548:	2b00      	cmp	r3, #0
 804754a:	d020      	beq.n	804758e <osThreadCreate+0x54>
 804754c:	687b      	ldr	r3, [r7, #4]
 804754e:	699b      	ldr	r3, [r3, #24]
 8047550:	2b00      	cmp	r3, #0
 8047552:	d01c      	beq.n	804758e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8047554:	687b      	ldr	r3, [r7, #4]
 8047556:	685c      	ldr	r4, [r3, #4]
 8047558:	687b      	ldr	r3, [r7, #4]
 804755a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 804755c:	687b      	ldr	r3, [r7, #4]
 804755e:	691e      	ldr	r6, [r3, #16]
 8047560:	687b      	ldr	r3, [r7, #4]
 8047562:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8047566:	4618      	mov	r0, r3
 8047568:	f7ff ffa6 	bl	80474b8 <makeFreeRtosPriority>
 804756c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 804756e:	687b      	ldr	r3, [r7, #4]
 8047570:	695b      	ldr	r3, [r3, #20]
 8047572:	687a      	ldr	r2, [r7, #4]
 8047574:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8047576:	9202      	str	r2, [sp, #8]
 8047578:	9301      	str	r3, [sp, #4]
 804757a:	9100      	str	r1, [sp, #0]
 804757c:	683b      	ldr	r3, [r7, #0]
 804757e:	4632      	mov	r2, r6
 8047580:	4629      	mov	r1, r5
 8047582:	4620      	mov	r0, r4
 8047584:	f001 faa6 	bl	8048ad4 <xTaskCreateStatic>
 8047588:	4603      	mov	r3, r0
 804758a:	60fb      	str	r3, [r7, #12]
 804758c:	e01c      	b.n	80475c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 804758e:	687b      	ldr	r3, [r7, #4]
 8047590:	685c      	ldr	r4, [r3, #4]
 8047592:	687b      	ldr	r3, [r7, #4]
 8047594:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8047596:	687b      	ldr	r3, [r7, #4]
 8047598:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 804759a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 804759c:	687b      	ldr	r3, [r7, #4]
 804759e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80475a2:	4618      	mov	r0, r3
 80475a4:	f7ff ff88 	bl	80474b8 <makeFreeRtosPriority>
 80475a8:	4602      	mov	r2, r0
 80475aa:	f107 030c 	add.w	r3, r7, #12
 80475ae:	9301      	str	r3, [sp, #4]
 80475b0:	9200      	str	r2, [sp, #0]
 80475b2:	683b      	ldr	r3, [r7, #0]
 80475b4:	4632      	mov	r2, r6
 80475b6:	4629      	mov	r1, r5
 80475b8:	4620      	mov	r0, r4
 80475ba:	f001 faee 	bl	8048b9a <xTaskCreate>
 80475be:	4603      	mov	r3, r0
 80475c0:	2b01      	cmp	r3, #1
 80475c2:	d001      	beq.n	80475c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80475c4:	2300      	movs	r3, #0
 80475c6:	e000      	b.n	80475ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80475c8:	68fb      	ldr	r3, [r7, #12]
}
 80475ca:	4618      	mov	r0, r3
 80475cc:	3714      	adds	r7, #20
 80475ce:	46bd      	mov	sp, r7
 80475d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080475d2 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80475d2:	b580      	push	{r7, lr}
 80475d4:	b082      	sub	sp, #8
 80475d6:	af00      	add	r7, sp, #0
 80475d8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80475da:	6878      	ldr	r0, [r7, #4]
 80475dc:	f001 fc2c 	bl	8048e38 <vTaskDelete>
  return osOK;
 80475e0:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80475e2:	4618      	mov	r0, r3
 80475e4:	3708      	adds	r7, #8
 80475e6:	46bd      	mov	sp, r7
 80475e8:	bd80      	pop	{r7, pc}

080475ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80475ea:	b580      	push	{r7, lr}
 80475ec:	b084      	sub	sp, #16
 80475ee:	af00      	add	r7, sp, #0
 80475f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80475f2:	687b      	ldr	r3, [r7, #4]
 80475f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80475f6:	68fb      	ldr	r3, [r7, #12]
 80475f8:	2b00      	cmp	r3, #0
 80475fa:	d001      	beq.n	8047600 <osDelay+0x16>
 80475fc:	68fb      	ldr	r3, [r7, #12]
 80475fe:	e000      	b.n	8047602 <osDelay+0x18>
 8047600:	2301      	movs	r3, #1
 8047602:	4618      	mov	r0, r3
 8047604:	f001 fcaa 	bl	8048f5c <vTaskDelay>
  
  return osOK;
 8047608:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 804760a:	4618      	mov	r0, r3
 804760c:	3710      	adds	r7, #16
 804760e:	46bd      	mov	sp, r7
 8047610:	bd80      	pop	{r7, pc}

08047612 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8047612:	b580      	push	{r7, lr}
 8047614:	b082      	sub	sp, #8
 8047616:	af00      	add	r7, sp, #0
 8047618:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 804761a:	687b      	ldr	r3, [r7, #4]
 804761c:	685b      	ldr	r3, [r3, #4]
 804761e:	2b00      	cmp	r3, #0
 8047620:	d007      	beq.n	8047632 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8047622:	687b      	ldr	r3, [r7, #4]
 8047624:	685b      	ldr	r3, [r3, #4]
 8047626:	4619      	mov	r1, r3
 8047628:	2001      	movs	r0, #1
 804762a:	f000 fc54 	bl	8047ed6 <xQueueCreateMutexStatic>
 804762e:	4603      	mov	r3, r0
 8047630:	e003      	b.n	804763a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8047632:	2001      	movs	r0, #1
 8047634:	f000 fc37 	bl	8047ea6 <xQueueCreateMutex>
 8047638:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 804763a:	4618      	mov	r0, r3
 804763c:	3708      	adds	r7, #8
 804763e:	46bd      	mov	sp, r7
 8047640:	bd80      	pop	{r7, pc}
	...

08047644 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8047644:	b580      	push	{r7, lr}
 8047646:	b084      	sub	sp, #16
 8047648:	af00      	add	r7, sp, #0
 804764a:	6078      	str	r0, [r7, #4]
 804764c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 804764e:	2300      	movs	r3, #0
 8047650:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8047652:	687b      	ldr	r3, [r7, #4]
 8047654:	2b00      	cmp	r3, #0
 8047656:	d101      	bne.n	804765c <osMutexWait+0x18>
    return osErrorParameter;
 8047658:	2380      	movs	r3, #128	; 0x80
 804765a:	e03a      	b.n	80476d2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 804765c:	2300      	movs	r3, #0
 804765e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8047660:	683b      	ldr	r3, [r7, #0]
 8047662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047666:	d103      	bne.n	8047670 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8047668:	f04f 33ff 	mov.w	r3, #4294967295
 804766c:	60fb      	str	r3, [r7, #12]
 804766e:	e009      	b.n	8047684 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8047670:	683b      	ldr	r3, [r7, #0]
 8047672:	2b00      	cmp	r3, #0
 8047674:	d006      	beq.n	8047684 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8047676:	683b      	ldr	r3, [r7, #0]
 8047678:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 804767a:	68fb      	ldr	r3, [r7, #12]
 804767c:	2b00      	cmp	r3, #0
 804767e:	d101      	bne.n	8047684 <osMutexWait+0x40>
      ticks = 1;
 8047680:	2301      	movs	r3, #1
 8047682:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8047684:	f7ff ff30 	bl	80474e8 <inHandlerMode>
 8047688:	4603      	mov	r3, r0
 804768a:	2b00      	cmp	r3, #0
 804768c:	d017      	beq.n	80476be <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 804768e:	f107 0308 	add.w	r3, r7, #8
 8047692:	461a      	mov	r2, r3
 8047694:	2100      	movs	r1, #0
 8047696:	6878      	ldr	r0, [r7, #4]
 8047698:	f001 f86e 	bl	8048778 <xQueueReceiveFromISR>
 804769c:	4603      	mov	r3, r0
 804769e:	2b01      	cmp	r3, #1
 80476a0:	d001      	beq.n	80476a6 <osMutexWait+0x62>
      return osErrorOS;
 80476a2:	23ff      	movs	r3, #255	; 0xff
 80476a4:	e015      	b.n	80476d2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80476a6:	68bb      	ldr	r3, [r7, #8]
 80476a8:	2b00      	cmp	r3, #0
 80476aa:	d011      	beq.n	80476d0 <osMutexWait+0x8c>
 80476ac:	4b0b      	ldr	r3, [pc, #44]	; (80476dc <osMutexWait+0x98>)
 80476ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80476b2:	601a      	str	r2, [r3, #0]
 80476b4:	f3bf 8f4f 	dsb	sy
 80476b8:	f3bf 8f6f 	isb	sy
 80476bc:	e008      	b.n	80476d0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80476be:	68f9      	ldr	r1, [r7, #12]
 80476c0:	6878      	ldr	r0, [r7, #4]
 80476c2:	f000 ff45 	bl	8048550 <xQueueSemaphoreTake>
 80476c6:	4603      	mov	r3, r0
 80476c8:	2b01      	cmp	r3, #1
 80476ca:	d001      	beq.n	80476d0 <osMutexWait+0x8c>
    return osErrorOS;
 80476cc:	23ff      	movs	r3, #255	; 0xff
 80476ce:	e000      	b.n	80476d2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80476d0:	2300      	movs	r3, #0
}
 80476d2:	4618      	mov	r0, r3
 80476d4:	3710      	adds	r7, #16
 80476d6:	46bd      	mov	sp, r7
 80476d8:	bd80      	pop	{r7, pc}
 80476da:	bf00      	nop
 80476dc:	e000ed04 	.word	0xe000ed04

080476e0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80476e0:	b580      	push	{r7, lr}
 80476e2:	b084      	sub	sp, #16
 80476e4:	af00      	add	r7, sp, #0
 80476e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80476e8:	2300      	movs	r3, #0
 80476ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80476ec:	2300      	movs	r3, #0
 80476ee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80476f0:	f7ff fefa 	bl	80474e8 <inHandlerMode>
 80476f4:	4603      	mov	r3, r0
 80476f6:	2b00      	cmp	r3, #0
 80476f8:	d016      	beq.n	8047728 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80476fa:	f107 0308 	add.w	r3, r7, #8
 80476fe:	4619      	mov	r1, r3
 8047700:	6878      	ldr	r0, [r7, #4]
 8047702:	f000 fda9 	bl	8048258 <xQueueGiveFromISR>
 8047706:	4603      	mov	r3, r0
 8047708:	2b01      	cmp	r3, #1
 804770a:	d001      	beq.n	8047710 <osMutexRelease+0x30>
      return osErrorOS;
 804770c:	23ff      	movs	r3, #255	; 0xff
 804770e:	e017      	b.n	8047740 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8047710:	68bb      	ldr	r3, [r7, #8]
 8047712:	2b00      	cmp	r3, #0
 8047714:	d013      	beq.n	804773e <osMutexRelease+0x5e>
 8047716:	4b0c      	ldr	r3, [pc, #48]	; (8047748 <osMutexRelease+0x68>)
 8047718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804771c:	601a      	str	r2, [r3, #0]
 804771e:	f3bf 8f4f 	dsb	sy
 8047722:	f3bf 8f6f 	isb	sy
 8047726:	e00a      	b.n	804773e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8047728:	2300      	movs	r3, #0
 804772a:	2200      	movs	r2, #0
 804772c:	2100      	movs	r1, #0
 804772e:	6878      	ldr	r0, [r7, #4]
 8047730:	f000 fbec 	bl	8047f0c <xQueueGenericSend>
 8047734:	4603      	mov	r3, r0
 8047736:	2b01      	cmp	r3, #1
 8047738:	d001      	beq.n	804773e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 804773a:	23ff      	movs	r3, #255	; 0xff
 804773c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 804773e:	68fb      	ldr	r3, [r7, #12]
}
 8047740:	4618      	mov	r0, r3
 8047742:	3710      	adds	r7, #16
 8047744:	46bd      	mov	sp, r7
 8047746:	bd80      	pop	{r7, pc}
 8047748:	e000ed04 	.word	0xe000ed04

0804774c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 804774c:	b580      	push	{r7, lr}
 804774e:	b086      	sub	sp, #24
 8047750:	af02      	add	r7, sp, #8
 8047752:	6078      	str	r0, [r7, #4]
 8047754:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8047756:	687b      	ldr	r3, [r7, #4]
 8047758:	685b      	ldr	r3, [r3, #4]
 804775a:	2b00      	cmp	r3, #0
 804775c:	d00f      	beq.n	804777e <osSemaphoreCreate+0x32>
    if (count == 1) {
 804775e:	683b      	ldr	r3, [r7, #0]
 8047760:	2b01      	cmp	r3, #1
 8047762:	d10a      	bne.n	804777a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8047764:	687b      	ldr	r3, [r7, #4]
 8047766:	685b      	ldr	r3, [r3, #4]
 8047768:	2203      	movs	r2, #3
 804776a:	9200      	str	r2, [sp, #0]
 804776c:	2200      	movs	r2, #0
 804776e:	2100      	movs	r1, #0
 8047770:	2001      	movs	r0, #1
 8047772:	f000 fa9b 	bl	8047cac <xQueueGenericCreateStatic>
 8047776:	4603      	mov	r3, r0
 8047778:	e016      	b.n	80477a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 804777a:	2300      	movs	r3, #0
 804777c:	e014      	b.n	80477a8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 804777e:	683b      	ldr	r3, [r7, #0]
 8047780:	2b01      	cmp	r3, #1
 8047782:	d110      	bne.n	80477a6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8047784:	2203      	movs	r2, #3
 8047786:	2100      	movs	r1, #0
 8047788:	2001      	movs	r0, #1
 804778a:	f000 fb11 	bl	8047db0 <xQueueGenericCreate>
 804778e:	60f8      	str	r0, [r7, #12]
 8047790:	68fb      	ldr	r3, [r7, #12]
 8047792:	2b00      	cmp	r3, #0
 8047794:	d005      	beq.n	80477a2 <osSemaphoreCreate+0x56>
 8047796:	2300      	movs	r3, #0
 8047798:	2200      	movs	r2, #0
 804779a:	2100      	movs	r1, #0
 804779c:	68f8      	ldr	r0, [r7, #12]
 804779e:	f000 fbb5 	bl	8047f0c <xQueueGenericSend>
      return sema;
 80477a2:	68fb      	ldr	r3, [r7, #12]
 80477a4:	e000      	b.n	80477a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80477a6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80477a8:	4618      	mov	r0, r3
 80477aa:	3710      	adds	r7, #16
 80477ac:	46bd      	mov	sp, r7
 80477ae:	bd80      	pop	{r7, pc}

080477b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80477b0:	b580      	push	{r7, lr}
 80477b2:	b084      	sub	sp, #16
 80477b4:	af00      	add	r7, sp, #0
 80477b6:	6078      	str	r0, [r7, #4]
 80477b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80477ba:	2300      	movs	r3, #0
 80477bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80477be:	687b      	ldr	r3, [r7, #4]
 80477c0:	2b00      	cmp	r3, #0
 80477c2:	d101      	bne.n	80477c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80477c4:	2380      	movs	r3, #128	; 0x80
 80477c6:	e03a      	b.n	804783e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80477c8:	2300      	movs	r3, #0
 80477ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80477cc:	683b      	ldr	r3, [r7, #0]
 80477ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80477d2:	d103      	bne.n	80477dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80477d4:	f04f 33ff 	mov.w	r3, #4294967295
 80477d8:	60fb      	str	r3, [r7, #12]
 80477da:	e009      	b.n	80477f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80477dc:	683b      	ldr	r3, [r7, #0]
 80477de:	2b00      	cmp	r3, #0
 80477e0:	d006      	beq.n	80477f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80477e2:	683b      	ldr	r3, [r7, #0]
 80477e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80477e6:	68fb      	ldr	r3, [r7, #12]
 80477e8:	2b00      	cmp	r3, #0
 80477ea:	d101      	bne.n	80477f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80477ec:	2301      	movs	r3, #1
 80477ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80477f0:	f7ff fe7a 	bl	80474e8 <inHandlerMode>
 80477f4:	4603      	mov	r3, r0
 80477f6:	2b00      	cmp	r3, #0
 80477f8:	d017      	beq.n	804782a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80477fa:	f107 0308 	add.w	r3, r7, #8
 80477fe:	461a      	mov	r2, r3
 8047800:	2100      	movs	r1, #0
 8047802:	6878      	ldr	r0, [r7, #4]
 8047804:	f000 ffb8 	bl	8048778 <xQueueReceiveFromISR>
 8047808:	4603      	mov	r3, r0
 804780a:	2b01      	cmp	r3, #1
 804780c:	d001      	beq.n	8047812 <osSemaphoreWait+0x62>
      return osErrorOS;
 804780e:	23ff      	movs	r3, #255	; 0xff
 8047810:	e015      	b.n	804783e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8047812:	68bb      	ldr	r3, [r7, #8]
 8047814:	2b00      	cmp	r3, #0
 8047816:	d011      	beq.n	804783c <osSemaphoreWait+0x8c>
 8047818:	4b0b      	ldr	r3, [pc, #44]	; (8047848 <osSemaphoreWait+0x98>)
 804781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804781e:	601a      	str	r2, [r3, #0]
 8047820:	f3bf 8f4f 	dsb	sy
 8047824:	f3bf 8f6f 	isb	sy
 8047828:	e008      	b.n	804783c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 804782a:	68f9      	ldr	r1, [r7, #12]
 804782c:	6878      	ldr	r0, [r7, #4]
 804782e:	f000 fe8f 	bl	8048550 <xQueueSemaphoreTake>
 8047832:	4603      	mov	r3, r0
 8047834:	2b01      	cmp	r3, #1
 8047836:	d001      	beq.n	804783c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8047838:	23ff      	movs	r3, #255	; 0xff
 804783a:	e000      	b.n	804783e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 804783c:	2300      	movs	r3, #0
}
 804783e:	4618      	mov	r0, r3
 8047840:	3710      	adds	r7, #16
 8047842:	46bd      	mov	sp, r7
 8047844:	bd80      	pop	{r7, pc}
 8047846:	bf00      	nop
 8047848:	e000ed04 	.word	0xe000ed04

0804784c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 804784c:	b580      	push	{r7, lr}
 804784e:	b084      	sub	sp, #16
 8047850:	af00      	add	r7, sp, #0
 8047852:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8047854:	2300      	movs	r3, #0
 8047856:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8047858:	2300      	movs	r3, #0
 804785a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 804785c:	f7ff fe44 	bl	80474e8 <inHandlerMode>
 8047860:	4603      	mov	r3, r0
 8047862:	2b00      	cmp	r3, #0
 8047864:	d016      	beq.n	8047894 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8047866:	f107 0308 	add.w	r3, r7, #8
 804786a:	4619      	mov	r1, r3
 804786c:	6878      	ldr	r0, [r7, #4]
 804786e:	f000 fcf3 	bl	8048258 <xQueueGiveFromISR>
 8047872:	4603      	mov	r3, r0
 8047874:	2b01      	cmp	r3, #1
 8047876:	d001      	beq.n	804787c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8047878:	23ff      	movs	r3, #255	; 0xff
 804787a:	e017      	b.n	80478ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 804787c:	68bb      	ldr	r3, [r7, #8]
 804787e:	2b00      	cmp	r3, #0
 8047880:	d013      	beq.n	80478aa <osSemaphoreRelease+0x5e>
 8047882:	4b0c      	ldr	r3, [pc, #48]	; (80478b4 <osSemaphoreRelease+0x68>)
 8047884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8047888:	601a      	str	r2, [r3, #0]
 804788a:	f3bf 8f4f 	dsb	sy
 804788e:	f3bf 8f6f 	isb	sy
 8047892:	e00a      	b.n	80478aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8047894:	2300      	movs	r3, #0
 8047896:	2200      	movs	r2, #0
 8047898:	2100      	movs	r1, #0
 804789a:	6878      	ldr	r0, [r7, #4]
 804789c:	f000 fb36 	bl	8047f0c <xQueueGenericSend>
 80478a0:	4603      	mov	r3, r0
 80478a2:	2b01      	cmp	r3, #1
 80478a4:	d001      	beq.n	80478aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80478a6:	23ff      	movs	r3, #255	; 0xff
 80478a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80478aa:	68fb      	ldr	r3, [r7, #12]
}
 80478ac:	4618      	mov	r0, r3
 80478ae:	3710      	adds	r7, #16
 80478b0:	46bd      	mov	sp, r7
 80478b2:	bd80      	pop	{r7, pc}
 80478b4:	e000ed04 	.word	0xe000ed04

080478b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80478b8:	b590      	push	{r4, r7, lr}
 80478ba:	b085      	sub	sp, #20
 80478bc:	af02      	add	r7, sp, #8
 80478be:	6078      	str	r0, [r7, #4]
 80478c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80478c2:	687b      	ldr	r3, [r7, #4]
 80478c4:	689b      	ldr	r3, [r3, #8]
 80478c6:	2b00      	cmp	r3, #0
 80478c8:	d011      	beq.n	80478ee <osMessageCreate+0x36>
 80478ca:	687b      	ldr	r3, [r7, #4]
 80478cc:	68db      	ldr	r3, [r3, #12]
 80478ce:	2b00      	cmp	r3, #0
 80478d0:	d00d      	beq.n	80478ee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80478d2:	687b      	ldr	r3, [r7, #4]
 80478d4:	6818      	ldr	r0, [r3, #0]
 80478d6:	687b      	ldr	r3, [r7, #4]
 80478d8:	6859      	ldr	r1, [r3, #4]
 80478da:	687b      	ldr	r3, [r7, #4]
 80478dc:	689a      	ldr	r2, [r3, #8]
 80478de:	687b      	ldr	r3, [r7, #4]
 80478e0:	68db      	ldr	r3, [r3, #12]
 80478e2:	2400      	movs	r4, #0
 80478e4:	9400      	str	r4, [sp, #0]
 80478e6:	f000 f9e1 	bl	8047cac <xQueueGenericCreateStatic>
 80478ea:	4603      	mov	r3, r0
 80478ec:	e008      	b.n	8047900 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80478ee:	687b      	ldr	r3, [r7, #4]
 80478f0:	6818      	ldr	r0, [r3, #0]
 80478f2:	687b      	ldr	r3, [r7, #4]
 80478f4:	685b      	ldr	r3, [r3, #4]
 80478f6:	2200      	movs	r2, #0
 80478f8:	4619      	mov	r1, r3
 80478fa:	f000 fa59 	bl	8047db0 <xQueueGenericCreate>
 80478fe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8047900:	4618      	mov	r0, r3
 8047902:	370c      	adds	r7, #12
 8047904:	46bd      	mov	sp, r7
 8047906:	bd90      	pop	{r4, r7, pc}

08047908 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8047908:	b580      	push	{r7, lr}
 804790a:	b086      	sub	sp, #24
 804790c:	af00      	add	r7, sp, #0
 804790e:	60f8      	str	r0, [r7, #12]
 8047910:	60b9      	str	r1, [r7, #8]
 8047912:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8047914:	2300      	movs	r3, #0
 8047916:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8047918:	687b      	ldr	r3, [r7, #4]
 804791a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 804791c:	697b      	ldr	r3, [r7, #20]
 804791e:	2b00      	cmp	r3, #0
 8047920:	d101      	bne.n	8047926 <osMessagePut+0x1e>
    ticks = 1;
 8047922:	2301      	movs	r3, #1
 8047924:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8047926:	f7ff fddf 	bl	80474e8 <inHandlerMode>
 804792a:	4603      	mov	r3, r0
 804792c:	2b00      	cmp	r3, #0
 804792e:	d018      	beq.n	8047962 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8047930:	f107 0210 	add.w	r2, r7, #16
 8047934:	f107 0108 	add.w	r1, r7, #8
 8047938:	2300      	movs	r3, #0
 804793a:	68f8      	ldr	r0, [r7, #12]
 804793c:	f000 fbec 	bl	8048118 <xQueueGenericSendFromISR>
 8047940:	4603      	mov	r3, r0
 8047942:	2b01      	cmp	r3, #1
 8047944:	d001      	beq.n	804794a <osMessagePut+0x42>
      return osErrorOS;
 8047946:	23ff      	movs	r3, #255	; 0xff
 8047948:	e018      	b.n	804797c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 804794a:	693b      	ldr	r3, [r7, #16]
 804794c:	2b00      	cmp	r3, #0
 804794e:	d014      	beq.n	804797a <osMessagePut+0x72>
 8047950:	4b0c      	ldr	r3, [pc, #48]	; (8047984 <osMessagePut+0x7c>)
 8047952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8047956:	601a      	str	r2, [r3, #0]
 8047958:	f3bf 8f4f 	dsb	sy
 804795c:	f3bf 8f6f 	isb	sy
 8047960:	e00b      	b.n	804797a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8047962:	f107 0108 	add.w	r1, r7, #8
 8047966:	2300      	movs	r3, #0
 8047968:	697a      	ldr	r2, [r7, #20]
 804796a:	68f8      	ldr	r0, [r7, #12]
 804796c:	f000 face 	bl	8047f0c <xQueueGenericSend>
 8047970:	4603      	mov	r3, r0
 8047972:	2b01      	cmp	r3, #1
 8047974:	d001      	beq.n	804797a <osMessagePut+0x72>
      return osErrorOS;
 8047976:	23ff      	movs	r3, #255	; 0xff
 8047978:	e000      	b.n	804797c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 804797a:	2300      	movs	r3, #0
}
 804797c:	4618      	mov	r0, r3
 804797e:	3718      	adds	r7, #24
 8047980:	46bd      	mov	sp, r7
 8047982:	bd80      	pop	{r7, pc}
 8047984:	e000ed04 	.word	0xe000ed04

08047988 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8047988:	b590      	push	{r4, r7, lr}
 804798a:	b08b      	sub	sp, #44	; 0x2c
 804798c:	af00      	add	r7, sp, #0
 804798e:	60f8      	str	r0, [r7, #12]
 8047990:	60b9      	str	r1, [r7, #8]
 8047992:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8047994:	68bb      	ldr	r3, [r7, #8]
 8047996:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8047998:	2300      	movs	r3, #0
 804799a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 804799c:	68bb      	ldr	r3, [r7, #8]
 804799e:	2b00      	cmp	r3, #0
 80479a0:	d10a      	bne.n	80479b8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80479a2:	2380      	movs	r3, #128	; 0x80
 80479a4:	617b      	str	r3, [r7, #20]
    return event;
 80479a6:	68fb      	ldr	r3, [r7, #12]
 80479a8:	461c      	mov	r4, r3
 80479aa:	f107 0314 	add.w	r3, r7, #20
 80479ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80479b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80479b6:	e054      	b.n	8047a62 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80479b8:	2300      	movs	r3, #0
 80479ba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80479bc:	2300      	movs	r3, #0
 80479be:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80479c0:	687b      	ldr	r3, [r7, #4]
 80479c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80479c6:	d103      	bne.n	80479d0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80479c8:	f04f 33ff 	mov.w	r3, #4294967295
 80479cc:	627b      	str	r3, [r7, #36]	; 0x24
 80479ce:	e009      	b.n	80479e4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80479d0:	687b      	ldr	r3, [r7, #4]
 80479d2:	2b00      	cmp	r3, #0
 80479d4:	d006      	beq.n	80479e4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80479d6:	687b      	ldr	r3, [r7, #4]
 80479d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80479da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80479dc:	2b00      	cmp	r3, #0
 80479de:	d101      	bne.n	80479e4 <osMessageGet+0x5c>
      ticks = 1;
 80479e0:	2301      	movs	r3, #1
 80479e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80479e4:	f7ff fd80 	bl	80474e8 <inHandlerMode>
 80479e8:	4603      	mov	r3, r0
 80479ea:	2b00      	cmp	r3, #0
 80479ec:	d01c      	beq.n	8047a28 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80479ee:	f107 0220 	add.w	r2, r7, #32
 80479f2:	f107 0314 	add.w	r3, r7, #20
 80479f6:	3304      	adds	r3, #4
 80479f8:	4619      	mov	r1, r3
 80479fa:	68b8      	ldr	r0, [r7, #8]
 80479fc:	f000 febc 	bl	8048778 <xQueueReceiveFromISR>
 8047a00:	4603      	mov	r3, r0
 8047a02:	2b01      	cmp	r3, #1
 8047a04:	d102      	bne.n	8047a0c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8047a06:	2310      	movs	r3, #16
 8047a08:	617b      	str	r3, [r7, #20]
 8047a0a:	e001      	b.n	8047a10 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8047a0c:	2300      	movs	r3, #0
 8047a0e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8047a10:	6a3b      	ldr	r3, [r7, #32]
 8047a12:	2b00      	cmp	r3, #0
 8047a14:	d01d      	beq.n	8047a52 <osMessageGet+0xca>
 8047a16:	4b15      	ldr	r3, [pc, #84]	; (8047a6c <osMessageGet+0xe4>)
 8047a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8047a1c:	601a      	str	r2, [r3, #0]
 8047a1e:	f3bf 8f4f 	dsb	sy
 8047a22:	f3bf 8f6f 	isb	sy
 8047a26:	e014      	b.n	8047a52 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8047a28:	f107 0314 	add.w	r3, r7, #20
 8047a2c:	3304      	adds	r3, #4
 8047a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8047a30:	4619      	mov	r1, r3
 8047a32:	68b8      	ldr	r0, [r7, #8]
 8047a34:	f000 fca6 	bl	8048384 <xQueueReceive>
 8047a38:	4603      	mov	r3, r0
 8047a3a:	2b01      	cmp	r3, #1
 8047a3c:	d102      	bne.n	8047a44 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8047a3e:	2310      	movs	r3, #16
 8047a40:	617b      	str	r3, [r7, #20]
 8047a42:	e006      	b.n	8047a52 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8047a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047a46:	2b00      	cmp	r3, #0
 8047a48:	d101      	bne.n	8047a4e <osMessageGet+0xc6>
 8047a4a:	2300      	movs	r3, #0
 8047a4c:	e000      	b.n	8047a50 <osMessageGet+0xc8>
 8047a4e:	2340      	movs	r3, #64	; 0x40
 8047a50:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8047a52:	68fb      	ldr	r3, [r7, #12]
 8047a54:	461c      	mov	r4, r3
 8047a56:	f107 0314 	add.w	r3, r7, #20
 8047a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8047a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8047a62:	68f8      	ldr	r0, [r7, #12]
 8047a64:	372c      	adds	r7, #44	; 0x2c
 8047a66:	46bd      	mov	sp, r7
 8047a68:	bd90      	pop	{r4, r7, pc}
 8047a6a:	bf00      	nop
 8047a6c:	e000ed04 	.word	0xe000ed04

08047a70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8047a70:	b480      	push	{r7}
 8047a72:	b083      	sub	sp, #12
 8047a74:	af00      	add	r7, sp, #0
 8047a76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8047a78:	687b      	ldr	r3, [r7, #4]
 8047a7a:	f103 0208 	add.w	r2, r3, #8
 8047a7e:	687b      	ldr	r3, [r7, #4]
 8047a80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8047a82:	687b      	ldr	r3, [r7, #4]
 8047a84:	f04f 32ff 	mov.w	r2, #4294967295
 8047a88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8047a8a:	687b      	ldr	r3, [r7, #4]
 8047a8c:	f103 0208 	add.w	r2, r3, #8
 8047a90:	687b      	ldr	r3, [r7, #4]
 8047a92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8047a94:	687b      	ldr	r3, [r7, #4]
 8047a96:	f103 0208 	add.w	r2, r3, #8
 8047a9a:	687b      	ldr	r3, [r7, #4]
 8047a9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8047a9e:	687b      	ldr	r3, [r7, #4]
 8047aa0:	2200      	movs	r2, #0
 8047aa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8047aa4:	bf00      	nop
 8047aa6:	370c      	adds	r7, #12
 8047aa8:	46bd      	mov	sp, r7
 8047aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047aae:	4770      	bx	lr

08047ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8047ab0:	b480      	push	{r7}
 8047ab2:	b083      	sub	sp, #12
 8047ab4:	af00      	add	r7, sp, #0
 8047ab6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8047ab8:	687b      	ldr	r3, [r7, #4]
 8047aba:	2200      	movs	r2, #0
 8047abc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8047abe:	bf00      	nop
 8047ac0:	370c      	adds	r7, #12
 8047ac2:	46bd      	mov	sp, r7
 8047ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047ac8:	4770      	bx	lr

08047aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8047aca:	b480      	push	{r7}
 8047acc:	b085      	sub	sp, #20
 8047ace:	af00      	add	r7, sp, #0
 8047ad0:	6078      	str	r0, [r7, #4]
 8047ad2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8047ad4:	687b      	ldr	r3, [r7, #4]
 8047ad6:	685b      	ldr	r3, [r3, #4]
 8047ad8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8047ada:	683b      	ldr	r3, [r7, #0]
 8047adc:	68fa      	ldr	r2, [r7, #12]
 8047ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8047ae0:	68fb      	ldr	r3, [r7, #12]
 8047ae2:	689a      	ldr	r2, [r3, #8]
 8047ae4:	683b      	ldr	r3, [r7, #0]
 8047ae6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8047ae8:	68fb      	ldr	r3, [r7, #12]
 8047aea:	689b      	ldr	r3, [r3, #8]
 8047aec:	683a      	ldr	r2, [r7, #0]
 8047aee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8047af0:	68fb      	ldr	r3, [r7, #12]
 8047af2:	683a      	ldr	r2, [r7, #0]
 8047af4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8047af6:	683b      	ldr	r3, [r7, #0]
 8047af8:	687a      	ldr	r2, [r7, #4]
 8047afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8047afc:	687b      	ldr	r3, [r7, #4]
 8047afe:	681b      	ldr	r3, [r3, #0]
 8047b00:	1c5a      	adds	r2, r3, #1
 8047b02:	687b      	ldr	r3, [r7, #4]
 8047b04:	601a      	str	r2, [r3, #0]
}
 8047b06:	bf00      	nop
 8047b08:	3714      	adds	r7, #20
 8047b0a:	46bd      	mov	sp, r7
 8047b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047b10:	4770      	bx	lr

08047b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8047b12:	b480      	push	{r7}
 8047b14:	b085      	sub	sp, #20
 8047b16:	af00      	add	r7, sp, #0
 8047b18:	6078      	str	r0, [r7, #4]
 8047b1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8047b1c:	683b      	ldr	r3, [r7, #0]
 8047b1e:	681b      	ldr	r3, [r3, #0]
 8047b20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8047b22:	68bb      	ldr	r3, [r7, #8]
 8047b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047b28:	d103      	bne.n	8047b32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8047b2a:	687b      	ldr	r3, [r7, #4]
 8047b2c:	691b      	ldr	r3, [r3, #16]
 8047b2e:	60fb      	str	r3, [r7, #12]
 8047b30:	e00c      	b.n	8047b4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8047b32:	687b      	ldr	r3, [r7, #4]
 8047b34:	3308      	adds	r3, #8
 8047b36:	60fb      	str	r3, [r7, #12]
 8047b38:	e002      	b.n	8047b40 <vListInsert+0x2e>
 8047b3a:	68fb      	ldr	r3, [r7, #12]
 8047b3c:	685b      	ldr	r3, [r3, #4]
 8047b3e:	60fb      	str	r3, [r7, #12]
 8047b40:	68fb      	ldr	r3, [r7, #12]
 8047b42:	685b      	ldr	r3, [r3, #4]
 8047b44:	681b      	ldr	r3, [r3, #0]
 8047b46:	68ba      	ldr	r2, [r7, #8]
 8047b48:	429a      	cmp	r2, r3
 8047b4a:	d2f6      	bcs.n	8047b3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8047b4c:	68fb      	ldr	r3, [r7, #12]
 8047b4e:	685a      	ldr	r2, [r3, #4]
 8047b50:	683b      	ldr	r3, [r7, #0]
 8047b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8047b54:	683b      	ldr	r3, [r7, #0]
 8047b56:	685b      	ldr	r3, [r3, #4]
 8047b58:	683a      	ldr	r2, [r7, #0]
 8047b5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8047b5c:	683b      	ldr	r3, [r7, #0]
 8047b5e:	68fa      	ldr	r2, [r7, #12]
 8047b60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8047b62:	68fb      	ldr	r3, [r7, #12]
 8047b64:	683a      	ldr	r2, [r7, #0]
 8047b66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8047b68:	683b      	ldr	r3, [r7, #0]
 8047b6a:	687a      	ldr	r2, [r7, #4]
 8047b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8047b6e:	687b      	ldr	r3, [r7, #4]
 8047b70:	681b      	ldr	r3, [r3, #0]
 8047b72:	1c5a      	adds	r2, r3, #1
 8047b74:	687b      	ldr	r3, [r7, #4]
 8047b76:	601a      	str	r2, [r3, #0]
}
 8047b78:	bf00      	nop
 8047b7a:	3714      	adds	r7, #20
 8047b7c:	46bd      	mov	sp, r7
 8047b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047b82:	4770      	bx	lr

08047b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8047b84:	b480      	push	{r7}
 8047b86:	b085      	sub	sp, #20
 8047b88:	af00      	add	r7, sp, #0
 8047b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8047b8c:	687b      	ldr	r3, [r7, #4]
 8047b8e:	691b      	ldr	r3, [r3, #16]
 8047b90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8047b92:	687b      	ldr	r3, [r7, #4]
 8047b94:	685b      	ldr	r3, [r3, #4]
 8047b96:	687a      	ldr	r2, [r7, #4]
 8047b98:	6892      	ldr	r2, [r2, #8]
 8047b9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8047b9c:	687b      	ldr	r3, [r7, #4]
 8047b9e:	689b      	ldr	r3, [r3, #8]
 8047ba0:	687a      	ldr	r2, [r7, #4]
 8047ba2:	6852      	ldr	r2, [r2, #4]
 8047ba4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8047ba6:	68fb      	ldr	r3, [r7, #12]
 8047ba8:	685b      	ldr	r3, [r3, #4]
 8047baa:	687a      	ldr	r2, [r7, #4]
 8047bac:	429a      	cmp	r2, r3
 8047bae:	d103      	bne.n	8047bb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8047bb0:	687b      	ldr	r3, [r7, #4]
 8047bb2:	689a      	ldr	r2, [r3, #8]
 8047bb4:	68fb      	ldr	r3, [r7, #12]
 8047bb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8047bb8:	687b      	ldr	r3, [r7, #4]
 8047bba:	2200      	movs	r2, #0
 8047bbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8047bbe:	68fb      	ldr	r3, [r7, #12]
 8047bc0:	681b      	ldr	r3, [r3, #0]
 8047bc2:	1e5a      	subs	r2, r3, #1
 8047bc4:	68fb      	ldr	r3, [r7, #12]
 8047bc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8047bc8:	68fb      	ldr	r3, [r7, #12]
 8047bca:	681b      	ldr	r3, [r3, #0]
}
 8047bcc:	4618      	mov	r0, r3
 8047bce:	3714      	adds	r7, #20
 8047bd0:	46bd      	mov	sp, r7
 8047bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047bd6:	4770      	bx	lr

08047bd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8047bd8:	b580      	push	{r7, lr}
 8047bda:	b084      	sub	sp, #16
 8047bdc:	af00      	add	r7, sp, #0
 8047bde:	6078      	str	r0, [r7, #4]
 8047be0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8047be2:	687b      	ldr	r3, [r7, #4]
 8047be4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8047be6:	68fb      	ldr	r3, [r7, #12]
 8047be8:	2b00      	cmp	r3, #0
 8047bea:	d10c      	bne.n	8047c06 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8047bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047bf0:	b672      	cpsid	i
 8047bf2:	f383 8811 	msr	BASEPRI, r3
 8047bf6:	f3bf 8f6f 	isb	sy
 8047bfa:	f3bf 8f4f 	dsb	sy
 8047bfe:	b662      	cpsie	i
 8047c00:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8047c02:	bf00      	nop
 8047c04:	e7fe      	b.n	8047c04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8047c06:	f002 f971 	bl	8049eec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8047c0a:	68fb      	ldr	r3, [r7, #12]
 8047c0c:	681a      	ldr	r2, [r3, #0]
 8047c0e:	68fb      	ldr	r3, [r7, #12]
 8047c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8047c12:	68f9      	ldr	r1, [r7, #12]
 8047c14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8047c16:	fb01 f303 	mul.w	r3, r1, r3
 8047c1a:	441a      	add	r2, r3
 8047c1c:	68fb      	ldr	r3, [r7, #12]
 8047c1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8047c20:	68fb      	ldr	r3, [r7, #12]
 8047c22:	2200      	movs	r2, #0
 8047c24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8047c26:	68fb      	ldr	r3, [r7, #12]
 8047c28:	681a      	ldr	r2, [r3, #0]
 8047c2a:	68fb      	ldr	r3, [r7, #12]
 8047c2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8047c2e:	68fb      	ldr	r3, [r7, #12]
 8047c30:	681a      	ldr	r2, [r3, #0]
 8047c32:	68fb      	ldr	r3, [r7, #12]
 8047c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8047c36:	3b01      	subs	r3, #1
 8047c38:	68f9      	ldr	r1, [r7, #12]
 8047c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8047c3c:	fb01 f303 	mul.w	r3, r1, r3
 8047c40:	441a      	add	r2, r3
 8047c42:	68fb      	ldr	r3, [r7, #12]
 8047c44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8047c46:	68fb      	ldr	r3, [r7, #12]
 8047c48:	22ff      	movs	r2, #255	; 0xff
 8047c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8047c4e:	68fb      	ldr	r3, [r7, #12]
 8047c50:	22ff      	movs	r2, #255	; 0xff
 8047c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8047c56:	683b      	ldr	r3, [r7, #0]
 8047c58:	2b00      	cmp	r3, #0
 8047c5a:	d114      	bne.n	8047c86 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8047c5c:	68fb      	ldr	r3, [r7, #12]
 8047c5e:	691b      	ldr	r3, [r3, #16]
 8047c60:	2b00      	cmp	r3, #0
 8047c62:	d01a      	beq.n	8047c9a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8047c64:	68fb      	ldr	r3, [r7, #12]
 8047c66:	3310      	adds	r3, #16
 8047c68:	4618      	mov	r0, r3
 8047c6a:	f001 fc2d 	bl	80494c8 <xTaskRemoveFromEventList>
 8047c6e:	4603      	mov	r3, r0
 8047c70:	2b00      	cmp	r3, #0
 8047c72:	d012      	beq.n	8047c9a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8047c74:	4b0c      	ldr	r3, [pc, #48]	; (8047ca8 <xQueueGenericReset+0xd0>)
 8047c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8047c7a:	601a      	str	r2, [r3, #0]
 8047c7c:	f3bf 8f4f 	dsb	sy
 8047c80:	f3bf 8f6f 	isb	sy
 8047c84:	e009      	b.n	8047c9a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8047c86:	68fb      	ldr	r3, [r7, #12]
 8047c88:	3310      	adds	r3, #16
 8047c8a:	4618      	mov	r0, r3
 8047c8c:	f7ff fef0 	bl	8047a70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8047c90:	68fb      	ldr	r3, [r7, #12]
 8047c92:	3324      	adds	r3, #36	; 0x24
 8047c94:	4618      	mov	r0, r3
 8047c96:	f7ff feeb 	bl	8047a70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8047c9a:	f002 f95b 	bl	8049f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8047c9e:	2301      	movs	r3, #1
}
 8047ca0:	4618      	mov	r0, r3
 8047ca2:	3710      	adds	r7, #16
 8047ca4:	46bd      	mov	sp, r7
 8047ca6:	bd80      	pop	{r7, pc}
 8047ca8:	e000ed04 	.word	0xe000ed04

08047cac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8047cac:	b580      	push	{r7, lr}
 8047cae:	b08e      	sub	sp, #56	; 0x38
 8047cb0:	af02      	add	r7, sp, #8
 8047cb2:	60f8      	str	r0, [r7, #12]
 8047cb4:	60b9      	str	r1, [r7, #8]
 8047cb6:	607a      	str	r2, [r7, #4]
 8047cb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8047cba:	68fb      	ldr	r3, [r7, #12]
 8047cbc:	2b00      	cmp	r3, #0
 8047cbe:	d10c      	bne.n	8047cda <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8047cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047cc4:	b672      	cpsid	i
 8047cc6:	f383 8811 	msr	BASEPRI, r3
 8047cca:	f3bf 8f6f 	isb	sy
 8047cce:	f3bf 8f4f 	dsb	sy
 8047cd2:	b662      	cpsie	i
 8047cd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8047cd6:	bf00      	nop
 8047cd8:	e7fe      	b.n	8047cd8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8047cda:	683b      	ldr	r3, [r7, #0]
 8047cdc:	2b00      	cmp	r3, #0
 8047cde:	d10c      	bne.n	8047cfa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8047ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047ce4:	b672      	cpsid	i
 8047ce6:	f383 8811 	msr	BASEPRI, r3
 8047cea:	f3bf 8f6f 	isb	sy
 8047cee:	f3bf 8f4f 	dsb	sy
 8047cf2:	b662      	cpsie	i
 8047cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8047cf6:	bf00      	nop
 8047cf8:	e7fe      	b.n	8047cf8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8047cfa:	687b      	ldr	r3, [r7, #4]
 8047cfc:	2b00      	cmp	r3, #0
 8047cfe:	d002      	beq.n	8047d06 <xQueueGenericCreateStatic+0x5a>
 8047d00:	68bb      	ldr	r3, [r7, #8]
 8047d02:	2b00      	cmp	r3, #0
 8047d04:	d001      	beq.n	8047d0a <xQueueGenericCreateStatic+0x5e>
 8047d06:	2301      	movs	r3, #1
 8047d08:	e000      	b.n	8047d0c <xQueueGenericCreateStatic+0x60>
 8047d0a:	2300      	movs	r3, #0
 8047d0c:	2b00      	cmp	r3, #0
 8047d0e:	d10c      	bne.n	8047d2a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8047d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047d14:	b672      	cpsid	i
 8047d16:	f383 8811 	msr	BASEPRI, r3
 8047d1a:	f3bf 8f6f 	isb	sy
 8047d1e:	f3bf 8f4f 	dsb	sy
 8047d22:	b662      	cpsie	i
 8047d24:	623b      	str	r3, [r7, #32]
}
 8047d26:	bf00      	nop
 8047d28:	e7fe      	b.n	8047d28 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8047d2a:	687b      	ldr	r3, [r7, #4]
 8047d2c:	2b00      	cmp	r3, #0
 8047d2e:	d102      	bne.n	8047d36 <xQueueGenericCreateStatic+0x8a>
 8047d30:	68bb      	ldr	r3, [r7, #8]
 8047d32:	2b00      	cmp	r3, #0
 8047d34:	d101      	bne.n	8047d3a <xQueueGenericCreateStatic+0x8e>
 8047d36:	2301      	movs	r3, #1
 8047d38:	e000      	b.n	8047d3c <xQueueGenericCreateStatic+0x90>
 8047d3a:	2300      	movs	r3, #0
 8047d3c:	2b00      	cmp	r3, #0
 8047d3e:	d10c      	bne.n	8047d5a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8047d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047d44:	b672      	cpsid	i
 8047d46:	f383 8811 	msr	BASEPRI, r3
 8047d4a:	f3bf 8f6f 	isb	sy
 8047d4e:	f3bf 8f4f 	dsb	sy
 8047d52:	b662      	cpsie	i
 8047d54:	61fb      	str	r3, [r7, #28]
}
 8047d56:	bf00      	nop
 8047d58:	e7fe      	b.n	8047d58 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8047d5a:	2348      	movs	r3, #72	; 0x48
 8047d5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8047d5e:	697b      	ldr	r3, [r7, #20]
 8047d60:	2b48      	cmp	r3, #72	; 0x48
 8047d62:	d00c      	beq.n	8047d7e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8047d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047d68:	b672      	cpsid	i
 8047d6a:	f383 8811 	msr	BASEPRI, r3
 8047d6e:	f3bf 8f6f 	isb	sy
 8047d72:	f3bf 8f4f 	dsb	sy
 8047d76:	b662      	cpsie	i
 8047d78:	61bb      	str	r3, [r7, #24]
}
 8047d7a:	bf00      	nop
 8047d7c:	e7fe      	b.n	8047d7c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8047d7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8047d80:	683b      	ldr	r3, [r7, #0]
 8047d82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8047d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047d86:	2b00      	cmp	r3, #0
 8047d88:	d00d      	beq.n	8047da6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8047d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047d8c:	2201      	movs	r2, #1
 8047d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8047d92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8047d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047d98:	9300      	str	r3, [sp, #0]
 8047d9a:	4613      	mov	r3, r2
 8047d9c:	687a      	ldr	r2, [r7, #4]
 8047d9e:	68b9      	ldr	r1, [r7, #8]
 8047da0:	68f8      	ldr	r0, [r7, #12]
 8047da2:	f000 f847 	bl	8047e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8047da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8047da8:	4618      	mov	r0, r3
 8047daa:	3730      	adds	r7, #48	; 0x30
 8047dac:	46bd      	mov	sp, r7
 8047dae:	bd80      	pop	{r7, pc}

08047db0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8047db0:	b580      	push	{r7, lr}
 8047db2:	b08a      	sub	sp, #40	; 0x28
 8047db4:	af02      	add	r7, sp, #8
 8047db6:	60f8      	str	r0, [r7, #12]
 8047db8:	60b9      	str	r1, [r7, #8]
 8047dba:	4613      	mov	r3, r2
 8047dbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8047dbe:	68fb      	ldr	r3, [r7, #12]
 8047dc0:	2b00      	cmp	r3, #0
 8047dc2:	d10c      	bne.n	8047dde <xQueueGenericCreate+0x2e>
	__asm volatile
 8047dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047dc8:	b672      	cpsid	i
 8047dca:	f383 8811 	msr	BASEPRI, r3
 8047dce:	f3bf 8f6f 	isb	sy
 8047dd2:	f3bf 8f4f 	dsb	sy
 8047dd6:	b662      	cpsie	i
 8047dd8:	613b      	str	r3, [r7, #16]
}
 8047dda:	bf00      	nop
 8047ddc:	e7fe      	b.n	8047ddc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8047dde:	68bb      	ldr	r3, [r7, #8]
 8047de0:	2b00      	cmp	r3, #0
 8047de2:	d102      	bne.n	8047dea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8047de4:	2300      	movs	r3, #0
 8047de6:	61fb      	str	r3, [r7, #28]
 8047de8:	e004      	b.n	8047df4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8047dea:	68fb      	ldr	r3, [r7, #12]
 8047dec:	68ba      	ldr	r2, [r7, #8]
 8047dee:	fb02 f303 	mul.w	r3, r2, r3
 8047df2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8047df4:	69fb      	ldr	r3, [r7, #28]
 8047df6:	3348      	adds	r3, #72	; 0x48
 8047df8:	4618      	mov	r0, r3
 8047dfa:	f002 f9a3 	bl	804a144 <pvPortMalloc>
 8047dfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8047e00:	69bb      	ldr	r3, [r7, #24]
 8047e02:	2b00      	cmp	r3, #0
 8047e04:	d011      	beq.n	8047e2a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8047e06:	69bb      	ldr	r3, [r7, #24]
 8047e08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8047e0a:	697b      	ldr	r3, [r7, #20]
 8047e0c:	3348      	adds	r3, #72	; 0x48
 8047e0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8047e10:	69bb      	ldr	r3, [r7, #24]
 8047e12:	2200      	movs	r2, #0
 8047e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8047e18:	79fa      	ldrb	r2, [r7, #7]
 8047e1a:	69bb      	ldr	r3, [r7, #24]
 8047e1c:	9300      	str	r3, [sp, #0]
 8047e1e:	4613      	mov	r3, r2
 8047e20:	697a      	ldr	r2, [r7, #20]
 8047e22:	68b9      	ldr	r1, [r7, #8]
 8047e24:	68f8      	ldr	r0, [r7, #12]
 8047e26:	f000 f805 	bl	8047e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8047e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8047e2c:	4618      	mov	r0, r3
 8047e2e:	3720      	adds	r7, #32
 8047e30:	46bd      	mov	sp, r7
 8047e32:	bd80      	pop	{r7, pc}

08047e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8047e34:	b580      	push	{r7, lr}
 8047e36:	b084      	sub	sp, #16
 8047e38:	af00      	add	r7, sp, #0
 8047e3a:	60f8      	str	r0, [r7, #12]
 8047e3c:	60b9      	str	r1, [r7, #8]
 8047e3e:	607a      	str	r2, [r7, #4]
 8047e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8047e42:	68bb      	ldr	r3, [r7, #8]
 8047e44:	2b00      	cmp	r3, #0
 8047e46:	d103      	bne.n	8047e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8047e48:	69bb      	ldr	r3, [r7, #24]
 8047e4a:	69ba      	ldr	r2, [r7, #24]
 8047e4c:	601a      	str	r2, [r3, #0]
 8047e4e:	e002      	b.n	8047e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8047e50:	69bb      	ldr	r3, [r7, #24]
 8047e52:	687a      	ldr	r2, [r7, #4]
 8047e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8047e56:	69bb      	ldr	r3, [r7, #24]
 8047e58:	68fa      	ldr	r2, [r7, #12]
 8047e5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8047e5c:	69bb      	ldr	r3, [r7, #24]
 8047e5e:	68ba      	ldr	r2, [r7, #8]
 8047e60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8047e62:	2101      	movs	r1, #1
 8047e64:	69b8      	ldr	r0, [r7, #24]
 8047e66:	f7ff feb7 	bl	8047bd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8047e6a:	bf00      	nop
 8047e6c:	3710      	adds	r7, #16
 8047e6e:	46bd      	mov	sp, r7
 8047e70:	bd80      	pop	{r7, pc}

08047e72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8047e72:	b580      	push	{r7, lr}
 8047e74:	b082      	sub	sp, #8
 8047e76:	af00      	add	r7, sp, #0
 8047e78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8047e7a:	687b      	ldr	r3, [r7, #4]
 8047e7c:	2b00      	cmp	r3, #0
 8047e7e:	d00e      	beq.n	8047e9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8047e80:	687b      	ldr	r3, [r7, #4]
 8047e82:	2200      	movs	r2, #0
 8047e84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8047e86:	687b      	ldr	r3, [r7, #4]
 8047e88:	2200      	movs	r2, #0
 8047e8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8047e8c:	687b      	ldr	r3, [r7, #4]
 8047e8e:	2200      	movs	r2, #0
 8047e90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8047e92:	2300      	movs	r3, #0
 8047e94:	2200      	movs	r2, #0
 8047e96:	2100      	movs	r1, #0
 8047e98:	6878      	ldr	r0, [r7, #4]
 8047e9a:	f000 f837 	bl	8047f0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8047e9e:	bf00      	nop
 8047ea0:	3708      	adds	r7, #8
 8047ea2:	46bd      	mov	sp, r7
 8047ea4:	bd80      	pop	{r7, pc}

08047ea6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8047ea6:	b580      	push	{r7, lr}
 8047ea8:	b086      	sub	sp, #24
 8047eaa:	af00      	add	r7, sp, #0
 8047eac:	4603      	mov	r3, r0
 8047eae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8047eb0:	2301      	movs	r3, #1
 8047eb2:	617b      	str	r3, [r7, #20]
 8047eb4:	2300      	movs	r3, #0
 8047eb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8047eb8:	79fb      	ldrb	r3, [r7, #7]
 8047eba:	461a      	mov	r2, r3
 8047ebc:	6939      	ldr	r1, [r7, #16]
 8047ebe:	6978      	ldr	r0, [r7, #20]
 8047ec0:	f7ff ff76 	bl	8047db0 <xQueueGenericCreate>
 8047ec4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8047ec6:	68f8      	ldr	r0, [r7, #12]
 8047ec8:	f7ff ffd3 	bl	8047e72 <prvInitialiseMutex>

		return xNewQueue;
 8047ecc:	68fb      	ldr	r3, [r7, #12]
	}
 8047ece:	4618      	mov	r0, r3
 8047ed0:	3718      	adds	r7, #24
 8047ed2:	46bd      	mov	sp, r7
 8047ed4:	bd80      	pop	{r7, pc}

08047ed6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8047ed6:	b580      	push	{r7, lr}
 8047ed8:	b088      	sub	sp, #32
 8047eda:	af02      	add	r7, sp, #8
 8047edc:	4603      	mov	r3, r0
 8047ede:	6039      	str	r1, [r7, #0]
 8047ee0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8047ee2:	2301      	movs	r3, #1
 8047ee4:	617b      	str	r3, [r7, #20]
 8047ee6:	2300      	movs	r3, #0
 8047ee8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8047eea:	79fb      	ldrb	r3, [r7, #7]
 8047eec:	9300      	str	r3, [sp, #0]
 8047eee:	683b      	ldr	r3, [r7, #0]
 8047ef0:	2200      	movs	r2, #0
 8047ef2:	6939      	ldr	r1, [r7, #16]
 8047ef4:	6978      	ldr	r0, [r7, #20]
 8047ef6:	f7ff fed9 	bl	8047cac <xQueueGenericCreateStatic>
 8047efa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8047efc:	68f8      	ldr	r0, [r7, #12]
 8047efe:	f7ff ffb8 	bl	8047e72 <prvInitialiseMutex>

		return xNewQueue;
 8047f02:	68fb      	ldr	r3, [r7, #12]
	}
 8047f04:	4618      	mov	r0, r3
 8047f06:	3718      	adds	r7, #24
 8047f08:	46bd      	mov	sp, r7
 8047f0a:	bd80      	pop	{r7, pc}

08047f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8047f0c:	b580      	push	{r7, lr}
 8047f0e:	b08e      	sub	sp, #56	; 0x38
 8047f10:	af00      	add	r7, sp, #0
 8047f12:	60f8      	str	r0, [r7, #12]
 8047f14:	60b9      	str	r1, [r7, #8]
 8047f16:	607a      	str	r2, [r7, #4]
 8047f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8047f1a:	2300      	movs	r3, #0
 8047f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8047f1e:	68fb      	ldr	r3, [r7, #12]
 8047f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8047f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047f24:	2b00      	cmp	r3, #0
 8047f26:	d10c      	bne.n	8047f42 <xQueueGenericSend+0x36>
	__asm volatile
 8047f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047f2c:	b672      	cpsid	i
 8047f2e:	f383 8811 	msr	BASEPRI, r3
 8047f32:	f3bf 8f6f 	isb	sy
 8047f36:	f3bf 8f4f 	dsb	sy
 8047f3a:	b662      	cpsie	i
 8047f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8047f3e:	bf00      	nop
 8047f40:	e7fe      	b.n	8047f40 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8047f42:	68bb      	ldr	r3, [r7, #8]
 8047f44:	2b00      	cmp	r3, #0
 8047f46:	d103      	bne.n	8047f50 <xQueueGenericSend+0x44>
 8047f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047f4c:	2b00      	cmp	r3, #0
 8047f4e:	d101      	bne.n	8047f54 <xQueueGenericSend+0x48>
 8047f50:	2301      	movs	r3, #1
 8047f52:	e000      	b.n	8047f56 <xQueueGenericSend+0x4a>
 8047f54:	2300      	movs	r3, #0
 8047f56:	2b00      	cmp	r3, #0
 8047f58:	d10c      	bne.n	8047f74 <xQueueGenericSend+0x68>
	__asm volatile
 8047f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047f5e:	b672      	cpsid	i
 8047f60:	f383 8811 	msr	BASEPRI, r3
 8047f64:	f3bf 8f6f 	isb	sy
 8047f68:	f3bf 8f4f 	dsb	sy
 8047f6c:	b662      	cpsie	i
 8047f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8047f70:	bf00      	nop
 8047f72:	e7fe      	b.n	8047f72 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8047f74:	683b      	ldr	r3, [r7, #0]
 8047f76:	2b02      	cmp	r3, #2
 8047f78:	d103      	bne.n	8047f82 <xQueueGenericSend+0x76>
 8047f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8047f7e:	2b01      	cmp	r3, #1
 8047f80:	d101      	bne.n	8047f86 <xQueueGenericSend+0x7a>
 8047f82:	2301      	movs	r3, #1
 8047f84:	e000      	b.n	8047f88 <xQueueGenericSend+0x7c>
 8047f86:	2300      	movs	r3, #0
 8047f88:	2b00      	cmp	r3, #0
 8047f8a:	d10c      	bne.n	8047fa6 <xQueueGenericSend+0x9a>
	__asm volatile
 8047f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047f90:	b672      	cpsid	i
 8047f92:	f383 8811 	msr	BASEPRI, r3
 8047f96:	f3bf 8f6f 	isb	sy
 8047f9a:	f3bf 8f4f 	dsb	sy
 8047f9e:	b662      	cpsie	i
 8047fa0:	623b      	str	r3, [r7, #32]
}
 8047fa2:	bf00      	nop
 8047fa4:	e7fe      	b.n	8047fa4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8047fa6:	f001 fc57 	bl	8049858 <xTaskGetSchedulerState>
 8047faa:	4603      	mov	r3, r0
 8047fac:	2b00      	cmp	r3, #0
 8047fae:	d102      	bne.n	8047fb6 <xQueueGenericSend+0xaa>
 8047fb0:	687b      	ldr	r3, [r7, #4]
 8047fb2:	2b00      	cmp	r3, #0
 8047fb4:	d101      	bne.n	8047fba <xQueueGenericSend+0xae>
 8047fb6:	2301      	movs	r3, #1
 8047fb8:	e000      	b.n	8047fbc <xQueueGenericSend+0xb0>
 8047fba:	2300      	movs	r3, #0
 8047fbc:	2b00      	cmp	r3, #0
 8047fbe:	d10c      	bne.n	8047fda <xQueueGenericSend+0xce>
	__asm volatile
 8047fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8047fc4:	b672      	cpsid	i
 8047fc6:	f383 8811 	msr	BASEPRI, r3
 8047fca:	f3bf 8f6f 	isb	sy
 8047fce:	f3bf 8f4f 	dsb	sy
 8047fd2:	b662      	cpsie	i
 8047fd4:	61fb      	str	r3, [r7, #28]
}
 8047fd6:	bf00      	nop
 8047fd8:	e7fe      	b.n	8047fd8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8047fda:	f001 ff87 	bl	8049eec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8047fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8047fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8047fe6:	429a      	cmp	r2, r3
 8047fe8:	d302      	bcc.n	8047ff0 <xQueueGenericSend+0xe4>
 8047fea:	683b      	ldr	r3, [r7, #0]
 8047fec:	2b02      	cmp	r3, #2
 8047fee:	d129      	bne.n	8048044 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8047ff0:	683a      	ldr	r2, [r7, #0]
 8047ff2:	68b9      	ldr	r1, [r7, #8]
 8047ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8047ff6:	f000 fc5d 	bl	80488b4 <prvCopyDataToQueue>
 8047ffa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8047ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048000:	2b00      	cmp	r3, #0
 8048002:	d010      	beq.n	8048026 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8048004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048006:	3324      	adds	r3, #36	; 0x24
 8048008:	4618      	mov	r0, r3
 804800a:	f001 fa5d 	bl	80494c8 <xTaskRemoveFromEventList>
 804800e:	4603      	mov	r3, r0
 8048010:	2b00      	cmp	r3, #0
 8048012:	d013      	beq.n	804803c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8048014:	4b3f      	ldr	r3, [pc, #252]	; (8048114 <xQueueGenericSend+0x208>)
 8048016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804801a:	601a      	str	r2, [r3, #0]
 804801c:	f3bf 8f4f 	dsb	sy
 8048020:	f3bf 8f6f 	isb	sy
 8048024:	e00a      	b.n	804803c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8048026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048028:	2b00      	cmp	r3, #0
 804802a:	d007      	beq.n	804803c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 804802c:	4b39      	ldr	r3, [pc, #228]	; (8048114 <xQueueGenericSend+0x208>)
 804802e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048032:	601a      	str	r2, [r3, #0]
 8048034:	f3bf 8f4f 	dsb	sy
 8048038:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 804803c:	f001 ff8a 	bl	8049f54 <vPortExitCritical>
				return pdPASS;
 8048040:	2301      	movs	r3, #1
 8048042:	e063      	b.n	804810c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8048044:	687b      	ldr	r3, [r7, #4]
 8048046:	2b00      	cmp	r3, #0
 8048048:	d103      	bne.n	8048052 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 804804a:	f001 ff83 	bl	8049f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 804804e:	2300      	movs	r3, #0
 8048050:	e05c      	b.n	804810c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8048052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8048054:	2b00      	cmp	r3, #0
 8048056:	d106      	bne.n	8048066 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8048058:	f107 0314 	add.w	r3, r7, #20
 804805c:	4618      	mov	r0, r3
 804805e:	f001 fa97 	bl	8049590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8048062:	2301      	movs	r3, #1
 8048064:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8048066:	f001 ff75 	bl	8049f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 804806a:	f001 f81b 	bl	80490a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 804806e:	f001 ff3d 	bl	8049eec <vPortEnterCritical>
 8048072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048074:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8048078:	b25b      	sxtb	r3, r3
 804807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804807e:	d103      	bne.n	8048088 <xQueueGenericSend+0x17c>
 8048080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048082:	2200      	movs	r2, #0
 8048084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8048088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804808a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 804808e:	b25b      	sxtb	r3, r3
 8048090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048094:	d103      	bne.n	804809e <xQueueGenericSend+0x192>
 8048096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048098:	2200      	movs	r2, #0
 804809a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 804809e:	f001 ff59 	bl	8049f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80480a2:	1d3a      	adds	r2, r7, #4
 80480a4:	f107 0314 	add.w	r3, r7, #20
 80480a8:	4611      	mov	r1, r2
 80480aa:	4618      	mov	r0, r3
 80480ac:	f001 fa86 	bl	80495bc <xTaskCheckForTimeOut>
 80480b0:	4603      	mov	r3, r0
 80480b2:	2b00      	cmp	r3, #0
 80480b4:	d124      	bne.n	8048100 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80480b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80480b8:	f000 fcf4 	bl	8048aa4 <prvIsQueueFull>
 80480bc:	4603      	mov	r3, r0
 80480be:	2b00      	cmp	r3, #0
 80480c0:	d018      	beq.n	80480f4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80480c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80480c4:	3310      	adds	r3, #16
 80480c6:	687a      	ldr	r2, [r7, #4]
 80480c8:	4611      	mov	r1, r2
 80480ca:	4618      	mov	r0, r3
 80480cc:	f001 f9d6 	bl	804947c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80480d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80480d2:	f000 fc7f 	bl	80489d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80480d6:	f000 fff3 	bl	80490c0 <xTaskResumeAll>
 80480da:	4603      	mov	r3, r0
 80480dc:	2b00      	cmp	r3, #0
 80480de:	f47f af7c 	bne.w	8047fda <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80480e2:	4b0c      	ldr	r3, [pc, #48]	; (8048114 <xQueueGenericSend+0x208>)
 80480e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80480e8:	601a      	str	r2, [r3, #0]
 80480ea:	f3bf 8f4f 	dsb	sy
 80480ee:	f3bf 8f6f 	isb	sy
 80480f2:	e772      	b.n	8047fda <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80480f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80480f6:	f000 fc6d 	bl	80489d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80480fa:	f000 ffe1 	bl	80490c0 <xTaskResumeAll>
 80480fe:	e76c      	b.n	8047fda <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8048100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8048102:	f000 fc67 	bl	80489d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8048106:	f000 ffdb 	bl	80490c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 804810a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 804810c:	4618      	mov	r0, r3
 804810e:	3738      	adds	r7, #56	; 0x38
 8048110:	46bd      	mov	sp, r7
 8048112:	bd80      	pop	{r7, pc}
 8048114:	e000ed04 	.word	0xe000ed04

08048118 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8048118:	b580      	push	{r7, lr}
 804811a:	b08e      	sub	sp, #56	; 0x38
 804811c:	af00      	add	r7, sp, #0
 804811e:	60f8      	str	r0, [r7, #12]
 8048120:	60b9      	str	r1, [r7, #8]
 8048122:	607a      	str	r2, [r7, #4]
 8048124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8048126:	68fb      	ldr	r3, [r7, #12]
 8048128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 804812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804812c:	2b00      	cmp	r3, #0
 804812e:	d10c      	bne.n	804814a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8048130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048134:	b672      	cpsid	i
 8048136:	f383 8811 	msr	BASEPRI, r3
 804813a:	f3bf 8f6f 	isb	sy
 804813e:	f3bf 8f4f 	dsb	sy
 8048142:	b662      	cpsie	i
 8048144:	627b      	str	r3, [r7, #36]	; 0x24
}
 8048146:	bf00      	nop
 8048148:	e7fe      	b.n	8048148 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 804814a:	68bb      	ldr	r3, [r7, #8]
 804814c:	2b00      	cmp	r3, #0
 804814e:	d103      	bne.n	8048158 <xQueueGenericSendFromISR+0x40>
 8048150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048154:	2b00      	cmp	r3, #0
 8048156:	d101      	bne.n	804815c <xQueueGenericSendFromISR+0x44>
 8048158:	2301      	movs	r3, #1
 804815a:	e000      	b.n	804815e <xQueueGenericSendFromISR+0x46>
 804815c:	2300      	movs	r3, #0
 804815e:	2b00      	cmp	r3, #0
 8048160:	d10c      	bne.n	804817c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8048162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048166:	b672      	cpsid	i
 8048168:	f383 8811 	msr	BASEPRI, r3
 804816c:	f3bf 8f6f 	isb	sy
 8048170:	f3bf 8f4f 	dsb	sy
 8048174:	b662      	cpsie	i
 8048176:	623b      	str	r3, [r7, #32]
}
 8048178:	bf00      	nop
 804817a:	e7fe      	b.n	804817a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 804817c:	683b      	ldr	r3, [r7, #0]
 804817e:	2b02      	cmp	r3, #2
 8048180:	d103      	bne.n	804818a <xQueueGenericSendFromISR+0x72>
 8048182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048186:	2b01      	cmp	r3, #1
 8048188:	d101      	bne.n	804818e <xQueueGenericSendFromISR+0x76>
 804818a:	2301      	movs	r3, #1
 804818c:	e000      	b.n	8048190 <xQueueGenericSendFromISR+0x78>
 804818e:	2300      	movs	r3, #0
 8048190:	2b00      	cmp	r3, #0
 8048192:	d10c      	bne.n	80481ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8048194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048198:	b672      	cpsid	i
 804819a:	f383 8811 	msr	BASEPRI, r3
 804819e:	f3bf 8f6f 	isb	sy
 80481a2:	f3bf 8f4f 	dsb	sy
 80481a6:	b662      	cpsie	i
 80481a8:	61fb      	str	r3, [r7, #28]
}
 80481aa:	bf00      	nop
 80481ac:	e7fe      	b.n	80481ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80481ae:	f001 ff85 	bl	804a0bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80481b2:	f3ef 8211 	mrs	r2, BASEPRI
 80481b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80481ba:	b672      	cpsid	i
 80481bc:	f383 8811 	msr	BASEPRI, r3
 80481c0:	f3bf 8f6f 	isb	sy
 80481c4:	f3bf 8f4f 	dsb	sy
 80481c8:	b662      	cpsie	i
 80481ca:	61ba      	str	r2, [r7, #24]
 80481cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80481ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80481d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80481d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80481d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80481d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80481d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80481da:	429a      	cmp	r2, r3
 80481dc:	d302      	bcc.n	80481e4 <xQueueGenericSendFromISR+0xcc>
 80481de:	683b      	ldr	r3, [r7, #0]
 80481e0:	2b02      	cmp	r3, #2
 80481e2:	d12c      	bne.n	804823e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80481e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80481e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80481ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80481ee:	683a      	ldr	r2, [r7, #0]
 80481f0:	68b9      	ldr	r1, [r7, #8]
 80481f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80481f4:	f000 fb5e 	bl	80488b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80481f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80481fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048200:	d112      	bne.n	8048228 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8048202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048206:	2b00      	cmp	r3, #0
 8048208:	d016      	beq.n	8048238 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 804820a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804820c:	3324      	adds	r3, #36	; 0x24
 804820e:	4618      	mov	r0, r3
 8048210:	f001 f95a 	bl	80494c8 <xTaskRemoveFromEventList>
 8048214:	4603      	mov	r3, r0
 8048216:	2b00      	cmp	r3, #0
 8048218:	d00e      	beq.n	8048238 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 804821a:	687b      	ldr	r3, [r7, #4]
 804821c:	2b00      	cmp	r3, #0
 804821e:	d00b      	beq.n	8048238 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8048220:	687b      	ldr	r3, [r7, #4]
 8048222:	2201      	movs	r2, #1
 8048224:	601a      	str	r2, [r3, #0]
 8048226:	e007      	b.n	8048238 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8048228:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 804822c:	3301      	adds	r3, #1
 804822e:	b2db      	uxtb	r3, r3
 8048230:	b25a      	sxtb	r2, r3
 8048232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8048238:	2301      	movs	r3, #1
 804823a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 804823c:	e001      	b.n	8048242 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 804823e:	2300      	movs	r3, #0
 8048240:	637b      	str	r3, [r7, #52]	; 0x34
 8048242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048244:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8048246:	693b      	ldr	r3, [r7, #16]
 8048248:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 804824c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 804824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8048250:	4618      	mov	r0, r3
 8048252:	3738      	adds	r7, #56	; 0x38
 8048254:	46bd      	mov	sp, r7
 8048256:	bd80      	pop	{r7, pc}

08048258 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8048258:	b580      	push	{r7, lr}
 804825a:	b08e      	sub	sp, #56	; 0x38
 804825c:	af00      	add	r7, sp, #0
 804825e:	6078      	str	r0, [r7, #4]
 8048260:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8048262:	687b      	ldr	r3, [r7, #4]
 8048264:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8048266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048268:	2b00      	cmp	r3, #0
 804826a:	d10c      	bne.n	8048286 <xQueueGiveFromISR+0x2e>
	__asm volatile
 804826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048270:	b672      	cpsid	i
 8048272:	f383 8811 	msr	BASEPRI, r3
 8048276:	f3bf 8f6f 	isb	sy
 804827a:	f3bf 8f4f 	dsb	sy
 804827e:	b662      	cpsie	i
 8048280:	623b      	str	r3, [r7, #32]
}
 8048282:	bf00      	nop
 8048284:	e7fe      	b.n	8048284 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8048286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804828a:	2b00      	cmp	r3, #0
 804828c:	d00c      	beq.n	80482a8 <xQueueGiveFromISR+0x50>
	__asm volatile
 804828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048292:	b672      	cpsid	i
 8048294:	f383 8811 	msr	BASEPRI, r3
 8048298:	f3bf 8f6f 	isb	sy
 804829c:	f3bf 8f4f 	dsb	sy
 80482a0:	b662      	cpsie	i
 80482a2:	61fb      	str	r3, [r7, #28]
}
 80482a4:	bf00      	nop
 80482a6:	e7fe      	b.n	80482a6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80482a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80482aa:	681b      	ldr	r3, [r3, #0]
 80482ac:	2b00      	cmp	r3, #0
 80482ae:	d103      	bne.n	80482b8 <xQueueGiveFromISR+0x60>
 80482b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80482b2:	689b      	ldr	r3, [r3, #8]
 80482b4:	2b00      	cmp	r3, #0
 80482b6:	d101      	bne.n	80482bc <xQueueGiveFromISR+0x64>
 80482b8:	2301      	movs	r3, #1
 80482ba:	e000      	b.n	80482be <xQueueGiveFromISR+0x66>
 80482bc:	2300      	movs	r3, #0
 80482be:	2b00      	cmp	r3, #0
 80482c0:	d10c      	bne.n	80482dc <xQueueGiveFromISR+0x84>
	__asm volatile
 80482c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80482c6:	b672      	cpsid	i
 80482c8:	f383 8811 	msr	BASEPRI, r3
 80482cc:	f3bf 8f6f 	isb	sy
 80482d0:	f3bf 8f4f 	dsb	sy
 80482d4:	b662      	cpsie	i
 80482d6:	61bb      	str	r3, [r7, #24]
}
 80482d8:	bf00      	nop
 80482da:	e7fe      	b.n	80482da <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80482dc:	f001 feee 	bl	804a0bc <vPortValidateInterruptPriority>
	__asm volatile
 80482e0:	f3ef 8211 	mrs	r2, BASEPRI
 80482e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80482e8:	b672      	cpsid	i
 80482ea:	f383 8811 	msr	BASEPRI, r3
 80482ee:	f3bf 8f6f 	isb	sy
 80482f2:	f3bf 8f4f 	dsb	sy
 80482f6:	b662      	cpsie	i
 80482f8:	617a      	str	r2, [r7, #20]
 80482fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80482fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80482fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8048300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048304:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8048306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804830a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804830c:	429a      	cmp	r2, r3
 804830e:	d22b      	bcs.n	8048368 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8048310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8048316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 804831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804831c:	1c5a      	adds	r2, r3, #1
 804831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048320:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8048322:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8048326:	f1b3 3fff 	cmp.w	r3, #4294967295
 804832a:	d112      	bne.n	8048352 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 804832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048330:	2b00      	cmp	r3, #0
 8048332:	d016      	beq.n	8048362 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8048334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048336:	3324      	adds	r3, #36	; 0x24
 8048338:	4618      	mov	r0, r3
 804833a:	f001 f8c5 	bl	80494c8 <xTaskRemoveFromEventList>
 804833e:	4603      	mov	r3, r0
 8048340:	2b00      	cmp	r3, #0
 8048342:	d00e      	beq.n	8048362 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8048344:	683b      	ldr	r3, [r7, #0]
 8048346:	2b00      	cmp	r3, #0
 8048348:	d00b      	beq.n	8048362 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 804834a:	683b      	ldr	r3, [r7, #0]
 804834c:	2201      	movs	r2, #1
 804834e:	601a      	str	r2, [r3, #0]
 8048350:	e007      	b.n	8048362 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8048352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8048356:	3301      	adds	r3, #1
 8048358:	b2db      	uxtb	r3, r3
 804835a:	b25a      	sxtb	r2, r3
 804835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804835e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8048362:	2301      	movs	r3, #1
 8048364:	637b      	str	r3, [r7, #52]	; 0x34
 8048366:	e001      	b.n	804836c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8048368:	2300      	movs	r3, #0
 804836a:	637b      	str	r3, [r7, #52]	; 0x34
 804836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804836e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8048370:	68fb      	ldr	r3, [r7, #12]
 8048372:	f383 8811 	msr	BASEPRI, r3
}
 8048376:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8048378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 804837a:	4618      	mov	r0, r3
 804837c:	3738      	adds	r7, #56	; 0x38
 804837e:	46bd      	mov	sp, r7
 8048380:	bd80      	pop	{r7, pc}
	...

08048384 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8048384:	b580      	push	{r7, lr}
 8048386:	b08c      	sub	sp, #48	; 0x30
 8048388:	af00      	add	r7, sp, #0
 804838a:	60f8      	str	r0, [r7, #12]
 804838c:	60b9      	str	r1, [r7, #8]
 804838e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8048390:	2300      	movs	r3, #0
 8048392:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8048394:	68fb      	ldr	r3, [r7, #12]
 8048396:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8048398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804839a:	2b00      	cmp	r3, #0
 804839c:	d10c      	bne.n	80483b8 <xQueueReceive+0x34>
	__asm volatile
 804839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80483a2:	b672      	cpsid	i
 80483a4:	f383 8811 	msr	BASEPRI, r3
 80483a8:	f3bf 8f6f 	isb	sy
 80483ac:	f3bf 8f4f 	dsb	sy
 80483b0:	b662      	cpsie	i
 80483b2:	623b      	str	r3, [r7, #32]
}
 80483b4:	bf00      	nop
 80483b6:	e7fe      	b.n	80483b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80483b8:	68bb      	ldr	r3, [r7, #8]
 80483ba:	2b00      	cmp	r3, #0
 80483bc:	d103      	bne.n	80483c6 <xQueueReceive+0x42>
 80483be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80483c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80483c2:	2b00      	cmp	r3, #0
 80483c4:	d101      	bne.n	80483ca <xQueueReceive+0x46>
 80483c6:	2301      	movs	r3, #1
 80483c8:	e000      	b.n	80483cc <xQueueReceive+0x48>
 80483ca:	2300      	movs	r3, #0
 80483cc:	2b00      	cmp	r3, #0
 80483ce:	d10c      	bne.n	80483ea <xQueueReceive+0x66>
	__asm volatile
 80483d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80483d4:	b672      	cpsid	i
 80483d6:	f383 8811 	msr	BASEPRI, r3
 80483da:	f3bf 8f6f 	isb	sy
 80483de:	f3bf 8f4f 	dsb	sy
 80483e2:	b662      	cpsie	i
 80483e4:	61fb      	str	r3, [r7, #28]
}
 80483e6:	bf00      	nop
 80483e8:	e7fe      	b.n	80483e8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80483ea:	f001 fa35 	bl	8049858 <xTaskGetSchedulerState>
 80483ee:	4603      	mov	r3, r0
 80483f0:	2b00      	cmp	r3, #0
 80483f2:	d102      	bne.n	80483fa <xQueueReceive+0x76>
 80483f4:	687b      	ldr	r3, [r7, #4]
 80483f6:	2b00      	cmp	r3, #0
 80483f8:	d101      	bne.n	80483fe <xQueueReceive+0x7a>
 80483fa:	2301      	movs	r3, #1
 80483fc:	e000      	b.n	8048400 <xQueueReceive+0x7c>
 80483fe:	2300      	movs	r3, #0
 8048400:	2b00      	cmp	r3, #0
 8048402:	d10c      	bne.n	804841e <xQueueReceive+0x9a>
	__asm volatile
 8048404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048408:	b672      	cpsid	i
 804840a:	f383 8811 	msr	BASEPRI, r3
 804840e:	f3bf 8f6f 	isb	sy
 8048412:	f3bf 8f4f 	dsb	sy
 8048416:	b662      	cpsie	i
 8048418:	61bb      	str	r3, [r7, #24]
}
 804841a:	bf00      	nop
 804841c:	e7fe      	b.n	804841c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 804841e:	f001 fd65 	bl	8049eec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8048422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8048428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804842a:	2b00      	cmp	r3, #0
 804842c:	d01f      	beq.n	804846e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 804842e:	68b9      	ldr	r1, [r7, #8]
 8048430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8048432:	f000 faa9 	bl	8048988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8048436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048438:	1e5a      	subs	r2, r3, #1
 804843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804843c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 804843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048440:	691b      	ldr	r3, [r3, #16]
 8048442:	2b00      	cmp	r3, #0
 8048444:	d00f      	beq.n	8048466 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8048446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048448:	3310      	adds	r3, #16
 804844a:	4618      	mov	r0, r3
 804844c:	f001 f83c 	bl	80494c8 <xTaskRemoveFromEventList>
 8048450:	4603      	mov	r3, r0
 8048452:	2b00      	cmp	r3, #0
 8048454:	d007      	beq.n	8048466 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8048456:	4b3d      	ldr	r3, [pc, #244]	; (804854c <xQueueReceive+0x1c8>)
 8048458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804845c:	601a      	str	r2, [r3, #0]
 804845e:	f3bf 8f4f 	dsb	sy
 8048462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8048466:	f001 fd75 	bl	8049f54 <vPortExitCritical>
				return pdPASS;
 804846a:	2301      	movs	r3, #1
 804846c:	e069      	b.n	8048542 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 804846e:	687b      	ldr	r3, [r7, #4]
 8048470:	2b00      	cmp	r3, #0
 8048472:	d103      	bne.n	804847c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8048474:	f001 fd6e 	bl	8049f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8048478:	2300      	movs	r3, #0
 804847a:	e062      	b.n	8048542 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 804847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804847e:	2b00      	cmp	r3, #0
 8048480:	d106      	bne.n	8048490 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8048482:	f107 0310 	add.w	r3, r7, #16
 8048486:	4618      	mov	r0, r3
 8048488:	f001 f882 	bl	8049590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 804848c:	2301      	movs	r3, #1
 804848e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8048490:	f001 fd60 	bl	8049f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8048494:	f000 fe06 	bl	80490a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8048498:	f001 fd28 	bl	8049eec <vPortEnterCritical>
 804849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804849e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80484a2:	b25b      	sxtb	r3, r3
 80484a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80484a8:	d103      	bne.n	80484b2 <xQueueReceive+0x12e>
 80484aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80484ac:	2200      	movs	r2, #0
 80484ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80484b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80484b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80484b8:	b25b      	sxtb	r3, r3
 80484ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80484be:	d103      	bne.n	80484c8 <xQueueReceive+0x144>
 80484c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80484c2:	2200      	movs	r2, #0
 80484c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80484c8:	f001 fd44 	bl	8049f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80484cc:	1d3a      	adds	r2, r7, #4
 80484ce:	f107 0310 	add.w	r3, r7, #16
 80484d2:	4611      	mov	r1, r2
 80484d4:	4618      	mov	r0, r3
 80484d6:	f001 f871 	bl	80495bc <xTaskCheckForTimeOut>
 80484da:	4603      	mov	r3, r0
 80484dc:	2b00      	cmp	r3, #0
 80484de:	d123      	bne.n	8048528 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80484e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80484e2:	f000 fac9 	bl	8048a78 <prvIsQueueEmpty>
 80484e6:	4603      	mov	r3, r0
 80484e8:	2b00      	cmp	r3, #0
 80484ea:	d017      	beq.n	804851c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80484ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80484ee:	3324      	adds	r3, #36	; 0x24
 80484f0:	687a      	ldr	r2, [r7, #4]
 80484f2:	4611      	mov	r1, r2
 80484f4:	4618      	mov	r0, r3
 80484f6:	f000 ffc1 	bl	804947c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80484fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80484fc:	f000 fa6a 	bl	80489d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8048500:	f000 fdde 	bl	80490c0 <xTaskResumeAll>
 8048504:	4603      	mov	r3, r0
 8048506:	2b00      	cmp	r3, #0
 8048508:	d189      	bne.n	804841e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 804850a:	4b10      	ldr	r3, [pc, #64]	; (804854c <xQueueReceive+0x1c8>)
 804850c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048510:	601a      	str	r2, [r3, #0]
 8048512:	f3bf 8f4f 	dsb	sy
 8048516:	f3bf 8f6f 	isb	sy
 804851a:	e780      	b.n	804841e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 804851c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804851e:	f000 fa59 	bl	80489d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8048522:	f000 fdcd 	bl	80490c0 <xTaskResumeAll>
 8048526:	e77a      	b.n	804841e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8048528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804852a:	f000 fa53 	bl	80489d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 804852e:	f000 fdc7 	bl	80490c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8048532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8048534:	f000 faa0 	bl	8048a78 <prvIsQueueEmpty>
 8048538:	4603      	mov	r3, r0
 804853a:	2b00      	cmp	r3, #0
 804853c:	f43f af6f 	beq.w	804841e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8048540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8048542:	4618      	mov	r0, r3
 8048544:	3730      	adds	r7, #48	; 0x30
 8048546:	46bd      	mov	sp, r7
 8048548:	bd80      	pop	{r7, pc}
 804854a:	bf00      	nop
 804854c:	e000ed04 	.word	0xe000ed04

08048550 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8048550:	b580      	push	{r7, lr}
 8048552:	b08e      	sub	sp, #56	; 0x38
 8048554:	af00      	add	r7, sp, #0
 8048556:	6078      	str	r0, [r7, #4]
 8048558:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 804855a:	2300      	movs	r3, #0
 804855c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 804855e:	687b      	ldr	r3, [r7, #4]
 8048560:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8048562:	2300      	movs	r3, #0
 8048564:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8048566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048568:	2b00      	cmp	r3, #0
 804856a:	d10c      	bne.n	8048586 <xQueueSemaphoreTake+0x36>
	__asm volatile
 804856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048570:	b672      	cpsid	i
 8048572:	f383 8811 	msr	BASEPRI, r3
 8048576:	f3bf 8f6f 	isb	sy
 804857a:	f3bf 8f4f 	dsb	sy
 804857e:	b662      	cpsie	i
 8048580:	623b      	str	r3, [r7, #32]
}
 8048582:	bf00      	nop
 8048584:	e7fe      	b.n	8048584 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8048586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804858a:	2b00      	cmp	r3, #0
 804858c:	d00c      	beq.n	80485a8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 804858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048592:	b672      	cpsid	i
 8048594:	f383 8811 	msr	BASEPRI, r3
 8048598:	f3bf 8f6f 	isb	sy
 804859c:	f3bf 8f4f 	dsb	sy
 80485a0:	b662      	cpsie	i
 80485a2:	61fb      	str	r3, [r7, #28]
}
 80485a4:	bf00      	nop
 80485a6:	e7fe      	b.n	80485a6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80485a8:	f001 f956 	bl	8049858 <xTaskGetSchedulerState>
 80485ac:	4603      	mov	r3, r0
 80485ae:	2b00      	cmp	r3, #0
 80485b0:	d102      	bne.n	80485b8 <xQueueSemaphoreTake+0x68>
 80485b2:	683b      	ldr	r3, [r7, #0]
 80485b4:	2b00      	cmp	r3, #0
 80485b6:	d101      	bne.n	80485bc <xQueueSemaphoreTake+0x6c>
 80485b8:	2301      	movs	r3, #1
 80485ba:	e000      	b.n	80485be <xQueueSemaphoreTake+0x6e>
 80485bc:	2300      	movs	r3, #0
 80485be:	2b00      	cmp	r3, #0
 80485c0:	d10c      	bne.n	80485dc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80485c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80485c6:	b672      	cpsid	i
 80485c8:	f383 8811 	msr	BASEPRI, r3
 80485cc:	f3bf 8f6f 	isb	sy
 80485d0:	f3bf 8f4f 	dsb	sy
 80485d4:	b662      	cpsie	i
 80485d6:	61bb      	str	r3, [r7, #24]
}
 80485d8:	bf00      	nop
 80485da:	e7fe      	b.n	80485da <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80485dc:	f001 fc86 	bl	8049eec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80485e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80485e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80485e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80485e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80485e8:	2b00      	cmp	r3, #0
 80485ea:	d024      	beq.n	8048636 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80485ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80485ee:	1e5a      	subs	r2, r3, #1
 80485f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80485f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80485f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80485f6:	681b      	ldr	r3, [r3, #0]
 80485f8:	2b00      	cmp	r3, #0
 80485fa:	d104      	bne.n	8048606 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80485fc:	f001 faf2 	bl	8049be4 <pvTaskIncrementMutexHeldCount>
 8048600:	4602      	mov	r2, r0
 8048602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048604:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8048606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048608:	691b      	ldr	r3, [r3, #16]
 804860a:	2b00      	cmp	r3, #0
 804860c:	d00f      	beq.n	804862e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 804860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048610:	3310      	adds	r3, #16
 8048612:	4618      	mov	r0, r3
 8048614:	f000 ff58 	bl	80494c8 <xTaskRemoveFromEventList>
 8048618:	4603      	mov	r3, r0
 804861a:	2b00      	cmp	r3, #0
 804861c:	d007      	beq.n	804862e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 804861e:	4b55      	ldr	r3, [pc, #340]	; (8048774 <xQueueSemaphoreTake+0x224>)
 8048620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048624:	601a      	str	r2, [r3, #0]
 8048626:	f3bf 8f4f 	dsb	sy
 804862a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 804862e:	f001 fc91 	bl	8049f54 <vPortExitCritical>
				return pdPASS;
 8048632:	2301      	movs	r3, #1
 8048634:	e099      	b.n	804876a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8048636:	683b      	ldr	r3, [r7, #0]
 8048638:	2b00      	cmp	r3, #0
 804863a:	d113      	bne.n	8048664 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 804863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804863e:	2b00      	cmp	r3, #0
 8048640:	d00c      	beq.n	804865c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8048642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048646:	b672      	cpsid	i
 8048648:	f383 8811 	msr	BASEPRI, r3
 804864c:	f3bf 8f6f 	isb	sy
 8048650:	f3bf 8f4f 	dsb	sy
 8048654:	b662      	cpsie	i
 8048656:	617b      	str	r3, [r7, #20]
}
 8048658:	bf00      	nop
 804865a:	e7fe      	b.n	804865a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 804865c:	f001 fc7a 	bl	8049f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8048660:	2300      	movs	r3, #0
 8048662:	e082      	b.n	804876a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8048664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8048666:	2b00      	cmp	r3, #0
 8048668:	d106      	bne.n	8048678 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 804866a:	f107 030c 	add.w	r3, r7, #12
 804866e:	4618      	mov	r0, r3
 8048670:	f000 ff8e 	bl	8049590 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8048674:	2301      	movs	r3, #1
 8048676:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8048678:	f001 fc6c 	bl	8049f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 804867c:	f000 fd12 	bl	80490a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8048680:	f001 fc34 	bl	8049eec <vPortEnterCritical>
 8048684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 804868a:	b25b      	sxtb	r3, r3
 804868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048690:	d103      	bne.n	804869a <xQueueSemaphoreTake+0x14a>
 8048692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048694:	2200      	movs	r2, #0
 8048696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804869c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80486a0:	b25b      	sxtb	r3, r3
 80486a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80486a6:	d103      	bne.n	80486b0 <xQueueSemaphoreTake+0x160>
 80486a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80486aa:	2200      	movs	r2, #0
 80486ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80486b0:	f001 fc50 	bl	8049f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80486b4:	463a      	mov	r2, r7
 80486b6:	f107 030c 	add.w	r3, r7, #12
 80486ba:	4611      	mov	r1, r2
 80486bc:	4618      	mov	r0, r3
 80486be:	f000 ff7d 	bl	80495bc <xTaskCheckForTimeOut>
 80486c2:	4603      	mov	r3, r0
 80486c4:	2b00      	cmp	r3, #0
 80486c6:	d132      	bne.n	804872e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80486c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80486ca:	f000 f9d5 	bl	8048a78 <prvIsQueueEmpty>
 80486ce:	4603      	mov	r3, r0
 80486d0:	2b00      	cmp	r3, #0
 80486d2:	d026      	beq.n	8048722 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80486d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80486d6:	681b      	ldr	r3, [r3, #0]
 80486d8:	2b00      	cmp	r3, #0
 80486da:	d109      	bne.n	80486f0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80486dc:	f001 fc06 	bl	8049eec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80486e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80486e2:	689b      	ldr	r3, [r3, #8]
 80486e4:	4618      	mov	r0, r3
 80486e6:	f001 f8d5 	bl	8049894 <xTaskPriorityInherit>
 80486ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80486ec:	f001 fc32 	bl	8049f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80486f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80486f2:	3324      	adds	r3, #36	; 0x24
 80486f4:	683a      	ldr	r2, [r7, #0]
 80486f6:	4611      	mov	r1, r2
 80486f8:	4618      	mov	r0, r3
 80486fa:	f000 febf 	bl	804947c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80486fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8048700:	f000 f968 	bl	80489d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8048704:	f000 fcdc 	bl	80490c0 <xTaskResumeAll>
 8048708:	4603      	mov	r3, r0
 804870a:	2b00      	cmp	r3, #0
 804870c:	f47f af66 	bne.w	80485dc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8048710:	4b18      	ldr	r3, [pc, #96]	; (8048774 <xQueueSemaphoreTake+0x224>)
 8048712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048716:	601a      	str	r2, [r3, #0]
 8048718:	f3bf 8f4f 	dsb	sy
 804871c:	f3bf 8f6f 	isb	sy
 8048720:	e75c      	b.n	80485dc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8048722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8048724:	f000 f956 	bl	80489d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8048728:	f000 fcca 	bl	80490c0 <xTaskResumeAll>
 804872c:	e756      	b.n	80485dc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 804872e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8048730:	f000 f950 	bl	80489d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8048734:	f000 fcc4 	bl	80490c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8048738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804873a:	f000 f99d 	bl	8048a78 <prvIsQueueEmpty>
 804873e:	4603      	mov	r3, r0
 8048740:	2b00      	cmp	r3, #0
 8048742:	f43f af4b 	beq.w	80485dc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8048746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048748:	2b00      	cmp	r3, #0
 804874a:	d00d      	beq.n	8048768 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 804874c:	f001 fbce 	bl	8049eec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8048750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8048752:	f000 f897 	bl	8048884 <prvGetDisinheritPriorityAfterTimeout>
 8048756:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8048758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804875a:	689b      	ldr	r3, [r3, #8]
 804875c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 804875e:	4618      	mov	r0, r3
 8048760:	f001 f9a2 	bl	8049aa8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8048764:	f001 fbf6 	bl	8049f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8048768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 804876a:	4618      	mov	r0, r3
 804876c:	3738      	adds	r7, #56	; 0x38
 804876e:	46bd      	mov	sp, r7
 8048770:	bd80      	pop	{r7, pc}
 8048772:	bf00      	nop
 8048774:	e000ed04 	.word	0xe000ed04

08048778 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8048778:	b580      	push	{r7, lr}
 804877a:	b08e      	sub	sp, #56	; 0x38
 804877c:	af00      	add	r7, sp, #0
 804877e:	60f8      	str	r0, [r7, #12]
 8048780:	60b9      	str	r1, [r7, #8]
 8048782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8048784:	68fb      	ldr	r3, [r7, #12]
 8048786:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8048788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804878a:	2b00      	cmp	r3, #0
 804878c:	d10c      	bne.n	80487a8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 804878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048792:	b672      	cpsid	i
 8048794:	f383 8811 	msr	BASEPRI, r3
 8048798:	f3bf 8f6f 	isb	sy
 804879c:	f3bf 8f4f 	dsb	sy
 80487a0:	b662      	cpsie	i
 80487a2:	623b      	str	r3, [r7, #32]
}
 80487a4:	bf00      	nop
 80487a6:	e7fe      	b.n	80487a6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80487a8:	68bb      	ldr	r3, [r7, #8]
 80487aa:	2b00      	cmp	r3, #0
 80487ac:	d103      	bne.n	80487b6 <xQueueReceiveFromISR+0x3e>
 80487ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80487b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80487b2:	2b00      	cmp	r3, #0
 80487b4:	d101      	bne.n	80487ba <xQueueReceiveFromISR+0x42>
 80487b6:	2301      	movs	r3, #1
 80487b8:	e000      	b.n	80487bc <xQueueReceiveFromISR+0x44>
 80487ba:	2300      	movs	r3, #0
 80487bc:	2b00      	cmp	r3, #0
 80487be:	d10c      	bne.n	80487da <xQueueReceiveFromISR+0x62>
	__asm volatile
 80487c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80487c4:	b672      	cpsid	i
 80487c6:	f383 8811 	msr	BASEPRI, r3
 80487ca:	f3bf 8f6f 	isb	sy
 80487ce:	f3bf 8f4f 	dsb	sy
 80487d2:	b662      	cpsie	i
 80487d4:	61fb      	str	r3, [r7, #28]
}
 80487d6:	bf00      	nop
 80487d8:	e7fe      	b.n	80487d8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80487da:	f001 fc6f 	bl	804a0bc <vPortValidateInterruptPriority>
	__asm volatile
 80487de:	f3ef 8211 	mrs	r2, BASEPRI
 80487e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80487e6:	b672      	cpsid	i
 80487e8:	f383 8811 	msr	BASEPRI, r3
 80487ec:	f3bf 8f6f 	isb	sy
 80487f0:	f3bf 8f4f 	dsb	sy
 80487f4:	b662      	cpsie	i
 80487f6:	61ba      	str	r2, [r7, #24]
 80487f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80487fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80487fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80487fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048802:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8048804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048806:	2b00      	cmp	r3, #0
 8048808:	d02f      	beq.n	804886a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 804880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804880c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8048810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8048814:	68b9      	ldr	r1, [r7, #8]
 8048816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8048818:	f000 f8b6 	bl	8048988 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 804881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804881e:	1e5a      	subs	r2, r3, #1
 8048820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048822:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8048824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8048828:	f1b3 3fff 	cmp.w	r3, #4294967295
 804882c:	d112      	bne.n	8048854 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 804882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048830:	691b      	ldr	r3, [r3, #16]
 8048832:	2b00      	cmp	r3, #0
 8048834:	d016      	beq.n	8048864 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8048836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048838:	3310      	adds	r3, #16
 804883a:	4618      	mov	r0, r3
 804883c:	f000 fe44 	bl	80494c8 <xTaskRemoveFromEventList>
 8048840:	4603      	mov	r3, r0
 8048842:	2b00      	cmp	r3, #0
 8048844:	d00e      	beq.n	8048864 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8048846:	687b      	ldr	r3, [r7, #4]
 8048848:	2b00      	cmp	r3, #0
 804884a:	d00b      	beq.n	8048864 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 804884c:	687b      	ldr	r3, [r7, #4]
 804884e:	2201      	movs	r2, #1
 8048850:	601a      	str	r2, [r3, #0]
 8048852:	e007      	b.n	8048864 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8048854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8048858:	3301      	adds	r3, #1
 804885a:	b2db      	uxtb	r3, r3
 804885c:	b25a      	sxtb	r2, r3
 804885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8048864:	2301      	movs	r3, #1
 8048866:	637b      	str	r3, [r7, #52]	; 0x34
 8048868:	e001      	b.n	804886e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 804886a:	2300      	movs	r3, #0
 804886c:	637b      	str	r3, [r7, #52]	; 0x34
 804886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048870:	613b      	str	r3, [r7, #16]
	__asm volatile
 8048872:	693b      	ldr	r3, [r7, #16]
 8048874:	f383 8811 	msr	BASEPRI, r3
}
 8048878:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 804887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 804887c:	4618      	mov	r0, r3
 804887e:	3738      	adds	r7, #56	; 0x38
 8048880:	46bd      	mov	sp, r7
 8048882:	bd80      	pop	{r7, pc}

08048884 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8048884:	b480      	push	{r7}
 8048886:	b085      	sub	sp, #20
 8048888:	af00      	add	r7, sp, #0
 804888a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 804888c:	687b      	ldr	r3, [r7, #4]
 804888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048890:	2b00      	cmp	r3, #0
 8048892:	d006      	beq.n	80488a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8048894:	687b      	ldr	r3, [r7, #4]
 8048896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048898:	681b      	ldr	r3, [r3, #0]
 804889a:	f1c3 0307 	rsb	r3, r3, #7
 804889e:	60fb      	str	r3, [r7, #12]
 80488a0:	e001      	b.n	80488a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80488a2:	2300      	movs	r3, #0
 80488a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80488a6:	68fb      	ldr	r3, [r7, #12]
	}
 80488a8:	4618      	mov	r0, r3
 80488aa:	3714      	adds	r7, #20
 80488ac:	46bd      	mov	sp, r7
 80488ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488b2:	4770      	bx	lr

080488b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80488b4:	b580      	push	{r7, lr}
 80488b6:	b086      	sub	sp, #24
 80488b8:	af00      	add	r7, sp, #0
 80488ba:	60f8      	str	r0, [r7, #12]
 80488bc:	60b9      	str	r1, [r7, #8]
 80488be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80488c0:	2300      	movs	r3, #0
 80488c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80488c4:	68fb      	ldr	r3, [r7, #12]
 80488c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80488c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80488ca:	68fb      	ldr	r3, [r7, #12]
 80488cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80488ce:	2b00      	cmp	r3, #0
 80488d0:	d10d      	bne.n	80488ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80488d2:	68fb      	ldr	r3, [r7, #12]
 80488d4:	681b      	ldr	r3, [r3, #0]
 80488d6:	2b00      	cmp	r3, #0
 80488d8:	d14d      	bne.n	8048976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80488da:	68fb      	ldr	r3, [r7, #12]
 80488dc:	689b      	ldr	r3, [r3, #8]
 80488de:	4618      	mov	r0, r3
 80488e0:	f001 f858 	bl	8049994 <xTaskPriorityDisinherit>
 80488e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80488e6:	68fb      	ldr	r3, [r7, #12]
 80488e8:	2200      	movs	r2, #0
 80488ea:	609a      	str	r2, [r3, #8]
 80488ec:	e043      	b.n	8048976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80488ee:	687b      	ldr	r3, [r7, #4]
 80488f0:	2b00      	cmp	r3, #0
 80488f2:	d119      	bne.n	8048928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80488f4:	68fb      	ldr	r3, [r7, #12]
 80488f6:	6858      	ldr	r0, [r3, #4]
 80488f8:	68fb      	ldr	r3, [r7, #12]
 80488fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80488fc:	461a      	mov	r2, r3
 80488fe:	68b9      	ldr	r1, [r7, #8]
 8048900:	f00c f9bf 	bl	8054c82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8048904:	68fb      	ldr	r3, [r7, #12]
 8048906:	685a      	ldr	r2, [r3, #4]
 8048908:	68fb      	ldr	r3, [r7, #12]
 804890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804890c:	441a      	add	r2, r3
 804890e:	68fb      	ldr	r3, [r7, #12]
 8048910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8048912:	68fb      	ldr	r3, [r7, #12]
 8048914:	685a      	ldr	r2, [r3, #4]
 8048916:	68fb      	ldr	r3, [r7, #12]
 8048918:	689b      	ldr	r3, [r3, #8]
 804891a:	429a      	cmp	r2, r3
 804891c:	d32b      	bcc.n	8048976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 804891e:	68fb      	ldr	r3, [r7, #12]
 8048920:	681a      	ldr	r2, [r3, #0]
 8048922:	68fb      	ldr	r3, [r7, #12]
 8048924:	605a      	str	r2, [r3, #4]
 8048926:	e026      	b.n	8048976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8048928:	68fb      	ldr	r3, [r7, #12]
 804892a:	68d8      	ldr	r0, [r3, #12]
 804892c:	68fb      	ldr	r3, [r7, #12]
 804892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048930:	461a      	mov	r2, r3
 8048932:	68b9      	ldr	r1, [r7, #8]
 8048934:	f00c f9a5 	bl	8054c82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8048938:	68fb      	ldr	r3, [r7, #12]
 804893a:	68da      	ldr	r2, [r3, #12]
 804893c:	68fb      	ldr	r3, [r7, #12]
 804893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048940:	425b      	negs	r3, r3
 8048942:	441a      	add	r2, r3
 8048944:	68fb      	ldr	r3, [r7, #12]
 8048946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8048948:	68fb      	ldr	r3, [r7, #12]
 804894a:	68da      	ldr	r2, [r3, #12]
 804894c:	68fb      	ldr	r3, [r7, #12]
 804894e:	681b      	ldr	r3, [r3, #0]
 8048950:	429a      	cmp	r2, r3
 8048952:	d207      	bcs.n	8048964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8048954:	68fb      	ldr	r3, [r7, #12]
 8048956:	689a      	ldr	r2, [r3, #8]
 8048958:	68fb      	ldr	r3, [r7, #12]
 804895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804895c:	425b      	negs	r3, r3
 804895e:	441a      	add	r2, r3
 8048960:	68fb      	ldr	r3, [r7, #12]
 8048962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8048964:	687b      	ldr	r3, [r7, #4]
 8048966:	2b02      	cmp	r3, #2
 8048968:	d105      	bne.n	8048976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 804896a:	693b      	ldr	r3, [r7, #16]
 804896c:	2b00      	cmp	r3, #0
 804896e:	d002      	beq.n	8048976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8048970:	693b      	ldr	r3, [r7, #16]
 8048972:	3b01      	subs	r3, #1
 8048974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8048976:	693b      	ldr	r3, [r7, #16]
 8048978:	1c5a      	adds	r2, r3, #1
 804897a:	68fb      	ldr	r3, [r7, #12]
 804897c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 804897e:	697b      	ldr	r3, [r7, #20]
}
 8048980:	4618      	mov	r0, r3
 8048982:	3718      	adds	r7, #24
 8048984:	46bd      	mov	sp, r7
 8048986:	bd80      	pop	{r7, pc}

08048988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8048988:	b580      	push	{r7, lr}
 804898a:	b082      	sub	sp, #8
 804898c:	af00      	add	r7, sp, #0
 804898e:	6078      	str	r0, [r7, #4]
 8048990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8048992:	687b      	ldr	r3, [r7, #4]
 8048994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048996:	2b00      	cmp	r3, #0
 8048998:	d018      	beq.n	80489cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 804899a:	687b      	ldr	r3, [r7, #4]
 804899c:	68da      	ldr	r2, [r3, #12]
 804899e:	687b      	ldr	r3, [r7, #4]
 80489a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80489a2:	441a      	add	r2, r3
 80489a4:	687b      	ldr	r3, [r7, #4]
 80489a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80489a8:	687b      	ldr	r3, [r7, #4]
 80489aa:	68da      	ldr	r2, [r3, #12]
 80489ac:	687b      	ldr	r3, [r7, #4]
 80489ae:	689b      	ldr	r3, [r3, #8]
 80489b0:	429a      	cmp	r2, r3
 80489b2:	d303      	bcc.n	80489bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80489b4:	687b      	ldr	r3, [r7, #4]
 80489b6:	681a      	ldr	r2, [r3, #0]
 80489b8:	687b      	ldr	r3, [r7, #4]
 80489ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80489bc:	687b      	ldr	r3, [r7, #4]
 80489be:	68d9      	ldr	r1, [r3, #12]
 80489c0:	687b      	ldr	r3, [r7, #4]
 80489c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80489c4:	461a      	mov	r2, r3
 80489c6:	6838      	ldr	r0, [r7, #0]
 80489c8:	f00c f95b 	bl	8054c82 <memcpy>
	}
}
 80489cc:	bf00      	nop
 80489ce:	3708      	adds	r7, #8
 80489d0:	46bd      	mov	sp, r7
 80489d2:	bd80      	pop	{r7, pc}

080489d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80489d4:	b580      	push	{r7, lr}
 80489d6:	b084      	sub	sp, #16
 80489d8:	af00      	add	r7, sp, #0
 80489da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80489dc:	f001 fa86 	bl	8049eec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80489e0:	687b      	ldr	r3, [r7, #4]
 80489e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80489e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80489e8:	e011      	b.n	8048a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80489ea:	687b      	ldr	r3, [r7, #4]
 80489ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80489ee:	2b00      	cmp	r3, #0
 80489f0:	d012      	beq.n	8048a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80489f2:	687b      	ldr	r3, [r7, #4]
 80489f4:	3324      	adds	r3, #36	; 0x24
 80489f6:	4618      	mov	r0, r3
 80489f8:	f000 fd66 	bl	80494c8 <xTaskRemoveFromEventList>
 80489fc:	4603      	mov	r3, r0
 80489fe:	2b00      	cmp	r3, #0
 8048a00:	d001      	beq.n	8048a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8048a02:	f000 fe41 	bl	8049688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8048a06:	7bfb      	ldrb	r3, [r7, #15]
 8048a08:	3b01      	subs	r3, #1
 8048a0a:	b2db      	uxtb	r3, r3
 8048a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8048a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8048a12:	2b00      	cmp	r3, #0
 8048a14:	dce9      	bgt.n	80489ea <prvUnlockQueue+0x16>
 8048a16:	e000      	b.n	8048a1a <prvUnlockQueue+0x46>
					break;
 8048a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8048a1a:	687b      	ldr	r3, [r7, #4]
 8048a1c:	22ff      	movs	r2, #255	; 0xff
 8048a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8048a22:	f001 fa97 	bl	8049f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8048a26:	f001 fa61 	bl	8049eec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8048a2a:	687b      	ldr	r3, [r7, #4]
 8048a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8048a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8048a32:	e011      	b.n	8048a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8048a34:	687b      	ldr	r3, [r7, #4]
 8048a36:	691b      	ldr	r3, [r3, #16]
 8048a38:	2b00      	cmp	r3, #0
 8048a3a:	d012      	beq.n	8048a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8048a3c:	687b      	ldr	r3, [r7, #4]
 8048a3e:	3310      	adds	r3, #16
 8048a40:	4618      	mov	r0, r3
 8048a42:	f000 fd41 	bl	80494c8 <xTaskRemoveFromEventList>
 8048a46:	4603      	mov	r3, r0
 8048a48:	2b00      	cmp	r3, #0
 8048a4a:	d001      	beq.n	8048a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8048a4c:	f000 fe1c 	bl	8049688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8048a50:	7bbb      	ldrb	r3, [r7, #14]
 8048a52:	3b01      	subs	r3, #1
 8048a54:	b2db      	uxtb	r3, r3
 8048a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8048a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8048a5c:	2b00      	cmp	r3, #0
 8048a5e:	dce9      	bgt.n	8048a34 <prvUnlockQueue+0x60>
 8048a60:	e000      	b.n	8048a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8048a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8048a64:	687b      	ldr	r3, [r7, #4]
 8048a66:	22ff      	movs	r2, #255	; 0xff
 8048a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8048a6c:	f001 fa72 	bl	8049f54 <vPortExitCritical>
}
 8048a70:	bf00      	nop
 8048a72:	3710      	adds	r7, #16
 8048a74:	46bd      	mov	sp, r7
 8048a76:	bd80      	pop	{r7, pc}

08048a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8048a78:	b580      	push	{r7, lr}
 8048a7a:	b084      	sub	sp, #16
 8048a7c:	af00      	add	r7, sp, #0
 8048a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8048a80:	f001 fa34 	bl	8049eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8048a84:	687b      	ldr	r3, [r7, #4]
 8048a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048a88:	2b00      	cmp	r3, #0
 8048a8a:	d102      	bne.n	8048a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8048a8c:	2301      	movs	r3, #1
 8048a8e:	60fb      	str	r3, [r7, #12]
 8048a90:	e001      	b.n	8048a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8048a92:	2300      	movs	r3, #0
 8048a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8048a96:	f001 fa5d 	bl	8049f54 <vPortExitCritical>

	return xReturn;
 8048a9a:	68fb      	ldr	r3, [r7, #12]
}
 8048a9c:	4618      	mov	r0, r3
 8048a9e:	3710      	adds	r7, #16
 8048aa0:	46bd      	mov	sp, r7
 8048aa2:	bd80      	pop	{r7, pc}

08048aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8048aa4:	b580      	push	{r7, lr}
 8048aa6:	b084      	sub	sp, #16
 8048aa8:	af00      	add	r7, sp, #0
 8048aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8048aac:	f001 fa1e 	bl	8049eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8048ab0:	687b      	ldr	r3, [r7, #4]
 8048ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8048ab4:	687b      	ldr	r3, [r7, #4]
 8048ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048ab8:	429a      	cmp	r2, r3
 8048aba:	d102      	bne.n	8048ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8048abc:	2301      	movs	r3, #1
 8048abe:	60fb      	str	r3, [r7, #12]
 8048ac0:	e001      	b.n	8048ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8048ac2:	2300      	movs	r3, #0
 8048ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8048ac6:	f001 fa45 	bl	8049f54 <vPortExitCritical>

	return xReturn;
 8048aca:	68fb      	ldr	r3, [r7, #12]
}
 8048acc:	4618      	mov	r0, r3
 8048ace:	3710      	adds	r7, #16
 8048ad0:	46bd      	mov	sp, r7
 8048ad2:	bd80      	pop	{r7, pc}

08048ad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8048ad4:	b580      	push	{r7, lr}
 8048ad6:	b08e      	sub	sp, #56	; 0x38
 8048ad8:	af04      	add	r7, sp, #16
 8048ada:	60f8      	str	r0, [r7, #12]
 8048adc:	60b9      	str	r1, [r7, #8]
 8048ade:	607a      	str	r2, [r7, #4]
 8048ae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8048ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8048ae4:	2b00      	cmp	r3, #0
 8048ae6:	d10c      	bne.n	8048b02 <xTaskCreateStatic+0x2e>
	__asm volatile
 8048ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048aec:	b672      	cpsid	i
 8048aee:	f383 8811 	msr	BASEPRI, r3
 8048af2:	f3bf 8f6f 	isb	sy
 8048af6:	f3bf 8f4f 	dsb	sy
 8048afa:	b662      	cpsie	i
 8048afc:	623b      	str	r3, [r7, #32]
}
 8048afe:	bf00      	nop
 8048b00:	e7fe      	b.n	8048b00 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8048b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8048b04:	2b00      	cmp	r3, #0
 8048b06:	d10c      	bne.n	8048b22 <xTaskCreateStatic+0x4e>
	__asm volatile
 8048b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048b0c:	b672      	cpsid	i
 8048b0e:	f383 8811 	msr	BASEPRI, r3
 8048b12:	f3bf 8f6f 	isb	sy
 8048b16:	f3bf 8f4f 	dsb	sy
 8048b1a:	b662      	cpsie	i
 8048b1c:	61fb      	str	r3, [r7, #28]
}
 8048b1e:	bf00      	nop
 8048b20:	e7fe      	b.n	8048b20 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8048b22:	23a0      	movs	r3, #160	; 0xa0
 8048b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8048b26:	693b      	ldr	r3, [r7, #16]
 8048b28:	2ba0      	cmp	r3, #160	; 0xa0
 8048b2a:	d00c      	beq.n	8048b46 <xTaskCreateStatic+0x72>
	__asm volatile
 8048b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048b30:	b672      	cpsid	i
 8048b32:	f383 8811 	msr	BASEPRI, r3
 8048b36:	f3bf 8f6f 	isb	sy
 8048b3a:	f3bf 8f4f 	dsb	sy
 8048b3e:	b662      	cpsie	i
 8048b40:	61bb      	str	r3, [r7, #24]
}
 8048b42:	bf00      	nop
 8048b44:	e7fe      	b.n	8048b44 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8048b46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8048b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8048b4a:	2b00      	cmp	r3, #0
 8048b4c:	d01e      	beq.n	8048b8c <xTaskCreateStatic+0xb8>
 8048b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8048b50:	2b00      	cmp	r3, #0
 8048b52:	d01b      	beq.n	8048b8c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8048b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8048b56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8048b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8048b5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8048b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048b60:	2202      	movs	r2, #2
 8048b62:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8048b66:	2300      	movs	r3, #0
 8048b68:	9303      	str	r3, [sp, #12]
 8048b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048b6c:	9302      	str	r3, [sp, #8]
 8048b6e:	f107 0314 	add.w	r3, r7, #20
 8048b72:	9301      	str	r3, [sp, #4]
 8048b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048b76:	9300      	str	r3, [sp, #0]
 8048b78:	683b      	ldr	r3, [r7, #0]
 8048b7a:	687a      	ldr	r2, [r7, #4]
 8048b7c:	68b9      	ldr	r1, [r7, #8]
 8048b7e:	68f8      	ldr	r0, [r7, #12]
 8048b80:	f000 f850 	bl	8048c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8048b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8048b86:	f000 f8ed 	bl	8048d64 <prvAddNewTaskToReadyList>
 8048b8a:	e001      	b.n	8048b90 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8048b8c:	2300      	movs	r3, #0
 8048b8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8048b90:	697b      	ldr	r3, [r7, #20]
	}
 8048b92:	4618      	mov	r0, r3
 8048b94:	3728      	adds	r7, #40	; 0x28
 8048b96:	46bd      	mov	sp, r7
 8048b98:	bd80      	pop	{r7, pc}

08048b9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8048b9a:	b580      	push	{r7, lr}
 8048b9c:	b08c      	sub	sp, #48	; 0x30
 8048b9e:	af04      	add	r7, sp, #16
 8048ba0:	60f8      	str	r0, [r7, #12]
 8048ba2:	60b9      	str	r1, [r7, #8]
 8048ba4:	603b      	str	r3, [r7, #0]
 8048ba6:	4613      	mov	r3, r2
 8048ba8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8048baa:	88fb      	ldrh	r3, [r7, #6]
 8048bac:	009b      	lsls	r3, r3, #2
 8048bae:	4618      	mov	r0, r3
 8048bb0:	f001 fac8 	bl	804a144 <pvPortMalloc>
 8048bb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8048bb6:	697b      	ldr	r3, [r7, #20]
 8048bb8:	2b00      	cmp	r3, #0
 8048bba:	d00e      	beq.n	8048bda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8048bbc:	20a0      	movs	r0, #160	; 0xa0
 8048bbe:	f001 fac1 	bl	804a144 <pvPortMalloc>
 8048bc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8048bc4:	69fb      	ldr	r3, [r7, #28]
 8048bc6:	2b00      	cmp	r3, #0
 8048bc8:	d003      	beq.n	8048bd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8048bca:	69fb      	ldr	r3, [r7, #28]
 8048bcc:	697a      	ldr	r2, [r7, #20]
 8048bce:	631a      	str	r2, [r3, #48]	; 0x30
 8048bd0:	e005      	b.n	8048bde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8048bd2:	6978      	ldr	r0, [r7, #20]
 8048bd4:	f001 fb80 	bl	804a2d8 <vPortFree>
 8048bd8:	e001      	b.n	8048bde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8048bda:	2300      	movs	r3, #0
 8048bdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8048bde:	69fb      	ldr	r3, [r7, #28]
 8048be0:	2b00      	cmp	r3, #0
 8048be2:	d017      	beq.n	8048c14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8048be4:	69fb      	ldr	r3, [r7, #28]
 8048be6:	2200      	movs	r2, #0
 8048be8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8048bec:	88fa      	ldrh	r2, [r7, #6]
 8048bee:	2300      	movs	r3, #0
 8048bf0:	9303      	str	r3, [sp, #12]
 8048bf2:	69fb      	ldr	r3, [r7, #28]
 8048bf4:	9302      	str	r3, [sp, #8]
 8048bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048bf8:	9301      	str	r3, [sp, #4]
 8048bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048bfc:	9300      	str	r3, [sp, #0]
 8048bfe:	683b      	ldr	r3, [r7, #0]
 8048c00:	68b9      	ldr	r1, [r7, #8]
 8048c02:	68f8      	ldr	r0, [r7, #12]
 8048c04:	f000 f80e 	bl	8048c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8048c08:	69f8      	ldr	r0, [r7, #28]
 8048c0a:	f000 f8ab 	bl	8048d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8048c0e:	2301      	movs	r3, #1
 8048c10:	61bb      	str	r3, [r7, #24]
 8048c12:	e002      	b.n	8048c1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8048c14:	f04f 33ff 	mov.w	r3, #4294967295
 8048c18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8048c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8048c1c:	4618      	mov	r0, r3
 8048c1e:	3720      	adds	r7, #32
 8048c20:	46bd      	mov	sp, r7
 8048c22:	bd80      	pop	{r7, pc}

08048c24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8048c24:	b580      	push	{r7, lr}
 8048c26:	b088      	sub	sp, #32
 8048c28:	af00      	add	r7, sp, #0
 8048c2a:	60f8      	str	r0, [r7, #12]
 8048c2c:	60b9      	str	r1, [r7, #8]
 8048c2e:	607a      	str	r2, [r7, #4]
 8048c30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8048c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8048c36:	6879      	ldr	r1, [r7, #4]
 8048c38:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8048c3c:	440b      	add	r3, r1
 8048c3e:	009b      	lsls	r3, r3, #2
 8048c40:	4413      	add	r3, r2
 8048c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8048c44:	69bb      	ldr	r3, [r7, #24]
 8048c46:	f023 0307 	bic.w	r3, r3, #7
 8048c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8048c4c:	69bb      	ldr	r3, [r7, #24]
 8048c4e:	f003 0307 	and.w	r3, r3, #7
 8048c52:	2b00      	cmp	r3, #0
 8048c54:	d00c      	beq.n	8048c70 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8048c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048c5a:	b672      	cpsid	i
 8048c5c:	f383 8811 	msr	BASEPRI, r3
 8048c60:	f3bf 8f6f 	isb	sy
 8048c64:	f3bf 8f4f 	dsb	sy
 8048c68:	b662      	cpsie	i
 8048c6a:	617b      	str	r3, [r7, #20]
}
 8048c6c:	bf00      	nop
 8048c6e:	e7fe      	b.n	8048c6e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8048c70:	68bb      	ldr	r3, [r7, #8]
 8048c72:	2b00      	cmp	r3, #0
 8048c74:	d01f      	beq.n	8048cb6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8048c76:	2300      	movs	r3, #0
 8048c78:	61fb      	str	r3, [r7, #28]
 8048c7a:	e012      	b.n	8048ca2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8048c7c:	68ba      	ldr	r2, [r7, #8]
 8048c7e:	69fb      	ldr	r3, [r7, #28]
 8048c80:	4413      	add	r3, r2
 8048c82:	7819      	ldrb	r1, [r3, #0]
 8048c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8048c86:	69fb      	ldr	r3, [r7, #28]
 8048c88:	4413      	add	r3, r2
 8048c8a:	3334      	adds	r3, #52	; 0x34
 8048c8c:	460a      	mov	r2, r1
 8048c8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8048c90:	68ba      	ldr	r2, [r7, #8]
 8048c92:	69fb      	ldr	r3, [r7, #28]
 8048c94:	4413      	add	r3, r2
 8048c96:	781b      	ldrb	r3, [r3, #0]
 8048c98:	2b00      	cmp	r3, #0
 8048c9a:	d006      	beq.n	8048caa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8048c9c:	69fb      	ldr	r3, [r7, #28]
 8048c9e:	3301      	adds	r3, #1
 8048ca0:	61fb      	str	r3, [r7, #28]
 8048ca2:	69fb      	ldr	r3, [r7, #28]
 8048ca4:	2b0f      	cmp	r3, #15
 8048ca6:	d9e9      	bls.n	8048c7c <prvInitialiseNewTask+0x58>
 8048ca8:	e000      	b.n	8048cac <prvInitialiseNewTask+0x88>
			{
				break;
 8048caa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8048cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cae:	2200      	movs	r2, #0
 8048cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8048cb4:	e003      	b.n	8048cbe <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8048cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cb8:	2200      	movs	r2, #0
 8048cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8048cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048cc0:	2b06      	cmp	r3, #6
 8048cc2:	d901      	bls.n	8048cc8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8048cc4:	2306      	movs	r3, #6
 8048cc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8048cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8048ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8048cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8048cd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8048cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cd6:	2200      	movs	r2, #0
 8048cd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8048cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cdc:	3304      	adds	r3, #4
 8048cde:	4618      	mov	r0, r3
 8048ce0:	f7fe fee6 	bl	8047ab0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8048ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048ce6:	3318      	adds	r3, #24
 8048ce8:	4618      	mov	r0, r3
 8048cea:	f7fe fee1 	bl	8047ab0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8048cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8048cf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8048cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048cf6:	f1c3 0207 	rsb	r2, r3, #7
 8048cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048cfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8048cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8048d02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8048d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d06:	2200      	movs	r2, #0
 8048d08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8048d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d0e:	2200      	movs	r2, #0
 8048d10:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8048d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d16:	334c      	adds	r3, #76	; 0x4c
 8048d18:	224c      	movs	r2, #76	; 0x4c
 8048d1a:	2100      	movs	r1, #0
 8048d1c:	4618      	mov	r0, r3
 8048d1e:	f00b fee5 	bl	8054aec <memset>
 8048d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d24:	4a0c      	ldr	r2, [pc, #48]	; (8048d58 <prvInitialiseNewTask+0x134>)
 8048d26:	651a      	str	r2, [r3, #80]	; 0x50
 8048d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d2a:	4a0c      	ldr	r2, [pc, #48]	; (8048d5c <prvInitialiseNewTask+0x138>)
 8048d2c:	655a      	str	r2, [r3, #84]	; 0x54
 8048d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d30:	4a0b      	ldr	r2, [pc, #44]	; (8048d60 <prvInitialiseNewTask+0x13c>)
 8048d32:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8048d34:	683a      	ldr	r2, [r7, #0]
 8048d36:	68f9      	ldr	r1, [r7, #12]
 8048d38:	69b8      	ldr	r0, [r7, #24]
 8048d3a:	f000 ffcd 	bl	8049cd8 <pxPortInitialiseStack>
 8048d3e:	4602      	mov	r2, r0
 8048d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8048d42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8048d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048d46:	2b00      	cmp	r3, #0
 8048d48:	d002      	beq.n	8048d50 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8048d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8048d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8048d50:	bf00      	nop
 8048d52:	3720      	adds	r7, #32
 8048d54:	46bd      	mov	sp, r7
 8048d56:	bd80      	pop	{r7, pc}
 8048d58:	2002392c 	.word	0x2002392c
 8048d5c:	20023994 	.word	0x20023994
 8048d60:	200239fc 	.word	0x200239fc

08048d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8048d64:	b580      	push	{r7, lr}
 8048d66:	b082      	sub	sp, #8
 8048d68:	af00      	add	r7, sp, #0
 8048d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8048d6c:	f001 f8be 	bl	8049eec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8048d70:	4b2a      	ldr	r3, [pc, #168]	; (8048e1c <prvAddNewTaskToReadyList+0xb8>)
 8048d72:	681b      	ldr	r3, [r3, #0]
 8048d74:	3301      	adds	r3, #1
 8048d76:	4a29      	ldr	r2, [pc, #164]	; (8048e1c <prvAddNewTaskToReadyList+0xb8>)
 8048d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8048d7a:	4b29      	ldr	r3, [pc, #164]	; (8048e20 <prvAddNewTaskToReadyList+0xbc>)
 8048d7c:	681b      	ldr	r3, [r3, #0]
 8048d7e:	2b00      	cmp	r3, #0
 8048d80:	d109      	bne.n	8048d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8048d82:	4a27      	ldr	r2, [pc, #156]	; (8048e20 <prvAddNewTaskToReadyList+0xbc>)
 8048d84:	687b      	ldr	r3, [r7, #4]
 8048d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8048d88:	4b24      	ldr	r3, [pc, #144]	; (8048e1c <prvAddNewTaskToReadyList+0xb8>)
 8048d8a:	681b      	ldr	r3, [r3, #0]
 8048d8c:	2b01      	cmp	r3, #1
 8048d8e:	d110      	bne.n	8048db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8048d90:	f000 fc9e 	bl	80496d0 <prvInitialiseTaskLists>
 8048d94:	e00d      	b.n	8048db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8048d96:	4b23      	ldr	r3, [pc, #140]	; (8048e24 <prvAddNewTaskToReadyList+0xc0>)
 8048d98:	681b      	ldr	r3, [r3, #0]
 8048d9a:	2b00      	cmp	r3, #0
 8048d9c:	d109      	bne.n	8048db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8048d9e:	4b20      	ldr	r3, [pc, #128]	; (8048e20 <prvAddNewTaskToReadyList+0xbc>)
 8048da0:	681b      	ldr	r3, [r3, #0]
 8048da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8048da4:	687b      	ldr	r3, [r7, #4]
 8048da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048da8:	429a      	cmp	r2, r3
 8048daa:	d802      	bhi.n	8048db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8048dac:	4a1c      	ldr	r2, [pc, #112]	; (8048e20 <prvAddNewTaskToReadyList+0xbc>)
 8048dae:	687b      	ldr	r3, [r7, #4]
 8048db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8048db2:	4b1d      	ldr	r3, [pc, #116]	; (8048e28 <prvAddNewTaskToReadyList+0xc4>)
 8048db4:	681b      	ldr	r3, [r3, #0]
 8048db6:	3301      	adds	r3, #1
 8048db8:	4a1b      	ldr	r2, [pc, #108]	; (8048e28 <prvAddNewTaskToReadyList+0xc4>)
 8048dba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8048dbc:	687b      	ldr	r3, [r7, #4]
 8048dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048dc0:	2201      	movs	r2, #1
 8048dc2:	409a      	lsls	r2, r3
 8048dc4:	4b19      	ldr	r3, [pc, #100]	; (8048e2c <prvAddNewTaskToReadyList+0xc8>)
 8048dc6:	681b      	ldr	r3, [r3, #0]
 8048dc8:	4313      	orrs	r3, r2
 8048dca:	4a18      	ldr	r2, [pc, #96]	; (8048e2c <prvAddNewTaskToReadyList+0xc8>)
 8048dcc:	6013      	str	r3, [r2, #0]
 8048dce:	687b      	ldr	r3, [r7, #4]
 8048dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8048dd2:	4613      	mov	r3, r2
 8048dd4:	009b      	lsls	r3, r3, #2
 8048dd6:	4413      	add	r3, r2
 8048dd8:	009b      	lsls	r3, r3, #2
 8048dda:	4a15      	ldr	r2, [pc, #84]	; (8048e30 <prvAddNewTaskToReadyList+0xcc>)
 8048ddc:	441a      	add	r2, r3
 8048dde:	687b      	ldr	r3, [r7, #4]
 8048de0:	3304      	adds	r3, #4
 8048de2:	4619      	mov	r1, r3
 8048de4:	4610      	mov	r0, r2
 8048de6:	f7fe fe70 	bl	8047aca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8048dea:	f001 f8b3 	bl	8049f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8048dee:	4b0d      	ldr	r3, [pc, #52]	; (8048e24 <prvAddNewTaskToReadyList+0xc0>)
 8048df0:	681b      	ldr	r3, [r3, #0]
 8048df2:	2b00      	cmp	r3, #0
 8048df4:	d00e      	beq.n	8048e14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8048df6:	4b0a      	ldr	r3, [pc, #40]	; (8048e20 <prvAddNewTaskToReadyList+0xbc>)
 8048df8:	681b      	ldr	r3, [r3, #0]
 8048dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8048dfc:	687b      	ldr	r3, [r7, #4]
 8048dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048e00:	429a      	cmp	r2, r3
 8048e02:	d207      	bcs.n	8048e14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8048e04:	4b0b      	ldr	r3, [pc, #44]	; (8048e34 <prvAddNewTaskToReadyList+0xd0>)
 8048e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048e0a:	601a      	str	r2, [r3, #0]
 8048e0c:	f3bf 8f4f 	dsb	sy
 8048e10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8048e14:	bf00      	nop
 8048e16:	3708      	adds	r7, #8
 8048e18:	46bd      	mov	sp, r7
 8048e1a:	bd80      	pop	{r7, pc}
 8048e1c:	2000701c 	.word	0x2000701c
 8048e20:	20006f1c 	.word	0x20006f1c
 8048e24:	20007028 	.word	0x20007028
 8048e28:	20007038 	.word	0x20007038
 8048e2c:	20007024 	.word	0x20007024
 8048e30:	20006f20 	.word	0x20006f20
 8048e34:	e000ed04 	.word	0xe000ed04

08048e38 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8048e38:	b580      	push	{r7, lr}
 8048e3a:	b084      	sub	sp, #16
 8048e3c:	af00      	add	r7, sp, #0
 8048e3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8048e40:	f001 f854 	bl	8049eec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8048e44:	687b      	ldr	r3, [r7, #4]
 8048e46:	2b00      	cmp	r3, #0
 8048e48:	d102      	bne.n	8048e50 <vTaskDelete+0x18>
 8048e4a:	4b3a      	ldr	r3, [pc, #232]	; (8048f34 <vTaskDelete+0xfc>)
 8048e4c:	681b      	ldr	r3, [r3, #0]
 8048e4e:	e000      	b.n	8048e52 <vTaskDelete+0x1a>
 8048e50:	687b      	ldr	r3, [r7, #4]
 8048e52:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8048e54:	68fb      	ldr	r3, [r7, #12]
 8048e56:	3304      	adds	r3, #4
 8048e58:	4618      	mov	r0, r3
 8048e5a:	f7fe fe93 	bl	8047b84 <uxListRemove>
 8048e5e:	4603      	mov	r3, r0
 8048e60:	2b00      	cmp	r3, #0
 8048e62:	d115      	bne.n	8048e90 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8048e64:	68fb      	ldr	r3, [r7, #12]
 8048e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8048e68:	4933      	ldr	r1, [pc, #204]	; (8048f38 <vTaskDelete+0x100>)
 8048e6a:	4613      	mov	r3, r2
 8048e6c:	009b      	lsls	r3, r3, #2
 8048e6e:	4413      	add	r3, r2
 8048e70:	009b      	lsls	r3, r3, #2
 8048e72:	440b      	add	r3, r1
 8048e74:	681b      	ldr	r3, [r3, #0]
 8048e76:	2b00      	cmp	r3, #0
 8048e78:	d10a      	bne.n	8048e90 <vTaskDelete+0x58>
 8048e7a:	68fb      	ldr	r3, [r7, #12]
 8048e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048e7e:	2201      	movs	r2, #1
 8048e80:	fa02 f303 	lsl.w	r3, r2, r3
 8048e84:	43da      	mvns	r2, r3
 8048e86:	4b2d      	ldr	r3, [pc, #180]	; (8048f3c <vTaskDelete+0x104>)
 8048e88:	681b      	ldr	r3, [r3, #0]
 8048e8a:	4013      	ands	r3, r2
 8048e8c:	4a2b      	ldr	r2, [pc, #172]	; (8048f3c <vTaskDelete+0x104>)
 8048e8e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8048e90:	68fb      	ldr	r3, [r7, #12]
 8048e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048e94:	2b00      	cmp	r3, #0
 8048e96:	d004      	beq.n	8048ea2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8048e98:	68fb      	ldr	r3, [r7, #12]
 8048e9a:	3318      	adds	r3, #24
 8048e9c:	4618      	mov	r0, r3
 8048e9e:	f7fe fe71 	bl	8047b84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8048ea2:	4b27      	ldr	r3, [pc, #156]	; (8048f40 <vTaskDelete+0x108>)
 8048ea4:	681b      	ldr	r3, [r3, #0]
 8048ea6:	3301      	adds	r3, #1
 8048ea8:	4a25      	ldr	r2, [pc, #148]	; (8048f40 <vTaskDelete+0x108>)
 8048eaa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8048eac:	4b21      	ldr	r3, [pc, #132]	; (8048f34 <vTaskDelete+0xfc>)
 8048eae:	681b      	ldr	r3, [r3, #0]
 8048eb0:	68fa      	ldr	r2, [r7, #12]
 8048eb2:	429a      	cmp	r2, r3
 8048eb4:	d10b      	bne.n	8048ece <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8048eb6:	68fb      	ldr	r3, [r7, #12]
 8048eb8:	3304      	adds	r3, #4
 8048eba:	4619      	mov	r1, r3
 8048ebc:	4821      	ldr	r0, [pc, #132]	; (8048f44 <vTaskDelete+0x10c>)
 8048ebe:	f7fe fe04 	bl	8047aca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8048ec2:	4b21      	ldr	r3, [pc, #132]	; (8048f48 <vTaskDelete+0x110>)
 8048ec4:	681b      	ldr	r3, [r3, #0]
 8048ec6:	3301      	adds	r3, #1
 8048ec8:	4a1f      	ldr	r2, [pc, #124]	; (8048f48 <vTaskDelete+0x110>)
 8048eca:	6013      	str	r3, [r2, #0]
 8048ecc:	e009      	b.n	8048ee2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8048ece:	4b1f      	ldr	r3, [pc, #124]	; (8048f4c <vTaskDelete+0x114>)
 8048ed0:	681b      	ldr	r3, [r3, #0]
 8048ed2:	3b01      	subs	r3, #1
 8048ed4:	4a1d      	ldr	r2, [pc, #116]	; (8048f4c <vTaskDelete+0x114>)
 8048ed6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8048ed8:	68f8      	ldr	r0, [r7, #12]
 8048eda:	f000 fc67 	bl	80497ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8048ede:	f000 fc9b 	bl	8049818 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8048ee2:	f001 f837 	bl	8049f54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8048ee6:	4b1a      	ldr	r3, [pc, #104]	; (8048f50 <vTaskDelete+0x118>)
 8048ee8:	681b      	ldr	r3, [r3, #0]
 8048eea:	2b00      	cmp	r3, #0
 8048eec:	d01d      	beq.n	8048f2a <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8048eee:	4b11      	ldr	r3, [pc, #68]	; (8048f34 <vTaskDelete+0xfc>)
 8048ef0:	681b      	ldr	r3, [r3, #0]
 8048ef2:	68fa      	ldr	r2, [r7, #12]
 8048ef4:	429a      	cmp	r2, r3
 8048ef6:	d118      	bne.n	8048f2a <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8048ef8:	4b16      	ldr	r3, [pc, #88]	; (8048f54 <vTaskDelete+0x11c>)
 8048efa:	681b      	ldr	r3, [r3, #0]
 8048efc:	2b00      	cmp	r3, #0
 8048efe:	d00c      	beq.n	8048f1a <vTaskDelete+0xe2>
	__asm volatile
 8048f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048f04:	b672      	cpsid	i
 8048f06:	f383 8811 	msr	BASEPRI, r3
 8048f0a:	f3bf 8f6f 	isb	sy
 8048f0e:	f3bf 8f4f 	dsb	sy
 8048f12:	b662      	cpsie	i
 8048f14:	60bb      	str	r3, [r7, #8]
}
 8048f16:	bf00      	nop
 8048f18:	e7fe      	b.n	8048f18 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8048f1a:	4b0f      	ldr	r3, [pc, #60]	; (8048f58 <vTaskDelete+0x120>)
 8048f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048f20:	601a      	str	r2, [r3, #0]
 8048f22:	f3bf 8f4f 	dsb	sy
 8048f26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8048f2a:	bf00      	nop
 8048f2c:	3710      	adds	r7, #16
 8048f2e:	46bd      	mov	sp, r7
 8048f30:	bd80      	pop	{r7, pc}
 8048f32:	bf00      	nop
 8048f34:	20006f1c 	.word	0x20006f1c
 8048f38:	20006f20 	.word	0x20006f20
 8048f3c:	20007024 	.word	0x20007024
 8048f40:	20007038 	.word	0x20007038
 8048f44:	20006ff0 	.word	0x20006ff0
 8048f48:	20007004 	.word	0x20007004
 8048f4c:	2000701c 	.word	0x2000701c
 8048f50:	20007028 	.word	0x20007028
 8048f54:	20007044 	.word	0x20007044
 8048f58:	e000ed04 	.word	0xe000ed04

08048f5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8048f5c:	b580      	push	{r7, lr}
 8048f5e:	b084      	sub	sp, #16
 8048f60:	af00      	add	r7, sp, #0
 8048f62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8048f64:	2300      	movs	r3, #0
 8048f66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8048f68:	687b      	ldr	r3, [r7, #4]
 8048f6a:	2b00      	cmp	r3, #0
 8048f6c:	d019      	beq.n	8048fa2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8048f6e:	4b14      	ldr	r3, [pc, #80]	; (8048fc0 <vTaskDelay+0x64>)
 8048f70:	681b      	ldr	r3, [r3, #0]
 8048f72:	2b00      	cmp	r3, #0
 8048f74:	d00c      	beq.n	8048f90 <vTaskDelay+0x34>
	__asm volatile
 8048f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048f7a:	b672      	cpsid	i
 8048f7c:	f383 8811 	msr	BASEPRI, r3
 8048f80:	f3bf 8f6f 	isb	sy
 8048f84:	f3bf 8f4f 	dsb	sy
 8048f88:	b662      	cpsie	i
 8048f8a:	60bb      	str	r3, [r7, #8]
}
 8048f8c:	bf00      	nop
 8048f8e:	e7fe      	b.n	8048f8e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8048f90:	f000 f888 	bl	80490a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8048f94:	2100      	movs	r1, #0
 8048f96:	6878      	ldr	r0, [r7, #4]
 8048f98:	f000 fe38 	bl	8049c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8048f9c:	f000 f890 	bl	80490c0 <xTaskResumeAll>
 8048fa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8048fa2:	68fb      	ldr	r3, [r7, #12]
 8048fa4:	2b00      	cmp	r3, #0
 8048fa6:	d107      	bne.n	8048fb8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8048fa8:	4b06      	ldr	r3, [pc, #24]	; (8048fc4 <vTaskDelay+0x68>)
 8048faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048fae:	601a      	str	r2, [r3, #0]
 8048fb0:	f3bf 8f4f 	dsb	sy
 8048fb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8048fb8:	bf00      	nop
 8048fba:	3710      	adds	r7, #16
 8048fbc:	46bd      	mov	sp, r7
 8048fbe:	bd80      	pop	{r7, pc}
 8048fc0:	20007044 	.word	0x20007044
 8048fc4:	e000ed04 	.word	0xe000ed04

08048fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8048fc8:	b580      	push	{r7, lr}
 8048fca:	b08a      	sub	sp, #40	; 0x28
 8048fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8048fce:	2300      	movs	r3, #0
 8048fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8048fd2:	2300      	movs	r3, #0
 8048fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8048fd6:	463a      	mov	r2, r7
 8048fd8:	1d39      	adds	r1, r7, #4
 8048fda:	f107 0308 	add.w	r3, r7, #8
 8048fde:	4618      	mov	r0, r3
 8048fe0:	f7f7 fbd2 	bl	8040788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8048fe4:	6839      	ldr	r1, [r7, #0]
 8048fe6:	687b      	ldr	r3, [r7, #4]
 8048fe8:	68ba      	ldr	r2, [r7, #8]
 8048fea:	9202      	str	r2, [sp, #8]
 8048fec:	9301      	str	r3, [sp, #4]
 8048fee:	2300      	movs	r3, #0
 8048ff0:	9300      	str	r3, [sp, #0]
 8048ff2:	2300      	movs	r3, #0
 8048ff4:	460a      	mov	r2, r1
 8048ff6:	4923      	ldr	r1, [pc, #140]	; (8049084 <vTaskStartScheduler+0xbc>)
 8048ff8:	4823      	ldr	r0, [pc, #140]	; (8049088 <vTaskStartScheduler+0xc0>)
 8048ffa:	f7ff fd6b 	bl	8048ad4 <xTaskCreateStatic>
 8048ffe:	4603      	mov	r3, r0
 8049000:	4a22      	ldr	r2, [pc, #136]	; (804908c <vTaskStartScheduler+0xc4>)
 8049002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8049004:	4b21      	ldr	r3, [pc, #132]	; (804908c <vTaskStartScheduler+0xc4>)
 8049006:	681b      	ldr	r3, [r3, #0]
 8049008:	2b00      	cmp	r3, #0
 804900a:	d002      	beq.n	8049012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 804900c:	2301      	movs	r3, #1
 804900e:	617b      	str	r3, [r7, #20]
 8049010:	e001      	b.n	8049016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8049012:	2300      	movs	r3, #0
 8049014:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8049016:	697b      	ldr	r3, [r7, #20]
 8049018:	2b01      	cmp	r3, #1
 804901a:	d11d      	bne.n	8049058 <vTaskStartScheduler+0x90>
	__asm volatile
 804901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049020:	b672      	cpsid	i
 8049022:	f383 8811 	msr	BASEPRI, r3
 8049026:	f3bf 8f6f 	isb	sy
 804902a:	f3bf 8f4f 	dsb	sy
 804902e:	b662      	cpsie	i
 8049030:	613b      	str	r3, [r7, #16]
}
 8049032:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8049034:	4b16      	ldr	r3, [pc, #88]	; (8049090 <vTaskStartScheduler+0xc8>)
 8049036:	681b      	ldr	r3, [r3, #0]
 8049038:	334c      	adds	r3, #76	; 0x4c
 804903a:	4a16      	ldr	r2, [pc, #88]	; (8049094 <vTaskStartScheduler+0xcc>)
 804903c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 804903e:	4b16      	ldr	r3, [pc, #88]	; (8049098 <vTaskStartScheduler+0xd0>)
 8049040:	f04f 32ff 	mov.w	r2, #4294967295
 8049044:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8049046:	4b15      	ldr	r3, [pc, #84]	; (804909c <vTaskStartScheduler+0xd4>)
 8049048:	2201      	movs	r2, #1
 804904a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 804904c:	4b14      	ldr	r3, [pc, #80]	; (80490a0 <vTaskStartScheduler+0xd8>)
 804904e:	2200      	movs	r2, #0
 8049050:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8049052:	f000 fecd 	bl	8049df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8049056:	e010      	b.n	804907a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8049058:	697b      	ldr	r3, [r7, #20]
 804905a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804905e:	d10c      	bne.n	804907a <vTaskStartScheduler+0xb2>
	__asm volatile
 8049060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049064:	b672      	cpsid	i
 8049066:	f383 8811 	msr	BASEPRI, r3
 804906a:	f3bf 8f6f 	isb	sy
 804906e:	f3bf 8f4f 	dsb	sy
 8049072:	b662      	cpsie	i
 8049074:	60fb      	str	r3, [r7, #12]
}
 8049076:	bf00      	nop
 8049078:	e7fe      	b.n	8049078 <vTaskStartScheduler+0xb0>
}
 804907a:	bf00      	nop
 804907c:	3718      	adds	r7, #24
 804907e:	46bd      	mov	sp, r7
 8049080:	bd80      	pop	{r7, pc}
 8049082:	bf00      	nop
 8049084:	080559ac 	.word	0x080559ac
 8049088:	080496a1 	.word	0x080496a1
 804908c:	20007040 	.word	0x20007040
 8049090:	20006f1c 	.word	0x20006f1c
 8049094:	20000088 	.word	0x20000088
 8049098:	2000703c 	.word	0x2000703c
 804909c:	20007028 	.word	0x20007028
 80490a0:	20007020 	.word	0x20007020

080490a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80490a4:	b480      	push	{r7}
 80490a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80490a8:	4b04      	ldr	r3, [pc, #16]	; (80490bc <vTaskSuspendAll+0x18>)
 80490aa:	681b      	ldr	r3, [r3, #0]
 80490ac:	3301      	adds	r3, #1
 80490ae:	4a03      	ldr	r2, [pc, #12]	; (80490bc <vTaskSuspendAll+0x18>)
 80490b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80490b2:	bf00      	nop
 80490b4:	46bd      	mov	sp, r7
 80490b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490ba:	4770      	bx	lr
 80490bc:	20007044 	.word	0x20007044

080490c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80490c0:	b580      	push	{r7, lr}
 80490c2:	b084      	sub	sp, #16
 80490c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80490c6:	2300      	movs	r3, #0
 80490c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80490ca:	2300      	movs	r3, #0
 80490cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80490ce:	4b42      	ldr	r3, [pc, #264]	; (80491d8 <xTaskResumeAll+0x118>)
 80490d0:	681b      	ldr	r3, [r3, #0]
 80490d2:	2b00      	cmp	r3, #0
 80490d4:	d10c      	bne.n	80490f0 <xTaskResumeAll+0x30>
	__asm volatile
 80490d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80490da:	b672      	cpsid	i
 80490dc:	f383 8811 	msr	BASEPRI, r3
 80490e0:	f3bf 8f6f 	isb	sy
 80490e4:	f3bf 8f4f 	dsb	sy
 80490e8:	b662      	cpsie	i
 80490ea:	603b      	str	r3, [r7, #0]
}
 80490ec:	bf00      	nop
 80490ee:	e7fe      	b.n	80490ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80490f0:	f000 fefc 	bl	8049eec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80490f4:	4b38      	ldr	r3, [pc, #224]	; (80491d8 <xTaskResumeAll+0x118>)
 80490f6:	681b      	ldr	r3, [r3, #0]
 80490f8:	3b01      	subs	r3, #1
 80490fa:	4a37      	ldr	r2, [pc, #220]	; (80491d8 <xTaskResumeAll+0x118>)
 80490fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80490fe:	4b36      	ldr	r3, [pc, #216]	; (80491d8 <xTaskResumeAll+0x118>)
 8049100:	681b      	ldr	r3, [r3, #0]
 8049102:	2b00      	cmp	r3, #0
 8049104:	d161      	bne.n	80491ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8049106:	4b35      	ldr	r3, [pc, #212]	; (80491dc <xTaskResumeAll+0x11c>)
 8049108:	681b      	ldr	r3, [r3, #0]
 804910a:	2b00      	cmp	r3, #0
 804910c:	d05d      	beq.n	80491ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 804910e:	e02e      	b.n	804916e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8049110:	4b33      	ldr	r3, [pc, #204]	; (80491e0 <xTaskResumeAll+0x120>)
 8049112:	68db      	ldr	r3, [r3, #12]
 8049114:	68db      	ldr	r3, [r3, #12]
 8049116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8049118:	68fb      	ldr	r3, [r7, #12]
 804911a:	3318      	adds	r3, #24
 804911c:	4618      	mov	r0, r3
 804911e:	f7fe fd31 	bl	8047b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8049122:	68fb      	ldr	r3, [r7, #12]
 8049124:	3304      	adds	r3, #4
 8049126:	4618      	mov	r0, r3
 8049128:	f7fe fd2c 	bl	8047b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 804912c:	68fb      	ldr	r3, [r7, #12]
 804912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049130:	2201      	movs	r2, #1
 8049132:	409a      	lsls	r2, r3
 8049134:	4b2b      	ldr	r3, [pc, #172]	; (80491e4 <xTaskResumeAll+0x124>)
 8049136:	681b      	ldr	r3, [r3, #0]
 8049138:	4313      	orrs	r3, r2
 804913a:	4a2a      	ldr	r2, [pc, #168]	; (80491e4 <xTaskResumeAll+0x124>)
 804913c:	6013      	str	r3, [r2, #0]
 804913e:	68fb      	ldr	r3, [r7, #12]
 8049140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049142:	4613      	mov	r3, r2
 8049144:	009b      	lsls	r3, r3, #2
 8049146:	4413      	add	r3, r2
 8049148:	009b      	lsls	r3, r3, #2
 804914a:	4a27      	ldr	r2, [pc, #156]	; (80491e8 <xTaskResumeAll+0x128>)
 804914c:	441a      	add	r2, r3
 804914e:	68fb      	ldr	r3, [r7, #12]
 8049150:	3304      	adds	r3, #4
 8049152:	4619      	mov	r1, r3
 8049154:	4610      	mov	r0, r2
 8049156:	f7fe fcb8 	bl	8047aca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 804915a:	68fb      	ldr	r3, [r7, #12]
 804915c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804915e:	4b23      	ldr	r3, [pc, #140]	; (80491ec <xTaskResumeAll+0x12c>)
 8049160:	681b      	ldr	r3, [r3, #0]
 8049162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049164:	429a      	cmp	r2, r3
 8049166:	d302      	bcc.n	804916e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8049168:	4b21      	ldr	r3, [pc, #132]	; (80491f0 <xTaskResumeAll+0x130>)
 804916a:	2201      	movs	r2, #1
 804916c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 804916e:	4b1c      	ldr	r3, [pc, #112]	; (80491e0 <xTaskResumeAll+0x120>)
 8049170:	681b      	ldr	r3, [r3, #0]
 8049172:	2b00      	cmp	r3, #0
 8049174:	d1cc      	bne.n	8049110 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8049176:	68fb      	ldr	r3, [r7, #12]
 8049178:	2b00      	cmp	r3, #0
 804917a:	d001      	beq.n	8049180 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 804917c:	f000 fb4c 	bl	8049818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8049180:	4b1c      	ldr	r3, [pc, #112]	; (80491f4 <xTaskResumeAll+0x134>)
 8049182:	681b      	ldr	r3, [r3, #0]
 8049184:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8049186:	687b      	ldr	r3, [r7, #4]
 8049188:	2b00      	cmp	r3, #0
 804918a:	d010      	beq.n	80491ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 804918c:	f000 f858 	bl	8049240 <xTaskIncrementTick>
 8049190:	4603      	mov	r3, r0
 8049192:	2b00      	cmp	r3, #0
 8049194:	d002      	beq.n	804919c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8049196:	4b16      	ldr	r3, [pc, #88]	; (80491f0 <xTaskResumeAll+0x130>)
 8049198:	2201      	movs	r2, #1
 804919a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 804919c:	687b      	ldr	r3, [r7, #4]
 804919e:	3b01      	subs	r3, #1
 80491a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80491a2:	687b      	ldr	r3, [r7, #4]
 80491a4:	2b00      	cmp	r3, #0
 80491a6:	d1f1      	bne.n	804918c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80491a8:	4b12      	ldr	r3, [pc, #72]	; (80491f4 <xTaskResumeAll+0x134>)
 80491aa:	2200      	movs	r2, #0
 80491ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80491ae:	4b10      	ldr	r3, [pc, #64]	; (80491f0 <xTaskResumeAll+0x130>)
 80491b0:	681b      	ldr	r3, [r3, #0]
 80491b2:	2b00      	cmp	r3, #0
 80491b4:	d009      	beq.n	80491ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80491b6:	2301      	movs	r3, #1
 80491b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80491ba:	4b0f      	ldr	r3, [pc, #60]	; (80491f8 <xTaskResumeAll+0x138>)
 80491bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80491c0:	601a      	str	r2, [r3, #0]
 80491c2:	f3bf 8f4f 	dsb	sy
 80491c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80491ca:	f000 fec3 	bl	8049f54 <vPortExitCritical>

	return xAlreadyYielded;
 80491ce:	68bb      	ldr	r3, [r7, #8]
}
 80491d0:	4618      	mov	r0, r3
 80491d2:	3710      	adds	r7, #16
 80491d4:	46bd      	mov	sp, r7
 80491d6:	bd80      	pop	{r7, pc}
 80491d8:	20007044 	.word	0x20007044
 80491dc:	2000701c 	.word	0x2000701c
 80491e0:	20006fdc 	.word	0x20006fdc
 80491e4:	20007024 	.word	0x20007024
 80491e8:	20006f20 	.word	0x20006f20
 80491ec:	20006f1c 	.word	0x20006f1c
 80491f0:	20007030 	.word	0x20007030
 80491f4:	2000702c 	.word	0x2000702c
 80491f8:	e000ed04 	.word	0xe000ed04

080491fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80491fc:	b480      	push	{r7}
 80491fe:	b083      	sub	sp, #12
 8049200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8049202:	4b05      	ldr	r3, [pc, #20]	; (8049218 <xTaskGetTickCount+0x1c>)
 8049204:	681b      	ldr	r3, [r3, #0]
 8049206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8049208:	687b      	ldr	r3, [r7, #4]
}
 804920a:	4618      	mov	r0, r3
 804920c:	370c      	adds	r7, #12
 804920e:	46bd      	mov	sp, r7
 8049210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049214:	4770      	bx	lr
 8049216:	bf00      	nop
 8049218:	20007020 	.word	0x20007020

0804921c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 804921c:	b580      	push	{r7, lr}
 804921e:	b082      	sub	sp, #8
 8049220:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8049222:	f000 ff4b 	bl	804a0bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8049226:	2300      	movs	r3, #0
 8049228:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 804922a:	4b04      	ldr	r3, [pc, #16]	; (804923c <xTaskGetTickCountFromISR+0x20>)
 804922c:	681b      	ldr	r3, [r3, #0]
 804922e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8049230:	683b      	ldr	r3, [r7, #0]
}
 8049232:	4618      	mov	r0, r3
 8049234:	3708      	adds	r7, #8
 8049236:	46bd      	mov	sp, r7
 8049238:	bd80      	pop	{r7, pc}
 804923a:	bf00      	nop
 804923c:	20007020 	.word	0x20007020

08049240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8049240:	b580      	push	{r7, lr}
 8049242:	b086      	sub	sp, #24
 8049244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8049246:	2300      	movs	r3, #0
 8049248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804924a:	4b4f      	ldr	r3, [pc, #316]	; (8049388 <xTaskIncrementTick+0x148>)
 804924c:	681b      	ldr	r3, [r3, #0]
 804924e:	2b00      	cmp	r3, #0
 8049250:	f040 808a 	bne.w	8049368 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8049254:	4b4d      	ldr	r3, [pc, #308]	; (804938c <xTaskIncrementTick+0x14c>)
 8049256:	681b      	ldr	r3, [r3, #0]
 8049258:	3301      	adds	r3, #1
 804925a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 804925c:	4a4b      	ldr	r2, [pc, #300]	; (804938c <xTaskIncrementTick+0x14c>)
 804925e:	693b      	ldr	r3, [r7, #16]
 8049260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8049262:	693b      	ldr	r3, [r7, #16]
 8049264:	2b00      	cmp	r3, #0
 8049266:	d122      	bne.n	80492ae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8049268:	4b49      	ldr	r3, [pc, #292]	; (8049390 <xTaskIncrementTick+0x150>)
 804926a:	681b      	ldr	r3, [r3, #0]
 804926c:	681b      	ldr	r3, [r3, #0]
 804926e:	2b00      	cmp	r3, #0
 8049270:	d00c      	beq.n	804928c <xTaskIncrementTick+0x4c>
	__asm volatile
 8049272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049276:	b672      	cpsid	i
 8049278:	f383 8811 	msr	BASEPRI, r3
 804927c:	f3bf 8f6f 	isb	sy
 8049280:	f3bf 8f4f 	dsb	sy
 8049284:	b662      	cpsie	i
 8049286:	603b      	str	r3, [r7, #0]
}
 8049288:	bf00      	nop
 804928a:	e7fe      	b.n	804928a <xTaskIncrementTick+0x4a>
 804928c:	4b40      	ldr	r3, [pc, #256]	; (8049390 <xTaskIncrementTick+0x150>)
 804928e:	681b      	ldr	r3, [r3, #0]
 8049290:	60fb      	str	r3, [r7, #12]
 8049292:	4b40      	ldr	r3, [pc, #256]	; (8049394 <xTaskIncrementTick+0x154>)
 8049294:	681b      	ldr	r3, [r3, #0]
 8049296:	4a3e      	ldr	r2, [pc, #248]	; (8049390 <xTaskIncrementTick+0x150>)
 8049298:	6013      	str	r3, [r2, #0]
 804929a:	4a3e      	ldr	r2, [pc, #248]	; (8049394 <xTaskIncrementTick+0x154>)
 804929c:	68fb      	ldr	r3, [r7, #12]
 804929e:	6013      	str	r3, [r2, #0]
 80492a0:	4b3d      	ldr	r3, [pc, #244]	; (8049398 <xTaskIncrementTick+0x158>)
 80492a2:	681b      	ldr	r3, [r3, #0]
 80492a4:	3301      	adds	r3, #1
 80492a6:	4a3c      	ldr	r2, [pc, #240]	; (8049398 <xTaskIncrementTick+0x158>)
 80492a8:	6013      	str	r3, [r2, #0]
 80492aa:	f000 fab5 	bl	8049818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80492ae:	4b3b      	ldr	r3, [pc, #236]	; (804939c <xTaskIncrementTick+0x15c>)
 80492b0:	681b      	ldr	r3, [r3, #0]
 80492b2:	693a      	ldr	r2, [r7, #16]
 80492b4:	429a      	cmp	r2, r3
 80492b6:	d348      	bcc.n	804934a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80492b8:	4b35      	ldr	r3, [pc, #212]	; (8049390 <xTaskIncrementTick+0x150>)
 80492ba:	681b      	ldr	r3, [r3, #0]
 80492bc:	681b      	ldr	r3, [r3, #0]
 80492be:	2b00      	cmp	r3, #0
 80492c0:	d104      	bne.n	80492cc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80492c2:	4b36      	ldr	r3, [pc, #216]	; (804939c <xTaskIncrementTick+0x15c>)
 80492c4:	f04f 32ff 	mov.w	r2, #4294967295
 80492c8:	601a      	str	r2, [r3, #0]
					break;
 80492ca:	e03e      	b.n	804934a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80492cc:	4b30      	ldr	r3, [pc, #192]	; (8049390 <xTaskIncrementTick+0x150>)
 80492ce:	681b      	ldr	r3, [r3, #0]
 80492d0:	68db      	ldr	r3, [r3, #12]
 80492d2:	68db      	ldr	r3, [r3, #12]
 80492d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80492d6:	68bb      	ldr	r3, [r7, #8]
 80492d8:	685b      	ldr	r3, [r3, #4]
 80492da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80492dc:	693a      	ldr	r2, [r7, #16]
 80492de:	687b      	ldr	r3, [r7, #4]
 80492e0:	429a      	cmp	r2, r3
 80492e2:	d203      	bcs.n	80492ec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80492e4:	4a2d      	ldr	r2, [pc, #180]	; (804939c <xTaskIncrementTick+0x15c>)
 80492e6:	687b      	ldr	r3, [r7, #4]
 80492e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80492ea:	e02e      	b.n	804934a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80492ec:	68bb      	ldr	r3, [r7, #8]
 80492ee:	3304      	adds	r3, #4
 80492f0:	4618      	mov	r0, r3
 80492f2:	f7fe fc47 	bl	8047b84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80492f6:	68bb      	ldr	r3, [r7, #8]
 80492f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80492fa:	2b00      	cmp	r3, #0
 80492fc:	d004      	beq.n	8049308 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80492fe:	68bb      	ldr	r3, [r7, #8]
 8049300:	3318      	adds	r3, #24
 8049302:	4618      	mov	r0, r3
 8049304:	f7fe fc3e 	bl	8047b84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8049308:	68bb      	ldr	r3, [r7, #8]
 804930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804930c:	2201      	movs	r2, #1
 804930e:	409a      	lsls	r2, r3
 8049310:	4b23      	ldr	r3, [pc, #140]	; (80493a0 <xTaskIncrementTick+0x160>)
 8049312:	681b      	ldr	r3, [r3, #0]
 8049314:	4313      	orrs	r3, r2
 8049316:	4a22      	ldr	r2, [pc, #136]	; (80493a0 <xTaskIncrementTick+0x160>)
 8049318:	6013      	str	r3, [r2, #0]
 804931a:	68bb      	ldr	r3, [r7, #8]
 804931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804931e:	4613      	mov	r3, r2
 8049320:	009b      	lsls	r3, r3, #2
 8049322:	4413      	add	r3, r2
 8049324:	009b      	lsls	r3, r3, #2
 8049326:	4a1f      	ldr	r2, [pc, #124]	; (80493a4 <xTaskIncrementTick+0x164>)
 8049328:	441a      	add	r2, r3
 804932a:	68bb      	ldr	r3, [r7, #8]
 804932c:	3304      	adds	r3, #4
 804932e:	4619      	mov	r1, r3
 8049330:	4610      	mov	r0, r2
 8049332:	f7fe fbca 	bl	8047aca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8049336:	68bb      	ldr	r3, [r7, #8]
 8049338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804933a:	4b1b      	ldr	r3, [pc, #108]	; (80493a8 <xTaskIncrementTick+0x168>)
 804933c:	681b      	ldr	r3, [r3, #0]
 804933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049340:	429a      	cmp	r2, r3
 8049342:	d3b9      	bcc.n	80492b8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8049344:	2301      	movs	r3, #1
 8049346:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8049348:	e7b6      	b.n	80492b8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 804934a:	4b17      	ldr	r3, [pc, #92]	; (80493a8 <xTaskIncrementTick+0x168>)
 804934c:	681b      	ldr	r3, [r3, #0]
 804934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049350:	4914      	ldr	r1, [pc, #80]	; (80493a4 <xTaskIncrementTick+0x164>)
 8049352:	4613      	mov	r3, r2
 8049354:	009b      	lsls	r3, r3, #2
 8049356:	4413      	add	r3, r2
 8049358:	009b      	lsls	r3, r3, #2
 804935a:	440b      	add	r3, r1
 804935c:	681b      	ldr	r3, [r3, #0]
 804935e:	2b01      	cmp	r3, #1
 8049360:	d907      	bls.n	8049372 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8049362:	2301      	movs	r3, #1
 8049364:	617b      	str	r3, [r7, #20]
 8049366:	e004      	b.n	8049372 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8049368:	4b10      	ldr	r3, [pc, #64]	; (80493ac <xTaskIncrementTick+0x16c>)
 804936a:	681b      	ldr	r3, [r3, #0]
 804936c:	3301      	adds	r3, #1
 804936e:	4a0f      	ldr	r2, [pc, #60]	; (80493ac <xTaskIncrementTick+0x16c>)
 8049370:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8049372:	4b0f      	ldr	r3, [pc, #60]	; (80493b0 <xTaskIncrementTick+0x170>)
 8049374:	681b      	ldr	r3, [r3, #0]
 8049376:	2b00      	cmp	r3, #0
 8049378:	d001      	beq.n	804937e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 804937a:	2301      	movs	r3, #1
 804937c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 804937e:	697b      	ldr	r3, [r7, #20]
}
 8049380:	4618      	mov	r0, r3
 8049382:	3718      	adds	r7, #24
 8049384:	46bd      	mov	sp, r7
 8049386:	bd80      	pop	{r7, pc}
 8049388:	20007044 	.word	0x20007044
 804938c:	20007020 	.word	0x20007020
 8049390:	20006fd4 	.word	0x20006fd4
 8049394:	20006fd8 	.word	0x20006fd8
 8049398:	20007034 	.word	0x20007034
 804939c:	2000703c 	.word	0x2000703c
 80493a0:	20007024 	.word	0x20007024
 80493a4:	20006f20 	.word	0x20006f20
 80493a8:	20006f1c 	.word	0x20006f1c
 80493ac:	2000702c 	.word	0x2000702c
 80493b0:	20007030 	.word	0x20007030

080493b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80493b4:	b480      	push	{r7}
 80493b6:	b087      	sub	sp, #28
 80493b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80493ba:	4b2a      	ldr	r3, [pc, #168]	; (8049464 <vTaskSwitchContext+0xb0>)
 80493bc:	681b      	ldr	r3, [r3, #0]
 80493be:	2b00      	cmp	r3, #0
 80493c0:	d003      	beq.n	80493ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80493c2:	4b29      	ldr	r3, [pc, #164]	; (8049468 <vTaskSwitchContext+0xb4>)
 80493c4:	2201      	movs	r2, #1
 80493c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80493c8:	e046      	b.n	8049458 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80493ca:	4b27      	ldr	r3, [pc, #156]	; (8049468 <vTaskSwitchContext+0xb4>)
 80493cc:	2200      	movs	r2, #0
 80493ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80493d0:	4b26      	ldr	r3, [pc, #152]	; (804946c <vTaskSwitchContext+0xb8>)
 80493d2:	681b      	ldr	r3, [r3, #0]
 80493d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80493d6:	68fb      	ldr	r3, [r7, #12]
 80493d8:	fab3 f383 	clz	r3, r3
 80493dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80493de:	7afb      	ldrb	r3, [r7, #11]
 80493e0:	f1c3 031f 	rsb	r3, r3, #31
 80493e4:	617b      	str	r3, [r7, #20]
 80493e6:	4922      	ldr	r1, [pc, #136]	; (8049470 <vTaskSwitchContext+0xbc>)
 80493e8:	697a      	ldr	r2, [r7, #20]
 80493ea:	4613      	mov	r3, r2
 80493ec:	009b      	lsls	r3, r3, #2
 80493ee:	4413      	add	r3, r2
 80493f0:	009b      	lsls	r3, r3, #2
 80493f2:	440b      	add	r3, r1
 80493f4:	681b      	ldr	r3, [r3, #0]
 80493f6:	2b00      	cmp	r3, #0
 80493f8:	d10c      	bne.n	8049414 <vTaskSwitchContext+0x60>
	__asm volatile
 80493fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80493fe:	b672      	cpsid	i
 8049400:	f383 8811 	msr	BASEPRI, r3
 8049404:	f3bf 8f6f 	isb	sy
 8049408:	f3bf 8f4f 	dsb	sy
 804940c:	b662      	cpsie	i
 804940e:	607b      	str	r3, [r7, #4]
}
 8049410:	bf00      	nop
 8049412:	e7fe      	b.n	8049412 <vTaskSwitchContext+0x5e>
 8049414:	697a      	ldr	r2, [r7, #20]
 8049416:	4613      	mov	r3, r2
 8049418:	009b      	lsls	r3, r3, #2
 804941a:	4413      	add	r3, r2
 804941c:	009b      	lsls	r3, r3, #2
 804941e:	4a14      	ldr	r2, [pc, #80]	; (8049470 <vTaskSwitchContext+0xbc>)
 8049420:	4413      	add	r3, r2
 8049422:	613b      	str	r3, [r7, #16]
 8049424:	693b      	ldr	r3, [r7, #16]
 8049426:	685b      	ldr	r3, [r3, #4]
 8049428:	685a      	ldr	r2, [r3, #4]
 804942a:	693b      	ldr	r3, [r7, #16]
 804942c:	605a      	str	r2, [r3, #4]
 804942e:	693b      	ldr	r3, [r7, #16]
 8049430:	685a      	ldr	r2, [r3, #4]
 8049432:	693b      	ldr	r3, [r7, #16]
 8049434:	3308      	adds	r3, #8
 8049436:	429a      	cmp	r2, r3
 8049438:	d104      	bne.n	8049444 <vTaskSwitchContext+0x90>
 804943a:	693b      	ldr	r3, [r7, #16]
 804943c:	685b      	ldr	r3, [r3, #4]
 804943e:	685a      	ldr	r2, [r3, #4]
 8049440:	693b      	ldr	r3, [r7, #16]
 8049442:	605a      	str	r2, [r3, #4]
 8049444:	693b      	ldr	r3, [r7, #16]
 8049446:	685b      	ldr	r3, [r3, #4]
 8049448:	68db      	ldr	r3, [r3, #12]
 804944a:	4a0a      	ldr	r2, [pc, #40]	; (8049474 <vTaskSwitchContext+0xc0>)
 804944c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 804944e:	4b09      	ldr	r3, [pc, #36]	; (8049474 <vTaskSwitchContext+0xc0>)
 8049450:	681b      	ldr	r3, [r3, #0]
 8049452:	334c      	adds	r3, #76	; 0x4c
 8049454:	4a08      	ldr	r2, [pc, #32]	; (8049478 <vTaskSwitchContext+0xc4>)
 8049456:	6013      	str	r3, [r2, #0]
}
 8049458:	bf00      	nop
 804945a:	371c      	adds	r7, #28
 804945c:	46bd      	mov	sp, r7
 804945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049462:	4770      	bx	lr
 8049464:	20007044 	.word	0x20007044
 8049468:	20007030 	.word	0x20007030
 804946c:	20007024 	.word	0x20007024
 8049470:	20006f20 	.word	0x20006f20
 8049474:	20006f1c 	.word	0x20006f1c
 8049478:	20000088 	.word	0x20000088

0804947c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 804947c:	b580      	push	{r7, lr}
 804947e:	b084      	sub	sp, #16
 8049480:	af00      	add	r7, sp, #0
 8049482:	6078      	str	r0, [r7, #4]
 8049484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8049486:	687b      	ldr	r3, [r7, #4]
 8049488:	2b00      	cmp	r3, #0
 804948a:	d10c      	bne.n	80494a6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 804948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049490:	b672      	cpsid	i
 8049492:	f383 8811 	msr	BASEPRI, r3
 8049496:	f3bf 8f6f 	isb	sy
 804949a:	f3bf 8f4f 	dsb	sy
 804949e:	b662      	cpsie	i
 80494a0:	60fb      	str	r3, [r7, #12]
}
 80494a2:	bf00      	nop
 80494a4:	e7fe      	b.n	80494a4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80494a6:	4b07      	ldr	r3, [pc, #28]	; (80494c4 <vTaskPlaceOnEventList+0x48>)
 80494a8:	681b      	ldr	r3, [r3, #0]
 80494aa:	3318      	adds	r3, #24
 80494ac:	4619      	mov	r1, r3
 80494ae:	6878      	ldr	r0, [r7, #4]
 80494b0:	f7fe fb2f 	bl	8047b12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80494b4:	2101      	movs	r1, #1
 80494b6:	6838      	ldr	r0, [r7, #0]
 80494b8:	f000 fba8 	bl	8049c0c <prvAddCurrentTaskToDelayedList>
}
 80494bc:	bf00      	nop
 80494be:	3710      	adds	r7, #16
 80494c0:	46bd      	mov	sp, r7
 80494c2:	bd80      	pop	{r7, pc}
 80494c4:	20006f1c 	.word	0x20006f1c

080494c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80494c8:	b580      	push	{r7, lr}
 80494ca:	b086      	sub	sp, #24
 80494cc:	af00      	add	r7, sp, #0
 80494ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80494d0:	687b      	ldr	r3, [r7, #4]
 80494d2:	68db      	ldr	r3, [r3, #12]
 80494d4:	68db      	ldr	r3, [r3, #12]
 80494d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80494d8:	693b      	ldr	r3, [r7, #16]
 80494da:	2b00      	cmp	r3, #0
 80494dc:	d10c      	bne.n	80494f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80494de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80494e2:	b672      	cpsid	i
 80494e4:	f383 8811 	msr	BASEPRI, r3
 80494e8:	f3bf 8f6f 	isb	sy
 80494ec:	f3bf 8f4f 	dsb	sy
 80494f0:	b662      	cpsie	i
 80494f2:	60fb      	str	r3, [r7, #12]
}
 80494f4:	bf00      	nop
 80494f6:	e7fe      	b.n	80494f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80494f8:	693b      	ldr	r3, [r7, #16]
 80494fa:	3318      	adds	r3, #24
 80494fc:	4618      	mov	r0, r3
 80494fe:	f7fe fb41 	bl	8047b84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8049502:	4b1d      	ldr	r3, [pc, #116]	; (8049578 <xTaskRemoveFromEventList+0xb0>)
 8049504:	681b      	ldr	r3, [r3, #0]
 8049506:	2b00      	cmp	r3, #0
 8049508:	d11c      	bne.n	8049544 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 804950a:	693b      	ldr	r3, [r7, #16]
 804950c:	3304      	adds	r3, #4
 804950e:	4618      	mov	r0, r3
 8049510:	f7fe fb38 	bl	8047b84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8049514:	693b      	ldr	r3, [r7, #16]
 8049516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049518:	2201      	movs	r2, #1
 804951a:	409a      	lsls	r2, r3
 804951c:	4b17      	ldr	r3, [pc, #92]	; (804957c <xTaskRemoveFromEventList+0xb4>)
 804951e:	681b      	ldr	r3, [r3, #0]
 8049520:	4313      	orrs	r3, r2
 8049522:	4a16      	ldr	r2, [pc, #88]	; (804957c <xTaskRemoveFromEventList+0xb4>)
 8049524:	6013      	str	r3, [r2, #0]
 8049526:	693b      	ldr	r3, [r7, #16]
 8049528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804952a:	4613      	mov	r3, r2
 804952c:	009b      	lsls	r3, r3, #2
 804952e:	4413      	add	r3, r2
 8049530:	009b      	lsls	r3, r3, #2
 8049532:	4a13      	ldr	r2, [pc, #76]	; (8049580 <xTaskRemoveFromEventList+0xb8>)
 8049534:	441a      	add	r2, r3
 8049536:	693b      	ldr	r3, [r7, #16]
 8049538:	3304      	adds	r3, #4
 804953a:	4619      	mov	r1, r3
 804953c:	4610      	mov	r0, r2
 804953e:	f7fe fac4 	bl	8047aca <vListInsertEnd>
 8049542:	e005      	b.n	8049550 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8049544:	693b      	ldr	r3, [r7, #16]
 8049546:	3318      	adds	r3, #24
 8049548:	4619      	mov	r1, r3
 804954a:	480e      	ldr	r0, [pc, #56]	; (8049584 <xTaskRemoveFromEventList+0xbc>)
 804954c:	f7fe fabd 	bl	8047aca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8049550:	693b      	ldr	r3, [r7, #16]
 8049552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049554:	4b0c      	ldr	r3, [pc, #48]	; (8049588 <xTaskRemoveFromEventList+0xc0>)
 8049556:	681b      	ldr	r3, [r3, #0]
 8049558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804955a:	429a      	cmp	r2, r3
 804955c:	d905      	bls.n	804956a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 804955e:	2301      	movs	r3, #1
 8049560:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8049562:	4b0a      	ldr	r3, [pc, #40]	; (804958c <xTaskRemoveFromEventList+0xc4>)
 8049564:	2201      	movs	r2, #1
 8049566:	601a      	str	r2, [r3, #0]
 8049568:	e001      	b.n	804956e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 804956a:	2300      	movs	r3, #0
 804956c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 804956e:	697b      	ldr	r3, [r7, #20]
}
 8049570:	4618      	mov	r0, r3
 8049572:	3718      	adds	r7, #24
 8049574:	46bd      	mov	sp, r7
 8049576:	bd80      	pop	{r7, pc}
 8049578:	20007044 	.word	0x20007044
 804957c:	20007024 	.word	0x20007024
 8049580:	20006f20 	.word	0x20006f20
 8049584:	20006fdc 	.word	0x20006fdc
 8049588:	20006f1c 	.word	0x20006f1c
 804958c:	20007030 	.word	0x20007030

08049590 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8049590:	b480      	push	{r7}
 8049592:	b083      	sub	sp, #12
 8049594:	af00      	add	r7, sp, #0
 8049596:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8049598:	4b06      	ldr	r3, [pc, #24]	; (80495b4 <vTaskInternalSetTimeOutState+0x24>)
 804959a:	681a      	ldr	r2, [r3, #0]
 804959c:	687b      	ldr	r3, [r7, #4]
 804959e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80495a0:	4b05      	ldr	r3, [pc, #20]	; (80495b8 <vTaskInternalSetTimeOutState+0x28>)
 80495a2:	681a      	ldr	r2, [r3, #0]
 80495a4:	687b      	ldr	r3, [r7, #4]
 80495a6:	605a      	str	r2, [r3, #4]
}
 80495a8:	bf00      	nop
 80495aa:	370c      	adds	r7, #12
 80495ac:	46bd      	mov	sp, r7
 80495ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80495b2:	4770      	bx	lr
 80495b4:	20007034 	.word	0x20007034
 80495b8:	20007020 	.word	0x20007020

080495bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80495bc:	b580      	push	{r7, lr}
 80495be:	b088      	sub	sp, #32
 80495c0:	af00      	add	r7, sp, #0
 80495c2:	6078      	str	r0, [r7, #4]
 80495c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80495c6:	687b      	ldr	r3, [r7, #4]
 80495c8:	2b00      	cmp	r3, #0
 80495ca:	d10c      	bne.n	80495e6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80495cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80495d0:	b672      	cpsid	i
 80495d2:	f383 8811 	msr	BASEPRI, r3
 80495d6:	f3bf 8f6f 	isb	sy
 80495da:	f3bf 8f4f 	dsb	sy
 80495de:	b662      	cpsie	i
 80495e0:	613b      	str	r3, [r7, #16]
}
 80495e2:	bf00      	nop
 80495e4:	e7fe      	b.n	80495e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80495e6:	683b      	ldr	r3, [r7, #0]
 80495e8:	2b00      	cmp	r3, #0
 80495ea:	d10c      	bne.n	8049606 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80495ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80495f0:	b672      	cpsid	i
 80495f2:	f383 8811 	msr	BASEPRI, r3
 80495f6:	f3bf 8f6f 	isb	sy
 80495fa:	f3bf 8f4f 	dsb	sy
 80495fe:	b662      	cpsie	i
 8049600:	60fb      	str	r3, [r7, #12]
}
 8049602:	bf00      	nop
 8049604:	e7fe      	b.n	8049604 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8049606:	f000 fc71 	bl	8049eec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 804960a:	4b1d      	ldr	r3, [pc, #116]	; (8049680 <xTaskCheckForTimeOut+0xc4>)
 804960c:	681b      	ldr	r3, [r3, #0]
 804960e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8049610:	687b      	ldr	r3, [r7, #4]
 8049612:	685b      	ldr	r3, [r3, #4]
 8049614:	69ba      	ldr	r2, [r7, #24]
 8049616:	1ad3      	subs	r3, r2, r3
 8049618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 804961a:	683b      	ldr	r3, [r7, #0]
 804961c:	681b      	ldr	r3, [r3, #0]
 804961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049622:	d102      	bne.n	804962a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8049624:	2300      	movs	r3, #0
 8049626:	61fb      	str	r3, [r7, #28]
 8049628:	e023      	b.n	8049672 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 804962a:	687b      	ldr	r3, [r7, #4]
 804962c:	681a      	ldr	r2, [r3, #0]
 804962e:	4b15      	ldr	r3, [pc, #84]	; (8049684 <xTaskCheckForTimeOut+0xc8>)
 8049630:	681b      	ldr	r3, [r3, #0]
 8049632:	429a      	cmp	r2, r3
 8049634:	d007      	beq.n	8049646 <xTaskCheckForTimeOut+0x8a>
 8049636:	687b      	ldr	r3, [r7, #4]
 8049638:	685b      	ldr	r3, [r3, #4]
 804963a:	69ba      	ldr	r2, [r7, #24]
 804963c:	429a      	cmp	r2, r3
 804963e:	d302      	bcc.n	8049646 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8049640:	2301      	movs	r3, #1
 8049642:	61fb      	str	r3, [r7, #28]
 8049644:	e015      	b.n	8049672 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8049646:	683b      	ldr	r3, [r7, #0]
 8049648:	681b      	ldr	r3, [r3, #0]
 804964a:	697a      	ldr	r2, [r7, #20]
 804964c:	429a      	cmp	r2, r3
 804964e:	d20b      	bcs.n	8049668 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8049650:	683b      	ldr	r3, [r7, #0]
 8049652:	681a      	ldr	r2, [r3, #0]
 8049654:	697b      	ldr	r3, [r7, #20]
 8049656:	1ad2      	subs	r2, r2, r3
 8049658:	683b      	ldr	r3, [r7, #0]
 804965a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 804965c:	6878      	ldr	r0, [r7, #4]
 804965e:	f7ff ff97 	bl	8049590 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8049662:	2300      	movs	r3, #0
 8049664:	61fb      	str	r3, [r7, #28]
 8049666:	e004      	b.n	8049672 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8049668:	683b      	ldr	r3, [r7, #0]
 804966a:	2200      	movs	r2, #0
 804966c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 804966e:	2301      	movs	r3, #1
 8049670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8049672:	f000 fc6f 	bl	8049f54 <vPortExitCritical>

	return xReturn;
 8049676:	69fb      	ldr	r3, [r7, #28]
}
 8049678:	4618      	mov	r0, r3
 804967a:	3720      	adds	r7, #32
 804967c:	46bd      	mov	sp, r7
 804967e:	bd80      	pop	{r7, pc}
 8049680:	20007020 	.word	0x20007020
 8049684:	20007034 	.word	0x20007034

08049688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8049688:	b480      	push	{r7}
 804968a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 804968c:	4b03      	ldr	r3, [pc, #12]	; (804969c <vTaskMissedYield+0x14>)
 804968e:	2201      	movs	r2, #1
 8049690:	601a      	str	r2, [r3, #0]
}
 8049692:	bf00      	nop
 8049694:	46bd      	mov	sp, r7
 8049696:	f85d 7b04 	ldr.w	r7, [sp], #4
 804969a:	4770      	bx	lr
 804969c:	20007030 	.word	0x20007030

080496a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80496a0:	b580      	push	{r7, lr}
 80496a2:	b082      	sub	sp, #8
 80496a4:	af00      	add	r7, sp, #0
 80496a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80496a8:	f000 f852 	bl	8049750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80496ac:	4b06      	ldr	r3, [pc, #24]	; (80496c8 <prvIdleTask+0x28>)
 80496ae:	681b      	ldr	r3, [r3, #0]
 80496b0:	2b01      	cmp	r3, #1
 80496b2:	d9f9      	bls.n	80496a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80496b4:	4b05      	ldr	r3, [pc, #20]	; (80496cc <prvIdleTask+0x2c>)
 80496b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80496ba:	601a      	str	r2, [r3, #0]
 80496bc:	f3bf 8f4f 	dsb	sy
 80496c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80496c4:	e7f0      	b.n	80496a8 <prvIdleTask+0x8>
 80496c6:	bf00      	nop
 80496c8:	20006f20 	.word	0x20006f20
 80496cc:	e000ed04 	.word	0xe000ed04

080496d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80496d0:	b580      	push	{r7, lr}
 80496d2:	b082      	sub	sp, #8
 80496d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80496d6:	2300      	movs	r3, #0
 80496d8:	607b      	str	r3, [r7, #4]
 80496da:	e00c      	b.n	80496f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80496dc:	687a      	ldr	r2, [r7, #4]
 80496de:	4613      	mov	r3, r2
 80496e0:	009b      	lsls	r3, r3, #2
 80496e2:	4413      	add	r3, r2
 80496e4:	009b      	lsls	r3, r3, #2
 80496e6:	4a12      	ldr	r2, [pc, #72]	; (8049730 <prvInitialiseTaskLists+0x60>)
 80496e8:	4413      	add	r3, r2
 80496ea:	4618      	mov	r0, r3
 80496ec:	f7fe f9c0 	bl	8047a70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80496f0:	687b      	ldr	r3, [r7, #4]
 80496f2:	3301      	adds	r3, #1
 80496f4:	607b      	str	r3, [r7, #4]
 80496f6:	687b      	ldr	r3, [r7, #4]
 80496f8:	2b06      	cmp	r3, #6
 80496fa:	d9ef      	bls.n	80496dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80496fc:	480d      	ldr	r0, [pc, #52]	; (8049734 <prvInitialiseTaskLists+0x64>)
 80496fe:	f7fe f9b7 	bl	8047a70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8049702:	480d      	ldr	r0, [pc, #52]	; (8049738 <prvInitialiseTaskLists+0x68>)
 8049704:	f7fe f9b4 	bl	8047a70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8049708:	480c      	ldr	r0, [pc, #48]	; (804973c <prvInitialiseTaskLists+0x6c>)
 804970a:	f7fe f9b1 	bl	8047a70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 804970e:	480c      	ldr	r0, [pc, #48]	; (8049740 <prvInitialiseTaskLists+0x70>)
 8049710:	f7fe f9ae 	bl	8047a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8049714:	480b      	ldr	r0, [pc, #44]	; (8049744 <prvInitialiseTaskLists+0x74>)
 8049716:	f7fe f9ab 	bl	8047a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 804971a:	4b0b      	ldr	r3, [pc, #44]	; (8049748 <prvInitialiseTaskLists+0x78>)
 804971c:	4a05      	ldr	r2, [pc, #20]	; (8049734 <prvInitialiseTaskLists+0x64>)
 804971e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8049720:	4b0a      	ldr	r3, [pc, #40]	; (804974c <prvInitialiseTaskLists+0x7c>)
 8049722:	4a05      	ldr	r2, [pc, #20]	; (8049738 <prvInitialiseTaskLists+0x68>)
 8049724:	601a      	str	r2, [r3, #0]
}
 8049726:	bf00      	nop
 8049728:	3708      	adds	r7, #8
 804972a:	46bd      	mov	sp, r7
 804972c:	bd80      	pop	{r7, pc}
 804972e:	bf00      	nop
 8049730:	20006f20 	.word	0x20006f20
 8049734:	20006fac 	.word	0x20006fac
 8049738:	20006fc0 	.word	0x20006fc0
 804973c:	20006fdc 	.word	0x20006fdc
 8049740:	20006ff0 	.word	0x20006ff0
 8049744:	20007008 	.word	0x20007008
 8049748:	20006fd4 	.word	0x20006fd4
 804974c:	20006fd8 	.word	0x20006fd8

08049750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8049750:	b580      	push	{r7, lr}
 8049752:	b082      	sub	sp, #8
 8049754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8049756:	e019      	b.n	804978c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8049758:	f000 fbc8 	bl	8049eec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804975c:	4b10      	ldr	r3, [pc, #64]	; (80497a0 <prvCheckTasksWaitingTermination+0x50>)
 804975e:	68db      	ldr	r3, [r3, #12]
 8049760:	68db      	ldr	r3, [r3, #12]
 8049762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8049764:	687b      	ldr	r3, [r7, #4]
 8049766:	3304      	adds	r3, #4
 8049768:	4618      	mov	r0, r3
 804976a:	f7fe fa0b 	bl	8047b84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 804976e:	4b0d      	ldr	r3, [pc, #52]	; (80497a4 <prvCheckTasksWaitingTermination+0x54>)
 8049770:	681b      	ldr	r3, [r3, #0]
 8049772:	3b01      	subs	r3, #1
 8049774:	4a0b      	ldr	r2, [pc, #44]	; (80497a4 <prvCheckTasksWaitingTermination+0x54>)
 8049776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8049778:	4b0b      	ldr	r3, [pc, #44]	; (80497a8 <prvCheckTasksWaitingTermination+0x58>)
 804977a:	681b      	ldr	r3, [r3, #0]
 804977c:	3b01      	subs	r3, #1
 804977e:	4a0a      	ldr	r2, [pc, #40]	; (80497a8 <prvCheckTasksWaitingTermination+0x58>)
 8049780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8049782:	f000 fbe7 	bl	8049f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8049786:	6878      	ldr	r0, [r7, #4]
 8049788:	f000 f810 	bl	80497ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 804978c:	4b06      	ldr	r3, [pc, #24]	; (80497a8 <prvCheckTasksWaitingTermination+0x58>)
 804978e:	681b      	ldr	r3, [r3, #0]
 8049790:	2b00      	cmp	r3, #0
 8049792:	d1e1      	bne.n	8049758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8049794:	bf00      	nop
 8049796:	bf00      	nop
 8049798:	3708      	adds	r7, #8
 804979a:	46bd      	mov	sp, r7
 804979c:	bd80      	pop	{r7, pc}
 804979e:	bf00      	nop
 80497a0:	20006ff0 	.word	0x20006ff0
 80497a4:	2000701c 	.word	0x2000701c
 80497a8:	20007004 	.word	0x20007004

080497ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80497ac:	b580      	push	{r7, lr}
 80497ae:	b084      	sub	sp, #16
 80497b0:	af00      	add	r7, sp, #0
 80497b2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80497b4:	687b      	ldr	r3, [r7, #4]
 80497b6:	334c      	adds	r3, #76	; 0x4c
 80497b8:	4618      	mov	r0, r3
 80497ba:	f00b f9af 	bl	8054b1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80497be:	687b      	ldr	r3, [r7, #4]
 80497c0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80497c4:	2b00      	cmp	r3, #0
 80497c6:	d108      	bne.n	80497da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80497c8:	687b      	ldr	r3, [r7, #4]
 80497ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80497cc:	4618      	mov	r0, r3
 80497ce:	f000 fd83 	bl	804a2d8 <vPortFree>
				vPortFree( pxTCB );
 80497d2:	6878      	ldr	r0, [r7, #4]
 80497d4:	f000 fd80 	bl	804a2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80497d8:	e01a      	b.n	8049810 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80497da:	687b      	ldr	r3, [r7, #4]
 80497dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80497e0:	2b01      	cmp	r3, #1
 80497e2:	d103      	bne.n	80497ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80497e4:	6878      	ldr	r0, [r7, #4]
 80497e6:	f000 fd77 	bl	804a2d8 <vPortFree>
	}
 80497ea:	e011      	b.n	8049810 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80497ec:	687b      	ldr	r3, [r7, #4]
 80497ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80497f2:	2b02      	cmp	r3, #2
 80497f4:	d00c      	beq.n	8049810 <prvDeleteTCB+0x64>
	__asm volatile
 80497f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80497fa:	b672      	cpsid	i
 80497fc:	f383 8811 	msr	BASEPRI, r3
 8049800:	f3bf 8f6f 	isb	sy
 8049804:	f3bf 8f4f 	dsb	sy
 8049808:	b662      	cpsie	i
 804980a:	60fb      	str	r3, [r7, #12]
}
 804980c:	bf00      	nop
 804980e:	e7fe      	b.n	804980e <prvDeleteTCB+0x62>
	}
 8049810:	bf00      	nop
 8049812:	3710      	adds	r7, #16
 8049814:	46bd      	mov	sp, r7
 8049816:	bd80      	pop	{r7, pc}

08049818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8049818:	b480      	push	{r7}
 804981a:	b083      	sub	sp, #12
 804981c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 804981e:	4b0c      	ldr	r3, [pc, #48]	; (8049850 <prvResetNextTaskUnblockTime+0x38>)
 8049820:	681b      	ldr	r3, [r3, #0]
 8049822:	681b      	ldr	r3, [r3, #0]
 8049824:	2b00      	cmp	r3, #0
 8049826:	d104      	bne.n	8049832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8049828:	4b0a      	ldr	r3, [pc, #40]	; (8049854 <prvResetNextTaskUnblockTime+0x3c>)
 804982a:	f04f 32ff 	mov.w	r2, #4294967295
 804982e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8049830:	e008      	b.n	8049844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8049832:	4b07      	ldr	r3, [pc, #28]	; (8049850 <prvResetNextTaskUnblockTime+0x38>)
 8049834:	681b      	ldr	r3, [r3, #0]
 8049836:	68db      	ldr	r3, [r3, #12]
 8049838:	68db      	ldr	r3, [r3, #12]
 804983a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 804983c:	687b      	ldr	r3, [r7, #4]
 804983e:	685b      	ldr	r3, [r3, #4]
 8049840:	4a04      	ldr	r2, [pc, #16]	; (8049854 <prvResetNextTaskUnblockTime+0x3c>)
 8049842:	6013      	str	r3, [r2, #0]
}
 8049844:	bf00      	nop
 8049846:	370c      	adds	r7, #12
 8049848:	46bd      	mov	sp, r7
 804984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804984e:	4770      	bx	lr
 8049850:	20006fd4 	.word	0x20006fd4
 8049854:	2000703c 	.word	0x2000703c

08049858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8049858:	b480      	push	{r7}
 804985a:	b083      	sub	sp, #12
 804985c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 804985e:	4b0b      	ldr	r3, [pc, #44]	; (804988c <xTaskGetSchedulerState+0x34>)
 8049860:	681b      	ldr	r3, [r3, #0]
 8049862:	2b00      	cmp	r3, #0
 8049864:	d102      	bne.n	804986c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8049866:	2301      	movs	r3, #1
 8049868:	607b      	str	r3, [r7, #4]
 804986a:	e008      	b.n	804987e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804986c:	4b08      	ldr	r3, [pc, #32]	; (8049890 <xTaskGetSchedulerState+0x38>)
 804986e:	681b      	ldr	r3, [r3, #0]
 8049870:	2b00      	cmp	r3, #0
 8049872:	d102      	bne.n	804987a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8049874:	2302      	movs	r3, #2
 8049876:	607b      	str	r3, [r7, #4]
 8049878:	e001      	b.n	804987e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 804987a:	2300      	movs	r3, #0
 804987c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 804987e:	687b      	ldr	r3, [r7, #4]
	}
 8049880:	4618      	mov	r0, r3
 8049882:	370c      	adds	r7, #12
 8049884:	46bd      	mov	sp, r7
 8049886:	f85d 7b04 	ldr.w	r7, [sp], #4
 804988a:	4770      	bx	lr
 804988c:	20007028 	.word	0x20007028
 8049890:	20007044 	.word	0x20007044

08049894 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8049894:	b580      	push	{r7, lr}
 8049896:	b084      	sub	sp, #16
 8049898:	af00      	add	r7, sp, #0
 804989a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 804989c:	687b      	ldr	r3, [r7, #4]
 804989e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80498a0:	2300      	movs	r3, #0
 80498a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80498a4:	687b      	ldr	r3, [r7, #4]
 80498a6:	2b00      	cmp	r3, #0
 80498a8:	d069      	beq.n	804997e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80498aa:	68bb      	ldr	r3, [r7, #8]
 80498ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80498ae:	4b36      	ldr	r3, [pc, #216]	; (8049988 <xTaskPriorityInherit+0xf4>)
 80498b0:	681b      	ldr	r3, [r3, #0]
 80498b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80498b4:	429a      	cmp	r2, r3
 80498b6:	d259      	bcs.n	804996c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80498b8:	68bb      	ldr	r3, [r7, #8]
 80498ba:	699b      	ldr	r3, [r3, #24]
 80498bc:	2b00      	cmp	r3, #0
 80498be:	db06      	blt.n	80498ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80498c0:	4b31      	ldr	r3, [pc, #196]	; (8049988 <xTaskPriorityInherit+0xf4>)
 80498c2:	681b      	ldr	r3, [r3, #0]
 80498c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80498c6:	f1c3 0207 	rsb	r2, r3, #7
 80498ca:	68bb      	ldr	r3, [r7, #8]
 80498cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80498ce:	68bb      	ldr	r3, [r7, #8]
 80498d0:	6959      	ldr	r1, [r3, #20]
 80498d2:	68bb      	ldr	r3, [r7, #8]
 80498d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80498d6:	4613      	mov	r3, r2
 80498d8:	009b      	lsls	r3, r3, #2
 80498da:	4413      	add	r3, r2
 80498dc:	009b      	lsls	r3, r3, #2
 80498de:	4a2b      	ldr	r2, [pc, #172]	; (804998c <xTaskPriorityInherit+0xf8>)
 80498e0:	4413      	add	r3, r2
 80498e2:	4299      	cmp	r1, r3
 80498e4:	d13a      	bne.n	804995c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80498e6:	68bb      	ldr	r3, [r7, #8]
 80498e8:	3304      	adds	r3, #4
 80498ea:	4618      	mov	r0, r3
 80498ec:	f7fe f94a 	bl	8047b84 <uxListRemove>
 80498f0:	4603      	mov	r3, r0
 80498f2:	2b00      	cmp	r3, #0
 80498f4:	d115      	bne.n	8049922 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80498f6:	68bb      	ldr	r3, [r7, #8]
 80498f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80498fa:	4924      	ldr	r1, [pc, #144]	; (804998c <xTaskPriorityInherit+0xf8>)
 80498fc:	4613      	mov	r3, r2
 80498fe:	009b      	lsls	r3, r3, #2
 8049900:	4413      	add	r3, r2
 8049902:	009b      	lsls	r3, r3, #2
 8049904:	440b      	add	r3, r1
 8049906:	681b      	ldr	r3, [r3, #0]
 8049908:	2b00      	cmp	r3, #0
 804990a:	d10a      	bne.n	8049922 <xTaskPriorityInherit+0x8e>
 804990c:	68bb      	ldr	r3, [r7, #8]
 804990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049910:	2201      	movs	r2, #1
 8049912:	fa02 f303 	lsl.w	r3, r2, r3
 8049916:	43da      	mvns	r2, r3
 8049918:	4b1d      	ldr	r3, [pc, #116]	; (8049990 <xTaskPriorityInherit+0xfc>)
 804991a:	681b      	ldr	r3, [r3, #0]
 804991c:	4013      	ands	r3, r2
 804991e:	4a1c      	ldr	r2, [pc, #112]	; (8049990 <xTaskPriorityInherit+0xfc>)
 8049920:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8049922:	4b19      	ldr	r3, [pc, #100]	; (8049988 <xTaskPriorityInherit+0xf4>)
 8049924:	681b      	ldr	r3, [r3, #0]
 8049926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049928:	68bb      	ldr	r3, [r7, #8]
 804992a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 804992c:	68bb      	ldr	r3, [r7, #8]
 804992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049930:	2201      	movs	r2, #1
 8049932:	409a      	lsls	r2, r3
 8049934:	4b16      	ldr	r3, [pc, #88]	; (8049990 <xTaskPriorityInherit+0xfc>)
 8049936:	681b      	ldr	r3, [r3, #0]
 8049938:	4313      	orrs	r3, r2
 804993a:	4a15      	ldr	r2, [pc, #84]	; (8049990 <xTaskPriorityInherit+0xfc>)
 804993c:	6013      	str	r3, [r2, #0]
 804993e:	68bb      	ldr	r3, [r7, #8]
 8049940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049942:	4613      	mov	r3, r2
 8049944:	009b      	lsls	r3, r3, #2
 8049946:	4413      	add	r3, r2
 8049948:	009b      	lsls	r3, r3, #2
 804994a:	4a10      	ldr	r2, [pc, #64]	; (804998c <xTaskPriorityInherit+0xf8>)
 804994c:	441a      	add	r2, r3
 804994e:	68bb      	ldr	r3, [r7, #8]
 8049950:	3304      	adds	r3, #4
 8049952:	4619      	mov	r1, r3
 8049954:	4610      	mov	r0, r2
 8049956:	f7fe f8b8 	bl	8047aca <vListInsertEnd>
 804995a:	e004      	b.n	8049966 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 804995c:	4b0a      	ldr	r3, [pc, #40]	; (8049988 <xTaskPriorityInherit+0xf4>)
 804995e:	681b      	ldr	r3, [r3, #0]
 8049960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049962:	68bb      	ldr	r3, [r7, #8]
 8049964:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8049966:	2301      	movs	r3, #1
 8049968:	60fb      	str	r3, [r7, #12]
 804996a:	e008      	b.n	804997e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 804996c:	68bb      	ldr	r3, [r7, #8]
 804996e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8049970:	4b05      	ldr	r3, [pc, #20]	; (8049988 <xTaskPriorityInherit+0xf4>)
 8049972:	681b      	ldr	r3, [r3, #0]
 8049974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049976:	429a      	cmp	r2, r3
 8049978:	d201      	bcs.n	804997e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 804997a:	2301      	movs	r3, #1
 804997c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 804997e:	68fb      	ldr	r3, [r7, #12]
	}
 8049980:	4618      	mov	r0, r3
 8049982:	3710      	adds	r7, #16
 8049984:	46bd      	mov	sp, r7
 8049986:	bd80      	pop	{r7, pc}
 8049988:	20006f1c 	.word	0x20006f1c
 804998c:	20006f20 	.word	0x20006f20
 8049990:	20007024 	.word	0x20007024

08049994 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8049994:	b580      	push	{r7, lr}
 8049996:	b086      	sub	sp, #24
 8049998:	af00      	add	r7, sp, #0
 804999a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 804999c:	687b      	ldr	r3, [r7, #4]
 804999e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80499a0:	2300      	movs	r3, #0
 80499a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80499a4:	687b      	ldr	r3, [r7, #4]
 80499a6:	2b00      	cmp	r3, #0
 80499a8:	d072      	beq.n	8049a90 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80499aa:	4b3c      	ldr	r3, [pc, #240]	; (8049a9c <xTaskPriorityDisinherit+0x108>)
 80499ac:	681b      	ldr	r3, [r3, #0]
 80499ae:	693a      	ldr	r2, [r7, #16]
 80499b0:	429a      	cmp	r2, r3
 80499b2:	d00c      	beq.n	80499ce <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80499b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80499b8:	b672      	cpsid	i
 80499ba:	f383 8811 	msr	BASEPRI, r3
 80499be:	f3bf 8f6f 	isb	sy
 80499c2:	f3bf 8f4f 	dsb	sy
 80499c6:	b662      	cpsie	i
 80499c8:	60fb      	str	r3, [r7, #12]
}
 80499ca:	bf00      	nop
 80499cc:	e7fe      	b.n	80499cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80499ce:	693b      	ldr	r3, [r7, #16]
 80499d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80499d2:	2b00      	cmp	r3, #0
 80499d4:	d10c      	bne.n	80499f0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80499d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80499da:	b672      	cpsid	i
 80499dc:	f383 8811 	msr	BASEPRI, r3
 80499e0:	f3bf 8f6f 	isb	sy
 80499e4:	f3bf 8f4f 	dsb	sy
 80499e8:	b662      	cpsie	i
 80499ea:	60bb      	str	r3, [r7, #8]
}
 80499ec:	bf00      	nop
 80499ee:	e7fe      	b.n	80499ee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80499f0:	693b      	ldr	r3, [r7, #16]
 80499f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80499f4:	1e5a      	subs	r2, r3, #1
 80499f6:	693b      	ldr	r3, [r7, #16]
 80499f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80499fa:	693b      	ldr	r3, [r7, #16]
 80499fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80499fe:	693b      	ldr	r3, [r7, #16]
 8049a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049a02:	429a      	cmp	r2, r3
 8049a04:	d044      	beq.n	8049a90 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8049a06:	693b      	ldr	r3, [r7, #16]
 8049a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049a0a:	2b00      	cmp	r3, #0
 8049a0c:	d140      	bne.n	8049a90 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8049a0e:	693b      	ldr	r3, [r7, #16]
 8049a10:	3304      	adds	r3, #4
 8049a12:	4618      	mov	r0, r3
 8049a14:	f7fe f8b6 	bl	8047b84 <uxListRemove>
 8049a18:	4603      	mov	r3, r0
 8049a1a:	2b00      	cmp	r3, #0
 8049a1c:	d115      	bne.n	8049a4a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8049a1e:	693b      	ldr	r3, [r7, #16]
 8049a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049a22:	491f      	ldr	r1, [pc, #124]	; (8049aa0 <xTaskPriorityDisinherit+0x10c>)
 8049a24:	4613      	mov	r3, r2
 8049a26:	009b      	lsls	r3, r3, #2
 8049a28:	4413      	add	r3, r2
 8049a2a:	009b      	lsls	r3, r3, #2
 8049a2c:	440b      	add	r3, r1
 8049a2e:	681b      	ldr	r3, [r3, #0]
 8049a30:	2b00      	cmp	r3, #0
 8049a32:	d10a      	bne.n	8049a4a <xTaskPriorityDisinherit+0xb6>
 8049a34:	693b      	ldr	r3, [r7, #16]
 8049a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049a38:	2201      	movs	r2, #1
 8049a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8049a3e:	43da      	mvns	r2, r3
 8049a40:	4b18      	ldr	r3, [pc, #96]	; (8049aa4 <xTaskPriorityDisinherit+0x110>)
 8049a42:	681b      	ldr	r3, [r3, #0]
 8049a44:	4013      	ands	r3, r2
 8049a46:	4a17      	ldr	r2, [pc, #92]	; (8049aa4 <xTaskPriorityDisinherit+0x110>)
 8049a48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8049a4a:	693b      	ldr	r3, [r7, #16]
 8049a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8049a4e:	693b      	ldr	r3, [r7, #16]
 8049a50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8049a52:	693b      	ldr	r3, [r7, #16]
 8049a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049a56:	f1c3 0207 	rsb	r2, r3, #7
 8049a5a:	693b      	ldr	r3, [r7, #16]
 8049a5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8049a5e:	693b      	ldr	r3, [r7, #16]
 8049a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049a62:	2201      	movs	r2, #1
 8049a64:	409a      	lsls	r2, r3
 8049a66:	4b0f      	ldr	r3, [pc, #60]	; (8049aa4 <xTaskPriorityDisinherit+0x110>)
 8049a68:	681b      	ldr	r3, [r3, #0]
 8049a6a:	4313      	orrs	r3, r2
 8049a6c:	4a0d      	ldr	r2, [pc, #52]	; (8049aa4 <xTaskPriorityDisinherit+0x110>)
 8049a6e:	6013      	str	r3, [r2, #0]
 8049a70:	693b      	ldr	r3, [r7, #16]
 8049a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049a74:	4613      	mov	r3, r2
 8049a76:	009b      	lsls	r3, r3, #2
 8049a78:	4413      	add	r3, r2
 8049a7a:	009b      	lsls	r3, r3, #2
 8049a7c:	4a08      	ldr	r2, [pc, #32]	; (8049aa0 <xTaskPriorityDisinherit+0x10c>)
 8049a7e:	441a      	add	r2, r3
 8049a80:	693b      	ldr	r3, [r7, #16]
 8049a82:	3304      	adds	r3, #4
 8049a84:	4619      	mov	r1, r3
 8049a86:	4610      	mov	r0, r2
 8049a88:	f7fe f81f 	bl	8047aca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8049a8c:	2301      	movs	r3, #1
 8049a8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8049a90:	697b      	ldr	r3, [r7, #20]
	}
 8049a92:	4618      	mov	r0, r3
 8049a94:	3718      	adds	r7, #24
 8049a96:	46bd      	mov	sp, r7
 8049a98:	bd80      	pop	{r7, pc}
 8049a9a:	bf00      	nop
 8049a9c:	20006f1c 	.word	0x20006f1c
 8049aa0:	20006f20 	.word	0x20006f20
 8049aa4:	20007024 	.word	0x20007024

08049aa8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8049aa8:	b580      	push	{r7, lr}
 8049aaa:	b088      	sub	sp, #32
 8049aac:	af00      	add	r7, sp, #0
 8049aae:	6078      	str	r0, [r7, #4]
 8049ab0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8049ab2:	687b      	ldr	r3, [r7, #4]
 8049ab4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8049ab6:	2301      	movs	r3, #1
 8049ab8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8049aba:	687b      	ldr	r3, [r7, #4]
 8049abc:	2b00      	cmp	r3, #0
 8049abe:	f000 8087 	beq.w	8049bd0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8049ac2:	69bb      	ldr	r3, [r7, #24]
 8049ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049ac6:	2b00      	cmp	r3, #0
 8049ac8:	d10c      	bne.n	8049ae4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8049aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049ace:	b672      	cpsid	i
 8049ad0:	f383 8811 	msr	BASEPRI, r3
 8049ad4:	f3bf 8f6f 	isb	sy
 8049ad8:	f3bf 8f4f 	dsb	sy
 8049adc:	b662      	cpsie	i
 8049ade:	60fb      	str	r3, [r7, #12]
}
 8049ae0:	bf00      	nop
 8049ae2:	e7fe      	b.n	8049ae2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8049ae4:	69bb      	ldr	r3, [r7, #24]
 8049ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049ae8:	683a      	ldr	r2, [r7, #0]
 8049aea:	429a      	cmp	r2, r3
 8049aec:	d902      	bls.n	8049af4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8049aee:	683b      	ldr	r3, [r7, #0]
 8049af0:	61fb      	str	r3, [r7, #28]
 8049af2:	e002      	b.n	8049afa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8049af4:	69bb      	ldr	r3, [r7, #24]
 8049af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049af8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8049afa:	69bb      	ldr	r3, [r7, #24]
 8049afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049afe:	69fa      	ldr	r2, [r7, #28]
 8049b00:	429a      	cmp	r2, r3
 8049b02:	d065      	beq.n	8049bd0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8049b04:	69bb      	ldr	r3, [r7, #24]
 8049b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049b08:	697a      	ldr	r2, [r7, #20]
 8049b0a:	429a      	cmp	r2, r3
 8049b0c:	d160      	bne.n	8049bd0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8049b0e:	4b32      	ldr	r3, [pc, #200]	; (8049bd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8049b10:	681b      	ldr	r3, [r3, #0]
 8049b12:	69ba      	ldr	r2, [r7, #24]
 8049b14:	429a      	cmp	r2, r3
 8049b16:	d10c      	bne.n	8049b32 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8049b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049b1c:	b672      	cpsid	i
 8049b1e:	f383 8811 	msr	BASEPRI, r3
 8049b22:	f3bf 8f6f 	isb	sy
 8049b26:	f3bf 8f4f 	dsb	sy
 8049b2a:	b662      	cpsie	i
 8049b2c:	60bb      	str	r3, [r7, #8]
}
 8049b2e:	bf00      	nop
 8049b30:	e7fe      	b.n	8049b30 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8049b32:	69bb      	ldr	r3, [r7, #24]
 8049b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049b36:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8049b38:	69bb      	ldr	r3, [r7, #24]
 8049b3a:	69fa      	ldr	r2, [r7, #28]
 8049b3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8049b3e:	69bb      	ldr	r3, [r7, #24]
 8049b40:	699b      	ldr	r3, [r3, #24]
 8049b42:	2b00      	cmp	r3, #0
 8049b44:	db04      	blt.n	8049b50 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8049b46:	69fb      	ldr	r3, [r7, #28]
 8049b48:	f1c3 0207 	rsb	r2, r3, #7
 8049b4c:	69bb      	ldr	r3, [r7, #24]
 8049b4e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8049b50:	69bb      	ldr	r3, [r7, #24]
 8049b52:	6959      	ldr	r1, [r3, #20]
 8049b54:	693a      	ldr	r2, [r7, #16]
 8049b56:	4613      	mov	r3, r2
 8049b58:	009b      	lsls	r3, r3, #2
 8049b5a:	4413      	add	r3, r2
 8049b5c:	009b      	lsls	r3, r3, #2
 8049b5e:	4a1f      	ldr	r2, [pc, #124]	; (8049bdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8049b60:	4413      	add	r3, r2
 8049b62:	4299      	cmp	r1, r3
 8049b64:	d134      	bne.n	8049bd0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8049b66:	69bb      	ldr	r3, [r7, #24]
 8049b68:	3304      	adds	r3, #4
 8049b6a:	4618      	mov	r0, r3
 8049b6c:	f7fe f80a 	bl	8047b84 <uxListRemove>
 8049b70:	4603      	mov	r3, r0
 8049b72:	2b00      	cmp	r3, #0
 8049b74:	d115      	bne.n	8049ba2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8049b76:	69bb      	ldr	r3, [r7, #24]
 8049b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049b7a:	4918      	ldr	r1, [pc, #96]	; (8049bdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8049b7c:	4613      	mov	r3, r2
 8049b7e:	009b      	lsls	r3, r3, #2
 8049b80:	4413      	add	r3, r2
 8049b82:	009b      	lsls	r3, r3, #2
 8049b84:	440b      	add	r3, r1
 8049b86:	681b      	ldr	r3, [r3, #0]
 8049b88:	2b00      	cmp	r3, #0
 8049b8a:	d10a      	bne.n	8049ba2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8049b8c:	69bb      	ldr	r3, [r7, #24]
 8049b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049b90:	2201      	movs	r2, #1
 8049b92:	fa02 f303 	lsl.w	r3, r2, r3
 8049b96:	43da      	mvns	r2, r3
 8049b98:	4b11      	ldr	r3, [pc, #68]	; (8049be0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8049b9a:	681b      	ldr	r3, [r3, #0]
 8049b9c:	4013      	ands	r3, r2
 8049b9e:	4a10      	ldr	r2, [pc, #64]	; (8049be0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8049ba0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8049ba2:	69bb      	ldr	r3, [r7, #24]
 8049ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049ba6:	2201      	movs	r2, #1
 8049ba8:	409a      	lsls	r2, r3
 8049baa:	4b0d      	ldr	r3, [pc, #52]	; (8049be0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8049bac:	681b      	ldr	r3, [r3, #0]
 8049bae:	4313      	orrs	r3, r2
 8049bb0:	4a0b      	ldr	r2, [pc, #44]	; (8049be0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8049bb2:	6013      	str	r3, [r2, #0]
 8049bb4:	69bb      	ldr	r3, [r7, #24]
 8049bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8049bb8:	4613      	mov	r3, r2
 8049bba:	009b      	lsls	r3, r3, #2
 8049bbc:	4413      	add	r3, r2
 8049bbe:	009b      	lsls	r3, r3, #2
 8049bc0:	4a06      	ldr	r2, [pc, #24]	; (8049bdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8049bc2:	441a      	add	r2, r3
 8049bc4:	69bb      	ldr	r3, [r7, #24]
 8049bc6:	3304      	adds	r3, #4
 8049bc8:	4619      	mov	r1, r3
 8049bca:	4610      	mov	r0, r2
 8049bcc:	f7fd ff7d 	bl	8047aca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8049bd0:	bf00      	nop
 8049bd2:	3720      	adds	r7, #32
 8049bd4:	46bd      	mov	sp, r7
 8049bd6:	bd80      	pop	{r7, pc}
 8049bd8:	20006f1c 	.word	0x20006f1c
 8049bdc:	20006f20 	.word	0x20006f20
 8049be0:	20007024 	.word	0x20007024

08049be4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8049be4:	b480      	push	{r7}
 8049be6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8049be8:	4b07      	ldr	r3, [pc, #28]	; (8049c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8049bea:	681b      	ldr	r3, [r3, #0]
 8049bec:	2b00      	cmp	r3, #0
 8049bee:	d004      	beq.n	8049bfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8049bf0:	4b05      	ldr	r3, [pc, #20]	; (8049c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8049bf2:	681b      	ldr	r3, [r3, #0]
 8049bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8049bf6:	3201      	adds	r2, #1
 8049bf8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8049bfa:	4b03      	ldr	r3, [pc, #12]	; (8049c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8049bfc:	681b      	ldr	r3, [r3, #0]
	}
 8049bfe:	4618      	mov	r0, r3
 8049c00:	46bd      	mov	sp, r7
 8049c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c06:	4770      	bx	lr
 8049c08:	20006f1c 	.word	0x20006f1c

08049c0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8049c0c:	b580      	push	{r7, lr}
 8049c0e:	b084      	sub	sp, #16
 8049c10:	af00      	add	r7, sp, #0
 8049c12:	6078      	str	r0, [r7, #4]
 8049c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8049c16:	4b29      	ldr	r3, [pc, #164]	; (8049cbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8049c18:	681b      	ldr	r3, [r3, #0]
 8049c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8049c1c:	4b28      	ldr	r3, [pc, #160]	; (8049cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8049c1e:	681b      	ldr	r3, [r3, #0]
 8049c20:	3304      	adds	r3, #4
 8049c22:	4618      	mov	r0, r3
 8049c24:	f7fd ffae 	bl	8047b84 <uxListRemove>
 8049c28:	4603      	mov	r3, r0
 8049c2a:	2b00      	cmp	r3, #0
 8049c2c:	d10b      	bne.n	8049c46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8049c2e:	4b24      	ldr	r3, [pc, #144]	; (8049cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8049c30:	681b      	ldr	r3, [r3, #0]
 8049c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049c34:	2201      	movs	r2, #1
 8049c36:	fa02 f303 	lsl.w	r3, r2, r3
 8049c3a:	43da      	mvns	r2, r3
 8049c3c:	4b21      	ldr	r3, [pc, #132]	; (8049cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8049c3e:	681b      	ldr	r3, [r3, #0]
 8049c40:	4013      	ands	r3, r2
 8049c42:	4a20      	ldr	r2, [pc, #128]	; (8049cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8049c44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8049c46:	687b      	ldr	r3, [r7, #4]
 8049c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049c4c:	d10a      	bne.n	8049c64 <prvAddCurrentTaskToDelayedList+0x58>
 8049c4e:	683b      	ldr	r3, [r7, #0]
 8049c50:	2b00      	cmp	r3, #0
 8049c52:	d007      	beq.n	8049c64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8049c54:	4b1a      	ldr	r3, [pc, #104]	; (8049cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8049c56:	681b      	ldr	r3, [r3, #0]
 8049c58:	3304      	adds	r3, #4
 8049c5a:	4619      	mov	r1, r3
 8049c5c:	481a      	ldr	r0, [pc, #104]	; (8049cc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8049c5e:	f7fd ff34 	bl	8047aca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8049c62:	e026      	b.n	8049cb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8049c64:	68fa      	ldr	r2, [r7, #12]
 8049c66:	687b      	ldr	r3, [r7, #4]
 8049c68:	4413      	add	r3, r2
 8049c6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8049c6c:	4b14      	ldr	r3, [pc, #80]	; (8049cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8049c6e:	681b      	ldr	r3, [r3, #0]
 8049c70:	68ba      	ldr	r2, [r7, #8]
 8049c72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8049c74:	68ba      	ldr	r2, [r7, #8]
 8049c76:	68fb      	ldr	r3, [r7, #12]
 8049c78:	429a      	cmp	r2, r3
 8049c7a:	d209      	bcs.n	8049c90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8049c7c:	4b13      	ldr	r3, [pc, #76]	; (8049ccc <prvAddCurrentTaskToDelayedList+0xc0>)
 8049c7e:	681a      	ldr	r2, [r3, #0]
 8049c80:	4b0f      	ldr	r3, [pc, #60]	; (8049cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8049c82:	681b      	ldr	r3, [r3, #0]
 8049c84:	3304      	adds	r3, #4
 8049c86:	4619      	mov	r1, r3
 8049c88:	4610      	mov	r0, r2
 8049c8a:	f7fd ff42 	bl	8047b12 <vListInsert>
}
 8049c8e:	e010      	b.n	8049cb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8049c90:	4b0f      	ldr	r3, [pc, #60]	; (8049cd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8049c92:	681a      	ldr	r2, [r3, #0]
 8049c94:	4b0a      	ldr	r3, [pc, #40]	; (8049cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8049c96:	681b      	ldr	r3, [r3, #0]
 8049c98:	3304      	adds	r3, #4
 8049c9a:	4619      	mov	r1, r3
 8049c9c:	4610      	mov	r0, r2
 8049c9e:	f7fd ff38 	bl	8047b12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8049ca2:	4b0c      	ldr	r3, [pc, #48]	; (8049cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8049ca4:	681b      	ldr	r3, [r3, #0]
 8049ca6:	68ba      	ldr	r2, [r7, #8]
 8049ca8:	429a      	cmp	r2, r3
 8049caa:	d202      	bcs.n	8049cb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8049cac:	4a09      	ldr	r2, [pc, #36]	; (8049cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8049cae:	68bb      	ldr	r3, [r7, #8]
 8049cb0:	6013      	str	r3, [r2, #0]
}
 8049cb2:	bf00      	nop
 8049cb4:	3710      	adds	r7, #16
 8049cb6:	46bd      	mov	sp, r7
 8049cb8:	bd80      	pop	{r7, pc}
 8049cba:	bf00      	nop
 8049cbc:	20007020 	.word	0x20007020
 8049cc0:	20006f1c 	.word	0x20006f1c
 8049cc4:	20007024 	.word	0x20007024
 8049cc8:	20007008 	.word	0x20007008
 8049ccc:	20006fd8 	.word	0x20006fd8
 8049cd0:	20006fd4 	.word	0x20006fd4
 8049cd4:	2000703c 	.word	0x2000703c

08049cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8049cd8:	b480      	push	{r7}
 8049cda:	b085      	sub	sp, #20
 8049cdc:	af00      	add	r7, sp, #0
 8049cde:	60f8      	str	r0, [r7, #12]
 8049ce0:	60b9      	str	r1, [r7, #8]
 8049ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8049ce4:	68fb      	ldr	r3, [r7, #12]
 8049ce6:	3b04      	subs	r3, #4
 8049ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8049cea:	68fb      	ldr	r3, [r7, #12]
 8049cec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8049cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8049cf2:	68fb      	ldr	r3, [r7, #12]
 8049cf4:	3b04      	subs	r3, #4
 8049cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8049cf8:	68bb      	ldr	r3, [r7, #8]
 8049cfa:	f023 0201 	bic.w	r2, r3, #1
 8049cfe:	68fb      	ldr	r3, [r7, #12]
 8049d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8049d02:	68fb      	ldr	r3, [r7, #12]
 8049d04:	3b04      	subs	r3, #4
 8049d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8049d08:	4a0c      	ldr	r2, [pc, #48]	; (8049d3c <pxPortInitialiseStack+0x64>)
 8049d0a:	68fb      	ldr	r3, [r7, #12]
 8049d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8049d0e:	68fb      	ldr	r3, [r7, #12]
 8049d10:	3b14      	subs	r3, #20
 8049d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8049d14:	687a      	ldr	r2, [r7, #4]
 8049d16:	68fb      	ldr	r3, [r7, #12]
 8049d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8049d1a:	68fb      	ldr	r3, [r7, #12]
 8049d1c:	3b04      	subs	r3, #4
 8049d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8049d20:	68fb      	ldr	r3, [r7, #12]
 8049d22:	f06f 0202 	mvn.w	r2, #2
 8049d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8049d28:	68fb      	ldr	r3, [r7, #12]
 8049d2a:	3b20      	subs	r3, #32
 8049d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8049d2e:	68fb      	ldr	r3, [r7, #12]
}
 8049d30:	4618      	mov	r0, r3
 8049d32:	3714      	adds	r7, #20
 8049d34:	46bd      	mov	sp, r7
 8049d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049d3a:	4770      	bx	lr
 8049d3c:	08049d41 	.word	0x08049d41

08049d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8049d40:	b480      	push	{r7}
 8049d42:	b085      	sub	sp, #20
 8049d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8049d46:	2300      	movs	r3, #0
 8049d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8049d4a:	4b14      	ldr	r3, [pc, #80]	; (8049d9c <prvTaskExitError+0x5c>)
 8049d4c:	681b      	ldr	r3, [r3, #0]
 8049d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049d52:	d00c      	beq.n	8049d6e <prvTaskExitError+0x2e>
	__asm volatile
 8049d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049d58:	b672      	cpsid	i
 8049d5a:	f383 8811 	msr	BASEPRI, r3
 8049d5e:	f3bf 8f6f 	isb	sy
 8049d62:	f3bf 8f4f 	dsb	sy
 8049d66:	b662      	cpsie	i
 8049d68:	60fb      	str	r3, [r7, #12]
}
 8049d6a:	bf00      	nop
 8049d6c:	e7fe      	b.n	8049d6c <prvTaskExitError+0x2c>
	__asm volatile
 8049d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049d72:	b672      	cpsid	i
 8049d74:	f383 8811 	msr	BASEPRI, r3
 8049d78:	f3bf 8f6f 	isb	sy
 8049d7c:	f3bf 8f4f 	dsb	sy
 8049d80:	b662      	cpsie	i
 8049d82:	60bb      	str	r3, [r7, #8]
}
 8049d84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8049d86:	bf00      	nop
 8049d88:	687b      	ldr	r3, [r7, #4]
 8049d8a:	2b00      	cmp	r3, #0
 8049d8c:	d0fc      	beq.n	8049d88 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8049d8e:	bf00      	nop
 8049d90:	bf00      	nop
 8049d92:	3714      	adds	r7, #20
 8049d94:	46bd      	mov	sp, r7
 8049d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049d9a:	4770      	bx	lr
 8049d9c:	20000020 	.word	0x20000020

08049da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8049da0:	4b07      	ldr	r3, [pc, #28]	; (8049dc0 <pxCurrentTCBConst2>)
 8049da2:	6819      	ldr	r1, [r3, #0]
 8049da4:	6808      	ldr	r0, [r1, #0]
 8049da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049daa:	f380 8809 	msr	PSP, r0
 8049dae:	f3bf 8f6f 	isb	sy
 8049db2:	f04f 0000 	mov.w	r0, #0
 8049db6:	f380 8811 	msr	BASEPRI, r0
 8049dba:	4770      	bx	lr
 8049dbc:	f3af 8000 	nop.w

08049dc0 <pxCurrentTCBConst2>:
 8049dc0:	20006f1c 	.word	0x20006f1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8049dc4:	bf00      	nop
 8049dc6:	bf00      	nop

08049dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8049dc8:	4808      	ldr	r0, [pc, #32]	; (8049dec <prvPortStartFirstTask+0x24>)
 8049dca:	6800      	ldr	r0, [r0, #0]
 8049dcc:	6800      	ldr	r0, [r0, #0]
 8049dce:	f380 8808 	msr	MSP, r0
 8049dd2:	f04f 0000 	mov.w	r0, #0
 8049dd6:	f380 8814 	msr	CONTROL, r0
 8049dda:	b662      	cpsie	i
 8049ddc:	b661      	cpsie	f
 8049dde:	f3bf 8f4f 	dsb	sy
 8049de2:	f3bf 8f6f 	isb	sy
 8049de6:	df00      	svc	0
 8049de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8049dea:	bf00      	nop
 8049dec:	e000ed08 	.word	0xe000ed08

08049df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8049df0:	b580      	push	{r7, lr}
 8049df2:	b084      	sub	sp, #16
 8049df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8049df6:	4b37      	ldr	r3, [pc, #220]	; (8049ed4 <xPortStartScheduler+0xe4>)
 8049df8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8049dfa:	68fb      	ldr	r3, [r7, #12]
 8049dfc:	781b      	ldrb	r3, [r3, #0]
 8049dfe:	b2db      	uxtb	r3, r3
 8049e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8049e02:	68fb      	ldr	r3, [r7, #12]
 8049e04:	22ff      	movs	r2, #255	; 0xff
 8049e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8049e08:	68fb      	ldr	r3, [r7, #12]
 8049e0a:	781b      	ldrb	r3, [r3, #0]
 8049e0c:	b2db      	uxtb	r3, r3
 8049e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8049e10:	78fb      	ldrb	r3, [r7, #3]
 8049e12:	b2db      	uxtb	r3, r3
 8049e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8049e18:	b2da      	uxtb	r2, r3
 8049e1a:	4b2f      	ldr	r3, [pc, #188]	; (8049ed8 <xPortStartScheduler+0xe8>)
 8049e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8049e1e:	4b2f      	ldr	r3, [pc, #188]	; (8049edc <xPortStartScheduler+0xec>)
 8049e20:	2207      	movs	r2, #7
 8049e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8049e24:	e009      	b.n	8049e3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8049e26:	4b2d      	ldr	r3, [pc, #180]	; (8049edc <xPortStartScheduler+0xec>)
 8049e28:	681b      	ldr	r3, [r3, #0]
 8049e2a:	3b01      	subs	r3, #1
 8049e2c:	4a2b      	ldr	r2, [pc, #172]	; (8049edc <xPortStartScheduler+0xec>)
 8049e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8049e30:	78fb      	ldrb	r3, [r7, #3]
 8049e32:	b2db      	uxtb	r3, r3
 8049e34:	005b      	lsls	r3, r3, #1
 8049e36:	b2db      	uxtb	r3, r3
 8049e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8049e3a:	78fb      	ldrb	r3, [r7, #3]
 8049e3c:	b2db      	uxtb	r3, r3
 8049e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8049e42:	2b80      	cmp	r3, #128	; 0x80
 8049e44:	d0ef      	beq.n	8049e26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8049e46:	4b25      	ldr	r3, [pc, #148]	; (8049edc <xPortStartScheduler+0xec>)
 8049e48:	681b      	ldr	r3, [r3, #0]
 8049e4a:	f1c3 0307 	rsb	r3, r3, #7
 8049e4e:	2b04      	cmp	r3, #4
 8049e50:	d00c      	beq.n	8049e6c <xPortStartScheduler+0x7c>
	__asm volatile
 8049e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049e56:	b672      	cpsid	i
 8049e58:	f383 8811 	msr	BASEPRI, r3
 8049e5c:	f3bf 8f6f 	isb	sy
 8049e60:	f3bf 8f4f 	dsb	sy
 8049e64:	b662      	cpsie	i
 8049e66:	60bb      	str	r3, [r7, #8]
}
 8049e68:	bf00      	nop
 8049e6a:	e7fe      	b.n	8049e6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8049e6c:	4b1b      	ldr	r3, [pc, #108]	; (8049edc <xPortStartScheduler+0xec>)
 8049e6e:	681b      	ldr	r3, [r3, #0]
 8049e70:	021b      	lsls	r3, r3, #8
 8049e72:	4a1a      	ldr	r2, [pc, #104]	; (8049edc <xPortStartScheduler+0xec>)
 8049e74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8049e76:	4b19      	ldr	r3, [pc, #100]	; (8049edc <xPortStartScheduler+0xec>)
 8049e78:	681b      	ldr	r3, [r3, #0]
 8049e7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8049e7e:	4a17      	ldr	r2, [pc, #92]	; (8049edc <xPortStartScheduler+0xec>)
 8049e80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8049e82:	687b      	ldr	r3, [r7, #4]
 8049e84:	b2da      	uxtb	r2, r3
 8049e86:	68fb      	ldr	r3, [r7, #12]
 8049e88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8049e8a:	4b15      	ldr	r3, [pc, #84]	; (8049ee0 <xPortStartScheduler+0xf0>)
 8049e8c:	681b      	ldr	r3, [r3, #0]
 8049e8e:	4a14      	ldr	r2, [pc, #80]	; (8049ee0 <xPortStartScheduler+0xf0>)
 8049e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8049e94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8049e96:	4b12      	ldr	r3, [pc, #72]	; (8049ee0 <xPortStartScheduler+0xf0>)
 8049e98:	681b      	ldr	r3, [r3, #0]
 8049e9a:	4a11      	ldr	r2, [pc, #68]	; (8049ee0 <xPortStartScheduler+0xf0>)
 8049e9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8049ea0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8049ea2:	f000 f8dd 	bl	804a060 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8049ea6:	4b0f      	ldr	r3, [pc, #60]	; (8049ee4 <xPortStartScheduler+0xf4>)
 8049ea8:	2200      	movs	r2, #0
 8049eaa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8049eac:	f000 f8fc 	bl	804a0a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8049eb0:	4b0d      	ldr	r3, [pc, #52]	; (8049ee8 <xPortStartScheduler+0xf8>)
 8049eb2:	681b      	ldr	r3, [r3, #0]
 8049eb4:	4a0c      	ldr	r2, [pc, #48]	; (8049ee8 <xPortStartScheduler+0xf8>)
 8049eb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8049eba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8049ebc:	f7ff ff84 	bl	8049dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8049ec0:	f7ff fa78 	bl	80493b4 <vTaskSwitchContext>
	prvTaskExitError();
 8049ec4:	f7ff ff3c 	bl	8049d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8049ec8:	2300      	movs	r3, #0
}
 8049eca:	4618      	mov	r0, r3
 8049ecc:	3710      	adds	r7, #16
 8049ece:	46bd      	mov	sp, r7
 8049ed0:	bd80      	pop	{r7, pc}
 8049ed2:	bf00      	nop
 8049ed4:	e000e400 	.word	0xe000e400
 8049ed8:	20007048 	.word	0x20007048
 8049edc:	2000704c 	.word	0x2000704c
 8049ee0:	e000ed20 	.word	0xe000ed20
 8049ee4:	20000020 	.word	0x20000020
 8049ee8:	e000ef34 	.word	0xe000ef34

08049eec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8049eec:	b480      	push	{r7}
 8049eee:	b083      	sub	sp, #12
 8049ef0:	af00      	add	r7, sp, #0
	__asm volatile
 8049ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049ef6:	b672      	cpsid	i
 8049ef8:	f383 8811 	msr	BASEPRI, r3
 8049efc:	f3bf 8f6f 	isb	sy
 8049f00:	f3bf 8f4f 	dsb	sy
 8049f04:	b662      	cpsie	i
 8049f06:	607b      	str	r3, [r7, #4]
}
 8049f08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8049f0a:	4b10      	ldr	r3, [pc, #64]	; (8049f4c <vPortEnterCritical+0x60>)
 8049f0c:	681b      	ldr	r3, [r3, #0]
 8049f0e:	3301      	adds	r3, #1
 8049f10:	4a0e      	ldr	r2, [pc, #56]	; (8049f4c <vPortEnterCritical+0x60>)
 8049f12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8049f14:	4b0d      	ldr	r3, [pc, #52]	; (8049f4c <vPortEnterCritical+0x60>)
 8049f16:	681b      	ldr	r3, [r3, #0]
 8049f18:	2b01      	cmp	r3, #1
 8049f1a:	d111      	bne.n	8049f40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8049f1c:	4b0c      	ldr	r3, [pc, #48]	; (8049f50 <vPortEnterCritical+0x64>)
 8049f1e:	681b      	ldr	r3, [r3, #0]
 8049f20:	b2db      	uxtb	r3, r3
 8049f22:	2b00      	cmp	r3, #0
 8049f24:	d00c      	beq.n	8049f40 <vPortEnterCritical+0x54>
	__asm volatile
 8049f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049f2a:	b672      	cpsid	i
 8049f2c:	f383 8811 	msr	BASEPRI, r3
 8049f30:	f3bf 8f6f 	isb	sy
 8049f34:	f3bf 8f4f 	dsb	sy
 8049f38:	b662      	cpsie	i
 8049f3a:	603b      	str	r3, [r7, #0]
}
 8049f3c:	bf00      	nop
 8049f3e:	e7fe      	b.n	8049f3e <vPortEnterCritical+0x52>
	}
}
 8049f40:	bf00      	nop
 8049f42:	370c      	adds	r7, #12
 8049f44:	46bd      	mov	sp, r7
 8049f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f4a:	4770      	bx	lr
 8049f4c:	20000020 	.word	0x20000020
 8049f50:	e000ed04 	.word	0xe000ed04

08049f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8049f54:	b480      	push	{r7}
 8049f56:	b083      	sub	sp, #12
 8049f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8049f5a:	4b13      	ldr	r3, [pc, #76]	; (8049fa8 <vPortExitCritical+0x54>)
 8049f5c:	681b      	ldr	r3, [r3, #0]
 8049f5e:	2b00      	cmp	r3, #0
 8049f60:	d10c      	bne.n	8049f7c <vPortExitCritical+0x28>
	__asm volatile
 8049f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049f66:	b672      	cpsid	i
 8049f68:	f383 8811 	msr	BASEPRI, r3
 8049f6c:	f3bf 8f6f 	isb	sy
 8049f70:	f3bf 8f4f 	dsb	sy
 8049f74:	b662      	cpsie	i
 8049f76:	607b      	str	r3, [r7, #4]
}
 8049f78:	bf00      	nop
 8049f7a:	e7fe      	b.n	8049f7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8049f7c:	4b0a      	ldr	r3, [pc, #40]	; (8049fa8 <vPortExitCritical+0x54>)
 8049f7e:	681b      	ldr	r3, [r3, #0]
 8049f80:	3b01      	subs	r3, #1
 8049f82:	4a09      	ldr	r2, [pc, #36]	; (8049fa8 <vPortExitCritical+0x54>)
 8049f84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8049f86:	4b08      	ldr	r3, [pc, #32]	; (8049fa8 <vPortExitCritical+0x54>)
 8049f88:	681b      	ldr	r3, [r3, #0]
 8049f8a:	2b00      	cmp	r3, #0
 8049f8c:	d105      	bne.n	8049f9a <vPortExitCritical+0x46>
 8049f8e:	2300      	movs	r3, #0
 8049f90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8049f92:	683b      	ldr	r3, [r7, #0]
 8049f94:	f383 8811 	msr	BASEPRI, r3
}
 8049f98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8049f9a:	bf00      	nop
 8049f9c:	370c      	adds	r7, #12
 8049f9e:	46bd      	mov	sp, r7
 8049fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049fa4:	4770      	bx	lr
 8049fa6:	bf00      	nop
 8049fa8:	20000020 	.word	0x20000020
 8049fac:	00000000 	.word	0x00000000

08049fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8049fb0:	f3ef 8009 	mrs	r0, PSP
 8049fb4:	f3bf 8f6f 	isb	sy
 8049fb8:	4b15      	ldr	r3, [pc, #84]	; (804a010 <pxCurrentTCBConst>)
 8049fba:	681a      	ldr	r2, [r3, #0]
 8049fbc:	f01e 0f10 	tst.w	lr, #16
 8049fc0:	bf08      	it	eq
 8049fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8049fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049fca:	6010      	str	r0, [r2, #0]
 8049fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8049fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8049fd4:	b672      	cpsid	i
 8049fd6:	f380 8811 	msr	BASEPRI, r0
 8049fda:	f3bf 8f4f 	dsb	sy
 8049fde:	f3bf 8f6f 	isb	sy
 8049fe2:	b662      	cpsie	i
 8049fe4:	f7ff f9e6 	bl	80493b4 <vTaskSwitchContext>
 8049fe8:	f04f 0000 	mov.w	r0, #0
 8049fec:	f380 8811 	msr	BASEPRI, r0
 8049ff0:	bc09      	pop	{r0, r3}
 8049ff2:	6819      	ldr	r1, [r3, #0]
 8049ff4:	6808      	ldr	r0, [r1, #0]
 8049ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049ffa:	f01e 0f10 	tst.w	lr, #16
 8049ffe:	bf08      	it	eq
 804a000:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 804a004:	f380 8809 	msr	PSP, r0
 804a008:	f3bf 8f6f 	isb	sy
 804a00c:	4770      	bx	lr
 804a00e:	bf00      	nop

0804a010 <pxCurrentTCBConst>:
 804a010:	20006f1c 	.word	0x20006f1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 804a014:	bf00      	nop
 804a016:	bf00      	nop

0804a018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 804a018:	b580      	push	{r7, lr}
 804a01a:	b082      	sub	sp, #8
 804a01c:	af00      	add	r7, sp, #0
	__asm volatile
 804a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a022:	b672      	cpsid	i
 804a024:	f383 8811 	msr	BASEPRI, r3
 804a028:	f3bf 8f6f 	isb	sy
 804a02c:	f3bf 8f4f 	dsb	sy
 804a030:	b662      	cpsie	i
 804a032:	607b      	str	r3, [r7, #4]
}
 804a034:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 804a036:	f7ff f903 	bl	8049240 <xTaskIncrementTick>
 804a03a:	4603      	mov	r3, r0
 804a03c:	2b00      	cmp	r3, #0
 804a03e:	d003      	beq.n	804a048 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 804a040:	4b06      	ldr	r3, [pc, #24]	; (804a05c <SysTick_Handler+0x44>)
 804a042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804a046:	601a      	str	r2, [r3, #0]
 804a048:	2300      	movs	r3, #0
 804a04a:	603b      	str	r3, [r7, #0]
	__asm volatile
 804a04c:	683b      	ldr	r3, [r7, #0]
 804a04e:	f383 8811 	msr	BASEPRI, r3
}
 804a052:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 804a054:	bf00      	nop
 804a056:	3708      	adds	r7, #8
 804a058:	46bd      	mov	sp, r7
 804a05a:	bd80      	pop	{r7, pc}
 804a05c:	e000ed04 	.word	0xe000ed04

0804a060 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 804a060:	b480      	push	{r7}
 804a062:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 804a064:	4b0b      	ldr	r3, [pc, #44]	; (804a094 <vPortSetupTimerInterrupt+0x34>)
 804a066:	2200      	movs	r2, #0
 804a068:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 804a06a:	4b0b      	ldr	r3, [pc, #44]	; (804a098 <vPortSetupTimerInterrupt+0x38>)
 804a06c:	2200      	movs	r2, #0
 804a06e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 804a070:	4b0a      	ldr	r3, [pc, #40]	; (804a09c <vPortSetupTimerInterrupt+0x3c>)
 804a072:	681b      	ldr	r3, [r3, #0]
 804a074:	4a0a      	ldr	r2, [pc, #40]	; (804a0a0 <vPortSetupTimerInterrupt+0x40>)
 804a076:	fba2 2303 	umull	r2, r3, r2, r3
 804a07a:	099b      	lsrs	r3, r3, #6
 804a07c:	4a09      	ldr	r2, [pc, #36]	; (804a0a4 <vPortSetupTimerInterrupt+0x44>)
 804a07e:	3b01      	subs	r3, #1
 804a080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 804a082:	4b04      	ldr	r3, [pc, #16]	; (804a094 <vPortSetupTimerInterrupt+0x34>)
 804a084:	2207      	movs	r2, #7
 804a086:	601a      	str	r2, [r3, #0]
}
 804a088:	bf00      	nop
 804a08a:	46bd      	mov	sp, r7
 804a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a090:	4770      	bx	lr
 804a092:	bf00      	nop
 804a094:	e000e010 	.word	0xe000e010
 804a098:	e000e018 	.word	0xe000e018
 804a09c:	20000000 	.word	0x20000000
 804a0a0:	10624dd3 	.word	0x10624dd3
 804a0a4:	e000e014 	.word	0xe000e014

0804a0a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 804a0a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 804a0b8 <vPortEnableVFP+0x10>
 804a0ac:	6801      	ldr	r1, [r0, #0]
 804a0ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804a0b2:	6001      	str	r1, [r0, #0]
 804a0b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 804a0b6:	bf00      	nop
 804a0b8:	e000ed88 	.word	0xe000ed88

0804a0bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 804a0bc:	b480      	push	{r7}
 804a0be:	b085      	sub	sp, #20
 804a0c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 804a0c2:	f3ef 8305 	mrs	r3, IPSR
 804a0c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 804a0c8:	68fb      	ldr	r3, [r7, #12]
 804a0ca:	2b0f      	cmp	r3, #15
 804a0cc:	d916      	bls.n	804a0fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 804a0ce:	4a19      	ldr	r2, [pc, #100]	; (804a134 <vPortValidateInterruptPriority+0x78>)
 804a0d0:	68fb      	ldr	r3, [r7, #12]
 804a0d2:	4413      	add	r3, r2
 804a0d4:	781b      	ldrb	r3, [r3, #0]
 804a0d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 804a0d8:	4b17      	ldr	r3, [pc, #92]	; (804a138 <vPortValidateInterruptPriority+0x7c>)
 804a0da:	781b      	ldrb	r3, [r3, #0]
 804a0dc:	7afa      	ldrb	r2, [r7, #11]
 804a0de:	429a      	cmp	r2, r3
 804a0e0:	d20c      	bcs.n	804a0fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 804a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a0e6:	b672      	cpsid	i
 804a0e8:	f383 8811 	msr	BASEPRI, r3
 804a0ec:	f3bf 8f6f 	isb	sy
 804a0f0:	f3bf 8f4f 	dsb	sy
 804a0f4:	b662      	cpsie	i
 804a0f6:	607b      	str	r3, [r7, #4]
}
 804a0f8:	bf00      	nop
 804a0fa:	e7fe      	b.n	804a0fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 804a0fc:	4b0f      	ldr	r3, [pc, #60]	; (804a13c <vPortValidateInterruptPriority+0x80>)
 804a0fe:	681b      	ldr	r3, [r3, #0]
 804a100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 804a104:	4b0e      	ldr	r3, [pc, #56]	; (804a140 <vPortValidateInterruptPriority+0x84>)
 804a106:	681b      	ldr	r3, [r3, #0]
 804a108:	429a      	cmp	r2, r3
 804a10a:	d90c      	bls.n	804a126 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 804a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a110:	b672      	cpsid	i
 804a112:	f383 8811 	msr	BASEPRI, r3
 804a116:	f3bf 8f6f 	isb	sy
 804a11a:	f3bf 8f4f 	dsb	sy
 804a11e:	b662      	cpsie	i
 804a120:	603b      	str	r3, [r7, #0]
}
 804a122:	bf00      	nop
 804a124:	e7fe      	b.n	804a124 <vPortValidateInterruptPriority+0x68>
	}
 804a126:	bf00      	nop
 804a128:	3714      	adds	r7, #20
 804a12a:	46bd      	mov	sp, r7
 804a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a130:	4770      	bx	lr
 804a132:	bf00      	nop
 804a134:	e000e3f0 	.word	0xe000e3f0
 804a138:	20007048 	.word	0x20007048
 804a13c:	e000ed0c 	.word	0xe000ed0c
 804a140:	2000704c 	.word	0x2000704c

0804a144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 804a144:	b580      	push	{r7, lr}
 804a146:	b08a      	sub	sp, #40	; 0x28
 804a148:	af00      	add	r7, sp, #0
 804a14a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 804a14c:	2300      	movs	r3, #0
 804a14e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 804a150:	f7fe ffa8 	bl	80490a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 804a154:	4b5b      	ldr	r3, [pc, #364]	; (804a2c4 <pvPortMalloc+0x180>)
 804a156:	681b      	ldr	r3, [r3, #0]
 804a158:	2b00      	cmp	r3, #0
 804a15a:	d101      	bne.n	804a160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 804a15c:	f000 f91a 	bl	804a394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 804a160:	4b59      	ldr	r3, [pc, #356]	; (804a2c8 <pvPortMalloc+0x184>)
 804a162:	681a      	ldr	r2, [r3, #0]
 804a164:	687b      	ldr	r3, [r7, #4]
 804a166:	4013      	ands	r3, r2
 804a168:	2b00      	cmp	r3, #0
 804a16a:	f040 8092 	bne.w	804a292 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 804a16e:	687b      	ldr	r3, [r7, #4]
 804a170:	2b00      	cmp	r3, #0
 804a172:	d01f      	beq.n	804a1b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 804a174:	2208      	movs	r2, #8
 804a176:	687b      	ldr	r3, [r7, #4]
 804a178:	4413      	add	r3, r2
 804a17a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 804a17c:	687b      	ldr	r3, [r7, #4]
 804a17e:	f003 0307 	and.w	r3, r3, #7
 804a182:	2b00      	cmp	r3, #0
 804a184:	d016      	beq.n	804a1b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 804a186:	687b      	ldr	r3, [r7, #4]
 804a188:	f023 0307 	bic.w	r3, r3, #7
 804a18c:	3308      	adds	r3, #8
 804a18e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 804a190:	687b      	ldr	r3, [r7, #4]
 804a192:	f003 0307 	and.w	r3, r3, #7
 804a196:	2b00      	cmp	r3, #0
 804a198:	d00c      	beq.n	804a1b4 <pvPortMalloc+0x70>
	__asm volatile
 804a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a19e:	b672      	cpsid	i
 804a1a0:	f383 8811 	msr	BASEPRI, r3
 804a1a4:	f3bf 8f6f 	isb	sy
 804a1a8:	f3bf 8f4f 	dsb	sy
 804a1ac:	b662      	cpsie	i
 804a1ae:	617b      	str	r3, [r7, #20]
}
 804a1b0:	bf00      	nop
 804a1b2:	e7fe      	b.n	804a1b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 804a1b4:	687b      	ldr	r3, [r7, #4]
 804a1b6:	2b00      	cmp	r3, #0
 804a1b8:	d06b      	beq.n	804a292 <pvPortMalloc+0x14e>
 804a1ba:	4b44      	ldr	r3, [pc, #272]	; (804a2cc <pvPortMalloc+0x188>)
 804a1bc:	681b      	ldr	r3, [r3, #0]
 804a1be:	687a      	ldr	r2, [r7, #4]
 804a1c0:	429a      	cmp	r2, r3
 804a1c2:	d866      	bhi.n	804a292 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 804a1c4:	4b42      	ldr	r3, [pc, #264]	; (804a2d0 <pvPortMalloc+0x18c>)
 804a1c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 804a1c8:	4b41      	ldr	r3, [pc, #260]	; (804a2d0 <pvPortMalloc+0x18c>)
 804a1ca:	681b      	ldr	r3, [r3, #0]
 804a1cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 804a1ce:	e004      	b.n	804a1da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 804a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a1d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 804a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a1d6:	681b      	ldr	r3, [r3, #0]
 804a1d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 804a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a1dc:	685b      	ldr	r3, [r3, #4]
 804a1de:	687a      	ldr	r2, [r7, #4]
 804a1e0:	429a      	cmp	r2, r3
 804a1e2:	d903      	bls.n	804a1ec <pvPortMalloc+0xa8>
 804a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a1e6:	681b      	ldr	r3, [r3, #0]
 804a1e8:	2b00      	cmp	r3, #0
 804a1ea:	d1f1      	bne.n	804a1d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 804a1ec:	4b35      	ldr	r3, [pc, #212]	; (804a2c4 <pvPortMalloc+0x180>)
 804a1ee:	681b      	ldr	r3, [r3, #0]
 804a1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804a1f2:	429a      	cmp	r2, r3
 804a1f4:	d04d      	beq.n	804a292 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 804a1f6:	6a3b      	ldr	r3, [r7, #32]
 804a1f8:	681b      	ldr	r3, [r3, #0]
 804a1fa:	2208      	movs	r2, #8
 804a1fc:	4413      	add	r3, r2
 804a1fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 804a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a202:	681a      	ldr	r2, [r3, #0]
 804a204:	6a3b      	ldr	r3, [r7, #32]
 804a206:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 804a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a20a:	685a      	ldr	r2, [r3, #4]
 804a20c:	687b      	ldr	r3, [r7, #4]
 804a20e:	1ad2      	subs	r2, r2, r3
 804a210:	2308      	movs	r3, #8
 804a212:	005b      	lsls	r3, r3, #1
 804a214:	429a      	cmp	r2, r3
 804a216:	d921      	bls.n	804a25c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 804a218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804a21a:	687b      	ldr	r3, [r7, #4]
 804a21c:	4413      	add	r3, r2
 804a21e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 804a220:	69bb      	ldr	r3, [r7, #24]
 804a222:	f003 0307 	and.w	r3, r3, #7
 804a226:	2b00      	cmp	r3, #0
 804a228:	d00c      	beq.n	804a244 <pvPortMalloc+0x100>
	__asm volatile
 804a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a22e:	b672      	cpsid	i
 804a230:	f383 8811 	msr	BASEPRI, r3
 804a234:	f3bf 8f6f 	isb	sy
 804a238:	f3bf 8f4f 	dsb	sy
 804a23c:	b662      	cpsie	i
 804a23e:	613b      	str	r3, [r7, #16]
}
 804a240:	bf00      	nop
 804a242:	e7fe      	b.n	804a242 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 804a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a246:	685a      	ldr	r2, [r3, #4]
 804a248:	687b      	ldr	r3, [r7, #4]
 804a24a:	1ad2      	subs	r2, r2, r3
 804a24c:	69bb      	ldr	r3, [r7, #24]
 804a24e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 804a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a252:	687a      	ldr	r2, [r7, #4]
 804a254:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 804a256:	69b8      	ldr	r0, [r7, #24]
 804a258:	f000 f8fe 	bl	804a458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 804a25c:	4b1b      	ldr	r3, [pc, #108]	; (804a2cc <pvPortMalloc+0x188>)
 804a25e:	681a      	ldr	r2, [r3, #0]
 804a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a262:	685b      	ldr	r3, [r3, #4]
 804a264:	1ad3      	subs	r3, r2, r3
 804a266:	4a19      	ldr	r2, [pc, #100]	; (804a2cc <pvPortMalloc+0x188>)
 804a268:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 804a26a:	4b18      	ldr	r3, [pc, #96]	; (804a2cc <pvPortMalloc+0x188>)
 804a26c:	681a      	ldr	r2, [r3, #0]
 804a26e:	4b19      	ldr	r3, [pc, #100]	; (804a2d4 <pvPortMalloc+0x190>)
 804a270:	681b      	ldr	r3, [r3, #0]
 804a272:	429a      	cmp	r2, r3
 804a274:	d203      	bcs.n	804a27e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 804a276:	4b15      	ldr	r3, [pc, #84]	; (804a2cc <pvPortMalloc+0x188>)
 804a278:	681b      	ldr	r3, [r3, #0]
 804a27a:	4a16      	ldr	r2, [pc, #88]	; (804a2d4 <pvPortMalloc+0x190>)
 804a27c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 804a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a280:	685a      	ldr	r2, [r3, #4]
 804a282:	4b11      	ldr	r3, [pc, #68]	; (804a2c8 <pvPortMalloc+0x184>)
 804a284:	681b      	ldr	r3, [r3, #0]
 804a286:	431a      	orrs	r2, r3
 804a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a28a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 804a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a28e:	2200      	movs	r2, #0
 804a290:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 804a292:	f7fe ff15 	bl	80490c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 804a296:	69fb      	ldr	r3, [r7, #28]
 804a298:	f003 0307 	and.w	r3, r3, #7
 804a29c:	2b00      	cmp	r3, #0
 804a29e:	d00c      	beq.n	804a2ba <pvPortMalloc+0x176>
	__asm volatile
 804a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a2a4:	b672      	cpsid	i
 804a2a6:	f383 8811 	msr	BASEPRI, r3
 804a2aa:	f3bf 8f6f 	isb	sy
 804a2ae:	f3bf 8f4f 	dsb	sy
 804a2b2:	b662      	cpsie	i
 804a2b4:	60fb      	str	r3, [r7, #12]
}
 804a2b6:	bf00      	nop
 804a2b8:	e7fe      	b.n	804a2b8 <pvPortMalloc+0x174>
	return pvReturn;
 804a2ba:	69fb      	ldr	r3, [r7, #28]
}
 804a2bc:	4618      	mov	r0, r3
 804a2be:	3728      	adds	r7, #40	; 0x28
 804a2c0:	46bd      	mov	sp, r7
 804a2c2:	bd80      	pop	{r7, pc}
 804a2c4:	20020058 	.word	0x20020058
 804a2c8:	20020064 	.word	0x20020064
 804a2cc:	2002005c 	.word	0x2002005c
 804a2d0:	20020050 	.word	0x20020050
 804a2d4:	20020060 	.word	0x20020060

0804a2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 804a2d8:	b580      	push	{r7, lr}
 804a2da:	b086      	sub	sp, #24
 804a2dc:	af00      	add	r7, sp, #0
 804a2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 804a2e0:	687b      	ldr	r3, [r7, #4]
 804a2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 804a2e4:	687b      	ldr	r3, [r7, #4]
 804a2e6:	2b00      	cmp	r3, #0
 804a2e8:	d04c      	beq.n	804a384 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 804a2ea:	2308      	movs	r3, #8
 804a2ec:	425b      	negs	r3, r3
 804a2ee:	697a      	ldr	r2, [r7, #20]
 804a2f0:	4413      	add	r3, r2
 804a2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 804a2f4:	697b      	ldr	r3, [r7, #20]
 804a2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 804a2f8:	693b      	ldr	r3, [r7, #16]
 804a2fa:	685a      	ldr	r2, [r3, #4]
 804a2fc:	4b23      	ldr	r3, [pc, #140]	; (804a38c <vPortFree+0xb4>)
 804a2fe:	681b      	ldr	r3, [r3, #0]
 804a300:	4013      	ands	r3, r2
 804a302:	2b00      	cmp	r3, #0
 804a304:	d10c      	bne.n	804a320 <vPortFree+0x48>
	__asm volatile
 804a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a30a:	b672      	cpsid	i
 804a30c:	f383 8811 	msr	BASEPRI, r3
 804a310:	f3bf 8f6f 	isb	sy
 804a314:	f3bf 8f4f 	dsb	sy
 804a318:	b662      	cpsie	i
 804a31a:	60fb      	str	r3, [r7, #12]
}
 804a31c:	bf00      	nop
 804a31e:	e7fe      	b.n	804a31e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 804a320:	693b      	ldr	r3, [r7, #16]
 804a322:	681b      	ldr	r3, [r3, #0]
 804a324:	2b00      	cmp	r3, #0
 804a326:	d00c      	beq.n	804a342 <vPortFree+0x6a>
	__asm volatile
 804a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a32c:	b672      	cpsid	i
 804a32e:	f383 8811 	msr	BASEPRI, r3
 804a332:	f3bf 8f6f 	isb	sy
 804a336:	f3bf 8f4f 	dsb	sy
 804a33a:	b662      	cpsie	i
 804a33c:	60bb      	str	r3, [r7, #8]
}
 804a33e:	bf00      	nop
 804a340:	e7fe      	b.n	804a340 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 804a342:	693b      	ldr	r3, [r7, #16]
 804a344:	685a      	ldr	r2, [r3, #4]
 804a346:	4b11      	ldr	r3, [pc, #68]	; (804a38c <vPortFree+0xb4>)
 804a348:	681b      	ldr	r3, [r3, #0]
 804a34a:	4013      	ands	r3, r2
 804a34c:	2b00      	cmp	r3, #0
 804a34e:	d019      	beq.n	804a384 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 804a350:	693b      	ldr	r3, [r7, #16]
 804a352:	681b      	ldr	r3, [r3, #0]
 804a354:	2b00      	cmp	r3, #0
 804a356:	d115      	bne.n	804a384 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 804a358:	693b      	ldr	r3, [r7, #16]
 804a35a:	685a      	ldr	r2, [r3, #4]
 804a35c:	4b0b      	ldr	r3, [pc, #44]	; (804a38c <vPortFree+0xb4>)
 804a35e:	681b      	ldr	r3, [r3, #0]
 804a360:	43db      	mvns	r3, r3
 804a362:	401a      	ands	r2, r3
 804a364:	693b      	ldr	r3, [r7, #16]
 804a366:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 804a368:	f7fe fe9c 	bl	80490a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 804a36c:	693b      	ldr	r3, [r7, #16]
 804a36e:	685a      	ldr	r2, [r3, #4]
 804a370:	4b07      	ldr	r3, [pc, #28]	; (804a390 <vPortFree+0xb8>)
 804a372:	681b      	ldr	r3, [r3, #0]
 804a374:	4413      	add	r3, r2
 804a376:	4a06      	ldr	r2, [pc, #24]	; (804a390 <vPortFree+0xb8>)
 804a378:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 804a37a:	6938      	ldr	r0, [r7, #16]
 804a37c:	f000 f86c 	bl	804a458 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 804a380:	f7fe fe9e 	bl	80490c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 804a384:	bf00      	nop
 804a386:	3718      	adds	r7, #24
 804a388:	46bd      	mov	sp, r7
 804a38a:	bd80      	pop	{r7, pc}
 804a38c:	20020064 	.word	0x20020064
 804a390:	2002005c 	.word	0x2002005c

0804a394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 804a394:	b480      	push	{r7}
 804a396:	b085      	sub	sp, #20
 804a398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 804a39a:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 804a39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 804a3a0:	4b27      	ldr	r3, [pc, #156]	; (804a440 <prvHeapInit+0xac>)
 804a3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 804a3a4:	68fb      	ldr	r3, [r7, #12]
 804a3a6:	f003 0307 	and.w	r3, r3, #7
 804a3aa:	2b00      	cmp	r3, #0
 804a3ac:	d00c      	beq.n	804a3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 804a3ae:	68fb      	ldr	r3, [r7, #12]
 804a3b0:	3307      	adds	r3, #7
 804a3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 804a3b4:	68fb      	ldr	r3, [r7, #12]
 804a3b6:	f023 0307 	bic.w	r3, r3, #7
 804a3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 804a3bc:	68ba      	ldr	r2, [r7, #8]
 804a3be:	68fb      	ldr	r3, [r7, #12]
 804a3c0:	1ad3      	subs	r3, r2, r3
 804a3c2:	4a1f      	ldr	r2, [pc, #124]	; (804a440 <prvHeapInit+0xac>)
 804a3c4:	4413      	add	r3, r2
 804a3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 804a3c8:	68fb      	ldr	r3, [r7, #12]
 804a3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 804a3cc:	4a1d      	ldr	r2, [pc, #116]	; (804a444 <prvHeapInit+0xb0>)
 804a3ce:	687b      	ldr	r3, [r7, #4]
 804a3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 804a3d2:	4b1c      	ldr	r3, [pc, #112]	; (804a444 <prvHeapInit+0xb0>)
 804a3d4:	2200      	movs	r2, #0
 804a3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 804a3d8:	687b      	ldr	r3, [r7, #4]
 804a3da:	68ba      	ldr	r2, [r7, #8]
 804a3dc:	4413      	add	r3, r2
 804a3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 804a3e0:	2208      	movs	r2, #8
 804a3e2:	68fb      	ldr	r3, [r7, #12]
 804a3e4:	1a9b      	subs	r3, r3, r2
 804a3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 804a3e8:	68fb      	ldr	r3, [r7, #12]
 804a3ea:	f023 0307 	bic.w	r3, r3, #7
 804a3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 804a3f0:	68fb      	ldr	r3, [r7, #12]
 804a3f2:	4a15      	ldr	r2, [pc, #84]	; (804a448 <prvHeapInit+0xb4>)
 804a3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 804a3f6:	4b14      	ldr	r3, [pc, #80]	; (804a448 <prvHeapInit+0xb4>)
 804a3f8:	681b      	ldr	r3, [r3, #0]
 804a3fa:	2200      	movs	r2, #0
 804a3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 804a3fe:	4b12      	ldr	r3, [pc, #72]	; (804a448 <prvHeapInit+0xb4>)
 804a400:	681b      	ldr	r3, [r3, #0]
 804a402:	2200      	movs	r2, #0
 804a404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 804a406:	687b      	ldr	r3, [r7, #4]
 804a408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 804a40a:	683b      	ldr	r3, [r7, #0]
 804a40c:	68fa      	ldr	r2, [r7, #12]
 804a40e:	1ad2      	subs	r2, r2, r3
 804a410:	683b      	ldr	r3, [r7, #0]
 804a412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 804a414:	4b0c      	ldr	r3, [pc, #48]	; (804a448 <prvHeapInit+0xb4>)
 804a416:	681a      	ldr	r2, [r3, #0]
 804a418:	683b      	ldr	r3, [r7, #0]
 804a41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 804a41c:	683b      	ldr	r3, [r7, #0]
 804a41e:	685b      	ldr	r3, [r3, #4]
 804a420:	4a0a      	ldr	r2, [pc, #40]	; (804a44c <prvHeapInit+0xb8>)
 804a422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 804a424:	683b      	ldr	r3, [r7, #0]
 804a426:	685b      	ldr	r3, [r3, #4]
 804a428:	4a09      	ldr	r2, [pc, #36]	; (804a450 <prvHeapInit+0xbc>)
 804a42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 804a42c:	4b09      	ldr	r3, [pc, #36]	; (804a454 <prvHeapInit+0xc0>)
 804a42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 804a432:	601a      	str	r2, [r3, #0]
}
 804a434:	bf00      	nop
 804a436:	3714      	adds	r7, #20
 804a438:	46bd      	mov	sp, r7
 804a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a43e:	4770      	bx	lr
 804a440:	20007050 	.word	0x20007050
 804a444:	20020050 	.word	0x20020050
 804a448:	20020058 	.word	0x20020058
 804a44c:	20020060 	.word	0x20020060
 804a450:	2002005c 	.word	0x2002005c
 804a454:	20020064 	.word	0x20020064

0804a458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 804a458:	b480      	push	{r7}
 804a45a:	b085      	sub	sp, #20
 804a45c:	af00      	add	r7, sp, #0
 804a45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 804a460:	4b28      	ldr	r3, [pc, #160]	; (804a504 <prvInsertBlockIntoFreeList+0xac>)
 804a462:	60fb      	str	r3, [r7, #12]
 804a464:	e002      	b.n	804a46c <prvInsertBlockIntoFreeList+0x14>
 804a466:	68fb      	ldr	r3, [r7, #12]
 804a468:	681b      	ldr	r3, [r3, #0]
 804a46a:	60fb      	str	r3, [r7, #12]
 804a46c:	68fb      	ldr	r3, [r7, #12]
 804a46e:	681b      	ldr	r3, [r3, #0]
 804a470:	687a      	ldr	r2, [r7, #4]
 804a472:	429a      	cmp	r2, r3
 804a474:	d8f7      	bhi.n	804a466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 804a476:	68fb      	ldr	r3, [r7, #12]
 804a478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 804a47a:	68fb      	ldr	r3, [r7, #12]
 804a47c:	685b      	ldr	r3, [r3, #4]
 804a47e:	68ba      	ldr	r2, [r7, #8]
 804a480:	4413      	add	r3, r2
 804a482:	687a      	ldr	r2, [r7, #4]
 804a484:	429a      	cmp	r2, r3
 804a486:	d108      	bne.n	804a49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 804a488:	68fb      	ldr	r3, [r7, #12]
 804a48a:	685a      	ldr	r2, [r3, #4]
 804a48c:	687b      	ldr	r3, [r7, #4]
 804a48e:	685b      	ldr	r3, [r3, #4]
 804a490:	441a      	add	r2, r3
 804a492:	68fb      	ldr	r3, [r7, #12]
 804a494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 804a496:	68fb      	ldr	r3, [r7, #12]
 804a498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 804a49a:	687b      	ldr	r3, [r7, #4]
 804a49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 804a49e:	687b      	ldr	r3, [r7, #4]
 804a4a0:	685b      	ldr	r3, [r3, #4]
 804a4a2:	68ba      	ldr	r2, [r7, #8]
 804a4a4:	441a      	add	r2, r3
 804a4a6:	68fb      	ldr	r3, [r7, #12]
 804a4a8:	681b      	ldr	r3, [r3, #0]
 804a4aa:	429a      	cmp	r2, r3
 804a4ac:	d118      	bne.n	804a4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 804a4ae:	68fb      	ldr	r3, [r7, #12]
 804a4b0:	681a      	ldr	r2, [r3, #0]
 804a4b2:	4b15      	ldr	r3, [pc, #84]	; (804a508 <prvInsertBlockIntoFreeList+0xb0>)
 804a4b4:	681b      	ldr	r3, [r3, #0]
 804a4b6:	429a      	cmp	r2, r3
 804a4b8:	d00d      	beq.n	804a4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 804a4ba:	687b      	ldr	r3, [r7, #4]
 804a4bc:	685a      	ldr	r2, [r3, #4]
 804a4be:	68fb      	ldr	r3, [r7, #12]
 804a4c0:	681b      	ldr	r3, [r3, #0]
 804a4c2:	685b      	ldr	r3, [r3, #4]
 804a4c4:	441a      	add	r2, r3
 804a4c6:	687b      	ldr	r3, [r7, #4]
 804a4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 804a4ca:	68fb      	ldr	r3, [r7, #12]
 804a4cc:	681b      	ldr	r3, [r3, #0]
 804a4ce:	681a      	ldr	r2, [r3, #0]
 804a4d0:	687b      	ldr	r3, [r7, #4]
 804a4d2:	601a      	str	r2, [r3, #0]
 804a4d4:	e008      	b.n	804a4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 804a4d6:	4b0c      	ldr	r3, [pc, #48]	; (804a508 <prvInsertBlockIntoFreeList+0xb0>)
 804a4d8:	681a      	ldr	r2, [r3, #0]
 804a4da:	687b      	ldr	r3, [r7, #4]
 804a4dc:	601a      	str	r2, [r3, #0]
 804a4de:	e003      	b.n	804a4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 804a4e0:	68fb      	ldr	r3, [r7, #12]
 804a4e2:	681a      	ldr	r2, [r3, #0]
 804a4e4:	687b      	ldr	r3, [r7, #4]
 804a4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 804a4e8:	68fa      	ldr	r2, [r7, #12]
 804a4ea:	687b      	ldr	r3, [r7, #4]
 804a4ec:	429a      	cmp	r2, r3
 804a4ee:	d002      	beq.n	804a4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 804a4f0:	68fb      	ldr	r3, [r7, #12]
 804a4f2:	687a      	ldr	r2, [r7, #4]
 804a4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 804a4f6:	bf00      	nop
 804a4f8:	3714      	adds	r7, #20
 804a4fa:	46bd      	mov	sp, r7
 804a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a500:	4770      	bx	lr
 804a502:	bf00      	nop
 804a504:	20020050 	.word	0x20020050
 804a508:	20020058 	.word	0x20020058

0804a50c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 804a50c:	b580      	push	{r7, lr}
 804a50e:	b084      	sub	sp, #16
 804a510:	af00      	add	r7, sp, #0
 804a512:	6078      	str	r0, [r7, #4]
 804a514:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 804a516:	f007 fac5 	bl	8051aa4 <sys_timeouts_sleeptime>
 804a51a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 804a51c:	68fb      	ldr	r3, [r7, #12]
 804a51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a522:	d10b      	bne.n	804a53c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 804a524:	4813      	ldr	r0, [pc, #76]	; (804a574 <tcpip_timeouts_mbox_fetch+0x68>)
 804a526:	f00a f83a 	bl	805459e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 804a52a:	2200      	movs	r2, #0
 804a52c:	6839      	ldr	r1, [r7, #0]
 804a52e:	6878      	ldr	r0, [r7, #4]
 804a530:	f009 ffac 	bl	805448c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 804a534:	480f      	ldr	r0, [pc, #60]	; (804a574 <tcpip_timeouts_mbox_fetch+0x68>)
 804a536:	f00a f823 	bl	8054580 <sys_mutex_lock>
    return;
 804a53a:	e018      	b.n	804a56e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 804a53c:	68fb      	ldr	r3, [r7, #12]
 804a53e:	2b00      	cmp	r3, #0
 804a540:	d102      	bne.n	804a548 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 804a542:	f007 fa75 	bl	8051a30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 804a546:	e7e6      	b.n	804a516 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 804a548:	480a      	ldr	r0, [pc, #40]	; (804a574 <tcpip_timeouts_mbox_fetch+0x68>)
 804a54a:	f00a f828 	bl	805459e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 804a54e:	68fa      	ldr	r2, [r7, #12]
 804a550:	6839      	ldr	r1, [r7, #0]
 804a552:	6878      	ldr	r0, [r7, #4]
 804a554:	f009 ff9a 	bl	805448c <sys_arch_mbox_fetch>
 804a558:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 804a55a:	4806      	ldr	r0, [pc, #24]	; (804a574 <tcpip_timeouts_mbox_fetch+0x68>)
 804a55c:	f00a f810 	bl	8054580 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 804a560:	68bb      	ldr	r3, [r7, #8]
 804a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a566:	d102      	bne.n	804a56e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 804a568:	f007 fa62 	bl	8051a30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 804a56c:	e7d3      	b.n	804a516 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 804a56e:	3710      	adds	r7, #16
 804a570:	46bd      	mov	sp, r7
 804a572:	bd80      	pop	{r7, pc}
 804a574:	20020074 	.word	0x20020074

0804a578 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 804a578:	b580      	push	{r7, lr}
 804a57a:	b084      	sub	sp, #16
 804a57c:	af00      	add	r7, sp, #0
 804a57e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 804a580:	4810      	ldr	r0, [pc, #64]	; (804a5c4 <tcpip_thread+0x4c>)
 804a582:	f009 fffd 	bl	8054580 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 804a586:	4b10      	ldr	r3, [pc, #64]	; (804a5c8 <tcpip_thread+0x50>)
 804a588:	681b      	ldr	r3, [r3, #0]
 804a58a:	2b00      	cmp	r3, #0
 804a58c:	d005      	beq.n	804a59a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 804a58e:	4b0e      	ldr	r3, [pc, #56]	; (804a5c8 <tcpip_thread+0x50>)
 804a590:	681b      	ldr	r3, [r3, #0]
 804a592:	4a0e      	ldr	r2, [pc, #56]	; (804a5cc <tcpip_thread+0x54>)
 804a594:	6812      	ldr	r2, [r2, #0]
 804a596:	4610      	mov	r0, r2
 804a598:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 804a59a:	f107 030c 	add.w	r3, r7, #12
 804a59e:	4619      	mov	r1, r3
 804a5a0:	480b      	ldr	r0, [pc, #44]	; (804a5d0 <tcpip_thread+0x58>)
 804a5a2:	f7ff ffb3 	bl	804a50c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 804a5a6:	68fb      	ldr	r3, [r7, #12]
 804a5a8:	2b00      	cmp	r3, #0
 804a5aa:	d106      	bne.n	804a5ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 804a5ac:	4b09      	ldr	r3, [pc, #36]	; (804a5d4 <tcpip_thread+0x5c>)
 804a5ae:	2291      	movs	r2, #145	; 0x91
 804a5b0:	4909      	ldr	r1, [pc, #36]	; (804a5d8 <tcpip_thread+0x60>)
 804a5b2:	480a      	ldr	r0, [pc, #40]	; (804a5dc <tcpip_thread+0x64>)
 804a5b4:	f00a f944 	bl	8054840 <iprintf>
      continue;
 804a5b8:	e003      	b.n	804a5c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 804a5ba:	68fb      	ldr	r3, [r7, #12]
 804a5bc:	4618      	mov	r0, r3
 804a5be:	f000 f80f 	bl	804a5e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 804a5c2:	e7ea      	b.n	804a59a <tcpip_thread+0x22>
 804a5c4:	20020074 	.word	0x20020074
 804a5c8:	20020068 	.word	0x20020068
 804a5cc:	2002006c 	.word	0x2002006c
 804a5d0:	20020070 	.word	0x20020070
 804a5d4:	080559b4 	.word	0x080559b4
 804a5d8:	080559e4 	.word	0x080559e4
 804a5dc:	08055a04 	.word	0x08055a04

0804a5e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 804a5e0:	b580      	push	{r7, lr}
 804a5e2:	b082      	sub	sp, #8
 804a5e4:	af00      	add	r7, sp, #0
 804a5e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 804a5e8:	687b      	ldr	r3, [r7, #4]
 804a5ea:	781b      	ldrb	r3, [r3, #0]
 804a5ec:	2b02      	cmp	r3, #2
 804a5ee:	d026      	beq.n	804a63e <tcpip_thread_handle_msg+0x5e>
 804a5f0:	2b02      	cmp	r3, #2
 804a5f2:	dc2b      	bgt.n	804a64c <tcpip_thread_handle_msg+0x6c>
 804a5f4:	2b00      	cmp	r3, #0
 804a5f6:	d002      	beq.n	804a5fe <tcpip_thread_handle_msg+0x1e>
 804a5f8:	2b01      	cmp	r3, #1
 804a5fa:	d015      	beq.n	804a628 <tcpip_thread_handle_msg+0x48>
 804a5fc:	e026      	b.n	804a64c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 804a5fe:	687b      	ldr	r3, [r7, #4]
 804a600:	68db      	ldr	r3, [r3, #12]
 804a602:	687a      	ldr	r2, [r7, #4]
 804a604:	6850      	ldr	r0, [r2, #4]
 804a606:	687a      	ldr	r2, [r7, #4]
 804a608:	6892      	ldr	r2, [r2, #8]
 804a60a:	4611      	mov	r1, r2
 804a60c:	4798      	blx	r3
 804a60e:	4603      	mov	r3, r0
 804a610:	2b00      	cmp	r3, #0
 804a612:	d004      	beq.n	804a61e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 804a614:	687b      	ldr	r3, [r7, #4]
 804a616:	685b      	ldr	r3, [r3, #4]
 804a618:	4618      	mov	r0, r3
 804a61a:	f001 fd0b 	bl	804c034 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 804a61e:	6879      	ldr	r1, [r7, #4]
 804a620:	2009      	movs	r0, #9
 804a622:	f000 fe63 	bl	804b2ec <memp_free>
      break;
 804a626:	e018      	b.n	804a65a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 804a628:	687b      	ldr	r3, [r7, #4]
 804a62a:	685b      	ldr	r3, [r3, #4]
 804a62c:	687a      	ldr	r2, [r7, #4]
 804a62e:	6892      	ldr	r2, [r2, #8]
 804a630:	4610      	mov	r0, r2
 804a632:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 804a634:	6879      	ldr	r1, [r7, #4]
 804a636:	2008      	movs	r0, #8
 804a638:	f000 fe58 	bl	804b2ec <memp_free>
      break;
 804a63c:	e00d      	b.n	804a65a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 804a63e:	687b      	ldr	r3, [r7, #4]
 804a640:	685b      	ldr	r3, [r3, #4]
 804a642:	687a      	ldr	r2, [r7, #4]
 804a644:	6892      	ldr	r2, [r2, #8]
 804a646:	4610      	mov	r0, r2
 804a648:	4798      	blx	r3
      break;
 804a64a:	e006      	b.n	804a65a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 804a64c:	4b05      	ldr	r3, [pc, #20]	; (804a664 <tcpip_thread_handle_msg+0x84>)
 804a64e:	22cf      	movs	r2, #207	; 0xcf
 804a650:	4905      	ldr	r1, [pc, #20]	; (804a668 <tcpip_thread_handle_msg+0x88>)
 804a652:	4806      	ldr	r0, [pc, #24]	; (804a66c <tcpip_thread_handle_msg+0x8c>)
 804a654:	f00a f8f4 	bl	8054840 <iprintf>
      break;
 804a658:	bf00      	nop
  }
}
 804a65a:	bf00      	nop
 804a65c:	3708      	adds	r7, #8
 804a65e:	46bd      	mov	sp, r7
 804a660:	bd80      	pop	{r7, pc}
 804a662:	bf00      	nop
 804a664:	080559b4 	.word	0x080559b4
 804a668:	080559e4 	.word	0x080559e4
 804a66c:	08055a04 	.word	0x08055a04

0804a670 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 804a670:	b580      	push	{r7, lr}
 804a672:	b086      	sub	sp, #24
 804a674:	af00      	add	r7, sp, #0
 804a676:	60f8      	str	r0, [r7, #12]
 804a678:	60b9      	str	r1, [r7, #8]
 804a67a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 804a67c:	481a      	ldr	r0, [pc, #104]	; (804a6e8 <tcpip_inpkt+0x78>)
 804a67e:	f009 ff44 	bl	805450a <sys_mbox_valid>
 804a682:	4603      	mov	r3, r0
 804a684:	2b00      	cmp	r3, #0
 804a686:	d105      	bne.n	804a694 <tcpip_inpkt+0x24>
 804a688:	4b18      	ldr	r3, [pc, #96]	; (804a6ec <tcpip_inpkt+0x7c>)
 804a68a:	22fc      	movs	r2, #252	; 0xfc
 804a68c:	4918      	ldr	r1, [pc, #96]	; (804a6f0 <tcpip_inpkt+0x80>)
 804a68e:	4819      	ldr	r0, [pc, #100]	; (804a6f4 <tcpip_inpkt+0x84>)
 804a690:	f00a f8d6 	bl	8054840 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 804a694:	2009      	movs	r0, #9
 804a696:	f000 fdb3 	bl	804b200 <memp_malloc>
 804a69a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 804a69c:	697b      	ldr	r3, [r7, #20]
 804a69e:	2b00      	cmp	r3, #0
 804a6a0:	d102      	bne.n	804a6a8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 804a6a2:	f04f 33ff 	mov.w	r3, #4294967295
 804a6a6:	e01a      	b.n	804a6de <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 804a6a8:	697b      	ldr	r3, [r7, #20]
 804a6aa:	2200      	movs	r2, #0
 804a6ac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 804a6ae:	697b      	ldr	r3, [r7, #20]
 804a6b0:	68fa      	ldr	r2, [r7, #12]
 804a6b2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 804a6b4:	697b      	ldr	r3, [r7, #20]
 804a6b6:	68ba      	ldr	r2, [r7, #8]
 804a6b8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 804a6ba:	697b      	ldr	r3, [r7, #20]
 804a6bc:	687a      	ldr	r2, [r7, #4]
 804a6be:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 804a6c0:	6979      	ldr	r1, [r7, #20]
 804a6c2:	4809      	ldr	r0, [pc, #36]	; (804a6e8 <tcpip_inpkt+0x78>)
 804a6c4:	f009 fec8 	bl	8054458 <sys_mbox_trypost>
 804a6c8:	4603      	mov	r3, r0
 804a6ca:	2b00      	cmp	r3, #0
 804a6cc:	d006      	beq.n	804a6dc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 804a6ce:	6979      	ldr	r1, [r7, #20]
 804a6d0:	2009      	movs	r0, #9
 804a6d2:	f000 fe0b 	bl	804b2ec <memp_free>
    return ERR_MEM;
 804a6d6:	f04f 33ff 	mov.w	r3, #4294967295
 804a6da:	e000      	b.n	804a6de <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 804a6dc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 804a6de:	4618      	mov	r0, r3
 804a6e0:	3718      	adds	r7, #24
 804a6e2:	46bd      	mov	sp, r7
 804a6e4:	bd80      	pop	{r7, pc}
 804a6e6:	bf00      	nop
 804a6e8:	20020070 	.word	0x20020070
 804a6ec:	080559b4 	.word	0x080559b4
 804a6f0:	08055a2c 	.word	0x08055a2c
 804a6f4:	08055a04 	.word	0x08055a04

0804a6f8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 804a6f8:	b580      	push	{r7, lr}
 804a6fa:	b082      	sub	sp, #8
 804a6fc:	af00      	add	r7, sp, #0
 804a6fe:	6078      	str	r0, [r7, #4]
 804a700:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 804a702:	683b      	ldr	r3, [r7, #0]
 804a704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804a708:	f003 0318 	and.w	r3, r3, #24
 804a70c:	2b00      	cmp	r3, #0
 804a70e:	d006      	beq.n	804a71e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 804a710:	4a08      	ldr	r2, [pc, #32]	; (804a734 <tcpip_input+0x3c>)
 804a712:	6839      	ldr	r1, [r7, #0]
 804a714:	6878      	ldr	r0, [r7, #4]
 804a716:	f7ff ffab 	bl	804a670 <tcpip_inpkt>
 804a71a:	4603      	mov	r3, r0
 804a71c:	e005      	b.n	804a72a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 804a71e:	4a06      	ldr	r2, [pc, #24]	; (804a738 <tcpip_input+0x40>)
 804a720:	6839      	ldr	r1, [r7, #0]
 804a722:	6878      	ldr	r0, [r7, #4]
 804a724:	f7ff ffa4 	bl	804a670 <tcpip_inpkt>
 804a728:	4603      	mov	r3, r0
}
 804a72a:	4618      	mov	r0, r3
 804a72c:	3708      	adds	r7, #8
 804a72e:	46bd      	mov	sp, r7
 804a730:	bd80      	pop	{r7, pc}
 804a732:	bf00      	nop
 804a734:	08054269 	.word	0x08054269
 804a738:	08053171 	.word	0x08053171

0804a73c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 804a73c:	b580      	push	{r7, lr}
 804a73e:	b084      	sub	sp, #16
 804a740:	af00      	add	r7, sp, #0
 804a742:	6078      	str	r0, [r7, #4]
 804a744:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 804a746:	4819      	ldr	r0, [pc, #100]	; (804a7ac <tcpip_try_callback+0x70>)
 804a748:	f009 fedf 	bl	805450a <sys_mbox_valid>
 804a74c:	4603      	mov	r3, r0
 804a74e:	2b00      	cmp	r3, #0
 804a750:	d106      	bne.n	804a760 <tcpip_try_callback+0x24>
 804a752:	4b17      	ldr	r3, [pc, #92]	; (804a7b0 <tcpip_try_callback+0x74>)
 804a754:	f240 125d 	movw	r2, #349	; 0x15d
 804a758:	4916      	ldr	r1, [pc, #88]	; (804a7b4 <tcpip_try_callback+0x78>)
 804a75a:	4817      	ldr	r0, [pc, #92]	; (804a7b8 <tcpip_try_callback+0x7c>)
 804a75c:	f00a f870 	bl	8054840 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 804a760:	2008      	movs	r0, #8
 804a762:	f000 fd4d 	bl	804b200 <memp_malloc>
 804a766:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 804a768:	68fb      	ldr	r3, [r7, #12]
 804a76a:	2b00      	cmp	r3, #0
 804a76c:	d102      	bne.n	804a774 <tcpip_try_callback+0x38>
    return ERR_MEM;
 804a76e:	f04f 33ff 	mov.w	r3, #4294967295
 804a772:	e017      	b.n	804a7a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 804a774:	68fb      	ldr	r3, [r7, #12]
 804a776:	2201      	movs	r2, #1
 804a778:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 804a77a:	68fb      	ldr	r3, [r7, #12]
 804a77c:	687a      	ldr	r2, [r7, #4]
 804a77e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 804a780:	68fb      	ldr	r3, [r7, #12]
 804a782:	683a      	ldr	r2, [r7, #0]
 804a784:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 804a786:	68f9      	ldr	r1, [r7, #12]
 804a788:	4808      	ldr	r0, [pc, #32]	; (804a7ac <tcpip_try_callback+0x70>)
 804a78a:	f009 fe65 	bl	8054458 <sys_mbox_trypost>
 804a78e:	4603      	mov	r3, r0
 804a790:	2b00      	cmp	r3, #0
 804a792:	d006      	beq.n	804a7a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 804a794:	68f9      	ldr	r1, [r7, #12]
 804a796:	2008      	movs	r0, #8
 804a798:	f000 fda8 	bl	804b2ec <memp_free>
    return ERR_MEM;
 804a79c:	f04f 33ff 	mov.w	r3, #4294967295
 804a7a0:	e000      	b.n	804a7a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 804a7a2:	2300      	movs	r3, #0
}
 804a7a4:	4618      	mov	r0, r3
 804a7a6:	3710      	adds	r7, #16
 804a7a8:	46bd      	mov	sp, r7
 804a7aa:	bd80      	pop	{r7, pc}
 804a7ac:	20020070 	.word	0x20020070
 804a7b0:	080559b4 	.word	0x080559b4
 804a7b4:	08055a2c 	.word	0x08055a2c
 804a7b8:	08055a04 	.word	0x08055a04

0804a7bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 804a7bc:	b580      	push	{r7, lr}
 804a7be:	b084      	sub	sp, #16
 804a7c0:	af02      	add	r7, sp, #8
 804a7c2:	6078      	str	r0, [r7, #4]
 804a7c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 804a7c6:	f000 f871 	bl	804a8ac <lwip_init>

  tcpip_init_done = initfunc;
 804a7ca:	4a17      	ldr	r2, [pc, #92]	; (804a828 <tcpip_init+0x6c>)
 804a7cc:	687b      	ldr	r3, [r7, #4]
 804a7ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 804a7d0:	4a16      	ldr	r2, [pc, #88]	; (804a82c <tcpip_init+0x70>)
 804a7d2:	683b      	ldr	r3, [r7, #0]
 804a7d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 804a7d6:	2106      	movs	r1, #6
 804a7d8:	4815      	ldr	r0, [pc, #84]	; (804a830 <tcpip_init+0x74>)
 804a7da:	f009 fe1b 	bl	8054414 <sys_mbox_new>
 804a7de:	4603      	mov	r3, r0
 804a7e0:	2b00      	cmp	r3, #0
 804a7e2:	d006      	beq.n	804a7f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 804a7e4:	4b13      	ldr	r3, [pc, #76]	; (804a834 <tcpip_init+0x78>)
 804a7e6:	f240 2261 	movw	r2, #609	; 0x261
 804a7ea:	4913      	ldr	r1, [pc, #76]	; (804a838 <tcpip_init+0x7c>)
 804a7ec:	4813      	ldr	r0, [pc, #76]	; (804a83c <tcpip_init+0x80>)
 804a7ee:	f00a f827 	bl	8054840 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 804a7f2:	4813      	ldr	r0, [pc, #76]	; (804a840 <tcpip_init+0x84>)
 804a7f4:	f009 fea8 	bl	8054548 <sys_mutex_new>
 804a7f8:	4603      	mov	r3, r0
 804a7fa:	2b00      	cmp	r3, #0
 804a7fc:	d006      	beq.n	804a80c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 804a7fe:	4b0d      	ldr	r3, [pc, #52]	; (804a834 <tcpip_init+0x78>)
 804a800:	f240 2265 	movw	r2, #613	; 0x265
 804a804:	490f      	ldr	r1, [pc, #60]	; (804a844 <tcpip_init+0x88>)
 804a806:	480d      	ldr	r0, [pc, #52]	; (804a83c <tcpip_init+0x80>)
 804a808:	f00a f81a 	bl	8054840 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 804a80c:	2300      	movs	r3, #0
 804a80e:	9300      	str	r3, [sp, #0]
 804a810:	f44f 6300 	mov.w	r3, #2048	; 0x800
 804a814:	2200      	movs	r2, #0
 804a816:	490c      	ldr	r1, [pc, #48]	; (804a848 <tcpip_init+0x8c>)
 804a818:	480c      	ldr	r0, [pc, #48]	; (804a84c <tcpip_init+0x90>)
 804a81a:	f009 fecd 	bl	80545b8 <sys_thread_new>
}
 804a81e:	bf00      	nop
 804a820:	3708      	adds	r7, #8
 804a822:	46bd      	mov	sp, r7
 804a824:	bd80      	pop	{r7, pc}
 804a826:	bf00      	nop
 804a828:	20020068 	.word	0x20020068
 804a82c:	2002006c 	.word	0x2002006c
 804a830:	20020070 	.word	0x20020070
 804a834:	080559b4 	.word	0x080559b4
 804a838:	08055a3c 	.word	0x08055a3c
 804a83c:	08055a04 	.word	0x08055a04
 804a840:	20020074 	.word	0x20020074
 804a844:	08055a60 	.word	0x08055a60
 804a848:	0804a579 	.word	0x0804a579
 804a84c:	08055a84 	.word	0x08055a84

0804a850 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 804a850:	b480      	push	{r7}
 804a852:	b083      	sub	sp, #12
 804a854:	af00      	add	r7, sp, #0
 804a856:	4603      	mov	r3, r0
 804a858:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 804a85a:	88fb      	ldrh	r3, [r7, #6]
 804a85c:	021b      	lsls	r3, r3, #8
 804a85e:	b21a      	sxth	r2, r3
 804a860:	88fb      	ldrh	r3, [r7, #6]
 804a862:	0a1b      	lsrs	r3, r3, #8
 804a864:	b29b      	uxth	r3, r3
 804a866:	b21b      	sxth	r3, r3
 804a868:	4313      	orrs	r3, r2
 804a86a:	b21b      	sxth	r3, r3
 804a86c:	b29b      	uxth	r3, r3
}
 804a86e:	4618      	mov	r0, r3
 804a870:	370c      	adds	r7, #12
 804a872:	46bd      	mov	sp, r7
 804a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a878:	4770      	bx	lr

0804a87a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 804a87a:	b480      	push	{r7}
 804a87c:	b083      	sub	sp, #12
 804a87e:	af00      	add	r7, sp, #0
 804a880:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 804a882:	687b      	ldr	r3, [r7, #4]
 804a884:	061a      	lsls	r2, r3, #24
 804a886:	687b      	ldr	r3, [r7, #4]
 804a888:	021b      	lsls	r3, r3, #8
 804a88a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a88e:	431a      	orrs	r2, r3
 804a890:	687b      	ldr	r3, [r7, #4]
 804a892:	0a1b      	lsrs	r3, r3, #8
 804a894:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804a898:	431a      	orrs	r2, r3
 804a89a:	687b      	ldr	r3, [r7, #4]
 804a89c:	0e1b      	lsrs	r3, r3, #24
 804a89e:	4313      	orrs	r3, r2
}
 804a8a0:	4618      	mov	r0, r3
 804a8a2:	370c      	adds	r7, #12
 804a8a4:	46bd      	mov	sp, r7
 804a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a8aa:	4770      	bx	lr

0804a8ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 804a8ac:	b580      	push	{r7, lr}
 804a8ae:	b082      	sub	sp, #8
 804a8b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 804a8b2:	2300      	movs	r3, #0
 804a8b4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 804a8b6:	f009 fe39 	bl	805452c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 804a8ba:	f000 f8d5 	bl	804aa68 <mem_init>
  memp_init();
 804a8be:	f000 fc31 	bl	804b124 <memp_init>
  pbuf_init();
  netif_init();
 804a8c2:	f000 fd3d 	bl	804b340 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 804a8c6:	f007 f925 	bl	8051b14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 804a8ca:	f001 fe4d 	bl	804c568 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 804a8ce:	f007 f867 	bl	80519a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 804a8d2:	bf00      	nop
 804a8d4:	3708      	adds	r7, #8
 804a8d6:	46bd      	mov	sp, r7
 804a8d8:	bd80      	pop	{r7, pc}
	...

0804a8dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 804a8dc:	b480      	push	{r7}
 804a8de:	b083      	sub	sp, #12
 804a8e0:	af00      	add	r7, sp, #0
 804a8e2:	4603      	mov	r3, r0
 804a8e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 804a8e6:	4b05      	ldr	r3, [pc, #20]	; (804a8fc <ptr_to_mem+0x20>)
 804a8e8:	681a      	ldr	r2, [r3, #0]
 804a8ea:	88fb      	ldrh	r3, [r7, #6]
 804a8ec:	4413      	add	r3, r2
}
 804a8ee:	4618      	mov	r0, r3
 804a8f0:	370c      	adds	r7, #12
 804a8f2:	46bd      	mov	sp, r7
 804a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a8f8:	4770      	bx	lr
 804a8fa:	bf00      	nop
 804a8fc:	200206e4 	.word	0x200206e4

0804a900 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 804a900:	b480      	push	{r7}
 804a902:	b083      	sub	sp, #12
 804a904:	af00      	add	r7, sp, #0
 804a906:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 804a908:	4b05      	ldr	r3, [pc, #20]	; (804a920 <mem_to_ptr+0x20>)
 804a90a:	681b      	ldr	r3, [r3, #0]
 804a90c:	687a      	ldr	r2, [r7, #4]
 804a90e:	1ad3      	subs	r3, r2, r3
 804a910:	b29b      	uxth	r3, r3
}
 804a912:	4618      	mov	r0, r3
 804a914:	370c      	adds	r7, #12
 804a916:	46bd      	mov	sp, r7
 804a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a91c:	4770      	bx	lr
 804a91e:	bf00      	nop
 804a920:	200206e4 	.word	0x200206e4

0804a924 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 804a924:	b590      	push	{r4, r7, lr}
 804a926:	b085      	sub	sp, #20
 804a928:	af00      	add	r7, sp, #0
 804a92a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 804a92c:	4b45      	ldr	r3, [pc, #276]	; (804aa44 <plug_holes+0x120>)
 804a92e:	681b      	ldr	r3, [r3, #0]
 804a930:	687a      	ldr	r2, [r7, #4]
 804a932:	429a      	cmp	r2, r3
 804a934:	d206      	bcs.n	804a944 <plug_holes+0x20>
 804a936:	4b44      	ldr	r3, [pc, #272]	; (804aa48 <plug_holes+0x124>)
 804a938:	f240 12df 	movw	r2, #479	; 0x1df
 804a93c:	4943      	ldr	r1, [pc, #268]	; (804aa4c <plug_holes+0x128>)
 804a93e:	4844      	ldr	r0, [pc, #272]	; (804aa50 <plug_holes+0x12c>)
 804a940:	f009 ff7e 	bl	8054840 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 804a944:	4b43      	ldr	r3, [pc, #268]	; (804aa54 <plug_holes+0x130>)
 804a946:	681b      	ldr	r3, [r3, #0]
 804a948:	687a      	ldr	r2, [r7, #4]
 804a94a:	429a      	cmp	r2, r3
 804a94c:	d306      	bcc.n	804a95c <plug_holes+0x38>
 804a94e:	4b3e      	ldr	r3, [pc, #248]	; (804aa48 <plug_holes+0x124>)
 804a950:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 804a954:	4940      	ldr	r1, [pc, #256]	; (804aa58 <plug_holes+0x134>)
 804a956:	483e      	ldr	r0, [pc, #248]	; (804aa50 <plug_holes+0x12c>)
 804a958:	f009 ff72 	bl	8054840 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 804a95c:	687b      	ldr	r3, [r7, #4]
 804a95e:	791b      	ldrb	r3, [r3, #4]
 804a960:	2b00      	cmp	r3, #0
 804a962:	d006      	beq.n	804a972 <plug_holes+0x4e>
 804a964:	4b38      	ldr	r3, [pc, #224]	; (804aa48 <plug_holes+0x124>)
 804a966:	f240 12e1 	movw	r2, #481	; 0x1e1
 804a96a:	493c      	ldr	r1, [pc, #240]	; (804aa5c <plug_holes+0x138>)
 804a96c:	4838      	ldr	r0, [pc, #224]	; (804aa50 <plug_holes+0x12c>)
 804a96e:	f009 ff67 	bl	8054840 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 804a972:	687b      	ldr	r3, [r7, #4]
 804a974:	881b      	ldrh	r3, [r3, #0]
 804a976:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804a97a:	d906      	bls.n	804a98a <plug_holes+0x66>
 804a97c:	4b32      	ldr	r3, [pc, #200]	; (804aa48 <plug_holes+0x124>)
 804a97e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 804a982:	4937      	ldr	r1, [pc, #220]	; (804aa60 <plug_holes+0x13c>)
 804a984:	4832      	ldr	r0, [pc, #200]	; (804aa50 <plug_holes+0x12c>)
 804a986:	f009 ff5b 	bl	8054840 <iprintf>

  nmem = ptr_to_mem(mem->next);
 804a98a:	687b      	ldr	r3, [r7, #4]
 804a98c:	881b      	ldrh	r3, [r3, #0]
 804a98e:	4618      	mov	r0, r3
 804a990:	f7ff ffa4 	bl	804a8dc <ptr_to_mem>
 804a994:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 804a996:	687a      	ldr	r2, [r7, #4]
 804a998:	68fb      	ldr	r3, [r7, #12]
 804a99a:	429a      	cmp	r2, r3
 804a99c:	d024      	beq.n	804a9e8 <plug_holes+0xc4>
 804a99e:	68fb      	ldr	r3, [r7, #12]
 804a9a0:	791b      	ldrb	r3, [r3, #4]
 804a9a2:	2b00      	cmp	r3, #0
 804a9a4:	d120      	bne.n	804a9e8 <plug_holes+0xc4>
 804a9a6:	4b2b      	ldr	r3, [pc, #172]	; (804aa54 <plug_holes+0x130>)
 804a9a8:	681b      	ldr	r3, [r3, #0]
 804a9aa:	68fa      	ldr	r2, [r7, #12]
 804a9ac:	429a      	cmp	r2, r3
 804a9ae:	d01b      	beq.n	804a9e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 804a9b0:	4b2c      	ldr	r3, [pc, #176]	; (804aa64 <plug_holes+0x140>)
 804a9b2:	681b      	ldr	r3, [r3, #0]
 804a9b4:	68fa      	ldr	r2, [r7, #12]
 804a9b6:	429a      	cmp	r2, r3
 804a9b8:	d102      	bne.n	804a9c0 <plug_holes+0x9c>
      lfree = mem;
 804a9ba:	4a2a      	ldr	r2, [pc, #168]	; (804aa64 <plug_holes+0x140>)
 804a9bc:	687b      	ldr	r3, [r7, #4]
 804a9be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 804a9c0:	68fb      	ldr	r3, [r7, #12]
 804a9c2:	881a      	ldrh	r2, [r3, #0]
 804a9c4:	687b      	ldr	r3, [r7, #4]
 804a9c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 804a9c8:	68fb      	ldr	r3, [r7, #12]
 804a9ca:	881b      	ldrh	r3, [r3, #0]
 804a9cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804a9d0:	d00a      	beq.n	804a9e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 804a9d2:	68fb      	ldr	r3, [r7, #12]
 804a9d4:	881b      	ldrh	r3, [r3, #0]
 804a9d6:	4618      	mov	r0, r3
 804a9d8:	f7ff ff80 	bl	804a8dc <ptr_to_mem>
 804a9dc:	4604      	mov	r4, r0
 804a9de:	6878      	ldr	r0, [r7, #4]
 804a9e0:	f7ff ff8e 	bl	804a900 <mem_to_ptr>
 804a9e4:	4603      	mov	r3, r0
 804a9e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 804a9e8:	687b      	ldr	r3, [r7, #4]
 804a9ea:	885b      	ldrh	r3, [r3, #2]
 804a9ec:	4618      	mov	r0, r3
 804a9ee:	f7ff ff75 	bl	804a8dc <ptr_to_mem>
 804a9f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 804a9f4:	68ba      	ldr	r2, [r7, #8]
 804a9f6:	687b      	ldr	r3, [r7, #4]
 804a9f8:	429a      	cmp	r2, r3
 804a9fa:	d01f      	beq.n	804aa3c <plug_holes+0x118>
 804a9fc:	68bb      	ldr	r3, [r7, #8]
 804a9fe:	791b      	ldrb	r3, [r3, #4]
 804aa00:	2b00      	cmp	r3, #0
 804aa02:	d11b      	bne.n	804aa3c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 804aa04:	4b17      	ldr	r3, [pc, #92]	; (804aa64 <plug_holes+0x140>)
 804aa06:	681b      	ldr	r3, [r3, #0]
 804aa08:	687a      	ldr	r2, [r7, #4]
 804aa0a:	429a      	cmp	r2, r3
 804aa0c:	d102      	bne.n	804aa14 <plug_holes+0xf0>
      lfree = pmem;
 804aa0e:	4a15      	ldr	r2, [pc, #84]	; (804aa64 <plug_holes+0x140>)
 804aa10:	68bb      	ldr	r3, [r7, #8]
 804aa12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 804aa14:	687b      	ldr	r3, [r7, #4]
 804aa16:	881a      	ldrh	r2, [r3, #0]
 804aa18:	68bb      	ldr	r3, [r7, #8]
 804aa1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 804aa1c:	687b      	ldr	r3, [r7, #4]
 804aa1e:	881b      	ldrh	r3, [r3, #0]
 804aa20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804aa24:	d00a      	beq.n	804aa3c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 804aa26:	687b      	ldr	r3, [r7, #4]
 804aa28:	881b      	ldrh	r3, [r3, #0]
 804aa2a:	4618      	mov	r0, r3
 804aa2c:	f7ff ff56 	bl	804a8dc <ptr_to_mem>
 804aa30:	4604      	mov	r4, r0
 804aa32:	68b8      	ldr	r0, [r7, #8]
 804aa34:	f7ff ff64 	bl	804a900 <mem_to_ptr>
 804aa38:	4603      	mov	r3, r0
 804aa3a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 804aa3c:	bf00      	nop
 804aa3e:	3714      	adds	r7, #20
 804aa40:	46bd      	mov	sp, r7
 804aa42:	bd90      	pop	{r4, r7, pc}
 804aa44:	200206e4 	.word	0x200206e4
 804aa48:	08055a94 	.word	0x08055a94
 804aa4c:	08055ac4 	.word	0x08055ac4
 804aa50:	08055adc 	.word	0x08055adc
 804aa54:	200206e8 	.word	0x200206e8
 804aa58:	08055b04 	.word	0x08055b04
 804aa5c:	08055b20 	.word	0x08055b20
 804aa60:	08055b3c 	.word	0x08055b3c
 804aa64:	200206f0 	.word	0x200206f0

0804aa68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 804aa68:	b580      	push	{r7, lr}
 804aa6a:	b082      	sub	sp, #8
 804aa6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 804aa6e:	4b1f      	ldr	r3, [pc, #124]	; (804aaec <mem_init+0x84>)
 804aa70:	3303      	adds	r3, #3
 804aa72:	f023 0303 	bic.w	r3, r3, #3
 804aa76:	461a      	mov	r2, r3
 804aa78:	4b1d      	ldr	r3, [pc, #116]	; (804aaf0 <mem_init+0x88>)
 804aa7a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 804aa7c:	4b1c      	ldr	r3, [pc, #112]	; (804aaf0 <mem_init+0x88>)
 804aa7e:	681b      	ldr	r3, [r3, #0]
 804aa80:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 804aa82:	687b      	ldr	r3, [r7, #4]
 804aa84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 804aa88:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 804aa8a:	687b      	ldr	r3, [r7, #4]
 804aa8c:	2200      	movs	r2, #0
 804aa8e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 804aa90:	687b      	ldr	r3, [r7, #4]
 804aa92:	2200      	movs	r2, #0
 804aa94:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 804aa96:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 804aa9a:	f7ff ff1f 	bl	804a8dc <ptr_to_mem>
 804aa9e:	4603      	mov	r3, r0
 804aaa0:	4a14      	ldr	r2, [pc, #80]	; (804aaf4 <mem_init+0x8c>)
 804aaa2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 804aaa4:	4b13      	ldr	r3, [pc, #76]	; (804aaf4 <mem_init+0x8c>)
 804aaa6:	681b      	ldr	r3, [r3, #0]
 804aaa8:	2201      	movs	r2, #1
 804aaaa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 804aaac:	4b11      	ldr	r3, [pc, #68]	; (804aaf4 <mem_init+0x8c>)
 804aaae:	681b      	ldr	r3, [r3, #0]
 804aab0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 804aab4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 804aab6:	4b0f      	ldr	r3, [pc, #60]	; (804aaf4 <mem_init+0x8c>)
 804aab8:	681b      	ldr	r3, [r3, #0]
 804aaba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 804aabe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 804aac0:	4b0b      	ldr	r3, [pc, #44]	; (804aaf0 <mem_init+0x88>)
 804aac2:	681b      	ldr	r3, [r3, #0]
 804aac4:	4a0c      	ldr	r2, [pc, #48]	; (804aaf8 <mem_init+0x90>)
 804aac6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 804aac8:	480c      	ldr	r0, [pc, #48]	; (804aafc <mem_init+0x94>)
 804aaca:	f009 fd3d 	bl	8054548 <sys_mutex_new>
 804aace:	4603      	mov	r3, r0
 804aad0:	2b00      	cmp	r3, #0
 804aad2:	d006      	beq.n	804aae2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 804aad4:	4b0a      	ldr	r3, [pc, #40]	; (804ab00 <mem_init+0x98>)
 804aad6:	f240 221f 	movw	r2, #543	; 0x21f
 804aada:	490a      	ldr	r1, [pc, #40]	; (804ab04 <mem_init+0x9c>)
 804aadc:	480a      	ldr	r0, [pc, #40]	; (804ab08 <mem_init+0xa0>)
 804aade:	f009 feaf 	bl	8054840 <iprintf>
  }
}
 804aae2:	bf00      	nop
 804aae4:	3708      	adds	r7, #8
 804aae6:	46bd      	mov	sp, r7
 804aae8:	bd80      	pop	{r7, pc}
 804aaea:	bf00      	nop
 804aaec:	20020090 	.word	0x20020090
 804aaf0:	200206e4 	.word	0x200206e4
 804aaf4:	200206e8 	.word	0x200206e8
 804aaf8:	200206f0 	.word	0x200206f0
 804aafc:	200206ec 	.word	0x200206ec
 804ab00:	08055a94 	.word	0x08055a94
 804ab04:	08055b68 	.word	0x08055b68
 804ab08:	08055adc 	.word	0x08055adc

0804ab0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 804ab0c:	b580      	push	{r7, lr}
 804ab0e:	b086      	sub	sp, #24
 804ab10:	af00      	add	r7, sp, #0
 804ab12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 804ab14:	6878      	ldr	r0, [r7, #4]
 804ab16:	f7ff fef3 	bl	804a900 <mem_to_ptr>
 804ab1a:	4603      	mov	r3, r0
 804ab1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 804ab1e:	687b      	ldr	r3, [r7, #4]
 804ab20:	881b      	ldrh	r3, [r3, #0]
 804ab22:	4618      	mov	r0, r3
 804ab24:	f7ff feda 	bl	804a8dc <ptr_to_mem>
 804ab28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 804ab2a:	687b      	ldr	r3, [r7, #4]
 804ab2c:	885b      	ldrh	r3, [r3, #2]
 804ab2e:	4618      	mov	r0, r3
 804ab30:	f7ff fed4 	bl	804a8dc <ptr_to_mem>
 804ab34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 804ab36:	687b      	ldr	r3, [r7, #4]
 804ab38:	881b      	ldrh	r3, [r3, #0]
 804ab3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804ab3e:	d818      	bhi.n	804ab72 <mem_link_valid+0x66>
 804ab40:	687b      	ldr	r3, [r7, #4]
 804ab42:	885b      	ldrh	r3, [r3, #2]
 804ab44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804ab48:	d813      	bhi.n	804ab72 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 804ab4a:	687b      	ldr	r3, [r7, #4]
 804ab4c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 804ab4e:	8afa      	ldrh	r2, [r7, #22]
 804ab50:	429a      	cmp	r2, r3
 804ab52:	d004      	beq.n	804ab5e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 804ab54:	68fb      	ldr	r3, [r7, #12]
 804ab56:	881b      	ldrh	r3, [r3, #0]
 804ab58:	8afa      	ldrh	r2, [r7, #22]
 804ab5a:	429a      	cmp	r2, r3
 804ab5c:	d109      	bne.n	804ab72 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 804ab5e:	4b08      	ldr	r3, [pc, #32]	; (804ab80 <mem_link_valid+0x74>)
 804ab60:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 804ab62:	693a      	ldr	r2, [r7, #16]
 804ab64:	429a      	cmp	r2, r3
 804ab66:	d006      	beq.n	804ab76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 804ab68:	693b      	ldr	r3, [r7, #16]
 804ab6a:	885b      	ldrh	r3, [r3, #2]
 804ab6c:	8afa      	ldrh	r2, [r7, #22]
 804ab6e:	429a      	cmp	r2, r3
 804ab70:	d001      	beq.n	804ab76 <mem_link_valid+0x6a>
    return 0;
 804ab72:	2300      	movs	r3, #0
 804ab74:	e000      	b.n	804ab78 <mem_link_valid+0x6c>
  }
  return 1;
 804ab76:	2301      	movs	r3, #1
}
 804ab78:	4618      	mov	r0, r3
 804ab7a:	3718      	adds	r7, #24
 804ab7c:	46bd      	mov	sp, r7
 804ab7e:	bd80      	pop	{r7, pc}
 804ab80:	200206e8 	.word	0x200206e8

0804ab84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 804ab84:	b580      	push	{r7, lr}
 804ab86:	b088      	sub	sp, #32
 804ab88:	af00      	add	r7, sp, #0
 804ab8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 804ab8c:	687b      	ldr	r3, [r7, #4]
 804ab8e:	2b00      	cmp	r3, #0
 804ab90:	d070      	beq.n	804ac74 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 804ab92:	687b      	ldr	r3, [r7, #4]
 804ab94:	f003 0303 	and.w	r3, r3, #3
 804ab98:	2b00      	cmp	r3, #0
 804ab9a:	d00d      	beq.n	804abb8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 804ab9c:	4b37      	ldr	r3, [pc, #220]	; (804ac7c <mem_free+0xf8>)
 804ab9e:	f240 2273 	movw	r2, #627	; 0x273
 804aba2:	4937      	ldr	r1, [pc, #220]	; (804ac80 <mem_free+0xfc>)
 804aba4:	4837      	ldr	r0, [pc, #220]	; (804ac84 <mem_free+0x100>)
 804aba6:	f009 fe4b 	bl	8054840 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804abaa:	f009 fd2b 	bl	8054604 <sys_arch_protect>
 804abae:	60f8      	str	r0, [r7, #12]
 804abb0:	68f8      	ldr	r0, [r7, #12]
 804abb2:	f009 fd35 	bl	8054620 <sys_arch_unprotect>
    return;
 804abb6:	e05e      	b.n	804ac76 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 804abb8:	687b      	ldr	r3, [r7, #4]
 804abba:	3b08      	subs	r3, #8
 804abbc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 804abbe:	4b32      	ldr	r3, [pc, #200]	; (804ac88 <mem_free+0x104>)
 804abc0:	681b      	ldr	r3, [r3, #0]
 804abc2:	69fa      	ldr	r2, [r7, #28]
 804abc4:	429a      	cmp	r2, r3
 804abc6:	d306      	bcc.n	804abd6 <mem_free+0x52>
 804abc8:	687b      	ldr	r3, [r7, #4]
 804abca:	f103 020c 	add.w	r2, r3, #12
 804abce:	4b2f      	ldr	r3, [pc, #188]	; (804ac8c <mem_free+0x108>)
 804abd0:	681b      	ldr	r3, [r3, #0]
 804abd2:	429a      	cmp	r2, r3
 804abd4:	d90d      	bls.n	804abf2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 804abd6:	4b29      	ldr	r3, [pc, #164]	; (804ac7c <mem_free+0xf8>)
 804abd8:	f240 227f 	movw	r2, #639	; 0x27f
 804abdc:	492c      	ldr	r1, [pc, #176]	; (804ac90 <mem_free+0x10c>)
 804abde:	4829      	ldr	r0, [pc, #164]	; (804ac84 <mem_free+0x100>)
 804abe0:	f009 fe2e 	bl	8054840 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804abe4:	f009 fd0e 	bl	8054604 <sys_arch_protect>
 804abe8:	6138      	str	r0, [r7, #16]
 804abea:	6938      	ldr	r0, [r7, #16]
 804abec:	f009 fd18 	bl	8054620 <sys_arch_unprotect>
    return;
 804abf0:	e041      	b.n	804ac76 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 804abf2:	4828      	ldr	r0, [pc, #160]	; (804ac94 <mem_free+0x110>)
 804abf4:	f009 fcc4 	bl	8054580 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 804abf8:	69fb      	ldr	r3, [r7, #28]
 804abfa:	791b      	ldrb	r3, [r3, #4]
 804abfc:	2b00      	cmp	r3, #0
 804abfe:	d110      	bne.n	804ac22 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 804ac00:	4b1e      	ldr	r3, [pc, #120]	; (804ac7c <mem_free+0xf8>)
 804ac02:	f44f 7223 	mov.w	r2, #652	; 0x28c
 804ac06:	4924      	ldr	r1, [pc, #144]	; (804ac98 <mem_free+0x114>)
 804ac08:	481e      	ldr	r0, [pc, #120]	; (804ac84 <mem_free+0x100>)
 804ac0a:	f009 fe19 	bl	8054840 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 804ac0e:	4821      	ldr	r0, [pc, #132]	; (804ac94 <mem_free+0x110>)
 804ac10:	f009 fcc5 	bl	805459e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804ac14:	f009 fcf6 	bl	8054604 <sys_arch_protect>
 804ac18:	6178      	str	r0, [r7, #20]
 804ac1a:	6978      	ldr	r0, [r7, #20]
 804ac1c:	f009 fd00 	bl	8054620 <sys_arch_unprotect>
    return;
 804ac20:	e029      	b.n	804ac76 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 804ac22:	69f8      	ldr	r0, [r7, #28]
 804ac24:	f7ff ff72 	bl	804ab0c <mem_link_valid>
 804ac28:	4603      	mov	r3, r0
 804ac2a:	2b00      	cmp	r3, #0
 804ac2c:	d110      	bne.n	804ac50 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 804ac2e:	4b13      	ldr	r3, [pc, #76]	; (804ac7c <mem_free+0xf8>)
 804ac30:	f240 2295 	movw	r2, #661	; 0x295
 804ac34:	4919      	ldr	r1, [pc, #100]	; (804ac9c <mem_free+0x118>)
 804ac36:	4813      	ldr	r0, [pc, #76]	; (804ac84 <mem_free+0x100>)
 804ac38:	f009 fe02 	bl	8054840 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 804ac3c:	4815      	ldr	r0, [pc, #84]	; (804ac94 <mem_free+0x110>)
 804ac3e:	f009 fcae 	bl	805459e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804ac42:	f009 fcdf 	bl	8054604 <sys_arch_protect>
 804ac46:	61b8      	str	r0, [r7, #24]
 804ac48:	69b8      	ldr	r0, [r7, #24]
 804ac4a:	f009 fce9 	bl	8054620 <sys_arch_unprotect>
    return;
 804ac4e:	e012      	b.n	804ac76 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 804ac50:	69fb      	ldr	r3, [r7, #28]
 804ac52:	2200      	movs	r2, #0
 804ac54:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 804ac56:	4b12      	ldr	r3, [pc, #72]	; (804aca0 <mem_free+0x11c>)
 804ac58:	681b      	ldr	r3, [r3, #0]
 804ac5a:	69fa      	ldr	r2, [r7, #28]
 804ac5c:	429a      	cmp	r2, r3
 804ac5e:	d202      	bcs.n	804ac66 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 804ac60:	4a0f      	ldr	r2, [pc, #60]	; (804aca0 <mem_free+0x11c>)
 804ac62:	69fb      	ldr	r3, [r7, #28]
 804ac64:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 804ac66:	69f8      	ldr	r0, [r7, #28]
 804ac68:	f7ff fe5c 	bl	804a924 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 804ac6c:	4809      	ldr	r0, [pc, #36]	; (804ac94 <mem_free+0x110>)
 804ac6e:	f009 fc96 	bl	805459e <sys_mutex_unlock>
 804ac72:	e000      	b.n	804ac76 <mem_free+0xf2>
    return;
 804ac74:	bf00      	nop
}
 804ac76:	3720      	adds	r7, #32
 804ac78:	46bd      	mov	sp, r7
 804ac7a:	bd80      	pop	{r7, pc}
 804ac7c:	08055a94 	.word	0x08055a94
 804ac80:	08055b84 	.word	0x08055b84
 804ac84:	08055adc 	.word	0x08055adc
 804ac88:	200206e4 	.word	0x200206e4
 804ac8c:	200206e8 	.word	0x200206e8
 804ac90:	08055ba8 	.word	0x08055ba8
 804ac94:	200206ec 	.word	0x200206ec
 804ac98:	08055bc4 	.word	0x08055bc4
 804ac9c:	08055bec 	.word	0x08055bec
 804aca0:	200206f0 	.word	0x200206f0

0804aca4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 804aca4:	b580      	push	{r7, lr}
 804aca6:	b088      	sub	sp, #32
 804aca8:	af00      	add	r7, sp, #0
 804acaa:	6078      	str	r0, [r7, #4]
 804acac:	460b      	mov	r3, r1
 804acae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 804acb0:	887b      	ldrh	r3, [r7, #2]
 804acb2:	3303      	adds	r3, #3
 804acb4:	b29b      	uxth	r3, r3
 804acb6:	f023 0303 	bic.w	r3, r3, #3
 804acba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 804acbc:	8bfb      	ldrh	r3, [r7, #30]
 804acbe:	2b0b      	cmp	r3, #11
 804acc0:	d801      	bhi.n	804acc6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 804acc2:	230c      	movs	r3, #12
 804acc4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 804acc6:	8bfb      	ldrh	r3, [r7, #30]
 804acc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804accc:	d803      	bhi.n	804acd6 <mem_trim+0x32>
 804acce:	8bfa      	ldrh	r2, [r7, #30]
 804acd0:	887b      	ldrh	r3, [r7, #2]
 804acd2:	429a      	cmp	r2, r3
 804acd4:	d201      	bcs.n	804acda <mem_trim+0x36>
    return NULL;
 804acd6:	2300      	movs	r3, #0
 804acd8:	e0d8      	b.n	804ae8c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 804acda:	4b6e      	ldr	r3, [pc, #440]	; (804ae94 <mem_trim+0x1f0>)
 804acdc:	681b      	ldr	r3, [r3, #0]
 804acde:	687a      	ldr	r2, [r7, #4]
 804ace0:	429a      	cmp	r2, r3
 804ace2:	d304      	bcc.n	804acee <mem_trim+0x4a>
 804ace4:	4b6c      	ldr	r3, [pc, #432]	; (804ae98 <mem_trim+0x1f4>)
 804ace6:	681b      	ldr	r3, [r3, #0]
 804ace8:	687a      	ldr	r2, [r7, #4]
 804acea:	429a      	cmp	r2, r3
 804acec:	d306      	bcc.n	804acfc <mem_trim+0x58>
 804acee:	4b6b      	ldr	r3, [pc, #428]	; (804ae9c <mem_trim+0x1f8>)
 804acf0:	f240 22d1 	movw	r2, #721	; 0x2d1
 804acf4:	496a      	ldr	r1, [pc, #424]	; (804aea0 <mem_trim+0x1fc>)
 804acf6:	486b      	ldr	r0, [pc, #428]	; (804aea4 <mem_trim+0x200>)
 804acf8:	f009 fda2 	bl	8054840 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 804acfc:	4b65      	ldr	r3, [pc, #404]	; (804ae94 <mem_trim+0x1f0>)
 804acfe:	681b      	ldr	r3, [r3, #0]
 804ad00:	687a      	ldr	r2, [r7, #4]
 804ad02:	429a      	cmp	r2, r3
 804ad04:	d304      	bcc.n	804ad10 <mem_trim+0x6c>
 804ad06:	4b64      	ldr	r3, [pc, #400]	; (804ae98 <mem_trim+0x1f4>)
 804ad08:	681b      	ldr	r3, [r3, #0]
 804ad0a:	687a      	ldr	r2, [r7, #4]
 804ad0c:	429a      	cmp	r2, r3
 804ad0e:	d307      	bcc.n	804ad20 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804ad10:	f009 fc78 	bl	8054604 <sys_arch_protect>
 804ad14:	60b8      	str	r0, [r7, #8]
 804ad16:	68b8      	ldr	r0, [r7, #8]
 804ad18:	f009 fc82 	bl	8054620 <sys_arch_unprotect>
    return rmem;
 804ad1c:	687b      	ldr	r3, [r7, #4]
 804ad1e:	e0b5      	b.n	804ae8c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 804ad20:	687b      	ldr	r3, [r7, #4]
 804ad22:	3b08      	subs	r3, #8
 804ad24:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 804ad26:	69b8      	ldr	r0, [r7, #24]
 804ad28:	f7ff fdea 	bl	804a900 <mem_to_ptr>
 804ad2c:	4603      	mov	r3, r0
 804ad2e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 804ad30:	69bb      	ldr	r3, [r7, #24]
 804ad32:	881a      	ldrh	r2, [r3, #0]
 804ad34:	8afb      	ldrh	r3, [r7, #22]
 804ad36:	1ad3      	subs	r3, r2, r3
 804ad38:	b29b      	uxth	r3, r3
 804ad3a:	3b08      	subs	r3, #8
 804ad3c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 804ad3e:	8bfa      	ldrh	r2, [r7, #30]
 804ad40:	8abb      	ldrh	r3, [r7, #20]
 804ad42:	429a      	cmp	r2, r3
 804ad44:	d906      	bls.n	804ad54 <mem_trim+0xb0>
 804ad46:	4b55      	ldr	r3, [pc, #340]	; (804ae9c <mem_trim+0x1f8>)
 804ad48:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 804ad4c:	4956      	ldr	r1, [pc, #344]	; (804aea8 <mem_trim+0x204>)
 804ad4e:	4855      	ldr	r0, [pc, #340]	; (804aea4 <mem_trim+0x200>)
 804ad50:	f009 fd76 	bl	8054840 <iprintf>
  if (newsize > size) {
 804ad54:	8bfa      	ldrh	r2, [r7, #30]
 804ad56:	8abb      	ldrh	r3, [r7, #20]
 804ad58:	429a      	cmp	r2, r3
 804ad5a:	d901      	bls.n	804ad60 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 804ad5c:	2300      	movs	r3, #0
 804ad5e:	e095      	b.n	804ae8c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 804ad60:	8bfa      	ldrh	r2, [r7, #30]
 804ad62:	8abb      	ldrh	r3, [r7, #20]
 804ad64:	429a      	cmp	r2, r3
 804ad66:	d101      	bne.n	804ad6c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 804ad68:	687b      	ldr	r3, [r7, #4]
 804ad6a:	e08f      	b.n	804ae8c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 804ad6c:	484f      	ldr	r0, [pc, #316]	; (804aeac <mem_trim+0x208>)
 804ad6e:	f009 fc07 	bl	8054580 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 804ad72:	69bb      	ldr	r3, [r7, #24]
 804ad74:	881b      	ldrh	r3, [r3, #0]
 804ad76:	4618      	mov	r0, r3
 804ad78:	f7ff fdb0 	bl	804a8dc <ptr_to_mem>
 804ad7c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 804ad7e:	693b      	ldr	r3, [r7, #16]
 804ad80:	791b      	ldrb	r3, [r3, #4]
 804ad82:	2b00      	cmp	r3, #0
 804ad84:	d13f      	bne.n	804ae06 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 804ad86:	69bb      	ldr	r3, [r7, #24]
 804ad88:	881b      	ldrh	r3, [r3, #0]
 804ad8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804ad8e:	d106      	bne.n	804ad9e <mem_trim+0xfa>
 804ad90:	4b42      	ldr	r3, [pc, #264]	; (804ae9c <mem_trim+0x1f8>)
 804ad92:	f240 22f5 	movw	r2, #757	; 0x2f5
 804ad96:	4946      	ldr	r1, [pc, #280]	; (804aeb0 <mem_trim+0x20c>)
 804ad98:	4842      	ldr	r0, [pc, #264]	; (804aea4 <mem_trim+0x200>)
 804ad9a:	f009 fd51 	bl	8054840 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 804ad9e:	693b      	ldr	r3, [r7, #16]
 804ada0:	881b      	ldrh	r3, [r3, #0]
 804ada2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 804ada4:	8afa      	ldrh	r2, [r7, #22]
 804ada6:	8bfb      	ldrh	r3, [r7, #30]
 804ada8:	4413      	add	r3, r2
 804adaa:	b29b      	uxth	r3, r3
 804adac:	3308      	adds	r3, #8
 804adae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 804adb0:	4b40      	ldr	r3, [pc, #256]	; (804aeb4 <mem_trim+0x210>)
 804adb2:	681b      	ldr	r3, [r3, #0]
 804adb4:	693a      	ldr	r2, [r7, #16]
 804adb6:	429a      	cmp	r2, r3
 804adb8:	d106      	bne.n	804adc8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 804adba:	89fb      	ldrh	r3, [r7, #14]
 804adbc:	4618      	mov	r0, r3
 804adbe:	f7ff fd8d 	bl	804a8dc <ptr_to_mem>
 804adc2:	4603      	mov	r3, r0
 804adc4:	4a3b      	ldr	r2, [pc, #236]	; (804aeb4 <mem_trim+0x210>)
 804adc6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 804adc8:	89fb      	ldrh	r3, [r7, #14]
 804adca:	4618      	mov	r0, r3
 804adcc:	f7ff fd86 	bl	804a8dc <ptr_to_mem>
 804add0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 804add2:	693b      	ldr	r3, [r7, #16]
 804add4:	2200      	movs	r2, #0
 804add6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 804add8:	693b      	ldr	r3, [r7, #16]
 804adda:	89ba      	ldrh	r2, [r7, #12]
 804addc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 804adde:	693b      	ldr	r3, [r7, #16]
 804ade0:	8afa      	ldrh	r2, [r7, #22]
 804ade2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 804ade4:	69bb      	ldr	r3, [r7, #24]
 804ade6:	89fa      	ldrh	r2, [r7, #14]
 804ade8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 804adea:	693b      	ldr	r3, [r7, #16]
 804adec:	881b      	ldrh	r3, [r3, #0]
 804adee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804adf2:	d047      	beq.n	804ae84 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 804adf4:	693b      	ldr	r3, [r7, #16]
 804adf6:	881b      	ldrh	r3, [r3, #0]
 804adf8:	4618      	mov	r0, r3
 804adfa:	f7ff fd6f 	bl	804a8dc <ptr_to_mem>
 804adfe:	4602      	mov	r2, r0
 804ae00:	89fb      	ldrh	r3, [r7, #14]
 804ae02:	8053      	strh	r3, [r2, #2]
 804ae04:	e03e      	b.n	804ae84 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 804ae06:	8bfb      	ldrh	r3, [r7, #30]
 804ae08:	f103 0214 	add.w	r2, r3, #20
 804ae0c:	8abb      	ldrh	r3, [r7, #20]
 804ae0e:	429a      	cmp	r2, r3
 804ae10:	d838      	bhi.n	804ae84 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 804ae12:	8afa      	ldrh	r2, [r7, #22]
 804ae14:	8bfb      	ldrh	r3, [r7, #30]
 804ae16:	4413      	add	r3, r2
 804ae18:	b29b      	uxth	r3, r3
 804ae1a:	3308      	adds	r3, #8
 804ae1c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 804ae1e:	69bb      	ldr	r3, [r7, #24]
 804ae20:	881b      	ldrh	r3, [r3, #0]
 804ae22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804ae26:	d106      	bne.n	804ae36 <mem_trim+0x192>
 804ae28:	4b1c      	ldr	r3, [pc, #112]	; (804ae9c <mem_trim+0x1f8>)
 804ae2a:	f240 3216 	movw	r2, #790	; 0x316
 804ae2e:	4920      	ldr	r1, [pc, #128]	; (804aeb0 <mem_trim+0x20c>)
 804ae30:	481c      	ldr	r0, [pc, #112]	; (804aea4 <mem_trim+0x200>)
 804ae32:	f009 fd05 	bl	8054840 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 804ae36:	89fb      	ldrh	r3, [r7, #14]
 804ae38:	4618      	mov	r0, r3
 804ae3a:	f7ff fd4f 	bl	804a8dc <ptr_to_mem>
 804ae3e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 804ae40:	4b1c      	ldr	r3, [pc, #112]	; (804aeb4 <mem_trim+0x210>)
 804ae42:	681b      	ldr	r3, [r3, #0]
 804ae44:	693a      	ldr	r2, [r7, #16]
 804ae46:	429a      	cmp	r2, r3
 804ae48:	d202      	bcs.n	804ae50 <mem_trim+0x1ac>
      lfree = mem2;
 804ae4a:	4a1a      	ldr	r2, [pc, #104]	; (804aeb4 <mem_trim+0x210>)
 804ae4c:	693b      	ldr	r3, [r7, #16]
 804ae4e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 804ae50:	693b      	ldr	r3, [r7, #16]
 804ae52:	2200      	movs	r2, #0
 804ae54:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 804ae56:	69bb      	ldr	r3, [r7, #24]
 804ae58:	881a      	ldrh	r2, [r3, #0]
 804ae5a:	693b      	ldr	r3, [r7, #16]
 804ae5c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 804ae5e:	693b      	ldr	r3, [r7, #16]
 804ae60:	8afa      	ldrh	r2, [r7, #22]
 804ae62:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 804ae64:	69bb      	ldr	r3, [r7, #24]
 804ae66:	89fa      	ldrh	r2, [r7, #14]
 804ae68:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 804ae6a:	693b      	ldr	r3, [r7, #16]
 804ae6c:	881b      	ldrh	r3, [r3, #0]
 804ae6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804ae72:	d007      	beq.n	804ae84 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 804ae74:	693b      	ldr	r3, [r7, #16]
 804ae76:	881b      	ldrh	r3, [r3, #0]
 804ae78:	4618      	mov	r0, r3
 804ae7a:	f7ff fd2f 	bl	804a8dc <ptr_to_mem>
 804ae7e:	4602      	mov	r2, r0
 804ae80:	89fb      	ldrh	r3, [r7, #14]
 804ae82:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 804ae84:	4809      	ldr	r0, [pc, #36]	; (804aeac <mem_trim+0x208>)
 804ae86:	f009 fb8a 	bl	805459e <sys_mutex_unlock>
  return rmem;
 804ae8a:	687b      	ldr	r3, [r7, #4]
}
 804ae8c:	4618      	mov	r0, r3
 804ae8e:	3720      	adds	r7, #32
 804ae90:	46bd      	mov	sp, r7
 804ae92:	bd80      	pop	{r7, pc}
 804ae94:	200206e4 	.word	0x200206e4
 804ae98:	200206e8 	.word	0x200206e8
 804ae9c:	08055a94 	.word	0x08055a94
 804aea0:	08055c20 	.word	0x08055c20
 804aea4:	08055adc 	.word	0x08055adc
 804aea8:	08055c38 	.word	0x08055c38
 804aeac:	200206ec 	.word	0x200206ec
 804aeb0:	08055c58 	.word	0x08055c58
 804aeb4:	200206f0 	.word	0x200206f0

0804aeb8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 804aeb8:	b580      	push	{r7, lr}
 804aeba:	b088      	sub	sp, #32
 804aebc:	af00      	add	r7, sp, #0
 804aebe:	4603      	mov	r3, r0
 804aec0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 804aec2:	88fb      	ldrh	r3, [r7, #6]
 804aec4:	2b00      	cmp	r3, #0
 804aec6:	d101      	bne.n	804aecc <mem_malloc+0x14>
    return NULL;
 804aec8:	2300      	movs	r3, #0
 804aeca:	e0e2      	b.n	804b092 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 804aecc:	88fb      	ldrh	r3, [r7, #6]
 804aece:	3303      	adds	r3, #3
 804aed0:	b29b      	uxth	r3, r3
 804aed2:	f023 0303 	bic.w	r3, r3, #3
 804aed6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 804aed8:	8bbb      	ldrh	r3, [r7, #28]
 804aeda:	2b0b      	cmp	r3, #11
 804aedc:	d801      	bhi.n	804aee2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 804aede:	230c      	movs	r3, #12
 804aee0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 804aee2:	8bbb      	ldrh	r3, [r7, #28]
 804aee4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804aee8:	d803      	bhi.n	804aef2 <mem_malloc+0x3a>
 804aeea:	8bba      	ldrh	r2, [r7, #28]
 804aeec:	88fb      	ldrh	r3, [r7, #6]
 804aeee:	429a      	cmp	r2, r3
 804aef0:	d201      	bcs.n	804aef6 <mem_malloc+0x3e>
    return NULL;
 804aef2:	2300      	movs	r3, #0
 804aef4:	e0cd      	b.n	804b092 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 804aef6:	4869      	ldr	r0, [pc, #420]	; (804b09c <mem_malloc+0x1e4>)
 804aef8:	f009 fb42 	bl	8054580 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 804aefc:	4b68      	ldr	r3, [pc, #416]	; (804b0a0 <mem_malloc+0x1e8>)
 804aefe:	681b      	ldr	r3, [r3, #0]
 804af00:	4618      	mov	r0, r3
 804af02:	f7ff fcfd 	bl	804a900 <mem_to_ptr>
 804af06:	4603      	mov	r3, r0
 804af08:	83fb      	strh	r3, [r7, #30]
 804af0a:	e0b7      	b.n	804b07c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 804af0c:	8bfb      	ldrh	r3, [r7, #30]
 804af0e:	4618      	mov	r0, r3
 804af10:	f7ff fce4 	bl	804a8dc <ptr_to_mem>
 804af14:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 804af16:	697b      	ldr	r3, [r7, #20]
 804af18:	791b      	ldrb	r3, [r3, #4]
 804af1a:	2b00      	cmp	r3, #0
 804af1c:	f040 80a7 	bne.w	804b06e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 804af20:	697b      	ldr	r3, [r7, #20]
 804af22:	881b      	ldrh	r3, [r3, #0]
 804af24:	461a      	mov	r2, r3
 804af26:	8bfb      	ldrh	r3, [r7, #30]
 804af28:	1ad3      	subs	r3, r2, r3
 804af2a:	f1a3 0208 	sub.w	r2, r3, #8
 804af2e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 804af30:	429a      	cmp	r2, r3
 804af32:	f0c0 809c 	bcc.w	804b06e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 804af36:	697b      	ldr	r3, [r7, #20]
 804af38:	881b      	ldrh	r3, [r3, #0]
 804af3a:	461a      	mov	r2, r3
 804af3c:	8bfb      	ldrh	r3, [r7, #30]
 804af3e:	1ad3      	subs	r3, r2, r3
 804af40:	f1a3 0208 	sub.w	r2, r3, #8
 804af44:	8bbb      	ldrh	r3, [r7, #28]
 804af46:	3314      	adds	r3, #20
 804af48:	429a      	cmp	r2, r3
 804af4a:	d333      	bcc.n	804afb4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 804af4c:	8bfa      	ldrh	r2, [r7, #30]
 804af4e:	8bbb      	ldrh	r3, [r7, #28]
 804af50:	4413      	add	r3, r2
 804af52:	b29b      	uxth	r3, r3
 804af54:	3308      	adds	r3, #8
 804af56:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 804af58:	8a7b      	ldrh	r3, [r7, #18]
 804af5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804af5e:	d106      	bne.n	804af6e <mem_malloc+0xb6>
 804af60:	4b50      	ldr	r3, [pc, #320]	; (804b0a4 <mem_malloc+0x1ec>)
 804af62:	f240 3287 	movw	r2, #903	; 0x387
 804af66:	4950      	ldr	r1, [pc, #320]	; (804b0a8 <mem_malloc+0x1f0>)
 804af68:	4850      	ldr	r0, [pc, #320]	; (804b0ac <mem_malloc+0x1f4>)
 804af6a:	f009 fc69 	bl	8054840 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 804af6e:	8a7b      	ldrh	r3, [r7, #18]
 804af70:	4618      	mov	r0, r3
 804af72:	f7ff fcb3 	bl	804a8dc <ptr_to_mem>
 804af76:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 804af78:	68fb      	ldr	r3, [r7, #12]
 804af7a:	2200      	movs	r2, #0
 804af7c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 804af7e:	697b      	ldr	r3, [r7, #20]
 804af80:	881a      	ldrh	r2, [r3, #0]
 804af82:	68fb      	ldr	r3, [r7, #12]
 804af84:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 804af86:	68fb      	ldr	r3, [r7, #12]
 804af88:	8bfa      	ldrh	r2, [r7, #30]
 804af8a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 804af8c:	697b      	ldr	r3, [r7, #20]
 804af8e:	8a7a      	ldrh	r2, [r7, #18]
 804af90:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 804af92:	697b      	ldr	r3, [r7, #20]
 804af94:	2201      	movs	r2, #1
 804af96:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 804af98:	68fb      	ldr	r3, [r7, #12]
 804af9a:	881b      	ldrh	r3, [r3, #0]
 804af9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 804afa0:	d00b      	beq.n	804afba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 804afa2:	68fb      	ldr	r3, [r7, #12]
 804afa4:	881b      	ldrh	r3, [r3, #0]
 804afa6:	4618      	mov	r0, r3
 804afa8:	f7ff fc98 	bl	804a8dc <ptr_to_mem>
 804afac:	4602      	mov	r2, r0
 804afae:	8a7b      	ldrh	r3, [r7, #18]
 804afb0:	8053      	strh	r3, [r2, #2]
 804afb2:	e002      	b.n	804afba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 804afb4:	697b      	ldr	r3, [r7, #20]
 804afb6:	2201      	movs	r2, #1
 804afb8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 804afba:	4b39      	ldr	r3, [pc, #228]	; (804b0a0 <mem_malloc+0x1e8>)
 804afbc:	681b      	ldr	r3, [r3, #0]
 804afbe:	697a      	ldr	r2, [r7, #20]
 804afc0:	429a      	cmp	r2, r3
 804afc2:	d127      	bne.n	804b014 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 804afc4:	4b36      	ldr	r3, [pc, #216]	; (804b0a0 <mem_malloc+0x1e8>)
 804afc6:	681b      	ldr	r3, [r3, #0]
 804afc8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 804afca:	e005      	b.n	804afd8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 804afcc:	69bb      	ldr	r3, [r7, #24]
 804afce:	881b      	ldrh	r3, [r3, #0]
 804afd0:	4618      	mov	r0, r3
 804afd2:	f7ff fc83 	bl	804a8dc <ptr_to_mem>
 804afd6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 804afd8:	69bb      	ldr	r3, [r7, #24]
 804afda:	791b      	ldrb	r3, [r3, #4]
 804afdc:	2b00      	cmp	r3, #0
 804afde:	d004      	beq.n	804afea <mem_malloc+0x132>
 804afe0:	4b33      	ldr	r3, [pc, #204]	; (804b0b0 <mem_malloc+0x1f8>)
 804afe2:	681b      	ldr	r3, [r3, #0]
 804afe4:	69ba      	ldr	r2, [r7, #24]
 804afe6:	429a      	cmp	r2, r3
 804afe8:	d1f0      	bne.n	804afcc <mem_malloc+0x114>
          }
          lfree = cur;
 804afea:	4a2d      	ldr	r2, [pc, #180]	; (804b0a0 <mem_malloc+0x1e8>)
 804afec:	69bb      	ldr	r3, [r7, #24]
 804afee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 804aff0:	4b2b      	ldr	r3, [pc, #172]	; (804b0a0 <mem_malloc+0x1e8>)
 804aff2:	681a      	ldr	r2, [r3, #0]
 804aff4:	4b2e      	ldr	r3, [pc, #184]	; (804b0b0 <mem_malloc+0x1f8>)
 804aff6:	681b      	ldr	r3, [r3, #0]
 804aff8:	429a      	cmp	r2, r3
 804affa:	d00b      	beq.n	804b014 <mem_malloc+0x15c>
 804affc:	4b28      	ldr	r3, [pc, #160]	; (804b0a0 <mem_malloc+0x1e8>)
 804affe:	681b      	ldr	r3, [r3, #0]
 804b000:	791b      	ldrb	r3, [r3, #4]
 804b002:	2b00      	cmp	r3, #0
 804b004:	d006      	beq.n	804b014 <mem_malloc+0x15c>
 804b006:	4b27      	ldr	r3, [pc, #156]	; (804b0a4 <mem_malloc+0x1ec>)
 804b008:	f240 32b5 	movw	r2, #949	; 0x3b5
 804b00c:	4929      	ldr	r1, [pc, #164]	; (804b0b4 <mem_malloc+0x1fc>)
 804b00e:	4827      	ldr	r0, [pc, #156]	; (804b0ac <mem_malloc+0x1f4>)
 804b010:	f009 fc16 	bl	8054840 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 804b014:	4821      	ldr	r0, [pc, #132]	; (804b09c <mem_malloc+0x1e4>)
 804b016:	f009 fac2 	bl	805459e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 804b01a:	8bba      	ldrh	r2, [r7, #28]
 804b01c:	697b      	ldr	r3, [r7, #20]
 804b01e:	4413      	add	r3, r2
 804b020:	3308      	adds	r3, #8
 804b022:	4a23      	ldr	r2, [pc, #140]	; (804b0b0 <mem_malloc+0x1f8>)
 804b024:	6812      	ldr	r2, [r2, #0]
 804b026:	4293      	cmp	r3, r2
 804b028:	d906      	bls.n	804b038 <mem_malloc+0x180>
 804b02a:	4b1e      	ldr	r3, [pc, #120]	; (804b0a4 <mem_malloc+0x1ec>)
 804b02c:	f240 32b9 	movw	r2, #953	; 0x3b9
 804b030:	4921      	ldr	r1, [pc, #132]	; (804b0b8 <mem_malloc+0x200>)
 804b032:	481e      	ldr	r0, [pc, #120]	; (804b0ac <mem_malloc+0x1f4>)
 804b034:	f009 fc04 	bl	8054840 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 804b038:	697b      	ldr	r3, [r7, #20]
 804b03a:	f003 0303 	and.w	r3, r3, #3
 804b03e:	2b00      	cmp	r3, #0
 804b040:	d006      	beq.n	804b050 <mem_malloc+0x198>
 804b042:	4b18      	ldr	r3, [pc, #96]	; (804b0a4 <mem_malloc+0x1ec>)
 804b044:	f240 32bb 	movw	r2, #955	; 0x3bb
 804b048:	491c      	ldr	r1, [pc, #112]	; (804b0bc <mem_malloc+0x204>)
 804b04a:	4818      	ldr	r0, [pc, #96]	; (804b0ac <mem_malloc+0x1f4>)
 804b04c:	f009 fbf8 	bl	8054840 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 804b050:	697b      	ldr	r3, [r7, #20]
 804b052:	f003 0303 	and.w	r3, r3, #3
 804b056:	2b00      	cmp	r3, #0
 804b058:	d006      	beq.n	804b068 <mem_malloc+0x1b0>
 804b05a:	4b12      	ldr	r3, [pc, #72]	; (804b0a4 <mem_malloc+0x1ec>)
 804b05c:	f240 32bd 	movw	r2, #957	; 0x3bd
 804b060:	4917      	ldr	r1, [pc, #92]	; (804b0c0 <mem_malloc+0x208>)
 804b062:	4812      	ldr	r0, [pc, #72]	; (804b0ac <mem_malloc+0x1f4>)
 804b064:	f009 fbec 	bl	8054840 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 804b068:	697b      	ldr	r3, [r7, #20]
 804b06a:	3308      	adds	r3, #8
 804b06c:	e011      	b.n	804b092 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 804b06e:	8bfb      	ldrh	r3, [r7, #30]
 804b070:	4618      	mov	r0, r3
 804b072:	f7ff fc33 	bl	804a8dc <ptr_to_mem>
 804b076:	4603      	mov	r3, r0
 804b078:	881b      	ldrh	r3, [r3, #0]
 804b07a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 804b07c:	8bfa      	ldrh	r2, [r7, #30]
 804b07e:	8bbb      	ldrh	r3, [r7, #28]
 804b080:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 804b084:	429a      	cmp	r2, r3
 804b086:	f4ff af41 	bcc.w	804af0c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 804b08a:	4804      	ldr	r0, [pc, #16]	; (804b09c <mem_malloc+0x1e4>)
 804b08c:	f009 fa87 	bl	805459e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 804b090:	2300      	movs	r3, #0
}
 804b092:	4618      	mov	r0, r3
 804b094:	3720      	adds	r7, #32
 804b096:	46bd      	mov	sp, r7
 804b098:	bd80      	pop	{r7, pc}
 804b09a:	bf00      	nop
 804b09c:	200206ec 	.word	0x200206ec
 804b0a0:	200206f0 	.word	0x200206f0
 804b0a4:	08055a94 	.word	0x08055a94
 804b0a8:	08055c58 	.word	0x08055c58
 804b0ac:	08055adc 	.word	0x08055adc
 804b0b0:	200206e8 	.word	0x200206e8
 804b0b4:	08055c6c 	.word	0x08055c6c
 804b0b8:	08055c88 	.word	0x08055c88
 804b0bc:	08055cb8 	.word	0x08055cb8
 804b0c0:	08055ce8 	.word	0x08055ce8

0804b0c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 804b0c4:	b480      	push	{r7}
 804b0c6:	b085      	sub	sp, #20
 804b0c8:	af00      	add	r7, sp, #0
 804b0ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 804b0cc:	687b      	ldr	r3, [r7, #4]
 804b0ce:	689b      	ldr	r3, [r3, #8]
 804b0d0:	2200      	movs	r2, #0
 804b0d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 804b0d4:	687b      	ldr	r3, [r7, #4]
 804b0d6:	685b      	ldr	r3, [r3, #4]
 804b0d8:	3303      	adds	r3, #3
 804b0da:	f023 0303 	bic.w	r3, r3, #3
 804b0de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 804b0e0:	2300      	movs	r3, #0
 804b0e2:	60fb      	str	r3, [r7, #12]
 804b0e4:	e011      	b.n	804b10a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 804b0e6:	687b      	ldr	r3, [r7, #4]
 804b0e8:	689b      	ldr	r3, [r3, #8]
 804b0ea:	681a      	ldr	r2, [r3, #0]
 804b0ec:	68bb      	ldr	r3, [r7, #8]
 804b0ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 804b0f0:	687b      	ldr	r3, [r7, #4]
 804b0f2:	689b      	ldr	r3, [r3, #8]
 804b0f4:	68ba      	ldr	r2, [r7, #8]
 804b0f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 804b0f8:	687b      	ldr	r3, [r7, #4]
 804b0fa:	881b      	ldrh	r3, [r3, #0]
 804b0fc:	461a      	mov	r2, r3
 804b0fe:	68bb      	ldr	r3, [r7, #8]
 804b100:	4413      	add	r3, r2
 804b102:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 804b104:	68fb      	ldr	r3, [r7, #12]
 804b106:	3301      	adds	r3, #1
 804b108:	60fb      	str	r3, [r7, #12]
 804b10a:	687b      	ldr	r3, [r7, #4]
 804b10c:	885b      	ldrh	r3, [r3, #2]
 804b10e:	461a      	mov	r2, r3
 804b110:	68fb      	ldr	r3, [r7, #12]
 804b112:	4293      	cmp	r3, r2
 804b114:	dbe7      	blt.n	804b0e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 804b116:	bf00      	nop
 804b118:	bf00      	nop
 804b11a:	3714      	adds	r7, #20
 804b11c:	46bd      	mov	sp, r7
 804b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b122:	4770      	bx	lr

0804b124 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 804b124:	b580      	push	{r7, lr}
 804b126:	b082      	sub	sp, #8
 804b128:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 804b12a:	2300      	movs	r3, #0
 804b12c:	80fb      	strh	r3, [r7, #6]
 804b12e:	e009      	b.n	804b144 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 804b130:	88fb      	ldrh	r3, [r7, #6]
 804b132:	4a08      	ldr	r2, [pc, #32]	; (804b154 <memp_init+0x30>)
 804b134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804b138:	4618      	mov	r0, r3
 804b13a:	f7ff ffc3 	bl	804b0c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 804b13e:	88fb      	ldrh	r3, [r7, #6]
 804b140:	3301      	adds	r3, #1
 804b142:	80fb      	strh	r3, [r7, #6]
 804b144:	88fb      	ldrh	r3, [r7, #6]
 804b146:	2b0c      	cmp	r3, #12
 804b148:	d9f2      	bls.n	804b130 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 804b14a:	bf00      	nop
 804b14c:	bf00      	nop
 804b14e:	3708      	adds	r7, #8
 804b150:	46bd      	mov	sp, r7
 804b152:	bd80      	pop	{r7, pc}
 804b154:	08058504 	.word	0x08058504

0804b158 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 804b158:	b580      	push	{r7, lr}
 804b15a:	b084      	sub	sp, #16
 804b15c:	af00      	add	r7, sp, #0
 804b15e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 804b160:	f009 fa50 	bl	8054604 <sys_arch_protect>
 804b164:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 804b166:	687b      	ldr	r3, [r7, #4]
 804b168:	689b      	ldr	r3, [r3, #8]
 804b16a:	681b      	ldr	r3, [r3, #0]
 804b16c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 804b16e:	68bb      	ldr	r3, [r7, #8]
 804b170:	2b00      	cmp	r3, #0
 804b172:	d015      	beq.n	804b1a0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 804b174:	687b      	ldr	r3, [r7, #4]
 804b176:	689b      	ldr	r3, [r3, #8]
 804b178:	68ba      	ldr	r2, [r7, #8]
 804b17a:	6812      	ldr	r2, [r2, #0]
 804b17c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 804b17e:	68bb      	ldr	r3, [r7, #8]
 804b180:	f003 0303 	and.w	r3, r3, #3
 804b184:	2b00      	cmp	r3, #0
 804b186:	d006      	beq.n	804b196 <do_memp_malloc_pool+0x3e>
 804b188:	4b09      	ldr	r3, [pc, #36]	; (804b1b0 <do_memp_malloc_pool+0x58>)
 804b18a:	f44f 728c 	mov.w	r2, #280	; 0x118
 804b18e:	4909      	ldr	r1, [pc, #36]	; (804b1b4 <do_memp_malloc_pool+0x5c>)
 804b190:	4809      	ldr	r0, [pc, #36]	; (804b1b8 <do_memp_malloc_pool+0x60>)
 804b192:	f009 fb55 	bl	8054840 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 804b196:	68f8      	ldr	r0, [r7, #12]
 804b198:	f009 fa42 	bl	8054620 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 804b19c:	68bb      	ldr	r3, [r7, #8]
 804b19e:	e003      	b.n	804b1a8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 804b1a0:	68f8      	ldr	r0, [r7, #12]
 804b1a2:	f009 fa3d 	bl	8054620 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 804b1a6:	2300      	movs	r3, #0
}
 804b1a8:	4618      	mov	r0, r3
 804b1aa:	3710      	adds	r7, #16
 804b1ac:	46bd      	mov	sp, r7
 804b1ae:	bd80      	pop	{r7, pc}
 804b1b0:	08055d0c 	.word	0x08055d0c
 804b1b4:	08055d3c 	.word	0x08055d3c
 804b1b8:	08055d60 	.word	0x08055d60

0804b1bc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 804b1bc:	b580      	push	{r7, lr}
 804b1be:	b082      	sub	sp, #8
 804b1c0:	af00      	add	r7, sp, #0
 804b1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 804b1c4:	687b      	ldr	r3, [r7, #4]
 804b1c6:	2b00      	cmp	r3, #0
 804b1c8:	d106      	bne.n	804b1d8 <memp_malloc_pool+0x1c>
 804b1ca:	4b0a      	ldr	r3, [pc, #40]	; (804b1f4 <memp_malloc_pool+0x38>)
 804b1cc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 804b1d0:	4909      	ldr	r1, [pc, #36]	; (804b1f8 <memp_malloc_pool+0x3c>)
 804b1d2:	480a      	ldr	r0, [pc, #40]	; (804b1fc <memp_malloc_pool+0x40>)
 804b1d4:	f009 fb34 	bl	8054840 <iprintf>
  if (desc == NULL) {
 804b1d8:	687b      	ldr	r3, [r7, #4]
 804b1da:	2b00      	cmp	r3, #0
 804b1dc:	d101      	bne.n	804b1e2 <memp_malloc_pool+0x26>
    return NULL;
 804b1de:	2300      	movs	r3, #0
 804b1e0:	e003      	b.n	804b1ea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 804b1e2:	6878      	ldr	r0, [r7, #4]
 804b1e4:	f7ff ffb8 	bl	804b158 <do_memp_malloc_pool>
 804b1e8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 804b1ea:	4618      	mov	r0, r3
 804b1ec:	3708      	adds	r7, #8
 804b1ee:	46bd      	mov	sp, r7
 804b1f0:	bd80      	pop	{r7, pc}
 804b1f2:	bf00      	nop
 804b1f4:	08055d0c 	.word	0x08055d0c
 804b1f8:	08055d88 	.word	0x08055d88
 804b1fc:	08055d60 	.word	0x08055d60

0804b200 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 804b200:	b580      	push	{r7, lr}
 804b202:	b084      	sub	sp, #16
 804b204:	af00      	add	r7, sp, #0
 804b206:	4603      	mov	r3, r0
 804b208:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 804b20a:	79fb      	ldrb	r3, [r7, #7]
 804b20c:	2b0c      	cmp	r3, #12
 804b20e:	d908      	bls.n	804b222 <memp_malloc+0x22>
 804b210:	4b0a      	ldr	r3, [pc, #40]	; (804b23c <memp_malloc+0x3c>)
 804b212:	f240 1257 	movw	r2, #343	; 0x157
 804b216:	490a      	ldr	r1, [pc, #40]	; (804b240 <memp_malloc+0x40>)
 804b218:	480a      	ldr	r0, [pc, #40]	; (804b244 <memp_malloc+0x44>)
 804b21a:	f009 fb11 	bl	8054840 <iprintf>
 804b21e:	2300      	movs	r3, #0
 804b220:	e008      	b.n	804b234 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 804b222:	79fb      	ldrb	r3, [r7, #7]
 804b224:	4a08      	ldr	r2, [pc, #32]	; (804b248 <memp_malloc+0x48>)
 804b226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804b22a:	4618      	mov	r0, r3
 804b22c:	f7ff ff94 	bl	804b158 <do_memp_malloc_pool>
 804b230:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 804b232:	68fb      	ldr	r3, [r7, #12]
}
 804b234:	4618      	mov	r0, r3
 804b236:	3710      	adds	r7, #16
 804b238:	46bd      	mov	sp, r7
 804b23a:	bd80      	pop	{r7, pc}
 804b23c:	08055d0c 	.word	0x08055d0c
 804b240:	08055d9c 	.word	0x08055d9c
 804b244:	08055d60 	.word	0x08055d60
 804b248:	08058504 	.word	0x08058504

0804b24c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 804b24c:	b580      	push	{r7, lr}
 804b24e:	b084      	sub	sp, #16
 804b250:	af00      	add	r7, sp, #0
 804b252:	6078      	str	r0, [r7, #4]
 804b254:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 804b256:	683b      	ldr	r3, [r7, #0]
 804b258:	f003 0303 	and.w	r3, r3, #3
 804b25c:	2b00      	cmp	r3, #0
 804b25e:	d006      	beq.n	804b26e <do_memp_free_pool+0x22>
 804b260:	4b0d      	ldr	r3, [pc, #52]	; (804b298 <do_memp_free_pool+0x4c>)
 804b262:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 804b266:	490d      	ldr	r1, [pc, #52]	; (804b29c <do_memp_free_pool+0x50>)
 804b268:	480d      	ldr	r0, [pc, #52]	; (804b2a0 <do_memp_free_pool+0x54>)
 804b26a:	f009 fae9 	bl	8054840 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 804b26e:	683b      	ldr	r3, [r7, #0]
 804b270:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 804b272:	f009 f9c7 	bl	8054604 <sys_arch_protect>
 804b276:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 804b278:	687b      	ldr	r3, [r7, #4]
 804b27a:	689b      	ldr	r3, [r3, #8]
 804b27c:	681a      	ldr	r2, [r3, #0]
 804b27e:	68fb      	ldr	r3, [r7, #12]
 804b280:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 804b282:	687b      	ldr	r3, [r7, #4]
 804b284:	689b      	ldr	r3, [r3, #8]
 804b286:	68fa      	ldr	r2, [r7, #12]
 804b288:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 804b28a:	68b8      	ldr	r0, [r7, #8]
 804b28c:	f009 f9c8 	bl	8054620 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 804b290:	bf00      	nop
 804b292:	3710      	adds	r7, #16
 804b294:	46bd      	mov	sp, r7
 804b296:	bd80      	pop	{r7, pc}
 804b298:	08055d0c 	.word	0x08055d0c
 804b29c:	08055dbc 	.word	0x08055dbc
 804b2a0:	08055d60 	.word	0x08055d60

0804b2a4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 804b2a4:	b580      	push	{r7, lr}
 804b2a6:	b082      	sub	sp, #8
 804b2a8:	af00      	add	r7, sp, #0
 804b2aa:	6078      	str	r0, [r7, #4]
 804b2ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 804b2ae:	687b      	ldr	r3, [r7, #4]
 804b2b0:	2b00      	cmp	r3, #0
 804b2b2:	d106      	bne.n	804b2c2 <memp_free_pool+0x1e>
 804b2b4:	4b0a      	ldr	r3, [pc, #40]	; (804b2e0 <memp_free_pool+0x3c>)
 804b2b6:	f240 1295 	movw	r2, #405	; 0x195
 804b2ba:	490a      	ldr	r1, [pc, #40]	; (804b2e4 <memp_free_pool+0x40>)
 804b2bc:	480a      	ldr	r0, [pc, #40]	; (804b2e8 <memp_free_pool+0x44>)
 804b2be:	f009 fabf 	bl	8054840 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 804b2c2:	687b      	ldr	r3, [r7, #4]
 804b2c4:	2b00      	cmp	r3, #0
 804b2c6:	d007      	beq.n	804b2d8 <memp_free_pool+0x34>
 804b2c8:	683b      	ldr	r3, [r7, #0]
 804b2ca:	2b00      	cmp	r3, #0
 804b2cc:	d004      	beq.n	804b2d8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 804b2ce:	6839      	ldr	r1, [r7, #0]
 804b2d0:	6878      	ldr	r0, [r7, #4]
 804b2d2:	f7ff ffbb 	bl	804b24c <do_memp_free_pool>
 804b2d6:	e000      	b.n	804b2da <memp_free_pool+0x36>
    return;
 804b2d8:	bf00      	nop
}
 804b2da:	3708      	adds	r7, #8
 804b2dc:	46bd      	mov	sp, r7
 804b2de:	bd80      	pop	{r7, pc}
 804b2e0:	08055d0c 	.word	0x08055d0c
 804b2e4:	08055d88 	.word	0x08055d88
 804b2e8:	08055d60 	.word	0x08055d60

0804b2ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 804b2ec:	b580      	push	{r7, lr}
 804b2ee:	b082      	sub	sp, #8
 804b2f0:	af00      	add	r7, sp, #0
 804b2f2:	4603      	mov	r3, r0
 804b2f4:	6039      	str	r1, [r7, #0]
 804b2f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 804b2f8:	79fb      	ldrb	r3, [r7, #7]
 804b2fa:	2b0c      	cmp	r3, #12
 804b2fc:	d907      	bls.n	804b30e <memp_free+0x22>
 804b2fe:	4b0c      	ldr	r3, [pc, #48]	; (804b330 <memp_free+0x44>)
 804b300:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 804b304:	490b      	ldr	r1, [pc, #44]	; (804b334 <memp_free+0x48>)
 804b306:	480c      	ldr	r0, [pc, #48]	; (804b338 <memp_free+0x4c>)
 804b308:	f009 fa9a 	bl	8054840 <iprintf>
 804b30c:	e00c      	b.n	804b328 <memp_free+0x3c>

  if (mem == NULL) {
 804b30e:	683b      	ldr	r3, [r7, #0]
 804b310:	2b00      	cmp	r3, #0
 804b312:	d008      	beq.n	804b326 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 804b314:	79fb      	ldrb	r3, [r7, #7]
 804b316:	4a09      	ldr	r2, [pc, #36]	; (804b33c <memp_free+0x50>)
 804b318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804b31c:	6839      	ldr	r1, [r7, #0]
 804b31e:	4618      	mov	r0, r3
 804b320:	f7ff ff94 	bl	804b24c <do_memp_free_pool>
 804b324:	e000      	b.n	804b328 <memp_free+0x3c>
    return;
 804b326:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 804b328:	3708      	adds	r7, #8
 804b32a:	46bd      	mov	sp, r7
 804b32c:	bd80      	pop	{r7, pc}
 804b32e:	bf00      	nop
 804b330:	08055d0c 	.word	0x08055d0c
 804b334:	08055ddc 	.word	0x08055ddc
 804b338:	08055d60 	.word	0x08055d60
 804b33c:	08058504 	.word	0x08058504

0804b340 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 804b340:	b480      	push	{r7}
 804b342:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 804b344:	bf00      	nop
 804b346:	46bd      	mov	sp, r7
 804b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b34c:	4770      	bx	lr
	...

0804b350 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 804b350:	b580      	push	{r7, lr}
 804b352:	b086      	sub	sp, #24
 804b354:	af00      	add	r7, sp, #0
 804b356:	60f8      	str	r0, [r7, #12]
 804b358:	60b9      	str	r1, [r7, #8]
 804b35a:	607a      	str	r2, [r7, #4]
 804b35c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 804b35e:	68fb      	ldr	r3, [r7, #12]
 804b360:	2b00      	cmp	r3, #0
 804b362:	d108      	bne.n	804b376 <netif_add+0x26>
 804b364:	4b57      	ldr	r3, [pc, #348]	; (804b4c4 <netif_add+0x174>)
 804b366:	f240 1227 	movw	r2, #295	; 0x127
 804b36a:	4957      	ldr	r1, [pc, #348]	; (804b4c8 <netif_add+0x178>)
 804b36c:	4857      	ldr	r0, [pc, #348]	; (804b4cc <netif_add+0x17c>)
 804b36e:	f009 fa67 	bl	8054840 <iprintf>
 804b372:	2300      	movs	r3, #0
 804b374:	e0a2      	b.n	804b4bc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 804b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b378:	2b00      	cmp	r3, #0
 804b37a:	d108      	bne.n	804b38e <netif_add+0x3e>
 804b37c:	4b51      	ldr	r3, [pc, #324]	; (804b4c4 <netif_add+0x174>)
 804b37e:	f44f 7294 	mov.w	r2, #296	; 0x128
 804b382:	4953      	ldr	r1, [pc, #332]	; (804b4d0 <netif_add+0x180>)
 804b384:	4851      	ldr	r0, [pc, #324]	; (804b4cc <netif_add+0x17c>)
 804b386:	f009 fa5b 	bl	8054840 <iprintf>
 804b38a:	2300      	movs	r3, #0
 804b38c:	e096      	b.n	804b4bc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 804b38e:	68bb      	ldr	r3, [r7, #8]
 804b390:	2b00      	cmp	r3, #0
 804b392:	d101      	bne.n	804b398 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 804b394:	4b4f      	ldr	r3, [pc, #316]	; (804b4d4 <netif_add+0x184>)
 804b396:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 804b398:	687b      	ldr	r3, [r7, #4]
 804b39a:	2b00      	cmp	r3, #0
 804b39c:	d101      	bne.n	804b3a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 804b39e:	4b4d      	ldr	r3, [pc, #308]	; (804b4d4 <netif_add+0x184>)
 804b3a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 804b3a2:	683b      	ldr	r3, [r7, #0]
 804b3a4:	2b00      	cmp	r3, #0
 804b3a6:	d101      	bne.n	804b3ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 804b3a8:	4b4a      	ldr	r3, [pc, #296]	; (804b4d4 <netif_add+0x184>)
 804b3aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 804b3ac:	68fb      	ldr	r3, [r7, #12]
 804b3ae:	2200      	movs	r2, #0
 804b3b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 804b3b2:	68fb      	ldr	r3, [r7, #12]
 804b3b4:	2200      	movs	r2, #0
 804b3b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 804b3b8:	68fb      	ldr	r3, [r7, #12]
 804b3ba:	2200      	movs	r2, #0
 804b3bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 804b3be:	68fb      	ldr	r3, [r7, #12]
 804b3c0:	4a45      	ldr	r2, [pc, #276]	; (804b4d8 <netif_add+0x188>)
 804b3c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 804b3c4:	68fb      	ldr	r3, [r7, #12]
 804b3c6:	2200      	movs	r2, #0
 804b3c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 804b3ca:	68fb      	ldr	r3, [r7, #12]
 804b3cc:	2200      	movs	r2, #0
 804b3ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 804b3d2:	68fb      	ldr	r3, [r7, #12]
 804b3d4:	2200      	movs	r2, #0
 804b3d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 804b3d8:	68fb      	ldr	r3, [r7, #12]
 804b3da:	6a3a      	ldr	r2, [r7, #32]
 804b3dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 804b3de:	4b3f      	ldr	r3, [pc, #252]	; (804b4dc <netif_add+0x18c>)
 804b3e0:	781a      	ldrb	r2, [r3, #0]
 804b3e2:	68fb      	ldr	r3, [r7, #12]
 804b3e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 804b3e8:	68fb      	ldr	r3, [r7, #12]
 804b3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804b3ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 804b3ee:	683b      	ldr	r3, [r7, #0]
 804b3f0:	687a      	ldr	r2, [r7, #4]
 804b3f2:	68b9      	ldr	r1, [r7, #8]
 804b3f4:	68f8      	ldr	r0, [r7, #12]
 804b3f6:	f000 f913 	bl	804b620 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 804b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804b3fc:	68f8      	ldr	r0, [r7, #12]
 804b3fe:	4798      	blx	r3
 804b400:	4603      	mov	r3, r0
 804b402:	2b00      	cmp	r3, #0
 804b404:	d001      	beq.n	804b40a <netif_add+0xba>
    return NULL;
 804b406:	2300      	movs	r3, #0
 804b408:	e058      	b.n	804b4bc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 804b40a:	68fb      	ldr	r3, [r7, #12]
 804b40c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804b410:	2bff      	cmp	r3, #255	; 0xff
 804b412:	d103      	bne.n	804b41c <netif_add+0xcc>
        netif->num = 0;
 804b414:	68fb      	ldr	r3, [r7, #12]
 804b416:	2200      	movs	r2, #0
 804b418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 804b41c:	2300      	movs	r3, #0
 804b41e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 804b420:	4b2f      	ldr	r3, [pc, #188]	; (804b4e0 <netif_add+0x190>)
 804b422:	681b      	ldr	r3, [r3, #0]
 804b424:	617b      	str	r3, [r7, #20]
 804b426:	e02b      	b.n	804b480 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 804b428:	697a      	ldr	r2, [r7, #20]
 804b42a:	68fb      	ldr	r3, [r7, #12]
 804b42c:	429a      	cmp	r2, r3
 804b42e:	d106      	bne.n	804b43e <netif_add+0xee>
 804b430:	4b24      	ldr	r3, [pc, #144]	; (804b4c4 <netif_add+0x174>)
 804b432:	f240 128b 	movw	r2, #395	; 0x18b
 804b436:	492b      	ldr	r1, [pc, #172]	; (804b4e4 <netif_add+0x194>)
 804b438:	4824      	ldr	r0, [pc, #144]	; (804b4cc <netif_add+0x17c>)
 804b43a:	f009 fa01 	bl	8054840 <iprintf>
        num_netifs++;
 804b43e:	693b      	ldr	r3, [r7, #16]
 804b440:	3301      	adds	r3, #1
 804b442:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 804b444:	693b      	ldr	r3, [r7, #16]
 804b446:	2bff      	cmp	r3, #255	; 0xff
 804b448:	dd06      	ble.n	804b458 <netif_add+0x108>
 804b44a:	4b1e      	ldr	r3, [pc, #120]	; (804b4c4 <netif_add+0x174>)
 804b44c:	f240 128d 	movw	r2, #397	; 0x18d
 804b450:	4925      	ldr	r1, [pc, #148]	; (804b4e8 <netif_add+0x198>)
 804b452:	481e      	ldr	r0, [pc, #120]	; (804b4cc <netif_add+0x17c>)
 804b454:	f009 f9f4 	bl	8054840 <iprintf>
        if (netif2->num == netif->num) {
 804b458:	697b      	ldr	r3, [r7, #20]
 804b45a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 804b45e:	68fb      	ldr	r3, [r7, #12]
 804b460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804b464:	429a      	cmp	r2, r3
 804b466:	d108      	bne.n	804b47a <netif_add+0x12a>
          netif->num++;
 804b468:	68fb      	ldr	r3, [r7, #12]
 804b46a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804b46e:	3301      	adds	r3, #1
 804b470:	b2da      	uxtb	r2, r3
 804b472:	68fb      	ldr	r3, [r7, #12]
 804b474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 804b478:	e005      	b.n	804b486 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 804b47a:	697b      	ldr	r3, [r7, #20]
 804b47c:	681b      	ldr	r3, [r3, #0]
 804b47e:	617b      	str	r3, [r7, #20]
 804b480:	697b      	ldr	r3, [r7, #20]
 804b482:	2b00      	cmp	r3, #0
 804b484:	d1d0      	bne.n	804b428 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 804b486:	697b      	ldr	r3, [r7, #20]
 804b488:	2b00      	cmp	r3, #0
 804b48a:	d1be      	bne.n	804b40a <netif_add+0xba>
  }
  if (netif->num == 254) {
 804b48c:	68fb      	ldr	r3, [r7, #12]
 804b48e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804b492:	2bfe      	cmp	r3, #254	; 0xfe
 804b494:	d103      	bne.n	804b49e <netif_add+0x14e>
    netif_num = 0;
 804b496:	4b11      	ldr	r3, [pc, #68]	; (804b4dc <netif_add+0x18c>)
 804b498:	2200      	movs	r2, #0
 804b49a:	701a      	strb	r2, [r3, #0]
 804b49c:	e006      	b.n	804b4ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 804b49e:	68fb      	ldr	r3, [r7, #12]
 804b4a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804b4a4:	3301      	adds	r3, #1
 804b4a6:	b2da      	uxtb	r2, r3
 804b4a8:	4b0c      	ldr	r3, [pc, #48]	; (804b4dc <netif_add+0x18c>)
 804b4aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 804b4ac:	4b0c      	ldr	r3, [pc, #48]	; (804b4e0 <netif_add+0x190>)
 804b4ae:	681a      	ldr	r2, [r3, #0]
 804b4b0:	68fb      	ldr	r3, [r7, #12]
 804b4b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 804b4b4:	4a0a      	ldr	r2, [pc, #40]	; (804b4e0 <netif_add+0x190>)
 804b4b6:	68fb      	ldr	r3, [r7, #12]
 804b4b8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 804b4ba:	68fb      	ldr	r3, [r7, #12]
}
 804b4bc:	4618      	mov	r0, r3
 804b4be:	3718      	adds	r7, #24
 804b4c0:	46bd      	mov	sp, r7
 804b4c2:	bd80      	pop	{r7, pc}
 804b4c4:	08055df8 	.word	0x08055df8
 804b4c8:	08055e8c 	.word	0x08055e8c
 804b4cc:	08055e48 	.word	0x08055e48
 804b4d0:	08055ea8 	.word	0x08055ea8
 804b4d4:	08058578 	.word	0x08058578
 804b4d8:	0804b8fb 	.word	0x0804b8fb
 804b4dc:	200237c8 	.word	0x200237c8
 804b4e0:	200237c0 	.word	0x200237c0
 804b4e4:	08055ecc 	.word	0x08055ecc
 804b4e8:	08055ee0 	.word	0x08055ee0

0804b4ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 804b4ec:	b580      	push	{r7, lr}
 804b4ee:	b082      	sub	sp, #8
 804b4f0:	af00      	add	r7, sp, #0
 804b4f2:	6078      	str	r0, [r7, #4]
 804b4f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 804b4f6:	6839      	ldr	r1, [r7, #0]
 804b4f8:	6878      	ldr	r0, [r7, #4]
 804b4fa:	f002 fb7d 	bl	804dbf8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 804b4fe:	6839      	ldr	r1, [r7, #0]
 804b500:	6878      	ldr	r0, [r7, #4]
 804b502:	f006 fc91 	bl	8051e28 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 804b506:	bf00      	nop
 804b508:	3708      	adds	r7, #8
 804b50a:	46bd      	mov	sp, r7
 804b50c:	bd80      	pop	{r7, pc}
	...

0804b510 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 804b510:	b580      	push	{r7, lr}
 804b512:	b086      	sub	sp, #24
 804b514:	af00      	add	r7, sp, #0
 804b516:	60f8      	str	r0, [r7, #12]
 804b518:	60b9      	str	r1, [r7, #8]
 804b51a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 804b51c:	68bb      	ldr	r3, [r7, #8]
 804b51e:	2b00      	cmp	r3, #0
 804b520:	d106      	bne.n	804b530 <netif_do_set_ipaddr+0x20>
 804b522:	4b1d      	ldr	r3, [pc, #116]	; (804b598 <netif_do_set_ipaddr+0x88>)
 804b524:	f240 12cb 	movw	r2, #459	; 0x1cb
 804b528:	491c      	ldr	r1, [pc, #112]	; (804b59c <netif_do_set_ipaddr+0x8c>)
 804b52a:	481d      	ldr	r0, [pc, #116]	; (804b5a0 <netif_do_set_ipaddr+0x90>)
 804b52c:	f009 f988 	bl	8054840 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 804b530:	687b      	ldr	r3, [r7, #4]
 804b532:	2b00      	cmp	r3, #0
 804b534:	d106      	bne.n	804b544 <netif_do_set_ipaddr+0x34>
 804b536:	4b18      	ldr	r3, [pc, #96]	; (804b598 <netif_do_set_ipaddr+0x88>)
 804b538:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 804b53c:	4917      	ldr	r1, [pc, #92]	; (804b59c <netif_do_set_ipaddr+0x8c>)
 804b53e:	4818      	ldr	r0, [pc, #96]	; (804b5a0 <netif_do_set_ipaddr+0x90>)
 804b540:	f009 f97e 	bl	8054840 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 804b544:	68bb      	ldr	r3, [r7, #8]
 804b546:	681a      	ldr	r2, [r3, #0]
 804b548:	68fb      	ldr	r3, [r7, #12]
 804b54a:	3304      	adds	r3, #4
 804b54c:	681b      	ldr	r3, [r3, #0]
 804b54e:	429a      	cmp	r2, r3
 804b550:	d01c      	beq.n	804b58c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 804b552:	68bb      	ldr	r3, [r7, #8]
 804b554:	681b      	ldr	r3, [r3, #0]
 804b556:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 804b558:	68fb      	ldr	r3, [r7, #12]
 804b55a:	3304      	adds	r3, #4
 804b55c:	681a      	ldr	r2, [r3, #0]
 804b55e:	687b      	ldr	r3, [r7, #4]
 804b560:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 804b562:	f107 0314 	add.w	r3, r7, #20
 804b566:	4619      	mov	r1, r3
 804b568:	6878      	ldr	r0, [r7, #4]
 804b56a:	f7ff ffbf 	bl	804b4ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 804b56e:	68bb      	ldr	r3, [r7, #8]
 804b570:	2b00      	cmp	r3, #0
 804b572:	d002      	beq.n	804b57a <netif_do_set_ipaddr+0x6a>
 804b574:	68bb      	ldr	r3, [r7, #8]
 804b576:	681b      	ldr	r3, [r3, #0]
 804b578:	e000      	b.n	804b57c <netif_do_set_ipaddr+0x6c>
 804b57a:	2300      	movs	r3, #0
 804b57c:	68fa      	ldr	r2, [r7, #12]
 804b57e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 804b580:	2101      	movs	r1, #1
 804b582:	68f8      	ldr	r0, [r7, #12]
 804b584:	f000 f8d2 	bl	804b72c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 804b588:	2301      	movs	r3, #1
 804b58a:	e000      	b.n	804b58e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 804b58c:	2300      	movs	r3, #0
}
 804b58e:	4618      	mov	r0, r3
 804b590:	3718      	adds	r7, #24
 804b592:	46bd      	mov	sp, r7
 804b594:	bd80      	pop	{r7, pc}
 804b596:	bf00      	nop
 804b598:	08055df8 	.word	0x08055df8
 804b59c:	08055f10 	.word	0x08055f10
 804b5a0:	08055e48 	.word	0x08055e48

0804b5a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 804b5a4:	b480      	push	{r7}
 804b5a6:	b085      	sub	sp, #20
 804b5a8:	af00      	add	r7, sp, #0
 804b5aa:	60f8      	str	r0, [r7, #12]
 804b5ac:	60b9      	str	r1, [r7, #8]
 804b5ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 804b5b0:	68bb      	ldr	r3, [r7, #8]
 804b5b2:	681a      	ldr	r2, [r3, #0]
 804b5b4:	68fb      	ldr	r3, [r7, #12]
 804b5b6:	3308      	adds	r3, #8
 804b5b8:	681b      	ldr	r3, [r3, #0]
 804b5ba:	429a      	cmp	r2, r3
 804b5bc:	d00a      	beq.n	804b5d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 804b5be:	68bb      	ldr	r3, [r7, #8]
 804b5c0:	2b00      	cmp	r3, #0
 804b5c2:	d002      	beq.n	804b5ca <netif_do_set_netmask+0x26>
 804b5c4:	68bb      	ldr	r3, [r7, #8]
 804b5c6:	681b      	ldr	r3, [r3, #0]
 804b5c8:	e000      	b.n	804b5cc <netif_do_set_netmask+0x28>
 804b5ca:	2300      	movs	r3, #0
 804b5cc:	68fa      	ldr	r2, [r7, #12]
 804b5ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 804b5d0:	2301      	movs	r3, #1
 804b5d2:	e000      	b.n	804b5d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 804b5d4:	2300      	movs	r3, #0
}
 804b5d6:	4618      	mov	r0, r3
 804b5d8:	3714      	adds	r7, #20
 804b5da:	46bd      	mov	sp, r7
 804b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b5e0:	4770      	bx	lr

0804b5e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 804b5e2:	b480      	push	{r7}
 804b5e4:	b085      	sub	sp, #20
 804b5e6:	af00      	add	r7, sp, #0
 804b5e8:	60f8      	str	r0, [r7, #12]
 804b5ea:	60b9      	str	r1, [r7, #8]
 804b5ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 804b5ee:	68bb      	ldr	r3, [r7, #8]
 804b5f0:	681a      	ldr	r2, [r3, #0]
 804b5f2:	68fb      	ldr	r3, [r7, #12]
 804b5f4:	330c      	adds	r3, #12
 804b5f6:	681b      	ldr	r3, [r3, #0]
 804b5f8:	429a      	cmp	r2, r3
 804b5fa:	d00a      	beq.n	804b612 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 804b5fc:	68bb      	ldr	r3, [r7, #8]
 804b5fe:	2b00      	cmp	r3, #0
 804b600:	d002      	beq.n	804b608 <netif_do_set_gw+0x26>
 804b602:	68bb      	ldr	r3, [r7, #8]
 804b604:	681b      	ldr	r3, [r3, #0]
 804b606:	e000      	b.n	804b60a <netif_do_set_gw+0x28>
 804b608:	2300      	movs	r3, #0
 804b60a:	68fa      	ldr	r2, [r7, #12]
 804b60c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 804b60e:	2301      	movs	r3, #1
 804b610:	e000      	b.n	804b614 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 804b612:	2300      	movs	r3, #0
}
 804b614:	4618      	mov	r0, r3
 804b616:	3714      	adds	r7, #20
 804b618:	46bd      	mov	sp, r7
 804b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b61e:	4770      	bx	lr

0804b620 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 804b620:	b580      	push	{r7, lr}
 804b622:	b088      	sub	sp, #32
 804b624:	af00      	add	r7, sp, #0
 804b626:	60f8      	str	r0, [r7, #12]
 804b628:	60b9      	str	r1, [r7, #8]
 804b62a:	607a      	str	r2, [r7, #4]
 804b62c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 804b62e:	2300      	movs	r3, #0
 804b630:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 804b632:	2300      	movs	r3, #0
 804b634:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 804b636:	68bb      	ldr	r3, [r7, #8]
 804b638:	2b00      	cmp	r3, #0
 804b63a:	d101      	bne.n	804b640 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 804b63c:	4b1c      	ldr	r3, [pc, #112]	; (804b6b0 <netif_set_addr+0x90>)
 804b63e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 804b640:	687b      	ldr	r3, [r7, #4]
 804b642:	2b00      	cmp	r3, #0
 804b644:	d101      	bne.n	804b64a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 804b646:	4b1a      	ldr	r3, [pc, #104]	; (804b6b0 <netif_set_addr+0x90>)
 804b648:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 804b64a:	683b      	ldr	r3, [r7, #0]
 804b64c:	2b00      	cmp	r3, #0
 804b64e:	d101      	bne.n	804b654 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 804b650:	4b17      	ldr	r3, [pc, #92]	; (804b6b0 <netif_set_addr+0x90>)
 804b652:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 804b654:	68bb      	ldr	r3, [r7, #8]
 804b656:	2b00      	cmp	r3, #0
 804b658:	d003      	beq.n	804b662 <netif_set_addr+0x42>
 804b65a:	68bb      	ldr	r3, [r7, #8]
 804b65c:	681b      	ldr	r3, [r3, #0]
 804b65e:	2b00      	cmp	r3, #0
 804b660:	d101      	bne.n	804b666 <netif_set_addr+0x46>
 804b662:	2301      	movs	r3, #1
 804b664:	e000      	b.n	804b668 <netif_set_addr+0x48>
 804b666:	2300      	movs	r3, #0
 804b668:	617b      	str	r3, [r7, #20]
  if (remove) {
 804b66a:	697b      	ldr	r3, [r7, #20]
 804b66c:	2b00      	cmp	r3, #0
 804b66e:	d006      	beq.n	804b67e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 804b670:	f107 0310 	add.w	r3, r7, #16
 804b674:	461a      	mov	r2, r3
 804b676:	68b9      	ldr	r1, [r7, #8]
 804b678:	68f8      	ldr	r0, [r7, #12]
 804b67a:	f7ff ff49 	bl	804b510 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 804b67e:	69fa      	ldr	r2, [r7, #28]
 804b680:	6879      	ldr	r1, [r7, #4]
 804b682:	68f8      	ldr	r0, [r7, #12]
 804b684:	f7ff ff8e 	bl	804b5a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 804b688:	69ba      	ldr	r2, [r7, #24]
 804b68a:	6839      	ldr	r1, [r7, #0]
 804b68c:	68f8      	ldr	r0, [r7, #12]
 804b68e:	f7ff ffa8 	bl	804b5e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 804b692:	697b      	ldr	r3, [r7, #20]
 804b694:	2b00      	cmp	r3, #0
 804b696:	d106      	bne.n	804b6a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 804b698:	f107 0310 	add.w	r3, r7, #16
 804b69c:	461a      	mov	r2, r3
 804b69e:	68b9      	ldr	r1, [r7, #8]
 804b6a0:	68f8      	ldr	r0, [r7, #12]
 804b6a2:	f7ff ff35 	bl	804b510 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 804b6a6:	bf00      	nop
 804b6a8:	3720      	adds	r7, #32
 804b6aa:	46bd      	mov	sp, r7
 804b6ac:	bd80      	pop	{r7, pc}
 804b6ae:	bf00      	nop
 804b6b0:	08058578 	.word	0x08058578

0804b6b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 804b6b4:	b480      	push	{r7}
 804b6b6:	b083      	sub	sp, #12
 804b6b8:	af00      	add	r7, sp, #0
 804b6ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 804b6bc:	4a04      	ldr	r2, [pc, #16]	; (804b6d0 <netif_set_default+0x1c>)
 804b6be:	687b      	ldr	r3, [r7, #4]
 804b6c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 804b6c2:	bf00      	nop
 804b6c4:	370c      	adds	r7, #12
 804b6c6:	46bd      	mov	sp, r7
 804b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b6cc:	4770      	bx	lr
 804b6ce:	bf00      	nop
 804b6d0:	200237c4 	.word	0x200237c4

0804b6d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 804b6d4:	b580      	push	{r7, lr}
 804b6d6:	b082      	sub	sp, #8
 804b6d8:	af00      	add	r7, sp, #0
 804b6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 804b6dc:	687b      	ldr	r3, [r7, #4]
 804b6de:	2b00      	cmp	r3, #0
 804b6e0:	d107      	bne.n	804b6f2 <netif_set_up+0x1e>
 804b6e2:	4b0f      	ldr	r3, [pc, #60]	; (804b720 <netif_set_up+0x4c>)
 804b6e4:	f44f 7254 	mov.w	r2, #848	; 0x350
 804b6e8:	490e      	ldr	r1, [pc, #56]	; (804b724 <netif_set_up+0x50>)
 804b6ea:	480f      	ldr	r0, [pc, #60]	; (804b728 <netif_set_up+0x54>)
 804b6ec:	f009 f8a8 	bl	8054840 <iprintf>
 804b6f0:	e013      	b.n	804b71a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 804b6f2:	687b      	ldr	r3, [r7, #4]
 804b6f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b6f8:	f003 0301 	and.w	r3, r3, #1
 804b6fc:	2b00      	cmp	r3, #0
 804b6fe:	d10c      	bne.n	804b71a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 804b700:	687b      	ldr	r3, [r7, #4]
 804b702:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b706:	f043 0301 	orr.w	r3, r3, #1
 804b70a:	b2da      	uxtb	r2, r3
 804b70c:	687b      	ldr	r3, [r7, #4]
 804b70e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 804b712:	2103      	movs	r1, #3
 804b714:	6878      	ldr	r0, [r7, #4]
 804b716:	f000 f809 	bl	804b72c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 804b71a:	3708      	adds	r7, #8
 804b71c:	46bd      	mov	sp, r7
 804b71e:	bd80      	pop	{r7, pc}
 804b720:	08055df8 	.word	0x08055df8
 804b724:	08055f80 	.word	0x08055f80
 804b728:	08055e48 	.word	0x08055e48

0804b72c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 804b72c:	b580      	push	{r7, lr}
 804b72e:	b082      	sub	sp, #8
 804b730:	af00      	add	r7, sp, #0
 804b732:	6078      	str	r0, [r7, #4]
 804b734:	460b      	mov	r3, r1
 804b736:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 804b738:	687b      	ldr	r3, [r7, #4]
 804b73a:	2b00      	cmp	r3, #0
 804b73c:	d106      	bne.n	804b74c <netif_issue_reports+0x20>
 804b73e:	4b18      	ldr	r3, [pc, #96]	; (804b7a0 <netif_issue_reports+0x74>)
 804b740:	f240 326d 	movw	r2, #877	; 0x36d
 804b744:	4917      	ldr	r1, [pc, #92]	; (804b7a4 <netif_issue_reports+0x78>)
 804b746:	4818      	ldr	r0, [pc, #96]	; (804b7a8 <netif_issue_reports+0x7c>)
 804b748:	f009 f87a 	bl	8054840 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 804b74c:	687b      	ldr	r3, [r7, #4]
 804b74e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b752:	f003 0304 	and.w	r3, r3, #4
 804b756:	2b00      	cmp	r3, #0
 804b758:	d01e      	beq.n	804b798 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 804b75a:	687b      	ldr	r3, [r7, #4]
 804b75c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b760:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 804b764:	2b00      	cmp	r3, #0
 804b766:	d017      	beq.n	804b798 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 804b768:	78fb      	ldrb	r3, [r7, #3]
 804b76a:	f003 0301 	and.w	r3, r3, #1
 804b76e:	2b00      	cmp	r3, #0
 804b770:	d013      	beq.n	804b79a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 804b772:	687b      	ldr	r3, [r7, #4]
 804b774:	3304      	adds	r3, #4
 804b776:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 804b778:	2b00      	cmp	r3, #0
 804b77a:	d00e      	beq.n	804b79a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 804b77c:	687b      	ldr	r3, [r7, #4]
 804b77e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b782:	f003 0308 	and.w	r3, r3, #8
 804b786:	2b00      	cmp	r3, #0
 804b788:	d007      	beq.n	804b79a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 804b78a:	687b      	ldr	r3, [r7, #4]
 804b78c:	3304      	adds	r3, #4
 804b78e:	4619      	mov	r1, r3
 804b790:	6878      	ldr	r0, [r7, #4]
 804b792:	f007 fab3 	bl	8052cfc <etharp_request>
 804b796:	e000      	b.n	804b79a <netif_issue_reports+0x6e>
    return;
 804b798:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 804b79a:	3708      	adds	r7, #8
 804b79c:	46bd      	mov	sp, r7
 804b79e:	bd80      	pop	{r7, pc}
 804b7a0:	08055df8 	.word	0x08055df8
 804b7a4:	08055f9c 	.word	0x08055f9c
 804b7a8:	08055e48 	.word	0x08055e48

0804b7ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 804b7ac:	b580      	push	{r7, lr}
 804b7ae:	b082      	sub	sp, #8
 804b7b0:	af00      	add	r7, sp, #0
 804b7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 804b7b4:	687b      	ldr	r3, [r7, #4]
 804b7b6:	2b00      	cmp	r3, #0
 804b7b8:	d107      	bne.n	804b7ca <netif_set_down+0x1e>
 804b7ba:	4b12      	ldr	r3, [pc, #72]	; (804b804 <netif_set_down+0x58>)
 804b7bc:	f240 329b 	movw	r2, #923	; 0x39b
 804b7c0:	4911      	ldr	r1, [pc, #68]	; (804b808 <netif_set_down+0x5c>)
 804b7c2:	4812      	ldr	r0, [pc, #72]	; (804b80c <netif_set_down+0x60>)
 804b7c4:	f009 f83c 	bl	8054840 <iprintf>
 804b7c8:	e019      	b.n	804b7fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 804b7ca:	687b      	ldr	r3, [r7, #4]
 804b7cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b7d0:	f003 0301 	and.w	r3, r3, #1
 804b7d4:	2b00      	cmp	r3, #0
 804b7d6:	d012      	beq.n	804b7fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 804b7d8:	687b      	ldr	r3, [r7, #4]
 804b7da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b7de:	f023 0301 	bic.w	r3, r3, #1
 804b7e2:	b2da      	uxtb	r2, r3
 804b7e4:	687b      	ldr	r3, [r7, #4]
 804b7e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 804b7ea:	687b      	ldr	r3, [r7, #4]
 804b7ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b7f0:	f003 0308 	and.w	r3, r3, #8
 804b7f4:	2b00      	cmp	r3, #0
 804b7f6:	d002      	beq.n	804b7fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 804b7f8:	6878      	ldr	r0, [r7, #4]
 804b7fa:	f006 fe3d 	bl	8052478 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 804b7fe:	3708      	adds	r7, #8
 804b800:	46bd      	mov	sp, r7
 804b802:	bd80      	pop	{r7, pc}
 804b804:	08055df8 	.word	0x08055df8
 804b808:	08055fc0 	.word	0x08055fc0
 804b80c:	08055e48 	.word	0x08055e48

0804b810 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 804b810:	b580      	push	{r7, lr}
 804b812:	b082      	sub	sp, #8
 804b814:	af00      	add	r7, sp, #0
 804b816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 804b818:	687b      	ldr	r3, [r7, #4]
 804b81a:	2b00      	cmp	r3, #0
 804b81c:	d107      	bne.n	804b82e <netif_set_link_up+0x1e>
 804b81e:	4b13      	ldr	r3, [pc, #76]	; (804b86c <netif_set_link_up+0x5c>)
 804b820:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 804b824:	4912      	ldr	r1, [pc, #72]	; (804b870 <netif_set_link_up+0x60>)
 804b826:	4813      	ldr	r0, [pc, #76]	; (804b874 <netif_set_link_up+0x64>)
 804b828:	f009 f80a 	bl	8054840 <iprintf>
 804b82c:	e01b      	b.n	804b866 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 804b82e:	687b      	ldr	r3, [r7, #4]
 804b830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b834:	f003 0304 	and.w	r3, r3, #4
 804b838:	2b00      	cmp	r3, #0
 804b83a:	d114      	bne.n	804b866 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 804b83c:	687b      	ldr	r3, [r7, #4]
 804b83e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b842:	f043 0304 	orr.w	r3, r3, #4
 804b846:	b2da      	uxtb	r2, r3
 804b848:	687b      	ldr	r3, [r7, #4]
 804b84a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 804b84e:	2103      	movs	r1, #3
 804b850:	6878      	ldr	r0, [r7, #4]
 804b852:	f7ff ff6b 	bl	804b72c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 804b856:	687b      	ldr	r3, [r7, #4]
 804b858:	69db      	ldr	r3, [r3, #28]
 804b85a:	2b00      	cmp	r3, #0
 804b85c:	d003      	beq.n	804b866 <netif_set_link_up+0x56>
 804b85e:	687b      	ldr	r3, [r7, #4]
 804b860:	69db      	ldr	r3, [r3, #28]
 804b862:	6878      	ldr	r0, [r7, #4]
 804b864:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 804b866:	3708      	adds	r7, #8
 804b868:	46bd      	mov	sp, r7
 804b86a:	bd80      	pop	{r7, pc}
 804b86c:	08055df8 	.word	0x08055df8
 804b870:	08055fe0 	.word	0x08055fe0
 804b874:	08055e48 	.word	0x08055e48

0804b878 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 804b878:	b580      	push	{r7, lr}
 804b87a:	b082      	sub	sp, #8
 804b87c:	af00      	add	r7, sp, #0
 804b87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 804b880:	687b      	ldr	r3, [r7, #4]
 804b882:	2b00      	cmp	r3, #0
 804b884:	d107      	bne.n	804b896 <netif_set_link_down+0x1e>
 804b886:	4b11      	ldr	r3, [pc, #68]	; (804b8cc <netif_set_link_down+0x54>)
 804b888:	f240 4206 	movw	r2, #1030	; 0x406
 804b88c:	4910      	ldr	r1, [pc, #64]	; (804b8d0 <netif_set_link_down+0x58>)
 804b88e:	4811      	ldr	r0, [pc, #68]	; (804b8d4 <netif_set_link_down+0x5c>)
 804b890:	f008 ffd6 	bl	8054840 <iprintf>
 804b894:	e017      	b.n	804b8c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 804b896:	687b      	ldr	r3, [r7, #4]
 804b898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b89c:	f003 0304 	and.w	r3, r3, #4
 804b8a0:	2b00      	cmp	r3, #0
 804b8a2:	d010      	beq.n	804b8c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 804b8a4:	687b      	ldr	r3, [r7, #4]
 804b8a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804b8aa:	f023 0304 	bic.w	r3, r3, #4
 804b8ae:	b2da      	uxtb	r2, r3
 804b8b0:	687b      	ldr	r3, [r7, #4]
 804b8b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 804b8b6:	687b      	ldr	r3, [r7, #4]
 804b8b8:	69db      	ldr	r3, [r3, #28]
 804b8ba:	2b00      	cmp	r3, #0
 804b8bc:	d003      	beq.n	804b8c6 <netif_set_link_down+0x4e>
 804b8be:	687b      	ldr	r3, [r7, #4]
 804b8c0:	69db      	ldr	r3, [r3, #28]
 804b8c2:	6878      	ldr	r0, [r7, #4]
 804b8c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 804b8c6:	3708      	adds	r7, #8
 804b8c8:	46bd      	mov	sp, r7
 804b8ca:	bd80      	pop	{r7, pc}
 804b8cc:	08055df8 	.word	0x08055df8
 804b8d0:	08056004 	.word	0x08056004
 804b8d4:	08055e48 	.word	0x08055e48

0804b8d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 804b8d8:	b480      	push	{r7}
 804b8da:	b083      	sub	sp, #12
 804b8dc:	af00      	add	r7, sp, #0
 804b8de:	6078      	str	r0, [r7, #4]
 804b8e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 804b8e2:	687b      	ldr	r3, [r7, #4]
 804b8e4:	2b00      	cmp	r3, #0
 804b8e6:	d002      	beq.n	804b8ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 804b8e8:	687b      	ldr	r3, [r7, #4]
 804b8ea:	683a      	ldr	r2, [r7, #0]
 804b8ec:	61da      	str	r2, [r3, #28]
  }
}
 804b8ee:	bf00      	nop
 804b8f0:	370c      	adds	r7, #12
 804b8f2:	46bd      	mov	sp, r7
 804b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b8f8:	4770      	bx	lr

0804b8fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 804b8fa:	b480      	push	{r7}
 804b8fc:	b085      	sub	sp, #20
 804b8fe:	af00      	add	r7, sp, #0
 804b900:	60f8      	str	r0, [r7, #12]
 804b902:	60b9      	str	r1, [r7, #8]
 804b904:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 804b906:	f06f 030b 	mvn.w	r3, #11
}
 804b90a:	4618      	mov	r0, r3
 804b90c:	3714      	adds	r7, #20
 804b90e:	46bd      	mov	sp, r7
 804b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b914:	4770      	bx	lr
	...

0804b918 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 804b918:	b480      	push	{r7}
 804b91a:	b085      	sub	sp, #20
 804b91c:	af00      	add	r7, sp, #0
 804b91e:	4603      	mov	r3, r0
 804b920:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 804b922:	79fb      	ldrb	r3, [r7, #7]
 804b924:	2b00      	cmp	r3, #0
 804b926:	d013      	beq.n	804b950 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 804b928:	4b0d      	ldr	r3, [pc, #52]	; (804b960 <netif_get_by_index+0x48>)
 804b92a:	681b      	ldr	r3, [r3, #0]
 804b92c:	60fb      	str	r3, [r7, #12]
 804b92e:	e00c      	b.n	804b94a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 804b930:	68fb      	ldr	r3, [r7, #12]
 804b932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804b936:	3301      	adds	r3, #1
 804b938:	b2db      	uxtb	r3, r3
 804b93a:	79fa      	ldrb	r2, [r7, #7]
 804b93c:	429a      	cmp	r2, r3
 804b93e:	d101      	bne.n	804b944 <netif_get_by_index+0x2c>
        return netif; /* found! */
 804b940:	68fb      	ldr	r3, [r7, #12]
 804b942:	e006      	b.n	804b952 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 804b944:	68fb      	ldr	r3, [r7, #12]
 804b946:	681b      	ldr	r3, [r3, #0]
 804b948:	60fb      	str	r3, [r7, #12]
 804b94a:	68fb      	ldr	r3, [r7, #12]
 804b94c:	2b00      	cmp	r3, #0
 804b94e:	d1ef      	bne.n	804b930 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 804b950:	2300      	movs	r3, #0
}
 804b952:	4618      	mov	r0, r3
 804b954:	3714      	adds	r7, #20
 804b956:	46bd      	mov	sp, r7
 804b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b95c:	4770      	bx	lr
 804b95e:	bf00      	nop
 804b960:	200237c0 	.word	0x200237c0

0804b964 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 804b964:	b580      	push	{r7, lr}
 804b966:	b082      	sub	sp, #8
 804b968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 804b96a:	f008 fe4b 	bl	8054604 <sys_arch_protect>
 804b96e:	6038      	str	r0, [r7, #0]
 804b970:	4b0d      	ldr	r3, [pc, #52]	; (804b9a8 <pbuf_free_ooseq+0x44>)
 804b972:	2200      	movs	r2, #0
 804b974:	701a      	strb	r2, [r3, #0]
 804b976:	6838      	ldr	r0, [r7, #0]
 804b978:	f008 fe52 	bl	8054620 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 804b97c:	4b0b      	ldr	r3, [pc, #44]	; (804b9ac <pbuf_free_ooseq+0x48>)
 804b97e:	681b      	ldr	r3, [r3, #0]
 804b980:	607b      	str	r3, [r7, #4]
 804b982:	e00a      	b.n	804b99a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 804b984:	687b      	ldr	r3, [r7, #4]
 804b986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804b988:	2b00      	cmp	r3, #0
 804b98a:	d003      	beq.n	804b994 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 804b98c:	6878      	ldr	r0, [r7, #4]
 804b98e:	f002 f971 	bl	804dc74 <tcp_free_ooseq>
      return;
 804b992:	e005      	b.n	804b9a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 804b994:	687b      	ldr	r3, [r7, #4]
 804b996:	68db      	ldr	r3, [r3, #12]
 804b998:	607b      	str	r3, [r7, #4]
 804b99a:	687b      	ldr	r3, [r7, #4]
 804b99c:	2b00      	cmp	r3, #0
 804b99e:	d1f1      	bne.n	804b984 <pbuf_free_ooseq+0x20>
    }
  }
}
 804b9a0:	3708      	adds	r7, #8
 804b9a2:	46bd      	mov	sp, r7
 804b9a4:	bd80      	pop	{r7, pc}
 804b9a6:	bf00      	nop
 804b9a8:	200237c9 	.word	0x200237c9
 804b9ac:	200237d8 	.word	0x200237d8

0804b9b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 804b9b0:	b580      	push	{r7, lr}
 804b9b2:	b082      	sub	sp, #8
 804b9b4:	af00      	add	r7, sp, #0
 804b9b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 804b9b8:	f7ff ffd4 	bl	804b964 <pbuf_free_ooseq>
}
 804b9bc:	bf00      	nop
 804b9be:	3708      	adds	r7, #8
 804b9c0:	46bd      	mov	sp, r7
 804b9c2:	bd80      	pop	{r7, pc}

0804b9c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 804b9c4:	b580      	push	{r7, lr}
 804b9c6:	b082      	sub	sp, #8
 804b9c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 804b9ca:	f008 fe1b 	bl	8054604 <sys_arch_protect>
 804b9ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 804b9d0:	4b0f      	ldr	r3, [pc, #60]	; (804ba10 <pbuf_pool_is_empty+0x4c>)
 804b9d2:	781b      	ldrb	r3, [r3, #0]
 804b9d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 804b9d6:	4b0e      	ldr	r3, [pc, #56]	; (804ba10 <pbuf_pool_is_empty+0x4c>)
 804b9d8:	2201      	movs	r2, #1
 804b9da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 804b9dc:	6878      	ldr	r0, [r7, #4]
 804b9de:	f008 fe1f 	bl	8054620 <sys_arch_unprotect>

  if (!queued) {
 804b9e2:	78fb      	ldrb	r3, [r7, #3]
 804b9e4:	2b00      	cmp	r3, #0
 804b9e6:	d10f      	bne.n	804ba08 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 804b9e8:	2100      	movs	r1, #0
 804b9ea:	480a      	ldr	r0, [pc, #40]	; (804ba14 <pbuf_pool_is_empty+0x50>)
 804b9ec:	f7fe fea6 	bl	804a73c <tcpip_try_callback>
 804b9f0:	4603      	mov	r3, r0
 804b9f2:	2b00      	cmp	r3, #0
 804b9f4:	d008      	beq.n	804ba08 <pbuf_pool_is_empty+0x44>
 804b9f6:	f008 fe05 	bl	8054604 <sys_arch_protect>
 804b9fa:	6078      	str	r0, [r7, #4]
 804b9fc:	4b04      	ldr	r3, [pc, #16]	; (804ba10 <pbuf_pool_is_empty+0x4c>)
 804b9fe:	2200      	movs	r2, #0
 804ba00:	701a      	strb	r2, [r3, #0]
 804ba02:	6878      	ldr	r0, [r7, #4]
 804ba04:	f008 fe0c 	bl	8054620 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 804ba08:	bf00      	nop
 804ba0a:	3708      	adds	r7, #8
 804ba0c:	46bd      	mov	sp, r7
 804ba0e:	bd80      	pop	{r7, pc}
 804ba10:	200237c9 	.word	0x200237c9
 804ba14:	0804b9b1 	.word	0x0804b9b1

0804ba18 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 804ba18:	b480      	push	{r7}
 804ba1a:	b085      	sub	sp, #20
 804ba1c:	af00      	add	r7, sp, #0
 804ba1e:	60f8      	str	r0, [r7, #12]
 804ba20:	60b9      	str	r1, [r7, #8]
 804ba22:	4611      	mov	r1, r2
 804ba24:	461a      	mov	r2, r3
 804ba26:	460b      	mov	r3, r1
 804ba28:	80fb      	strh	r3, [r7, #6]
 804ba2a:	4613      	mov	r3, r2
 804ba2c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 804ba2e:	68fb      	ldr	r3, [r7, #12]
 804ba30:	2200      	movs	r2, #0
 804ba32:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 804ba34:	68fb      	ldr	r3, [r7, #12]
 804ba36:	68ba      	ldr	r2, [r7, #8]
 804ba38:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 804ba3a:	68fb      	ldr	r3, [r7, #12]
 804ba3c:	88fa      	ldrh	r2, [r7, #6]
 804ba3e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 804ba40:	68fb      	ldr	r3, [r7, #12]
 804ba42:	88ba      	ldrh	r2, [r7, #4]
 804ba44:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 804ba46:	8b3b      	ldrh	r3, [r7, #24]
 804ba48:	b2da      	uxtb	r2, r3
 804ba4a:	68fb      	ldr	r3, [r7, #12]
 804ba4c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 804ba4e:	68fb      	ldr	r3, [r7, #12]
 804ba50:	7f3a      	ldrb	r2, [r7, #28]
 804ba52:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 804ba54:	68fb      	ldr	r3, [r7, #12]
 804ba56:	2201      	movs	r2, #1
 804ba58:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 804ba5a:	68fb      	ldr	r3, [r7, #12]
 804ba5c:	2200      	movs	r2, #0
 804ba5e:	73da      	strb	r2, [r3, #15]
}
 804ba60:	bf00      	nop
 804ba62:	3714      	adds	r7, #20
 804ba64:	46bd      	mov	sp, r7
 804ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba6a:	4770      	bx	lr

0804ba6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 804ba6c:	b580      	push	{r7, lr}
 804ba6e:	b08c      	sub	sp, #48	; 0x30
 804ba70:	af02      	add	r7, sp, #8
 804ba72:	4603      	mov	r3, r0
 804ba74:	71fb      	strb	r3, [r7, #7]
 804ba76:	460b      	mov	r3, r1
 804ba78:	80bb      	strh	r3, [r7, #4]
 804ba7a:	4613      	mov	r3, r2
 804ba7c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 804ba7e:	79fb      	ldrb	r3, [r7, #7]
 804ba80:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 804ba82:	887b      	ldrh	r3, [r7, #2]
 804ba84:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 804ba88:	d07f      	beq.n	804bb8a <pbuf_alloc+0x11e>
 804ba8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 804ba8e:	f300 80c8 	bgt.w	804bc22 <pbuf_alloc+0x1b6>
 804ba92:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 804ba96:	d010      	beq.n	804baba <pbuf_alloc+0x4e>
 804ba98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 804ba9c:	f300 80c1 	bgt.w	804bc22 <pbuf_alloc+0x1b6>
 804baa0:	2b01      	cmp	r3, #1
 804baa2:	d002      	beq.n	804baaa <pbuf_alloc+0x3e>
 804baa4:	2b41      	cmp	r3, #65	; 0x41
 804baa6:	f040 80bc 	bne.w	804bc22 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 804baaa:	887a      	ldrh	r2, [r7, #2]
 804baac:	88bb      	ldrh	r3, [r7, #4]
 804baae:	4619      	mov	r1, r3
 804bab0:	2000      	movs	r0, #0
 804bab2:	f000 f8d1 	bl	804bc58 <pbuf_alloc_reference>
 804bab6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 804bab8:	e0bd      	b.n	804bc36 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 804baba:	2300      	movs	r3, #0
 804babc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 804babe:	2300      	movs	r3, #0
 804bac0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 804bac2:	88bb      	ldrh	r3, [r7, #4]
 804bac4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 804bac6:	200c      	movs	r0, #12
 804bac8:	f7ff fb9a 	bl	804b200 <memp_malloc>
 804bacc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 804bace:	693b      	ldr	r3, [r7, #16]
 804bad0:	2b00      	cmp	r3, #0
 804bad2:	d109      	bne.n	804bae8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 804bad4:	f7ff ff76 	bl	804b9c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 804bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bada:	2b00      	cmp	r3, #0
 804badc:	d002      	beq.n	804bae4 <pbuf_alloc+0x78>
            pbuf_free(p);
 804bade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 804bae0:	f000 faa8 	bl	804c034 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 804bae4:	2300      	movs	r3, #0
 804bae6:	e0a7      	b.n	804bc38 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 804bae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804baea:	3303      	adds	r3, #3
 804baec:	b29b      	uxth	r3, r3
 804baee:	f023 0303 	bic.w	r3, r3, #3
 804baf2:	b29b      	uxth	r3, r3
 804baf4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 804baf8:	b29b      	uxth	r3, r3
 804bafa:	8b7a      	ldrh	r2, [r7, #26]
 804bafc:	4293      	cmp	r3, r2
 804bafe:	bf28      	it	cs
 804bb00:	4613      	movcs	r3, r2
 804bb02:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 804bb04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804bb06:	3310      	adds	r3, #16
 804bb08:	693a      	ldr	r2, [r7, #16]
 804bb0a:	4413      	add	r3, r2
 804bb0c:	3303      	adds	r3, #3
 804bb0e:	f023 0303 	bic.w	r3, r3, #3
 804bb12:	4618      	mov	r0, r3
 804bb14:	89f9      	ldrh	r1, [r7, #14]
 804bb16:	8b7a      	ldrh	r2, [r7, #26]
 804bb18:	2300      	movs	r3, #0
 804bb1a:	9301      	str	r3, [sp, #4]
 804bb1c:	887b      	ldrh	r3, [r7, #2]
 804bb1e:	9300      	str	r3, [sp, #0]
 804bb20:	460b      	mov	r3, r1
 804bb22:	4601      	mov	r1, r0
 804bb24:	6938      	ldr	r0, [r7, #16]
 804bb26:	f7ff ff77 	bl	804ba18 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 804bb2a:	693b      	ldr	r3, [r7, #16]
 804bb2c:	685b      	ldr	r3, [r3, #4]
 804bb2e:	f003 0303 	and.w	r3, r3, #3
 804bb32:	2b00      	cmp	r3, #0
 804bb34:	d006      	beq.n	804bb44 <pbuf_alloc+0xd8>
 804bb36:	4b42      	ldr	r3, [pc, #264]	; (804bc40 <pbuf_alloc+0x1d4>)
 804bb38:	f44f 7280 	mov.w	r2, #256	; 0x100
 804bb3c:	4941      	ldr	r1, [pc, #260]	; (804bc44 <pbuf_alloc+0x1d8>)
 804bb3e:	4842      	ldr	r0, [pc, #264]	; (804bc48 <pbuf_alloc+0x1dc>)
 804bb40:	f008 fe7e 	bl	8054840 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 804bb44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804bb46:	3303      	adds	r3, #3
 804bb48:	f023 0303 	bic.w	r3, r3, #3
 804bb4c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 804bb50:	d106      	bne.n	804bb60 <pbuf_alloc+0xf4>
 804bb52:	4b3b      	ldr	r3, [pc, #236]	; (804bc40 <pbuf_alloc+0x1d4>)
 804bb54:	f44f 7281 	mov.w	r2, #258	; 0x102
 804bb58:	493c      	ldr	r1, [pc, #240]	; (804bc4c <pbuf_alloc+0x1e0>)
 804bb5a:	483b      	ldr	r0, [pc, #236]	; (804bc48 <pbuf_alloc+0x1dc>)
 804bb5c:	f008 fe70 	bl	8054840 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 804bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bb62:	2b00      	cmp	r3, #0
 804bb64:	d102      	bne.n	804bb6c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 804bb66:	693b      	ldr	r3, [r7, #16]
 804bb68:	627b      	str	r3, [r7, #36]	; 0x24
 804bb6a:	e002      	b.n	804bb72 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 804bb6c:	69fb      	ldr	r3, [r7, #28]
 804bb6e:	693a      	ldr	r2, [r7, #16]
 804bb70:	601a      	str	r2, [r3, #0]
        }
        last = q;
 804bb72:	693b      	ldr	r3, [r7, #16]
 804bb74:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 804bb76:	8b7a      	ldrh	r2, [r7, #26]
 804bb78:	89fb      	ldrh	r3, [r7, #14]
 804bb7a:	1ad3      	subs	r3, r2, r3
 804bb7c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 804bb7e:	2300      	movs	r3, #0
 804bb80:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 804bb82:	8b7b      	ldrh	r3, [r7, #26]
 804bb84:	2b00      	cmp	r3, #0
 804bb86:	d19e      	bne.n	804bac6 <pbuf_alloc+0x5a>
      break;
 804bb88:	e055      	b.n	804bc36 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 804bb8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804bb8c:	3303      	adds	r3, #3
 804bb8e:	b29b      	uxth	r3, r3
 804bb90:	f023 0303 	bic.w	r3, r3, #3
 804bb94:	b29a      	uxth	r2, r3
 804bb96:	88bb      	ldrh	r3, [r7, #4]
 804bb98:	3303      	adds	r3, #3
 804bb9a:	b29b      	uxth	r3, r3
 804bb9c:	f023 0303 	bic.w	r3, r3, #3
 804bba0:	b29b      	uxth	r3, r3
 804bba2:	4413      	add	r3, r2
 804bba4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 804bba6:	8b3b      	ldrh	r3, [r7, #24]
 804bba8:	3310      	adds	r3, #16
 804bbaa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 804bbac:	8b3a      	ldrh	r2, [r7, #24]
 804bbae:	88bb      	ldrh	r3, [r7, #4]
 804bbb0:	3303      	adds	r3, #3
 804bbb2:	f023 0303 	bic.w	r3, r3, #3
 804bbb6:	429a      	cmp	r2, r3
 804bbb8:	d306      	bcc.n	804bbc8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 804bbba:	8afa      	ldrh	r2, [r7, #22]
 804bbbc:	88bb      	ldrh	r3, [r7, #4]
 804bbbe:	3303      	adds	r3, #3
 804bbc0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 804bbc4:	429a      	cmp	r2, r3
 804bbc6:	d201      	bcs.n	804bbcc <pbuf_alloc+0x160>
        return NULL;
 804bbc8:	2300      	movs	r3, #0
 804bbca:	e035      	b.n	804bc38 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 804bbcc:	8afb      	ldrh	r3, [r7, #22]
 804bbce:	4618      	mov	r0, r3
 804bbd0:	f7ff f972 	bl	804aeb8 <mem_malloc>
 804bbd4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 804bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bbd8:	2b00      	cmp	r3, #0
 804bbda:	d101      	bne.n	804bbe0 <pbuf_alloc+0x174>
        return NULL;
 804bbdc:	2300      	movs	r3, #0
 804bbde:	e02b      	b.n	804bc38 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 804bbe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804bbe2:	3310      	adds	r3, #16
 804bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804bbe6:	4413      	add	r3, r2
 804bbe8:	3303      	adds	r3, #3
 804bbea:	f023 0303 	bic.w	r3, r3, #3
 804bbee:	4618      	mov	r0, r3
 804bbf0:	88b9      	ldrh	r1, [r7, #4]
 804bbf2:	88ba      	ldrh	r2, [r7, #4]
 804bbf4:	2300      	movs	r3, #0
 804bbf6:	9301      	str	r3, [sp, #4]
 804bbf8:	887b      	ldrh	r3, [r7, #2]
 804bbfa:	9300      	str	r3, [sp, #0]
 804bbfc:	460b      	mov	r3, r1
 804bbfe:	4601      	mov	r1, r0
 804bc00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 804bc02:	f7ff ff09 	bl	804ba18 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 804bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804bc08:	685b      	ldr	r3, [r3, #4]
 804bc0a:	f003 0303 	and.w	r3, r3, #3
 804bc0e:	2b00      	cmp	r3, #0
 804bc10:	d010      	beq.n	804bc34 <pbuf_alloc+0x1c8>
 804bc12:	4b0b      	ldr	r3, [pc, #44]	; (804bc40 <pbuf_alloc+0x1d4>)
 804bc14:	f44f 7291 	mov.w	r2, #290	; 0x122
 804bc18:	490d      	ldr	r1, [pc, #52]	; (804bc50 <pbuf_alloc+0x1e4>)
 804bc1a:	480b      	ldr	r0, [pc, #44]	; (804bc48 <pbuf_alloc+0x1dc>)
 804bc1c:	f008 fe10 	bl	8054840 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 804bc20:	e008      	b.n	804bc34 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 804bc22:	4b07      	ldr	r3, [pc, #28]	; (804bc40 <pbuf_alloc+0x1d4>)
 804bc24:	f240 1227 	movw	r2, #295	; 0x127
 804bc28:	490a      	ldr	r1, [pc, #40]	; (804bc54 <pbuf_alloc+0x1e8>)
 804bc2a:	4807      	ldr	r0, [pc, #28]	; (804bc48 <pbuf_alloc+0x1dc>)
 804bc2c:	f008 fe08 	bl	8054840 <iprintf>
      return NULL;
 804bc30:	2300      	movs	r3, #0
 804bc32:	e001      	b.n	804bc38 <pbuf_alloc+0x1cc>
      break;
 804bc34:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 804bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 804bc38:	4618      	mov	r0, r3
 804bc3a:	3728      	adds	r7, #40	; 0x28
 804bc3c:	46bd      	mov	sp, r7
 804bc3e:	bd80      	pop	{r7, pc}
 804bc40:	08056028 	.word	0x08056028
 804bc44:	08056058 	.word	0x08056058
 804bc48:	08056088 	.word	0x08056088
 804bc4c:	080560b0 	.word	0x080560b0
 804bc50:	080560e4 	.word	0x080560e4
 804bc54:	08056110 	.word	0x08056110

0804bc58 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 804bc58:	b580      	push	{r7, lr}
 804bc5a:	b086      	sub	sp, #24
 804bc5c:	af02      	add	r7, sp, #8
 804bc5e:	6078      	str	r0, [r7, #4]
 804bc60:	460b      	mov	r3, r1
 804bc62:	807b      	strh	r3, [r7, #2]
 804bc64:	4613      	mov	r3, r2
 804bc66:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 804bc68:	883b      	ldrh	r3, [r7, #0]
 804bc6a:	2b41      	cmp	r3, #65	; 0x41
 804bc6c:	d009      	beq.n	804bc82 <pbuf_alloc_reference+0x2a>
 804bc6e:	883b      	ldrh	r3, [r7, #0]
 804bc70:	2b01      	cmp	r3, #1
 804bc72:	d006      	beq.n	804bc82 <pbuf_alloc_reference+0x2a>
 804bc74:	4b0f      	ldr	r3, [pc, #60]	; (804bcb4 <pbuf_alloc_reference+0x5c>)
 804bc76:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 804bc7a:	490f      	ldr	r1, [pc, #60]	; (804bcb8 <pbuf_alloc_reference+0x60>)
 804bc7c:	480f      	ldr	r0, [pc, #60]	; (804bcbc <pbuf_alloc_reference+0x64>)
 804bc7e:	f008 fddf 	bl	8054840 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 804bc82:	200b      	movs	r0, #11
 804bc84:	f7ff fabc 	bl	804b200 <memp_malloc>
 804bc88:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 804bc8a:	68fb      	ldr	r3, [r7, #12]
 804bc8c:	2b00      	cmp	r3, #0
 804bc8e:	d101      	bne.n	804bc94 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 804bc90:	2300      	movs	r3, #0
 804bc92:	e00b      	b.n	804bcac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 804bc94:	8879      	ldrh	r1, [r7, #2]
 804bc96:	887a      	ldrh	r2, [r7, #2]
 804bc98:	2300      	movs	r3, #0
 804bc9a:	9301      	str	r3, [sp, #4]
 804bc9c:	883b      	ldrh	r3, [r7, #0]
 804bc9e:	9300      	str	r3, [sp, #0]
 804bca0:	460b      	mov	r3, r1
 804bca2:	6879      	ldr	r1, [r7, #4]
 804bca4:	68f8      	ldr	r0, [r7, #12]
 804bca6:	f7ff feb7 	bl	804ba18 <pbuf_init_alloced_pbuf>
  return p;
 804bcaa:	68fb      	ldr	r3, [r7, #12]
}
 804bcac:	4618      	mov	r0, r3
 804bcae:	3710      	adds	r7, #16
 804bcb0:	46bd      	mov	sp, r7
 804bcb2:	bd80      	pop	{r7, pc}
 804bcb4:	08056028 	.word	0x08056028
 804bcb8:	0805612c 	.word	0x0805612c
 804bcbc:	08056088 	.word	0x08056088

0804bcc0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 804bcc0:	b580      	push	{r7, lr}
 804bcc2:	b088      	sub	sp, #32
 804bcc4:	af02      	add	r7, sp, #8
 804bcc6:	607b      	str	r3, [r7, #4]
 804bcc8:	4603      	mov	r3, r0
 804bcca:	73fb      	strb	r3, [r7, #15]
 804bccc:	460b      	mov	r3, r1
 804bcce:	81bb      	strh	r3, [r7, #12]
 804bcd0:	4613      	mov	r3, r2
 804bcd2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 804bcd4:	7bfb      	ldrb	r3, [r7, #15]
 804bcd6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 804bcd8:	8a7b      	ldrh	r3, [r7, #18]
 804bcda:	3303      	adds	r3, #3
 804bcdc:	f023 0203 	bic.w	r2, r3, #3
 804bce0:	89bb      	ldrh	r3, [r7, #12]
 804bce2:	441a      	add	r2, r3
 804bce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804bce6:	429a      	cmp	r2, r3
 804bce8:	d901      	bls.n	804bcee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 804bcea:	2300      	movs	r3, #0
 804bcec:	e018      	b.n	804bd20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 804bcee:	6a3b      	ldr	r3, [r7, #32]
 804bcf0:	2b00      	cmp	r3, #0
 804bcf2:	d007      	beq.n	804bd04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 804bcf4:	8a7b      	ldrh	r3, [r7, #18]
 804bcf6:	3303      	adds	r3, #3
 804bcf8:	f023 0303 	bic.w	r3, r3, #3
 804bcfc:	6a3a      	ldr	r2, [r7, #32]
 804bcfe:	4413      	add	r3, r2
 804bd00:	617b      	str	r3, [r7, #20]
 804bd02:	e001      	b.n	804bd08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 804bd04:	2300      	movs	r3, #0
 804bd06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 804bd08:	6878      	ldr	r0, [r7, #4]
 804bd0a:	89b9      	ldrh	r1, [r7, #12]
 804bd0c:	89ba      	ldrh	r2, [r7, #12]
 804bd0e:	2302      	movs	r3, #2
 804bd10:	9301      	str	r3, [sp, #4]
 804bd12:	897b      	ldrh	r3, [r7, #10]
 804bd14:	9300      	str	r3, [sp, #0]
 804bd16:	460b      	mov	r3, r1
 804bd18:	6979      	ldr	r1, [r7, #20]
 804bd1a:	f7ff fe7d 	bl	804ba18 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 804bd1e:	687b      	ldr	r3, [r7, #4]
}
 804bd20:	4618      	mov	r0, r3
 804bd22:	3718      	adds	r7, #24
 804bd24:	46bd      	mov	sp, r7
 804bd26:	bd80      	pop	{r7, pc}

0804bd28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 804bd28:	b580      	push	{r7, lr}
 804bd2a:	b084      	sub	sp, #16
 804bd2c:	af00      	add	r7, sp, #0
 804bd2e:	6078      	str	r0, [r7, #4]
 804bd30:	460b      	mov	r3, r1
 804bd32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 804bd34:	687b      	ldr	r3, [r7, #4]
 804bd36:	2b00      	cmp	r3, #0
 804bd38:	d106      	bne.n	804bd48 <pbuf_realloc+0x20>
 804bd3a:	4b3a      	ldr	r3, [pc, #232]	; (804be24 <pbuf_realloc+0xfc>)
 804bd3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 804bd40:	4939      	ldr	r1, [pc, #228]	; (804be28 <pbuf_realloc+0x100>)
 804bd42:	483a      	ldr	r0, [pc, #232]	; (804be2c <pbuf_realloc+0x104>)
 804bd44:	f008 fd7c 	bl	8054840 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 804bd48:	687b      	ldr	r3, [r7, #4]
 804bd4a:	891b      	ldrh	r3, [r3, #8]
 804bd4c:	887a      	ldrh	r2, [r7, #2]
 804bd4e:	429a      	cmp	r2, r3
 804bd50:	d263      	bcs.n	804be1a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 804bd52:	687b      	ldr	r3, [r7, #4]
 804bd54:	891a      	ldrh	r2, [r3, #8]
 804bd56:	887b      	ldrh	r3, [r7, #2]
 804bd58:	1ad3      	subs	r3, r2, r3
 804bd5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 804bd5c:	887b      	ldrh	r3, [r7, #2]
 804bd5e:	817b      	strh	r3, [r7, #10]
  q = p;
 804bd60:	687b      	ldr	r3, [r7, #4]
 804bd62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 804bd64:	e018      	b.n	804bd98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 804bd66:	68fb      	ldr	r3, [r7, #12]
 804bd68:	895b      	ldrh	r3, [r3, #10]
 804bd6a:	897a      	ldrh	r2, [r7, #10]
 804bd6c:	1ad3      	subs	r3, r2, r3
 804bd6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 804bd70:	68fb      	ldr	r3, [r7, #12]
 804bd72:	891a      	ldrh	r2, [r3, #8]
 804bd74:	893b      	ldrh	r3, [r7, #8]
 804bd76:	1ad3      	subs	r3, r2, r3
 804bd78:	b29a      	uxth	r2, r3
 804bd7a:	68fb      	ldr	r3, [r7, #12]
 804bd7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 804bd7e:	68fb      	ldr	r3, [r7, #12]
 804bd80:	681b      	ldr	r3, [r3, #0]
 804bd82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 804bd84:	68fb      	ldr	r3, [r7, #12]
 804bd86:	2b00      	cmp	r3, #0
 804bd88:	d106      	bne.n	804bd98 <pbuf_realloc+0x70>
 804bd8a:	4b26      	ldr	r3, [pc, #152]	; (804be24 <pbuf_realloc+0xfc>)
 804bd8c:	f240 12af 	movw	r2, #431	; 0x1af
 804bd90:	4927      	ldr	r1, [pc, #156]	; (804be30 <pbuf_realloc+0x108>)
 804bd92:	4826      	ldr	r0, [pc, #152]	; (804be2c <pbuf_realloc+0x104>)
 804bd94:	f008 fd54 	bl	8054840 <iprintf>
  while (rem_len > q->len) {
 804bd98:	68fb      	ldr	r3, [r7, #12]
 804bd9a:	895b      	ldrh	r3, [r3, #10]
 804bd9c:	897a      	ldrh	r2, [r7, #10]
 804bd9e:	429a      	cmp	r2, r3
 804bda0:	d8e1      	bhi.n	804bd66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 804bda2:	68fb      	ldr	r3, [r7, #12]
 804bda4:	7b1b      	ldrb	r3, [r3, #12]
 804bda6:	f003 030f 	and.w	r3, r3, #15
 804bdaa:	2b00      	cmp	r3, #0
 804bdac:	d121      	bne.n	804bdf2 <pbuf_realloc+0xca>
 804bdae:	68fb      	ldr	r3, [r7, #12]
 804bdb0:	895b      	ldrh	r3, [r3, #10]
 804bdb2:	897a      	ldrh	r2, [r7, #10]
 804bdb4:	429a      	cmp	r2, r3
 804bdb6:	d01c      	beq.n	804bdf2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 804bdb8:	68fb      	ldr	r3, [r7, #12]
 804bdba:	7b5b      	ldrb	r3, [r3, #13]
 804bdbc:	f003 0302 	and.w	r3, r3, #2
 804bdc0:	2b00      	cmp	r3, #0
 804bdc2:	d116      	bne.n	804bdf2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 804bdc4:	68fb      	ldr	r3, [r7, #12]
 804bdc6:	685a      	ldr	r2, [r3, #4]
 804bdc8:	68fb      	ldr	r3, [r7, #12]
 804bdca:	1ad3      	subs	r3, r2, r3
 804bdcc:	b29a      	uxth	r2, r3
 804bdce:	897b      	ldrh	r3, [r7, #10]
 804bdd0:	4413      	add	r3, r2
 804bdd2:	b29b      	uxth	r3, r3
 804bdd4:	4619      	mov	r1, r3
 804bdd6:	68f8      	ldr	r0, [r7, #12]
 804bdd8:	f7fe ff64 	bl	804aca4 <mem_trim>
 804bddc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 804bdde:	68fb      	ldr	r3, [r7, #12]
 804bde0:	2b00      	cmp	r3, #0
 804bde2:	d106      	bne.n	804bdf2 <pbuf_realloc+0xca>
 804bde4:	4b0f      	ldr	r3, [pc, #60]	; (804be24 <pbuf_realloc+0xfc>)
 804bde6:	f240 12bd 	movw	r2, #445	; 0x1bd
 804bdea:	4912      	ldr	r1, [pc, #72]	; (804be34 <pbuf_realloc+0x10c>)
 804bdec:	480f      	ldr	r0, [pc, #60]	; (804be2c <pbuf_realloc+0x104>)
 804bdee:	f008 fd27 	bl	8054840 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 804bdf2:	68fb      	ldr	r3, [r7, #12]
 804bdf4:	897a      	ldrh	r2, [r7, #10]
 804bdf6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 804bdf8:	68fb      	ldr	r3, [r7, #12]
 804bdfa:	895a      	ldrh	r2, [r3, #10]
 804bdfc:	68fb      	ldr	r3, [r7, #12]
 804bdfe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 804be00:	68fb      	ldr	r3, [r7, #12]
 804be02:	681b      	ldr	r3, [r3, #0]
 804be04:	2b00      	cmp	r3, #0
 804be06:	d004      	beq.n	804be12 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 804be08:	68fb      	ldr	r3, [r7, #12]
 804be0a:	681b      	ldr	r3, [r3, #0]
 804be0c:	4618      	mov	r0, r3
 804be0e:	f000 f911 	bl	804c034 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 804be12:	68fb      	ldr	r3, [r7, #12]
 804be14:	2200      	movs	r2, #0
 804be16:	601a      	str	r2, [r3, #0]
 804be18:	e000      	b.n	804be1c <pbuf_realloc+0xf4>
    return;
 804be1a:	bf00      	nop

}
 804be1c:	3710      	adds	r7, #16
 804be1e:	46bd      	mov	sp, r7
 804be20:	bd80      	pop	{r7, pc}
 804be22:	bf00      	nop
 804be24:	08056028 	.word	0x08056028
 804be28:	08056140 	.word	0x08056140
 804be2c:	08056088 	.word	0x08056088
 804be30:	08056158 	.word	0x08056158
 804be34:	08056170 	.word	0x08056170

0804be38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 804be38:	b580      	push	{r7, lr}
 804be3a:	b086      	sub	sp, #24
 804be3c:	af00      	add	r7, sp, #0
 804be3e:	60f8      	str	r0, [r7, #12]
 804be40:	60b9      	str	r1, [r7, #8]
 804be42:	4613      	mov	r3, r2
 804be44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 804be46:	68fb      	ldr	r3, [r7, #12]
 804be48:	2b00      	cmp	r3, #0
 804be4a:	d106      	bne.n	804be5a <pbuf_add_header_impl+0x22>
 804be4c:	4b2b      	ldr	r3, [pc, #172]	; (804befc <pbuf_add_header_impl+0xc4>)
 804be4e:	f240 12df 	movw	r2, #479	; 0x1df
 804be52:	492b      	ldr	r1, [pc, #172]	; (804bf00 <pbuf_add_header_impl+0xc8>)
 804be54:	482b      	ldr	r0, [pc, #172]	; (804bf04 <pbuf_add_header_impl+0xcc>)
 804be56:	f008 fcf3 	bl	8054840 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 804be5a:	68fb      	ldr	r3, [r7, #12]
 804be5c:	2b00      	cmp	r3, #0
 804be5e:	d003      	beq.n	804be68 <pbuf_add_header_impl+0x30>
 804be60:	68bb      	ldr	r3, [r7, #8]
 804be62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804be66:	d301      	bcc.n	804be6c <pbuf_add_header_impl+0x34>
    return 1;
 804be68:	2301      	movs	r3, #1
 804be6a:	e043      	b.n	804bef4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 804be6c:	68bb      	ldr	r3, [r7, #8]
 804be6e:	2b00      	cmp	r3, #0
 804be70:	d101      	bne.n	804be76 <pbuf_add_header_impl+0x3e>
    return 0;
 804be72:	2300      	movs	r3, #0
 804be74:	e03e      	b.n	804bef4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 804be76:	68bb      	ldr	r3, [r7, #8]
 804be78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 804be7a:	68fb      	ldr	r3, [r7, #12]
 804be7c:	891a      	ldrh	r2, [r3, #8]
 804be7e:	8a7b      	ldrh	r3, [r7, #18]
 804be80:	4413      	add	r3, r2
 804be82:	b29b      	uxth	r3, r3
 804be84:	8a7a      	ldrh	r2, [r7, #18]
 804be86:	429a      	cmp	r2, r3
 804be88:	d901      	bls.n	804be8e <pbuf_add_header_impl+0x56>
    return 1;
 804be8a:	2301      	movs	r3, #1
 804be8c:	e032      	b.n	804bef4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 804be8e:	68fb      	ldr	r3, [r7, #12]
 804be90:	7b1b      	ldrb	r3, [r3, #12]
 804be92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 804be94:	8a3b      	ldrh	r3, [r7, #16]
 804be96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804be9a:	2b00      	cmp	r3, #0
 804be9c:	d00c      	beq.n	804beb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 804be9e:	68fb      	ldr	r3, [r7, #12]
 804bea0:	685a      	ldr	r2, [r3, #4]
 804bea2:	68bb      	ldr	r3, [r7, #8]
 804bea4:	425b      	negs	r3, r3
 804bea6:	4413      	add	r3, r2
 804bea8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 804beaa:	68fb      	ldr	r3, [r7, #12]
 804beac:	3310      	adds	r3, #16
 804beae:	697a      	ldr	r2, [r7, #20]
 804beb0:	429a      	cmp	r2, r3
 804beb2:	d20d      	bcs.n	804bed0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 804beb4:	2301      	movs	r3, #1
 804beb6:	e01d      	b.n	804bef4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 804beb8:	79fb      	ldrb	r3, [r7, #7]
 804beba:	2b00      	cmp	r3, #0
 804bebc:	d006      	beq.n	804becc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 804bebe:	68fb      	ldr	r3, [r7, #12]
 804bec0:	685a      	ldr	r2, [r3, #4]
 804bec2:	68bb      	ldr	r3, [r7, #8]
 804bec4:	425b      	negs	r3, r3
 804bec6:	4413      	add	r3, r2
 804bec8:	617b      	str	r3, [r7, #20]
 804beca:	e001      	b.n	804bed0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 804becc:	2301      	movs	r3, #1
 804bece:	e011      	b.n	804bef4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 804bed0:	68fb      	ldr	r3, [r7, #12]
 804bed2:	697a      	ldr	r2, [r7, #20]
 804bed4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 804bed6:	68fb      	ldr	r3, [r7, #12]
 804bed8:	895a      	ldrh	r2, [r3, #10]
 804beda:	8a7b      	ldrh	r3, [r7, #18]
 804bedc:	4413      	add	r3, r2
 804bede:	b29a      	uxth	r2, r3
 804bee0:	68fb      	ldr	r3, [r7, #12]
 804bee2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 804bee4:	68fb      	ldr	r3, [r7, #12]
 804bee6:	891a      	ldrh	r2, [r3, #8]
 804bee8:	8a7b      	ldrh	r3, [r7, #18]
 804beea:	4413      	add	r3, r2
 804beec:	b29a      	uxth	r2, r3
 804beee:	68fb      	ldr	r3, [r7, #12]
 804bef0:	811a      	strh	r2, [r3, #8]


  return 0;
 804bef2:	2300      	movs	r3, #0
}
 804bef4:	4618      	mov	r0, r3
 804bef6:	3718      	adds	r7, #24
 804bef8:	46bd      	mov	sp, r7
 804befa:	bd80      	pop	{r7, pc}
 804befc:	08056028 	.word	0x08056028
 804bf00:	0805618c 	.word	0x0805618c
 804bf04:	08056088 	.word	0x08056088

0804bf08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 804bf08:	b580      	push	{r7, lr}
 804bf0a:	b082      	sub	sp, #8
 804bf0c:	af00      	add	r7, sp, #0
 804bf0e:	6078      	str	r0, [r7, #4]
 804bf10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 804bf12:	2200      	movs	r2, #0
 804bf14:	6839      	ldr	r1, [r7, #0]
 804bf16:	6878      	ldr	r0, [r7, #4]
 804bf18:	f7ff ff8e 	bl	804be38 <pbuf_add_header_impl>
 804bf1c:	4603      	mov	r3, r0
}
 804bf1e:	4618      	mov	r0, r3
 804bf20:	3708      	adds	r7, #8
 804bf22:	46bd      	mov	sp, r7
 804bf24:	bd80      	pop	{r7, pc}
	...

0804bf28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 804bf28:	b580      	push	{r7, lr}
 804bf2a:	b084      	sub	sp, #16
 804bf2c:	af00      	add	r7, sp, #0
 804bf2e:	6078      	str	r0, [r7, #4]
 804bf30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 804bf32:	687b      	ldr	r3, [r7, #4]
 804bf34:	2b00      	cmp	r3, #0
 804bf36:	d106      	bne.n	804bf46 <pbuf_remove_header+0x1e>
 804bf38:	4b20      	ldr	r3, [pc, #128]	; (804bfbc <pbuf_remove_header+0x94>)
 804bf3a:	f240 224b 	movw	r2, #587	; 0x24b
 804bf3e:	4920      	ldr	r1, [pc, #128]	; (804bfc0 <pbuf_remove_header+0x98>)
 804bf40:	4820      	ldr	r0, [pc, #128]	; (804bfc4 <pbuf_remove_header+0x9c>)
 804bf42:	f008 fc7d 	bl	8054840 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 804bf46:	687b      	ldr	r3, [r7, #4]
 804bf48:	2b00      	cmp	r3, #0
 804bf4a:	d003      	beq.n	804bf54 <pbuf_remove_header+0x2c>
 804bf4c:	683b      	ldr	r3, [r7, #0]
 804bf4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804bf52:	d301      	bcc.n	804bf58 <pbuf_remove_header+0x30>
    return 1;
 804bf54:	2301      	movs	r3, #1
 804bf56:	e02c      	b.n	804bfb2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 804bf58:	683b      	ldr	r3, [r7, #0]
 804bf5a:	2b00      	cmp	r3, #0
 804bf5c:	d101      	bne.n	804bf62 <pbuf_remove_header+0x3a>
    return 0;
 804bf5e:	2300      	movs	r3, #0
 804bf60:	e027      	b.n	804bfb2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 804bf62:	683b      	ldr	r3, [r7, #0]
 804bf64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 804bf66:	687b      	ldr	r3, [r7, #4]
 804bf68:	895b      	ldrh	r3, [r3, #10]
 804bf6a:	89fa      	ldrh	r2, [r7, #14]
 804bf6c:	429a      	cmp	r2, r3
 804bf6e:	d908      	bls.n	804bf82 <pbuf_remove_header+0x5a>
 804bf70:	4b12      	ldr	r3, [pc, #72]	; (804bfbc <pbuf_remove_header+0x94>)
 804bf72:	f240 2255 	movw	r2, #597	; 0x255
 804bf76:	4914      	ldr	r1, [pc, #80]	; (804bfc8 <pbuf_remove_header+0xa0>)
 804bf78:	4812      	ldr	r0, [pc, #72]	; (804bfc4 <pbuf_remove_header+0x9c>)
 804bf7a:	f008 fc61 	bl	8054840 <iprintf>
 804bf7e:	2301      	movs	r3, #1
 804bf80:	e017      	b.n	804bfb2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 804bf82:	687b      	ldr	r3, [r7, #4]
 804bf84:	685b      	ldr	r3, [r3, #4]
 804bf86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 804bf88:	687b      	ldr	r3, [r7, #4]
 804bf8a:	685a      	ldr	r2, [r3, #4]
 804bf8c:	683b      	ldr	r3, [r7, #0]
 804bf8e:	441a      	add	r2, r3
 804bf90:	687b      	ldr	r3, [r7, #4]
 804bf92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 804bf94:	687b      	ldr	r3, [r7, #4]
 804bf96:	895a      	ldrh	r2, [r3, #10]
 804bf98:	89fb      	ldrh	r3, [r7, #14]
 804bf9a:	1ad3      	subs	r3, r2, r3
 804bf9c:	b29a      	uxth	r2, r3
 804bf9e:	687b      	ldr	r3, [r7, #4]
 804bfa0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 804bfa2:	687b      	ldr	r3, [r7, #4]
 804bfa4:	891a      	ldrh	r2, [r3, #8]
 804bfa6:	89fb      	ldrh	r3, [r7, #14]
 804bfa8:	1ad3      	subs	r3, r2, r3
 804bfaa:	b29a      	uxth	r2, r3
 804bfac:	687b      	ldr	r3, [r7, #4]
 804bfae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 804bfb0:	2300      	movs	r3, #0
}
 804bfb2:	4618      	mov	r0, r3
 804bfb4:	3710      	adds	r7, #16
 804bfb6:	46bd      	mov	sp, r7
 804bfb8:	bd80      	pop	{r7, pc}
 804bfba:	bf00      	nop
 804bfbc:	08056028 	.word	0x08056028
 804bfc0:	0805618c 	.word	0x0805618c
 804bfc4:	08056088 	.word	0x08056088
 804bfc8:	08056198 	.word	0x08056198

0804bfcc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 804bfcc:	b580      	push	{r7, lr}
 804bfce:	b082      	sub	sp, #8
 804bfd0:	af00      	add	r7, sp, #0
 804bfd2:	6078      	str	r0, [r7, #4]
 804bfd4:	460b      	mov	r3, r1
 804bfd6:	807b      	strh	r3, [r7, #2]
 804bfd8:	4613      	mov	r3, r2
 804bfda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 804bfdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804bfe0:	2b00      	cmp	r3, #0
 804bfe2:	da08      	bge.n	804bff6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 804bfe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804bfe8:	425b      	negs	r3, r3
 804bfea:	4619      	mov	r1, r3
 804bfec:	6878      	ldr	r0, [r7, #4]
 804bfee:	f7ff ff9b 	bl	804bf28 <pbuf_remove_header>
 804bff2:	4603      	mov	r3, r0
 804bff4:	e007      	b.n	804c006 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 804bff6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804bffa:	787a      	ldrb	r2, [r7, #1]
 804bffc:	4619      	mov	r1, r3
 804bffe:	6878      	ldr	r0, [r7, #4]
 804c000:	f7ff ff1a 	bl	804be38 <pbuf_add_header_impl>
 804c004:	4603      	mov	r3, r0
  }
}
 804c006:	4618      	mov	r0, r3
 804c008:	3708      	adds	r7, #8
 804c00a:	46bd      	mov	sp, r7
 804c00c:	bd80      	pop	{r7, pc}

0804c00e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 804c00e:	b580      	push	{r7, lr}
 804c010:	b082      	sub	sp, #8
 804c012:	af00      	add	r7, sp, #0
 804c014:	6078      	str	r0, [r7, #4]
 804c016:	460b      	mov	r3, r1
 804c018:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 804c01a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804c01e:	2201      	movs	r2, #1
 804c020:	4619      	mov	r1, r3
 804c022:	6878      	ldr	r0, [r7, #4]
 804c024:	f7ff ffd2 	bl	804bfcc <pbuf_header_impl>
 804c028:	4603      	mov	r3, r0
}
 804c02a:	4618      	mov	r0, r3
 804c02c:	3708      	adds	r7, #8
 804c02e:	46bd      	mov	sp, r7
 804c030:	bd80      	pop	{r7, pc}
	...

0804c034 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 804c034:	b580      	push	{r7, lr}
 804c036:	b088      	sub	sp, #32
 804c038:	af00      	add	r7, sp, #0
 804c03a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 804c03c:	687b      	ldr	r3, [r7, #4]
 804c03e:	2b00      	cmp	r3, #0
 804c040:	d10b      	bne.n	804c05a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 804c042:	687b      	ldr	r3, [r7, #4]
 804c044:	2b00      	cmp	r3, #0
 804c046:	d106      	bne.n	804c056 <pbuf_free+0x22>
 804c048:	4b3b      	ldr	r3, [pc, #236]	; (804c138 <pbuf_free+0x104>)
 804c04a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 804c04e:	493b      	ldr	r1, [pc, #236]	; (804c13c <pbuf_free+0x108>)
 804c050:	483b      	ldr	r0, [pc, #236]	; (804c140 <pbuf_free+0x10c>)
 804c052:	f008 fbf5 	bl	8054840 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 804c056:	2300      	movs	r3, #0
 804c058:	e069      	b.n	804c12e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 804c05a:	2300      	movs	r3, #0
 804c05c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 804c05e:	e062      	b.n	804c126 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 804c060:	f008 fad0 	bl	8054604 <sys_arch_protect>
 804c064:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 804c066:	687b      	ldr	r3, [r7, #4]
 804c068:	7b9b      	ldrb	r3, [r3, #14]
 804c06a:	2b00      	cmp	r3, #0
 804c06c:	d106      	bne.n	804c07c <pbuf_free+0x48>
 804c06e:	4b32      	ldr	r3, [pc, #200]	; (804c138 <pbuf_free+0x104>)
 804c070:	f240 22f1 	movw	r2, #753	; 0x2f1
 804c074:	4933      	ldr	r1, [pc, #204]	; (804c144 <pbuf_free+0x110>)
 804c076:	4832      	ldr	r0, [pc, #200]	; (804c140 <pbuf_free+0x10c>)
 804c078:	f008 fbe2 	bl	8054840 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 804c07c:	687b      	ldr	r3, [r7, #4]
 804c07e:	7b9b      	ldrb	r3, [r3, #14]
 804c080:	3b01      	subs	r3, #1
 804c082:	b2da      	uxtb	r2, r3
 804c084:	687b      	ldr	r3, [r7, #4]
 804c086:	739a      	strb	r2, [r3, #14]
 804c088:	687b      	ldr	r3, [r7, #4]
 804c08a:	7b9b      	ldrb	r3, [r3, #14]
 804c08c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 804c08e:	69b8      	ldr	r0, [r7, #24]
 804c090:	f008 fac6 	bl	8054620 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 804c094:	7dfb      	ldrb	r3, [r7, #23]
 804c096:	2b00      	cmp	r3, #0
 804c098:	d143      	bne.n	804c122 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 804c09a:	687b      	ldr	r3, [r7, #4]
 804c09c:	681b      	ldr	r3, [r3, #0]
 804c09e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 804c0a0:	687b      	ldr	r3, [r7, #4]
 804c0a2:	7b1b      	ldrb	r3, [r3, #12]
 804c0a4:	f003 030f 	and.w	r3, r3, #15
 804c0a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 804c0aa:	687b      	ldr	r3, [r7, #4]
 804c0ac:	7b5b      	ldrb	r3, [r3, #13]
 804c0ae:	f003 0302 	and.w	r3, r3, #2
 804c0b2:	2b00      	cmp	r3, #0
 804c0b4:	d011      	beq.n	804c0da <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 804c0b6:	687b      	ldr	r3, [r7, #4]
 804c0b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 804c0ba:	68bb      	ldr	r3, [r7, #8]
 804c0bc:	691b      	ldr	r3, [r3, #16]
 804c0be:	2b00      	cmp	r3, #0
 804c0c0:	d106      	bne.n	804c0d0 <pbuf_free+0x9c>
 804c0c2:	4b1d      	ldr	r3, [pc, #116]	; (804c138 <pbuf_free+0x104>)
 804c0c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 804c0c8:	491f      	ldr	r1, [pc, #124]	; (804c148 <pbuf_free+0x114>)
 804c0ca:	481d      	ldr	r0, [pc, #116]	; (804c140 <pbuf_free+0x10c>)
 804c0cc:	f008 fbb8 	bl	8054840 <iprintf>
        pc->custom_free_function(p);
 804c0d0:	68bb      	ldr	r3, [r7, #8]
 804c0d2:	691b      	ldr	r3, [r3, #16]
 804c0d4:	6878      	ldr	r0, [r7, #4]
 804c0d6:	4798      	blx	r3
 804c0d8:	e01d      	b.n	804c116 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 804c0da:	7bfb      	ldrb	r3, [r7, #15]
 804c0dc:	2b02      	cmp	r3, #2
 804c0de:	d104      	bne.n	804c0ea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 804c0e0:	6879      	ldr	r1, [r7, #4]
 804c0e2:	200c      	movs	r0, #12
 804c0e4:	f7ff f902 	bl	804b2ec <memp_free>
 804c0e8:	e015      	b.n	804c116 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 804c0ea:	7bfb      	ldrb	r3, [r7, #15]
 804c0ec:	2b01      	cmp	r3, #1
 804c0ee:	d104      	bne.n	804c0fa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 804c0f0:	6879      	ldr	r1, [r7, #4]
 804c0f2:	200b      	movs	r0, #11
 804c0f4:	f7ff f8fa 	bl	804b2ec <memp_free>
 804c0f8:	e00d      	b.n	804c116 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 804c0fa:	7bfb      	ldrb	r3, [r7, #15]
 804c0fc:	2b00      	cmp	r3, #0
 804c0fe:	d103      	bne.n	804c108 <pbuf_free+0xd4>
          mem_free(p);
 804c100:	6878      	ldr	r0, [r7, #4]
 804c102:	f7fe fd3f 	bl	804ab84 <mem_free>
 804c106:	e006      	b.n	804c116 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 804c108:	4b0b      	ldr	r3, [pc, #44]	; (804c138 <pbuf_free+0x104>)
 804c10a:	f240 320f 	movw	r2, #783	; 0x30f
 804c10e:	490f      	ldr	r1, [pc, #60]	; (804c14c <pbuf_free+0x118>)
 804c110:	480b      	ldr	r0, [pc, #44]	; (804c140 <pbuf_free+0x10c>)
 804c112:	f008 fb95 	bl	8054840 <iprintf>
        }
      }
      count++;
 804c116:	7ffb      	ldrb	r3, [r7, #31]
 804c118:	3301      	adds	r3, #1
 804c11a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 804c11c:	693b      	ldr	r3, [r7, #16]
 804c11e:	607b      	str	r3, [r7, #4]
 804c120:	e001      	b.n	804c126 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 804c122:	2300      	movs	r3, #0
 804c124:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 804c126:	687b      	ldr	r3, [r7, #4]
 804c128:	2b00      	cmp	r3, #0
 804c12a:	d199      	bne.n	804c060 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 804c12c:	7ffb      	ldrb	r3, [r7, #31]
}
 804c12e:	4618      	mov	r0, r3
 804c130:	3720      	adds	r7, #32
 804c132:	46bd      	mov	sp, r7
 804c134:	bd80      	pop	{r7, pc}
 804c136:	bf00      	nop
 804c138:	08056028 	.word	0x08056028
 804c13c:	0805618c 	.word	0x0805618c
 804c140:	08056088 	.word	0x08056088
 804c144:	080561b8 	.word	0x080561b8
 804c148:	080561d0 	.word	0x080561d0
 804c14c:	080561f4 	.word	0x080561f4

0804c150 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 804c150:	b480      	push	{r7}
 804c152:	b085      	sub	sp, #20
 804c154:	af00      	add	r7, sp, #0
 804c156:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 804c158:	2300      	movs	r3, #0
 804c15a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 804c15c:	e005      	b.n	804c16a <pbuf_clen+0x1a>
    ++len;
 804c15e:	89fb      	ldrh	r3, [r7, #14]
 804c160:	3301      	adds	r3, #1
 804c162:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 804c164:	687b      	ldr	r3, [r7, #4]
 804c166:	681b      	ldr	r3, [r3, #0]
 804c168:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 804c16a:	687b      	ldr	r3, [r7, #4]
 804c16c:	2b00      	cmp	r3, #0
 804c16e:	d1f6      	bne.n	804c15e <pbuf_clen+0xe>
  }
  return len;
 804c170:	89fb      	ldrh	r3, [r7, #14]
}
 804c172:	4618      	mov	r0, r3
 804c174:	3714      	adds	r7, #20
 804c176:	46bd      	mov	sp, r7
 804c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c17c:	4770      	bx	lr
	...

0804c180 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 804c180:	b580      	push	{r7, lr}
 804c182:	b084      	sub	sp, #16
 804c184:	af00      	add	r7, sp, #0
 804c186:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 804c188:	687b      	ldr	r3, [r7, #4]
 804c18a:	2b00      	cmp	r3, #0
 804c18c:	d016      	beq.n	804c1bc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 804c18e:	f008 fa39 	bl	8054604 <sys_arch_protect>
 804c192:	60f8      	str	r0, [r7, #12]
 804c194:	687b      	ldr	r3, [r7, #4]
 804c196:	7b9b      	ldrb	r3, [r3, #14]
 804c198:	3301      	adds	r3, #1
 804c19a:	b2da      	uxtb	r2, r3
 804c19c:	687b      	ldr	r3, [r7, #4]
 804c19e:	739a      	strb	r2, [r3, #14]
 804c1a0:	68f8      	ldr	r0, [r7, #12]
 804c1a2:	f008 fa3d 	bl	8054620 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 804c1a6:	687b      	ldr	r3, [r7, #4]
 804c1a8:	7b9b      	ldrb	r3, [r3, #14]
 804c1aa:	2b00      	cmp	r3, #0
 804c1ac:	d106      	bne.n	804c1bc <pbuf_ref+0x3c>
 804c1ae:	4b05      	ldr	r3, [pc, #20]	; (804c1c4 <pbuf_ref+0x44>)
 804c1b0:	f240 3242 	movw	r2, #834	; 0x342
 804c1b4:	4904      	ldr	r1, [pc, #16]	; (804c1c8 <pbuf_ref+0x48>)
 804c1b6:	4805      	ldr	r0, [pc, #20]	; (804c1cc <pbuf_ref+0x4c>)
 804c1b8:	f008 fb42 	bl	8054840 <iprintf>
  }
}
 804c1bc:	bf00      	nop
 804c1be:	3710      	adds	r7, #16
 804c1c0:	46bd      	mov	sp, r7
 804c1c2:	bd80      	pop	{r7, pc}
 804c1c4:	08056028 	.word	0x08056028
 804c1c8:	08056208 	.word	0x08056208
 804c1cc:	08056088 	.word	0x08056088

0804c1d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 804c1d0:	b580      	push	{r7, lr}
 804c1d2:	b084      	sub	sp, #16
 804c1d4:	af00      	add	r7, sp, #0
 804c1d6:	6078      	str	r0, [r7, #4]
 804c1d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 804c1da:	687b      	ldr	r3, [r7, #4]
 804c1dc:	2b00      	cmp	r3, #0
 804c1de:	d002      	beq.n	804c1e6 <pbuf_cat+0x16>
 804c1e0:	683b      	ldr	r3, [r7, #0]
 804c1e2:	2b00      	cmp	r3, #0
 804c1e4:	d107      	bne.n	804c1f6 <pbuf_cat+0x26>
 804c1e6:	4b20      	ldr	r3, [pc, #128]	; (804c268 <pbuf_cat+0x98>)
 804c1e8:	f240 3259 	movw	r2, #857	; 0x359
 804c1ec:	491f      	ldr	r1, [pc, #124]	; (804c26c <pbuf_cat+0x9c>)
 804c1ee:	4820      	ldr	r0, [pc, #128]	; (804c270 <pbuf_cat+0xa0>)
 804c1f0:	f008 fb26 	bl	8054840 <iprintf>
 804c1f4:	e034      	b.n	804c260 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 804c1f6:	687b      	ldr	r3, [r7, #4]
 804c1f8:	60fb      	str	r3, [r7, #12]
 804c1fa:	e00a      	b.n	804c212 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 804c1fc:	68fb      	ldr	r3, [r7, #12]
 804c1fe:	891a      	ldrh	r2, [r3, #8]
 804c200:	683b      	ldr	r3, [r7, #0]
 804c202:	891b      	ldrh	r3, [r3, #8]
 804c204:	4413      	add	r3, r2
 804c206:	b29a      	uxth	r2, r3
 804c208:	68fb      	ldr	r3, [r7, #12]
 804c20a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 804c20c:	68fb      	ldr	r3, [r7, #12]
 804c20e:	681b      	ldr	r3, [r3, #0]
 804c210:	60fb      	str	r3, [r7, #12]
 804c212:	68fb      	ldr	r3, [r7, #12]
 804c214:	681b      	ldr	r3, [r3, #0]
 804c216:	2b00      	cmp	r3, #0
 804c218:	d1f0      	bne.n	804c1fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 804c21a:	68fb      	ldr	r3, [r7, #12]
 804c21c:	891a      	ldrh	r2, [r3, #8]
 804c21e:	68fb      	ldr	r3, [r7, #12]
 804c220:	895b      	ldrh	r3, [r3, #10]
 804c222:	429a      	cmp	r2, r3
 804c224:	d006      	beq.n	804c234 <pbuf_cat+0x64>
 804c226:	4b10      	ldr	r3, [pc, #64]	; (804c268 <pbuf_cat+0x98>)
 804c228:	f240 3262 	movw	r2, #866	; 0x362
 804c22c:	4911      	ldr	r1, [pc, #68]	; (804c274 <pbuf_cat+0xa4>)
 804c22e:	4810      	ldr	r0, [pc, #64]	; (804c270 <pbuf_cat+0xa0>)
 804c230:	f008 fb06 	bl	8054840 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 804c234:	68fb      	ldr	r3, [r7, #12]
 804c236:	681b      	ldr	r3, [r3, #0]
 804c238:	2b00      	cmp	r3, #0
 804c23a:	d006      	beq.n	804c24a <pbuf_cat+0x7a>
 804c23c:	4b0a      	ldr	r3, [pc, #40]	; (804c268 <pbuf_cat+0x98>)
 804c23e:	f240 3263 	movw	r2, #867	; 0x363
 804c242:	490d      	ldr	r1, [pc, #52]	; (804c278 <pbuf_cat+0xa8>)
 804c244:	480a      	ldr	r0, [pc, #40]	; (804c270 <pbuf_cat+0xa0>)
 804c246:	f008 fafb 	bl	8054840 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 804c24a:	68fb      	ldr	r3, [r7, #12]
 804c24c:	891a      	ldrh	r2, [r3, #8]
 804c24e:	683b      	ldr	r3, [r7, #0]
 804c250:	891b      	ldrh	r3, [r3, #8]
 804c252:	4413      	add	r3, r2
 804c254:	b29a      	uxth	r2, r3
 804c256:	68fb      	ldr	r3, [r7, #12]
 804c258:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 804c25a:	68fb      	ldr	r3, [r7, #12]
 804c25c:	683a      	ldr	r2, [r7, #0]
 804c25e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 804c260:	3710      	adds	r7, #16
 804c262:	46bd      	mov	sp, r7
 804c264:	bd80      	pop	{r7, pc}
 804c266:	bf00      	nop
 804c268:	08056028 	.word	0x08056028
 804c26c:	0805621c 	.word	0x0805621c
 804c270:	08056088 	.word	0x08056088
 804c274:	08056254 	.word	0x08056254
 804c278:	08056284 	.word	0x08056284

0804c27c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 804c27c:	b580      	push	{r7, lr}
 804c27e:	b086      	sub	sp, #24
 804c280:	af00      	add	r7, sp, #0
 804c282:	6078      	str	r0, [r7, #4]
 804c284:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 804c286:	2300      	movs	r3, #0
 804c288:	617b      	str	r3, [r7, #20]
 804c28a:	2300      	movs	r3, #0
 804c28c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 804c28e:	687b      	ldr	r3, [r7, #4]
 804c290:	2b00      	cmp	r3, #0
 804c292:	d008      	beq.n	804c2a6 <pbuf_copy+0x2a>
 804c294:	683b      	ldr	r3, [r7, #0]
 804c296:	2b00      	cmp	r3, #0
 804c298:	d005      	beq.n	804c2a6 <pbuf_copy+0x2a>
 804c29a:	687b      	ldr	r3, [r7, #4]
 804c29c:	891a      	ldrh	r2, [r3, #8]
 804c29e:	683b      	ldr	r3, [r7, #0]
 804c2a0:	891b      	ldrh	r3, [r3, #8]
 804c2a2:	429a      	cmp	r2, r3
 804c2a4:	d209      	bcs.n	804c2ba <pbuf_copy+0x3e>
 804c2a6:	4b57      	ldr	r3, [pc, #348]	; (804c404 <pbuf_copy+0x188>)
 804c2a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 804c2ac:	4956      	ldr	r1, [pc, #344]	; (804c408 <pbuf_copy+0x18c>)
 804c2ae:	4857      	ldr	r0, [pc, #348]	; (804c40c <pbuf_copy+0x190>)
 804c2b0:	f008 fac6 	bl	8054840 <iprintf>
 804c2b4:	f06f 030f 	mvn.w	r3, #15
 804c2b8:	e09f      	b.n	804c3fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 804c2ba:	687b      	ldr	r3, [r7, #4]
 804c2bc:	895b      	ldrh	r3, [r3, #10]
 804c2be:	461a      	mov	r2, r3
 804c2c0:	697b      	ldr	r3, [r7, #20]
 804c2c2:	1ad2      	subs	r2, r2, r3
 804c2c4:	683b      	ldr	r3, [r7, #0]
 804c2c6:	895b      	ldrh	r3, [r3, #10]
 804c2c8:	4619      	mov	r1, r3
 804c2ca:	693b      	ldr	r3, [r7, #16]
 804c2cc:	1acb      	subs	r3, r1, r3
 804c2ce:	429a      	cmp	r2, r3
 804c2d0:	d306      	bcc.n	804c2e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 804c2d2:	683b      	ldr	r3, [r7, #0]
 804c2d4:	895b      	ldrh	r3, [r3, #10]
 804c2d6:	461a      	mov	r2, r3
 804c2d8:	693b      	ldr	r3, [r7, #16]
 804c2da:	1ad3      	subs	r3, r2, r3
 804c2dc:	60fb      	str	r3, [r7, #12]
 804c2de:	e005      	b.n	804c2ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 804c2e0:	687b      	ldr	r3, [r7, #4]
 804c2e2:	895b      	ldrh	r3, [r3, #10]
 804c2e4:	461a      	mov	r2, r3
 804c2e6:	697b      	ldr	r3, [r7, #20]
 804c2e8:	1ad3      	subs	r3, r2, r3
 804c2ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 804c2ec:	687b      	ldr	r3, [r7, #4]
 804c2ee:	685a      	ldr	r2, [r3, #4]
 804c2f0:	697b      	ldr	r3, [r7, #20]
 804c2f2:	18d0      	adds	r0, r2, r3
 804c2f4:	683b      	ldr	r3, [r7, #0]
 804c2f6:	685a      	ldr	r2, [r3, #4]
 804c2f8:	693b      	ldr	r3, [r7, #16]
 804c2fa:	4413      	add	r3, r2
 804c2fc:	68fa      	ldr	r2, [r7, #12]
 804c2fe:	4619      	mov	r1, r3
 804c300:	f008 fcbf 	bl	8054c82 <memcpy>
    offset_to += len;
 804c304:	697a      	ldr	r2, [r7, #20]
 804c306:	68fb      	ldr	r3, [r7, #12]
 804c308:	4413      	add	r3, r2
 804c30a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 804c30c:	693a      	ldr	r2, [r7, #16]
 804c30e:	68fb      	ldr	r3, [r7, #12]
 804c310:	4413      	add	r3, r2
 804c312:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 804c314:	687b      	ldr	r3, [r7, #4]
 804c316:	895b      	ldrh	r3, [r3, #10]
 804c318:	461a      	mov	r2, r3
 804c31a:	697b      	ldr	r3, [r7, #20]
 804c31c:	4293      	cmp	r3, r2
 804c31e:	d906      	bls.n	804c32e <pbuf_copy+0xb2>
 804c320:	4b38      	ldr	r3, [pc, #224]	; (804c404 <pbuf_copy+0x188>)
 804c322:	f240 32d9 	movw	r2, #985	; 0x3d9
 804c326:	493a      	ldr	r1, [pc, #232]	; (804c410 <pbuf_copy+0x194>)
 804c328:	4838      	ldr	r0, [pc, #224]	; (804c40c <pbuf_copy+0x190>)
 804c32a:	f008 fa89 	bl	8054840 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 804c32e:	683b      	ldr	r3, [r7, #0]
 804c330:	895b      	ldrh	r3, [r3, #10]
 804c332:	461a      	mov	r2, r3
 804c334:	693b      	ldr	r3, [r7, #16]
 804c336:	4293      	cmp	r3, r2
 804c338:	d906      	bls.n	804c348 <pbuf_copy+0xcc>
 804c33a:	4b32      	ldr	r3, [pc, #200]	; (804c404 <pbuf_copy+0x188>)
 804c33c:	f240 32da 	movw	r2, #986	; 0x3da
 804c340:	4934      	ldr	r1, [pc, #208]	; (804c414 <pbuf_copy+0x198>)
 804c342:	4832      	ldr	r0, [pc, #200]	; (804c40c <pbuf_copy+0x190>)
 804c344:	f008 fa7c 	bl	8054840 <iprintf>
    if (offset_from >= p_from->len) {
 804c348:	683b      	ldr	r3, [r7, #0]
 804c34a:	895b      	ldrh	r3, [r3, #10]
 804c34c:	461a      	mov	r2, r3
 804c34e:	693b      	ldr	r3, [r7, #16]
 804c350:	4293      	cmp	r3, r2
 804c352:	d304      	bcc.n	804c35e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 804c354:	2300      	movs	r3, #0
 804c356:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 804c358:	683b      	ldr	r3, [r7, #0]
 804c35a:	681b      	ldr	r3, [r3, #0]
 804c35c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 804c35e:	687b      	ldr	r3, [r7, #4]
 804c360:	895b      	ldrh	r3, [r3, #10]
 804c362:	461a      	mov	r2, r3
 804c364:	697b      	ldr	r3, [r7, #20]
 804c366:	4293      	cmp	r3, r2
 804c368:	d114      	bne.n	804c394 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 804c36a:	2300      	movs	r3, #0
 804c36c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 804c36e:	687b      	ldr	r3, [r7, #4]
 804c370:	681b      	ldr	r3, [r3, #0]
 804c372:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 804c374:	687b      	ldr	r3, [r7, #4]
 804c376:	2b00      	cmp	r3, #0
 804c378:	d10c      	bne.n	804c394 <pbuf_copy+0x118>
 804c37a:	683b      	ldr	r3, [r7, #0]
 804c37c:	2b00      	cmp	r3, #0
 804c37e:	d009      	beq.n	804c394 <pbuf_copy+0x118>
 804c380:	4b20      	ldr	r3, [pc, #128]	; (804c404 <pbuf_copy+0x188>)
 804c382:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 804c386:	4924      	ldr	r1, [pc, #144]	; (804c418 <pbuf_copy+0x19c>)
 804c388:	4820      	ldr	r0, [pc, #128]	; (804c40c <pbuf_copy+0x190>)
 804c38a:	f008 fa59 	bl	8054840 <iprintf>
 804c38e:	f06f 030f 	mvn.w	r3, #15
 804c392:	e032      	b.n	804c3fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 804c394:	683b      	ldr	r3, [r7, #0]
 804c396:	2b00      	cmp	r3, #0
 804c398:	d013      	beq.n	804c3c2 <pbuf_copy+0x146>
 804c39a:	683b      	ldr	r3, [r7, #0]
 804c39c:	895a      	ldrh	r2, [r3, #10]
 804c39e:	683b      	ldr	r3, [r7, #0]
 804c3a0:	891b      	ldrh	r3, [r3, #8]
 804c3a2:	429a      	cmp	r2, r3
 804c3a4:	d10d      	bne.n	804c3c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 804c3a6:	683b      	ldr	r3, [r7, #0]
 804c3a8:	681b      	ldr	r3, [r3, #0]
 804c3aa:	2b00      	cmp	r3, #0
 804c3ac:	d009      	beq.n	804c3c2 <pbuf_copy+0x146>
 804c3ae:	4b15      	ldr	r3, [pc, #84]	; (804c404 <pbuf_copy+0x188>)
 804c3b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 804c3b4:	4919      	ldr	r1, [pc, #100]	; (804c41c <pbuf_copy+0x1a0>)
 804c3b6:	4815      	ldr	r0, [pc, #84]	; (804c40c <pbuf_copy+0x190>)
 804c3b8:	f008 fa42 	bl	8054840 <iprintf>
 804c3bc:	f06f 0305 	mvn.w	r3, #5
 804c3c0:	e01b      	b.n	804c3fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 804c3c2:	687b      	ldr	r3, [r7, #4]
 804c3c4:	2b00      	cmp	r3, #0
 804c3c6:	d013      	beq.n	804c3f0 <pbuf_copy+0x174>
 804c3c8:	687b      	ldr	r3, [r7, #4]
 804c3ca:	895a      	ldrh	r2, [r3, #10]
 804c3cc:	687b      	ldr	r3, [r7, #4]
 804c3ce:	891b      	ldrh	r3, [r3, #8]
 804c3d0:	429a      	cmp	r2, r3
 804c3d2:	d10d      	bne.n	804c3f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 804c3d4:	687b      	ldr	r3, [r7, #4]
 804c3d6:	681b      	ldr	r3, [r3, #0]
 804c3d8:	2b00      	cmp	r3, #0
 804c3da:	d009      	beq.n	804c3f0 <pbuf_copy+0x174>
 804c3dc:	4b09      	ldr	r3, [pc, #36]	; (804c404 <pbuf_copy+0x188>)
 804c3de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 804c3e2:	490e      	ldr	r1, [pc, #56]	; (804c41c <pbuf_copy+0x1a0>)
 804c3e4:	4809      	ldr	r0, [pc, #36]	; (804c40c <pbuf_copy+0x190>)
 804c3e6:	f008 fa2b 	bl	8054840 <iprintf>
 804c3ea:	f06f 0305 	mvn.w	r3, #5
 804c3ee:	e004      	b.n	804c3fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 804c3f0:	683b      	ldr	r3, [r7, #0]
 804c3f2:	2b00      	cmp	r3, #0
 804c3f4:	f47f af61 	bne.w	804c2ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 804c3f8:	2300      	movs	r3, #0
}
 804c3fa:	4618      	mov	r0, r3
 804c3fc:	3718      	adds	r7, #24
 804c3fe:	46bd      	mov	sp, r7
 804c400:	bd80      	pop	{r7, pc}
 804c402:	bf00      	nop
 804c404:	08056028 	.word	0x08056028
 804c408:	080562d0 	.word	0x080562d0
 804c40c:	08056088 	.word	0x08056088
 804c410:	08056300 	.word	0x08056300
 804c414:	08056318 	.word	0x08056318
 804c418:	08056334 	.word	0x08056334
 804c41c:	08056344 	.word	0x08056344

0804c420 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 804c420:	b580      	push	{r7, lr}
 804c422:	b088      	sub	sp, #32
 804c424:	af00      	add	r7, sp, #0
 804c426:	60f8      	str	r0, [r7, #12]
 804c428:	60b9      	str	r1, [r7, #8]
 804c42a:	4611      	mov	r1, r2
 804c42c:	461a      	mov	r2, r3
 804c42e:	460b      	mov	r3, r1
 804c430:	80fb      	strh	r3, [r7, #6]
 804c432:	4613      	mov	r3, r2
 804c434:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 804c436:	2300      	movs	r3, #0
 804c438:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 804c43a:	2300      	movs	r3, #0
 804c43c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 804c43e:	68fb      	ldr	r3, [r7, #12]
 804c440:	2b00      	cmp	r3, #0
 804c442:	d108      	bne.n	804c456 <pbuf_copy_partial+0x36>
 804c444:	4b2b      	ldr	r3, [pc, #172]	; (804c4f4 <pbuf_copy_partial+0xd4>)
 804c446:	f240 420a 	movw	r2, #1034	; 0x40a
 804c44a:	492b      	ldr	r1, [pc, #172]	; (804c4f8 <pbuf_copy_partial+0xd8>)
 804c44c:	482b      	ldr	r0, [pc, #172]	; (804c4fc <pbuf_copy_partial+0xdc>)
 804c44e:	f008 f9f7 	bl	8054840 <iprintf>
 804c452:	2300      	movs	r3, #0
 804c454:	e04a      	b.n	804c4ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 804c456:	68bb      	ldr	r3, [r7, #8]
 804c458:	2b00      	cmp	r3, #0
 804c45a:	d108      	bne.n	804c46e <pbuf_copy_partial+0x4e>
 804c45c:	4b25      	ldr	r3, [pc, #148]	; (804c4f4 <pbuf_copy_partial+0xd4>)
 804c45e:	f240 420b 	movw	r2, #1035	; 0x40b
 804c462:	4927      	ldr	r1, [pc, #156]	; (804c500 <pbuf_copy_partial+0xe0>)
 804c464:	4825      	ldr	r0, [pc, #148]	; (804c4fc <pbuf_copy_partial+0xdc>)
 804c466:	f008 f9eb 	bl	8054840 <iprintf>
 804c46a:	2300      	movs	r3, #0
 804c46c:	e03e      	b.n	804c4ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 804c46e:	68fb      	ldr	r3, [r7, #12]
 804c470:	61fb      	str	r3, [r7, #28]
 804c472:	e034      	b.n	804c4de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 804c474:	88bb      	ldrh	r3, [r7, #4]
 804c476:	2b00      	cmp	r3, #0
 804c478:	d00a      	beq.n	804c490 <pbuf_copy_partial+0x70>
 804c47a:	69fb      	ldr	r3, [r7, #28]
 804c47c:	895b      	ldrh	r3, [r3, #10]
 804c47e:	88ba      	ldrh	r2, [r7, #4]
 804c480:	429a      	cmp	r2, r3
 804c482:	d305      	bcc.n	804c490 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 804c484:	69fb      	ldr	r3, [r7, #28]
 804c486:	895b      	ldrh	r3, [r3, #10]
 804c488:	88ba      	ldrh	r2, [r7, #4]
 804c48a:	1ad3      	subs	r3, r2, r3
 804c48c:	80bb      	strh	r3, [r7, #4]
 804c48e:	e023      	b.n	804c4d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 804c490:	69fb      	ldr	r3, [r7, #28]
 804c492:	895a      	ldrh	r2, [r3, #10]
 804c494:	88bb      	ldrh	r3, [r7, #4]
 804c496:	1ad3      	subs	r3, r2, r3
 804c498:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 804c49a:	8b3a      	ldrh	r2, [r7, #24]
 804c49c:	88fb      	ldrh	r3, [r7, #6]
 804c49e:	429a      	cmp	r2, r3
 804c4a0:	d901      	bls.n	804c4a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 804c4a2:	88fb      	ldrh	r3, [r7, #6]
 804c4a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 804c4a6:	8b7b      	ldrh	r3, [r7, #26]
 804c4a8:	68ba      	ldr	r2, [r7, #8]
 804c4aa:	18d0      	adds	r0, r2, r3
 804c4ac:	69fb      	ldr	r3, [r7, #28]
 804c4ae:	685a      	ldr	r2, [r3, #4]
 804c4b0:	88bb      	ldrh	r3, [r7, #4]
 804c4b2:	4413      	add	r3, r2
 804c4b4:	8b3a      	ldrh	r2, [r7, #24]
 804c4b6:	4619      	mov	r1, r3
 804c4b8:	f008 fbe3 	bl	8054c82 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 804c4bc:	8afa      	ldrh	r2, [r7, #22]
 804c4be:	8b3b      	ldrh	r3, [r7, #24]
 804c4c0:	4413      	add	r3, r2
 804c4c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 804c4c4:	8b7a      	ldrh	r2, [r7, #26]
 804c4c6:	8b3b      	ldrh	r3, [r7, #24]
 804c4c8:	4413      	add	r3, r2
 804c4ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 804c4cc:	88fa      	ldrh	r2, [r7, #6]
 804c4ce:	8b3b      	ldrh	r3, [r7, #24]
 804c4d0:	1ad3      	subs	r3, r2, r3
 804c4d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 804c4d4:	2300      	movs	r3, #0
 804c4d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 804c4d8:	69fb      	ldr	r3, [r7, #28]
 804c4da:	681b      	ldr	r3, [r3, #0]
 804c4dc:	61fb      	str	r3, [r7, #28]
 804c4de:	88fb      	ldrh	r3, [r7, #6]
 804c4e0:	2b00      	cmp	r3, #0
 804c4e2:	d002      	beq.n	804c4ea <pbuf_copy_partial+0xca>
 804c4e4:	69fb      	ldr	r3, [r7, #28]
 804c4e6:	2b00      	cmp	r3, #0
 804c4e8:	d1c4      	bne.n	804c474 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 804c4ea:	8afb      	ldrh	r3, [r7, #22]
}
 804c4ec:	4618      	mov	r0, r3
 804c4ee:	3720      	adds	r7, #32
 804c4f0:	46bd      	mov	sp, r7
 804c4f2:	bd80      	pop	{r7, pc}
 804c4f4:	08056028 	.word	0x08056028
 804c4f8:	08056370 	.word	0x08056370
 804c4fc:	08056088 	.word	0x08056088
 804c500:	08056390 	.word	0x08056390

0804c504 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 804c504:	b580      	push	{r7, lr}
 804c506:	b084      	sub	sp, #16
 804c508:	af00      	add	r7, sp, #0
 804c50a:	4603      	mov	r3, r0
 804c50c:	603a      	str	r2, [r7, #0]
 804c50e:	71fb      	strb	r3, [r7, #7]
 804c510:	460b      	mov	r3, r1
 804c512:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 804c514:	683b      	ldr	r3, [r7, #0]
 804c516:	8919      	ldrh	r1, [r3, #8]
 804c518:	88ba      	ldrh	r2, [r7, #4]
 804c51a:	79fb      	ldrb	r3, [r7, #7]
 804c51c:	4618      	mov	r0, r3
 804c51e:	f7ff faa5 	bl	804ba6c <pbuf_alloc>
 804c522:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 804c524:	68fb      	ldr	r3, [r7, #12]
 804c526:	2b00      	cmp	r3, #0
 804c528:	d101      	bne.n	804c52e <pbuf_clone+0x2a>
    return NULL;
 804c52a:	2300      	movs	r3, #0
 804c52c:	e011      	b.n	804c552 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 804c52e:	6839      	ldr	r1, [r7, #0]
 804c530:	68f8      	ldr	r0, [r7, #12]
 804c532:	f7ff fea3 	bl	804c27c <pbuf_copy>
 804c536:	4603      	mov	r3, r0
 804c538:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 804c53a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 804c53e:	2b00      	cmp	r3, #0
 804c540:	d006      	beq.n	804c550 <pbuf_clone+0x4c>
 804c542:	4b06      	ldr	r3, [pc, #24]	; (804c55c <pbuf_clone+0x58>)
 804c544:	f240 5224 	movw	r2, #1316	; 0x524
 804c548:	4905      	ldr	r1, [pc, #20]	; (804c560 <pbuf_clone+0x5c>)
 804c54a:	4806      	ldr	r0, [pc, #24]	; (804c564 <pbuf_clone+0x60>)
 804c54c:	f008 f978 	bl	8054840 <iprintf>
  return q;
 804c550:	68fb      	ldr	r3, [r7, #12]
}
 804c552:	4618      	mov	r0, r3
 804c554:	3710      	adds	r7, #16
 804c556:	46bd      	mov	sp, r7
 804c558:	bd80      	pop	{r7, pc}
 804c55a:	bf00      	nop
 804c55c:	08056028 	.word	0x08056028
 804c560:	0805649c 	.word	0x0805649c
 804c564:	08056088 	.word	0x08056088

0804c568 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 804c568:	b580      	push	{r7, lr}
 804c56a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 804c56c:	f008 f868 	bl	8054640 <rand>
 804c570:	4603      	mov	r3, r0
 804c572:	b29b      	uxth	r3, r3
 804c574:	f3c3 030d 	ubfx	r3, r3, #0, #14
 804c578:	b29b      	uxth	r3, r3
 804c57a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 804c57e:	b29a      	uxth	r2, r3
 804c580:	4b01      	ldr	r3, [pc, #4]	; (804c588 <tcp_init+0x20>)
 804c582:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 804c584:	bf00      	nop
 804c586:	bd80      	pop	{r7, pc}
 804c588:	20000024 	.word	0x20000024

0804c58c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 804c58c:	b580      	push	{r7, lr}
 804c58e:	b082      	sub	sp, #8
 804c590:	af00      	add	r7, sp, #0
 804c592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 804c594:	687b      	ldr	r3, [r7, #4]
 804c596:	7d1b      	ldrb	r3, [r3, #20]
 804c598:	2b01      	cmp	r3, #1
 804c59a:	d105      	bne.n	804c5a8 <tcp_free+0x1c>
 804c59c:	4b06      	ldr	r3, [pc, #24]	; (804c5b8 <tcp_free+0x2c>)
 804c59e:	22d4      	movs	r2, #212	; 0xd4
 804c5a0:	4906      	ldr	r1, [pc, #24]	; (804c5bc <tcp_free+0x30>)
 804c5a2:	4807      	ldr	r0, [pc, #28]	; (804c5c0 <tcp_free+0x34>)
 804c5a4:	f008 f94c 	bl	8054840 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 804c5a8:	6879      	ldr	r1, [r7, #4]
 804c5aa:	2001      	movs	r0, #1
 804c5ac:	f7fe fe9e 	bl	804b2ec <memp_free>
}
 804c5b0:	bf00      	nop
 804c5b2:	3708      	adds	r7, #8
 804c5b4:	46bd      	mov	sp, r7
 804c5b6:	bd80      	pop	{r7, pc}
 804c5b8:	08056528 	.word	0x08056528
 804c5bc:	08056558 	.word	0x08056558
 804c5c0:	0805656c 	.word	0x0805656c

0804c5c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 804c5c4:	b580      	push	{r7, lr}
 804c5c6:	b082      	sub	sp, #8
 804c5c8:	af00      	add	r7, sp, #0
 804c5ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 804c5cc:	687b      	ldr	r3, [r7, #4]
 804c5ce:	7d1b      	ldrb	r3, [r3, #20]
 804c5d0:	2b01      	cmp	r3, #1
 804c5d2:	d105      	bne.n	804c5e0 <tcp_free_listen+0x1c>
 804c5d4:	4b06      	ldr	r3, [pc, #24]	; (804c5f0 <tcp_free_listen+0x2c>)
 804c5d6:	22df      	movs	r2, #223	; 0xdf
 804c5d8:	4906      	ldr	r1, [pc, #24]	; (804c5f4 <tcp_free_listen+0x30>)
 804c5da:	4807      	ldr	r0, [pc, #28]	; (804c5f8 <tcp_free_listen+0x34>)
 804c5dc:	f008 f930 	bl	8054840 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 804c5e0:	6879      	ldr	r1, [r7, #4]
 804c5e2:	2002      	movs	r0, #2
 804c5e4:	f7fe fe82 	bl	804b2ec <memp_free>
}
 804c5e8:	bf00      	nop
 804c5ea:	3708      	adds	r7, #8
 804c5ec:	46bd      	mov	sp, r7
 804c5ee:	bd80      	pop	{r7, pc}
 804c5f0:	08056528 	.word	0x08056528
 804c5f4:	08056594 	.word	0x08056594
 804c5f8:	0805656c 	.word	0x0805656c

0804c5fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 804c5fc:	b580      	push	{r7, lr}
 804c5fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 804c600:	f000 fea2 	bl	804d348 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 804c604:	4b07      	ldr	r3, [pc, #28]	; (804c624 <tcp_tmr+0x28>)
 804c606:	781b      	ldrb	r3, [r3, #0]
 804c608:	3301      	adds	r3, #1
 804c60a:	b2da      	uxtb	r2, r3
 804c60c:	4b05      	ldr	r3, [pc, #20]	; (804c624 <tcp_tmr+0x28>)
 804c60e:	701a      	strb	r2, [r3, #0]
 804c610:	4b04      	ldr	r3, [pc, #16]	; (804c624 <tcp_tmr+0x28>)
 804c612:	781b      	ldrb	r3, [r3, #0]
 804c614:	f003 0301 	and.w	r3, r3, #1
 804c618:	2b00      	cmp	r3, #0
 804c61a:	d001      	beq.n	804c620 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 804c61c:	f000 fb54 	bl	804ccc8 <tcp_slowtmr>
  }
}
 804c620:	bf00      	nop
 804c622:	bd80      	pop	{r7, pc}
 804c624:	200237e1 	.word	0x200237e1

0804c628 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 804c628:	b580      	push	{r7, lr}
 804c62a:	b084      	sub	sp, #16
 804c62c:	af00      	add	r7, sp, #0
 804c62e:	6078      	str	r0, [r7, #4]
 804c630:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 804c632:	683b      	ldr	r3, [r7, #0]
 804c634:	2b00      	cmp	r3, #0
 804c636:	d105      	bne.n	804c644 <tcp_remove_listener+0x1c>
 804c638:	4b0d      	ldr	r3, [pc, #52]	; (804c670 <tcp_remove_listener+0x48>)
 804c63a:	22ff      	movs	r2, #255	; 0xff
 804c63c:	490d      	ldr	r1, [pc, #52]	; (804c674 <tcp_remove_listener+0x4c>)
 804c63e:	480e      	ldr	r0, [pc, #56]	; (804c678 <tcp_remove_listener+0x50>)
 804c640:	f008 f8fe 	bl	8054840 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 804c644:	687b      	ldr	r3, [r7, #4]
 804c646:	60fb      	str	r3, [r7, #12]
 804c648:	e00a      	b.n	804c660 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 804c64a:	68fb      	ldr	r3, [r7, #12]
 804c64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804c64e:	683a      	ldr	r2, [r7, #0]
 804c650:	429a      	cmp	r2, r3
 804c652:	d102      	bne.n	804c65a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 804c654:	68fb      	ldr	r3, [r7, #12]
 804c656:	2200      	movs	r2, #0
 804c658:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 804c65a:	68fb      	ldr	r3, [r7, #12]
 804c65c:	68db      	ldr	r3, [r3, #12]
 804c65e:	60fb      	str	r3, [r7, #12]
 804c660:	68fb      	ldr	r3, [r7, #12]
 804c662:	2b00      	cmp	r3, #0
 804c664:	d1f1      	bne.n	804c64a <tcp_remove_listener+0x22>
    }
  }
}
 804c666:	bf00      	nop
 804c668:	bf00      	nop
 804c66a:	3710      	adds	r7, #16
 804c66c:	46bd      	mov	sp, r7
 804c66e:	bd80      	pop	{r7, pc}
 804c670:	08056528 	.word	0x08056528
 804c674:	080565b0 	.word	0x080565b0
 804c678:	0805656c 	.word	0x0805656c

0804c67c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 804c67c:	b580      	push	{r7, lr}
 804c67e:	b084      	sub	sp, #16
 804c680:	af00      	add	r7, sp, #0
 804c682:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 804c684:	687b      	ldr	r3, [r7, #4]
 804c686:	2b00      	cmp	r3, #0
 804c688:	d106      	bne.n	804c698 <tcp_listen_closed+0x1c>
 804c68a:	4b14      	ldr	r3, [pc, #80]	; (804c6dc <tcp_listen_closed+0x60>)
 804c68c:	f240 1211 	movw	r2, #273	; 0x111
 804c690:	4913      	ldr	r1, [pc, #76]	; (804c6e0 <tcp_listen_closed+0x64>)
 804c692:	4814      	ldr	r0, [pc, #80]	; (804c6e4 <tcp_listen_closed+0x68>)
 804c694:	f008 f8d4 	bl	8054840 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 804c698:	687b      	ldr	r3, [r7, #4]
 804c69a:	7d1b      	ldrb	r3, [r3, #20]
 804c69c:	2b01      	cmp	r3, #1
 804c69e:	d006      	beq.n	804c6ae <tcp_listen_closed+0x32>
 804c6a0:	4b0e      	ldr	r3, [pc, #56]	; (804c6dc <tcp_listen_closed+0x60>)
 804c6a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 804c6a6:	4910      	ldr	r1, [pc, #64]	; (804c6e8 <tcp_listen_closed+0x6c>)
 804c6a8:	480e      	ldr	r0, [pc, #56]	; (804c6e4 <tcp_listen_closed+0x68>)
 804c6aa:	f008 f8c9 	bl	8054840 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 804c6ae:	2301      	movs	r3, #1
 804c6b0:	60fb      	str	r3, [r7, #12]
 804c6b2:	e00b      	b.n	804c6cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 804c6b4:	4a0d      	ldr	r2, [pc, #52]	; (804c6ec <tcp_listen_closed+0x70>)
 804c6b6:	68fb      	ldr	r3, [r7, #12]
 804c6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804c6bc:	681b      	ldr	r3, [r3, #0]
 804c6be:	6879      	ldr	r1, [r7, #4]
 804c6c0:	4618      	mov	r0, r3
 804c6c2:	f7ff ffb1 	bl	804c628 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 804c6c6:	68fb      	ldr	r3, [r7, #12]
 804c6c8:	3301      	adds	r3, #1
 804c6ca:	60fb      	str	r3, [r7, #12]
 804c6cc:	68fb      	ldr	r3, [r7, #12]
 804c6ce:	2b03      	cmp	r3, #3
 804c6d0:	d9f0      	bls.n	804c6b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 804c6d2:	bf00      	nop
 804c6d4:	bf00      	nop
 804c6d6:	3710      	adds	r7, #16
 804c6d8:	46bd      	mov	sp, r7
 804c6da:	bd80      	pop	{r7, pc}
 804c6dc:	08056528 	.word	0x08056528
 804c6e0:	080565d8 	.word	0x080565d8
 804c6e4:	0805656c 	.word	0x0805656c
 804c6e8:	080565e4 	.word	0x080565e4
 804c6ec:	08058550 	.word	0x08058550

0804c6f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 804c6f0:	b5b0      	push	{r4, r5, r7, lr}
 804c6f2:	b088      	sub	sp, #32
 804c6f4:	af04      	add	r7, sp, #16
 804c6f6:	6078      	str	r0, [r7, #4]
 804c6f8:	460b      	mov	r3, r1
 804c6fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 804c6fc:	687b      	ldr	r3, [r7, #4]
 804c6fe:	2b00      	cmp	r3, #0
 804c700:	d106      	bne.n	804c710 <tcp_close_shutdown+0x20>
 804c702:	4b63      	ldr	r3, [pc, #396]	; (804c890 <tcp_close_shutdown+0x1a0>)
 804c704:	f44f 72af 	mov.w	r2, #350	; 0x15e
 804c708:	4962      	ldr	r1, [pc, #392]	; (804c894 <tcp_close_shutdown+0x1a4>)
 804c70a:	4863      	ldr	r0, [pc, #396]	; (804c898 <tcp_close_shutdown+0x1a8>)
 804c70c:	f008 f898 	bl	8054840 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 804c710:	78fb      	ldrb	r3, [r7, #3]
 804c712:	2b00      	cmp	r3, #0
 804c714:	d066      	beq.n	804c7e4 <tcp_close_shutdown+0xf4>
 804c716:	687b      	ldr	r3, [r7, #4]
 804c718:	7d1b      	ldrb	r3, [r3, #20]
 804c71a:	2b04      	cmp	r3, #4
 804c71c:	d003      	beq.n	804c726 <tcp_close_shutdown+0x36>
 804c71e:	687b      	ldr	r3, [r7, #4]
 804c720:	7d1b      	ldrb	r3, [r3, #20]
 804c722:	2b07      	cmp	r3, #7
 804c724:	d15e      	bne.n	804c7e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 804c726:	687b      	ldr	r3, [r7, #4]
 804c728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804c72a:	2b00      	cmp	r3, #0
 804c72c:	d104      	bne.n	804c738 <tcp_close_shutdown+0x48>
 804c72e:	687b      	ldr	r3, [r7, #4]
 804c730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804c732:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 804c736:	d055      	beq.n	804c7e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 804c738:	687b      	ldr	r3, [r7, #4]
 804c73a:	8b5b      	ldrh	r3, [r3, #26]
 804c73c:	f003 0310 	and.w	r3, r3, #16
 804c740:	2b00      	cmp	r3, #0
 804c742:	d106      	bne.n	804c752 <tcp_close_shutdown+0x62>
 804c744:	4b52      	ldr	r3, [pc, #328]	; (804c890 <tcp_close_shutdown+0x1a0>)
 804c746:	f44f 72b2 	mov.w	r2, #356	; 0x164
 804c74a:	4954      	ldr	r1, [pc, #336]	; (804c89c <tcp_close_shutdown+0x1ac>)
 804c74c:	4852      	ldr	r0, [pc, #328]	; (804c898 <tcp_close_shutdown+0x1a8>)
 804c74e:	f008 f877 	bl	8054840 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 804c752:	687b      	ldr	r3, [r7, #4]
 804c754:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804c756:	687b      	ldr	r3, [r7, #4]
 804c758:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 804c75a:	687d      	ldr	r5, [r7, #4]
 804c75c:	687b      	ldr	r3, [r7, #4]
 804c75e:	3304      	adds	r3, #4
 804c760:	687a      	ldr	r2, [r7, #4]
 804c762:	8ad2      	ldrh	r2, [r2, #22]
 804c764:	6879      	ldr	r1, [r7, #4]
 804c766:	8b09      	ldrh	r1, [r1, #24]
 804c768:	9102      	str	r1, [sp, #8]
 804c76a:	9201      	str	r2, [sp, #4]
 804c76c:	9300      	str	r3, [sp, #0]
 804c76e:	462b      	mov	r3, r5
 804c770:	4622      	mov	r2, r4
 804c772:	4601      	mov	r1, r0
 804c774:	6878      	ldr	r0, [r7, #4]
 804c776:	f004 fe91 	bl	805149c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 804c77a:	6878      	ldr	r0, [r7, #4]
 804c77c:	f001 f8c6 	bl	804d90c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 804c780:	4b47      	ldr	r3, [pc, #284]	; (804c8a0 <tcp_close_shutdown+0x1b0>)
 804c782:	681b      	ldr	r3, [r3, #0]
 804c784:	687a      	ldr	r2, [r7, #4]
 804c786:	429a      	cmp	r2, r3
 804c788:	d105      	bne.n	804c796 <tcp_close_shutdown+0xa6>
 804c78a:	4b45      	ldr	r3, [pc, #276]	; (804c8a0 <tcp_close_shutdown+0x1b0>)
 804c78c:	681b      	ldr	r3, [r3, #0]
 804c78e:	68db      	ldr	r3, [r3, #12]
 804c790:	4a43      	ldr	r2, [pc, #268]	; (804c8a0 <tcp_close_shutdown+0x1b0>)
 804c792:	6013      	str	r3, [r2, #0]
 804c794:	e013      	b.n	804c7be <tcp_close_shutdown+0xce>
 804c796:	4b42      	ldr	r3, [pc, #264]	; (804c8a0 <tcp_close_shutdown+0x1b0>)
 804c798:	681b      	ldr	r3, [r3, #0]
 804c79a:	60fb      	str	r3, [r7, #12]
 804c79c:	e00c      	b.n	804c7b8 <tcp_close_shutdown+0xc8>
 804c79e:	68fb      	ldr	r3, [r7, #12]
 804c7a0:	68db      	ldr	r3, [r3, #12]
 804c7a2:	687a      	ldr	r2, [r7, #4]
 804c7a4:	429a      	cmp	r2, r3
 804c7a6:	d104      	bne.n	804c7b2 <tcp_close_shutdown+0xc2>
 804c7a8:	687b      	ldr	r3, [r7, #4]
 804c7aa:	68da      	ldr	r2, [r3, #12]
 804c7ac:	68fb      	ldr	r3, [r7, #12]
 804c7ae:	60da      	str	r2, [r3, #12]
 804c7b0:	e005      	b.n	804c7be <tcp_close_shutdown+0xce>
 804c7b2:	68fb      	ldr	r3, [r7, #12]
 804c7b4:	68db      	ldr	r3, [r3, #12]
 804c7b6:	60fb      	str	r3, [r7, #12]
 804c7b8:	68fb      	ldr	r3, [r7, #12]
 804c7ba:	2b00      	cmp	r3, #0
 804c7bc:	d1ef      	bne.n	804c79e <tcp_close_shutdown+0xae>
 804c7be:	687b      	ldr	r3, [r7, #4]
 804c7c0:	2200      	movs	r2, #0
 804c7c2:	60da      	str	r2, [r3, #12]
 804c7c4:	4b37      	ldr	r3, [pc, #220]	; (804c8a4 <tcp_close_shutdown+0x1b4>)
 804c7c6:	2201      	movs	r2, #1
 804c7c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 804c7ca:	4b37      	ldr	r3, [pc, #220]	; (804c8a8 <tcp_close_shutdown+0x1b8>)
 804c7cc:	681b      	ldr	r3, [r3, #0]
 804c7ce:	687a      	ldr	r2, [r7, #4]
 804c7d0:	429a      	cmp	r2, r3
 804c7d2:	d102      	bne.n	804c7da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 804c7d4:	f003 fd5e 	bl	8050294 <tcp_trigger_input_pcb_close>
 804c7d8:	e002      	b.n	804c7e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 804c7da:	6878      	ldr	r0, [r7, #4]
 804c7dc:	f7ff fed6 	bl	804c58c <tcp_free>
      }
      return ERR_OK;
 804c7e0:	2300      	movs	r3, #0
 804c7e2:	e050      	b.n	804c886 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 804c7e4:	687b      	ldr	r3, [r7, #4]
 804c7e6:	7d1b      	ldrb	r3, [r3, #20]
 804c7e8:	2b02      	cmp	r3, #2
 804c7ea:	d03b      	beq.n	804c864 <tcp_close_shutdown+0x174>
 804c7ec:	2b02      	cmp	r3, #2
 804c7ee:	dc44      	bgt.n	804c87a <tcp_close_shutdown+0x18a>
 804c7f0:	2b00      	cmp	r3, #0
 804c7f2:	d002      	beq.n	804c7fa <tcp_close_shutdown+0x10a>
 804c7f4:	2b01      	cmp	r3, #1
 804c7f6:	d02a      	beq.n	804c84e <tcp_close_shutdown+0x15e>
 804c7f8:	e03f      	b.n	804c87a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 804c7fa:	687b      	ldr	r3, [r7, #4]
 804c7fc:	8adb      	ldrh	r3, [r3, #22]
 804c7fe:	2b00      	cmp	r3, #0
 804c800:	d021      	beq.n	804c846 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 804c802:	4b2a      	ldr	r3, [pc, #168]	; (804c8ac <tcp_close_shutdown+0x1bc>)
 804c804:	681b      	ldr	r3, [r3, #0]
 804c806:	687a      	ldr	r2, [r7, #4]
 804c808:	429a      	cmp	r2, r3
 804c80a:	d105      	bne.n	804c818 <tcp_close_shutdown+0x128>
 804c80c:	4b27      	ldr	r3, [pc, #156]	; (804c8ac <tcp_close_shutdown+0x1bc>)
 804c80e:	681b      	ldr	r3, [r3, #0]
 804c810:	68db      	ldr	r3, [r3, #12]
 804c812:	4a26      	ldr	r2, [pc, #152]	; (804c8ac <tcp_close_shutdown+0x1bc>)
 804c814:	6013      	str	r3, [r2, #0]
 804c816:	e013      	b.n	804c840 <tcp_close_shutdown+0x150>
 804c818:	4b24      	ldr	r3, [pc, #144]	; (804c8ac <tcp_close_shutdown+0x1bc>)
 804c81a:	681b      	ldr	r3, [r3, #0]
 804c81c:	60bb      	str	r3, [r7, #8]
 804c81e:	e00c      	b.n	804c83a <tcp_close_shutdown+0x14a>
 804c820:	68bb      	ldr	r3, [r7, #8]
 804c822:	68db      	ldr	r3, [r3, #12]
 804c824:	687a      	ldr	r2, [r7, #4]
 804c826:	429a      	cmp	r2, r3
 804c828:	d104      	bne.n	804c834 <tcp_close_shutdown+0x144>
 804c82a:	687b      	ldr	r3, [r7, #4]
 804c82c:	68da      	ldr	r2, [r3, #12]
 804c82e:	68bb      	ldr	r3, [r7, #8]
 804c830:	60da      	str	r2, [r3, #12]
 804c832:	e005      	b.n	804c840 <tcp_close_shutdown+0x150>
 804c834:	68bb      	ldr	r3, [r7, #8]
 804c836:	68db      	ldr	r3, [r3, #12]
 804c838:	60bb      	str	r3, [r7, #8]
 804c83a:	68bb      	ldr	r3, [r7, #8]
 804c83c:	2b00      	cmp	r3, #0
 804c83e:	d1ef      	bne.n	804c820 <tcp_close_shutdown+0x130>
 804c840:	687b      	ldr	r3, [r7, #4]
 804c842:	2200      	movs	r2, #0
 804c844:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 804c846:	6878      	ldr	r0, [r7, #4]
 804c848:	f7ff fea0 	bl	804c58c <tcp_free>
      break;
 804c84c:	e01a      	b.n	804c884 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 804c84e:	6878      	ldr	r0, [r7, #4]
 804c850:	f7ff ff14 	bl	804c67c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 804c854:	6879      	ldr	r1, [r7, #4]
 804c856:	4816      	ldr	r0, [pc, #88]	; (804c8b0 <tcp_close_shutdown+0x1c0>)
 804c858:	f001 f8a8 	bl	804d9ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 804c85c:	6878      	ldr	r0, [r7, #4]
 804c85e:	f7ff feb1 	bl	804c5c4 <tcp_free_listen>
      break;
 804c862:	e00f      	b.n	804c884 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 804c864:	6879      	ldr	r1, [r7, #4]
 804c866:	480e      	ldr	r0, [pc, #56]	; (804c8a0 <tcp_close_shutdown+0x1b0>)
 804c868:	f001 f8a0 	bl	804d9ac <tcp_pcb_remove>
 804c86c:	4b0d      	ldr	r3, [pc, #52]	; (804c8a4 <tcp_close_shutdown+0x1b4>)
 804c86e:	2201      	movs	r2, #1
 804c870:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 804c872:	6878      	ldr	r0, [r7, #4]
 804c874:	f7ff fe8a 	bl	804c58c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 804c878:	e004      	b.n	804c884 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 804c87a:	6878      	ldr	r0, [r7, #4]
 804c87c:	f000 f81a 	bl	804c8b4 <tcp_close_shutdown_fin>
 804c880:	4603      	mov	r3, r0
 804c882:	e000      	b.n	804c886 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 804c884:	2300      	movs	r3, #0
}
 804c886:	4618      	mov	r0, r3
 804c888:	3710      	adds	r7, #16
 804c88a:	46bd      	mov	sp, r7
 804c88c:	bdb0      	pop	{r4, r5, r7, pc}
 804c88e:	bf00      	nop
 804c890:	08056528 	.word	0x08056528
 804c894:	080565fc 	.word	0x080565fc
 804c898:	0805656c 	.word	0x0805656c
 804c89c:	0805661c 	.word	0x0805661c
 804c8a0:	200237d8 	.word	0x200237d8
 804c8a4:	200237e0 	.word	0x200237e0
 804c8a8:	20023818 	.word	0x20023818
 804c8ac:	200237d0 	.word	0x200237d0
 804c8b0:	200237d4 	.word	0x200237d4

0804c8b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 804c8b4:	b580      	push	{r7, lr}
 804c8b6:	b084      	sub	sp, #16
 804c8b8:	af00      	add	r7, sp, #0
 804c8ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 804c8bc:	687b      	ldr	r3, [r7, #4]
 804c8be:	2b00      	cmp	r3, #0
 804c8c0:	d106      	bne.n	804c8d0 <tcp_close_shutdown_fin+0x1c>
 804c8c2:	4b2e      	ldr	r3, [pc, #184]	; (804c97c <tcp_close_shutdown_fin+0xc8>)
 804c8c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 804c8c8:	492d      	ldr	r1, [pc, #180]	; (804c980 <tcp_close_shutdown_fin+0xcc>)
 804c8ca:	482e      	ldr	r0, [pc, #184]	; (804c984 <tcp_close_shutdown_fin+0xd0>)
 804c8cc:	f007 ffb8 	bl	8054840 <iprintf>

  switch (pcb->state) {
 804c8d0:	687b      	ldr	r3, [r7, #4]
 804c8d2:	7d1b      	ldrb	r3, [r3, #20]
 804c8d4:	2b07      	cmp	r3, #7
 804c8d6:	d020      	beq.n	804c91a <tcp_close_shutdown_fin+0x66>
 804c8d8:	2b07      	cmp	r3, #7
 804c8da:	dc2b      	bgt.n	804c934 <tcp_close_shutdown_fin+0x80>
 804c8dc:	2b03      	cmp	r3, #3
 804c8de:	d002      	beq.n	804c8e6 <tcp_close_shutdown_fin+0x32>
 804c8e0:	2b04      	cmp	r3, #4
 804c8e2:	d00d      	beq.n	804c900 <tcp_close_shutdown_fin+0x4c>
 804c8e4:	e026      	b.n	804c934 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 804c8e6:	6878      	ldr	r0, [r7, #4]
 804c8e8:	f003 fee6 	bl	80506b8 <tcp_send_fin>
 804c8ec:	4603      	mov	r3, r0
 804c8ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 804c8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804c8f4:	2b00      	cmp	r3, #0
 804c8f6:	d11f      	bne.n	804c938 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 804c8f8:	687b      	ldr	r3, [r7, #4]
 804c8fa:	2205      	movs	r2, #5
 804c8fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 804c8fe:	e01b      	b.n	804c938 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 804c900:	6878      	ldr	r0, [r7, #4]
 804c902:	f003 fed9 	bl	80506b8 <tcp_send_fin>
 804c906:	4603      	mov	r3, r0
 804c908:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 804c90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804c90e:	2b00      	cmp	r3, #0
 804c910:	d114      	bne.n	804c93c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 804c912:	687b      	ldr	r3, [r7, #4]
 804c914:	2205      	movs	r2, #5
 804c916:	751a      	strb	r2, [r3, #20]
      }
      break;
 804c918:	e010      	b.n	804c93c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 804c91a:	6878      	ldr	r0, [r7, #4]
 804c91c:	f003 fecc 	bl	80506b8 <tcp_send_fin>
 804c920:	4603      	mov	r3, r0
 804c922:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 804c924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804c928:	2b00      	cmp	r3, #0
 804c92a:	d109      	bne.n	804c940 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 804c92c:	687b      	ldr	r3, [r7, #4]
 804c92e:	2209      	movs	r2, #9
 804c930:	751a      	strb	r2, [r3, #20]
      }
      break;
 804c932:	e005      	b.n	804c940 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 804c934:	2300      	movs	r3, #0
 804c936:	e01c      	b.n	804c972 <tcp_close_shutdown_fin+0xbe>
      break;
 804c938:	bf00      	nop
 804c93a:	e002      	b.n	804c942 <tcp_close_shutdown_fin+0x8e>
      break;
 804c93c:	bf00      	nop
 804c93e:	e000      	b.n	804c942 <tcp_close_shutdown_fin+0x8e>
      break;
 804c940:	bf00      	nop
  }

  if (err == ERR_OK) {
 804c942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804c946:	2b00      	cmp	r3, #0
 804c948:	d103      	bne.n	804c952 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 804c94a:	6878      	ldr	r0, [r7, #4]
 804c94c:	f003 fff2 	bl	8050934 <tcp_output>
 804c950:	e00d      	b.n	804c96e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 804c952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804c956:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c95a:	d108      	bne.n	804c96e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 804c95c:	687b      	ldr	r3, [r7, #4]
 804c95e:	8b5b      	ldrh	r3, [r3, #26]
 804c960:	f043 0308 	orr.w	r3, r3, #8
 804c964:	b29a      	uxth	r2, r3
 804c966:	687b      	ldr	r3, [r7, #4]
 804c968:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 804c96a:	2300      	movs	r3, #0
 804c96c:	e001      	b.n	804c972 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 804c96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 804c972:	4618      	mov	r0, r3
 804c974:	3710      	adds	r7, #16
 804c976:	46bd      	mov	sp, r7
 804c978:	bd80      	pop	{r7, pc}
 804c97a:	bf00      	nop
 804c97c:	08056528 	.word	0x08056528
 804c980:	080565d8 	.word	0x080565d8
 804c984:	0805656c 	.word	0x0805656c

0804c988 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 804c988:	b580      	push	{r7, lr}
 804c98a:	b082      	sub	sp, #8
 804c98c:	af00      	add	r7, sp, #0
 804c98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 804c990:	687b      	ldr	r3, [r7, #4]
 804c992:	2b00      	cmp	r3, #0
 804c994:	d109      	bne.n	804c9aa <tcp_close+0x22>
 804c996:	4b0f      	ldr	r3, [pc, #60]	; (804c9d4 <tcp_close+0x4c>)
 804c998:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 804c99c:	490e      	ldr	r1, [pc, #56]	; (804c9d8 <tcp_close+0x50>)
 804c99e:	480f      	ldr	r0, [pc, #60]	; (804c9dc <tcp_close+0x54>)
 804c9a0:	f007 ff4e 	bl	8054840 <iprintf>
 804c9a4:	f06f 030f 	mvn.w	r3, #15
 804c9a8:	e00f      	b.n	804c9ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 804c9aa:	687b      	ldr	r3, [r7, #4]
 804c9ac:	7d1b      	ldrb	r3, [r3, #20]
 804c9ae:	2b01      	cmp	r3, #1
 804c9b0:	d006      	beq.n	804c9c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 804c9b2:	687b      	ldr	r3, [r7, #4]
 804c9b4:	8b5b      	ldrh	r3, [r3, #26]
 804c9b6:	f043 0310 	orr.w	r3, r3, #16
 804c9ba:	b29a      	uxth	r2, r3
 804c9bc:	687b      	ldr	r3, [r7, #4]
 804c9be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 804c9c0:	2101      	movs	r1, #1
 804c9c2:	6878      	ldr	r0, [r7, #4]
 804c9c4:	f7ff fe94 	bl	804c6f0 <tcp_close_shutdown>
 804c9c8:	4603      	mov	r3, r0
}
 804c9ca:	4618      	mov	r0, r3
 804c9cc:	3708      	adds	r7, #8
 804c9ce:	46bd      	mov	sp, r7
 804c9d0:	bd80      	pop	{r7, pc}
 804c9d2:	bf00      	nop
 804c9d4:	08056528 	.word	0x08056528
 804c9d8:	08056638 	.word	0x08056638
 804c9dc:	0805656c 	.word	0x0805656c

0804c9e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 804c9e0:	b580      	push	{r7, lr}
 804c9e2:	b08e      	sub	sp, #56	; 0x38
 804c9e4:	af04      	add	r7, sp, #16
 804c9e6:	6078      	str	r0, [r7, #4]
 804c9e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 804c9ea:	687b      	ldr	r3, [r7, #4]
 804c9ec:	2b00      	cmp	r3, #0
 804c9ee:	d107      	bne.n	804ca00 <tcp_abandon+0x20>
 804c9f0:	4b52      	ldr	r3, [pc, #328]	; (804cb3c <tcp_abandon+0x15c>)
 804c9f2:	f240 223d 	movw	r2, #573	; 0x23d
 804c9f6:	4952      	ldr	r1, [pc, #328]	; (804cb40 <tcp_abandon+0x160>)
 804c9f8:	4852      	ldr	r0, [pc, #328]	; (804cb44 <tcp_abandon+0x164>)
 804c9fa:	f007 ff21 	bl	8054840 <iprintf>
 804c9fe:	e099      	b.n	804cb34 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 804ca00:	687b      	ldr	r3, [r7, #4]
 804ca02:	7d1b      	ldrb	r3, [r3, #20]
 804ca04:	2b01      	cmp	r3, #1
 804ca06:	d106      	bne.n	804ca16 <tcp_abandon+0x36>
 804ca08:	4b4c      	ldr	r3, [pc, #304]	; (804cb3c <tcp_abandon+0x15c>)
 804ca0a:	f44f 7210 	mov.w	r2, #576	; 0x240
 804ca0e:	494e      	ldr	r1, [pc, #312]	; (804cb48 <tcp_abandon+0x168>)
 804ca10:	484c      	ldr	r0, [pc, #304]	; (804cb44 <tcp_abandon+0x164>)
 804ca12:	f007 ff15 	bl	8054840 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 804ca16:	687b      	ldr	r3, [r7, #4]
 804ca18:	7d1b      	ldrb	r3, [r3, #20]
 804ca1a:	2b0a      	cmp	r3, #10
 804ca1c:	d107      	bne.n	804ca2e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 804ca1e:	6879      	ldr	r1, [r7, #4]
 804ca20:	484a      	ldr	r0, [pc, #296]	; (804cb4c <tcp_abandon+0x16c>)
 804ca22:	f000 ffc3 	bl	804d9ac <tcp_pcb_remove>
    tcp_free(pcb);
 804ca26:	6878      	ldr	r0, [r7, #4]
 804ca28:	f7ff fdb0 	bl	804c58c <tcp_free>
 804ca2c:	e082      	b.n	804cb34 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 804ca2e:	2300      	movs	r3, #0
 804ca30:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 804ca32:	2300      	movs	r3, #0
 804ca34:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 804ca36:	687b      	ldr	r3, [r7, #4]
 804ca38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804ca3a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 804ca3c:	687b      	ldr	r3, [r7, #4]
 804ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ca40:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 804ca42:	687b      	ldr	r3, [r7, #4]
 804ca44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ca48:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 804ca4a:	687b      	ldr	r3, [r7, #4]
 804ca4c:	691b      	ldr	r3, [r3, #16]
 804ca4e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 804ca50:	687b      	ldr	r3, [r7, #4]
 804ca52:	7d1b      	ldrb	r3, [r3, #20]
 804ca54:	2b00      	cmp	r3, #0
 804ca56:	d126      	bne.n	804caa6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 804ca58:	687b      	ldr	r3, [r7, #4]
 804ca5a:	8adb      	ldrh	r3, [r3, #22]
 804ca5c:	2b00      	cmp	r3, #0
 804ca5e:	d02e      	beq.n	804cabe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 804ca60:	4b3b      	ldr	r3, [pc, #236]	; (804cb50 <tcp_abandon+0x170>)
 804ca62:	681b      	ldr	r3, [r3, #0]
 804ca64:	687a      	ldr	r2, [r7, #4]
 804ca66:	429a      	cmp	r2, r3
 804ca68:	d105      	bne.n	804ca76 <tcp_abandon+0x96>
 804ca6a:	4b39      	ldr	r3, [pc, #228]	; (804cb50 <tcp_abandon+0x170>)
 804ca6c:	681b      	ldr	r3, [r3, #0]
 804ca6e:	68db      	ldr	r3, [r3, #12]
 804ca70:	4a37      	ldr	r2, [pc, #220]	; (804cb50 <tcp_abandon+0x170>)
 804ca72:	6013      	str	r3, [r2, #0]
 804ca74:	e013      	b.n	804ca9e <tcp_abandon+0xbe>
 804ca76:	4b36      	ldr	r3, [pc, #216]	; (804cb50 <tcp_abandon+0x170>)
 804ca78:	681b      	ldr	r3, [r3, #0]
 804ca7a:	61fb      	str	r3, [r7, #28]
 804ca7c:	e00c      	b.n	804ca98 <tcp_abandon+0xb8>
 804ca7e:	69fb      	ldr	r3, [r7, #28]
 804ca80:	68db      	ldr	r3, [r3, #12]
 804ca82:	687a      	ldr	r2, [r7, #4]
 804ca84:	429a      	cmp	r2, r3
 804ca86:	d104      	bne.n	804ca92 <tcp_abandon+0xb2>
 804ca88:	687b      	ldr	r3, [r7, #4]
 804ca8a:	68da      	ldr	r2, [r3, #12]
 804ca8c:	69fb      	ldr	r3, [r7, #28]
 804ca8e:	60da      	str	r2, [r3, #12]
 804ca90:	e005      	b.n	804ca9e <tcp_abandon+0xbe>
 804ca92:	69fb      	ldr	r3, [r7, #28]
 804ca94:	68db      	ldr	r3, [r3, #12]
 804ca96:	61fb      	str	r3, [r7, #28]
 804ca98:	69fb      	ldr	r3, [r7, #28]
 804ca9a:	2b00      	cmp	r3, #0
 804ca9c:	d1ef      	bne.n	804ca7e <tcp_abandon+0x9e>
 804ca9e:	687b      	ldr	r3, [r7, #4]
 804caa0:	2200      	movs	r2, #0
 804caa2:	60da      	str	r2, [r3, #12]
 804caa4:	e00b      	b.n	804cabe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 804caa6:	683b      	ldr	r3, [r7, #0]
 804caa8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 804caaa:	687b      	ldr	r3, [r7, #4]
 804caac:	8adb      	ldrh	r3, [r3, #22]
 804caae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 804cab0:	6879      	ldr	r1, [r7, #4]
 804cab2:	4828      	ldr	r0, [pc, #160]	; (804cb54 <tcp_abandon+0x174>)
 804cab4:	f000 ff7a 	bl	804d9ac <tcp_pcb_remove>
 804cab8:	4b27      	ldr	r3, [pc, #156]	; (804cb58 <tcp_abandon+0x178>)
 804caba:	2201      	movs	r2, #1
 804cabc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 804cabe:	687b      	ldr	r3, [r7, #4]
 804cac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804cac2:	2b00      	cmp	r3, #0
 804cac4:	d004      	beq.n	804cad0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 804cac6:	687b      	ldr	r3, [r7, #4]
 804cac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804caca:	4618      	mov	r0, r3
 804cacc:	f000 fd1c 	bl	804d508 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 804cad0:	687b      	ldr	r3, [r7, #4]
 804cad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804cad4:	2b00      	cmp	r3, #0
 804cad6:	d004      	beq.n	804cae2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 804cad8:	687b      	ldr	r3, [r7, #4]
 804cada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804cadc:	4618      	mov	r0, r3
 804cade:	f000 fd13 	bl	804d508 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 804cae2:	687b      	ldr	r3, [r7, #4]
 804cae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804cae6:	2b00      	cmp	r3, #0
 804cae8:	d004      	beq.n	804caf4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 804caea:	687b      	ldr	r3, [r7, #4]
 804caec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804caee:	4618      	mov	r0, r3
 804caf0:	f000 fd0a 	bl	804d508 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 804caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804caf6:	2b00      	cmp	r3, #0
 804caf8:	d00e      	beq.n	804cb18 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 804cafa:	6879      	ldr	r1, [r7, #4]
 804cafc:	687b      	ldr	r3, [r7, #4]
 804cafe:	3304      	adds	r3, #4
 804cb00:	687a      	ldr	r2, [r7, #4]
 804cb02:	8b12      	ldrh	r2, [r2, #24]
 804cb04:	9202      	str	r2, [sp, #8]
 804cb06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 804cb08:	9201      	str	r2, [sp, #4]
 804cb0a:	9300      	str	r3, [sp, #0]
 804cb0c:	460b      	mov	r3, r1
 804cb0e:	697a      	ldr	r2, [r7, #20]
 804cb10:	69b9      	ldr	r1, [r7, #24]
 804cb12:	6878      	ldr	r0, [r7, #4]
 804cb14:	f004 fcc2 	bl	805149c <tcp_rst>
    }
    last_state = pcb->state;
 804cb18:	687b      	ldr	r3, [r7, #4]
 804cb1a:	7d1b      	ldrb	r3, [r3, #20]
 804cb1c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 804cb1e:	6878      	ldr	r0, [r7, #4]
 804cb20:	f7ff fd34 	bl	804c58c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 804cb24:	693b      	ldr	r3, [r7, #16]
 804cb26:	2b00      	cmp	r3, #0
 804cb28:	d004      	beq.n	804cb34 <tcp_abandon+0x154>
 804cb2a:	693b      	ldr	r3, [r7, #16]
 804cb2c:	f06f 010c 	mvn.w	r1, #12
 804cb30:	68f8      	ldr	r0, [r7, #12]
 804cb32:	4798      	blx	r3
  }
}
 804cb34:	3728      	adds	r7, #40	; 0x28
 804cb36:	46bd      	mov	sp, r7
 804cb38:	bd80      	pop	{r7, pc}
 804cb3a:	bf00      	nop
 804cb3c:	08056528 	.word	0x08056528
 804cb40:	0805666c 	.word	0x0805666c
 804cb44:	0805656c 	.word	0x0805656c
 804cb48:	08056688 	.word	0x08056688
 804cb4c:	200237dc 	.word	0x200237dc
 804cb50:	200237d0 	.word	0x200237d0
 804cb54:	200237d8 	.word	0x200237d8
 804cb58:	200237e0 	.word	0x200237e0

0804cb5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 804cb5c:	b580      	push	{r7, lr}
 804cb5e:	b082      	sub	sp, #8
 804cb60:	af00      	add	r7, sp, #0
 804cb62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 804cb64:	2101      	movs	r1, #1
 804cb66:	6878      	ldr	r0, [r7, #4]
 804cb68:	f7ff ff3a 	bl	804c9e0 <tcp_abandon>
}
 804cb6c:	bf00      	nop
 804cb6e:	3708      	adds	r7, #8
 804cb70:	46bd      	mov	sp, r7
 804cb72:	bd80      	pop	{r7, pc}

0804cb74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 804cb74:	b580      	push	{r7, lr}
 804cb76:	b084      	sub	sp, #16
 804cb78:	af00      	add	r7, sp, #0
 804cb7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 804cb7c:	687b      	ldr	r3, [r7, #4]
 804cb7e:	2b00      	cmp	r3, #0
 804cb80:	d106      	bne.n	804cb90 <tcp_update_rcv_ann_wnd+0x1c>
 804cb82:	4b25      	ldr	r3, [pc, #148]	; (804cc18 <tcp_update_rcv_ann_wnd+0xa4>)
 804cb84:	f240 32a6 	movw	r2, #934	; 0x3a6
 804cb88:	4924      	ldr	r1, [pc, #144]	; (804cc1c <tcp_update_rcv_ann_wnd+0xa8>)
 804cb8a:	4825      	ldr	r0, [pc, #148]	; (804cc20 <tcp_update_rcv_ann_wnd+0xac>)
 804cb8c:	f007 fe58 	bl	8054840 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 804cb90:	687b      	ldr	r3, [r7, #4]
 804cb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cb94:	687a      	ldr	r2, [r7, #4]
 804cb96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 804cb98:	4413      	add	r3, r2
 804cb9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 804cb9c:	687b      	ldr	r3, [r7, #4]
 804cb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804cba0:	687a      	ldr	r2, [r7, #4]
 804cba2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 804cba4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 804cba8:	bf28      	it	cs
 804cbaa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 804cbae:	b292      	uxth	r2, r2
 804cbb0:	4413      	add	r3, r2
 804cbb2:	68fa      	ldr	r2, [r7, #12]
 804cbb4:	1ad3      	subs	r3, r2, r3
 804cbb6:	2b00      	cmp	r3, #0
 804cbb8:	db08      	blt.n	804cbcc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 804cbba:	687b      	ldr	r3, [r7, #4]
 804cbbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804cbbe:	687b      	ldr	r3, [r7, #4]
 804cbc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 804cbc2:	687b      	ldr	r3, [r7, #4]
 804cbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804cbc6:	68fa      	ldr	r2, [r7, #12]
 804cbc8:	1ad3      	subs	r3, r2, r3
 804cbca:	e020      	b.n	804cc0e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 804cbcc:	687b      	ldr	r3, [r7, #4]
 804cbce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804cbd0:	687b      	ldr	r3, [r7, #4]
 804cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804cbd4:	1ad3      	subs	r3, r2, r3
 804cbd6:	2b00      	cmp	r3, #0
 804cbd8:	dd03      	ble.n	804cbe2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 804cbda:	687b      	ldr	r3, [r7, #4]
 804cbdc:	2200      	movs	r2, #0
 804cbde:	855a      	strh	r2, [r3, #42]	; 0x2a
 804cbe0:	e014      	b.n	804cc0c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 804cbe2:	687b      	ldr	r3, [r7, #4]
 804cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804cbe6:	687b      	ldr	r3, [r7, #4]
 804cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cbea:	1ad3      	subs	r3, r2, r3
 804cbec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 804cbee:	68bb      	ldr	r3, [r7, #8]
 804cbf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804cbf4:	d306      	bcc.n	804cc04 <tcp_update_rcv_ann_wnd+0x90>
 804cbf6:	4b08      	ldr	r3, [pc, #32]	; (804cc18 <tcp_update_rcv_ann_wnd+0xa4>)
 804cbf8:	f240 32b6 	movw	r2, #950	; 0x3b6
 804cbfc:	4909      	ldr	r1, [pc, #36]	; (804cc24 <tcp_update_rcv_ann_wnd+0xb0>)
 804cbfe:	4808      	ldr	r0, [pc, #32]	; (804cc20 <tcp_update_rcv_ann_wnd+0xac>)
 804cc00:	f007 fe1e 	bl	8054840 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 804cc04:	68bb      	ldr	r3, [r7, #8]
 804cc06:	b29a      	uxth	r2, r3
 804cc08:	687b      	ldr	r3, [r7, #4]
 804cc0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 804cc0c:	2300      	movs	r3, #0
  }
}
 804cc0e:	4618      	mov	r0, r3
 804cc10:	3710      	adds	r7, #16
 804cc12:	46bd      	mov	sp, r7
 804cc14:	bd80      	pop	{r7, pc}
 804cc16:	bf00      	nop
 804cc18:	08056528 	.word	0x08056528
 804cc1c:	08056784 	.word	0x08056784
 804cc20:	0805656c 	.word	0x0805656c
 804cc24:	080567a8 	.word	0x080567a8

0804cc28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 804cc28:	b580      	push	{r7, lr}
 804cc2a:	b084      	sub	sp, #16
 804cc2c:	af00      	add	r7, sp, #0
 804cc2e:	6078      	str	r0, [r7, #4]
 804cc30:	460b      	mov	r3, r1
 804cc32:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 804cc34:	687b      	ldr	r3, [r7, #4]
 804cc36:	2b00      	cmp	r3, #0
 804cc38:	d107      	bne.n	804cc4a <tcp_recved+0x22>
 804cc3a:	4b1f      	ldr	r3, [pc, #124]	; (804ccb8 <tcp_recved+0x90>)
 804cc3c:	f240 32cf 	movw	r2, #975	; 0x3cf
 804cc40:	491e      	ldr	r1, [pc, #120]	; (804ccbc <tcp_recved+0x94>)
 804cc42:	481f      	ldr	r0, [pc, #124]	; (804ccc0 <tcp_recved+0x98>)
 804cc44:	f007 fdfc 	bl	8054840 <iprintf>
 804cc48:	e032      	b.n	804ccb0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 804cc4a:	687b      	ldr	r3, [r7, #4]
 804cc4c:	7d1b      	ldrb	r3, [r3, #20]
 804cc4e:	2b01      	cmp	r3, #1
 804cc50:	d106      	bne.n	804cc60 <tcp_recved+0x38>
 804cc52:	4b19      	ldr	r3, [pc, #100]	; (804ccb8 <tcp_recved+0x90>)
 804cc54:	f240 32d2 	movw	r2, #978	; 0x3d2
 804cc58:	491a      	ldr	r1, [pc, #104]	; (804ccc4 <tcp_recved+0x9c>)
 804cc5a:	4819      	ldr	r0, [pc, #100]	; (804ccc0 <tcp_recved+0x98>)
 804cc5c:	f007 fdf0 	bl	8054840 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 804cc60:	687b      	ldr	r3, [r7, #4]
 804cc62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804cc64:	887b      	ldrh	r3, [r7, #2]
 804cc66:	4413      	add	r3, r2
 804cc68:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 804cc6a:	89fb      	ldrh	r3, [r7, #14]
 804cc6c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 804cc70:	d804      	bhi.n	804cc7c <tcp_recved+0x54>
 804cc72:	687b      	ldr	r3, [r7, #4]
 804cc74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804cc76:	89fa      	ldrh	r2, [r7, #14]
 804cc78:	429a      	cmp	r2, r3
 804cc7a:	d204      	bcs.n	804cc86 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 804cc7c:	687b      	ldr	r3, [r7, #4]
 804cc7e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 804cc82:	851a      	strh	r2, [r3, #40]	; 0x28
 804cc84:	e002      	b.n	804cc8c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 804cc86:	687b      	ldr	r3, [r7, #4]
 804cc88:	89fa      	ldrh	r2, [r7, #14]
 804cc8a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 804cc8c:	6878      	ldr	r0, [r7, #4]
 804cc8e:	f7ff ff71 	bl	804cb74 <tcp_update_rcv_ann_wnd>
 804cc92:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 804cc94:	68bb      	ldr	r3, [r7, #8]
 804cc96:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 804cc9a:	d309      	bcc.n	804ccb0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 804cc9c:	687b      	ldr	r3, [r7, #4]
 804cc9e:	8b5b      	ldrh	r3, [r3, #26]
 804cca0:	f043 0302 	orr.w	r3, r3, #2
 804cca4:	b29a      	uxth	r2, r3
 804cca6:	687b      	ldr	r3, [r7, #4]
 804cca8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 804ccaa:	6878      	ldr	r0, [r7, #4]
 804ccac:	f003 fe42 	bl	8050934 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 804ccb0:	3710      	adds	r7, #16
 804ccb2:	46bd      	mov	sp, r7
 804ccb4:	bd80      	pop	{r7, pc}
 804ccb6:	bf00      	nop
 804ccb8:	08056528 	.word	0x08056528
 804ccbc:	080567c4 	.word	0x080567c4
 804ccc0:	0805656c 	.word	0x0805656c
 804ccc4:	080567dc 	.word	0x080567dc

0804ccc8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 804ccc8:	b5b0      	push	{r4, r5, r7, lr}
 804ccca:	b090      	sub	sp, #64	; 0x40
 804cccc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 804ccce:	2300      	movs	r3, #0
 804ccd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 804ccd4:	4b94      	ldr	r3, [pc, #592]	; (804cf28 <tcp_slowtmr+0x260>)
 804ccd6:	681b      	ldr	r3, [r3, #0]
 804ccd8:	3301      	adds	r3, #1
 804ccda:	4a93      	ldr	r2, [pc, #588]	; (804cf28 <tcp_slowtmr+0x260>)
 804ccdc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 804ccde:	4b93      	ldr	r3, [pc, #588]	; (804cf2c <tcp_slowtmr+0x264>)
 804cce0:	781b      	ldrb	r3, [r3, #0]
 804cce2:	3301      	adds	r3, #1
 804cce4:	b2da      	uxtb	r2, r3
 804cce6:	4b91      	ldr	r3, [pc, #580]	; (804cf2c <tcp_slowtmr+0x264>)
 804cce8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 804ccea:	2300      	movs	r3, #0
 804ccec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 804ccee:	4b90      	ldr	r3, [pc, #576]	; (804cf30 <tcp_slowtmr+0x268>)
 804ccf0:	681b      	ldr	r3, [r3, #0]
 804ccf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 804ccf4:	e29d      	b.n	804d232 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 804ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ccf8:	7d1b      	ldrb	r3, [r3, #20]
 804ccfa:	2b00      	cmp	r3, #0
 804ccfc:	d106      	bne.n	804cd0c <tcp_slowtmr+0x44>
 804ccfe:	4b8d      	ldr	r3, [pc, #564]	; (804cf34 <tcp_slowtmr+0x26c>)
 804cd00:	f240 42be 	movw	r2, #1214	; 0x4be
 804cd04:	498c      	ldr	r1, [pc, #560]	; (804cf38 <tcp_slowtmr+0x270>)
 804cd06:	488d      	ldr	r0, [pc, #564]	; (804cf3c <tcp_slowtmr+0x274>)
 804cd08:	f007 fd9a 	bl	8054840 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 804cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd0e:	7d1b      	ldrb	r3, [r3, #20]
 804cd10:	2b01      	cmp	r3, #1
 804cd12:	d106      	bne.n	804cd22 <tcp_slowtmr+0x5a>
 804cd14:	4b87      	ldr	r3, [pc, #540]	; (804cf34 <tcp_slowtmr+0x26c>)
 804cd16:	f240 42bf 	movw	r2, #1215	; 0x4bf
 804cd1a:	4989      	ldr	r1, [pc, #548]	; (804cf40 <tcp_slowtmr+0x278>)
 804cd1c:	4887      	ldr	r0, [pc, #540]	; (804cf3c <tcp_slowtmr+0x274>)
 804cd1e:	f007 fd8f 	bl	8054840 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 804cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd24:	7d1b      	ldrb	r3, [r3, #20]
 804cd26:	2b0a      	cmp	r3, #10
 804cd28:	d106      	bne.n	804cd38 <tcp_slowtmr+0x70>
 804cd2a:	4b82      	ldr	r3, [pc, #520]	; (804cf34 <tcp_slowtmr+0x26c>)
 804cd2c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 804cd30:	4984      	ldr	r1, [pc, #528]	; (804cf44 <tcp_slowtmr+0x27c>)
 804cd32:	4882      	ldr	r0, [pc, #520]	; (804cf3c <tcp_slowtmr+0x274>)
 804cd34:	f007 fd84 	bl	8054840 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 804cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd3a:	7f9a      	ldrb	r2, [r3, #30]
 804cd3c:	4b7b      	ldr	r3, [pc, #492]	; (804cf2c <tcp_slowtmr+0x264>)
 804cd3e:	781b      	ldrb	r3, [r3, #0]
 804cd40:	429a      	cmp	r2, r3
 804cd42:	d105      	bne.n	804cd50 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 804cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 804cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd4a:	68db      	ldr	r3, [r3, #12]
 804cd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 804cd4e:	e270      	b.n	804d232 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 804cd50:	4b76      	ldr	r3, [pc, #472]	; (804cf2c <tcp_slowtmr+0x264>)
 804cd52:	781a      	ldrb	r2, [r3, #0]
 804cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd56:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 804cd58:	2300      	movs	r3, #0
 804cd5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 804cd5e:	2300      	movs	r3, #0
 804cd60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 804cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd66:	7d1b      	ldrb	r3, [r3, #20]
 804cd68:	2b02      	cmp	r3, #2
 804cd6a:	d10a      	bne.n	804cd82 <tcp_slowtmr+0xba>
 804cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 804cd72:	2b05      	cmp	r3, #5
 804cd74:	d905      	bls.n	804cd82 <tcp_slowtmr+0xba>
      ++pcb_remove;
 804cd76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804cd7a:	3301      	adds	r3, #1
 804cd7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 804cd80:	e11e      	b.n	804cfc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 804cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 804cd88:	2b0b      	cmp	r3, #11
 804cd8a:	d905      	bls.n	804cd98 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 804cd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804cd90:	3301      	adds	r3, #1
 804cd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 804cd96:	e113      	b.n	804cfc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 804cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cd9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 804cd9e:	2b00      	cmp	r3, #0
 804cda0:	d075      	beq.n	804ce8e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 804cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804cda6:	2b00      	cmp	r3, #0
 804cda8:	d006      	beq.n	804cdb8 <tcp_slowtmr+0xf0>
 804cdaa:	4b62      	ldr	r3, [pc, #392]	; (804cf34 <tcp_slowtmr+0x26c>)
 804cdac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 804cdb0:	4965      	ldr	r1, [pc, #404]	; (804cf48 <tcp_slowtmr+0x280>)
 804cdb2:	4862      	ldr	r0, [pc, #392]	; (804cf3c <tcp_slowtmr+0x274>)
 804cdb4:	f007 fd44 	bl	8054840 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 804cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cdba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804cdbc:	2b00      	cmp	r3, #0
 804cdbe:	d106      	bne.n	804cdce <tcp_slowtmr+0x106>
 804cdc0:	4b5c      	ldr	r3, [pc, #368]	; (804cf34 <tcp_slowtmr+0x26c>)
 804cdc2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 804cdc6:	4961      	ldr	r1, [pc, #388]	; (804cf4c <tcp_slowtmr+0x284>)
 804cdc8:	485c      	ldr	r0, [pc, #368]	; (804cf3c <tcp_slowtmr+0x274>)
 804cdca:	f007 fd39 	bl	8054840 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 804cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cdd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 804cdd4:	2b0b      	cmp	r3, #11
 804cdd6:	d905      	bls.n	804cde4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 804cdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804cddc:	3301      	adds	r3, #1
 804cdde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 804cde2:	e0ed      	b.n	804cfc0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 804cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cde6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 804cdea:	3b01      	subs	r3, #1
 804cdec:	4a58      	ldr	r2, [pc, #352]	; (804cf50 <tcp_slowtmr+0x288>)
 804cdee:	5cd3      	ldrb	r3, [r2, r3]
 804cdf0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 804cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cdf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 804cdf8:	7c7a      	ldrb	r2, [r7, #17]
 804cdfa:	429a      	cmp	r2, r3
 804cdfc:	d907      	bls.n	804ce0e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 804cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 804ce04:	3301      	adds	r3, #1
 804ce06:	b2da      	uxtb	r2, r3
 804ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 804ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 804ce14:	7c7a      	ldrb	r2, [r7, #17]
 804ce16:	429a      	cmp	r2, r3
 804ce18:	f200 80d2 	bhi.w	804cfc0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 804ce1c:	2301      	movs	r3, #1
 804ce1e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 804ce20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 804ce26:	2b00      	cmp	r3, #0
 804ce28:	d108      	bne.n	804ce3c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 804ce2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804ce2c:	f004 fc2a 	bl	8051684 <tcp_zero_window_probe>
 804ce30:	4603      	mov	r3, r0
 804ce32:	2b00      	cmp	r3, #0
 804ce34:	d014      	beq.n	804ce60 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 804ce36:	2300      	movs	r3, #0
 804ce38:	623b      	str	r3, [r7, #32]
 804ce3a:	e011      	b.n	804ce60 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 804ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 804ce42:	4619      	mov	r1, r3
 804ce44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804ce46:	f003 faef 	bl	8050428 <tcp_split_unsent_seg>
 804ce4a:	4603      	mov	r3, r0
 804ce4c:	2b00      	cmp	r3, #0
 804ce4e:	d107      	bne.n	804ce60 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 804ce50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804ce52:	f003 fd6f 	bl	8050934 <tcp_output>
 804ce56:	4603      	mov	r3, r0
 804ce58:	2b00      	cmp	r3, #0
 804ce5a:	d101      	bne.n	804ce60 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 804ce5c:	2300      	movs	r3, #0
 804ce5e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 804ce60:	6a3b      	ldr	r3, [r7, #32]
 804ce62:	2b00      	cmp	r3, #0
 804ce64:	f000 80ac 	beq.w	804cfc0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 804ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce6a:	2200      	movs	r2, #0
 804ce6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 804ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 804ce76:	2b06      	cmp	r3, #6
 804ce78:	f200 80a2 	bhi.w	804cfc0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 804ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 804ce82:	3301      	adds	r3, #1
 804ce84:	b2da      	uxtb	r2, r3
 804ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 804ce8c:	e098      	b.n	804cfc0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 804ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 804ce94:	2b00      	cmp	r3, #0
 804ce96:	db0f      	blt.n	804ceb8 <tcp_slowtmr+0x1f0>
 804ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ce9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 804ce9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 804cea2:	4293      	cmp	r3, r2
 804cea4:	d008      	beq.n	804ceb8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 804cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cea8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 804ceac:	b29b      	uxth	r3, r3
 804ceae:	3301      	adds	r3, #1
 804ceb0:	b29b      	uxth	r3, r3
 804ceb2:	b21a      	sxth	r2, r3
 804ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ceb6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 804ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ceba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 804cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cec0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 804cec4:	429a      	cmp	r2, r3
 804cec6:	db7b      	blt.n	804cfc0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 804cec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804ceca:	f004 f827 	bl	8050f1c <tcp_rexmit_rto_prepare>
 804cece:	4603      	mov	r3, r0
 804ced0:	2b00      	cmp	r3, #0
 804ced2:	d007      	beq.n	804cee4 <tcp_slowtmr+0x21c>
 804ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ced6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804ced8:	2b00      	cmp	r3, #0
 804ceda:	d171      	bne.n	804cfc0 <tcp_slowtmr+0x2f8>
 804cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804cee0:	2b00      	cmp	r3, #0
 804cee2:	d06d      	beq.n	804cfc0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 804cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cee6:	7d1b      	ldrb	r3, [r3, #20]
 804cee8:	2b02      	cmp	r3, #2
 804ceea:	d03a      	beq.n	804cf62 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 804ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804ceee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 804cef2:	2b0c      	cmp	r3, #12
 804cef4:	bf28      	it	cs
 804cef6:	230c      	movcs	r3, #12
 804cef8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 804cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cefc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 804cf00:	10db      	asrs	r3, r3, #3
 804cf02:	b21b      	sxth	r3, r3
 804cf04:	461a      	mov	r2, r3
 804cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 804cf0c:	4413      	add	r3, r2
 804cf0e:	7efa      	ldrb	r2, [r7, #27]
 804cf10:	4910      	ldr	r1, [pc, #64]	; (804cf54 <tcp_slowtmr+0x28c>)
 804cf12:	5c8a      	ldrb	r2, [r1, r2]
 804cf14:	4093      	lsls	r3, r2
 804cf16:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 804cf18:	697b      	ldr	r3, [r7, #20]
 804cf1a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 804cf1e:	4293      	cmp	r3, r2
 804cf20:	dc1a      	bgt.n	804cf58 <tcp_slowtmr+0x290>
 804cf22:	697b      	ldr	r3, [r7, #20]
 804cf24:	b21a      	sxth	r2, r3
 804cf26:	e019      	b.n	804cf5c <tcp_slowtmr+0x294>
 804cf28:	200237cc 	.word	0x200237cc
 804cf2c:	200237e2 	.word	0x200237e2
 804cf30:	200237d8 	.word	0x200237d8
 804cf34:	08056528 	.word	0x08056528
 804cf38:	0805686c 	.word	0x0805686c
 804cf3c:	0805656c 	.word	0x0805656c
 804cf40:	08056898 	.word	0x08056898
 804cf44:	080568c4 	.word	0x080568c4
 804cf48:	080568f4 	.word	0x080568f4
 804cf4c:	08056928 	.word	0x08056928
 804cf50:	08058548 	.word	0x08058548
 804cf54:	08058538 	.word	0x08058538
 804cf58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 804cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 804cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf64:	2200      	movs	r2, #0
 804cf66:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 804cf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 804cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 804cf74:	4293      	cmp	r3, r2
 804cf76:	bf28      	it	cs
 804cf78:	4613      	movcs	r3, r2
 804cf7a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 804cf7c:	8a7b      	ldrh	r3, [r7, #18]
 804cf7e:	085b      	lsrs	r3, r3, #1
 804cf80:	b29a      	uxth	r2, r3
 804cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 804cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 804cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804cf92:	005b      	lsls	r3, r3, #1
 804cf94:	b29b      	uxth	r3, r3
 804cf96:	429a      	cmp	r2, r3
 804cf98:	d206      	bcs.n	804cfa8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 804cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cf9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804cf9e:	005b      	lsls	r3, r3, #1
 804cfa0:	b29a      	uxth	r2, r3
 804cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 804cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfaa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 804cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 804cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfb4:	2200      	movs	r2, #0
 804cfb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 804cfba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804cfbc:	f004 f81e 	bl	8050ffc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 804cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfc2:	7d1b      	ldrb	r3, [r3, #20]
 804cfc4:	2b06      	cmp	r3, #6
 804cfc6:	d111      	bne.n	804cfec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 804cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfca:	8b5b      	ldrh	r3, [r3, #26]
 804cfcc:	f003 0310 	and.w	r3, r3, #16
 804cfd0:	2b00      	cmp	r3, #0
 804cfd2:	d00b      	beq.n	804cfec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 804cfd4:	4b9c      	ldr	r3, [pc, #624]	; (804d248 <tcp_slowtmr+0x580>)
 804cfd6:	681a      	ldr	r2, [r3, #0]
 804cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfda:	6a1b      	ldr	r3, [r3, #32]
 804cfdc:	1ad3      	subs	r3, r2, r3
 804cfde:	2b28      	cmp	r3, #40	; 0x28
 804cfe0:	d904      	bls.n	804cfec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 804cfe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804cfe6:	3301      	adds	r3, #1
 804cfe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 804cfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cfee:	7a5b      	ldrb	r3, [r3, #9]
 804cff0:	f003 0308 	and.w	r3, r3, #8
 804cff4:	2b00      	cmp	r3, #0
 804cff6:	d04a      	beq.n	804d08e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 804cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804cffa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 804cffc:	2b04      	cmp	r3, #4
 804cffe:	d003      	beq.n	804d008 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 804d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d002:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 804d004:	2b07      	cmp	r3, #7
 804d006:	d142      	bne.n	804d08e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 804d008:	4b8f      	ldr	r3, [pc, #572]	; (804d248 <tcp_slowtmr+0x580>)
 804d00a:	681a      	ldr	r2, [r3, #0]
 804d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d00e:	6a1b      	ldr	r3, [r3, #32]
 804d010:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 804d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d014:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 804d018:	4b8c      	ldr	r3, [pc, #560]	; (804d24c <tcp_slowtmr+0x584>)
 804d01a:	440b      	add	r3, r1
 804d01c:	498c      	ldr	r1, [pc, #560]	; (804d250 <tcp_slowtmr+0x588>)
 804d01e:	fba1 1303 	umull	r1, r3, r1, r3
 804d022:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 804d024:	429a      	cmp	r2, r3
 804d026:	d90a      	bls.n	804d03e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 804d028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804d02c:	3301      	adds	r3, #1
 804d02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 804d032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804d036:	3301      	adds	r3, #1
 804d038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 804d03c:	e027      	b.n	804d08e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 804d03e:	4b82      	ldr	r3, [pc, #520]	; (804d248 <tcp_slowtmr+0x580>)
 804d040:	681a      	ldr	r2, [r3, #0]
 804d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d044:	6a1b      	ldr	r3, [r3, #32]
 804d046:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 804d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d04a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 804d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d050:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 804d054:	4618      	mov	r0, r3
 804d056:	4b7f      	ldr	r3, [pc, #508]	; (804d254 <tcp_slowtmr+0x58c>)
 804d058:	fb00 f303 	mul.w	r3, r0, r3
 804d05c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 804d05e:	497c      	ldr	r1, [pc, #496]	; (804d250 <tcp_slowtmr+0x588>)
 804d060:	fba1 1303 	umull	r1, r3, r1, r3
 804d064:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 804d066:	429a      	cmp	r2, r3
 804d068:	d911      	bls.n	804d08e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 804d06a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804d06c:	f004 faca 	bl	8051604 <tcp_keepalive>
 804d070:	4603      	mov	r3, r0
 804d072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 804d076:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 804d07a:	2b00      	cmp	r3, #0
 804d07c:	d107      	bne.n	804d08e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 804d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d080:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 804d084:	3301      	adds	r3, #1
 804d086:	b2da      	uxtb	r2, r3
 804d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d08a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 804d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804d092:	2b00      	cmp	r3, #0
 804d094:	d011      	beq.n	804d0ba <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 804d096:	4b6c      	ldr	r3, [pc, #432]	; (804d248 <tcp_slowtmr+0x580>)
 804d098:	681a      	ldr	r2, [r3, #0]
 804d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d09c:	6a1b      	ldr	r3, [r3, #32]
 804d09e:	1ad2      	subs	r2, r2, r3
 804d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d0a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 804d0a6:	4619      	mov	r1, r3
 804d0a8:	460b      	mov	r3, r1
 804d0aa:	005b      	lsls	r3, r3, #1
 804d0ac:	440b      	add	r3, r1
 804d0ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 804d0b0:	429a      	cmp	r2, r3
 804d0b2:	d302      	bcc.n	804d0ba <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 804d0b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804d0b6:	f000 fddd 	bl	804dc74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 804d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d0bc:	7d1b      	ldrb	r3, [r3, #20]
 804d0be:	2b03      	cmp	r3, #3
 804d0c0:	d10b      	bne.n	804d0da <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 804d0c2:	4b61      	ldr	r3, [pc, #388]	; (804d248 <tcp_slowtmr+0x580>)
 804d0c4:	681a      	ldr	r2, [r3, #0]
 804d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d0c8:	6a1b      	ldr	r3, [r3, #32]
 804d0ca:	1ad3      	subs	r3, r2, r3
 804d0cc:	2b28      	cmp	r3, #40	; 0x28
 804d0ce:	d904      	bls.n	804d0da <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 804d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804d0d4:	3301      	adds	r3, #1
 804d0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 804d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d0dc:	7d1b      	ldrb	r3, [r3, #20]
 804d0de:	2b09      	cmp	r3, #9
 804d0e0:	d10b      	bne.n	804d0fa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 804d0e2:	4b59      	ldr	r3, [pc, #356]	; (804d248 <tcp_slowtmr+0x580>)
 804d0e4:	681a      	ldr	r2, [r3, #0]
 804d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d0e8:	6a1b      	ldr	r3, [r3, #32]
 804d0ea:	1ad3      	subs	r3, r2, r3
 804d0ec:	2bf0      	cmp	r3, #240	; 0xf0
 804d0ee:	d904      	bls.n	804d0fa <tcp_slowtmr+0x432>
        ++pcb_remove;
 804d0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804d0f4:	3301      	adds	r3, #1
 804d0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 804d0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804d0fe:	2b00      	cmp	r3, #0
 804d100:	d060      	beq.n	804d1c4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 804d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804d108:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 804d10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804d10c:	f000 fbfe 	bl	804d90c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 804d110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d112:	2b00      	cmp	r3, #0
 804d114:	d010      	beq.n	804d138 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 804d116:	4b50      	ldr	r3, [pc, #320]	; (804d258 <tcp_slowtmr+0x590>)
 804d118:	681b      	ldr	r3, [r3, #0]
 804d11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804d11c:	429a      	cmp	r2, r3
 804d11e:	d106      	bne.n	804d12e <tcp_slowtmr+0x466>
 804d120:	4b4e      	ldr	r3, [pc, #312]	; (804d25c <tcp_slowtmr+0x594>)
 804d122:	f240 526d 	movw	r2, #1389	; 0x56d
 804d126:	494e      	ldr	r1, [pc, #312]	; (804d260 <tcp_slowtmr+0x598>)
 804d128:	484e      	ldr	r0, [pc, #312]	; (804d264 <tcp_slowtmr+0x59c>)
 804d12a:	f007 fb89 	bl	8054840 <iprintf>
        prev->next = pcb->next;
 804d12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d130:	68da      	ldr	r2, [r3, #12]
 804d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d134:	60da      	str	r2, [r3, #12]
 804d136:	e00f      	b.n	804d158 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 804d138:	4b47      	ldr	r3, [pc, #284]	; (804d258 <tcp_slowtmr+0x590>)
 804d13a:	681b      	ldr	r3, [r3, #0]
 804d13c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804d13e:	429a      	cmp	r2, r3
 804d140:	d006      	beq.n	804d150 <tcp_slowtmr+0x488>
 804d142:	4b46      	ldr	r3, [pc, #280]	; (804d25c <tcp_slowtmr+0x594>)
 804d144:	f240 5271 	movw	r2, #1393	; 0x571
 804d148:	4947      	ldr	r1, [pc, #284]	; (804d268 <tcp_slowtmr+0x5a0>)
 804d14a:	4846      	ldr	r0, [pc, #280]	; (804d264 <tcp_slowtmr+0x59c>)
 804d14c:	f007 fb78 	bl	8054840 <iprintf>
        tcp_active_pcbs = pcb->next;
 804d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d152:	68db      	ldr	r3, [r3, #12]
 804d154:	4a40      	ldr	r2, [pc, #256]	; (804d258 <tcp_slowtmr+0x590>)
 804d156:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 804d158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804d15c:	2b00      	cmp	r3, #0
 804d15e:	d013      	beq.n	804d188 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 804d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d162:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d166:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 804d168:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 804d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d16c:	3304      	adds	r3, #4
 804d16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804d170:	8ad2      	ldrh	r2, [r2, #22]
 804d172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804d174:	8b09      	ldrh	r1, [r1, #24]
 804d176:	9102      	str	r1, [sp, #8]
 804d178:	9201      	str	r2, [sp, #4]
 804d17a:	9300      	str	r3, [sp, #0]
 804d17c:	462b      	mov	r3, r5
 804d17e:	4622      	mov	r2, r4
 804d180:	4601      	mov	r1, r0
 804d182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804d184:	f004 f98a 	bl	805149c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 804d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d18a:	691b      	ldr	r3, [r3, #16]
 804d18c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 804d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d190:	7d1b      	ldrb	r3, [r3, #20]
 804d192:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 804d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d196:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 804d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d19a:	68db      	ldr	r3, [r3, #12]
 804d19c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 804d19e:	6838      	ldr	r0, [r7, #0]
 804d1a0:	f7ff f9f4 	bl	804c58c <tcp_free>

      tcp_active_pcbs_changed = 0;
 804d1a4:	4b31      	ldr	r3, [pc, #196]	; (804d26c <tcp_slowtmr+0x5a4>)
 804d1a6:	2200      	movs	r2, #0
 804d1a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 804d1aa:	68fb      	ldr	r3, [r7, #12]
 804d1ac:	2b00      	cmp	r3, #0
 804d1ae:	d004      	beq.n	804d1ba <tcp_slowtmr+0x4f2>
 804d1b0:	68fb      	ldr	r3, [r7, #12]
 804d1b2:	f06f 010c 	mvn.w	r1, #12
 804d1b6:	68b8      	ldr	r0, [r7, #8]
 804d1b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 804d1ba:	4b2c      	ldr	r3, [pc, #176]	; (804d26c <tcp_slowtmr+0x5a4>)
 804d1bc:	781b      	ldrb	r3, [r3, #0]
 804d1be:	2b00      	cmp	r3, #0
 804d1c0:	d037      	beq.n	804d232 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 804d1c2:	e592      	b.n	804ccea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 804d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 804d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d1ca:	68db      	ldr	r3, [r3, #12]
 804d1cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 804d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1d0:	7f1b      	ldrb	r3, [r3, #28]
 804d1d2:	3301      	adds	r3, #1
 804d1d4:	b2da      	uxtb	r2, r3
 804d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 804d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1dc:	7f1a      	ldrb	r2, [r3, #28]
 804d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1e0:	7f5b      	ldrb	r3, [r3, #29]
 804d1e2:	429a      	cmp	r2, r3
 804d1e4:	d325      	bcc.n	804d232 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 804d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1e8:	2200      	movs	r2, #0
 804d1ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 804d1ec:	4b1f      	ldr	r3, [pc, #124]	; (804d26c <tcp_slowtmr+0x5a4>)
 804d1ee:	2200      	movs	r2, #0
 804d1f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 804d1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d1f8:	2b00      	cmp	r3, #0
 804d1fa:	d00b      	beq.n	804d214 <tcp_slowtmr+0x54c>
 804d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804d204:	6912      	ldr	r2, [r2, #16]
 804d206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804d208:	4610      	mov	r0, r2
 804d20a:	4798      	blx	r3
 804d20c:	4603      	mov	r3, r0
 804d20e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 804d212:	e002      	b.n	804d21a <tcp_slowtmr+0x552>
 804d214:	2300      	movs	r3, #0
 804d216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 804d21a:	4b14      	ldr	r3, [pc, #80]	; (804d26c <tcp_slowtmr+0x5a4>)
 804d21c:	781b      	ldrb	r3, [r3, #0]
 804d21e:	2b00      	cmp	r3, #0
 804d220:	d000      	beq.n	804d224 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 804d222:	e562      	b.n	804ccea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 804d224:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 804d228:	2b00      	cmp	r3, #0
 804d22a:	d102      	bne.n	804d232 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 804d22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804d22e:	f003 fb81 	bl	8050934 <tcp_output>
  while (pcb != NULL) {
 804d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d234:	2b00      	cmp	r3, #0
 804d236:	f47f ad5e 	bne.w	804ccf6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 804d23a:	2300      	movs	r3, #0
 804d23c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 804d23e:	4b0c      	ldr	r3, [pc, #48]	; (804d270 <tcp_slowtmr+0x5a8>)
 804d240:	681b      	ldr	r3, [r3, #0]
 804d242:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 804d244:	e069      	b.n	804d31a <tcp_slowtmr+0x652>
 804d246:	bf00      	nop
 804d248:	200237cc 	.word	0x200237cc
 804d24c:	000a4cb8 	.word	0x000a4cb8
 804d250:	10624dd3 	.word	0x10624dd3
 804d254:	000124f8 	.word	0x000124f8
 804d258:	200237d8 	.word	0x200237d8
 804d25c:	08056528 	.word	0x08056528
 804d260:	08056960 	.word	0x08056960
 804d264:	0805656c 	.word	0x0805656c
 804d268:	0805698c 	.word	0x0805698c
 804d26c:	200237e0 	.word	0x200237e0
 804d270:	200237dc 	.word	0x200237dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 804d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d276:	7d1b      	ldrb	r3, [r3, #20]
 804d278:	2b0a      	cmp	r3, #10
 804d27a:	d006      	beq.n	804d28a <tcp_slowtmr+0x5c2>
 804d27c:	4b2b      	ldr	r3, [pc, #172]	; (804d32c <tcp_slowtmr+0x664>)
 804d27e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 804d282:	492b      	ldr	r1, [pc, #172]	; (804d330 <tcp_slowtmr+0x668>)
 804d284:	482b      	ldr	r0, [pc, #172]	; (804d334 <tcp_slowtmr+0x66c>)
 804d286:	f007 fadb 	bl	8054840 <iprintf>
    pcb_remove = 0;
 804d28a:	2300      	movs	r3, #0
 804d28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 804d290:	4b29      	ldr	r3, [pc, #164]	; (804d338 <tcp_slowtmr+0x670>)
 804d292:	681a      	ldr	r2, [r3, #0]
 804d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d296:	6a1b      	ldr	r3, [r3, #32]
 804d298:	1ad3      	subs	r3, r2, r3
 804d29a:	2bf0      	cmp	r3, #240	; 0xf0
 804d29c:	d904      	bls.n	804d2a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 804d29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804d2a2:	3301      	adds	r3, #1
 804d2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 804d2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804d2ac:	2b00      	cmp	r3, #0
 804d2ae:	d02f      	beq.n	804d310 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 804d2b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804d2b2:	f000 fb2b 	bl	804d90c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 804d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d2b8:	2b00      	cmp	r3, #0
 804d2ba:	d010      	beq.n	804d2de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 804d2bc:	4b1f      	ldr	r3, [pc, #124]	; (804d33c <tcp_slowtmr+0x674>)
 804d2be:	681b      	ldr	r3, [r3, #0]
 804d2c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804d2c2:	429a      	cmp	r2, r3
 804d2c4:	d106      	bne.n	804d2d4 <tcp_slowtmr+0x60c>
 804d2c6:	4b19      	ldr	r3, [pc, #100]	; (804d32c <tcp_slowtmr+0x664>)
 804d2c8:	f240 52af 	movw	r2, #1455	; 0x5af
 804d2cc:	491c      	ldr	r1, [pc, #112]	; (804d340 <tcp_slowtmr+0x678>)
 804d2ce:	4819      	ldr	r0, [pc, #100]	; (804d334 <tcp_slowtmr+0x66c>)
 804d2d0:	f007 fab6 	bl	8054840 <iprintf>
        prev->next = pcb->next;
 804d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d2d6:	68da      	ldr	r2, [r3, #12]
 804d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804d2da:	60da      	str	r2, [r3, #12]
 804d2dc:	e00f      	b.n	804d2fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 804d2de:	4b17      	ldr	r3, [pc, #92]	; (804d33c <tcp_slowtmr+0x674>)
 804d2e0:	681b      	ldr	r3, [r3, #0]
 804d2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804d2e4:	429a      	cmp	r2, r3
 804d2e6:	d006      	beq.n	804d2f6 <tcp_slowtmr+0x62e>
 804d2e8:	4b10      	ldr	r3, [pc, #64]	; (804d32c <tcp_slowtmr+0x664>)
 804d2ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 804d2ee:	4915      	ldr	r1, [pc, #84]	; (804d344 <tcp_slowtmr+0x67c>)
 804d2f0:	4810      	ldr	r0, [pc, #64]	; (804d334 <tcp_slowtmr+0x66c>)
 804d2f2:	f007 faa5 	bl	8054840 <iprintf>
        tcp_tw_pcbs = pcb->next;
 804d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d2f8:	68db      	ldr	r3, [r3, #12]
 804d2fa:	4a10      	ldr	r2, [pc, #64]	; (804d33c <tcp_slowtmr+0x674>)
 804d2fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 804d2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d300:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 804d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d304:	68db      	ldr	r3, [r3, #12]
 804d306:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 804d308:	69f8      	ldr	r0, [r7, #28]
 804d30a:	f7ff f93f 	bl	804c58c <tcp_free>
 804d30e:	e004      	b.n	804d31a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 804d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d312:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 804d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d316:	68db      	ldr	r3, [r3, #12]
 804d318:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 804d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804d31c:	2b00      	cmp	r3, #0
 804d31e:	d1a9      	bne.n	804d274 <tcp_slowtmr+0x5ac>
    }
  }
}
 804d320:	bf00      	nop
 804d322:	bf00      	nop
 804d324:	3730      	adds	r7, #48	; 0x30
 804d326:	46bd      	mov	sp, r7
 804d328:	bdb0      	pop	{r4, r5, r7, pc}
 804d32a:	bf00      	nop
 804d32c:	08056528 	.word	0x08056528
 804d330:	080569b8 	.word	0x080569b8
 804d334:	0805656c 	.word	0x0805656c
 804d338:	200237cc 	.word	0x200237cc
 804d33c:	200237dc 	.word	0x200237dc
 804d340:	080569e8 	.word	0x080569e8
 804d344:	08056a10 	.word	0x08056a10

0804d348 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 804d348:	b580      	push	{r7, lr}
 804d34a:	b082      	sub	sp, #8
 804d34c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 804d34e:	4b2d      	ldr	r3, [pc, #180]	; (804d404 <tcp_fasttmr+0xbc>)
 804d350:	781b      	ldrb	r3, [r3, #0]
 804d352:	3301      	adds	r3, #1
 804d354:	b2da      	uxtb	r2, r3
 804d356:	4b2b      	ldr	r3, [pc, #172]	; (804d404 <tcp_fasttmr+0xbc>)
 804d358:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 804d35a:	4b2b      	ldr	r3, [pc, #172]	; (804d408 <tcp_fasttmr+0xc0>)
 804d35c:	681b      	ldr	r3, [r3, #0]
 804d35e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 804d360:	e048      	b.n	804d3f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 804d362:	687b      	ldr	r3, [r7, #4]
 804d364:	7f9a      	ldrb	r2, [r3, #30]
 804d366:	4b27      	ldr	r3, [pc, #156]	; (804d404 <tcp_fasttmr+0xbc>)
 804d368:	781b      	ldrb	r3, [r3, #0]
 804d36a:	429a      	cmp	r2, r3
 804d36c:	d03f      	beq.n	804d3ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 804d36e:	4b25      	ldr	r3, [pc, #148]	; (804d404 <tcp_fasttmr+0xbc>)
 804d370:	781a      	ldrb	r2, [r3, #0]
 804d372:	687b      	ldr	r3, [r7, #4]
 804d374:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 804d376:	687b      	ldr	r3, [r7, #4]
 804d378:	8b5b      	ldrh	r3, [r3, #26]
 804d37a:	f003 0301 	and.w	r3, r3, #1
 804d37e:	2b00      	cmp	r3, #0
 804d380:	d010      	beq.n	804d3a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 804d382:	687b      	ldr	r3, [r7, #4]
 804d384:	8b5b      	ldrh	r3, [r3, #26]
 804d386:	f043 0302 	orr.w	r3, r3, #2
 804d38a:	b29a      	uxth	r2, r3
 804d38c:	687b      	ldr	r3, [r7, #4]
 804d38e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 804d390:	6878      	ldr	r0, [r7, #4]
 804d392:	f003 facf 	bl	8050934 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 804d396:	687b      	ldr	r3, [r7, #4]
 804d398:	8b5b      	ldrh	r3, [r3, #26]
 804d39a:	f023 0303 	bic.w	r3, r3, #3
 804d39e:	b29a      	uxth	r2, r3
 804d3a0:	687b      	ldr	r3, [r7, #4]
 804d3a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 804d3a4:	687b      	ldr	r3, [r7, #4]
 804d3a6:	8b5b      	ldrh	r3, [r3, #26]
 804d3a8:	f003 0308 	and.w	r3, r3, #8
 804d3ac:	2b00      	cmp	r3, #0
 804d3ae:	d009      	beq.n	804d3c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 804d3b0:	687b      	ldr	r3, [r7, #4]
 804d3b2:	8b5b      	ldrh	r3, [r3, #26]
 804d3b4:	f023 0308 	bic.w	r3, r3, #8
 804d3b8:	b29a      	uxth	r2, r3
 804d3ba:	687b      	ldr	r3, [r7, #4]
 804d3bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 804d3be:	6878      	ldr	r0, [r7, #4]
 804d3c0:	f7ff fa78 	bl	804c8b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 804d3c4:	687b      	ldr	r3, [r7, #4]
 804d3c6:	68db      	ldr	r3, [r3, #12]
 804d3c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 804d3ca:	687b      	ldr	r3, [r7, #4]
 804d3cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804d3ce:	2b00      	cmp	r3, #0
 804d3d0:	d00a      	beq.n	804d3e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 804d3d2:	4b0e      	ldr	r3, [pc, #56]	; (804d40c <tcp_fasttmr+0xc4>)
 804d3d4:	2200      	movs	r2, #0
 804d3d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 804d3d8:	6878      	ldr	r0, [r7, #4]
 804d3da:	f000 f819 	bl	804d410 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 804d3de:	4b0b      	ldr	r3, [pc, #44]	; (804d40c <tcp_fasttmr+0xc4>)
 804d3e0:	781b      	ldrb	r3, [r3, #0]
 804d3e2:	2b00      	cmp	r3, #0
 804d3e4:	d000      	beq.n	804d3e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 804d3e6:	e7b8      	b.n	804d35a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 804d3e8:	683b      	ldr	r3, [r7, #0]
 804d3ea:	607b      	str	r3, [r7, #4]
 804d3ec:	e002      	b.n	804d3f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 804d3ee:	687b      	ldr	r3, [r7, #4]
 804d3f0:	68db      	ldr	r3, [r3, #12]
 804d3f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 804d3f4:	687b      	ldr	r3, [r7, #4]
 804d3f6:	2b00      	cmp	r3, #0
 804d3f8:	d1b3      	bne.n	804d362 <tcp_fasttmr+0x1a>
    }
  }
}
 804d3fa:	bf00      	nop
 804d3fc:	bf00      	nop
 804d3fe:	3708      	adds	r7, #8
 804d400:	46bd      	mov	sp, r7
 804d402:	bd80      	pop	{r7, pc}
 804d404:	200237e2 	.word	0x200237e2
 804d408:	200237d8 	.word	0x200237d8
 804d40c:	200237e0 	.word	0x200237e0

0804d410 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 804d410:	b590      	push	{r4, r7, lr}
 804d412:	b085      	sub	sp, #20
 804d414:	af00      	add	r7, sp, #0
 804d416:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 804d418:	687b      	ldr	r3, [r7, #4]
 804d41a:	2b00      	cmp	r3, #0
 804d41c:	d109      	bne.n	804d432 <tcp_process_refused_data+0x22>
 804d41e:	4b37      	ldr	r3, [pc, #220]	; (804d4fc <tcp_process_refused_data+0xec>)
 804d420:	f240 6209 	movw	r2, #1545	; 0x609
 804d424:	4936      	ldr	r1, [pc, #216]	; (804d500 <tcp_process_refused_data+0xf0>)
 804d426:	4837      	ldr	r0, [pc, #220]	; (804d504 <tcp_process_refused_data+0xf4>)
 804d428:	f007 fa0a 	bl	8054840 <iprintf>
 804d42c:	f06f 030f 	mvn.w	r3, #15
 804d430:	e060      	b.n	804d4f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 804d432:	687b      	ldr	r3, [r7, #4]
 804d434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804d436:	7b5b      	ldrb	r3, [r3, #13]
 804d438:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 804d43a:	687b      	ldr	r3, [r7, #4]
 804d43c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804d43e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 804d440:	687b      	ldr	r3, [r7, #4]
 804d442:	2200      	movs	r2, #0
 804d444:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 804d446:	687b      	ldr	r3, [r7, #4]
 804d448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804d44c:	2b00      	cmp	r3, #0
 804d44e:	d00b      	beq.n	804d468 <tcp_process_refused_data+0x58>
 804d450:	687b      	ldr	r3, [r7, #4]
 804d452:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 804d456:	687b      	ldr	r3, [r7, #4]
 804d458:	6918      	ldr	r0, [r3, #16]
 804d45a:	2300      	movs	r3, #0
 804d45c:	68ba      	ldr	r2, [r7, #8]
 804d45e:	6879      	ldr	r1, [r7, #4]
 804d460:	47a0      	blx	r4
 804d462:	4603      	mov	r3, r0
 804d464:	73fb      	strb	r3, [r7, #15]
 804d466:	e007      	b.n	804d478 <tcp_process_refused_data+0x68>
 804d468:	2300      	movs	r3, #0
 804d46a:	68ba      	ldr	r2, [r7, #8]
 804d46c:	6879      	ldr	r1, [r7, #4]
 804d46e:	2000      	movs	r0, #0
 804d470:	f000 f8a4 	bl	804d5bc <tcp_recv_null>
 804d474:	4603      	mov	r3, r0
 804d476:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 804d478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804d47c:	2b00      	cmp	r3, #0
 804d47e:	d12a      	bne.n	804d4d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 804d480:	7bbb      	ldrb	r3, [r7, #14]
 804d482:	f003 0320 	and.w	r3, r3, #32
 804d486:	2b00      	cmp	r3, #0
 804d488:	d033      	beq.n	804d4f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 804d48a:	687b      	ldr	r3, [r7, #4]
 804d48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804d48e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 804d492:	d005      	beq.n	804d4a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 804d494:	687b      	ldr	r3, [r7, #4]
 804d496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804d498:	3301      	adds	r3, #1
 804d49a:	b29a      	uxth	r2, r3
 804d49c:	687b      	ldr	r3, [r7, #4]
 804d49e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 804d4a0:	687b      	ldr	r3, [r7, #4]
 804d4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804d4a6:	2b00      	cmp	r3, #0
 804d4a8:	d00b      	beq.n	804d4c2 <tcp_process_refused_data+0xb2>
 804d4aa:	687b      	ldr	r3, [r7, #4]
 804d4ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 804d4b0:	687b      	ldr	r3, [r7, #4]
 804d4b2:	6918      	ldr	r0, [r3, #16]
 804d4b4:	2300      	movs	r3, #0
 804d4b6:	2200      	movs	r2, #0
 804d4b8:	6879      	ldr	r1, [r7, #4]
 804d4ba:	47a0      	blx	r4
 804d4bc:	4603      	mov	r3, r0
 804d4be:	73fb      	strb	r3, [r7, #15]
 804d4c0:	e001      	b.n	804d4c6 <tcp_process_refused_data+0xb6>
 804d4c2:	2300      	movs	r3, #0
 804d4c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 804d4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804d4ca:	f113 0f0d 	cmn.w	r3, #13
 804d4ce:	d110      	bne.n	804d4f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 804d4d0:	f06f 030c 	mvn.w	r3, #12
 804d4d4:	e00e      	b.n	804d4f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 804d4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804d4da:	f113 0f0d 	cmn.w	r3, #13
 804d4de:	d102      	bne.n	804d4e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 804d4e0:	f06f 030c 	mvn.w	r3, #12
 804d4e4:	e006      	b.n	804d4f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 804d4e6:	687b      	ldr	r3, [r7, #4]
 804d4e8:	68ba      	ldr	r2, [r7, #8]
 804d4ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 804d4ec:	f06f 0304 	mvn.w	r3, #4
 804d4f0:	e000      	b.n	804d4f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 804d4f2:	2300      	movs	r3, #0
}
 804d4f4:	4618      	mov	r0, r3
 804d4f6:	3714      	adds	r7, #20
 804d4f8:	46bd      	mov	sp, r7
 804d4fa:	bd90      	pop	{r4, r7, pc}
 804d4fc:	08056528 	.word	0x08056528
 804d500:	08056a38 	.word	0x08056a38
 804d504:	0805656c 	.word	0x0805656c

0804d508 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 804d508:	b580      	push	{r7, lr}
 804d50a:	b084      	sub	sp, #16
 804d50c:	af00      	add	r7, sp, #0
 804d50e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 804d510:	e007      	b.n	804d522 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 804d512:	687b      	ldr	r3, [r7, #4]
 804d514:	681b      	ldr	r3, [r3, #0]
 804d516:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 804d518:	6878      	ldr	r0, [r7, #4]
 804d51a:	f000 f80a 	bl	804d532 <tcp_seg_free>
    seg = next;
 804d51e:	68fb      	ldr	r3, [r7, #12]
 804d520:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 804d522:	687b      	ldr	r3, [r7, #4]
 804d524:	2b00      	cmp	r3, #0
 804d526:	d1f4      	bne.n	804d512 <tcp_segs_free+0xa>
  }
}
 804d528:	bf00      	nop
 804d52a:	bf00      	nop
 804d52c:	3710      	adds	r7, #16
 804d52e:	46bd      	mov	sp, r7
 804d530:	bd80      	pop	{r7, pc}

0804d532 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 804d532:	b580      	push	{r7, lr}
 804d534:	b082      	sub	sp, #8
 804d536:	af00      	add	r7, sp, #0
 804d538:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 804d53a:	687b      	ldr	r3, [r7, #4]
 804d53c:	2b00      	cmp	r3, #0
 804d53e:	d00c      	beq.n	804d55a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 804d540:	687b      	ldr	r3, [r7, #4]
 804d542:	685b      	ldr	r3, [r3, #4]
 804d544:	2b00      	cmp	r3, #0
 804d546:	d004      	beq.n	804d552 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 804d548:	687b      	ldr	r3, [r7, #4]
 804d54a:	685b      	ldr	r3, [r3, #4]
 804d54c:	4618      	mov	r0, r3
 804d54e:	f7fe fd71 	bl	804c034 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 804d552:	6879      	ldr	r1, [r7, #4]
 804d554:	2003      	movs	r0, #3
 804d556:	f7fd fec9 	bl	804b2ec <memp_free>
  }
}
 804d55a:	bf00      	nop
 804d55c:	3708      	adds	r7, #8
 804d55e:	46bd      	mov	sp, r7
 804d560:	bd80      	pop	{r7, pc}
	...

0804d564 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 804d564:	b580      	push	{r7, lr}
 804d566:	b084      	sub	sp, #16
 804d568:	af00      	add	r7, sp, #0
 804d56a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 804d56c:	687b      	ldr	r3, [r7, #4]
 804d56e:	2b00      	cmp	r3, #0
 804d570:	d106      	bne.n	804d580 <tcp_seg_copy+0x1c>
 804d572:	4b0f      	ldr	r3, [pc, #60]	; (804d5b0 <tcp_seg_copy+0x4c>)
 804d574:	f240 6282 	movw	r2, #1666	; 0x682
 804d578:	490e      	ldr	r1, [pc, #56]	; (804d5b4 <tcp_seg_copy+0x50>)
 804d57a:	480f      	ldr	r0, [pc, #60]	; (804d5b8 <tcp_seg_copy+0x54>)
 804d57c:	f007 f960 	bl	8054840 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 804d580:	2003      	movs	r0, #3
 804d582:	f7fd fe3d 	bl	804b200 <memp_malloc>
 804d586:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 804d588:	68fb      	ldr	r3, [r7, #12]
 804d58a:	2b00      	cmp	r3, #0
 804d58c:	d101      	bne.n	804d592 <tcp_seg_copy+0x2e>
    return NULL;
 804d58e:	2300      	movs	r3, #0
 804d590:	e00a      	b.n	804d5a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 804d592:	2210      	movs	r2, #16
 804d594:	6879      	ldr	r1, [r7, #4]
 804d596:	68f8      	ldr	r0, [r7, #12]
 804d598:	f007 fb73 	bl	8054c82 <memcpy>
  pbuf_ref(cseg->p);
 804d59c:	68fb      	ldr	r3, [r7, #12]
 804d59e:	685b      	ldr	r3, [r3, #4]
 804d5a0:	4618      	mov	r0, r3
 804d5a2:	f7fe fded 	bl	804c180 <pbuf_ref>
  return cseg;
 804d5a6:	68fb      	ldr	r3, [r7, #12]
}
 804d5a8:	4618      	mov	r0, r3
 804d5aa:	3710      	adds	r7, #16
 804d5ac:	46bd      	mov	sp, r7
 804d5ae:	bd80      	pop	{r7, pc}
 804d5b0:	08056528 	.word	0x08056528
 804d5b4:	08056a7c 	.word	0x08056a7c
 804d5b8:	0805656c 	.word	0x0805656c

0804d5bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 804d5bc:	b580      	push	{r7, lr}
 804d5be:	b084      	sub	sp, #16
 804d5c0:	af00      	add	r7, sp, #0
 804d5c2:	60f8      	str	r0, [r7, #12]
 804d5c4:	60b9      	str	r1, [r7, #8]
 804d5c6:	607a      	str	r2, [r7, #4]
 804d5c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 804d5ca:	68bb      	ldr	r3, [r7, #8]
 804d5cc:	2b00      	cmp	r3, #0
 804d5ce:	d109      	bne.n	804d5e4 <tcp_recv_null+0x28>
 804d5d0:	4b12      	ldr	r3, [pc, #72]	; (804d61c <tcp_recv_null+0x60>)
 804d5d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 804d5d6:	4912      	ldr	r1, [pc, #72]	; (804d620 <tcp_recv_null+0x64>)
 804d5d8:	4812      	ldr	r0, [pc, #72]	; (804d624 <tcp_recv_null+0x68>)
 804d5da:	f007 f931 	bl	8054840 <iprintf>
 804d5de:	f06f 030f 	mvn.w	r3, #15
 804d5e2:	e016      	b.n	804d612 <tcp_recv_null+0x56>

  if (p != NULL) {
 804d5e4:	687b      	ldr	r3, [r7, #4]
 804d5e6:	2b00      	cmp	r3, #0
 804d5e8:	d009      	beq.n	804d5fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 804d5ea:	687b      	ldr	r3, [r7, #4]
 804d5ec:	891b      	ldrh	r3, [r3, #8]
 804d5ee:	4619      	mov	r1, r3
 804d5f0:	68b8      	ldr	r0, [r7, #8]
 804d5f2:	f7ff fb19 	bl	804cc28 <tcp_recved>
    pbuf_free(p);
 804d5f6:	6878      	ldr	r0, [r7, #4]
 804d5f8:	f7fe fd1c 	bl	804c034 <pbuf_free>
 804d5fc:	e008      	b.n	804d610 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 804d5fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804d602:	2b00      	cmp	r3, #0
 804d604:	d104      	bne.n	804d610 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 804d606:	68b8      	ldr	r0, [r7, #8]
 804d608:	f7ff f9be 	bl	804c988 <tcp_close>
 804d60c:	4603      	mov	r3, r0
 804d60e:	e000      	b.n	804d612 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 804d610:	2300      	movs	r3, #0
}
 804d612:	4618      	mov	r0, r3
 804d614:	3710      	adds	r7, #16
 804d616:	46bd      	mov	sp, r7
 804d618:	bd80      	pop	{r7, pc}
 804d61a:	bf00      	nop
 804d61c:	08056528 	.word	0x08056528
 804d620:	08056a98 	.word	0x08056a98
 804d624:	0805656c 	.word	0x0805656c

0804d628 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 804d628:	b580      	push	{r7, lr}
 804d62a:	b086      	sub	sp, #24
 804d62c:	af00      	add	r7, sp, #0
 804d62e:	4603      	mov	r3, r0
 804d630:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 804d632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804d636:	2b00      	cmp	r3, #0
 804d638:	db01      	blt.n	804d63e <tcp_kill_prio+0x16>
 804d63a:	79fb      	ldrb	r3, [r7, #7]
 804d63c:	e000      	b.n	804d640 <tcp_kill_prio+0x18>
 804d63e:	237f      	movs	r3, #127	; 0x7f
 804d640:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 804d642:	7afb      	ldrb	r3, [r7, #11]
 804d644:	2b00      	cmp	r3, #0
 804d646:	d034      	beq.n	804d6b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 804d648:	7afb      	ldrb	r3, [r7, #11]
 804d64a:	3b01      	subs	r3, #1
 804d64c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 804d64e:	2300      	movs	r3, #0
 804d650:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 804d652:	2300      	movs	r3, #0
 804d654:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 804d656:	4b19      	ldr	r3, [pc, #100]	; (804d6bc <tcp_kill_prio+0x94>)
 804d658:	681b      	ldr	r3, [r3, #0]
 804d65a:	617b      	str	r3, [r7, #20]
 804d65c:	e01f      	b.n	804d69e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 804d65e:	697b      	ldr	r3, [r7, #20]
 804d660:	7d5b      	ldrb	r3, [r3, #21]
 804d662:	7afa      	ldrb	r2, [r7, #11]
 804d664:	429a      	cmp	r2, r3
 804d666:	d80c      	bhi.n	804d682 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 804d668:	697b      	ldr	r3, [r7, #20]
 804d66a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 804d66c:	7afa      	ldrb	r2, [r7, #11]
 804d66e:	429a      	cmp	r2, r3
 804d670:	d112      	bne.n	804d698 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 804d672:	4b13      	ldr	r3, [pc, #76]	; (804d6c0 <tcp_kill_prio+0x98>)
 804d674:	681a      	ldr	r2, [r3, #0]
 804d676:	697b      	ldr	r3, [r7, #20]
 804d678:	6a1b      	ldr	r3, [r3, #32]
 804d67a:	1ad3      	subs	r3, r2, r3
 804d67c:	68fa      	ldr	r2, [r7, #12]
 804d67e:	429a      	cmp	r2, r3
 804d680:	d80a      	bhi.n	804d698 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 804d682:	4b0f      	ldr	r3, [pc, #60]	; (804d6c0 <tcp_kill_prio+0x98>)
 804d684:	681a      	ldr	r2, [r3, #0]
 804d686:	697b      	ldr	r3, [r7, #20]
 804d688:	6a1b      	ldr	r3, [r3, #32]
 804d68a:	1ad3      	subs	r3, r2, r3
 804d68c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 804d68e:	697b      	ldr	r3, [r7, #20]
 804d690:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 804d692:	697b      	ldr	r3, [r7, #20]
 804d694:	7d5b      	ldrb	r3, [r3, #21]
 804d696:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 804d698:	697b      	ldr	r3, [r7, #20]
 804d69a:	68db      	ldr	r3, [r3, #12]
 804d69c:	617b      	str	r3, [r7, #20]
 804d69e:	697b      	ldr	r3, [r7, #20]
 804d6a0:	2b00      	cmp	r3, #0
 804d6a2:	d1dc      	bne.n	804d65e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 804d6a4:	693b      	ldr	r3, [r7, #16]
 804d6a6:	2b00      	cmp	r3, #0
 804d6a8:	d004      	beq.n	804d6b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 804d6aa:	6938      	ldr	r0, [r7, #16]
 804d6ac:	f7ff fa56 	bl	804cb5c <tcp_abort>
 804d6b0:	e000      	b.n	804d6b4 <tcp_kill_prio+0x8c>
    return;
 804d6b2:	bf00      	nop
  }
}
 804d6b4:	3718      	adds	r7, #24
 804d6b6:	46bd      	mov	sp, r7
 804d6b8:	bd80      	pop	{r7, pc}
 804d6ba:	bf00      	nop
 804d6bc:	200237d8 	.word	0x200237d8
 804d6c0:	200237cc 	.word	0x200237cc

0804d6c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 804d6c4:	b580      	push	{r7, lr}
 804d6c6:	b086      	sub	sp, #24
 804d6c8:	af00      	add	r7, sp, #0
 804d6ca:	4603      	mov	r3, r0
 804d6cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 804d6ce:	79fb      	ldrb	r3, [r7, #7]
 804d6d0:	2b08      	cmp	r3, #8
 804d6d2:	d009      	beq.n	804d6e8 <tcp_kill_state+0x24>
 804d6d4:	79fb      	ldrb	r3, [r7, #7]
 804d6d6:	2b09      	cmp	r3, #9
 804d6d8:	d006      	beq.n	804d6e8 <tcp_kill_state+0x24>
 804d6da:	4b1a      	ldr	r3, [pc, #104]	; (804d744 <tcp_kill_state+0x80>)
 804d6dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 804d6e0:	4919      	ldr	r1, [pc, #100]	; (804d748 <tcp_kill_state+0x84>)
 804d6e2:	481a      	ldr	r0, [pc, #104]	; (804d74c <tcp_kill_state+0x88>)
 804d6e4:	f007 f8ac 	bl	8054840 <iprintf>

  inactivity = 0;
 804d6e8:	2300      	movs	r3, #0
 804d6ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 804d6ec:	2300      	movs	r3, #0
 804d6ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 804d6f0:	4b17      	ldr	r3, [pc, #92]	; (804d750 <tcp_kill_state+0x8c>)
 804d6f2:	681b      	ldr	r3, [r3, #0]
 804d6f4:	617b      	str	r3, [r7, #20]
 804d6f6:	e017      	b.n	804d728 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 804d6f8:	697b      	ldr	r3, [r7, #20]
 804d6fa:	7d1b      	ldrb	r3, [r3, #20]
 804d6fc:	79fa      	ldrb	r2, [r7, #7]
 804d6fe:	429a      	cmp	r2, r3
 804d700:	d10f      	bne.n	804d722 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 804d702:	4b14      	ldr	r3, [pc, #80]	; (804d754 <tcp_kill_state+0x90>)
 804d704:	681a      	ldr	r2, [r3, #0]
 804d706:	697b      	ldr	r3, [r7, #20]
 804d708:	6a1b      	ldr	r3, [r3, #32]
 804d70a:	1ad3      	subs	r3, r2, r3
 804d70c:	68fa      	ldr	r2, [r7, #12]
 804d70e:	429a      	cmp	r2, r3
 804d710:	d807      	bhi.n	804d722 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 804d712:	4b10      	ldr	r3, [pc, #64]	; (804d754 <tcp_kill_state+0x90>)
 804d714:	681a      	ldr	r2, [r3, #0]
 804d716:	697b      	ldr	r3, [r7, #20]
 804d718:	6a1b      	ldr	r3, [r3, #32]
 804d71a:	1ad3      	subs	r3, r2, r3
 804d71c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 804d71e:	697b      	ldr	r3, [r7, #20]
 804d720:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 804d722:	697b      	ldr	r3, [r7, #20]
 804d724:	68db      	ldr	r3, [r3, #12]
 804d726:	617b      	str	r3, [r7, #20]
 804d728:	697b      	ldr	r3, [r7, #20]
 804d72a:	2b00      	cmp	r3, #0
 804d72c:	d1e4      	bne.n	804d6f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 804d72e:	693b      	ldr	r3, [r7, #16]
 804d730:	2b00      	cmp	r3, #0
 804d732:	d003      	beq.n	804d73c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 804d734:	2100      	movs	r1, #0
 804d736:	6938      	ldr	r0, [r7, #16]
 804d738:	f7ff f952 	bl	804c9e0 <tcp_abandon>
  }
}
 804d73c:	bf00      	nop
 804d73e:	3718      	adds	r7, #24
 804d740:	46bd      	mov	sp, r7
 804d742:	bd80      	pop	{r7, pc}
 804d744:	08056528 	.word	0x08056528
 804d748:	08056ab4 	.word	0x08056ab4
 804d74c:	0805656c 	.word	0x0805656c
 804d750:	200237d8 	.word	0x200237d8
 804d754:	200237cc 	.word	0x200237cc

0804d758 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 804d758:	b580      	push	{r7, lr}
 804d75a:	b084      	sub	sp, #16
 804d75c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 804d75e:	2300      	movs	r3, #0
 804d760:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 804d762:	2300      	movs	r3, #0
 804d764:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 804d766:	4b12      	ldr	r3, [pc, #72]	; (804d7b0 <tcp_kill_timewait+0x58>)
 804d768:	681b      	ldr	r3, [r3, #0]
 804d76a:	60fb      	str	r3, [r7, #12]
 804d76c:	e012      	b.n	804d794 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 804d76e:	4b11      	ldr	r3, [pc, #68]	; (804d7b4 <tcp_kill_timewait+0x5c>)
 804d770:	681a      	ldr	r2, [r3, #0]
 804d772:	68fb      	ldr	r3, [r7, #12]
 804d774:	6a1b      	ldr	r3, [r3, #32]
 804d776:	1ad3      	subs	r3, r2, r3
 804d778:	687a      	ldr	r2, [r7, #4]
 804d77a:	429a      	cmp	r2, r3
 804d77c:	d807      	bhi.n	804d78e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 804d77e:	4b0d      	ldr	r3, [pc, #52]	; (804d7b4 <tcp_kill_timewait+0x5c>)
 804d780:	681a      	ldr	r2, [r3, #0]
 804d782:	68fb      	ldr	r3, [r7, #12]
 804d784:	6a1b      	ldr	r3, [r3, #32]
 804d786:	1ad3      	subs	r3, r2, r3
 804d788:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 804d78a:	68fb      	ldr	r3, [r7, #12]
 804d78c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 804d78e:	68fb      	ldr	r3, [r7, #12]
 804d790:	68db      	ldr	r3, [r3, #12]
 804d792:	60fb      	str	r3, [r7, #12]
 804d794:	68fb      	ldr	r3, [r7, #12]
 804d796:	2b00      	cmp	r3, #0
 804d798:	d1e9      	bne.n	804d76e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 804d79a:	68bb      	ldr	r3, [r7, #8]
 804d79c:	2b00      	cmp	r3, #0
 804d79e:	d002      	beq.n	804d7a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 804d7a0:	68b8      	ldr	r0, [r7, #8]
 804d7a2:	f7ff f9db 	bl	804cb5c <tcp_abort>
  }
}
 804d7a6:	bf00      	nop
 804d7a8:	3710      	adds	r7, #16
 804d7aa:	46bd      	mov	sp, r7
 804d7ac:	bd80      	pop	{r7, pc}
 804d7ae:	bf00      	nop
 804d7b0:	200237dc 	.word	0x200237dc
 804d7b4:	200237cc 	.word	0x200237cc

0804d7b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 804d7b8:	b580      	push	{r7, lr}
 804d7ba:	b082      	sub	sp, #8
 804d7bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 804d7be:	4b10      	ldr	r3, [pc, #64]	; (804d800 <tcp_handle_closepend+0x48>)
 804d7c0:	681b      	ldr	r3, [r3, #0]
 804d7c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 804d7c4:	e014      	b.n	804d7f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 804d7c6:	687b      	ldr	r3, [r7, #4]
 804d7c8:	68db      	ldr	r3, [r3, #12]
 804d7ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 804d7cc:	687b      	ldr	r3, [r7, #4]
 804d7ce:	8b5b      	ldrh	r3, [r3, #26]
 804d7d0:	f003 0308 	and.w	r3, r3, #8
 804d7d4:	2b00      	cmp	r3, #0
 804d7d6:	d009      	beq.n	804d7ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 804d7d8:	687b      	ldr	r3, [r7, #4]
 804d7da:	8b5b      	ldrh	r3, [r3, #26]
 804d7dc:	f023 0308 	bic.w	r3, r3, #8
 804d7e0:	b29a      	uxth	r2, r3
 804d7e2:	687b      	ldr	r3, [r7, #4]
 804d7e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 804d7e6:	6878      	ldr	r0, [r7, #4]
 804d7e8:	f7ff f864 	bl	804c8b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 804d7ec:	683b      	ldr	r3, [r7, #0]
 804d7ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 804d7f0:	687b      	ldr	r3, [r7, #4]
 804d7f2:	2b00      	cmp	r3, #0
 804d7f4:	d1e7      	bne.n	804d7c6 <tcp_handle_closepend+0xe>
  }
}
 804d7f6:	bf00      	nop
 804d7f8:	bf00      	nop
 804d7fa:	3708      	adds	r7, #8
 804d7fc:	46bd      	mov	sp, r7
 804d7fe:	bd80      	pop	{r7, pc}
 804d800:	200237d8 	.word	0x200237d8

0804d804 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 804d804:	b580      	push	{r7, lr}
 804d806:	b084      	sub	sp, #16
 804d808:	af00      	add	r7, sp, #0
 804d80a:	4603      	mov	r3, r0
 804d80c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 804d80e:	2001      	movs	r0, #1
 804d810:	f7fd fcf6 	bl	804b200 <memp_malloc>
 804d814:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 804d816:	68fb      	ldr	r3, [r7, #12]
 804d818:	2b00      	cmp	r3, #0
 804d81a:	d126      	bne.n	804d86a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 804d81c:	f7ff ffcc 	bl	804d7b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 804d820:	f7ff ff9a 	bl	804d758 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 804d824:	2001      	movs	r0, #1
 804d826:	f7fd fceb 	bl	804b200 <memp_malloc>
 804d82a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 804d82c:	68fb      	ldr	r3, [r7, #12]
 804d82e:	2b00      	cmp	r3, #0
 804d830:	d11b      	bne.n	804d86a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 804d832:	2009      	movs	r0, #9
 804d834:	f7ff ff46 	bl	804d6c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 804d838:	2001      	movs	r0, #1
 804d83a:	f7fd fce1 	bl	804b200 <memp_malloc>
 804d83e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 804d840:	68fb      	ldr	r3, [r7, #12]
 804d842:	2b00      	cmp	r3, #0
 804d844:	d111      	bne.n	804d86a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 804d846:	2008      	movs	r0, #8
 804d848:	f7ff ff3c 	bl	804d6c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 804d84c:	2001      	movs	r0, #1
 804d84e:	f7fd fcd7 	bl	804b200 <memp_malloc>
 804d852:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 804d854:	68fb      	ldr	r3, [r7, #12]
 804d856:	2b00      	cmp	r3, #0
 804d858:	d107      	bne.n	804d86a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 804d85a:	79fb      	ldrb	r3, [r7, #7]
 804d85c:	4618      	mov	r0, r3
 804d85e:	f7ff fee3 	bl	804d628 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 804d862:	2001      	movs	r0, #1
 804d864:	f7fd fccc 	bl	804b200 <memp_malloc>
 804d868:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 804d86a:	68fb      	ldr	r3, [r7, #12]
 804d86c:	2b00      	cmp	r3, #0
 804d86e:	d03f      	beq.n	804d8f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 804d870:	229c      	movs	r2, #156	; 0x9c
 804d872:	2100      	movs	r1, #0
 804d874:	68f8      	ldr	r0, [r7, #12]
 804d876:	f007 f939 	bl	8054aec <memset>
    pcb->prio = prio;
 804d87a:	68fb      	ldr	r3, [r7, #12]
 804d87c:	79fa      	ldrb	r2, [r7, #7]
 804d87e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 804d880:	68fb      	ldr	r3, [r7, #12]
 804d882:	f44f 6286 	mov.w	r2, #1072	; 0x430
 804d886:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 804d88a:	68fb      	ldr	r3, [r7, #12]
 804d88c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 804d890:	855a      	strh	r2, [r3, #42]	; 0x2a
 804d892:	68fb      	ldr	r3, [r7, #12]
 804d894:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 804d896:	68fb      	ldr	r3, [r7, #12]
 804d898:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 804d89a:	68fb      	ldr	r3, [r7, #12]
 804d89c:	22ff      	movs	r2, #255	; 0xff
 804d89e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 804d8a0:	68fb      	ldr	r3, [r7, #12]
 804d8a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 804d8a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 804d8a8:	68fb      	ldr	r3, [r7, #12]
 804d8aa:	2206      	movs	r2, #6
 804d8ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 804d8b0:	68fb      	ldr	r3, [r7, #12]
 804d8b2:	2206      	movs	r2, #6
 804d8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 804d8b6:	68fb      	ldr	r3, [r7, #12]
 804d8b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804d8bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 804d8be:	68fb      	ldr	r3, [r7, #12]
 804d8c0:	2201      	movs	r2, #1
 804d8c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 804d8c6:	4b0d      	ldr	r3, [pc, #52]	; (804d8fc <tcp_alloc+0xf8>)
 804d8c8:	681a      	ldr	r2, [r3, #0]
 804d8ca:	68fb      	ldr	r3, [r7, #12]
 804d8cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 804d8ce:	4b0c      	ldr	r3, [pc, #48]	; (804d900 <tcp_alloc+0xfc>)
 804d8d0:	781a      	ldrb	r2, [r3, #0]
 804d8d2:	68fb      	ldr	r3, [r7, #12]
 804d8d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 804d8d6:	68fb      	ldr	r3, [r7, #12]
 804d8d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 804d8dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 804d8e0:	68fb      	ldr	r3, [r7, #12]
 804d8e2:	4a08      	ldr	r2, [pc, #32]	; (804d904 <tcp_alloc+0x100>)
 804d8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 804d8e8:	68fb      	ldr	r3, [r7, #12]
 804d8ea:	4a07      	ldr	r2, [pc, #28]	; (804d908 <tcp_alloc+0x104>)
 804d8ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 804d8f0:	68fb      	ldr	r3, [r7, #12]
}
 804d8f2:	4618      	mov	r0, r3
 804d8f4:	3710      	adds	r7, #16
 804d8f6:	46bd      	mov	sp, r7
 804d8f8:	bd80      	pop	{r7, pc}
 804d8fa:	bf00      	nop
 804d8fc:	200237cc 	.word	0x200237cc
 804d900:	200237e2 	.word	0x200237e2
 804d904:	0804d5bd 	.word	0x0804d5bd
 804d908:	006ddd00 	.word	0x006ddd00

0804d90c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 804d90c:	b580      	push	{r7, lr}
 804d90e:	b082      	sub	sp, #8
 804d910:	af00      	add	r7, sp, #0
 804d912:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 804d914:	687b      	ldr	r3, [r7, #4]
 804d916:	2b00      	cmp	r3, #0
 804d918:	d107      	bne.n	804d92a <tcp_pcb_purge+0x1e>
 804d91a:	4b21      	ldr	r3, [pc, #132]	; (804d9a0 <tcp_pcb_purge+0x94>)
 804d91c:	f640 0251 	movw	r2, #2129	; 0x851
 804d920:	4920      	ldr	r1, [pc, #128]	; (804d9a4 <tcp_pcb_purge+0x98>)
 804d922:	4821      	ldr	r0, [pc, #132]	; (804d9a8 <tcp_pcb_purge+0x9c>)
 804d924:	f006 ff8c 	bl	8054840 <iprintf>
 804d928:	e037      	b.n	804d99a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 804d92a:	687b      	ldr	r3, [r7, #4]
 804d92c:	7d1b      	ldrb	r3, [r3, #20]
 804d92e:	2b00      	cmp	r3, #0
 804d930:	d033      	beq.n	804d99a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 804d932:	687b      	ldr	r3, [r7, #4]
 804d934:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 804d936:	2b0a      	cmp	r3, #10
 804d938:	d02f      	beq.n	804d99a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 804d93a:	687b      	ldr	r3, [r7, #4]
 804d93c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 804d93e:	2b01      	cmp	r3, #1
 804d940:	d02b      	beq.n	804d99a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 804d942:	687b      	ldr	r3, [r7, #4]
 804d944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804d946:	2b00      	cmp	r3, #0
 804d948:	d007      	beq.n	804d95a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 804d94a:	687b      	ldr	r3, [r7, #4]
 804d94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804d94e:	4618      	mov	r0, r3
 804d950:	f7fe fb70 	bl	804c034 <pbuf_free>
      pcb->refused_data = NULL;
 804d954:	687b      	ldr	r3, [r7, #4]
 804d956:	2200      	movs	r2, #0
 804d958:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 804d95a:	687b      	ldr	r3, [r7, #4]
 804d95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804d95e:	2b00      	cmp	r3, #0
 804d960:	d002      	beq.n	804d968 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 804d962:	6878      	ldr	r0, [r7, #4]
 804d964:	f000 f986 	bl	804dc74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 804d968:	687b      	ldr	r3, [r7, #4]
 804d96a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804d96e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 804d970:	687b      	ldr	r3, [r7, #4]
 804d972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804d974:	4618      	mov	r0, r3
 804d976:	f7ff fdc7 	bl	804d508 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 804d97a:	687b      	ldr	r3, [r7, #4]
 804d97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804d97e:	4618      	mov	r0, r3
 804d980:	f7ff fdc2 	bl	804d508 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 804d984:	687b      	ldr	r3, [r7, #4]
 804d986:	2200      	movs	r2, #0
 804d988:	66da      	str	r2, [r3, #108]	; 0x6c
 804d98a:	687b      	ldr	r3, [r7, #4]
 804d98c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 804d98e:	687b      	ldr	r3, [r7, #4]
 804d990:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 804d992:	687b      	ldr	r3, [r7, #4]
 804d994:	2200      	movs	r2, #0
 804d996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 804d99a:	3708      	adds	r7, #8
 804d99c:	46bd      	mov	sp, r7
 804d99e:	bd80      	pop	{r7, pc}
 804d9a0:	08056528 	.word	0x08056528
 804d9a4:	08056b74 	.word	0x08056b74
 804d9a8:	0805656c 	.word	0x0805656c

0804d9ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 804d9ac:	b580      	push	{r7, lr}
 804d9ae:	b084      	sub	sp, #16
 804d9b0:	af00      	add	r7, sp, #0
 804d9b2:	6078      	str	r0, [r7, #4]
 804d9b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 804d9b6:	683b      	ldr	r3, [r7, #0]
 804d9b8:	2b00      	cmp	r3, #0
 804d9ba:	d106      	bne.n	804d9ca <tcp_pcb_remove+0x1e>
 804d9bc:	4b3e      	ldr	r3, [pc, #248]	; (804dab8 <tcp_pcb_remove+0x10c>)
 804d9be:	f640 0283 	movw	r2, #2179	; 0x883
 804d9c2:	493e      	ldr	r1, [pc, #248]	; (804dabc <tcp_pcb_remove+0x110>)
 804d9c4:	483e      	ldr	r0, [pc, #248]	; (804dac0 <tcp_pcb_remove+0x114>)
 804d9c6:	f006 ff3b 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 804d9ca:	687b      	ldr	r3, [r7, #4]
 804d9cc:	2b00      	cmp	r3, #0
 804d9ce:	d106      	bne.n	804d9de <tcp_pcb_remove+0x32>
 804d9d0:	4b39      	ldr	r3, [pc, #228]	; (804dab8 <tcp_pcb_remove+0x10c>)
 804d9d2:	f640 0284 	movw	r2, #2180	; 0x884
 804d9d6:	493b      	ldr	r1, [pc, #236]	; (804dac4 <tcp_pcb_remove+0x118>)
 804d9d8:	4839      	ldr	r0, [pc, #228]	; (804dac0 <tcp_pcb_remove+0x114>)
 804d9da:	f006 ff31 	bl	8054840 <iprintf>

  TCP_RMV(pcblist, pcb);
 804d9de:	687b      	ldr	r3, [r7, #4]
 804d9e0:	681b      	ldr	r3, [r3, #0]
 804d9e2:	683a      	ldr	r2, [r7, #0]
 804d9e4:	429a      	cmp	r2, r3
 804d9e6:	d105      	bne.n	804d9f4 <tcp_pcb_remove+0x48>
 804d9e8:	687b      	ldr	r3, [r7, #4]
 804d9ea:	681b      	ldr	r3, [r3, #0]
 804d9ec:	68da      	ldr	r2, [r3, #12]
 804d9ee:	687b      	ldr	r3, [r7, #4]
 804d9f0:	601a      	str	r2, [r3, #0]
 804d9f2:	e013      	b.n	804da1c <tcp_pcb_remove+0x70>
 804d9f4:	687b      	ldr	r3, [r7, #4]
 804d9f6:	681b      	ldr	r3, [r3, #0]
 804d9f8:	60fb      	str	r3, [r7, #12]
 804d9fa:	e00c      	b.n	804da16 <tcp_pcb_remove+0x6a>
 804d9fc:	68fb      	ldr	r3, [r7, #12]
 804d9fe:	68db      	ldr	r3, [r3, #12]
 804da00:	683a      	ldr	r2, [r7, #0]
 804da02:	429a      	cmp	r2, r3
 804da04:	d104      	bne.n	804da10 <tcp_pcb_remove+0x64>
 804da06:	683b      	ldr	r3, [r7, #0]
 804da08:	68da      	ldr	r2, [r3, #12]
 804da0a:	68fb      	ldr	r3, [r7, #12]
 804da0c:	60da      	str	r2, [r3, #12]
 804da0e:	e005      	b.n	804da1c <tcp_pcb_remove+0x70>
 804da10:	68fb      	ldr	r3, [r7, #12]
 804da12:	68db      	ldr	r3, [r3, #12]
 804da14:	60fb      	str	r3, [r7, #12]
 804da16:	68fb      	ldr	r3, [r7, #12]
 804da18:	2b00      	cmp	r3, #0
 804da1a:	d1ef      	bne.n	804d9fc <tcp_pcb_remove+0x50>
 804da1c:	683b      	ldr	r3, [r7, #0]
 804da1e:	2200      	movs	r2, #0
 804da20:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 804da22:	6838      	ldr	r0, [r7, #0]
 804da24:	f7ff ff72 	bl	804d90c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 804da28:	683b      	ldr	r3, [r7, #0]
 804da2a:	7d1b      	ldrb	r3, [r3, #20]
 804da2c:	2b0a      	cmp	r3, #10
 804da2e:	d013      	beq.n	804da58 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 804da30:	683b      	ldr	r3, [r7, #0]
 804da32:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 804da34:	2b01      	cmp	r3, #1
 804da36:	d00f      	beq.n	804da58 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 804da38:	683b      	ldr	r3, [r7, #0]
 804da3a:	8b5b      	ldrh	r3, [r3, #26]
 804da3c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 804da40:	2b00      	cmp	r3, #0
 804da42:	d009      	beq.n	804da58 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 804da44:	683b      	ldr	r3, [r7, #0]
 804da46:	8b5b      	ldrh	r3, [r3, #26]
 804da48:	f043 0302 	orr.w	r3, r3, #2
 804da4c:	b29a      	uxth	r2, r3
 804da4e:	683b      	ldr	r3, [r7, #0]
 804da50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 804da52:	6838      	ldr	r0, [r7, #0]
 804da54:	f002 ff6e 	bl	8050934 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 804da58:	683b      	ldr	r3, [r7, #0]
 804da5a:	7d1b      	ldrb	r3, [r3, #20]
 804da5c:	2b01      	cmp	r3, #1
 804da5e:	d020      	beq.n	804daa2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 804da60:	683b      	ldr	r3, [r7, #0]
 804da62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804da64:	2b00      	cmp	r3, #0
 804da66:	d006      	beq.n	804da76 <tcp_pcb_remove+0xca>
 804da68:	4b13      	ldr	r3, [pc, #76]	; (804dab8 <tcp_pcb_remove+0x10c>)
 804da6a:	f640 0293 	movw	r2, #2195	; 0x893
 804da6e:	4916      	ldr	r1, [pc, #88]	; (804dac8 <tcp_pcb_remove+0x11c>)
 804da70:	4813      	ldr	r0, [pc, #76]	; (804dac0 <tcp_pcb_remove+0x114>)
 804da72:	f006 fee5 	bl	8054840 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 804da76:	683b      	ldr	r3, [r7, #0]
 804da78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804da7a:	2b00      	cmp	r3, #0
 804da7c:	d006      	beq.n	804da8c <tcp_pcb_remove+0xe0>
 804da7e:	4b0e      	ldr	r3, [pc, #56]	; (804dab8 <tcp_pcb_remove+0x10c>)
 804da80:	f640 0294 	movw	r2, #2196	; 0x894
 804da84:	4911      	ldr	r1, [pc, #68]	; (804dacc <tcp_pcb_remove+0x120>)
 804da86:	480e      	ldr	r0, [pc, #56]	; (804dac0 <tcp_pcb_remove+0x114>)
 804da88:	f006 feda 	bl	8054840 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 804da8c:	683b      	ldr	r3, [r7, #0]
 804da8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804da90:	2b00      	cmp	r3, #0
 804da92:	d006      	beq.n	804daa2 <tcp_pcb_remove+0xf6>
 804da94:	4b08      	ldr	r3, [pc, #32]	; (804dab8 <tcp_pcb_remove+0x10c>)
 804da96:	f640 0296 	movw	r2, #2198	; 0x896
 804da9a:	490d      	ldr	r1, [pc, #52]	; (804dad0 <tcp_pcb_remove+0x124>)
 804da9c:	4808      	ldr	r0, [pc, #32]	; (804dac0 <tcp_pcb_remove+0x114>)
 804da9e:	f006 fecf 	bl	8054840 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 804daa2:	683b      	ldr	r3, [r7, #0]
 804daa4:	2200      	movs	r2, #0
 804daa6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 804daa8:	683b      	ldr	r3, [r7, #0]
 804daaa:	2200      	movs	r2, #0
 804daac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 804daae:	bf00      	nop
 804dab0:	3710      	adds	r7, #16
 804dab2:	46bd      	mov	sp, r7
 804dab4:	bd80      	pop	{r7, pc}
 804dab6:	bf00      	nop
 804dab8:	08056528 	.word	0x08056528
 804dabc:	08056b90 	.word	0x08056b90
 804dac0:	0805656c 	.word	0x0805656c
 804dac4:	08056bac 	.word	0x08056bac
 804dac8:	08056bcc 	.word	0x08056bcc
 804dacc:	08056be4 	.word	0x08056be4
 804dad0:	08056c00 	.word	0x08056c00

0804dad4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 804dad4:	b580      	push	{r7, lr}
 804dad6:	b082      	sub	sp, #8
 804dad8:	af00      	add	r7, sp, #0
 804dada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 804dadc:	687b      	ldr	r3, [r7, #4]
 804dade:	2b00      	cmp	r3, #0
 804dae0:	d106      	bne.n	804daf0 <tcp_next_iss+0x1c>
 804dae2:	4b0a      	ldr	r3, [pc, #40]	; (804db0c <tcp_next_iss+0x38>)
 804dae4:	f640 02af 	movw	r2, #2223	; 0x8af
 804dae8:	4909      	ldr	r1, [pc, #36]	; (804db10 <tcp_next_iss+0x3c>)
 804daea:	480a      	ldr	r0, [pc, #40]	; (804db14 <tcp_next_iss+0x40>)
 804daec:	f006 fea8 	bl	8054840 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 804daf0:	4b09      	ldr	r3, [pc, #36]	; (804db18 <tcp_next_iss+0x44>)
 804daf2:	681a      	ldr	r2, [r3, #0]
 804daf4:	4b09      	ldr	r3, [pc, #36]	; (804db1c <tcp_next_iss+0x48>)
 804daf6:	681b      	ldr	r3, [r3, #0]
 804daf8:	4413      	add	r3, r2
 804dafa:	4a07      	ldr	r2, [pc, #28]	; (804db18 <tcp_next_iss+0x44>)
 804dafc:	6013      	str	r3, [r2, #0]
  return iss;
 804dafe:	4b06      	ldr	r3, [pc, #24]	; (804db18 <tcp_next_iss+0x44>)
 804db00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 804db02:	4618      	mov	r0, r3
 804db04:	3708      	adds	r7, #8
 804db06:	46bd      	mov	sp, r7
 804db08:	bd80      	pop	{r7, pc}
 804db0a:	bf00      	nop
 804db0c:	08056528 	.word	0x08056528
 804db10:	08056c18 	.word	0x08056c18
 804db14:	0805656c 	.word	0x0805656c
 804db18:	20000028 	.word	0x20000028
 804db1c:	200237cc 	.word	0x200237cc

0804db20 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 804db20:	b580      	push	{r7, lr}
 804db22:	b086      	sub	sp, #24
 804db24:	af00      	add	r7, sp, #0
 804db26:	4603      	mov	r3, r0
 804db28:	60b9      	str	r1, [r7, #8]
 804db2a:	607a      	str	r2, [r7, #4]
 804db2c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 804db2e:	687b      	ldr	r3, [r7, #4]
 804db30:	2b00      	cmp	r3, #0
 804db32:	d106      	bne.n	804db42 <tcp_eff_send_mss_netif+0x22>
 804db34:	4b14      	ldr	r3, [pc, #80]	; (804db88 <tcp_eff_send_mss_netif+0x68>)
 804db36:	f640 02c5 	movw	r2, #2245	; 0x8c5
 804db3a:	4914      	ldr	r1, [pc, #80]	; (804db8c <tcp_eff_send_mss_netif+0x6c>)
 804db3c:	4814      	ldr	r0, [pc, #80]	; (804db90 <tcp_eff_send_mss_netif+0x70>)
 804db3e:	f006 fe7f 	bl	8054840 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 804db42:	68bb      	ldr	r3, [r7, #8]
 804db44:	2b00      	cmp	r3, #0
 804db46:	d101      	bne.n	804db4c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 804db48:	89fb      	ldrh	r3, [r7, #14]
 804db4a:	e019      	b.n	804db80 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 804db4c:	68bb      	ldr	r3, [r7, #8]
 804db4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 804db50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 804db52:	8afb      	ldrh	r3, [r7, #22]
 804db54:	2b00      	cmp	r3, #0
 804db56:	d012      	beq.n	804db7e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 804db58:	2328      	movs	r3, #40	; 0x28
 804db5a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 804db5c:	8afa      	ldrh	r2, [r7, #22]
 804db5e:	8abb      	ldrh	r3, [r7, #20]
 804db60:	429a      	cmp	r2, r3
 804db62:	d904      	bls.n	804db6e <tcp_eff_send_mss_netif+0x4e>
 804db64:	8afa      	ldrh	r2, [r7, #22]
 804db66:	8abb      	ldrh	r3, [r7, #20]
 804db68:	1ad3      	subs	r3, r2, r3
 804db6a:	b29b      	uxth	r3, r3
 804db6c:	e000      	b.n	804db70 <tcp_eff_send_mss_netif+0x50>
 804db6e:	2300      	movs	r3, #0
 804db70:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 804db72:	8a7a      	ldrh	r2, [r7, #18]
 804db74:	89fb      	ldrh	r3, [r7, #14]
 804db76:	4293      	cmp	r3, r2
 804db78:	bf28      	it	cs
 804db7a:	4613      	movcs	r3, r2
 804db7c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 804db7e:	89fb      	ldrh	r3, [r7, #14]
}
 804db80:	4618      	mov	r0, r3
 804db82:	3718      	adds	r7, #24
 804db84:	46bd      	mov	sp, r7
 804db86:	bd80      	pop	{r7, pc}
 804db88:	08056528 	.word	0x08056528
 804db8c:	08056c34 	.word	0x08056c34
 804db90:	0805656c 	.word	0x0805656c

0804db94 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 804db94:	b580      	push	{r7, lr}
 804db96:	b084      	sub	sp, #16
 804db98:	af00      	add	r7, sp, #0
 804db9a:	6078      	str	r0, [r7, #4]
 804db9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 804db9e:	683b      	ldr	r3, [r7, #0]
 804dba0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 804dba2:	687b      	ldr	r3, [r7, #4]
 804dba4:	2b00      	cmp	r3, #0
 804dba6:	d119      	bne.n	804dbdc <tcp_netif_ip_addr_changed_pcblist+0x48>
 804dba8:	4b10      	ldr	r3, [pc, #64]	; (804dbec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 804dbaa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 804dbae:	4910      	ldr	r1, [pc, #64]	; (804dbf0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 804dbb0:	4810      	ldr	r0, [pc, #64]	; (804dbf4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 804dbb2:	f006 fe45 	bl	8054840 <iprintf>

  while (pcb != NULL) {
 804dbb6:	e011      	b.n	804dbdc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 804dbb8:	68fb      	ldr	r3, [r7, #12]
 804dbba:	681a      	ldr	r2, [r3, #0]
 804dbbc:	687b      	ldr	r3, [r7, #4]
 804dbbe:	681b      	ldr	r3, [r3, #0]
 804dbc0:	429a      	cmp	r2, r3
 804dbc2:	d108      	bne.n	804dbd6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 804dbc4:	68fb      	ldr	r3, [r7, #12]
 804dbc6:	68db      	ldr	r3, [r3, #12]
 804dbc8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 804dbca:	68f8      	ldr	r0, [r7, #12]
 804dbcc:	f7fe ffc6 	bl	804cb5c <tcp_abort>
      pcb = next;
 804dbd0:	68bb      	ldr	r3, [r7, #8]
 804dbd2:	60fb      	str	r3, [r7, #12]
 804dbd4:	e002      	b.n	804dbdc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 804dbd6:	68fb      	ldr	r3, [r7, #12]
 804dbd8:	68db      	ldr	r3, [r3, #12]
 804dbda:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 804dbdc:	68fb      	ldr	r3, [r7, #12]
 804dbde:	2b00      	cmp	r3, #0
 804dbe0:	d1ea      	bne.n	804dbb8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 804dbe2:	bf00      	nop
 804dbe4:	bf00      	nop
 804dbe6:	3710      	adds	r7, #16
 804dbe8:	46bd      	mov	sp, r7
 804dbea:	bd80      	pop	{r7, pc}
 804dbec:	08056528 	.word	0x08056528
 804dbf0:	08056c5c 	.word	0x08056c5c
 804dbf4:	0805656c 	.word	0x0805656c

0804dbf8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 804dbf8:	b580      	push	{r7, lr}
 804dbfa:	b084      	sub	sp, #16
 804dbfc:	af00      	add	r7, sp, #0
 804dbfe:	6078      	str	r0, [r7, #4]
 804dc00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 804dc02:	687b      	ldr	r3, [r7, #4]
 804dc04:	2b00      	cmp	r3, #0
 804dc06:	d02a      	beq.n	804dc5e <tcp_netif_ip_addr_changed+0x66>
 804dc08:	687b      	ldr	r3, [r7, #4]
 804dc0a:	681b      	ldr	r3, [r3, #0]
 804dc0c:	2b00      	cmp	r3, #0
 804dc0e:	d026      	beq.n	804dc5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 804dc10:	4b15      	ldr	r3, [pc, #84]	; (804dc68 <tcp_netif_ip_addr_changed+0x70>)
 804dc12:	681b      	ldr	r3, [r3, #0]
 804dc14:	4619      	mov	r1, r3
 804dc16:	6878      	ldr	r0, [r7, #4]
 804dc18:	f7ff ffbc 	bl	804db94 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 804dc1c:	4b13      	ldr	r3, [pc, #76]	; (804dc6c <tcp_netif_ip_addr_changed+0x74>)
 804dc1e:	681b      	ldr	r3, [r3, #0]
 804dc20:	4619      	mov	r1, r3
 804dc22:	6878      	ldr	r0, [r7, #4]
 804dc24:	f7ff ffb6 	bl	804db94 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 804dc28:	683b      	ldr	r3, [r7, #0]
 804dc2a:	2b00      	cmp	r3, #0
 804dc2c:	d017      	beq.n	804dc5e <tcp_netif_ip_addr_changed+0x66>
 804dc2e:	683b      	ldr	r3, [r7, #0]
 804dc30:	681b      	ldr	r3, [r3, #0]
 804dc32:	2b00      	cmp	r3, #0
 804dc34:	d013      	beq.n	804dc5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 804dc36:	4b0e      	ldr	r3, [pc, #56]	; (804dc70 <tcp_netif_ip_addr_changed+0x78>)
 804dc38:	681b      	ldr	r3, [r3, #0]
 804dc3a:	60fb      	str	r3, [r7, #12]
 804dc3c:	e00c      	b.n	804dc58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 804dc3e:	68fb      	ldr	r3, [r7, #12]
 804dc40:	681a      	ldr	r2, [r3, #0]
 804dc42:	687b      	ldr	r3, [r7, #4]
 804dc44:	681b      	ldr	r3, [r3, #0]
 804dc46:	429a      	cmp	r2, r3
 804dc48:	d103      	bne.n	804dc52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 804dc4a:	683b      	ldr	r3, [r7, #0]
 804dc4c:	681a      	ldr	r2, [r3, #0]
 804dc4e:	68fb      	ldr	r3, [r7, #12]
 804dc50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 804dc52:	68fb      	ldr	r3, [r7, #12]
 804dc54:	68db      	ldr	r3, [r3, #12]
 804dc56:	60fb      	str	r3, [r7, #12]
 804dc58:	68fb      	ldr	r3, [r7, #12]
 804dc5a:	2b00      	cmp	r3, #0
 804dc5c:	d1ef      	bne.n	804dc3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 804dc5e:	bf00      	nop
 804dc60:	3710      	adds	r7, #16
 804dc62:	46bd      	mov	sp, r7
 804dc64:	bd80      	pop	{r7, pc}
 804dc66:	bf00      	nop
 804dc68:	200237d8 	.word	0x200237d8
 804dc6c:	200237d0 	.word	0x200237d0
 804dc70:	200237d4 	.word	0x200237d4

0804dc74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 804dc74:	b580      	push	{r7, lr}
 804dc76:	b082      	sub	sp, #8
 804dc78:	af00      	add	r7, sp, #0
 804dc7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 804dc7c:	687b      	ldr	r3, [r7, #4]
 804dc7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804dc80:	2b00      	cmp	r3, #0
 804dc82:	d007      	beq.n	804dc94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 804dc84:	687b      	ldr	r3, [r7, #4]
 804dc86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804dc88:	4618      	mov	r0, r3
 804dc8a:	f7ff fc3d 	bl	804d508 <tcp_segs_free>
    pcb->ooseq = NULL;
 804dc8e:	687b      	ldr	r3, [r7, #4]
 804dc90:	2200      	movs	r2, #0
 804dc92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 804dc94:	bf00      	nop
 804dc96:	3708      	adds	r7, #8
 804dc98:	46bd      	mov	sp, r7
 804dc9a:	bd80      	pop	{r7, pc}

0804dc9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 804dc9c:	b590      	push	{r4, r7, lr}
 804dc9e:	b08d      	sub	sp, #52	; 0x34
 804dca0:	af04      	add	r7, sp, #16
 804dca2:	6078      	str	r0, [r7, #4]
 804dca4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 804dca6:	687b      	ldr	r3, [r7, #4]
 804dca8:	2b00      	cmp	r3, #0
 804dcaa:	d105      	bne.n	804dcb8 <tcp_input+0x1c>
 804dcac:	4b9b      	ldr	r3, [pc, #620]	; (804df1c <tcp_input+0x280>)
 804dcae:	2283      	movs	r2, #131	; 0x83
 804dcb0:	499b      	ldr	r1, [pc, #620]	; (804df20 <tcp_input+0x284>)
 804dcb2:	489c      	ldr	r0, [pc, #624]	; (804df24 <tcp_input+0x288>)
 804dcb4:	f006 fdc4 	bl	8054840 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 804dcb8:	687b      	ldr	r3, [r7, #4]
 804dcba:	685b      	ldr	r3, [r3, #4]
 804dcbc:	4a9a      	ldr	r2, [pc, #616]	; (804df28 <tcp_input+0x28c>)
 804dcbe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 804dcc0:	687b      	ldr	r3, [r7, #4]
 804dcc2:	895b      	ldrh	r3, [r3, #10]
 804dcc4:	2b13      	cmp	r3, #19
 804dcc6:	f240 83d1 	bls.w	804e46c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 804dcca:	4b98      	ldr	r3, [pc, #608]	; (804df2c <tcp_input+0x290>)
 804dccc:	695b      	ldr	r3, [r3, #20]
 804dcce:	4a97      	ldr	r2, [pc, #604]	; (804df2c <tcp_input+0x290>)
 804dcd0:	6812      	ldr	r2, [r2, #0]
 804dcd2:	4611      	mov	r1, r2
 804dcd4:	4618      	mov	r0, r3
 804dcd6:	f005 fc47 	bl	8053568 <ip4_addr_isbroadcast_u32>
 804dcda:	4603      	mov	r3, r0
 804dcdc:	2b00      	cmp	r3, #0
 804dcde:	f040 83c7 	bne.w	804e470 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 804dce2:	4b92      	ldr	r3, [pc, #584]	; (804df2c <tcp_input+0x290>)
 804dce4:	695b      	ldr	r3, [r3, #20]
 804dce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 804dcea:	2be0      	cmp	r3, #224	; 0xe0
 804dcec:	f000 83c0 	beq.w	804e470 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 804dcf0:	4b8d      	ldr	r3, [pc, #564]	; (804df28 <tcp_input+0x28c>)
 804dcf2:	681b      	ldr	r3, [r3, #0]
 804dcf4:	899b      	ldrh	r3, [r3, #12]
 804dcf6:	b29b      	uxth	r3, r3
 804dcf8:	4618      	mov	r0, r3
 804dcfa:	f7fc fda9 	bl	804a850 <lwip_htons>
 804dcfe:	4603      	mov	r3, r0
 804dd00:	0b1b      	lsrs	r3, r3, #12
 804dd02:	b29b      	uxth	r3, r3
 804dd04:	b2db      	uxtb	r3, r3
 804dd06:	009b      	lsls	r3, r3, #2
 804dd08:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 804dd0a:	7cbb      	ldrb	r3, [r7, #18]
 804dd0c:	2b13      	cmp	r3, #19
 804dd0e:	f240 83b1 	bls.w	804e474 <tcp_input+0x7d8>
 804dd12:	7cbb      	ldrb	r3, [r7, #18]
 804dd14:	b29a      	uxth	r2, r3
 804dd16:	687b      	ldr	r3, [r7, #4]
 804dd18:	891b      	ldrh	r3, [r3, #8]
 804dd1a:	429a      	cmp	r2, r3
 804dd1c:	f200 83aa 	bhi.w	804e474 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 804dd20:	7cbb      	ldrb	r3, [r7, #18]
 804dd22:	b29b      	uxth	r3, r3
 804dd24:	3b14      	subs	r3, #20
 804dd26:	b29a      	uxth	r2, r3
 804dd28:	4b81      	ldr	r3, [pc, #516]	; (804df30 <tcp_input+0x294>)
 804dd2a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 804dd2c:	4b81      	ldr	r3, [pc, #516]	; (804df34 <tcp_input+0x298>)
 804dd2e:	2200      	movs	r2, #0
 804dd30:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 804dd32:	687b      	ldr	r3, [r7, #4]
 804dd34:	895a      	ldrh	r2, [r3, #10]
 804dd36:	7cbb      	ldrb	r3, [r7, #18]
 804dd38:	b29b      	uxth	r3, r3
 804dd3a:	429a      	cmp	r2, r3
 804dd3c:	d309      	bcc.n	804dd52 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 804dd3e:	4b7c      	ldr	r3, [pc, #496]	; (804df30 <tcp_input+0x294>)
 804dd40:	881a      	ldrh	r2, [r3, #0]
 804dd42:	4b7d      	ldr	r3, [pc, #500]	; (804df38 <tcp_input+0x29c>)
 804dd44:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 804dd46:	7cbb      	ldrb	r3, [r7, #18]
 804dd48:	4619      	mov	r1, r3
 804dd4a:	6878      	ldr	r0, [r7, #4]
 804dd4c:	f7fe f8ec 	bl	804bf28 <pbuf_remove_header>
 804dd50:	e04e      	b.n	804ddf0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 804dd52:	687b      	ldr	r3, [r7, #4]
 804dd54:	681b      	ldr	r3, [r3, #0]
 804dd56:	2b00      	cmp	r3, #0
 804dd58:	d105      	bne.n	804dd66 <tcp_input+0xca>
 804dd5a:	4b70      	ldr	r3, [pc, #448]	; (804df1c <tcp_input+0x280>)
 804dd5c:	22c2      	movs	r2, #194	; 0xc2
 804dd5e:	4977      	ldr	r1, [pc, #476]	; (804df3c <tcp_input+0x2a0>)
 804dd60:	4870      	ldr	r0, [pc, #448]	; (804df24 <tcp_input+0x288>)
 804dd62:	f006 fd6d 	bl	8054840 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 804dd66:	2114      	movs	r1, #20
 804dd68:	6878      	ldr	r0, [r7, #4]
 804dd6a:	f7fe f8dd 	bl	804bf28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 804dd6e:	687b      	ldr	r3, [r7, #4]
 804dd70:	895a      	ldrh	r2, [r3, #10]
 804dd72:	4b71      	ldr	r3, [pc, #452]	; (804df38 <tcp_input+0x29c>)
 804dd74:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 804dd76:	4b6e      	ldr	r3, [pc, #440]	; (804df30 <tcp_input+0x294>)
 804dd78:	881a      	ldrh	r2, [r3, #0]
 804dd7a:	4b6f      	ldr	r3, [pc, #444]	; (804df38 <tcp_input+0x29c>)
 804dd7c:	881b      	ldrh	r3, [r3, #0]
 804dd7e:	1ad3      	subs	r3, r2, r3
 804dd80:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 804dd82:	4b6d      	ldr	r3, [pc, #436]	; (804df38 <tcp_input+0x29c>)
 804dd84:	881b      	ldrh	r3, [r3, #0]
 804dd86:	4619      	mov	r1, r3
 804dd88:	6878      	ldr	r0, [r7, #4]
 804dd8a:	f7fe f8cd 	bl	804bf28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 804dd8e:	687b      	ldr	r3, [r7, #4]
 804dd90:	681b      	ldr	r3, [r3, #0]
 804dd92:	895b      	ldrh	r3, [r3, #10]
 804dd94:	8a3a      	ldrh	r2, [r7, #16]
 804dd96:	429a      	cmp	r2, r3
 804dd98:	f200 836e 	bhi.w	804e478 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 804dd9c:	687b      	ldr	r3, [r7, #4]
 804dd9e:	681b      	ldr	r3, [r3, #0]
 804dda0:	685b      	ldr	r3, [r3, #4]
 804dda2:	4a64      	ldr	r2, [pc, #400]	; (804df34 <tcp_input+0x298>)
 804dda4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 804dda6:	687b      	ldr	r3, [r7, #4]
 804dda8:	681b      	ldr	r3, [r3, #0]
 804ddaa:	8a3a      	ldrh	r2, [r7, #16]
 804ddac:	4611      	mov	r1, r2
 804ddae:	4618      	mov	r0, r3
 804ddb0:	f7fe f8ba 	bl	804bf28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 804ddb4:	687b      	ldr	r3, [r7, #4]
 804ddb6:	891a      	ldrh	r2, [r3, #8]
 804ddb8:	8a3b      	ldrh	r3, [r7, #16]
 804ddba:	1ad3      	subs	r3, r2, r3
 804ddbc:	b29a      	uxth	r2, r3
 804ddbe:	687b      	ldr	r3, [r7, #4]
 804ddc0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 804ddc2:	687b      	ldr	r3, [r7, #4]
 804ddc4:	895b      	ldrh	r3, [r3, #10]
 804ddc6:	2b00      	cmp	r3, #0
 804ddc8:	d005      	beq.n	804ddd6 <tcp_input+0x13a>
 804ddca:	4b54      	ldr	r3, [pc, #336]	; (804df1c <tcp_input+0x280>)
 804ddcc:	22df      	movs	r2, #223	; 0xdf
 804ddce:	495c      	ldr	r1, [pc, #368]	; (804df40 <tcp_input+0x2a4>)
 804ddd0:	4854      	ldr	r0, [pc, #336]	; (804df24 <tcp_input+0x288>)
 804ddd2:	f006 fd35 	bl	8054840 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 804ddd6:	687b      	ldr	r3, [r7, #4]
 804ddd8:	891a      	ldrh	r2, [r3, #8]
 804ddda:	687b      	ldr	r3, [r7, #4]
 804dddc:	681b      	ldr	r3, [r3, #0]
 804ddde:	891b      	ldrh	r3, [r3, #8]
 804dde0:	429a      	cmp	r2, r3
 804dde2:	d005      	beq.n	804ddf0 <tcp_input+0x154>
 804dde4:	4b4d      	ldr	r3, [pc, #308]	; (804df1c <tcp_input+0x280>)
 804dde6:	22e0      	movs	r2, #224	; 0xe0
 804dde8:	4956      	ldr	r1, [pc, #344]	; (804df44 <tcp_input+0x2a8>)
 804ddea:	484e      	ldr	r0, [pc, #312]	; (804df24 <tcp_input+0x288>)
 804ddec:	f006 fd28 	bl	8054840 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 804ddf0:	4b4d      	ldr	r3, [pc, #308]	; (804df28 <tcp_input+0x28c>)
 804ddf2:	681b      	ldr	r3, [r3, #0]
 804ddf4:	881b      	ldrh	r3, [r3, #0]
 804ddf6:	b29b      	uxth	r3, r3
 804ddf8:	4a4b      	ldr	r2, [pc, #300]	; (804df28 <tcp_input+0x28c>)
 804ddfa:	6814      	ldr	r4, [r2, #0]
 804ddfc:	4618      	mov	r0, r3
 804ddfe:	f7fc fd27 	bl	804a850 <lwip_htons>
 804de02:	4603      	mov	r3, r0
 804de04:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 804de06:	4b48      	ldr	r3, [pc, #288]	; (804df28 <tcp_input+0x28c>)
 804de08:	681b      	ldr	r3, [r3, #0]
 804de0a:	885b      	ldrh	r3, [r3, #2]
 804de0c:	b29b      	uxth	r3, r3
 804de0e:	4a46      	ldr	r2, [pc, #280]	; (804df28 <tcp_input+0x28c>)
 804de10:	6814      	ldr	r4, [r2, #0]
 804de12:	4618      	mov	r0, r3
 804de14:	f7fc fd1c 	bl	804a850 <lwip_htons>
 804de18:	4603      	mov	r3, r0
 804de1a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 804de1c:	4b42      	ldr	r3, [pc, #264]	; (804df28 <tcp_input+0x28c>)
 804de1e:	681b      	ldr	r3, [r3, #0]
 804de20:	685b      	ldr	r3, [r3, #4]
 804de22:	4a41      	ldr	r2, [pc, #260]	; (804df28 <tcp_input+0x28c>)
 804de24:	6814      	ldr	r4, [r2, #0]
 804de26:	4618      	mov	r0, r3
 804de28:	f7fc fd27 	bl	804a87a <lwip_htonl>
 804de2c:	4603      	mov	r3, r0
 804de2e:	6063      	str	r3, [r4, #4]
 804de30:	6863      	ldr	r3, [r4, #4]
 804de32:	4a45      	ldr	r2, [pc, #276]	; (804df48 <tcp_input+0x2ac>)
 804de34:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 804de36:	4b3c      	ldr	r3, [pc, #240]	; (804df28 <tcp_input+0x28c>)
 804de38:	681b      	ldr	r3, [r3, #0]
 804de3a:	689b      	ldr	r3, [r3, #8]
 804de3c:	4a3a      	ldr	r2, [pc, #232]	; (804df28 <tcp_input+0x28c>)
 804de3e:	6814      	ldr	r4, [r2, #0]
 804de40:	4618      	mov	r0, r3
 804de42:	f7fc fd1a 	bl	804a87a <lwip_htonl>
 804de46:	4603      	mov	r3, r0
 804de48:	60a3      	str	r3, [r4, #8]
 804de4a:	68a3      	ldr	r3, [r4, #8]
 804de4c:	4a3f      	ldr	r2, [pc, #252]	; (804df4c <tcp_input+0x2b0>)
 804de4e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 804de50:	4b35      	ldr	r3, [pc, #212]	; (804df28 <tcp_input+0x28c>)
 804de52:	681b      	ldr	r3, [r3, #0]
 804de54:	89db      	ldrh	r3, [r3, #14]
 804de56:	b29b      	uxth	r3, r3
 804de58:	4a33      	ldr	r2, [pc, #204]	; (804df28 <tcp_input+0x28c>)
 804de5a:	6814      	ldr	r4, [r2, #0]
 804de5c:	4618      	mov	r0, r3
 804de5e:	f7fc fcf7 	bl	804a850 <lwip_htons>
 804de62:	4603      	mov	r3, r0
 804de64:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 804de66:	4b30      	ldr	r3, [pc, #192]	; (804df28 <tcp_input+0x28c>)
 804de68:	681b      	ldr	r3, [r3, #0]
 804de6a:	899b      	ldrh	r3, [r3, #12]
 804de6c:	b29b      	uxth	r3, r3
 804de6e:	4618      	mov	r0, r3
 804de70:	f7fc fcee 	bl	804a850 <lwip_htons>
 804de74:	4603      	mov	r3, r0
 804de76:	b2db      	uxtb	r3, r3
 804de78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804de7c:	b2da      	uxtb	r2, r3
 804de7e:	4b34      	ldr	r3, [pc, #208]	; (804df50 <tcp_input+0x2b4>)
 804de80:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 804de82:	687b      	ldr	r3, [r7, #4]
 804de84:	891a      	ldrh	r2, [r3, #8]
 804de86:	4b33      	ldr	r3, [pc, #204]	; (804df54 <tcp_input+0x2b8>)
 804de88:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 804de8a:	4b31      	ldr	r3, [pc, #196]	; (804df50 <tcp_input+0x2b4>)
 804de8c:	781b      	ldrb	r3, [r3, #0]
 804de8e:	f003 0303 	and.w	r3, r3, #3
 804de92:	2b00      	cmp	r3, #0
 804de94:	d00c      	beq.n	804deb0 <tcp_input+0x214>
    tcplen++;
 804de96:	4b2f      	ldr	r3, [pc, #188]	; (804df54 <tcp_input+0x2b8>)
 804de98:	881b      	ldrh	r3, [r3, #0]
 804de9a:	3301      	adds	r3, #1
 804de9c:	b29a      	uxth	r2, r3
 804de9e:	4b2d      	ldr	r3, [pc, #180]	; (804df54 <tcp_input+0x2b8>)
 804dea0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 804dea2:	687b      	ldr	r3, [r7, #4]
 804dea4:	891a      	ldrh	r2, [r3, #8]
 804dea6:	4b2b      	ldr	r3, [pc, #172]	; (804df54 <tcp_input+0x2b8>)
 804dea8:	881b      	ldrh	r3, [r3, #0]
 804deaa:	429a      	cmp	r2, r3
 804deac:	f200 82e6 	bhi.w	804e47c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 804deb0:	2300      	movs	r3, #0
 804deb2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 804deb4:	4b28      	ldr	r3, [pc, #160]	; (804df58 <tcp_input+0x2bc>)
 804deb6:	681b      	ldr	r3, [r3, #0]
 804deb8:	61fb      	str	r3, [r7, #28]
 804deba:	e09d      	b.n	804dff8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 804debc:	69fb      	ldr	r3, [r7, #28]
 804debe:	7d1b      	ldrb	r3, [r3, #20]
 804dec0:	2b00      	cmp	r3, #0
 804dec2:	d105      	bne.n	804ded0 <tcp_input+0x234>
 804dec4:	4b15      	ldr	r3, [pc, #84]	; (804df1c <tcp_input+0x280>)
 804dec6:	22fb      	movs	r2, #251	; 0xfb
 804dec8:	4924      	ldr	r1, [pc, #144]	; (804df5c <tcp_input+0x2c0>)
 804deca:	4816      	ldr	r0, [pc, #88]	; (804df24 <tcp_input+0x288>)
 804decc:	f006 fcb8 	bl	8054840 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 804ded0:	69fb      	ldr	r3, [r7, #28]
 804ded2:	7d1b      	ldrb	r3, [r3, #20]
 804ded4:	2b0a      	cmp	r3, #10
 804ded6:	d105      	bne.n	804dee4 <tcp_input+0x248>
 804ded8:	4b10      	ldr	r3, [pc, #64]	; (804df1c <tcp_input+0x280>)
 804deda:	22fc      	movs	r2, #252	; 0xfc
 804dedc:	4920      	ldr	r1, [pc, #128]	; (804df60 <tcp_input+0x2c4>)
 804dede:	4811      	ldr	r0, [pc, #68]	; (804df24 <tcp_input+0x288>)
 804dee0:	f006 fcae 	bl	8054840 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 804dee4:	69fb      	ldr	r3, [r7, #28]
 804dee6:	7d1b      	ldrb	r3, [r3, #20]
 804dee8:	2b01      	cmp	r3, #1
 804deea:	d105      	bne.n	804def8 <tcp_input+0x25c>
 804deec:	4b0b      	ldr	r3, [pc, #44]	; (804df1c <tcp_input+0x280>)
 804deee:	22fd      	movs	r2, #253	; 0xfd
 804def0:	491c      	ldr	r1, [pc, #112]	; (804df64 <tcp_input+0x2c8>)
 804def2:	480c      	ldr	r0, [pc, #48]	; (804df24 <tcp_input+0x288>)
 804def4:	f006 fca4 	bl	8054840 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 804def8:	69fb      	ldr	r3, [r7, #28]
 804defa:	7a1b      	ldrb	r3, [r3, #8]
 804defc:	2b00      	cmp	r3, #0
 804defe:	d033      	beq.n	804df68 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 804df00:	69fb      	ldr	r3, [r7, #28]
 804df02:	7a1a      	ldrb	r2, [r3, #8]
 804df04:	4b09      	ldr	r3, [pc, #36]	; (804df2c <tcp_input+0x290>)
 804df06:	685b      	ldr	r3, [r3, #4]
 804df08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804df0c:	3301      	adds	r3, #1
 804df0e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 804df10:	429a      	cmp	r2, r3
 804df12:	d029      	beq.n	804df68 <tcp_input+0x2cc>
      prev = pcb;
 804df14:	69fb      	ldr	r3, [r7, #28]
 804df16:	61bb      	str	r3, [r7, #24]
      continue;
 804df18:	e06b      	b.n	804dff2 <tcp_input+0x356>
 804df1a:	bf00      	nop
 804df1c:	08056c90 	.word	0x08056c90
 804df20:	08056cc4 	.word	0x08056cc4
 804df24:	08056cdc 	.word	0x08056cdc
 804df28:	200237f4 	.word	0x200237f4
 804df2c:	20020078 	.word	0x20020078
 804df30:	200237f8 	.word	0x200237f8
 804df34:	200237fc 	.word	0x200237fc
 804df38:	200237fa 	.word	0x200237fa
 804df3c:	08056d04 	.word	0x08056d04
 804df40:	08056d14 	.word	0x08056d14
 804df44:	08056d20 	.word	0x08056d20
 804df48:	20023804 	.word	0x20023804
 804df4c:	20023808 	.word	0x20023808
 804df50:	20023810 	.word	0x20023810
 804df54:	2002380e 	.word	0x2002380e
 804df58:	200237d8 	.word	0x200237d8
 804df5c:	08056d40 	.word	0x08056d40
 804df60:	08056d68 	.word	0x08056d68
 804df64:	08056d94 	.word	0x08056d94
    }

    if (pcb->remote_port == tcphdr->src &&
 804df68:	69fb      	ldr	r3, [r7, #28]
 804df6a:	8b1a      	ldrh	r2, [r3, #24]
 804df6c:	4b72      	ldr	r3, [pc, #456]	; (804e138 <tcp_input+0x49c>)
 804df6e:	681b      	ldr	r3, [r3, #0]
 804df70:	881b      	ldrh	r3, [r3, #0]
 804df72:	b29b      	uxth	r3, r3
 804df74:	429a      	cmp	r2, r3
 804df76:	d13a      	bne.n	804dfee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 804df78:	69fb      	ldr	r3, [r7, #28]
 804df7a:	8ada      	ldrh	r2, [r3, #22]
 804df7c:	4b6e      	ldr	r3, [pc, #440]	; (804e138 <tcp_input+0x49c>)
 804df7e:	681b      	ldr	r3, [r3, #0]
 804df80:	885b      	ldrh	r3, [r3, #2]
 804df82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 804df84:	429a      	cmp	r2, r3
 804df86:	d132      	bne.n	804dfee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 804df88:	69fb      	ldr	r3, [r7, #28]
 804df8a:	685a      	ldr	r2, [r3, #4]
 804df8c:	4b6b      	ldr	r3, [pc, #428]	; (804e13c <tcp_input+0x4a0>)
 804df8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 804df90:	429a      	cmp	r2, r3
 804df92:	d12c      	bne.n	804dfee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 804df94:	69fb      	ldr	r3, [r7, #28]
 804df96:	681a      	ldr	r2, [r3, #0]
 804df98:	4b68      	ldr	r3, [pc, #416]	; (804e13c <tcp_input+0x4a0>)
 804df9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 804df9c:	429a      	cmp	r2, r3
 804df9e:	d126      	bne.n	804dfee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 804dfa0:	69fb      	ldr	r3, [r7, #28]
 804dfa2:	68db      	ldr	r3, [r3, #12]
 804dfa4:	69fa      	ldr	r2, [r7, #28]
 804dfa6:	429a      	cmp	r2, r3
 804dfa8:	d106      	bne.n	804dfb8 <tcp_input+0x31c>
 804dfaa:	4b65      	ldr	r3, [pc, #404]	; (804e140 <tcp_input+0x4a4>)
 804dfac:	f240 120d 	movw	r2, #269	; 0x10d
 804dfb0:	4964      	ldr	r1, [pc, #400]	; (804e144 <tcp_input+0x4a8>)
 804dfb2:	4865      	ldr	r0, [pc, #404]	; (804e148 <tcp_input+0x4ac>)
 804dfb4:	f006 fc44 	bl	8054840 <iprintf>
      if (prev != NULL) {
 804dfb8:	69bb      	ldr	r3, [r7, #24]
 804dfba:	2b00      	cmp	r3, #0
 804dfbc:	d00a      	beq.n	804dfd4 <tcp_input+0x338>
        prev->next = pcb->next;
 804dfbe:	69fb      	ldr	r3, [r7, #28]
 804dfc0:	68da      	ldr	r2, [r3, #12]
 804dfc2:	69bb      	ldr	r3, [r7, #24]
 804dfc4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 804dfc6:	4b61      	ldr	r3, [pc, #388]	; (804e14c <tcp_input+0x4b0>)
 804dfc8:	681a      	ldr	r2, [r3, #0]
 804dfca:	69fb      	ldr	r3, [r7, #28]
 804dfcc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 804dfce:	4a5f      	ldr	r2, [pc, #380]	; (804e14c <tcp_input+0x4b0>)
 804dfd0:	69fb      	ldr	r3, [r7, #28]
 804dfd2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 804dfd4:	69fb      	ldr	r3, [r7, #28]
 804dfd6:	68db      	ldr	r3, [r3, #12]
 804dfd8:	69fa      	ldr	r2, [r7, #28]
 804dfda:	429a      	cmp	r2, r3
 804dfdc:	d111      	bne.n	804e002 <tcp_input+0x366>
 804dfde:	4b58      	ldr	r3, [pc, #352]	; (804e140 <tcp_input+0x4a4>)
 804dfe0:	f240 1215 	movw	r2, #277	; 0x115
 804dfe4:	495a      	ldr	r1, [pc, #360]	; (804e150 <tcp_input+0x4b4>)
 804dfe6:	4858      	ldr	r0, [pc, #352]	; (804e148 <tcp_input+0x4ac>)
 804dfe8:	f006 fc2a 	bl	8054840 <iprintf>
      break;
 804dfec:	e009      	b.n	804e002 <tcp_input+0x366>
    }
    prev = pcb;
 804dfee:	69fb      	ldr	r3, [r7, #28]
 804dff0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 804dff2:	69fb      	ldr	r3, [r7, #28]
 804dff4:	68db      	ldr	r3, [r3, #12]
 804dff6:	61fb      	str	r3, [r7, #28]
 804dff8:	69fb      	ldr	r3, [r7, #28]
 804dffa:	2b00      	cmp	r3, #0
 804dffc:	f47f af5e 	bne.w	804debc <tcp_input+0x220>
 804e000:	e000      	b.n	804e004 <tcp_input+0x368>
      break;
 804e002:	bf00      	nop
  }

  if (pcb == NULL) {
 804e004:	69fb      	ldr	r3, [r7, #28]
 804e006:	2b00      	cmp	r3, #0
 804e008:	f040 80aa 	bne.w	804e160 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 804e00c:	4b51      	ldr	r3, [pc, #324]	; (804e154 <tcp_input+0x4b8>)
 804e00e:	681b      	ldr	r3, [r3, #0]
 804e010:	61fb      	str	r3, [r7, #28]
 804e012:	e03f      	b.n	804e094 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 804e014:	69fb      	ldr	r3, [r7, #28]
 804e016:	7d1b      	ldrb	r3, [r3, #20]
 804e018:	2b0a      	cmp	r3, #10
 804e01a:	d006      	beq.n	804e02a <tcp_input+0x38e>
 804e01c:	4b48      	ldr	r3, [pc, #288]	; (804e140 <tcp_input+0x4a4>)
 804e01e:	f240 121f 	movw	r2, #287	; 0x11f
 804e022:	494d      	ldr	r1, [pc, #308]	; (804e158 <tcp_input+0x4bc>)
 804e024:	4848      	ldr	r0, [pc, #288]	; (804e148 <tcp_input+0x4ac>)
 804e026:	f006 fc0b 	bl	8054840 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 804e02a:	69fb      	ldr	r3, [r7, #28]
 804e02c:	7a1b      	ldrb	r3, [r3, #8]
 804e02e:	2b00      	cmp	r3, #0
 804e030:	d009      	beq.n	804e046 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 804e032:	69fb      	ldr	r3, [r7, #28]
 804e034:	7a1a      	ldrb	r2, [r3, #8]
 804e036:	4b41      	ldr	r3, [pc, #260]	; (804e13c <tcp_input+0x4a0>)
 804e038:	685b      	ldr	r3, [r3, #4]
 804e03a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e03e:	3301      	adds	r3, #1
 804e040:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 804e042:	429a      	cmp	r2, r3
 804e044:	d122      	bne.n	804e08c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 804e046:	69fb      	ldr	r3, [r7, #28]
 804e048:	8b1a      	ldrh	r2, [r3, #24]
 804e04a:	4b3b      	ldr	r3, [pc, #236]	; (804e138 <tcp_input+0x49c>)
 804e04c:	681b      	ldr	r3, [r3, #0]
 804e04e:	881b      	ldrh	r3, [r3, #0]
 804e050:	b29b      	uxth	r3, r3
 804e052:	429a      	cmp	r2, r3
 804e054:	d11b      	bne.n	804e08e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 804e056:	69fb      	ldr	r3, [r7, #28]
 804e058:	8ada      	ldrh	r2, [r3, #22]
 804e05a:	4b37      	ldr	r3, [pc, #220]	; (804e138 <tcp_input+0x49c>)
 804e05c:	681b      	ldr	r3, [r3, #0]
 804e05e:	885b      	ldrh	r3, [r3, #2]
 804e060:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 804e062:	429a      	cmp	r2, r3
 804e064:	d113      	bne.n	804e08e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 804e066:	69fb      	ldr	r3, [r7, #28]
 804e068:	685a      	ldr	r2, [r3, #4]
 804e06a:	4b34      	ldr	r3, [pc, #208]	; (804e13c <tcp_input+0x4a0>)
 804e06c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 804e06e:	429a      	cmp	r2, r3
 804e070:	d10d      	bne.n	804e08e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 804e072:	69fb      	ldr	r3, [r7, #28]
 804e074:	681a      	ldr	r2, [r3, #0]
 804e076:	4b31      	ldr	r3, [pc, #196]	; (804e13c <tcp_input+0x4a0>)
 804e078:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 804e07a:	429a      	cmp	r2, r3
 804e07c:	d107      	bne.n	804e08e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 804e07e:	69f8      	ldr	r0, [r7, #28]
 804e080:	f000 fb56 	bl	804e730 <tcp_timewait_input>
        }
        pbuf_free(p);
 804e084:	6878      	ldr	r0, [r7, #4]
 804e086:	f7fd ffd5 	bl	804c034 <pbuf_free>
        return;
 804e08a:	e1fd      	b.n	804e488 <tcp_input+0x7ec>
        continue;
 804e08c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 804e08e:	69fb      	ldr	r3, [r7, #28]
 804e090:	68db      	ldr	r3, [r3, #12]
 804e092:	61fb      	str	r3, [r7, #28]
 804e094:	69fb      	ldr	r3, [r7, #28]
 804e096:	2b00      	cmp	r3, #0
 804e098:	d1bc      	bne.n	804e014 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 804e09a:	2300      	movs	r3, #0
 804e09c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 804e09e:	4b2f      	ldr	r3, [pc, #188]	; (804e15c <tcp_input+0x4c0>)
 804e0a0:	681b      	ldr	r3, [r3, #0]
 804e0a2:	617b      	str	r3, [r7, #20]
 804e0a4:	e02a      	b.n	804e0fc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 804e0a6:	697b      	ldr	r3, [r7, #20]
 804e0a8:	7a1b      	ldrb	r3, [r3, #8]
 804e0aa:	2b00      	cmp	r3, #0
 804e0ac:	d00c      	beq.n	804e0c8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 804e0ae:	697b      	ldr	r3, [r7, #20]
 804e0b0:	7a1a      	ldrb	r2, [r3, #8]
 804e0b2:	4b22      	ldr	r3, [pc, #136]	; (804e13c <tcp_input+0x4a0>)
 804e0b4:	685b      	ldr	r3, [r3, #4]
 804e0b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e0ba:	3301      	adds	r3, #1
 804e0bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 804e0be:	429a      	cmp	r2, r3
 804e0c0:	d002      	beq.n	804e0c8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 804e0c2:	697b      	ldr	r3, [r7, #20]
 804e0c4:	61bb      	str	r3, [r7, #24]
        continue;
 804e0c6:	e016      	b.n	804e0f6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 804e0c8:	697b      	ldr	r3, [r7, #20]
 804e0ca:	8ada      	ldrh	r2, [r3, #22]
 804e0cc:	4b1a      	ldr	r3, [pc, #104]	; (804e138 <tcp_input+0x49c>)
 804e0ce:	681b      	ldr	r3, [r3, #0]
 804e0d0:	885b      	ldrh	r3, [r3, #2]
 804e0d2:	b29b      	uxth	r3, r3
 804e0d4:	429a      	cmp	r2, r3
 804e0d6:	d10c      	bne.n	804e0f2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 804e0d8:	697b      	ldr	r3, [r7, #20]
 804e0da:	681a      	ldr	r2, [r3, #0]
 804e0dc:	4b17      	ldr	r3, [pc, #92]	; (804e13c <tcp_input+0x4a0>)
 804e0de:	695b      	ldr	r3, [r3, #20]
 804e0e0:	429a      	cmp	r2, r3
 804e0e2:	d00f      	beq.n	804e104 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 804e0e4:	697b      	ldr	r3, [r7, #20]
 804e0e6:	2b00      	cmp	r3, #0
 804e0e8:	d00d      	beq.n	804e106 <tcp_input+0x46a>
 804e0ea:	697b      	ldr	r3, [r7, #20]
 804e0ec:	681b      	ldr	r3, [r3, #0]
 804e0ee:	2b00      	cmp	r3, #0
 804e0f0:	d009      	beq.n	804e106 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 804e0f2:	697b      	ldr	r3, [r7, #20]
 804e0f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 804e0f6:	697b      	ldr	r3, [r7, #20]
 804e0f8:	68db      	ldr	r3, [r3, #12]
 804e0fa:	617b      	str	r3, [r7, #20]
 804e0fc:	697b      	ldr	r3, [r7, #20]
 804e0fe:	2b00      	cmp	r3, #0
 804e100:	d1d1      	bne.n	804e0a6 <tcp_input+0x40a>
 804e102:	e000      	b.n	804e106 <tcp_input+0x46a>
            break;
 804e104:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 804e106:	697b      	ldr	r3, [r7, #20]
 804e108:	2b00      	cmp	r3, #0
 804e10a:	d029      	beq.n	804e160 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 804e10c:	69bb      	ldr	r3, [r7, #24]
 804e10e:	2b00      	cmp	r3, #0
 804e110:	d00a      	beq.n	804e128 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 804e112:	697b      	ldr	r3, [r7, #20]
 804e114:	68da      	ldr	r2, [r3, #12]
 804e116:	69bb      	ldr	r3, [r7, #24]
 804e118:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 804e11a:	4b10      	ldr	r3, [pc, #64]	; (804e15c <tcp_input+0x4c0>)
 804e11c:	681a      	ldr	r2, [r3, #0]
 804e11e:	697b      	ldr	r3, [r7, #20]
 804e120:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 804e122:	4a0e      	ldr	r2, [pc, #56]	; (804e15c <tcp_input+0x4c0>)
 804e124:	697b      	ldr	r3, [r7, #20]
 804e126:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 804e128:	6978      	ldr	r0, [r7, #20]
 804e12a:	f000 fa03 	bl	804e534 <tcp_listen_input>
      }
      pbuf_free(p);
 804e12e:	6878      	ldr	r0, [r7, #4]
 804e130:	f7fd ff80 	bl	804c034 <pbuf_free>
      return;
 804e134:	e1a8      	b.n	804e488 <tcp_input+0x7ec>
 804e136:	bf00      	nop
 804e138:	200237f4 	.word	0x200237f4
 804e13c:	20020078 	.word	0x20020078
 804e140:	08056c90 	.word	0x08056c90
 804e144:	08056dbc 	.word	0x08056dbc
 804e148:	08056cdc 	.word	0x08056cdc
 804e14c:	200237d8 	.word	0x200237d8
 804e150:	08056de8 	.word	0x08056de8
 804e154:	200237dc 	.word	0x200237dc
 804e158:	08056e14 	.word	0x08056e14
 804e15c:	200237d4 	.word	0x200237d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 804e160:	69fb      	ldr	r3, [r7, #28]
 804e162:	2b00      	cmp	r3, #0
 804e164:	f000 8158 	beq.w	804e418 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 804e168:	4b95      	ldr	r3, [pc, #596]	; (804e3c0 <tcp_input+0x724>)
 804e16a:	2200      	movs	r2, #0
 804e16c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 804e16e:	687b      	ldr	r3, [r7, #4]
 804e170:	891a      	ldrh	r2, [r3, #8]
 804e172:	4b93      	ldr	r3, [pc, #588]	; (804e3c0 <tcp_input+0x724>)
 804e174:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 804e176:	4a92      	ldr	r2, [pc, #584]	; (804e3c0 <tcp_input+0x724>)
 804e178:	687b      	ldr	r3, [r7, #4]
 804e17a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 804e17c:	4b91      	ldr	r3, [pc, #580]	; (804e3c4 <tcp_input+0x728>)
 804e17e:	681b      	ldr	r3, [r3, #0]
 804e180:	4a8f      	ldr	r2, [pc, #572]	; (804e3c0 <tcp_input+0x724>)
 804e182:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 804e184:	4b90      	ldr	r3, [pc, #576]	; (804e3c8 <tcp_input+0x72c>)
 804e186:	2200      	movs	r2, #0
 804e188:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 804e18a:	4b90      	ldr	r3, [pc, #576]	; (804e3cc <tcp_input+0x730>)
 804e18c:	2200      	movs	r2, #0
 804e18e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 804e190:	4b8f      	ldr	r3, [pc, #572]	; (804e3d0 <tcp_input+0x734>)
 804e192:	2200      	movs	r2, #0
 804e194:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 804e196:	4b8f      	ldr	r3, [pc, #572]	; (804e3d4 <tcp_input+0x738>)
 804e198:	781b      	ldrb	r3, [r3, #0]
 804e19a:	f003 0308 	and.w	r3, r3, #8
 804e19e:	2b00      	cmp	r3, #0
 804e1a0:	d006      	beq.n	804e1b0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 804e1a2:	687b      	ldr	r3, [r7, #4]
 804e1a4:	7b5b      	ldrb	r3, [r3, #13]
 804e1a6:	f043 0301 	orr.w	r3, r3, #1
 804e1aa:	b2da      	uxtb	r2, r3
 804e1ac:	687b      	ldr	r3, [r7, #4]
 804e1ae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 804e1b0:	69fb      	ldr	r3, [r7, #28]
 804e1b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804e1b4:	2b00      	cmp	r3, #0
 804e1b6:	d017      	beq.n	804e1e8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 804e1b8:	69f8      	ldr	r0, [r7, #28]
 804e1ba:	f7ff f929 	bl	804d410 <tcp_process_refused_data>
 804e1be:	4603      	mov	r3, r0
 804e1c0:	f113 0f0d 	cmn.w	r3, #13
 804e1c4:	d007      	beq.n	804e1d6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 804e1c6:	69fb      	ldr	r3, [r7, #28]
 804e1c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 804e1ca:	2b00      	cmp	r3, #0
 804e1cc:	d00c      	beq.n	804e1e8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 804e1ce:	4b82      	ldr	r3, [pc, #520]	; (804e3d8 <tcp_input+0x73c>)
 804e1d0:	881b      	ldrh	r3, [r3, #0]
 804e1d2:	2b00      	cmp	r3, #0
 804e1d4:	d008      	beq.n	804e1e8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 804e1d6:	69fb      	ldr	r3, [r7, #28]
 804e1d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804e1da:	2b00      	cmp	r3, #0
 804e1dc:	f040 80e3 	bne.w	804e3a6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 804e1e0:	69f8      	ldr	r0, [r7, #28]
 804e1e2:	f003 f9ad 	bl	8051540 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 804e1e6:	e0de      	b.n	804e3a6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 804e1e8:	4a7c      	ldr	r2, [pc, #496]	; (804e3dc <tcp_input+0x740>)
 804e1ea:	69fb      	ldr	r3, [r7, #28]
 804e1ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 804e1ee:	69f8      	ldr	r0, [r7, #28]
 804e1f0:	f000 fb18 	bl	804e824 <tcp_process>
 804e1f4:	4603      	mov	r3, r0
 804e1f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 804e1f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804e1fc:	f113 0f0d 	cmn.w	r3, #13
 804e200:	f000 80d3 	beq.w	804e3aa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 804e204:	4b71      	ldr	r3, [pc, #452]	; (804e3cc <tcp_input+0x730>)
 804e206:	781b      	ldrb	r3, [r3, #0]
 804e208:	f003 0308 	and.w	r3, r3, #8
 804e20c:	2b00      	cmp	r3, #0
 804e20e:	d015      	beq.n	804e23c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 804e210:	69fb      	ldr	r3, [r7, #28]
 804e212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804e216:	2b00      	cmp	r3, #0
 804e218:	d008      	beq.n	804e22c <tcp_input+0x590>
 804e21a:	69fb      	ldr	r3, [r7, #28]
 804e21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804e220:	69fa      	ldr	r2, [r7, #28]
 804e222:	6912      	ldr	r2, [r2, #16]
 804e224:	f06f 010d 	mvn.w	r1, #13
 804e228:	4610      	mov	r0, r2
 804e22a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 804e22c:	69f9      	ldr	r1, [r7, #28]
 804e22e:	486c      	ldr	r0, [pc, #432]	; (804e3e0 <tcp_input+0x744>)
 804e230:	f7ff fbbc 	bl	804d9ac <tcp_pcb_remove>
        tcp_free(pcb);
 804e234:	69f8      	ldr	r0, [r7, #28]
 804e236:	f7fe f9a9 	bl	804c58c <tcp_free>
 804e23a:	e0da      	b.n	804e3f2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 804e23c:	2300      	movs	r3, #0
 804e23e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 804e240:	4b63      	ldr	r3, [pc, #396]	; (804e3d0 <tcp_input+0x734>)
 804e242:	881b      	ldrh	r3, [r3, #0]
 804e244:	2b00      	cmp	r3, #0
 804e246:	d01d      	beq.n	804e284 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 804e248:	4b61      	ldr	r3, [pc, #388]	; (804e3d0 <tcp_input+0x734>)
 804e24a:	881b      	ldrh	r3, [r3, #0]
 804e24c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 804e24e:	69fb      	ldr	r3, [r7, #28]
 804e250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804e254:	2b00      	cmp	r3, #0
 804e256:	d00a      	beq.n	804e26e <tcp_input+0x5d2>
 804e258:	69fb      	ldr	r3, [r7, #28]
 804e25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804e25e:	69fa      	ldr	r2, [r7, #28]
 804e260:	6910      	ldr	r0, [r2, #16]
 804e262:	89fa      	ldrh	r2, [r7, #14]
 804e264:	69f9      	ldr	r1, [r7, #28]
 804e266:	4798      	blx	r3
 804e268:	4603      	mov	r3, r0
 804e26a:	74fb      	strb	r3, [r7, #19]
 804e26c:	e001      	b.n	804e272 <tcp_input+0x5d6>
 804e26e:	2300      	movs	r3, #0
 804e270:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 804e272:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804e276:	f113 0f0d 	cmn.w	r3, #13
 804e27a:	f000 8098 	beq.w	804e3ae <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 804e27e:	4b54      	ldr	r3, [pc, #336]	; (804e3d0 <tcp_input+0x734>)
 804e280:	2200      	movs	r2, #0
 804e282:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 804e284:	69f8      	ldr	r0, [r7, #28]
 804e286:	f000 f915 	bl	804e4b4 <tcp_input_delayed_close>
 804e28a:	4603      	mov	r3, r0
 804e28c:	2b00      	cmp	r3, #0
 804e28e:	f040 8090 	bne.w	804e3b2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 804e292:	4b4d      	ldr	r3, [pc, #308]	; (804e3c8 <tcp_input+0x72c>)
 804e294:	681b      	ldr	r3, [r3, #0]
 804e296:	2b00      	cmp	r3, #0
 804e298:	d041      	beq.n	804e31e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 804e29a:	69fb      	ldr	r3, [r7, #28]
 804e29c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804e29e:	2b00      	cmp	r3, #0
 804e2a0:	d006      	beq.n	804e2b0 <tcp_input+0x614>
 804e2a2:	4b50      	ldr	r3, [pc, #320]	; (804e3e4 <tcp_input+0x748>)
 804e2a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 804e2a8:	494f      	ldr	r1, [pc, #316]	; (804e3e8 <tcp_input+0x74c>)
 804e2aa:	4850      	ldr	r0, [pc, #320]	; (804e3ec <tcp_input+0x750>)
 804e2ac:	f006 fac8 	bl	8054840 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 804e2b0:	69fb      	ldr	r3, [r7, #28]
 804e2b2:	8b5b      	ldrh	r3, [r3, #26]
 804e2b4:	f003 0310 	and.w	r3, r3, #16
 804e2b8:	2b00      	cmp	r3, #0
 804e2ba:	d008      	beq.n	804e2ce <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 804e2bc:	4b42      	ldr	r3, [pc, #264]	; (804e3c8 <tcp_input+0x72c>)
 804e2be:	681b      	ldr	r3, [r3, #0]
 804e2c0:	4618      	mov	r0, r3
 804e2c2:	f7fd feb7 	bl	804c034 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 804e2c6:	69f8      	ldr	r0, [r7, #28]
 804e2c8:	f7fe fc48 	bl	804cb5c <tcp_abort>
            goto aborted;
 804e2cc:	e091      	b.n	804e3f2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 804e2ce:	69fb      	ldr	r3, [r7, #28]
 804e2d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804e2d4:	2b00      	cmp	r3, #0
 804e2d6:	d00c      	beq.n	804e2f2 <tcp_input+0x656>
 804e2d8:	69fb      	ldr	r3, [r7, #28]
 804e2da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 804e2de:	69fb      	ldr	r3, [r7, #28]
 804e2e0:	6918      	ldr	r0, [r3, #16]
 804e2e2:	4b39      	ldr	r3, [pc, #228]	; (804e3c8 <tcp_input+0x72c>)
 804e2e4:	681a      	ldr	r2, [r3, #0]
 804e2e6:	2300      	movs	r3, #0
 804e2e8:	69f9      	ldr	r1, [r7, #28]
 804e2ea:	47a0      	blx	r4
 804e2ec:	4603      	mov	r3, r0
 804e2ee:	74fb      	strb	r3, [r7, #19]
 804e2f0:	e008      	b.n	804e304 <tcp_input+0x668>
 804e2f2:	4b35      	ldr	r3, [pc, #212]	; (804e3c8 <tcp_input+0x72c>)
 804e2f4:	681a      	ldr	r2, [r3, #0]
 804e2f6:	2300      	movs	r3, #0
 804e2f8:	69f9      	ldr	r1, [r7, #28]
 804e2fa:	2000      	movs	r0, #0
 804e2fc:	f7ff f95e 	bl	804d5bc <tcp_recv_null>
 804e300:	4603      	mov	r3, r0
 804e302:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 804e304:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804e308:	f113 0f0d 	cmn.w	r3, #13
 804e30c:	d053      	beq.n	804e3b6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 804e30e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804e312:	2b00      	cmp	r3, #0
 804e314:	d003      	beq.n	804e31e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 804e316:	4b2c      	ldr	r3, [pc, #176]	; (804e3c8 <tcp_input+0x72c>)
 804e318:	681a      	ldr	r2, [r3, #0]
 804e31a:	69fb      	ldr	r3, [r7, #28]
 804e31c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 804e31e:	4b2b      	ldr	r3, [pc, #172]	; (804e3cc <tcp_input+0x730>)
 804e320:	781b      	ldrb	r3, [r3, #0]
 804e322:	f003 0320 	and.w	r3, r3, #32
 804e326:	2b00      	cmp	r3, #0
 804e328:	d030      	beq.n	804e38c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 804e32a:	69fb      	ldr	r3, [r7, #28]
 804e32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804e32e:	2b00      	cmp	r3, #0
 804e330:	d009      	beq.n	804e346 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 804e332:	69fb      	ldr	r3, [r7, #28]
 804e334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804e336:	7b5a      	ldrb	r2, [r3, #13]
 804e338:	69fb      	ldr	r3, [r7, #28]
 804e33a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804e33c:	f042 0220 	orr.w	r2, r2, #32
 804e340:	b2d2      	uxtb	r2, r2
 804e342:	735a      	strb	r2, [r3, #13]
 804e344:	e022      	b.n	804e38c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 804e346:	69fb      	ldr	r3, [r7, #28]
 804e348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804e34a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 804e34e:	d005      	beq.n	804e35c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 804e350:	69fb      	ldr	r3, [r7, #28]
 804e352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804e354:	3301      	adds	r3, #1
 804e356:	b29a      	uxth	r2, r3
 804e358:	69fb      	ldr	r3, [r7, #28]
 804e35a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 804e35c:	69fb      	ldr	r3, [r7, #28]
 804e35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804e362:	2b00      	cmp	r3, #0
 804e364:	d00b      	beq.n	804e37e <tcp_input+0x6e2>
 804e366:	69fb      	ldr	r3, [r7, #28]
 804e368:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 804e36c:	69fb      	ldr	r3, [r7, #28]
 804e36e:	6918      	ldr	r0, [r3, #16]
 804e370:	2300      	movs	r3, #0
 804e372:	2200      	movs	r2, #0
 804e374:	69f9      	ldr	r1, [r7, #28]
 804e376:	47a0      	blx	r4
 804e378:	4603      	mov	r3, r0
 804e37a:	74fb      	strb	r3, [r7, #19]
 804e37c:	e001      	b.n	804e382 <tcp_input+0x6e6>
 804e37e:	2300      	movs	r3, #0
 804e380:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 804e382:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804e386:	f113 0f0d 	cmn.w	r3, #13
 804e38a:	d016      	beq.n	804e3ba <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 804e38c:	4b13      	ldr	r3, [pc, #76]	; (804e3dc <tcp_input+0x740>)
 804e38e:	2200      	movs	r2, #0
 804e390:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 804e392:	69f8      	ldr	r0, [r7, #28]
 804e394:	f000 f88e 	bl	804e4b4 <tcp_input_delayed_close>
 804e398:	4603      	mov	r3, r0
 804e39a:	2b00      	cmp	r3, #0
 804e39c:	d128      	bne.n	804e3f0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 804e39e:	69f8      	ldr	r0, [r7, #28]
 804e3a0:	f002 fac8 	bl	8050934 <tcp_output>
 804e3a4:	e025      	b.n	804e3f2 <tcp_input+0x756>
        goto aborted;
 804e3a6:	bf00      	nop
 804e3a8:	e023      	b.n	804e3f2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 804e3aa:	bf00      	nop
 804e3ac:	e021      	b.n	804e3f2 <tcp_input+0x756>
              goto aborted;
 804e3ae:	bf00      	nop
 804e3b0:	e01f      	b.n	804e3f2 <tcp_input+0x756>
          goto aborted;
 804e3b2:	bf00      	nop
 804e3b4:	e01d      	b.n	804e3f2 <tcp_input+0x756>
            goto aborted;
 804e3b6:	bf00      	nop
 804e3b8:	e01b      	b.n	804e3f2 <tcp_input+0x756>
              goto aborted;
 804e3ba:	bf00      	nop
 804e3bc:	e019      	b.n	804e3f2 <tcp_input+0x756>
 804e3be:	bf00      	nop
 804e3c0:	200237e4 	.word	0x200237e4
 804e3c4:	200237f4 	.word	0x200237f4
 804e3c8:	20023814 	.word	0x20023814
 804e3cc:	20023811 	.word	0x20023811
 804e3d0:	2002380c 	.word	0x2002380c
 804e3d4:	20023810 	.word	0x20023810
 804e3d8:	2002380e 	.word	0x2002380e
 804e3dc:	20023818 	.word	0x20023818
 804e3e0:	200237d8 	.word	0x200237d8
 804e3e4:	08056c90 	.word	0x08056c90
 804e3e8:	08056e44 	.word	0x08056e44
 804e3ec:	08056cdc 	.word	0x08056cdc
          goto aborted;
 804e3f0:	bf00      	nop
    tcp_input_pcb = NULL;
 804e3f2:	4b27      	ldr	r3, [pc, #156]	; (804e490 <tcp_input+0x7f4>)
 804e3f4:	2200      	movs	r2, #0
 804e3f6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 804e3f8:	4b26      	ldr	r3, [pc, #152]	; (804e494 <tcp_input+0x7f8>)
 804e3fa:	2200      	movs	r2, #0
 804e3fc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 804e3fe:	4b26      	ldr	r3, [pc, #152]	; (804e498 <tcp_input+0x7fc>)
 804e400:	685b      	ldr	r3, [r3, #4]
 804e402:	2b00      	cmp	r3, #0
 804e404:	d03f      	beq.n	804e486 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 804e406:	4b24      	ldr	r3, [pc, #144]	; (804e498 <tcp_input+0x7fc>)
 804e408:	685b      	ldr	r3, [r3, #4]
 804e40a:	4618      	mov	r0, r3
 804e40c:	f7fd fe12 	bl	804c034 <pbuf_free>
      inseg.p = NULL;
 804e410:	4b21      	ldr	r3, [pc, #132]	; (804e498 <tcp_input+0x7fc>)
 804e412:	2200      	movs	r2, #0
 804e414:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 804e416:	e036      	b.n	804e486 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 804e418:	4b20      	ldr	r3, [pc, #128]	; (804e49c <tcp_input+0x800>)
 804e41a:	681b      	ldr	r3, [r3, #0]
 804e41c:	899b      	ldrh	r3, [r3, #12]
 804e41e:	b29b      	uxth	r3, r3
 804e420:	4618      	mov	r0, r3
 804e422:	f7fc fa15 	bl	804a850 <lwip_htons>
 804e426:	4603      	mov	r3, r0
 804e428:	b2db      	uxtb	r3, r3
 804e42a:	f003 0304 	and.w	r3, r3, #4
 804e42e:	2b00      	cmp	r3, #0
 804e430:	d118      	bne.n	804e464 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e432:	4b1b      	ldr	r3, [pc, #108]	; (804e4a0 <tcp_input+0x804>)
 804e434:	6819      	ldr	r1, [r3, #0]
 804e436:	4b1b      	ldr	r3, [pc, #108]	; (804e4a4 <tcp_input+0x808>)
 804e438:	881b      	ldrh	r3, [r3, #0]
 804e43a:	461a      	mov	r2, r3
 804e43c:	4b1a      	ldr	r3, [pc, #104]	; (804e4a8 <tcp_input+0x80c>)
 804e43e:	681b      	ldr	r3, [r3, #0]
 804e440:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804e442:	4b16      	ldr	r3, [pc, #88]	; (804e49c <tcp_input+0x800>)
 804e444:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e446:	885b      	ldrh	r3, [r3, #2]
 804e448:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804e44a:	4a14      	ldr	r2, [pc, #80]	; (804e49c <tcp_input+0x800>)
 804e44c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e44e:	8812      	ldrh	r2, [r2, #0]
 804e450:	b292      	uxth	r2, r2
 804e452:	9202      	str	r2, [sp, #8]
 804e454:	9301      	str	r3, [sp, #4]
 804e456:	4b15      	ldr	r3, [pc, #84]	; (804e4ac <tcp_input+0x810>)
 804e458:	9300      	str	r3, [sp, #0]
 804e45a:	4b15      	ldr	r3, [pc, #84]	; (804e4b0 <tcp_input+0x814>)
 804e45c:	4602      	mov	r2, r0
 804e45e:	2000      	movs	r0, #0
 804e460:	f003 f81c 	bl	805149c <tcp_rst>
    pbuf_free(p);
 804e464:	6878      	ldr	r0, [r7, #4]
 804e466:	f7fd fde5 	bl	804c034 <pbuf_free>
  return;
 804e46a:	e00c      	b.n	804e486 <tcp_input+0x7ea>
    goto dropped;
 804e46c:	bf00      	nop
 804e46e:	e006      	b.n	804e47e <tcp_input+0x7e2>
    goto dropped;
 804e470:	bf00      	nop
 804e472:	e004      	b.n	804e47e <tcp_input+0x7e2>
    goto dropped;
 804e474:	bf00      	nop
 804e476:	e002      	b.n	804e47e <tcp_input+0x7e2>
      goto dropped;
 804e478:	bf00      	nop
 804e47a:	e000      	b.n	804e47e <tcp_input+0x7e2>
      goto dropped;
 804e47c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 804e47e:	6878      	ldr	r0, [r7, #4]
 804e480:	f7fd fdd8 	bl	804c034 <pbuf_free>
 804e484:	e000      	b.n	804e488 <tcp_input+0x7ec>
  return;
 804e486:	bf00      	nop
}
 804e488:	3724      	adds	r7, #36	; 0x24
 804e48a:	46bd      	mov	sp, r7
 804e48c:	bd90      	pop	{r4, r7, pc}
 804e48e:	bf00      	nop
 804e490:	20023818 	.word	0x20023818
 804e494:	20023814 	.word	0x20023814
 804e498:	200237e4 	.word	0x200237e4
 804e49c:	200237f4 	.word	0x200237f4
 804e4a0:	20023808 	.word	0x20023808
 804e4a4:	2002380e 	.word	0x2002380e
 804e4a8:	20023804 	.word	0x20023804
 804e4ac:	20020088 	.word	0x20020088
 804e4b0:	2002008c 	.word	0x2002008c

0804e4b4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 804e4b4:	b580      	push	{r7, lr}
 804e4b6:	b082      	sub	sp, #8
 804e4b8:	af00      	add	r7, sp, #0
 804e4ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 804e4bc:	687b      	ldr	r3, [r7, #4]
 804e4be:	2b00      	cmp	r3, #0
 804e4c0:	d106      	bne.n	804e4d0 <tcp_input_delayed_close+0x1c>
 804e4c2:	4b17      	ldr	r3, [pc, #92]	; (804e520 <tcp_input_delayed_close+0x6c>)
 804e4c4:	f240 225a 	movw	r2, #602	; 0x25a
 804e4c8:	4916      	ldr	r1, [pc, #88]	; (804e524 <tcp_input_delayed_close+0x70>)
 804e4ca:	4817      	ldr	r0, [pc, #92]	; (804e528 <tcp_input_delayed_close+0x74>)
 804e4cc:	f006 f9b8 	bl	8054840 <iprintf>

  if (recv_flags & TF_CLOSED) {
 804e4d0:	4b16      	ldr	r3, [pc, #88]	; (804e52c <tcp_input_delayed_close+0x78>)
 804e4d2:	781b      	ldrb	r3, [r3, #0]
 804e4d4:	f003 0310 	and.w	r3, r3, #16
 804e4d8:	2b00      	cmp	r3, #0
 804e4da:	d01c      	beq.n	804e516 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 804e4dc:	687b      	ldr	r3, [r7, #4]
 804e4de:	8b5b      	ldrh	r3, [r3, #26]
 804e4e0:	f003 0310 	and.w	r3, r3, #16
 804e4e4:	2b00      	cmp	r3, #0
 804e4e6:	d10d      	bne.n	804e504 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 804e4e8:	687b      	ldr	r3, [r7, #4]
 804e4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804e4ee:	2b00      	cmp	r3, #0
 804e4f0:	d008      	beq.n	804e504 <tcp_input_delayed_close+0x50>
 804e4f2:	687b      	ldr	r3, [r7, #4]
 804e4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804e4f8:	687a      	ldr	r2, [r7, #4]
 804e4fa:	6912      	ldr	r2, [r2, #16]
 804e4fc:	f06f 010e 	mvn.w	r1, #14
 804e500:	4610      	mov	r0, r2
 804e502:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 804e504:	6879      	ldr	r1, [r7, #4]
 804e506:	480a      	ldr	r0, [pc, #40]	; (804e530 <tcp_input_delayed_close+0x7c>)
 804e508:	f7ff fa50 	bl	804d9ac <tcp_pcb_remove>
    tcp_free(pcb);
 804e50c:	6878      	ldr	r0, [r7, #4]
 804e50e:	f7fe f83d 	bl	804c58c <tcp_free>
    return 1;
 804e512:	2301      	movs	r3, #1
 804e514:	e000      	b.n	804e518 <tcp_input_delayed_close+0x64>
  }
  return 0;
 804e516:	2300      	movs	r3, #0
}
 804e518:	4618      	mov	r0, r3
 804e51a:	3708      	adds	r7, #8
 804e51c:	46bd      	mov	sp, r7
 804e51e:	bd80      	pop	{r7, pc}
 804e520:	08056c90 	.word	0x08056c90
 804e524:	08056e60 	.word	0x08056e60
 804e528:	08056cdc 	.word	0x08056cdc
 804e52c:	20023811 	.word	0x20023811
 804e530:	200237d8 	.word	0x200237d8

0804e534 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 804e534:	b590      	push	{r4, r7, lr}
 804e536:	b08b      	sub	sp, #44	; 0x2c
 804e538:	af04      	add	r7, sp, #16
 804e53a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 804e53c:	4b6f      	ldr	r3, [pc, #444]	; (804e6fc <tcp_listen_input+0x1c8>)
 804e53e:	781b      	ldrb	r3, [r3, #0]
 804e540:	f003 0304 	and.w	r3, r3, #4
 804e544:	2b00      	cmp	r3, #0
 804e546:	f040 80d2 	bne.w	804e6ee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 804e54a:	687b      	ldr	r3, [r7, #4]
 804e54c:	2b00      	cmp	r3, #0
 804e54e:	d106      	bne.n	804e55e <tcp_listen_input+0x2a>
 804e550:	4b6b      	ldr	r3, [pc, #428]	; (804e700 <tcp_listen_input+0x1cc>)
 804e552:	f240 2281 	movw	r2, #641	; 0x281
 804e556:	496b      	ldr	r1, [pc, #428]	; (804e704 <tcp_listen_input+0x1d0>)
 804e558:	486b      	ldr	r0, [pc, #428]	; (804e708 <tcp_listen_input+0x1d4>)
 804e55a:	f006 f971 	bl	8054840 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 804e55e:	4b67      	ldr	r3, [pc, #412]	; (804e6fc <tcp_listen_input+0x1c8>)
 804e560:	781b      	ldrb	r3, [r3, #0]
 804e562:	f003 0310 	and.w	r3, r3, #16
 804e566:	2b00      	cmp	r3, #0
 804e568:	d019      	beq.n	804e59e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e56a:	4b68      	ldr	r3, [pc, #416]	; (804e70c <tcp_listen_input+0x1d8>)
 804e56c:	6819      	ldr	r1, [r3, #0]
 804e56e:	4b68      	ldr	r3, [pc, #416]	; (804e710 <tcp_listen_input+0x1dc>)
 804e570:	881b      	ldrh	r3, [r3, #0]
 804e572:	461a      	mov	r2, r3
 804e574:	4b67      	ldr	r3, [pc, #412]	; (804e714 <tcp_listen_input+0x1e0>)
 804e576:	681b      	ldr	r3, [r3, #0]
 804e578:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804e57a:	4b67      	ldr	r3, [pc, #412]	; (804e718 <tcp_listen_input+0x1e4>)
 804e57c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e57e:	885b      	ldrh	r3, [r3, #2]
 804e580:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804e582:	4a65      	ldr	r2, [pc, #404]	; (804e718 <tcp_listen_input+0x1e4>)
 804e584:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e586:	8812      	ldrh	r2, [r2, #0]
 804e588:	b292      	uxth	r2, r2
 804e58a:	9202      	str	r2, [sp, #8]
 804e58c:	9301      	str	r3, [sp, #4]
 804e58e:	4b63      	ldr	r3, [pc, #396]	; (804e71c <tcp_listen_input+0x1e8>)
 804e590:	9300      	str	r3, [sp, #0]
 804e592:	4b63      	ldr	r3, [pc, #396]	; (804e720 <tcp_listen_input+0x1ec>)
 804e594:	4602      	mov	r2, r0
 804e596:	6878      	ldr	r0, [r7, #4]
 804e598:	f002 ff80 	bl	805149c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 804e59c:	e0a9      	b.n	804e6f2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 804e59e:	4b57      	ldr	r3, [pc, #348]	; (804e6fc <tcp_listen_input+0x1c8>)
 804e5a0:	781b      	ldrb	r3, [r3, #0]
 804e5a2:	f003 0302 	and.w	r3, r3, #2
 804e5a6:	2b00      	cmp	r3, #0
 804e5a8:	f000 80a3 	beq.w	804e6f2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 804e5ac:	687b      	ldr	r3, [r7, #4]
 804e5ae:	7d5b      	ldrb	r3, [r3, #21]
 804e5b0:	4618      	mov	r0, r3
 804e5b2:	f7ff f927 	bl	804d804 <tcp_alloc>
 804e5b6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 804e5b8:	697b      	ldr	r3, [r7, #20]
 804e5ba:	2b00      	cmp	r3, #0
 804e5bc:	d111      	bne.n	804e5e2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 804e5be:	687b      	ldr	r3, [r7, #4]
 804e5c0:	699b      	ldr	r3, [r3, #24]
 804e5c2:	2b00      	cmp	r3, #0
 804e5c4:	d00a      	beq.n	804e5dc <tcp_listen_input+0xa8>
 804e5c6:	687b      	ldr	r3, [r7, #4]
 804e5c8:	699b      	ldr	r3, [r3, #24]
 804e5ca:	687a      	ldr	r2, [r7, #4]
 804e5cc:	6910      	ldr	r0, [r2, #16]
 804e5ce:	f04f 32ff 	mov.w	r2, #4294967295
 804e5d2:	2100      	movs	r1, #0
 804e5d4:	4798      	blx	r3
 804e5d6:	4603      	mov	r3, r0
 804e5d8:	73bb      	strb	r3, [r7, #14]
      return;
 804e5da:	e08b      	b.n	804e6f4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 804e5dc:	23f0      	movs	r3, #240	; 0xf0
 804e5de:	73bb      	strb	r3, [r7, #14]
      return;
 804e5e0:	e088      	b.n	804e6f4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 804e5e2:	4b50      	ldr	r3, [pc, #320]	; (804e724 <tcp_listen_input+0x1f0>)
 804e5e4:	695a      	ldr	r2, [r3, #20]
 804e5e6:	697b      	ldr	r3, [r7, #20]
 804e5e8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 804e5ea:	4b4e      	ldr	r3, [pc, #312]	; (804e724 <tcp_listen_input+0x1f0>)
 804e5ec:	691a      	ldr	r2, [r3, #16]
 804e5ee:	697b      	ldr	r3, [r7, #20]
 804e5f0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 804e5f2:	687b      	ldr	r3, [r7, #4]
 804e5f4:	8ada      	ldrh	r2, [r3, #22]
 804e5f6:	697b      	ldr	r3, [r7, #20]
 804e5f8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 804e5fa:	4b47      	ldr	r3, [pc, #284]	; (804e718 <tcp_listen_input+0x1e4>)
 804e5fc:	681b      	ldr	r3, [r3, #0]
 804e5fe:	881b      	ldrh	r3, [r3, #0]
 804e600:	b29a      	uxth	r2, r3
 804e602:	697b      	ldr	r3, [r7, #20]
 804e604:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 804e606:	697b      	ldr	r3, [r7, #20]
 804e608:	2203      	movs	r2, #3
 804e60a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 804e60c:	4b41      	ldr	r3, [pc, #260]	; (804e714 <tcp_listen_input+0x1e0>)
 804e60e:	681b      	ldr	r3, [r3, #0]
 804e610:	1c5a      	adds	r2, r3, #1
 804e612:	697b      	ldr	r3, [r7, #20]
 804e614:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 804e616:	697b      	ldr	r3, [r7, #20]
 804e618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804e61a:	697b      	ldr	r3, [r7, #20]
 804e61c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 804e61e:	6978      	ldr	r0, [r7, #20]
 804e620:	f7ff fa58 	bl	804dad4 <tcp_next_iss>
 804e624:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 804e626:	697b      	ldr	r3, [r7, #20]
 804e628:	693a      	ldr	r2, [r7, #16]
 804e62a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 804e62c:	697b      	ldr	r3, [r7, #20]
 804e62e:	693a      	ldr	r2, [r7, #16]
 804e630:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 804e632:	697b      	ldr	r3, [r7, #20]
 804e634:	693a      	ldr	r2, [r7, #16]
 804e636:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 804e638:	697b      	ldr	r3, [r7, #20]
 804e63a:	693a      	ldr	r2, [r7, #16]
 804e63c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 804e63e:	4b35      	ldr	r3, [pc, #212]	; (804e714 <tcp_listen_input+0x1e0>)
 804e640:	681b      	ldr	r3, [r3, #0]
 804e642:	1e5a      	subs	r2, r3, #1
 804e644:	697b      	ldr	r3, [r7, #20]
 804e646:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 804e648:	687b      	ldr	r3, [r7, #4]
 804e64a:	691a      	ldr	r2, [r3, #16]
 804e64c:	697b      	ldr	r3, [r7, #20]
 804e64e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 804e650:	697b      	ldr	r3, [r7, #20]
 804e652:	687a      	ldr	r2, [r7, #4]
 804e654:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 804e656:	687b      	ldr	r3, [r7, #4]
 804e658:	7a5b      	ldrb	r3, [r3, #9]
 804e65a:	f003 030c 	and.w	r3, r3, #12
 804e65e:	b2da      	uxtb	r2, r3
 804e660:	697b      	ldr	r3, [r7, #20]
 804e662:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 804e664:	687b      	ldr	r3, [r7, #4]
 804e666:	7a1a      	ldrb	r2, [r3, #8]
 804e668:	697b      	ldr	r3, [r7, #20]
 804e66a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 804e66c:	4b2e      	ldr	r3, [pc, #184]	; (804e728 <tcp_listen_input+0x1f4>)
 804e66e:	681a      	ldr	r2, [r3, #0]
 804e670:	697b      	ldr	r3, [r7, #20]
 804e672:	60da      	str	r2, [r3, #12]
 804e674:	4a2c      	ldr	r2, [pc, #176]	; (804e728 <tcp_listen_input+0x1f4>)
 804e676:	697b      	ldr	r3, [r7, #20]
 804e678:	6013      	str	r3, [r2, #0]
 804e67a:	f003 f8d1 	bl	8051820 <tcp_timer_needed>
 804e67e:	4b2b      	ldr	r3, [pc, #172]	; (804e72c <tcp_listen_input+0x1f8>)
 804e680:	2201      	movs	r2, #1
 804e682:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 804e684:	6978      	ldr	r0, [r7, #20]
 804e686:	f001 fd8f 	bl	80501a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 804e68a:	4b23      	ldr	r3, [pc, #140]	; (804e718 <tcp_listen_input+0x1e4>)
 804e68c:	681b      	ldr	r3, [r3, #0]
 804e68e:	89db      	ldrh	r3, [r3, #14]
 804e690:	b29a      	uxth	r2, r3
 804e692:	697b      	ldr	r3, [r7, #20]
 804e694:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 804e698:	697b      	ldr	r3, [r7, #20]
 804e69a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 804e69e:	697b      	ldr	r3, [r7, #20]
 804e6a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 804e6a4:	697b      	ldr	r3, [r7, #20]
 804e6a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 804e6a8:	697b      	ldr	r3, [r7, #20]
 804e6aa:	3304      	adds	r3, #4
 804e6ac:	4618      	mov	r0, r3
 804e6ae:	f004 fcc5 	bl	805303c <ip4_route>
 804e6b2:	4601      	mov	r1, r0
 804e6b4:	697b      	ldr	r3, [r7, #20]
 804e6b6:	3304      	adds	r3, #4
 804e6b8:	461a      	mov	r2, r3
 804e6ba:	4620      	mov	r0, r4
 804e6bc:	f7ff fa30 	bl	804db20 <tcp_eff_send_mss_netif>
 804e6c0:	4603      	mov	r3, r0
 804e6c2:	461a      	mov	r2, r3
 804e6c4:	697b      	ldr	r3, [r7, #20]
 804e6c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 804e6c8:	2112      	movs	r1, #18
 804e6ca:	6978      	ldr	r0, [r7, #20]
 804e6cc:	f002 f844 	bl	8050758 <tcp_enqueue_flags>
 804e6d0:	4603      	mov	r3, r0
 804e6d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 804e6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804e6d8:	2b00      	cmp	r3, #0
 804e6da:	d004      	beq.n	804e6e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 804e6dc:	2100      	movs	r1, #0
 804e6de:	6978      	ldr	r0, [r7, #20]
 804e6e0:	f7fe f97e 	bl	804c9e0 <tcp_abandon>
      return;
 804e6e4:	e006      	b.n	804e6f4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 804e6e6:	6978      	ldr	r0, [r7, #20]
 804e6e8:	f002 f924 	bl	8050934 <tcp_output>
  return;
 804e6ec:	e001      	b.n	804e6f2 <tcp_listen_input+0x1be>
    return;
 804e6ee:	bf00      	nop
 804e6f0:	e000      	b.n	804e6f4 <tcp_listen_input+0x1c0>
  return;
 804e6f2:	bf00      	nop
}
 804e6f4:	371c      	adds	r7, #28
 804e6f6:	46bd      	mov	sp, r7
 804e6f8:	bd90      	pop	{r4, r7, pc}
 804e6fa:	bf00      	nop
 804e6fc:	20023810 	.word	0x20023810
 804e700:	08056c90 	.word	0x08056c90
 804e704:	08056e88 	.word	0x08056e88
 804e708:	08056cdc 	.word	0x08056cdc
 804e70c:	20023808 	.word	0x20023808
 804e710:	2002380e 	.word	0x2002380e
 804e714:	20023804 	.word	0x20023804
 804e718:	200237f4 	.word	0x200237f4
 804e71c:	20020088 	.word	0x20020088
 804e720:	2002008c 	.word	0x2002008c
 804e724:	20020078 	.word	0x20020078
 804e728:	200237d8 	.word	0x200237d8
 804e72c:	200237e0 	.word	0x200237e0

0804e730 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 804e730:	b580      	push	{r7, lr}
 804e732:	b086      	sub	sp, #24
 804e734:	af04      	add	r7, sp, #16
 804e736:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 804e738:	4b2f      	ldr	r3, [pc, #188]	; (804e7f8 <tcp_timewait_input+0xc8>)
 804e73a:	781b      	ldrb	r3, [r3, #0]
 804e73c:	f003 0304 	and.w	r3, r3, #4
 804e740:	2b00      	cmp	r3, #0
 804e742:	d153      	bne.n	804e7ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 804e744:	687b      	ldr	r3, [r7, #4]
 804e746:	2b00      	cmp	r3, #0
 804e748:	d106      	bne.n	804e758 <tcp_timewait_input+0x28>
 804e74a:	4b2c      	ldr	r3, [pc, #176]	; (804e7fc <tcp_timewait_input+0xcc>)
 804e74c:	f240 22ee 	movw	r2, #750	; 0x2ee
 804e750:	492b      	ldr	r1, [pc, #172]	; (804e800 <tcp_timewait_input+0xd0>)
 804e752:	482c      	ldr	r0, [pc, #176]	; (804e804 <tcp_timewait_input+0xd4>)
 804e754:	f006 f874 	bl	8054840 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 804e758:	4b27      	ldr	r3, [pc, #156]	; (804e7f8 <tcp_timewait_input+0xc8>)
 804e75a:	781b      	ldrb	r3, [r3, #0]
 804e75c:	f003 0302 	and.w	r3, r3, #2
 804e760:	2b00      	cmp	r3, #0
 804e762:	d02a      	beq.n	804e7ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 804e764:	4b28      	ldr	r3, [pc, #160]	; (804e808 <tcp_timewait_input+0xd8>)
 804e766:	681a      	ldr	r2, [r3, #0]
 804e768:	687b      	ldr	r3, [r7, #4]
 804e76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e76c:	1ad3      	subs	r3, r2, r3
 804e76e:	2b00      	cmp	r3, #0
 804e770:	db2d      	blt.n	804e7ce <tcp_timewait_input+0x9e>
 804e772:	4b25      	ldr	r3, [pc, #148]	; (804e808 <tcp_timewait_input+0xd8>)
 804e774:	681a      	ldr	r2, [r3, #0]
 804e776:	687b      	ldr	r3, [r7, #4]
 804e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e77a:	6879      	ldr	r1, [r7, #4]
 804e77c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 804e77e:	440b      	add	r3, r1
 804e780:	1ad3      	subs	r3, r2, r3
 804e782:	2b00      	cmp	r3, #0
 804e784:	dc23      	bgt.n	804e7ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e786:	4b21      	ldr	r3, [pc, #132]	; (804e80c <tcp_timewait_input+0xdc>)
 804e788:	6819      	ldr	r1, [r3, #0]
 804e78a:	4b21      	ldr	r3, [pc, #132]	; (804e810 <tcp_timewait_input+0xe0>)
 804e78c:	881b      	ldrh	r3, [r3, #0]
 804e78e:	461a      	mov	r2, r3
 804e790:	4b1d      	ldr	r3, [pc, #116]	; (804e808 <tcp_timewait_input+0xd8>)
 804e792:	681b      	ldr	r3, [r3, #0]
 804e794:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804e796:	4b1f      	ldr	r3, [pc, #124]	; (804e814 <tcp_timewait_input+0xe4>)
 804e798:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e79a:	885b      	ldrh	r3, [r3, #2]
 804e79c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804e79e:	4a1d      	ldr	r2, [pc, #116]	; (804e814 <tcp_timewait_input+0xe4>)
 804e7a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804e7a2:	8812      	ldrh	r2, [r2, #0]
 804e7a4:	b292      	uxth	r2, r2
 804e7a6:	9202      	str	r2, [sp, #8]
 804e7a8:	9301      	str	r3, [sp, #4]
 804e7aa:	4b1b      	ldr	r3, [pc, #108]	; (804e818 <tcp_timewait_input+0xe8>)
 804e7ac:	9300      	str	r3, [sp, #0]
 804e7ae:	4b1b      	ldr	r3, [pc, #108]	; (804e81c <tcp_timewait_input+0xec>)
 804e7b0:	4602      	mov	r2, r0
 804e7b2:	6878      	ldr	r0, [r7, #4]
 804e7b4:	f002 fe72 	bl	805149c <tcp_rst>
      return;
 804e7b8:	e01b      	b.n	804e7f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 804e7ba:	4b0f      	ldr	r3, [pc, #60]	; (804e7f8 <tcp_timewait_input+0xc8>)
 804e7bc:	781b      	ldrb	r3, [r3, #0]
 804e7be:	f003 0301 	and.w	r3, r3, #1
 804e7c2:	2b00      	cmp	r3, #0
 804e7c4:	d003      	beq.n	804e7ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 804e7c6:	4b16      	ldr	r3, [pc, #88]	; (804e820 <tcp_timewait_input+0xf0>)
 804e7c8:	681a      	ldr	r2, [r3, #0]
 804e7ca:	687b      	ldr	r3, [r7, #4]
 804e7cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 804e7ce:	4b10      	ldr	r3, [pc, #64]	; (804e810 <tcp_timewait_input+0xe0>)
 804e7d0:	881b      	ldrh	r3, [r3, #0]
 804e7d2:	2b00      	cmp	r3, #0
 804e7d4:	d00c      	beq.n	804e7f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 804e7d6:	687b      	ldr	r3, [r7, #4]
 804e7d8:	8b5b      	ldrh	r3, [r3, #26]
 804e7da:	f043 0302 	orr.w	r3, r3, #2
 804e7de:	b29a      	uxth	r2, r3
 804e7e0:	687b      	ldr	r3, [r7, #4]
 804e7e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 804e7e4:	6878      	ldr	r0, [r7, #4]
 804e7e6:	f002 f8a5 	bl	8050934 <tcp_output>
  }
  return;
 804e7ea:	e001      	b.n	804e7f0 <tcp_timewait_input+0xc0>
    return;
 804e7ec:	bf00      	nop
 804e7ee:	e000      	b.n	804e7f2 <tcp_timewait_input+0xc2>
  return;
 804e7f0:	bf00      	nop
}
 804e7f2:	3708      	adds	r7, #8
 804e7f4:	46bd      	mov	sp, r7
 804e7f6:	bd80      	pop	{r7, pc}
 804e7f8:	20023810 	.word	0x20023810
 804e7fc:	08056c90 	.word	0x08056c90
 804e800:	08056ea8 	.word	0x08056ea8
 804e804:	08056cdc 	.word	0x08056cdc
 804e808:	20023804 	.word	0x20023804
 804e80c:	20023808 	.word	0x20023808
 804e810:	2002380e 	.word	0x2002380e
 804e814:	200237f4 	.word	0x200237f4
 804e818:	20020088 	.word	0x20020088
 804e81c:	2002008c 	.word	0x2002008c
 804e820:	200237cc 	.word	0x200237cc

0804e824 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 804e824:	b590      	push	{r4, r7, lr}
 804e826:	b08d      	sub	sp, #52	; 0x34
 804e828:	af04      	add	r7, sp, #16
 804e82a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 804e82c:	2300      	movs	r3, #0
 804e82e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 804e830:	2300      	movs	r3, #0
 804e832:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 804e834:	687b      	ldr	r3, [r7, #4]
 804e836:	2b00      	cmp	r3, #0
 804e838:	d106      	bne.n	804e848 <tcp_process+0x24>
 804e83a:	4b9d      	ldr	r3, [pc, #628]	; (804eab0 <tcp_process+0x28c>)
 804e83c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 804e840:	499c      	ldr	r1, [pc, #624]	; (804eab4 <tcp_process+0x290>)
 804e842:	489d      	ldr	r0, [pc, #628]	; (804eab8 <tcp_process+0x294>)
 804e844:	f005 fffc 	bl	8054840 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 804e848:	4b9c      	ldr	r3, [pc, #624]	; (804eabc <tcp_process+0x298>)
 804e84a:	781b      	ldrb	r3, [r3, #0]
 804e84c:	f003 0304 	and.w	r3, r3, #4
 804e850:	2b00      	cmp	r3, #0
 804e852:	d04e      	beq.n	804e8f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 804e854:	687b      	ldr	r3, [r7, #4]
 804e856:	7d1b      	ldrb	r3, [r3, #20]
 804e858:	2b02      	cmp	r3, #2
 804e85a:	d108      	bne.n	804e86e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 804e85c:	687b      	ldr	r3, [r7, #4]
 804e85e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 804e860:	4b97      	ldr	r3, [pc, #604]	; (804eac0 <tcp_process+0x29c>)
 804e862:	681b      	ldr	r3, [r3, #0]
 804e864:	429a      	cmp	r2, r3
 804e866:	d123      	bne.n	804e8b0 <tcp_process+0x8c>
        acceptable = 1;
 804e868:	2301      	movs	r3, #1
 804e86a:	76fb      	strb	r3, [r7, #27]
 804e86c:	e020      	b.n	804e8b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 804e86e:	687b      	ldr	r3, [r7, #4]
 804e870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804e872:	4b94      	ldr	r3, [pc, #592]	; (804eac4 <tcp_process+0x2a0>)
 804e874:	681b      	ldr	r3, [r3, #0]
 804e876:	429a      	cmp	r2, r3
 804e878:	d102      	bne.n	804e880 <tcp_process+0x5c>
        acceptable = 1;
 804e87a:	2301      	movs	r3, #1
 804e87c:	76fb      	strb	r3, [r7, #27]
 804e87e:	e017      	b.n	804e8b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 804e880:	4b90      	ldr	r3, [pc, #576]	; (804eac4 <tcp_process+0x2a0>)
 804e882:	681a      	ldr	r2, [r3, #0]
 804e884:	687b      	ldr	r3, [r7, #4]
 804e886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e888:	1ad3      	subs	r3, r2, r3
 804e88a:	2b00      	cmp	r3, #0
 804e88c:	db10      	blt.n	804e8b0 <tcp_process+0x8c>
 804e88e:	4b8d      	ldr	r3, [pc, #564]	; (804eac4 <tcp_process+0x2a0>)
 804e890:	681a      	ldr	r2, [r3, #0]
 804e892:	687b      	ldr	r3, [r7, #4]
 804e894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e896:	6879      	ldr	r1, [r7, #4]
 804e898:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 804e89a:	440b      	add	r3, r1
 804e89c:	1ad3      	subs	r3, r2, r3
 804e89e:	2b00      	cmp	r3, #0
 804e8a0:	dc06      	bgt.n	804e8b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 804e8a2:	687b      	ldr	r3, [r7, #4]
 804e8a4:	8b5b      	ldrh	r3, [r3, #26]
 804e8a6:	f043 0302 	orr.w	r3, r3, #2
 804e8aa:	b29a      	uxth	r2, r3
 804e8ac:	687b      	ldr	r3, [r7, #4]
 804e8ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 804e8b0:	7efb      	ldrb	r3, [r7, #27]
 804e8b2:	2b00      	cmp	r3, #0
 804e8b4:	d01b      	beq.n	804e8ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 804e8b6:	687b      	ldr	r3, [r7, #4]
 804e8b8:	7d1b      	ldrb	r3, [r3, #20]
 804e8ba:	2b00      	cmp	r3, #0
 804e8bc:	d106      	bne.n	804e8cc <tcp_process+0xa8>
 804e8be:	4b7c      	ldr	r3, [pc, #496]	; (804eab0 <tcp_process+0x28c>)
 804e8c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 804e8c4:	4980      	ldr	r1, [pc, #512]	; (804eac8 <tcp_process+0x2a4>)
 804e8c6:	487c      	ldr	r0, [pc, #496]	; (804eab8 <tcp_process+0x294>)
 804e8c8:	f005 ffba 	bl	8054840 <iprintf>
      recv_flags |= TF_RESET;
 804e8cc:	4b7f      	ldr	r3, [pc, #508]	; (804eacc <tcp_process+0x2a8>)
 804e8ce:	781b      	ldrb	r3, [r3, #0]
 804e8d0:	f043 0308 	orr.w	r3, r3, #8
 804e8d4:	b2da      	uxtb	r2, r3
 804e8d6:	4b7d      	ldr	r3, [pc, #500]	; (804eacc <tcp_process+0x2a8>)
 804e8d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 804e8da:	687b      	ldr	r3, [r7, #4]
 804e8dc:	8b5b      	ldrh	r3, [r3, #26]
 804e8de:	f023 0301 	bic.w	r3, r3, #1
 804e8e2:	b29a      	uxth	r2, r3
 804e8e4:	687b      	ldr	r3, [r7, #4]
 804e8e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 804e8e8:	f06f 030d 	mvn.w	r3, #13
 804e8ec:	e37a      	b.n	804efe4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 804e8ee:	2300      	movs	r3, #0
 804e8f0:	e378      	b.n	804efe4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 804e8f2:	4b72      	ldr	r3, [pc, #456]	; (804eabc <tcp_process+0x298>)
 804e8f4:	781b      	ldrb	r3, [r3, #0]
 804e8f6:	f003 0302 	and.w	r3, r3, #2
 804e8fa:	2b00      	cmp	r3, #0
 804e8fc:	d010      	beq.n	804e920 <tcp_process+0xfc>
 804e8fe:	687b      	ldr	r3, [r7, #4]
 804e900:	7d1b      	ldrb	r3, [r3, #20]
 804e902:	2b02      	cmp	r3, #2
 804e904:	d00c      	beq.n	804e920 <tcp_process+0xfc>
 804e906:	687b      	ldr	r3, [r7, #4]
 804e908:	7d1b      	ldrb	r3, [r3, #20]
 804e90a:	2b03      	cmp	r3, #3
 804e90c:	d008      	beq.n	804e920 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 804e90e:	687b      	ldr	r3, [r7, #4]
 804e910:	8b5b      	ldrh	r3, [r3, #26]
 804e912:	f043 0302 	orr.w	r3, r3, #2
 804e916:	b29a      	uxth	r2, r3
 804e918:	687b      	ldr	r3, [r7, #4]
 804e91a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 804e91c:	2300      	movs	r3, #0
 804e91e:	e361      	b.n	804efe4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 804e920:	687b      	ldr	r3, [r7, #4]
 804e922:	8b5b      	ldrh	r3, [r3, #26]
 804e924:	f003 0310 	and.w	r3, r3, #16
 804e928:	2b00      	cmp	r3, #0
 804e92a:	d103      	bne.n	804e934 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 804e92c:	4b68      	ldr	r3, [pc, #416]	; (804ead0 <tcp_process+0x2ac>)
 804e92e:	681a      	ldr	r2, [r3, #0]
 804e930:	687b      	ldr	r3, [r7, #4]
 804e932:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 804e934:	687b      	ldr	r3, [r7, #4]
 804e936:	2200      	movs	r2, #0
 804e938:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 804e93c:	687b      	ldr	r3, [r7, #4]
 804e93e:	2200      	movs	r2, #0
 804e940:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 804e944:	6878      	ldr	r0, [r7, #4]
 804e946:	f001 fc2f 	bl	80501a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 804e94a:	687b      	ldr	r3, [r7, #4]
 804e94c:	7d1b      	ldrb	r3, [r3, #20]
 804e94e:	3b02      	subs	r3, #2
 804e950:	2b07      	cmp	r3, #7
 804e952:	f200 8337 	bhi.w	804efc4 <tcp_process+0x7a0>
 804e956:	a201      	add	r2, pc, #4	; (adr r2, 804e95c <tcp_process+0x138>)
 804e958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e95c:	0804e97d 	.word	0x0804e97d
 804e960:	0804ebad 	.word	0x0804ebad
 804e964:	0804ed25 	.word	0x0804ed25
 804e968:	0804ed4f 	.word	0x0804ed4f
 804e96c:	0804ee73 	.word	0x0804ee73
 804e970:	0804ed25 	.word	0x0804ed25
 804e974:	0804eeff 	.word	0x0804eeff
 804e978:	0804ef8f 	.word	0x0804ef8f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 804e97c:	4b4f      	ldr	r3, [pc, #316]	; (804eabc <tcp_process+0x298>)
 804e97e:	781b      	ldrb	r3, [r3, #0]
 804e980:	f003 0310 	and.w	r3, r3, #16
 804e984:	2b00      	cmp	r3, #0
 804e986:	f000 80e4 	beq.w	804eb52 <tcp_process+0x32e>
 804e98a:	4b4c      	ldr	r3, [pc, #304]	; (804eabc <tcp_process+0x298>)
 804e98c:	781b      	ldrb	r3, [r3, #0]
 804e98e:	f003 0302 	and.w	r3, r3, #2
 804e992:	2b00      	cmp	r3, #0
 804e994:	f000 80dd 	beq.w	804eb52 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 804e998:	687b      	ldr	r3, [r7, #4]
 804e99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804e99c:	1c5a      	adds	r2, r3, #1
 804e99e:	4b48      	ldr	r3, [pc, #288]	; (804eac0 <tcp_process+0x29c>)
 804e9a0:	681b      	ldr	r3, [r3, #0]
 804e9a2:	429a      	cmp	r2, r3
 804e9a4:	f040 80d5 	bne.w	804eb52 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 804e9a8:	4b46      	ldr	r3, [pc, #280]	; (804eac4 <tcp_process+0x2a0>)
 804e9aa:	681b      	ldr	r3, [r3, #0]
 804e9ac:	1c5a      	adds	r2, r3, #1
 804e9ae:	687b      	ldr	r3, [r7, #4]
 804e9b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 804e9b2:	687b      	ldr	r3, [r7, #4]
 804e9b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804e9b6:	687b      	ldr	r3, [r7, #4]
 804e9b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 804e9ba:	4b41      	ldr	r3, [pc, #260]	; (804eac0 <tcp_process+0x29c>)
 804e9bc:	681a      	ldr	r2, [r3, #0]
 804e9be:	687b      	ldr	r3, [r7, #4]
 804e9c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 804e9c2:	4b44      	ldr	r3, [pc, #272]	; (804ead4 <tcp_process+0x2b0>)
 804e9c4:	681b      	ldr	r3, [r3, #0]
 804e9c6:	89db      	ldrh	r3, [r3, #14]
 804e9c8:	b29a      	uxth	r2, r3
 804e9ca:	687b      	ldr	r3, [r7, #4]
 804e9cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 804e9d0:	687b      	ldr	r3, [r7, #4]
 804e9d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 804e9d6:	687b      	ldr	r3, [r7, #4]
 804e9d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 804e9dc:	4b39      	ldr	r3, [pc, #228]	; (804eac4 <tcp_process+0x2a0>)
 804e9de:	681b      	ldr	r3, [r3, #0]
 804e9e0:	1e5a      	subs	r2, r3, #1
 804e9e2:	687b      	ldr	r3, [r7, #4]
 804e9e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 804e9e6:	687b      	ldr	r3, [r7, #4]
 804e9e8:	2204      	movs	r2, #4
 804e9ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 804e9ec:	687b      	ldr	r3, [r7, #4]
 804e9ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 804e9f0:	687b      	ldr	r3, [r7, #4]
 804e9f2:	3304      	adds	r3, #4
 804e9f4:	4618      	mov	r0, r3
 804e9f6:	f004 fb21 	bl	805303c <ip4_route>
 804e9fa:	4601      	mov	r1, r0
 804e9fc:	687b      	ldr	r3, [r7, #4]
 804e9fe:	3304      	adds	r3, #4
 804ea00:	461a      	mov	r2, r3
 804ea02:	4620      	mov	r0, r4
 804ea04:	f7ff f88c 	bl	804db20 <tcp_eff_send_mss_netif>
 804ea08:	4603      	mov	r3, r0
 804ea0a:	461a      	mov	r2, r3
 804ea0c:	687b      	ldr	r3, [r7, #4]
 804ea0e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 804ea10:	687b      	ldr	r3, [r7, #4]
 804ea12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ea14:	009a      	lsls	r2, r3, #2
 804ea16:	687b      	ldr	r3, [r7, #4]
 804ea18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ea1a:	005b      	lsls	r3, r3, #1
 804ea1c:	f241 111c 	movw	r1, #4380	; 0x111c
 804ea20:	428b      	cmp	r3, r1
 804ea22:	bf38      	it	cc
 804ea24:	460b      	movcc	r3, r1
 804ea26:	429a      	cmp	r2, r3
 804ea28:	d204      	bcs.n	804ea34 <tcp_process+0x210>
 804ea2a:	687b      	ldr	r3, [r7, #4]
 804ea2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ea2e:	009b      	lsls	r3, r3, #2
 804ea30:	b29b      	uxth	r3, r3
 804ea32:	e00d      	b.n	804ea50 <tcp_process+0x22c>
 804ea34:	687b      	ldr	r3, [r7, #4]
 804ea36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ea38:	005b      	lsls	r3, r3, #1
 804ea3a:	f241 121c 	movw	r2, #4380	; 0x111c
 804ea3e:	4293      	cmp	r3, r2
 804ea40:	d904      	bls.n	804ea4c <tcp_process+0x228>
 804ea42:	687b      	ldr	r3, [r7, #4]
 804ea44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ea46:	005b      	lsls	r3, r3, #1
 804ea48:	b29b      	uxth	r3, r3
 804ea4a:	e001      	b.n	804ea50 <tcp_process+0x22c>
 804ea4c:	f241 131c 	movw	r3, #4380	; 0x111c
 804ea50:	687a      	ldr	r2, [r7, #4]
 804ea52:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 804ea56:	687b      	ldr	r3, [r7, #4]
 804ea58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 804ea5c:	2b00      	cmp	r3, #0
 804ea5e:	d106      	bne.n	804ea6e <tcp_process+0x24a>
 804ea60:	4b13      	ldr	r3, [pc, #76]	; (804eab0 <tcp_process+0x28c>)
 804ea62:	f44f 725b 	mov.w	r2, #876	; 0x36c
 804ea66:	491c      	ldr	r1, [pc, #112]	; (804ead8 <tcp_process+0x2b4>)
 804ea68:	4813      	ldr	r0, [pc, #76]	; (804eab8 <tcp_process+0x294>)
 804ea6a:	f005 fee9 	bl	8054840 <iprintf>
        --pcb->snd_queuelen;
 804ea6e:	687b      	ldr	r3, [r7, #4]
 804ea70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 804ea74:	3b01      	subs	r3, #1
 804ea76:	b29a      	uxth	r2, r3
 804ea78:	687b      	ldr	r3, [r7, #4]
 804ea7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 804ea7e:	687b      	ldr	r3, [r7, #4]
 804ea80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804ea82:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 804ea84:	69fb      	ldr	r3, [r7, #28]
 804ea86:	2b00      	cmp	r3, #0
 804ea88:	d12a      	bne.n	804eae0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 804ea8a:	687b      	ldr	r3, [r7, #4]
 804ea8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804ea8e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 804ea90:	69fb      	ldr	r3, [r7, #28]
 804ea92:	2b00      	cmp	r3, #0
 804ea94:	d106      	bne.n	804eaa4 <tcp_process+0x280>
 804ea96:	4b06      	ldr	r3, [pc, #24]	; (804eab0 <tcp_process+0x28c>)
 804ea98:	f44f 725d 	mov.w	r2, #884	; 0x374
 804ea9c:	490f      	ldr	r1, [pc, #60]	; (804eadc <tcp_process+0x2b8>)
 804ea9e:	4806      	ldr	r0, [pc, #24]	; (804eab8 <tcp_process+0x294>)
 804eaa0:	f005 fece 	bl	8054840 <iprintf>
          pcb->unsent = rseg->next;
 804eaa4:	69fb      	ldr	r3, [r7, #28]
 804eaa6:	681a      	ldr	r2, [r3, #0]
 804eaa8:	687b      	ldr	r3, [r7, #4]
 804eaaa:	66da      	str	r2, [r3, #108]	; 0x6c
 804eaac:	e01c      	b.n	804eae8 <tcp_process+0x2c4>
 804eaae:	bf00      	nop
 804eab0:	08056c90 	.word	0x08056c90
 804eab4:	08056ec8 	.word	0x08056ec8
 804eab8:	08056cdc 	.word	0x08056cdc
 804eabc:	20023810 	.word	0x20023810
 804eac0:	20023808 	.word	0x20023808
 804eac4:	20023804 	.word	0x20023804
 804eac8:	08056ee4 	.word	0x08056ee4
 804eacc:	20023811 	.word	0x20023811
 804ead0:	200237cc 	.word	0x200237cc
 804ead4:	200237f4 	.word	0x200237f4
 804ead8:	08056f04 	.word	0x08056f04
 804eadc:	08056f1c 	.word	0x08056f1c
        } else {
          pcb->unacked = rseg->next;
 804eae0:	69fb      	ldr	r3, [r7, #28]
 804eae2:	681a      	ldr	r2, [r3, #0]
 804eae4:	687b      	ldr	r3, [r7, #4]
 804eae6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 804eae8:	69f8      	ldr	r0, [r7, #28]
 804eaea:	f7fe fd22 	bl	804d532 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 804eaee:	687b      	ldr	r3, [r7, #4]
 804eaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804eaf2:	2b00      	cmp	r3, #0
 804eaf4:	d104      	bne.n	804eb00 <tcp_process+0x2dc>
          pcb->rtime = -1;
 804eaf6:	687b      	ldr	r3, [r7, #4]
 804eaf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804eafc:	861a      	strh	r2, [r3, #48]	; 0x30
 804eafe:	e006      	b.n	804eb0e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 804eb00:	687b      	ldr	r3, [r7, #4]
 804eb02:	2200      	movs	r2, #0
 804eb04:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 804eb06:	687b      	ldr	r3, [r7, #4]
 804eb08:	2200      	movs	r2, #0
 804eb0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 804eb0e:	687b      	ldr	r3, [r7, #4]
 804eb10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804eb14:	2b00      	cmp	r3, #0
 804eb16:	d00a      	beq.n	804eb2e <tcp_process+0x30a>
 804eb18:	687b      	ldr	r3, [r7, #4]
 804eb1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804eb1e:	687a      	ldr	r2, [r7, #4]
 804eb20:	6910      	ldr	r0, [r2, #16]
 804eb22:	2200      	movs	r2, #0
 804eb24:	6879      	ldr	r1, [r7, #4]
 804eb26:	4798      	blx	r3
 804eb28:	4603      	mov	r3, r0
 804eb2a:	76bb      	strb	r3, [r7, #26]
 804eb2c:	e001      	b.n	804eb32 <tcp_process+0x30e>
 804eb2e:	2300      	movs	r3, #0
 804eb30:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 804eb32:	f997 301a 	ldrsb.w	r3, [r7, #26]
 804eb36:	f113 0f0d 	cmn.w	r3, #13
 804eb3a:	d102      	bne.n	804eb42 <tcp_process+0x31e>
          return ERR_ABRT;
 804eb3c:	f06f 030c 	mvn.w	r3, #12
 804eb40:	e250      	b.n	804efe4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 804eb42:	687b      	ldr	r3, [r7, #4]
 804eb44:	8b5b      	ldrh	r3, [r3, #26]
 804eb46:	f043 0302 	orr.w	r3, r3, #2
 804eb4a:	b29a      	uxth	r2, r3
 804eb4c:	687b      	ldr	r3, [r7, #4]
 804eb4e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 804eb50:	e23a      	b.n	804efc8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 804eb52:	4b98      	ldr	r3, [pc, #608]	; (804edb4 <tcp_process+0x590>)
 804eb54:	781b      	ldrb	r3, [r3, #0]
 804eb56:	f003 0310 	and.w	r3, r3, #16
 804eb5a:	2b00      	cmp	r3, #0
 804eb5c:	f000 8234 	beq.w	804efc8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804eb60:	4b95      	ldr	r3, [pc, #596]	; (804edb8 <tcp_process+0x594>)
 804eb62:	6819      	ldr	r1, [r3, #0]
 804eb64:	4b95      	ldr	r3, [pc, #596]	; (804edbc <tcp_process+0x598>)
 804eb66:	881b      	ldrh	r3, [r3, #0]
 804eb68:	461a      	mov	r2, r3
 804eb6a:	4b95      	ldr	r3, [pc, #596]	; (804edc0 <tcp_process+0x59c>)
 804eb6c:	681b      	ldr	r3, [r3, #0]
 804eb6e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804eb70:	4b94      	ldr	r3, [pc, #592]	; (804edc4 <tcp_process+0x5a0>)
 804eb72:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804eb74:	885b      	ldrh	r3, [r3, #2]
 804eb76:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804eb78:	4a92      	ldr	r2, [pc, #584]	; (804edc4 <tcp_process+0x5a0>)
 804eb7a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804eb7c:	8812      	ldrh	r2, [r2, #0]
 804eb7e:	b292      	uxth	r2, r2
 804eb80:	9202      	str	r2, [sp, #8]
 804eb82:	9301      	str	r3, [sp, #4]
 804eb84:	4b90      	ldr	r3, [pc, #576]	; (804edc8 <tcp_process+0x5a4>)
 804eb86:	9300      	str	r3, [sp, #0]
 804eb88:	4b90      	ldr	r3, [pc, #576]	; (804edcc <tcp_process+0x5a8>)
 804eb8a:	4602      	mov	r2, r0
 804eb8c:	6878      	ldr	r0, [r7, #4]
 804eb8e:	f002 fc85 	bl	805149c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 804eb92:	687b      	ldr	r3, [r7, #4]
 804eb94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 804eb98:	2b05      	cmp	r3, #5
 804eb9a:	f200 8215 	bhi.w	804efc8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 804eb9e:	687b      	ldr	r3, [r7, #4]
 804eba0:	2200      	movs	r2, #0
 804eba2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 804eba4:	6878      	ldr	r0, [r7, #4]
 804eba6:	f002 fa51 	bl	805104c <tcp_rexmit_rto>
      break;
 804ebaa:	e20d      	b.n	804efc8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 804ebac:	4b81      	ldr	r3, [pc, #516]	; (804edb4 <tcp_process+0x590>)
 804ebae:	781b      	ldrb	r3, [r3, #0]
 804ebb0:	f003 0310 	and.w	r3, r3, #16
 804ebb4:	2b00      	cmp	r3, #0
 804ebb6:	f000 80a1 	beq.w	804ecfc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 804ebba:	4b7f      	ldr	r3, [pc, #508]	; (804edb8 <tcp_process+0x594>)
 804ebbc:	681a      	ldr	r2, [r3, #0]
 804ebbe:	687b      	ldr	r3, [r7, #4]
 804ebc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804ebc2:	1ad3      	subs	r3, r2, r3
 804ebc4:	3b01      	subs	r3, #1
 804ebc6:	2b00      	cmp	r3, #0
 804ebc8:	db7e      	blt.n	804ecc8 <tcp_process+0x4a4>
 804ebca:	4b7b      	ldr	r3, [pc, #492]	; (804edb8 <tcp_process+0x594>)
 804ebcc:	681a      	ldr	r2, [r3, #0]
 804ebce:	687b      	ldr	r3, [r7, #4]
 804ebd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804ebd2:	1ad3      	subs	r3, r2, r3
 804ebd4:	2b00      	cmp	r3, #0
 804ebd6:	dc77      	bgt.n	804ecc8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 804ebd8:	687b      	ldr	r3, [r7, #4]
 804ebda:	2204      	movs	r2, #4
 804ebdc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 804ebde:	687b      	ldr	r3, [r7, #4]
 804ebe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804ebe2:	2b00      	cmp	r3, #0
 804ebe4:	d102      	bne.n	804ebec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 804ebe6:	23fa      	movs	r3, #250	; 0xfa
 804ebe8:	76bb      	strb	r3, [r7, #26]
 804ebea:	e01d      	b.n	804ec28 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 804ebec:	687b      	ldr	r3, [r7, #4]
 804ebee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804ebf0:	699b      	ldr	r3, [r3, #24]
 804ebf2:	2b00      	cmp	r3, #0
 804ebf4:	d106      	bne.n	804ec04 <tcp_process+0x3e0>
 804ebf6:	4b76      	ldr	r3, [pc, #472]	; (804edd0 <tcp_process+0x5ac>)
 804ebf8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 804ebfc:	4975      	ldr	r1, [pc, #468]	; (804edd4 <tcp_process+0x5b0>)
 804ebfe:	4876      	ldr	r0, [pc, #472]	; (804edd8 <tcp_process+0x5b4>)
 804ec00:	f005 fe1e 	bl	8054840 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 804ec04:	687b      	ldr	r3, [r7, #4]
 804ec06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804ec08:	699b      	ldr	r3, [r3, #24]
 804ec0a:	2b00      	cmp	r3, #0
 804ec0c:	d00a      	beq.n	804ec24 <tcp_process+0x400>
 804ec0e:	687b      	ldr	r3, [r7, #4]
 804ec10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804ec12:	699b      	ldr	r3, [r3, #24]
 804ec14:	687a      	ldr	r2, [r7, #4]
 804ec16:	6910      	ldr	r0, [r2, #16]
 804ec18:	2200      	movs	r2, #0
 804ec1a:	6879      	ldr	r1, [r7, #4]
 804ec1c:	4798      	blx	r3
 804ec1e:	4603      	mov	r3, r0
 804ec20:	76bb      	strb	r3, [r7, #26]
 804ec22:	e001      	b.n	804ec28 <tcp_process+0x404>
 804ec24:	23f0      	movs	r3, #240	; 0xf0
 804ec26:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 804ec28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 804ec2c:	2b00      	cmp	r3, #0
 804ec2e:	d00a      	beq.n	804ec46 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 804ec30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 804ec34:	f113 0f0d 	cmn.w	r3, #13
 804ec38:	d002      	beq.n	804ec40 <tcp_process+0x41c>
              tcp_abort(pcb);
 804ec3a:	6878      	ldr	r0, [r7, #4]
 804ec3c:	f7fd ff8e 	bl	804cb5c <tcp_abort>
            }
            return ERR_ABRT;
 804ec40:	f06f 030c 	mvn.w	r3, #12
 804ec44:	e1ce      	b.n	804efe4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 804ec46:	6878      	ldr	r0, [r7, #4]
 804ec48:	f000 fae0 	bl	804f20c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 804ec4c:	4b63      	ldr	r3, [pc, #396]	; (804eddc <tcp_process+0x5b8>)
 804ec4e:	881b      	ldrh	r3, [r3, #0]
 804ec50:	2b00      	cmp	r3, #0
 804ec52:	d005      	beq.n	804ec60 <tcp_process+0x43c>
            recv_acked--;
 804ec54:	4b61      	ldr	r3, [pc, #388]	; (804eddc <tcp_process+0x5b8>)
 804ec56:	881b      	ldrh	r3, [r3, #0]
 804ec58:	3b01      	subs	r3, #1
 804ec5a:	b29a      	uxth	r2, r3
 804ec5c:	4b5f      	ldr	r3, [pc, #380]	; (804eddc <tcp_process+0x5b8>)
 804ec5e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 804ec60:	687b      	ldr	r3, [r7, #4]
 804ec62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ec64:	009a      	lsls	r2, r3, #2
 804ec66:	687b      	ldr	r3, [r7, #4]
 804ec68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ec6a:	005b      	lsls	r3, r3, #1
 804ec6c:	f241 111c 	movw	r1, #4380	; 0x111c
 804ec70:	428b      	cmp	r3, r1
 804ec72:	bf38      	it	cc
 804ec74:	460b      	movcc	r3, r1
 804ec76:	429a      	cmp	r2, r3
 804ec78:	d204      	bcs.n	804ec84 <tcp_process+0x460>
 804ec7a:	687b      	ldr	r3, [r7, #4]
 804ec7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ec7e:	009b      	lsls	r3, r3, #2
 804ec80:	b29b      	uxth	r3, r3
 804ec82:	e00d      	b.n	804eca0 <tcp_process+0x47c>
 804ec84:	687b      	ldr	r3, [r7, #4]
 804ec86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ec88:	005b      	lsls	r3, r3, #1
 804ec8a:	f241 121c 	movw	r2, #4380	; 0x111c
 804ec8e:	4293      	cmp	r3, r2
 804ec90:	d904      	bls.n	804ec9c <tcp_process+0x478>
 804ec92:	687b      	ldr	r3, [r7, #4]
 804ec94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804ec96:	005b      	lsls	r3, r3, #1
 804ec98:	b29b      	uxth	r3, r3
 804ec9a:	e001      	b.n	804eca0 <tcp_process+0x47c>
 804ec9c:	f241 131c 	movw	r3, #4380	; 0x111c
 804eca0:	687a      	ldr	r2, [r7, #4]
 804eca2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 804eca6:	4b4e      	ldr	r3, [pc, #312]	; (804ede0 <tcp_process+0x5bc>)
 804eca8:	781b      	ldrb	r3, [r3, #0]
 804ecaa:	f003 0320 	and.w	r3, r3, #32
 804ecae:	2b00      	cmp	r3, #0
 804ecb0:	d037      	beq.n	804ed22 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 804ecb2:	687b      	ldr	r3, [r7, #4]
 804ecb4:	8b5b      	ldrh	r3, [r3, #26]
 804ecb6:	f043 0302 	orr.w	r3, r3, #2
 804ecba:	b29a      	uxth	r2, r3
 804ecbc:	687b      	ldr	r3, [r7, #4]
 804ecbe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 804ecc0:	687b      	ldr	r3, [r7, #4]
 804ecc2:	2207      	movs	r2, #7
 804ecc4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 804ecc6:	e02c      	b.n	804ed22 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804ecc8:	4b3b      	ldr	r3, [pc, #236]	; (804edb8 <tcp_process+0x594>)
 804ecca:	6819      	ldr	r1, [r3, #0]
 804eccc:	4b3b      	ldr	r3, [pc, #236]	; (804edbc <tcp_process+0x598>)
 804ecce:	881b      	ldrh	r3, [r3, #0]
 804ecd0:	461a      	mov	r2, r3
 804ecd2:	4b3b      	ldr	r3, [pc, #236]	; (804edc0 <tcp_process+0x59c>)
 804ecd4:	681b      	ldr	r3, [r3, #0]
 804ecd6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804ecd8:	4b3a      	ldr	r3, [pc, #232]	; (804edc4 <tcp_process+0x5a0>)
 804ecda:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804ecdc:	885b      	ldrh	r3, [r3, #2]
 804ecde:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 804ece0:	4a38      	ldr	r2, [pc, #224]	; (804edc4 <tcp_process+0x5a0>)
 804ece2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 804ece4:	8812      	ldrh	r2, [r2, #0]
 804ece6:	b292      	uxth	r2, r2
 804ece8:	9202      	str	r2, [sp, #8]
 804ecea:	9301      	str	r3, [sp, #4]
 804ecec:	4b36      	ldr	r3, [pc, #216]	; (804edc8 <tcp_process+0x5a4>)
 804ecee:	9300      	str	r3, [sp, #0]
 804ecf0:	4b36      	ldr	r3, [pc, #216]	; (804edcc <tcp_process+0x5a8>)
 804ecf2:	4602      	mov	r2, r0
 804ecf4:	6878      	ldr	r0, [r7, #4]
 804ecf6:	f002 fbd1 	bl	805149c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 804ecfa:	e167      	b.n	804efcc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 804ecfc:	4b2d      	ldr	r3, [pc, #180]	; (804edb4 <tcp_process+0x590>)
 804ecfe:	781b      	ldrb	r3, [r3, #0]
 804ed00:	f003 0302 	and.w	r3, r3, #2
 804ed04:	2b00      	cmp	r3, #0
 804ed06:	f000 8161 	beq.w	804efcc <tcp_process+0x7a8>
 804ed0a:	687b      	ldr	r3, [r7, #4]
 804ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ed0e:	1e5a      	subs	r2, r3, #1
 804ed10:	4b2b      	ldr	r3, [pc, #172]	; (804edc0 <tcp_process+0x59c>)
 804ed12:	681b      	ldr	r3, [r3, #0]
 804ed14:	429a      	cmp	r2, r3
 804ed16:	f040 8159 	bne.w	804efcc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 804ed1a:	6878      	ldr	r0, [r7, #4]
 804ed1c:	f002 f9b8 	bl	8051090 <tcp_rexmit>
      break;
 804ed20:	e154      	b.n	804efcc <tcp_process+0x7a8>
 804ed22:	e153      	b.n	804efcc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 804ed24:	6878      	ldr	r0, [r7, #4]
 804ed26:	f000 fa71 	bl	804f20c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 804ed2a:	4b2d      	ldr	r3, [pc, #180]	; (804ede0 <tcp_process+0x5bc>)
 804ed2c:	781b      	ldrb	r3, [r3, #0]
 804ed2e:	f003 0320 	and.w	r3, r3, #32
 804ed32:	2b00      	cmp	r3, #0
 804ed34:	f000 814c 	beq.w	804efd0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 804ed38:	687b      	ldr	r3, [r7, #4]
 804ed3a:	8b5b      	ldrh	r3, [r3, #26]
 804ed3c:	f043 0302 	orr.w	r3, r3, #2
 804ed40:	b29a      	uxth	r2, r3
 804ed42:	687b      	ldr	r3, [r7, #4]
 804ed44:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 804ed46:	687b      	ldr	r3, [r7, #4]
 804ed48:	2207      	movs	r2, #7
 804ed4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 804ed4c:	e140      	b.n	804efd0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 804ed4e:	6878      	ldr	r0, [r7, #4]
 804ed50:	f000 fa5c 	bl	804f20c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 804ed54:	4b22      	ldr	r3, [pc, #136]	; (804ede0 <tcp_process+0x5bc>)
 804ed56:	781b      	ldrb	r3, [r3, #0]
 804ed58:	f003 0320 	and.w	r3, r3, #32
 804ed5c:	2b00      	cmp	r3, #0
 804ed5e:	d071      	beq.n	804ee44 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 804ed60:	4b14      	ldr	r3, [pc, #80]	; (804edb4 <tcp_process+0x590>)
 804ed62:	781b      	ldrb	r3, [r3, #0]
 804ed64:	f003 0310 	and.w	r3, r3, #16
 804ed68:	2b00      	cmp	r3, #0
 804ed6a:	d060      	beq.n	804ee2e <tcp_process+0x60a>
 804ed6c:	687b      	ldr	r3, [r7, #4]
 804ed6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 804ed70:	4b11      	ldr	r3, [pc, #68]	; (804edb8 <tcp_process+0x594>)
 804ed72:	681b      	ldr	r3, [r3, #0]
 804ed74:	429a      	cmp	r2, r3
 804ed76:	d15a      	bne.n	804ee2e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 804ed78:	687b      	ldr	r3, [r7, #4]
 804ed7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 804ed7c:	2b00      	cmp	r3, #0
 804ed7e:	d156      	bne.n	804ee2e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 804ed80:	687b      	ldr	r3, [r7, #4]
 804ed82:	8b5b      	ldrh	r3, [r3, #26]
 804ed84:	f043 0302 	orr.w	r3, r3, #2
 804ed88:	b29a      	uxth	r2, r3
 804ed8a:	687b      	ldr	r3, [r7, #4]
 804ed8c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 804ed8e:	6878      	ldr	r0, [r7, #4]
 804ed90:	f7fe fdbc 	bl	804d90c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 804ed94:	4b13      	ldr	r3, [pc, #76]	; (804ede4 <tcp_process+0x5c0>)
 804ed96:	681b      	ldr	r3, [r3, #0]
 804ed98:	687a      	ldr	r2, [r7, #4]
 804ed9a:	429a      	cmp	r2, r3
 804ed9c:	d105      	bne.n	804edaa <tcp_process+0x586>
 804ed9e:	4b11      	ldr	r3, [pc, #68]	; (804ede4 <tcp_process+0x5c0>)
 804eda0:	681b      	ldr	r3, [r3, #0]
 804eda2:	68db      	ldr	r3, [r3, #12]
 804eda4:	4a0f      	ldr	r2, [pc, #60]	; (804ede4 <tcp_process+0x5c0>)
 804eda6:	6013      	str	r3, [r2, #0]
 804eda8:	e02e      	b.n	804ee08 <tcp_process+0x5e4>
 804edaa:	4b0e      	ldr	r3, [pc, #56]	; (804ede4 <tcp_process+0x5c0>)
 804edac:	681b      	ldr	r3, [r3, #0]
 804edae:	617b      	str	r3, [r7, #20]
 804edb0:	e027      	b.n	804ee02 <tcp_process+0x5de>
 804edb2:	bf00      	nop
 804edb4:	20023810 	.word	0x20023810
 804edb8:	20023808 	.word	0x20023808
 804edbc:	2002380e 	.word	0x2002380e
 804edc0:	20023804 	.word	0x20023804
 804edc4:	200237f4 	.word	0x200237f4
 804edc8:	20020088 	.word	0x20020088
 804edcc:	2002008c 	.word	0x2002008c
 804edd0:	08056c90 	.word	0x08056c90
 804edd4:	08056f30 	.word	0x08056f30
 804edd8:	08056cdc 	.word	0x08056cdc
 804eddc:	2002380c 	.word	0x2002380c
 804ede0:	20023811 	.word	0x20023811
 804ede4:	200237d8 	.word	0x200237d8
 804ede8:	697b      	ldr	r3, [r7, #20]
 804edea:	68db      	ldr	r3, [r3, #12]
 804edec:	687a      	ldr	r2, [r7, #4]
 804edee:	429a      	cmp	r2, r3
 804edf0:	d104      	bne.n	804edfc <tcp_process+0x5d8>
 804edf2:	687b      	ldr	r3, [r7, #4]
 804edf4:	68da      	ldr	r2, [r3, #12]
 804edf6:	697b      	ldr	r3, [r7, #20]
 804edf8:	60da      	str	r2, [r3, #12]
 804edfa:	e005      	b.n	804ee08 <tcp_process+0x5e4>
 804edfc:	697b      	ldr	r3, [r7, #20]
 804edfe:	68db      	ldr	r3, [r3, #12]
 804ee00:	617b      	str	r3, [r7, #20]
 804ee02:	697b      	ldr	r3, [r7, #20]
 804ee04:	2b00      	cmp	r3, #0
 804ee06:	d1ef      	bne.n	804ede8 <tcp_process+0x5c4>
 804ee08:	687b      	ldr	r3, [r7, #4]
 804ee0a:	2200      	movs	r2, #0
 804ee0c:	60da      	str	r2, [r3, #12]
 804ee0e:	4b77      	ldr	r3, [pc, #476]	; (804efec <tcp_process+0x7c8>)
 804ee10:	2201      	movs	r2, #1
 804ee12:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 804ee14:	687b      	ldr	r3, [r7, #4]
 804ee16:	220a      	movs	r2, #10
 804ee18:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 804ee1a:	4b75      	ldr	r3, [pc, #468]	; (804eff0 <tcp_process+0x7cc>)
 804ee1c:	681a      	ldr	r2, [r3, #0]
 804ee1e:	687b      	ldr	r3, [r7, #4]
 804ee20:	60da      	str	r2, [r3, #12]
 804ee22:	4a73      	ldr	r2, [pc, #460]	; (804eff0 <tcp_process+0x7cc>)
 804ee24:	687b      	ldr	r3, [r7, #4]
 804ee26:	6013      	str	r3, [r2, #0]
 804ee28:	f002 fcfa 	bl	8051820 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 804ee2c:	e0d2      	b.n	804efd4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 804ee2e:	687b      	ldr	r3, [r7, #4]
 804ee30:	8b5b      	ldrh	r3, [r3, #26]
 804ee32:	f043 0302 	orr.w	r3, r3, #2
 804ee36:	b29a      	uxth	r2, r3
 804ee38:	687b      	ldr	r3, [r7, #4]
 804ee3a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 804ee3c:	687b      	ldr	r3, [r7, #4]
 804ee3e:	2208      	movs	r2, #8
 804ee40:	751a      	strb	r2, [r3, #20]
      break;
 804ee42:	e0c7      	b.n	804efd4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 804ee44:	4b6b      	ldr	r3, [pc, #428]	; (804eff4 <tcp_process+0x7d0>)
 804ee46:	781b      	ldrb	r3, [r3, #0]
 804ee48:	f003 0310 	and.w	r3, r3, #16
 804ee4c:	2b00      	cmp	r3, #0
 804ee4e:	f000 80c1 	beq.w	804efd4 <tcp_process+0x7b0>
 804ee52:	687b      	ldr	r3, [r7, #4]
 804ee54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 804ee56:	4b68      	ldr	r3, [pc, #416]	; (804eff8 <tcp_process+0x7d4>)
 804ee58:	681b      	ldr	r3, [r3, #0]
 804ee5a:	429a      	cmp	r2, r3
 804ee5c:	f040 80ba 	bne.w	804efd4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 804ee60:	687b      	ldr	r3, [r7, #4]
 804ee62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 804ee64:	2b00      	cmp	r3, #0
 804ee66:	f040 80b5 	bne.w	804efd4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 804ee6a:	687b      	ldr	r3, [r7, #4]
 804ee6c:	2206      	movs	r2, #6
 804ee6e:	751a      	strb	r2, [r3, #20]
      break;
 804ee70:	e0b0      	b.n	804efd4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 804ee72:	6878      	ldr	r0, [r7, #4]
 804ee74:	f000 f9ca 	bl	804f20c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 804ee78:	4b60      	ldr	r3, [pc, #384]	; (804effc <tcp_process+0x7d8>)
 804ee7a:	781b      	ldrb	r3, [r3, #0]
 804ee7c:	f003 0320 	and.w	r3, r3, #32
 804ee80:	2b00      	cmp	r3, #0
 804ee82:	f000 80a9 	beq.w	804efd8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 804ee86:	687b      	ldr	r3, [r7, #4]
 804ee88:	8b5b      	ldrh	r3, [r3, #26]
 804ee8a:	f043 0302 	orr.w	r3, r3, #2
 804ee8e:	b29a      	uxth	r2, r3
 804ee90:	687b      	ldr	r3, [r7, #4]
 804ee92:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 804ee94:	6878      	ldr	r0, [r7, #4]
 804ee96:	f7fe fd39 	bl	804d90c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 804ee9a:	4b59      	ldr	r3, [pc, #356]	; (804f000 <tcp_process+0x7dc>)
 804ee9c:	681b      	ldr	r3, [r3, #0]
 804ee9e:	687a      	ldr	r2, [r7, #4]
 804eea0:	429a      	cmp	r2, r3
 804eea2:	d105      	bne.n	804eeb0 <tcp_process+0x68c>
 804eea4:	4b56      	ldr	r3, [pc, #344]	; (804f000 <tcp_process+0x7dc>)
 804eea6:	681b      	ldr	r3, [r3, #0]
 804eea8:	68db      	ldr	r3, [r3, #12]
 804eeaa:	4a55      	ldr	r2, [pc, #340]	; (804f000 <tcp_process+0x7dc>)
 804eeac:	6013      	str	r3, [r2, #0]
 804eeae:	e013      	b.n	804eed8 <tcp_process+0x6b4>
 804eeb0:	4b53      	ldr	r3, [pc, #332]	; (804f000 <tcp_process+0x7dc>)
 804eeb2:	681b      	ldr	r3, [r3, #0]
 804eeb4:	613b      	str	r3, [r7, #16]
 804eeb6:	e00c      	b.n	804eed2 <tcp_process+0x6ae>
 804eeb8:	693b      	ldr	r3, [r7, #16]
 804eeba:	68db      	ldr	r3, [r3, #12]
 804eebc:	687a      	ldr	r2, [r7, #4]
 804eebe:	429a      	cmp	r2, r3
 804eec0:	d104      	bne.n	804eecc <tcp_process+0x6a8>
 804eec2:	687b      	ldr	r3, [r7, #4]
 804eec4:	68da      	ldr	r2, [r3, #12]
 804eec6:	693b      	ldr	r3, [r7, #16]
 804eec8:	60da      	str	r2, [r3, #12]
 804eeca:	e005      	b.n	804eed8 <tcp_process+0x6b4>
 804eecc:	693b      	ldr	r3, [r7, #16]
 804eece:	68db      	ldr	r3, [r3, #12]
 804eed0:	613b      	str	r3, [r7, #16]
 804eed2:	693b      	ldr	r3, [r7, #16]
 804eed4:	2b00      	cmp	r3, #0
 804eed6:	d1ef      	bne.n	804eeb8 <tcp_process+0x694>
 804eed8:	687b      	ldr	r3, [r7, #4]
 804eeda:	2200      	movs	r2, #0
 804eedc:	60da      	str	r2, [r3, #12]
 804eede:	4b43      	ldr	r3, [pc, #268]	; (804efec <tcp_process+0x7c8>)
 804eee0:	2201      	movs	r2, #1
 804eee2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 804eee4:	687b      	ldr	r3, [r7, #4]
 804eee6:	220a      	movs	r2, #10
 804eee8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 804eeea:	4b41      	ldr	r3, [pc, #260]	; (804eff0 <tcp_process+0x7cc>)
 804eeec:	681a      	ldr	r2, [r3, #0]
 804eeee:	687b      	ldr	r3, [r7, #4]
 804eef0:	60da      	str	r2, [r3, #12]
 804eef2:	4a3f      	ldr	r2, [pc, #252]	; (804eff0 <tcp_process+0x7cc>)
 804eef4:	687b      	ldr	r3, [r7, #4]
 804eef6:	6013      	str	r3, [r2, #0]
 804eef8:	f002 fc92 	bl	8051820 <tcp_timer_needed>
      }
      break;
 804eefc:	e06c      	b.n	804efd8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 804eefe:	6878      	ldr	r0, [r7, #4]
 804ef00:	f000 f984 	bl	804f20c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 804ef04:	4b3b      	ldr	r3, [pc, #236]	; (804eff4 <tcp_process+0x7d0>)
 804ef06:	781b      	ldrb	r3, [r3, #0]
 804ef08:	f003 0310 	and.w	r3, r3, #16
 804ef0c:	2b00      	cmp	r3, #0
 804ef0e:	d065      	beq.n	804efdc <tcp_process+0x7b8>
 804ef10:	687b      	ldr	r3, [r7, #4]
 804ef12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 804ef14:	4b38      	ldr	r3, [pc, #224]	; (804eff8 <tcp_process+0x7d4>)
 804ef16:	681b      	ldr	r3, [r3, #0]
 804ef18:	429a      	cmp	r2, r3
 804ef1a:	d15f      	bne.n	804efdc <tcp_process+0x7b8>
 804ef1c:	687b      	ldr	r3, [r7, #4]
 804ef1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804ef20:	2b00      	cmp	r3, #0
 804ef22:	d15b      	bne.n	804efdc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 804ef24:	6878      	ldr	r0, [r7, #4]
 804ef26:	f7fe fcf1 	bl	804d90c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 804ef2a:	4b35      	ldr	r3, [pc, #212]	; (804f000 <tcp_process+0x7dc>)
 804ef2c:	681b      	ldr	r3, [r3, #0]
 804ef2e:	687a      	ldr	r2, [r7, #4]
 804ef30:	429a      	cmp	r2, r3
 804ef32:	d105      	bne.n	804ef40 <tcp_process+0x71c>
 804ef34:	4b32      	ldr	r3, [pc, #200]	; (804f000 <tcp_process+0x7dc>)
 804ef36:	681b      	ldr	r3, [r3, #0]
 804ef38:	68db      	ldr	r3, [r3, #12]
 804ef3a:	4a31      	ldr	r2, [pc, #196]	; (804f000 <tcp_process+0x7dc>)
 804ef3c:	6013      	str	r3, [r2, #0]
 804ef3e:	e013      	b.n	804ef68 <tcp_process+0x744>
 804ef40:	4b2f      	ldr	r3, [pc, #188]	; (804f000 <tcp_process+0x7dc>)
 804ef42:	681b      	ldr	r3, [r3, #0]
 804ef44:	60fb      	str	r3, [r7, #12]
 804ef46:	e00c      	b.n	804ef62 <tcp_process+0x73e>
 804ef48:	68fb      	ldr	r3, [r7, #12]
 804ef4a:	68db      	ldr	r3, [r3, #12]
 804ef4c:	687a      	ldr	r2, [r7, #4]
 804ef4e:	429a      	cmp	r2, r3
 804ef50:	d104      	bne.n	804ef5c <tcp_process+0x738>
 804ef52:	687b      	ldr	r3, [r7, #4]
 804ef54:	68da      	ldr	r2, [r3, #12]
 804ef56:	68fb      	ldr	r3, [r7, #12]
 804ef58:	60da      	str	r2, [r3, #12]
 804ef5a:	e005      	b.n	804ef68 <tcp_process+0x744>
 804ef5c:	68fb      	ldr	r3, [r7, #12]
 804ef5e:	68db      	ldr	r3, [r3, #12]
 804ef60:	60fb      	str	r3, [r7, #12]
 804ef62:	68fb      	ldr	r3, [r7, #12]
 804ef64:	2b00      	cmp	r3, #0
 804ef66:	d1ef      	bne.n	804ef48 <tcp_process+0x724>
 804ef68:	687b      	ldr	r3, [r7, #4]
 804ef6a:	2200      	movs	r2, #0
 804ef6c:	60da      	str	r2, [r3, #12]
 804ef6e:	4b1f      	ldr	r3, [pc, #124]	; (804efec <tcp_process+0x7c8>)
 804ef70:	2201      	movs	r2, #1
 804ef72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 804ef74:	687b      	ldr	r3, [r7, #4]
 804ef76:	220a      	movs	r2, #10
 804ef78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 804ef7a:	4b1d      	ldr	r3, [pc, #116]	; (804eff0 <tcp_process+0x7cc>)
 804ef7c:	681a      	ldr	r2, [r3, #0]
 804ef7e:	687b      	ldr	r3, [r7, #4]
 804ef80:	60da      	str	r2, [r3, #12]
 804ef82:	4a1b      	ldr	r2, [pc, #108]	; (804eff0 <tcp_process+0x7cc>)
 804ef84:	687b      	ldr	r3, [r7, #4]
 804ef86:	6013      	str	r3, [r2, #0]
 804ef88:	f002 fc4a 	bl	8051820 <tcp_timer_needed>
      }
      break;
 804ef8c:	e026      	b.n	804efdc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 804ef8e:	6878      	ldr	r0, [r7, #4]
 804ef90:	f000 f93c 	bl	804f20c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 804ef94:	4b17      	ldr	r3, [pc, #92]	; (804eff4 <tcp_process+0x7d0>)
 804ef96:	781b      	ldrb	r3, [r3, #0]
 804ef98:	f003 0310 	and.w	r3, r3, #16
 804ef9c:	2b00      	cmp	r3, #0
 804ef9e:	d01f      	beq.n	804efe0 <tcp_process+0x7bc>
 804efa0:	687b      	ldr	r3, [r7, #4]
 804efa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 804efa4:	4b14      	ldr	r3, [pc, #80]	; (804eff8 <tcp_process+0x7d4>)
 804efa6:	681b      	ldr	r3, [r3, #0]
 804efa8:	429a      	cmp	r2, r3
 804efaa:	d119      	bne.n	804efe0 <tcp_process+0x7bc>
 804efac:	687b      	ldr	r3, [r7, #4]
 804efae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804efb0:	2b00      	cmp	r3, #0
 804efb2:	d115      	bne.n	804efe0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 804efb4:	4b11      	ldr	r3, [pc, #68]	; (804effc <tcp_process+0x7d8>)
 804efb6:	781b      	ldrb	r3, [r3, #0]
 804efb8:	f043 0310 	orr.w	r3, r3, #16
 804efbc:	b2da      	uxtb	r2, r3
 804efbe:	4b0f      	ldr	r3, [pc, #60]	; (804effc <tcp_process+0x7d8>)
 804efc0:	701a      	strb	r2, [r3, #0]
      }
      break;
 804efc2:	e00d      	b.n	804efe0 <tcp_process+0x7bc>
    default:
      break;
 804efc4:	bf00      	nop
 804efc6:	e00c      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efc8:	bf00      	nop
 804efca:	e00a      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efcc:	bf00      	nop
 804efce:	e008      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efd0:	bf00      	nop
 804efd2:	e006      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efd4:	bf00      	nop
 804efd6:	e004      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efd8:	bf00      	nop
 804efda:	e002      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efdc:	bf00      	nop
 804efde:	e000      	b.n	804efe2 <tcp_process+0x7be>
      break;
 804efe0:	bf00      	nop
  }
  return ERR_OK;
 804efe2:	2300      	movs	r3, #0
}
 804efe4:	4618      	mov	r0, r3
 804efe6:	3724      	adds	r7, #36	; 0x24
 804efe8:	46bd      	mov	sp, r7
 804efea:	bd90      	pop	{r4, r7, pc}
 804efec:	200237e0 	.word	0x200237e0
 804eff0:	200237dc 	.word	0x200237dc
 804eff4:	20023810 	.word	0x20023810
 804eff8:	20023808 	.word	0x20023808
 804effc:	20023811 	.word	0x20023811
 804f000:	200237d8 	.word	0x200237d8

0804f004 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 804f004:	b590      	push	{r4, r7, lr}
 804f006:	b085      	sub	sp, #20
 804f008:	af00      	add	r7, sp, #0
 804f00a:	6078      	str	r0, [r7, #4]
 804f00c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 804f00e:	687b      	ldr	r3, [r7, #4]
 804f010:	2b00      	cmp	r3, #0
 804f012:	d106      	bne.n	804f022 <tcp_oos_insert_segment+0x1e>
 804f014:	4b3b      	ldr	r3, [pc, #236]	; (804f104 <tcp_oos_insert_segment+0x100>)
 804f016:	f240 421f 	movw	r2, #1055	; 0x41f
 804f01a:	493b      	ldr	r1, [pc, #236]	; (804f108 <tcp_oos_insert_segment+0x104>)
 804f01c:	483b      	ldr	r0, [pc, #236]	; (804f10c <tcp_oos_insert_segment+0x108>)
 804f01e:	f005 fc0f 	bl	8054840 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 804f022:	687b      	ldr	r3, [r7, #4]
 804f024:	68db      	ldr	r3, [r3, #12]
 804f026:	899b      	ldrh	r3, [r3, #12]
 804f028:	b29b      	uxth	r3, r3
 804f02a:	4618      	mov	r0, r3
 804f02c:	f7fb fc10 	bl	804a850 <lwip_htons>
 804f030:	4603      	mov	r3, r0
 804f032:	b2db      	uxtb	r3, r3
 804f034:	f003 0301 	and.w	r3, r3, #1
 804f038:	2b00      	cmp	r3, #0
 804f03a:	d028      	beq.n	804f08e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 804f03c:	6838      	ldr	r0, [r7, #0]
 804f03e:	f7fe fa63 	bl	804d508 <tcp_segs_free>
    next = NULL;
 804f042:	2300      	movs	r3, #0
 804f044:	603b      	str	r3, [r7, #0]
 804f046:	e056      	b.n	804f0f6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 804f048:	683b      	ldr	r3, [r7, #0]
 804f04a:	68db      	ldr	r3, [r3, #12]
 804f04c:	899b      	ldrh	r3, [r3, #12]
 804f04e:	b29b      	uxth	r3, r3
 804f050:	4618      	mov	r0, r3
 804f052:	f7fb fbfd 	bl	804a850 <lwip_htons>
 804f056:	4603      	mov	r3, r0
 804f058:	b2db      	uxtb	r3, r3
 804f05a:	f003 0301 	and.w	r3, r3, #1
 804f05e:	2b00      	cmp	r3, #0
 804f060:	d00d      	beq.n	804f07e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 804f062:	687b      	ldr	r3, [r7, #4]
 804f064:	68db      	ldr	r3, [r3, #12]
 804f066:	899b      	ldrh	r3, [r3, #12]
 804f068:	b29c      	uxth	r4, r3
 804f06a:	2001      	movs	r0, #1
 804f06c:	f7fb fbf0 	bl	804a850 <lwip_htons>
 804f070:	4603      	mov	r3, r0
 804f072:	461a      	mov	r2, r3
 804f074:	687b      	ldr	r3, [r7, #4]
 804f076:	68db      	ldr	r3, [r3, #12]
 804f078:	4322      	orrs	r2, r4
 804f07a:	b292      	uxth	r2, r2
 804f07c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 804f07e:	683b      	ldr	r3, [r7, #0]
 804f080:	60fb      	str	r3, [r7, #12]
      next = next->next;
 804f082:	683b      	ldr	r3, [r7, #0]
 804f084:	681b      	ldr	r3, [r3, #0]
 804f086:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 804f088:	68f8      	ldr	r0, [r7, #12]
 804f08a:	f7fe fa52 	bl	804d532 <tcp_seg_free>
    while (next &&
 804f08e:	683b      	ldr	r3, [r7, #0]
 804f090:	2b00      	cmp	r3, #0
 804f092:	d00e      	beq.n	804f0b2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 804f094:	687b      	ldr	r3, [r7, #4]
 804f096:	891b      	ldrh	r3, [r3, #8]
 804f098:	461a      	mov	r2, r3
 804f09a:	4b1d      	ldr	r3, [pc, #116]	; (804f110 <tcp_oos_insert_segment+0x10c>)
 804f09c:	681b      	ldr	r3, [r3, #0]
 804f09e:	441a      	add	r2, r3
 804f0a0:	683b      	ldr	r3, [r7, #0]
 804f0a2:	68db      	ldr	r3, [r3, #12]
 804f0a4:	685b      	ldr	r3, [r3, #4]
 804f0a6:	6839      	ldr	r1, [r7, #0]
 804f0a8:	8909      	ldrh	r1, [r1, #8]
 804f0aa:	440b      	add	r3, r1
 804f0ac:	1ad3      	subs	r3, r2, r3
    while (next &&
 804f0ae:	2b00      	cmp	r3, #0
 804f0b0:	daca      	bge.n	804f048 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 804f0b2:	683b      	ldr	r3, [r7, #0]
 804f0b4:	2b00      	cmp	r3, #0
 804f0b6:	d01e      	beq.n	804f0f6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 804f0b8:	687b      	ldr	r3, [r7, #4]
 804f0ba:	891b      	ldrh	r3, [r3, #8]
 804f0bc:	461a      	mov	r2, r3
 804f0be:	4b14      	ldr	r3, [pc, #80]	; (804f110 <tcp_oos_insert_segment+0x10c>)
 804f0c0:	681b      	ldr	r3, [r3, #0]
 804f0c2:	441a      	add	r2, r3
 804f0c4:	683b      	ldr	r3, [r7, #0]
 804f0c6:	68db      	ldr	r3, [r3, #12]
 804f0c8:	685b      	ldr	r3, [r3, #4]
 804f0ca:	1ad3      	subs	r3, r2, r3
    if (next &&
 804f0cc:	2b00      	cmp	r3, #0
 804f0ce:	dd12      	ble.n	804f0f6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 804f0d0:	683b      	ldr	r3, [r7, #0]
 804f0d2:	68db      	ldr	r3, [r3, #12]
 804f0d4:	685b      	ldr	r3, [r3, #4]
 804f0d6:	b29a      	uxth	r2, r3
 804f0d8:	4b0d      	ldr	r3, [pc, #52]	; (804f110 <tcp_oos_insert_segment+0x10c>)
 804f0da:	681b      	ldr	r3, [r3, #0]
 804f0dc:	b29b      	uxth	r3, r3
 804f0de:	1ad3      	subs	r3, r2, r3
 804f0e0:	b29a      	uxth	r2, r3
 804f0e2:	687b      	ldr	r3, [r7, #4]
 804f0e4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 804f0e6:	687b      	ldr	r3, [r7, #4]
 804f0e8:	685a      	ldr	r2, [r3, #4]
 804f0ea:	687b      	ldr	r3, [r7, #4]
 804f0ec:	891b      	ldrh	r3, [r3, #8]
 804f0ee:	4619      	mov	r1, r3
 804f0f0:	4610      	mov	r0, r2
 804f0f2:	f7fc fe19 	bl	804bd28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 804f0f6:	687b      	ldr	r3, [r7, #4]
 804f0f8:	683a      	ldr	r2, [r7, #0]
 804f0fa:	601a      	str	r2, [r3, #0]
}
 804f0fc:	bf00      	nop
 804f0fe:	3714      	adds	r7, #20
 804f100:	46bd      	mov	sp, r7
 804f102:	bd90      	pop	{r4, r7, pc}
 804f104:	08056c90 	.word	0x08056c90
 804f108:	08056f50 	.word	0x08056f50
 804f10c:	08056cdc 	.word	0x08056cdc
 804f110:	20023804 	.word	0x20023804

0804f114 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 804f114:	b5b0      	push	{r4, r5, r7, lr}
 804f116:	b086      	sub	sp, #24
 804f118:	af00      	add	r7, sp, #0
 804f11a:	60f8      	str	r0, [r7, #12]
 804f11c:	60b9      	str	r1, [r7, #8]
 804f11e:	607a      	str	r2, [r7, #4]
 804f120:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 804f122:	e03e      	b.n	804f1a2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 804f124:	68bb      	ldr	r3, [r7, #8]
 804f126:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 804f128:	68bb      	ldr	r3, [r7, #8]
 804f12a:	681b      	ldr	r3, [r3, #0]
 804f12c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 804f12e:	697b      	ldr	r3, [r7, #20]
 804f130:	685b      	ldr	r3, [r3, #4]
 804f132:	4618      	mov	r0, r3
 804f134:	f7fd f80c 	bl	804c150 <pbuf_clen>
 804f138:	4603      	mov	r3, r0
 804f13a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 804f13c:	68fb      	ldr	r3, [r7, #12]
 804f13e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 804f142:	8a7a      	ldrh	r2, [r7, #18]
 804f144:	429a      	cmp	r2, r3
 804f146:	d906      	bls.n	804f156 <tcp_free_acked_segments+0x42>
 804f148:	4b2a      	ldr	r3, [pc, #168]	; (804f1f4 <tcp_free_acked_segments+0xe0>)
 804f14a:	f240 4257 	movw	r2, #1111	; 0x457
 804f14e:	492a      	ldr	r1, [pc, #168]	; (804f1f8 <tcp_free_acked_segments+0xe4>)
 804f150:	482a      	ldr	r0, [pc, #168]	; (804f1fc <tcp_free_acked_segments+0xe8>)
 804f152:	f005 fb75 	bl	8054840 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 804f156:	68fb      	ldr	r3, [r7, #12]
 804f158:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 804f15c:	8a7b      	ldrh	r3, [r7, #18]
 804f15e:	1ad3      	subs	r3, r2, r3
 804f160:	b29a      	uxth	r2, r3
 804f162:	68fb      	ldr	r3, [r7, #12]
 804f164:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 804f168:	697b      	ldr	r3, [r7, #20]
 804f16a:	891a      	ldrh	r2, [r3, #8]
 804f16c:	4b24      	ldr	r3, [pc, #144]	; (804f200 <tcp_free_acked_segments+0xec>)
 804f16e:	881b      	ldrh	r3, [r3, #0]
 804f170:	4413      	add	r3, r2
 804f172:	b29a      	uxth	r2, r3
 804f174:	4b22      	ldr	r3, [pc, #136]	; (804f200 <tcp_free_acked_segments+0xec>)
 804f176:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 804f178:	6978      	ldr	r0, [r7, #20]
 804f17a:	f7fe f9da 	bl	804d532 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 804f17e:	68fb      	ldr	r3, [r7, #12]
 804f180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 804f184:	2b00      	cmp	r3, #0
 804f186:	d00c      	beq.n	804f1a2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 804f188:	68bb      	ldr	r3, [r7, #8]
 804f18a:	2b00      	cmp	r3, #0
 804f18c:	d109      	bne.n	804f1a2 <tcp_free_acked_segments+0x8e>
 804f18e:	683b      	ldr	r3, [r7, #0]
 804f190:	2b00      	cmp	r3, #0
 804f192:	d106      	bne.n	804f1a2 <tcp_free_acked_segments+0x8e>
 804f194:	4b17      	ldr	r3, [pc, #92]	; (804f1f4 <tcp_free_acked_segments+0xe0>)
 804f196:	f240 4261 	movw	r2, #1121	; 0x461
 804f19a:	491a      	ldr	r1, [pc, #104]	; (804f204 <tcp_free_acked_segments+0xf0>)
 804f19c:	4817      	ldr	r0, [pc, #92]	; (804f1fc <tcp_free_acked_segments+0xe8>)
 804f19e:	f005 fb4f 	bl	8054840 <iprintf>
  while (seg_list != NULL &&
 804f1a2:	68bb      	ldr	r3, [r7, #8]
 804f1a4:	2b00      	cmp	r3, #0
 804f1a6:	d020      	beq.n	804f1ea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 804f1a8:	68bb      	ldr	r3, [r7, #8]
 804f1aa:	68db      	ldr	r3, [r3, #12]
 804f1ac:	685b      	ldr	r3, [r3, #4]
 804f1ae:	4618      	mov	r0, r3
 804f1b0:	f7fb fb63 	bl	804a87a <lwip_htonl>
 804f1b4:	4604      	mov	r4, r0
 804f1b6:	68bb      	ldr	r3, [r7, #8]
 804f1b8:	891b      	ldrh	r3, [r3, #8]
 804f1ba:	461d      	mov	r5, r3
 804f1bc:	68bb      	ldr	r3, [r7, #8]
 804f1be:	68db      	ldr	r3, [r3, #12]
 804f1c0:	899b      	ldrh	r3, [r3, #12]
 804f1c2:	b29b      	uxth	r3, r3
 804f1c4:	4618      	mov	r0, r3
 804f1c6:	f7fb fb43 	bl	804a850 <lwip_htons>
 804f1ca:	4603      	mov	r3, r0
 804f1cc:	b2db      	uxtb	r3, r3
 804f1ce:	f003 0303 	and.w	r3, r3, #3
 804f1d2:	2b00      	cmp	r3, #0
 804f1d4:	d001      	beq.n	804f1da <tcp_free_acked_segments+0xc6>
 804f1d6:	2301      	movs	r3, #1
 804f1d8:	e000      	b.n	804f1dc <tcp_free_acked_segments+0xc8>
 804f1da:	2300      	movs	r3, #0
 804f1dc:	442b      	add	r3, r5
 804f1de:	18e2      	adds	r2, r4, r3
 804f1e0:	4b09      	ldr	r3, [pc, #36]	; (804f208 <tcp_free_acked_segments+0xf4>)
 804f1e2:	681b      	ldr	r3, [r3, #0]
 804f1e4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 804f1e6:	2b00      	cmp	r3, #0
 804f1e8:	dd9c      	ble.n	804f124 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 804f1ea:	68bb      	ldr	r3, [r7, #8]
}
 804f1ec:	4618      	mov	r0, r3
 804f1ee:	3718      	adds	r7, #24
 804f1f0:	46bd      	mov	sp, r7
 804f1f2:	bdb0      	pop	{r4, r5, r7, pc}
 804f1f4:	08056c90 	.word	0x08056c90
 804f1f8:	08056f78 	.word	0x08056f78
 804f1fc:	08056cdc 	.word	0x08056cdc
 804f200:	2002380c 	.word	0x2002380c
 804f204:	08056fa0 	.word	0x08056fa0
 804f208:	20023808 	.word	0x20023808

0804f20c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 804f20c:	b5b0      	push	{r4, r5, r7, lr}
 804f20e:	b094      	sub	sp, #80	; 0x50
 804f210:	af00      	add	r7, sp, #0
 804f212:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 804f214:	2300      	movs	r3, #0
 804f216:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 804f218:	687b      	ldr	r3, [r7, #4]
 804f21a:	2b00      	cmp	r3, #0
 804f21c:	d106      	bne.n	804f22c <tcp_receive+0x20>
 804f21e:	4b91      	ldr	r3, [pc, #580]	; (804f464 <tcp_receive+0x258>)
 804f220:	f240 427b 	movw	r2, #1147	; 0x47b
 804f224:	4990      	ldr	r1, [pc, #576]	; (804f468 <tcp_receive+0x25c>)
 804f226:	4891      	ldr	r0, [pc, #580]	; (804f46c <tcp_receive+0x260>)
 804f228:	f005 fb0a 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 804f22c:	687b      	ldr	r3, [r7, #4]
 804f22e:	7d1b      	ldrb	r3, [r3, #20]
 804f230:	2b03      	cmp	r3, #3
 804f232:	d806      	bhi.n	804f242 <tcp_receive+0x36>
 804f234:	4b8b      	ldr	r3, [pc, #556]	; (804f464 <tcp_receive+0x258>)
 804f236:	f240 427c 	movw	r2, #1148	; 0x47c
 804f23a:	498d      	ldr	r1, [pc, #564]	; (804f470 <tcp_receive+0x264>)
 804f23c:	488b      	ldr	r0, [pc, #556]	; (804f46c <tcp_receive+0x260>)
 804f23e:	f005 faff 	bl	8054840 <iprintf>

  if (flags & TCP_ACK) {
 804f242:	4b8c      	ldr	r3, [pc, #560]	; (804f474 <tcp_receive+0x268>)
 804f244:	781b      	ldrb	r3, [r3, #0]
 804f246:	f003 0310 	and.w	r3, r3, #16
 804f24a:	2b00      	cmp	r3, #0
 804f24c:	f000 8264 	beq.w	804f718 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 804f250:	687b      	ldr	r3, [r7, #4]
 804f252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 804f256:	461a      	mov	r2, r3
 804f258:	687b      	ldr	r3, [r7, #4]
 804f25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804f25c:	4413      	add	r3, r2
 804f25e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 804f260:	687b      	ldr	r3, [r7, #4]
 804f262:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 804f264:	4b84      	ldr	r3, [pc, #528]	; (804f478 <tcp_receive+0x26c>)
 804f266:	681b      	ldr	r3, [r3, #0]
 804f268:	1ad3      	subs	r3, r2, r3
 804f26a:	2b00      	cmp	r3, #0
 804f26c:	db1b      	blt.n	804f2a6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 804f26e:	687b      	ldr	r3, [r7, #4]
 804f270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 804f272:	4b81      	ldr	r3, [pc, #516]	; (804f478 <tcp_receive+0x26c>)
 804f274:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 804f276:	429a      	cmp	r2, r3
 804f278:	d106      	bne.n	804f288 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 804f27a:	687b      	ldr	r3, [r7, #4]
 804f27c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 804f27e:	4b7f      	ldr	r3, [pc, #508]	; (804f47c <tcp_receive+0x270>)
 804f280:	681b      	ldr	r3, [r3, #0]
 804f282:	1ad3      	subs	r3, r2, r3
 804f284:	2b00      	cmp	r3, #0
 804f286:	db0e      	blt.n	804f2a6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 804f288:	687b      	ldr	r3, [r7, #4]
 804f28a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 804f28c:	4b7b      	ldr	r3, [pc, #492]	; (804f47c <tcp_receive+0x270>)
 804f28e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 804f290:	429a      	cmp	r2, r3
 804f292:	d125      	bne.n	804f2e0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 804f294:	4b7a      	ldr	r3, [pc, #488]	; (804f480 <tcp_receive+0x274>)
 804f296:	681b      	ldr	r3, [r3, #0]
 804f298:	89db      	ldrh	r3, [r3, #14]
 804f29a:	b29a      	uxth	r2, r3
 804f29c:	687b      	ldr	r3, [r7, #4]
 804f29e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 804f2a2:	429a      	cmp	r2, r3
 804f2a4:	d91c      	bls.n	804f2e0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 804f2a6:	4b76      	ldr	r3, [pc, #472]	; (804f480 <tcp_receive+0x274>)
 804f2a8:	681b      	ldr	r3, [r3, #0]
 804f2aa:	89db      	ldrh	r3, [r3, #14]
 804f2ac:	b29a      	uxth	r2, r3
 804f2ae:	687b      	ldr	r3, [r7, #4]
 804f2b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 804f2b4:	687b      	ldr	r3, [r7, #4]
 804f2b6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 804f2ba:	687b      	ldr	r3, [r7, #4]
 804f2bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 804f2c0:	429a      	cmp	r2, r3
 804f2c2:	d205      	bcs.n	804f2d0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 804f2c4:	687b      	ldr	r3, [r7, #4]
 804f2c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 804f2ca:	687b      	ldr	r3, [r7, #4]
 804f2cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 804f2d0:	4b69      	ldr	r3, [pc, #420]	; (804f478 <tcp_receive+0x26c>)
 804f2d2:	681a      	ldr	r2, [r3, #0]
 804f2d4:	687b      	ldr	r3, [r7, #4]
 804f2d6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 804f2d8:	4b68      	ldr	r3, [pc, #416]	; (804f47c <tcp_receive+0x270>)
 804f2da:	681a      	ldr	r2, [r3, #0]
 804f2dc:	687b      	ldr	r3, [r7, #4]
 804f2de:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 804f2e0:	4b66      	ldr	r3, [pc, #408]	; (804f47c <tcp_receive+0x270>)
 804f2e2:	681a      	ldr	r2, [r3, #0]
 804f2e4:	687b      	ldr	r3, [r7, #4]
 804f2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804f2e8:	1ad3      	subs	r3, r2, r3
 804f2ea:	2b00      	cmp	r3, #0
 804f2ec:	dc58      	bgt.n	804f3a0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 804f2ee:	4b65      	ldr	r3, [pc, #404]	; (804f484 <tcp_receive+0x278>)
 804f2f0:	881b      	ldrh	r3, [r3, #0]
 804f2f2:	2b00      	cmp	r3, #0
 804f2f4:	d14b      	bne.n	804f38e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 804f2f6:	687b      	ldr	r3, [r7, #4]
 804f2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804f2fa:	687a      	ldr	r2, [r7, #4]
 804f2fc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 804f300:	4413      	add	r3, r2
 804f302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804f304:	429a      	cmp	r2, r3
 804f306:	d142      	bne.n	804f38e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 804f308:	687b      	ldr	r3, [r7, #4]
 804f30a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 804f30e:	2b00      	cmp	r3, #0
 804f310:	db3d      	blt.n	804f38e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 804f312:	687b      	ldr	r3, [r7, #4]
 804f314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804f316:	4b59      	ldr	r3, [pc, #356]	; (804f47c <tcp_receive+0x270>)
 804f318:	681b      	ldr	r3, [r3, #0]
 804f31a:	429a      	cmp	r2, r3
 804f31c:	d137      	bne.n	804f38e <tcp_receive+0x182>
              found_dupack = 1;
 804f31e:	2301      	movs	r3, #1
 804f320:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 804f322:	687b      	ldr	r3, [r7, #4]
 804f324:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 804f328:	2bff      	cmp	r3, #255	; 0xff
 804f32a:	d007      	beq.n	804f33c <tcp_receive+0x130>
                ++pcb->dupacks;
 804f32c:	687b      	ldr	r3, [r7, #4]
 804f32e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 804f332:	3301      	adds	r3, #1
 804f334:	b2da      	uxtb	r2, r3
 804f336:	687b      	ldr	r3, [r7, #4]
 804f338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 804f33c:	687b      	ldr	r3, [r7, #4]
 804f33e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 804f342:	2b03      	cmp	r3, #3
 804f344:	d91b      	bls.n	804f37e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 804f346:	687b      	ldr	r3, [r7, #4]
 804f348:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f34c:	687b      	ldr	r3, [r7, #4]
 804f34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804f350:	4413      	add	r3, r2
 804f352:	b29a      	uxth	r2, r3
 804f354:	687b      	ldr	r3, [r7, #4]
 804f356:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 804f35a:	429a      	cmp	r2, r3
 804f35c:	d30a      	bcc.n	804f374 <tcp_receive+0x168>
 804f35e:	687b      	ldr	r3, [r7, #4]
 804f360:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f364:	687b      	ldr	r3, [r7, #4]
 804f366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804f368:	4413      	add	r3, r2
 804f36a:	b29a      	uxth	r2, r3
 804f36c:	687b      	ldr	r3, [r7, #4]
 804f36e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 804f372:	e004      	b.n	804f37e <tcp_receive+0x172>
 804f374:	687b      	ldr	r3, [r7, #4]
 804f376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804f37a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 804f37e:	687b      	ldr	r3, [r7, #4]
 804f380:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 804f384:	2b02      	cmp	r3, #2
 804f386:	d902      	bls.n	804f38e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 804f388:	6878      	ldr	r0, [r7, #4]
 804f38a:	f001 feed 	bl	8051168 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 804f38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804f390:	2b00      	cmp	r3, #0
 804f392:	f040 8161 	bne.w	804f658 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 804f396:	687b      	ldr	r3, [r7, #4]
 804f398:	2200      	movs	r2, #0
 804f39a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 804f39e:	e15b      	b.n	804f658 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 804f3a0:	4b36      	ldr	r3, [pc, #216]	; (804f47c <tcp_receive+0x270>)
 804f3a2:	681a      	ldr	r2, [r3, #0]
 804f3a4:	687b      	ldr	r3, [r7, #4]
 804f3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804f3a8:	1ad3      	subs	r3, r2, r3
 804f3aa:	3b01      	subs	r3, #1
 804f3ac:	2b00      	cmp	r3, #0
 804f3ae:	f2c0 814e 	blt.w	804f64e <tcp_receive+0x442>
 804f3b2:	4b32      	ldr	r3, [pc, #200]	; (804f47c <tcp_receive+0x270>)
 804f3b4:	681a      	ldr	r2, [r3, #0]
 804f3b6:	687b      	ldr	r3, [r7, #4]
 804f3b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804f3ba:	1ad3      	subs	r3, r2, r3
 804f3bc:	2b00      	cmp	r3, #0
 804f3be:	f300 8146 	bgt.w	804f64e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 804f3c2:	687b      	ldr	r3, [r7, #4]
 804f3c4:	8b5b      	ldrh	r3, [r3, #26]
 804f3c6:	f003 0304 	and.w	r3, r3, #4
 804f3ca:	2b00      	cmp	r3, #0
 804f3cc:	d010      	beq.n	804f3f0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 804f3ce:	687b      	ldr	r3, [r7, #4]
 804f3d0:	8b5b      	ldrh	r3, [r3, #26]
 804f3d2:	f023 0304 	bic.w	r3, r3, #4
 804f3d6:	b29a      	uxth	r2, r3
 804f3d8:	687b      	ldr	r3, [r7, #4]
 804f3da:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 804f3dc:	687b      	ldr	r3, [r7, #4]
 804f3de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 804f3e2:	687b      	ldr	r3, [r7, #4]
 804f3e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 804f3e8:	687b      	ldr	r3, [r7, #4]
 804f3ea:	2200      	movs	r2, #0
 804f3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 804f3f0:	687b      	ldr	r3, [r7, #4]
 804f3f2:	2200      	movs	r2, #0
 804f3f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 804f3f8:	687b      	ldr	r3, [r7, #4]
 804f3fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 804f3fe:	10db      	asrs	r3, r3, #3
 804f400:	b21b      	sxth	r3, r3
 804f402:	b29a      	uxth	r2, r3
 804f404:	687b      	ldr	r3, [r7, #4]
 804f406:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 804f40a:	b29b      	uxth	r3, r3
 804f40c:	4413      	add	r3, r2
 804f40e:	b29b      	uxth	r3, r3
 804f410:	b21a      	sxth	r2, r3
 804f412:	687b      	ldr	r3, [r7, #4]
 804f414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 804f418:	4b18      	ldr	r3, [pc, #96]	; (804f47c <tcp_receive+0x270>)
 804f41a:	681b      	ldr	r3, [r3, #0]
 804f41c:	b29a      	uxth	r2, r3
 804f41e:	687b      	ldr	r3, [r7, #4]
 804f420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804f422:	b29b      	uxth	r3, r3
 804f424:	1ad3      	subs	r3, r2, r3
 804f426:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 804f428:	687b      	ldr	r3, [r7, #4]
 804f42a:	2200      	movs	r2, #0
 804f42c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 804f430:	4b12      	ldr	r3, [pc, #72]	; (804f47c <tcp_receive+0x270>)
 804f432:	681a      	ldr	r2, [r3, #0]
 804f434:	687b      	ldr	r3, [r7, #4]
 804f436:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 804f438:	687b      	ldr	r3, [r7, #4]
 804f43a:	7d1b      	ldrb	r3, [r3, #20]
 804f43c:	2b03      	cmp	r3, #3
 804f43e:	f240 8097 	bls.w	804f570 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 804f442:	687b      	ldr	r3, [r7, #4]
 804f444:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f448:	687b      	ldr	r3, [r7, #4]
 804f44a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 804f44e:	429a      	cmp	r2, r3
 804f450:	d245      	bcs.n	804f4de <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 804f452:	687b      	ldr	r3, [r7, #4]
 804f454:	8b5b      	ldrh	r3, [r3, #26]
 804f456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804f45a:	2b00      	cmp	r3, #0
 804f45c:	d014      	beq.n	804f488 <tcp_receive+0x27c>
 804f45e:	2301      	movs	r3, #1
 804f460:	e013      	b.n	804f48a <tcp_receive+0x27e>
 804f462:	bf00      	nop
 804f464:	08056c90 	.word	0x08056c90
 804f468:	08056fc0 	.word	0x08056fc0
 804f46c:	08056cdc 	.word	0x08056cdc
 804f470:	08056fdc 	.word	0x08056fdc
 804f474:	20023810 	.word	0x20023810
 804f478:	20023804 	.word	0x20023804
 804f47c:	20023808 	.word	0x20023808
 804f480:	200237f4 	.word	0x200237f4
 804f484:	2002380e 	.word	0x2002380e
 804f488:	2302      	movs	r3, #2
 804f48a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 804f48e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 804f492:	b29a      	uxth	r2, r3
 804f494:	687b      	ldr	r3, [r7, #4]
 804f496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804f498:	fb12 f303 	smulbb	r3, r2, r3
 804f49c:	b29b      	uxth	r3, r3
 804f49e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 804f4a0:	4293      	cmp	r3, r2
 804f4a2:	bf28      	it	cs
 804f4a4:	4613      	movcs	r3, r2
 804f4a6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 804f4a8:	687b      	ldr	r3, [r7, #4]
 804f4aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f4ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 804f4b0:	4413      	add	r3, r2
 804f4b2:	b29a      	uxth	r2, r3
 804f4b4:	687b      	ldr	r3, [r7, #4]
 804f4b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 804f4ba:	429a      	cmp	r2, r3
 804f4bc:	d309      	bcc.n	804f4d2 <tcp_receive+0x2c6>
 804f4be:	687b      	ldr	r3, [r7, #4]
 804f4c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f4c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 804f4c6:	4413      	add	r3, r2
 804f4c8:	b29a      	uxth	r2, r3
 804f4ca:	687b      	ldr	r3, [r7, #4]
 804f4cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 804f4d0:	e04e      	b.n	804f570 <tcp_receive+0x364>
 804f4d2:	687b      	ldr	r3, [r7, #4]
 804f4d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804f4d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 804f4dc:	e048      	b.n	804f570 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 804f4de:	687b      	ldr	r3, [r7, #4]
 804f4e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 804f4e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 804f4e6:	4413      	add	r3, r2
 804f4e8:	b29a      	uxth	r2, r3
 804f4ea:	687b      	ldr	r3, [r7, #4]
 804f4ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 804f4f0:	429a      	cmp	r2, r3
 804f4f2:	d309      	bcc.n	804f508 <tcp_receive+0x2fc>
 804f4f4:	687b      	ldr	r3, [r7, #4]
 804f4f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 804f4fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 804f4fc:	4413      	add	r3, r2
 804f4fe:	b29a      	uxth	r2, r3
 804f500:	687b      	ldr	r3, [r7, #4]
 804f502:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 804f506:	e004      	b.n	804f512 <tcp_receive+0x306>
 804f508:	687b      	ldr	r3, [r7, #4]
 804f50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804f50e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 804f512:	687b      	ldr	r3, [r7, #4]
 804f514:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 804f518:	687b      	ldr	r3, [r7, #4]
 804f51a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 804f51e:	429a      	cmp	r2, r3
 804f520:	d326      	bcc.n	804f570 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 804f522:	687b      	ldr	r3, [r7, #4]
 804f524:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 804f528:	687b      	ldr	r3, [r7, #4]
 804f52a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 804f52e:	1ad3      	subs	r3, r2, r3
 804f530:	b29a      	uxth	r2, r3
 804f532:	687b      	ldr	r3, [r7, #4]
 804f534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 804f538:	687b      	ldr	r3, [r7, #4]
 804f53a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f53e:	687b      	ldr	r3, [r7, #4]
 804f540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804f542:	4413      	add	r3, r2
 804f544:	b29a      	uxth	r2, r3
 804f546:	687b      	ldr	r3, [r7, #4]
 804f548:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 804f54c:	429a      	cmp	r2, r3
 804f54e:	d30a      	bcc.n	804f566 <tcp_receive+0x35a>
 804f550:	687b      	ldr	r3, [r7, #4]
 804f552:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 804f556:	687b      	ldr	r3, [r7, #4]
 804f558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 804f55a:	4413      	add	r3, r2
 804f55c:	b29a      	uxth	r2, r3
 804f55e:	687b      	ldr	r3, [r7, #4]
 804f560:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 804f564:	e004      	b.n	804f570 <tcp_receive+0x364>
 804f566:	687b      	ldr	r3, [r7, #4]
 804f568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804f56c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 804f570:	687b      	ldr	r3, [r7, #4]
 804f572:	6f19      	ldr	r1, [r3, #112]	; 0x70
 804f574:	687b      	ldr	r3, [r7, #4]
 804f576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804f578:	4a98      	ldr	r2, [pc, #608]	; (804f7dc <tcp_receive+0x5d0>)
 804f57a:	6878      	ldr	r0, [r7, #4]
 804f57c:	f7ff fdca 	bl	804f114 <tcp_free_acked_segments>
 804f580:	4602      	mov	r2, r0
 804f582:	687b      	ldr	r3, [r7, #4]
 804f584:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 804f586:	687b      	ldr	r3, [r7, #4]
 804f588:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 804f58a:	687b      	ldr	r3, [r7, #4]
 804f58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804f58e:	4a94      	ldr	r2, [pc, #592]	; (804f7e0 <tcp_receive+0x5d4>)
 804f590:	6878      	ldr	r0, [r7, #4]
 804f592:	f7ff fdbf 	bl	804f114 <tcp_free_acked_segments>
 804f596:	4602      	mov	r2, r0
 804f598:	687b      	ldr	r3, [r7, #4]
 804f59a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 804f59c:	687b      	ldr	r3, [r7, #4]
 804f59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804f5a0:	2b00      	cmp	r3, #0
 804f5a2:	d104      	bne.n	804f5ae <tcp_receive+0x3a2>
        pcb->rtime = -1;
 804f5a4:	687b      	ldr	r3, [r7, #4]
 804f5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804f5aa:	861a      	strh	r2, [r3, #48]	; 0x30
 804f5ac:	e002      	b.n	804f5b4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 804f5ae:	687b      	ldr	r3, [r7, #4]
 804f5b0:	2200      	movs	r2, #0
 804f5b2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 804f5b4:	687b      	ldr	r3, [r7, #4]
 804f5b6:	2200      	movs	r2, #0
 804f5b8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 804f5ba:	687b      	ldr	r3, [r7, #4]
 804f5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804f5be:	2b00      	cmp	r3, #0
 804f5c0:	d103      	bne.n	804f5ca <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 804f5c2:	687b      	ldr	r3, [r7, #4]
 804f5c4:	2200      	movs	r2, #0
 804f5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 804f5ca:	687b      	ldr	r3, [r7, #4]
 804f5cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 804f5d0:	4b84      	ldr	r3, [pc, #528]	; (804f7e4 <tcp_receive+0x5d8>)
 804f5d2:	881b      	ldrh	r3, [r3, #0]
 804f5d4:	4413      	add	r3, r2
 804f5d6:	b29a      	uxth	r2, r3
 804f5d8:	687b      	ldr	r3, [r7, #4]
 804f5da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 804f5de:	687b      	ldr	r3, [r7, #4]
 804f5e0:	8b5b      	ldrh	r3, [r3, #26]
 804f5e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804f5e6:	2b00      	cmp	r3, #0
 804f5e8:	d035      	beq.n	804f656 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 804f5ea:	687b      	ldr	r3, [r7, #4]
 804f5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804f5ee:	2b00      	cmp	r3, #0
 804f5f0:	d118      	bne.n	804f624 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 804f5f2:	687b      	ldr	r3, [r7, #4]
 804f5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804f5f6:	2b00      	cmp	r3, #0
 804f5f8:	d00c      	beq.n	804f614 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 804f5fa:	687b      	ldr	r3, [r7, #4]
 804f5fc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 804f5fe:	687b      	ldr	r3, [r7, #4]
 804f600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804f602:	68db      	ldr	r3, [r3, #12]
 804f604:	685b      	ldr	r3, [r3, #4]
 804f606:	4618      	mov	r0, r3
 804f608:	f7fb f937 	bl	804a87a <lwip_htonl>
 804f60c:	4603      	mov	r3, r0
 804f60e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 804f610:	2b00      	cmp	r3, #0
 804f612:	dc20      	bgt.n	804f656 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 804f614:	687b      	ldr	r3, [r7, #4]
 804f616:	8b5b      	ldrh	r3, [r3, #26]
 804f618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804f61c:	b29a      	uxth	r2, r3
 804f61e:	687b      	ldr	r3, [r7, #4]
 804f620:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 804f622:	e018      	b.n	804f656 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 804f624:	687b      	ldr	r3, [r7, #4]
 804f626:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 804f628:	687b      	ldr	r3, [r7, #4]
 804f62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804f62c:	68db      	ldr	r3, [r3, #12]
 804f62e:	685b      	ldr	r3, [r3, #4]
 804f630:	4618      	mov	r0, r3
 804f632:	f7fb f922 	bl	804a87a <lwip_htonl>
 804f636:	4603      	mov	r3, r0
 804f638:	1ae3      	subs	r3, r4, r3
 804f63a:	2b00      	cmp	r3, #0
 804f63c:	dc0b      	bgt.n	804f656 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 804f63e:	687b      	ldr	r3, [r7, #4]
 804f640:	8b5b      	ldrh	r3, [r3, #26]
 804f642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804f646:	b29a      	uxth	r2, r3
 804f648:	687b      	ldr	r3, [r7, #4]
 804f64a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 804f64c:	e003      	b.n	804f656 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 804f64e:	6878      	ldr	r0, [r7, #4]
 804f650:	f001 ff76 	bl	8051540 <tcp_send_empty_ack>
 804f654:	e000      	b.n	804f658 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 804f656:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 804f658:	687b      	ldr	r3, [r7, #4]
 804f65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804f65c:	2b00      	cmp	r3, #0
 804f65e:	d05b      	beq.n	804f718 <tcp_receive+0x50c>
 804f660:	687b      	ldr	r3, [r7, #4]
 804f662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804f664:	4b60      	ldr	r3, [pc, #384]	; (804f7e8 <tcp_receive+0x5dc>)
 804f666:	681b      	ldr	r3, [r3, #0]
 804f668:	1ad3      	subs	r3, r2, r3
 804f66a:	2b00      	cmp	r3, #0
 804f66c:	da54      	bge.n	804f718 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 804f66e:	4b5f      	ldr	r3, [pc, #380]	; (804f7ec <tcp_receive+0x5e0>)
 804f670:	681b      	ldr	r3, [r3, #0]
 804f672:	b29a      	uxth	r2, r3
 804f674:	687b      	ldr	r3, [r7, #4]
 804f676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804f678:	b29b      	uxth	r3, r3
 804f67a:	1ad3      	subs	r3, r2, r3
 804f67c:	b29b      	uxth	r3, r3
 804f67e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 804f682:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 804f686:	687b      	ldr	r3, [r7, #4]
 804f688:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 804f68c:	10db      	asrs	r3, r3, #3
 804f68e:	b21b      	sxth	r3, r3
 804f690:	b29b      	uxth	r3, r3
 804f692:	1ad3      	subs	r3, r2, r3
 804f694:	b29b      	uxth	r3, r3
 804f696:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 804f69a:	687b      	ldr	r3, [r7, #4]
 804f69c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 804f6a0:	b29a      	uxth	r2, r3
 804f6a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 804f6a6:	4413      	add	r3, r2
 804f6a8:	b29b      	uxth	r3, r3
 804f6aa:	b21a      	sxth	r2, r3
 804f6ac:	687b      	ldr	r3, [r7, #4]
 804f6ae:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 804f6b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 804f6b4:	2b00      	cmp	r3, #0
 804f6b6:	da05      	bge.n	804f6c4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 804f6b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 804f6bc:	425b      	negs	r3, r3
 804f6be:	b29b      	uxth	r3, r3
 804f6c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 804f6c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 804f6c8:	687b      	ldr	r3, [r7, #4]
 804f6ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 804f6ce:	109b      	asrs	r3, r3, #2
 804f6d0:	b21b      	sxth	r3, r3
 804f6d2:	b29b      	uxth	r3, r3
 804f6d4:	1ad3      	subs	r3, r2, r3
 804f6d6:	b29b      	uxth	r3, r3
 804f6d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 804f6dc:	687b      	ldr	r3, [r7, #4]
 804f6de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 804f6e2:	b29a      	uxth	r2, r3
 804f6e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 804f6e8:	4413      	add	r3, r2
 804f6ea:	b29b      	uxth	r3, r3
 804f6ec:	b21a      	sxth	r2, r3
 804f6ee:	687b      	ldr	r3, [r7, #4]
 804f6f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 804f6f2:	687b      	ldr	r3, [r7, #4]
 804f6f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 804f6f8:	10db      	asrs	r3, r3, #3
 804f6fa:	b21b      	sxth	r3, r3
 804f6fc:	b29a      	uxth	r2, r3
 804f6fe:	687b      	ldr	r3, [r7, #4]
 804f700:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 804f704:	b29b      	uxth	r3, r3
 804f706:	4413      	add	r3, r2
 804f708:	b29b      	uxth	r3, r3
 804f70a:	b21a      	sxth	r2, r3
 804f70c:	687b      	ldr	r3, [r7, #4]
 804f70e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 804f712:	687b      	ldr	r3, [r7, #4]
 804f714:	2200      	movs	r2, #0
 804f716:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 804f718:	4b35      	ldr	r3, [pc, #212]	; (804f7f0 <tcp_receive+0x5e4>)
 804f71a:	881b      	ldrh	r3, [r3, #0]
 804f71c:	2b00      	cmp	r3, #0
 804f71e:	f000 84e2 	beq.w	80500e6 <tcp_receive+0xeda>
 804f722:	687b      	ldr	r3, [r7, #4]
 804f724:	7d1b      	ldrb	r3, [r3, #20]
 804f726:	2b06      	cmp	r3, #6
 804f728:	f200 84dd 	bhi.w	80500e6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 804f72c:	687b      	ldr	r3, [r7, #4]
 804f72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804f730:	4b30      	ldr	r3, [pc, #192]	; (804f7f4 <tcp_receive+0x5e8>)
 804f732:	681b      	ldr	r3, [r3, #0]
 804f734:	1ad3      	subs	r3, r2, r3
 804f736:	3b01      	subs	r3, #1
 804f738:	2b00      	cmp	r3, #0
 804f73a:	f2c0 808f 	blt.w	804f85c <tcp_receive+0x650>
 804f73e:	687b      	ldr	r3, [r7, #4]
 804f740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804f742:	4b2b      	ldr	r3, [pc, #172]	; (804f7f0 <tcp_receive+0x5e4>)
 804f744:	881b      	ldrh	r3, [r3, #0]
 804f746:	4619      	mov	r1, r3
 804f748:	4b2a      	ldr	r3, [pc, #168]	; (804f7f4 <tcp_receive+0x5e8>)
 804f74a:	681b      	ldr	r3, [r3, #0]
 804f74c:	440b      	add	r3, r1
 804f74e:	1ad3      	subs	r3, r2, r3
 804f750:	3301      	adds	r3, #1
 804f752:	2b00      	cmp	r3, #0
 804f754:	f300 8082 	bgt.w	804f85c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 804f758:	4b27      	ldr	r3, [pc, #156]	; (804f7f8 <tcp_receive+0x5ec>)
 804f75a:	685b      	ldr	r3, [r3, #4]
 804f75c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 804f75e:	687b      	ldr	r3, [r7, #4]
 804f760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804f762:	4b24      	ldr	r3, [pc, #144]	; (804f7f4 <tcp_receive+0x5e8>)
 804f764:	681b      	ldr	r3, [r3, #0]
 804f766:	1ad3      	subs	r3, r2, r3
 804f768:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 804f76a:	4b23      	ldr	r3, [pc, #140]	; (804f7f8 <tcp_receive+0x5ec>)
 804f76c:	685b      	ldr	r3, [r3, #4]
 804f76e:	2b00      	cmp	r3, #0
 804f770:	d106      	bne.n	804f780 <tcp_receive+0x574>
 804f772:	4b22      	ldr	r3, [pc, #136]	; (804f7fc <tcp_receive+0x5f0>)
 804f774:	f240 5294 	movw	r2, #1428	; 0x594
 804f778:	4921      	ldr	r1, [pc, #132]	; (804f800 <tcp_receive+0x5f4>)
 804f77a:	4822      	ldr	r0, [pc, #136]	; (804f804 <tcp_receive+0x5f8>)
 804f77c:	f005 f860 	bl	8054840 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 804f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804f782:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 804f786:	4293      	cmp	r3, r2
 804f788:	d906      	bls.n	804f798 <tcp_receive+0x58c>
 804f78a:	4b1c      	ldr	r3, [pc, #112]	; (804f7fc <tcp_receive+0x5f0>)
 804f78c:	f240 5295 	movw	r2, #1429	; 0x595
 804f790:	491d      	ldr	r1, [pc, #116]	; (804f808 <tcp_receive+0x5fc>)
 804f792:	481c      	ldr	r0, [pc, #112]	; (804f804 <tcp_receive+0x5f8>)
 804f794:	f005 f854 	bl	8054840 <iprintf>
      off = (u16_t)off32;
 804f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804f79a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 804f79e:	4b16      	ldr	r3, [pc, #88]	; (804f7f8 <tcp_receive+0x5ec>)
 804f7a0:	685b      	ldr	r3, [r3, #4]
 804f7a2:	891b      	ldrh	r3, [r3, #8]
 804f7a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 804f7a8:	429a      	cmp	r2, r3
 804f7aa:	d906      	bls.n	804f7ba <tcp_receive+0x5ae>
 804f7ac:	4b13      	ldr	r3, [pc, #76]	; (804f7fc <tcp_receive+0x5f0>)
 804f7ae:	f240 5297 	movw	r2, #1431	; 0x597
 804f7b2:	4916      	ldr	r1, [pc, #88]	; (804f80c <tcp_receive+0x600>)
 804f7b4:	4813      	ldr	r0, [pc, #76]	; (804f804 <tcp_receive+0x5f8>)
 804f7b6:	f005 f843 	bl	8054840 <iprintf>
      inseg.len -= off;
 804f7ba:	4b0f      	ldr	r3, [pc, #60]	; (804f7f8 <tcp_receive+0x5ec>)
 804f7bc:	891a      	ldrh	r2, [r3, #8]
 804f7be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 804f7c2:	1ad3      	subs	r3, r2, r3
 804f7c4:	b29a      	uxth	r2, r3
 804f7c6:	4b0c      	ldr	r3, [pc, #48]	; (804f7f8 <tcp_receive+0x5ec>)
 804f7c8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 804f7ca:	4b0b      	ldr	r3, [pc, #44]	; (804f7f8 <tcp_receive+0x5ec>)
 804f7cc:	685b      	ldr	r3, [r3, #4]
 804f7ce:	891a      	ldrh	r2, [r3, #8]
 804f7d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 804f7d4:	1ad3      	subs	r3, r2, r3
 804f7d6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 804f7d8:	e02a      	b.n	804f830 <tcp_receive+0x624>
 804f7da:	bf00      	nop
 804f7dc:	08056ff8 	.word	0x08056ff8
 804f7e0:	08057000 	.word	0x08057000
 804f7e4:	2002380c 	.word	0x2002380c
 804f7e8:	20023808 	.word	0x20023808
 804f7ec:	200237cc 	.word	0x200237cc
 804f7f0:	2002380e 	.word	0x2002380e
 804f7f4:	20023804 	.word	0x20023804
 804f7f8:	200237e4 	.word	0x200237e4
 804f7fc:	08056c90 	.word	0x08056c90
 804f800:	08057008 	.word	0x08057008
 804f804:	08056cdc 	.word	0x08056cdc
 804f808:	08057018 	.word	0x08057018
 804f80c:	08057028 	.word	0x08057028
        off -= p->len;
 804f810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804f812:	895b      	ldrh	r3, [r3, #10]
 804f814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 804f818:	1ad3      	subs	r3, r2, r3
 804f81a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 804f81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804f820:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 804f822:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 804f824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804f826:	2200      	movs	r2, #0
 804f828:	815a      	strh	r2, [r3, #10]
        p = p->next;
 804f82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804f82c:	681b      	ldr	r3, [r3, #0]
 804f82e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 804f830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804f832:	895b      	ldrh	r3, [r3, #10]
 804f834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 804f838:	429a      	cmp	r2, r3
 804f83a:	d8e9      	bhi.n	804f810 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 804f83c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 804f840:	4619      	mov	r1, r3
 804f842:	6c78      	ldr	r0, [r7, #68]	; 0x44
 804f844:	f7fc fb70 	bl	804bf28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 804f848:	687b      	ldr	r3, [r7, #4]
 804f84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f84c:	4a91      	ldr	r2, [pc, #580]	; (804fa94 <tcp_receive+0x888>)
 804f84e:	6013      	str	r3, [r2, #0]
 804f850:	4b91      	ldr	r3, [pc, #580]	; (804fa98 <tcp_receive+0x88c>)
 804f852:	68db      	ldr	r3, [r3, #12]
 804f854:	4a8f      	ldr	r2, [pc, #572]	; (804fa94 <tcp_receive+0x888>)
 804f856:	6812      	ldr	r2, [r2, #0]
 804f858:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 804f85a:	e00d      	b.n	804f878 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 804f85c:	4b8d      	ldr	r3, [pc, #564]	; (804fa94 <tcp_receive+0x888>)
 804f85e:	681a      	ldr	r2, [r3, #0]
 804f860:	687b      	ldr	r3, [r7, #4]
 804f862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f864:	1ad3      	subs	r3, r2, r3
 804f866:	2b00      	cmp	r3, #0
 804f868:	da06      	bge.n	804f878 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 804f86a:	687b      	ldr	r3, [r7, #4]
 804f86c:	8b5b      	ldrh	r3, [r3, #26]
 804f86e:	f043 0302 	orr.w	r3, r3, #2
 804f872:	b29a      	uxth	r2, r3
 804f874:	687b      	ldr	r3, [r7, #4]
 804f876:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 804f878:	4b86      	ldr	r3, [pc, #536]	; (804fa94 <tcp_receive+0x888>)
 804f87a:	681a      	ldr	r2, [r3, #0]
 804f87c:	687b      	ldr	r3, [r7, #4]
 804f87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f880:	1ad3      	subs	r3, r2, r3
 804f882:	2b00      	cmp	r3, #0
 804f884:	f2c0 842a 	blt.w	80500dc <tcp_receive+0xed0>
 804f888:	4b82      	ldr	r3, [pc, #520]	; (804fa94 <tcp_receive+0x888>)
 804f88a:	681a      	ldr	r2, [r3, #0]
 804f88c:	687b      	ldr	r3, [r7, #4]
 804f88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f890:	6879      	ldr	r1, [r7, #4]
 804f892:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 804f894:	440b      	add	r3, r1
 804f896:	1ad3      	subs	r3, r2, r3
 804f898:	3301      	adds	r3, #1
 804f89a:	2b00      	cmp	r3, #0
 804f89c:	f300 841e 	bgt.w	80500dc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 804f8a0:	687b      	ldr	r3, [r7, #4]
 804f8a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804f8a4:	4b7b      	ldr	r3, [pc, #492]	; (804fa94 <tcp_receive+0x888>)
 804f8a6:	681b      	ldr	r3, [r3, #0]
 804f8a8:	429a      	cmp	r2, r3
 804f8aa:	f040 829a 	bne.w	804fde2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 804f8ae:	4b7a      	ldr	r3, [pc, #488]	; (804fa98 <tcp_receive+0x88c>)
 804f8b0:	891c      	ldrh	r4, [r3, #8]
 804f8b2:	4b79      	ldr	r3, [pc, #484]	; (804fa98 <tcp_receive+0x88c>)
 804f8b4:	68db      	ldr	r3, [r3, #12]
 804f8b6:	899b      	ldrh	r3, [r3, #12]
 804f8b8:	b29b      	uxth	r3, r3
 804f8ba:	4618      	mov	r0, r3
 804f8bc:	f7fa ffc8 	bl	804a850 <lwip_htons>
 804f8c0:	4603      	mov	r3, r0
 804f8c2:	b2db      	uxtb	r3, r3
 804f8c4:	f003 0303 	and.w	r3, r3, #3
 804f8c8:	2b00      	cmp	r3, #0
 804f8ca:	d001      	beq.n	804f8d0 <tcp_receive+0x6c4>
 804f8cc:	2301      	movs	r3, #1
 804f8ce:	e000      	b.n	804f8d2 <tcp_receive+0x6c6>
 804f8d0:	2300      	movs	r3, #0
 804f8d2:	4423      	add	r3, r4
 804f8d4:	b29a      	uxth	r2, r3
 804f8d6:	4b71      	ldr	r3, [pc, #452]	; (804fa9c <tcp_receive+0x890>)
 804f8d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 804f8da:	687b      	ldr	r3, [r7, #4]
 804f8dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804f8de:	4b6f      	ldr	r3, [pc, #444]	; (804fa9c <tcp_receive+0x890>)
 804f8e0:	881b      	ldrh	r3, [r3, #0]
 804f8e2:	429a      	cmp	r2, r3
 804f8e4:	d275      	bcs.n	804f9d2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 804f8e6:	4b6c      	ldr	r3, [pc, #432]	; (804fa98 <tcp_receive+0x88c>)
 804f8e8:	68db      	ldr	r3, [r3, #12]
 804f8ea:	899b      	ldrh	r3, [r3, #12]
 804f8ec:	b29b      	uxth	r3, r3
 804f8ee:	4618      	mov	r0, r3
 804f8f0:	f7fa ffae 	bl	804a850 <lwip_htons>
 804f8f4:	4603      	mov	r3, r0
 804f8f6:	b2db      	uxtb	r3, r3
 804f8f8:	f003 0301 	and.w	r3, r3, #1
 804f8fc:	2b00      	cmp	r3, #0
 804f8fe:	d01f      	beq.n	804f940 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 804f900:	4b65      	ldr	r3, [pc, #404]	; (804fa98 <tcp_receive+0x88c>)
 804f902:	68db      	ldr	r3, [r3, #12]
 804f904:	899b      	ldrh	r3, [r3, #12]
 804f906:	b29b      	uxth	r3, r3
 804f908:	b21b      	sxth	r3, r3
 804f90a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 804f90e:	b21c      	sxth	r4, r3
 804f910:	4b61      	ldr	r3, [pc, #388]	; (804fa98 <tcp_receive+0x88c>)
 804f912:	68db      	ldr	r3, [r3, #12]
 804f914:	899b      	ldrh	r3, [r3, #12]
 804f916:	b29b      	uxth	r3, r3
 804f918:	4618      	mov	r0, r3
 804f91a:	f7fa ff99 	bl	804a850 <lwip_htons>
 804f91e:	4603      	mov	r3, r0
 804f920:	b2db      	uxtb	r3, r3
 804f922:	b29b      	uxth	r3, r3
 804f924:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 804f928:	b29b      	uxth	r3, r3
 804f92a:	4618      	mov	r0, r3
 804f92c:	f7fa ff90 	bl	804a850 <lwip_htons>
 804f930:	4603      	mov	r3, r0
 804f932:	b21b      	sxth	r3, r3
 804f934:	4323      	orrs	r3, r4
 804f936:	b21a      	sxth	r2, r3
 804f938:	4b57      	ldr	r3, [pc, #348]	; (804fa98 <tcp_receive+0x88c>)
 804f93a:	68db      	ldr	r3, [r3, #12]
 804f93c:	b292      	uxth	r2, r2
 804f93e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 804f940:	687b      	ldr	r3, [r7, #4]
 804f942:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804f944:	4b54      	ldr	r3, [pc, #336]	; (804fa98 <tcp_receive+0x88c>)
 804f946:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 804f948:	4b53      	ldr	r3, [pc, #332]	; (804fa98 <tcp_receive+0x88c>)
 804f94a:	68db      	ldr	r3, [r3, #12]
 804f94c:	899b      	ldrh	r3, [r3, #12]
 804f94e:	b29b      	uxth	r3, r3
 804f950:	4618      	mov	r0, r3
 804f952:	f7fa ff7d 	bl	804a850 <lwip_htons>
 804f956:	4603      	mov	r3, r0
 804f958:	b2db      	uxtb	r3, r3
 804f95a:	f003 0302 	and.w	r3, r3, #2
 804f95e:	2b00      	cmp	r3, #0
 804f960:	d005      	beq.n	804f96e <tcp_receive+0x762>
            inseg.len -= 1;
 804f962:	4b4d      	ldr	r3, [pc, #308]	; (804fa98 <tcp_receive+0x88c>)
 804f964:	891b      	ldrh	r3, [r3, #8]
 804f966:	3b01      	subs	r3, #1
 804f968:	b29a      	uxth	r2, r3
 804f96a:	4b4b      	ldr	r3, [pc, #300]	; (804fa98 <tcp_receive+0x88c>)
 804f96c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 804f96e:	4b4a      	ldr	r3, [pc, #296]	; (804fa98 <tcp_receive+0x88c>)
 804f970:	685b      	ldr	r3, [r3, #4]
 804f972:	4a49      	ldr	r2, [pc, #292]	; (804fa98 <tcp_receive+0x88c>)
 804f974:	8912      	ldrh	r2, [r2, #8]
 804f976:	4611      	mov	r1, r2
 804f978:	4618      	mov	r0, r3
 804f97a:	f7fc f9d5 	bl	804bd28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 804f97e:	4b46      	ldr	r3, [pc, #280]	; (804fa98 <tcp_receive+0x88c>)
 804f980:	891c      	ldrh	r4, [r3, #8]
 804f982:	4b45      	ldr	r3, [pc, #276]	; (804fa98 <tcp_receive+0x88c>)
 804f984:	68db      	ldr	r3, [r3, #12]
 804f986:	899b      	ldrh	r3, [r3, #12]
 804f988:	b29b      	uxth	r3, r3
 804f98a:	4618      	mov	r0, r3
 804f98c:	f7fa ff60 	bl	804a850 <lwip_htons>
 804f990:	4603      	mov	r3, r0
 804f992:	b2db      	uxtb	r3, r3
 804f994:	f003 0303 	and.w	r3, r3, #3
 804f998:	2b00      	cmp	r3, #0
 804f99a:	d001      	beq.n	804f9a0 <tcp_receive+0x794>
 804f99c:	2301      	movs	r3, #1
 804f99e:	e000      	b.n	804f9a2 <tcp_receive+0x796>
 804f9a0:	2300      	movs	r3, #0
 804f9a2:	4423      	add	r3, r4
 804f9a4:	b29a      	uxth	r2, r3
 804f9a6:	4b3d      	ldr	r3, [pc, #244]	; (804fa9c <tcp_receive+0x890>)
 804f9a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 804f9aa:	4b3c      	ldr	r3, [pc, #240]	; (804fa9c <tcp_receive+0x890>)
 804f9ac:	881b      	ldrh	r3, [r3, #0]
 804f9ae:	461a      	mov	r2, r3
 804f9b0:	4b38      	ldr	r3, [pc, #224]	; (804fa94 <tcp_receive+0x888>)
 804f9b2:	681b      	ldr	r3, [r3, #0]
 804f9b4:	441a      	add	r2, r3
 804f9b6:	687b      	ldr	r3, [r7, #4]
 804f9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804f9ba:	6879      	ldr	r1, [r7, #4]
 804f9bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 804f9be:	440b      	add	r3, r1
 804f9c0:	429a      	cmp	r2, r3
 804f9c2:	d006      	beq.n	804f9d2 <tcp_receive+0x7c6>
 804f9c4:	4b36      	ldr	r3, [pc, #216]	; (804faa0 <tcp_receive+0x894>)
 804f9c6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 804f9ca:	4936      	ldr	r1, [pc, #216]	; (804faa4 <tcp_receive+0x898>)
 804f9cc:	4836      	ldr	r0, [pc, #216]	; (804faa8 <tcp_receive+0x89c>)
 804f9ce:	f004 ff37 	bl	8054840 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 804f9d2:	687b      	ldr	r3, [r7, #4]
 804f9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804f9d6:	2b00      	cmp	r3, #0
 804f9d8:	f000 80e7 	beq.w	804fbaa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 804f9dc:	4b2e      	ldr	r3, [pc, #184]	; (804fa98 <tcp_receive+0x88c>)
 804f9de:	68db      	ldr	r3, [r3, #12]
 804f9e0:	899b      	ldrh	r3, [r3, #12]
 804f9e2:	b29b      	uxth	r3, r3
 804f9e4:	4618      	mov	r0, r3
 804f9e6:	f7fa ff33 	bl	804a850 <lwip_htons>
 804f9ea:	4603      	mov	r3, r0
 804f9ec:	b2db      	uxtb	r3, r3
 804f9ee:	f003 0301 	and.w	r3, r3, #1
 804f9f2:	2b00      	cmp	r3, #0
 804f9f4:	d010      	beq.n	804fa18 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 804f9f6:	e00a      	b.n	804fa0e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 804f9f8:	687b      	ldr	r3, [r7, #4]
 804f9fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804f9fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 804f9fe:	687b      	ldr	r3, [r7, #4]
 804fa00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fa02:	681a      	ldr	r2, [r3, #0]
 804fa04:	687b      	ldr	r3, [r7, #4]
 804fa06:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 804fa08:	68f8      	ldr	r0, [r7, #12]
 804fa0a:	f7fd fd92 	bl	804d532 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 804fa0e:	687b      	ldr	r3, [r7, #4]
 804fa10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fa12:	2b00      	cmp	r3, #0
 804fa14:	d1f0      	bne.n	804f9f8 <tcp_receive+0x7ec>
 804fa16:	e0c8      	b.n	804fbaa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 804fa18:	687b      	ldr	r3, [r7, #4]
 804fa1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fa1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 804fa1e:	e052      	b.n	804fac6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 804fa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fa22:	68db      	ldr	r3, [r3, #12]
 804fa24:	899b      	ldrh	r3, [r3, #12]
 804fa26:	b29b      	uxth	r3, r3
 804fa28:	4618      	mov	r0, r3
 804fa2a:	f7fa ff11 	bl	804a850 <lwip_htons>
 804fa2e:	4603      	mov	r3, r0
 804fa30:	b2db      	uxtb	r3, r3
 804fa32:	f003 0301 	and.w	r3, r3, #1
 804fa36:	2b00      	cmp	r3, #0
 804fa38:	d03d      	beq.n	804fab6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 804fa3a:	4b17      	ldr	r3, [pc, #92]	; (804fa98 <tcp_receive+0x88c>)
 804fa3c:	68db      	ldr	r3, [r3, #12]
 804fa3e:	899b      	ldrh	r3, [r3, #12]
 804fa40:	b29b      	uxth	r3, r3
 804fa42:	4618      	mov	r0, r3
 804fa44:	f7fa ff04 	bl	804a850 <lwip_htons>
 804fa48:	4603      	mov	r3, r0
 804fa4a:	b2db      	uxtb	r3, r3
 804fa4c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 804fa50:	2b00      	cmp	r3, #0
 804fa52:	d130      	bne.n	804fab6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 804fa54:	4b10      	ldr	r3, [pc, #64]	; (804fa98 <tcp_receive+0x88c>)
 804fa56:	68db      	ldr	r3, [r3, #12]
 804fa58:	899b      	ldrh	r3, [r3, #12]
 804fa5a:	b29c      	uxth	r4, r3
 804fa5c:	2001      	movs	r0, #1
 804fa5e:	f7fa fef7 	bl	804a850 <lwip_htons>
 804fa62:	4603      	mov	r3, r0
 804fa64:	461a      	mov	r2, r3
 804fa66:	4b0c      	ldr	r3, [pc, #48]	; (804fa98 <tcp_receive+0x88c>)
 804fa68:	68db      	ldr	r3, [r3, #12]
 804fa6a:	4322      	orrs	r2, r4
 804fa6c:	b292      	uxth	r2, r2
 804fa6e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 804fa70:	4b09      	ldr	r3, [pc, #36]	; (804fa98 <tcp_receive+0x88c>)
 804fa72:	891c      	ldrh	r4, [r3, #8]
 804fa74:	4b08      	ldr	r3, [pc, #32]	; (804fa98 <tcp_receive+0x88c>)
 804fa76:	68db      	ldr	r3, [r3, #12]
 804fa78:	899b      	ldrh	r3, [r3, #12]
 804fa7a:	b29b      	uxth	r3, r3
 804fa7c:	4618      	mov	r0, r3
 804fa7e:	f7fa fee7 	bl	804a850 <lwip_htons>
 804fa82:	4603      	mov	r3, r0
 804fa84:	b2db      	uxtb	r3, r3
 804fa86:	f003 0303 	and.w	r3, r3, #3
 804fa8a:	2b00      	cmp	r3, #0
 804fa8c:	d00e      	beq.n	804faac <tcp_receive+0x8a0>
 804fa8e:	2301      	movs	r3, #1
 804fa90:	e00d      	b.n	804faae <tcp_receive+0x8a2>
 804fa92:	bf00      	nop
 804fa94:	20023804 	.word	0x20023804
 804fa98:	200237e4 	.word	0x200237e4
 804fa9c:	2002380e 	.word	0x2002380e
 804faa0:	08056c90 	.word	0x08056c90
 804faa4:	08057038 	.word	0x08057038
 804faa8:	08056cdc 	.word	0x08056cdc
 804faac:	2300      	movs	r3, #0
 804faae:	4423      	add	r3, r4
 804fab0:	b29a      	uxth	r2, r3
 804fab2:	4b98      	ldr	r3, [pc, #608]	; (804fd14 <tcp_receive+0xb08>)
 804fab4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 804fab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fab8:	613b      	str	r3, [r7, #16]
              next = next->next;
 804faba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fabc:	681b      	ldr	r3, [r3, #0]
 804fabe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 804fac0:	6938      	ldr	r0, [r7, #16]
 804fac2:	f7fd fd36 	bl	804d532 <tcp_seg_free>
            while (next &&
 804fac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fac8:	2b00      	cmp	r3, #0
 804faca:	d00e      	beq.n	804faea <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 804facc:	4b91      	ldr	r3, [pc, #580]	; (804fd14 <tcp_receive+0xb08>)
 804face:	881b      	ldrh	r3, [r3, #0]
 804fad0:	461a      	mov	r2, r3
 804fad2:	4b91      	ldr	r3, [pc, #580]	; (804fd18 <tcp_receive+0xb0c>)
 804fad4:	681b      	ldr	r3, [r3, #0]
 804fad6:	441a      	add	r2, r3
 804fad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fada:	68db      	ldr	r3, [r3, #12]
 804fadc:	685b      	ldr	r3, [r3, #4]
 804fade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804fae0:	8909      	ldrh	r1, [r1, #8]
 804fae2:	440b      	add	r3, r1
 804fae4:	1ad3      	subs	r3, r2, r3
            while (next &&
 804fae6:	2b00      	cmp	r3, #0
 804fae8:	da9a      	bge.n	804fa20 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 804faea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804faec:	2b00      	cmp	r3, #0
 804faee:	d059      	beq.n	804fba4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 804faf0:	4b88      	ldr	r3, [pc, #544]	; (804fd14 <tcp_receive+0xb08>)
 804faf2:	881b      	ldrh	r3, [r3, #0]
 804faf4:	461a      	mov	r2, r3
 804faf6:	4b88      	ldr	r3, [pc, #544]	; (804fd18 <tcp_receive+0xb0c>)
 804faf8:	681b      	ldr	r3, [r3, #0]
 804fafa:	441a      	add	r2, r3
 804fafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fafe:	68db      	ldr	r3, [r3, #12]
 804fb00:	685b      	ldr	r3, [r3, #4]
 804fb02:	1ad3      	subs	r3, r2, r3
            if (next &&
 804fb04:	2b00      	cmp	r3, #0
 804fb06:	dd4d      	ble.n	804fba4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 804fb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fb0a:	68db      	ldr	r3, [r3, #12]
 804fb0c:	685b      	ldr	r3, [r3, #4]
 804fb0e:	b29a      	uxth	r2, r3
 804fb10:	4b81      	ldr	r3, [pc, #516]	; (804fd18 <tcp_receive+0xb0c>)
 804fb12:	681b      	ldr	r3, [r3, #0]
 804fb14:	b29b      	uxth	r3, r3
 804fb16:	1ad3      	subs	r3, r2, r3
 804fb18:	b29a      	uxth	r2, r3
 804fb1a:	4b80      	ldr	r3, [pc, #512]	; (804fd1c <tcp_receive+0xb10>)
 804fb1c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 804fb1e:	4b7f      	ldr	r3, [pc, #508]	; (804fd1c <tcp_receive+0xb10>)
 804fb20:	68db      	ldr	r3, [r3, #12]
 804fb22:	899b      	ldrh	r3, [r3, #12]
 804fb24:	b29b      	uxth	r3, r3
 804fb26:	4618      	mov	r0, r3
 804fb28:	f7fa fe92 	bl	804a850 <lwip_htons>
 804fb2c:	4603      	mov	r3, r0
 804fb2e:	b2db      	uxtb	r3, r3
 804fb30:	f003 0302 	and.w	r3, r3, #2
 804fb34:	2b00      	cmp	r3, #0
 804fb36:	d005      	beq.n	804fb44 <tcp_receive+0x938>
                inseg.len -= 1;
 804fb38:	4b78      	ldr	r3, [pc, #480]	; (804fd1c <tcp_receive+0xb10>)
 804fb3a:	891b      	ldrh	r3, [r3, #8]
 804fb3c:	3b01      	subs	r3, #1
 804fb3e:	b29a      	uxth	r2, r3
 804fb40:	4b76      	ldr	r3, [pc, #472]	; (804fd1c <tcp_receive+0xb10>)
 804fb42:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 804fb44:	4b75      	ldr	r3, [pc, #468]	; (804fd1c <tcp_receive+0xb10>)
 804fb46:	685b      	ldr	r3, [r3, #4]
 804fb48:	4a74      	ldr	r2, [pc, #464]	; (804fd1c <tcp_receive+0xb10>)
 804fb4a:	8912      	ldrh	r2, [r2, #8]
 804fb4c:	4611      	mov	r1, r2
 804fb4e:	4618      	mov	r0, r3
 804fb50:	f7fc f8ea 	bl	804bd28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 804fb54:	4b71      	ldr	r3, [pc, #452]	; (804fd1c <tcp_receive+0xb10>)
 804fb56:	891c      	ldrh	r4, [r3, #8]
 804fb58:	4b70      	ldr	r3, [pc, #448]	; (804fd1c <tcp_receive+0xb10>)
 804fb5a:	68db      	ldr	r3, [r3, #12]
 804fb5c:	899b      	ldrh	r3, [r3, #12]
 804fb5e:	b29b      	uxth	r3, r3
 804fb60:	4618      	mov	r0, r3
 804fb62:	f7fa fe75 	bl	804a850 <lwip_htons>
 804fb66:	4603      	mov	r3, r0
 804fb68:	b2db      	uxtb	r3, r3
 804fb6a:	f003 0303 	and.w	r3, r3, #3
 804fb6e:	2b00      	cmp	r3, #0
 804fb70:	d001      	beq.n	804fb76 <tcp_receive+0x96a>
 804fb72:	2301      	movs	r3, #1
 804fb74:	e000      	b.n	804fb78 <tcp_receive+0x96c>
 804fb76:	2300      	movs	r3, #0
 804fb78:	4423      	add	r3, r4
 804fb7a:	b29a      	uxth	r2, r3
 804fb7c:	4b65      	ldr	r3, [pc, #404]	; (804fd14 <tcp_receive+0xb08>)
 804fb7e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 804fb80:	4b64      	ldr	r3, [pc, #400]	; (804fd14 <tcp_receive+0xb08>)
 804fb82:	881b      	ldrh	r3, [r3, #0]
 804fb84:	461a      	mov	r2, r3
 804fb86:	4b64      	ldr	r3, [pc, #400]	; (804fd18 <tcp_receive+0xb0c>)
 804fb88:	681b      	ldr	r3, [r3, #0]
 804fb8a:	441a      	add	r2, r3
 804fb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804fb8e:	68db      	ldr	r3, [r3, #12]
 804fb90:	685b      	ldr	r3, [r3, #4]
 804fb92:	429a      	cmp	r2, r3
 804fb94:	d006      	beq.n	804fba4 <tcp_receive+0x998>
 804fb96:	4b62      	ldr	r3, [pc, #392]	; (804fd20 <tcp_receive+0xb14>)
 804fb98:	f240 52fc 	movw	r2, #1532	; 0x5fc
 804fb9c:	4961      	ldr	r1, [pc, #388]	; (804fd24 <tcp_receive+0xb18>)
 804fb9e:	4862      	ldr	r0, [pc, #392]	; (804fd28 <tcp_receive+0xb1c>)
 804fba0:	f004 fe4e 	bl	8054840 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 804fba4:	687b      	ldr	r3, [r7, #4]
 804fba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 804fba8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 804fbaa:	4b5a      	ldr	r3, [pc, #360]	; (804fd14 <tcp_receive+0xb08>)
 804fbac:	881b      	ldrh	r3, [r3, #0]
 804fbae:	461a      	mov	r2, r3
 804fbb0:	4b59      	ldr	r3, [pc, #356]	; (804fd18 <tcp_receive+0xb0c>)
 804fbb2:	681b      	ldr	r3, [r3, #0]
 804fbb4:	441a      	add	r2, r3
 804fbb6:	687b      	ldr	r3, [r7, #4]
 804fbb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 804fbba:	687b      	ldr	r3, [r7, #4]
 804fbbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804fbbe:	4b55      	ldr	r3, [pc, #340]	; (804fd14 <tcp_receive+0xb08>)
 804fbc0:	881b      	ldrh	r3, [r3, #0]
 804fbc2:	429a      	cmp	r2, r3
 804fbc4:	d206      	bcs.n	804fbd4 <tcp_receive+0x9c8>
 804fbc6:	4b56      	ldr	r3, [pc, #344]	; (804fd20 <tcp_receive+0xb14>)
 804fbc8:	f240 6207 	movw	r2, #1543	; 0x607
 804fbcc:	4957      	ldr	r1, [pc, #348]	; (804fd2c <tcp_receive+0xb20>)
 804fbce:	4856      	ldr	r0, [pc, #344]	; (804fd28 <tcp_receive+0xb1c>)
 804fbd0:	f004 fe36 	bl	8054840 <iprintf>
        pcb->rcv_wnd -= tcplen;
 804fbd4:	687b      	ldr	r3, [r7, #4]
 804fbd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804fbd8:	4b4e      	ldr	r3, [pc, #312]	; (804fd14 <tcp_receive+0xb08>)
 804fbda:	881b      	ldrh	r3, [r3, #0]
 804fbdc:	1ad3      	subs	r3, r2, r3
 804fbde:	b29a      	uxth	r2, r3
 804fbe0:	687b      	ldr	r3, [r7, #4]
 804fbe2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 804fbe4:	6878      	ldr	r0, [r7, #4]
 804fbe6:	f7fc ffc5 	bl	804cb74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 804fbea:	4b4c      	ldr	r3, [pc, #304]	; (804fd1c <tcp_receive+0xb10>)
 804fbec:	685b      	ldr	r3, [r3, #4]
 804fbee:	891b      	ldrh	r3, [r3, #8]
 804fbf0:	2b00      	cmp	r3, #0
 804fbf2:	d006      	beq.n	804fc02 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 804fbf4:	4b49      	ldr	r3, [pc, #292]	; (804fd1c <tcp_receive+0xb10>)
 804fbf6:	685b      	ldr	r3, [r3, #4]
 804fbf8:	4a4d      	ldr	r2, [pc, #308]	; (804fd30 <tcp_receive+0xb24>)
 804fbfa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 804fbfc:	4b47      	ldr	r3, [pc, #284]	; (804fd1c <tcp_receive+0xb10>)
 804fbfe:	2200      	movs	r2, #0
 804fc00:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 804fc02:	4b46      	ldr	r3, [pc, #280]	; (804fd1c <tcp_receive+0xb10>)
 804fc04:	68db      	ldr	r3, [r3, #12]
 804fc06:	899b      	ldrh	r3, [r3, #12]
 804fc08:	b29b      	uxth	r3, r3
 804fc0a:	4618      	mov	r0, r3
 804fc0c:	f7fa fe20 	bl	804a850 <lwip_htons>
 804fc10:	4603      	mov	r3, r0
 804fc12:	b2db      	uxtb	r3, r3
 804fc14:	f003 0301 	and.w	r3, r3, #1
 804fc18:	2b00      	cmp	r3, #0
 804fc1a:	f000 80b8 	beq.w	804fd8e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 804fc1e:	4b45      	ldr	r3, [pc, #276]	; (804fd34 <tcp_receive+0xb28>)
 804fc20:	781b      	ldrb	r3, [r3, #0]
 804fc22:	f043 0320 	orr.w	r3, r3, #32
 804fc26:	b2da      	uxtb	r2, r3
 804fc28:	4b42      	ldr	r3, [pc, #264]	; (804fd34 <tcp_receive+0xb28>)
 804fc2a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 804fc2c:	e0af      	b.n	804fd8e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 804fc2e:	687b      	ldr	r3, [r7, #4]
 804fc30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fc32:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 804fc34:	687b      	ldr	r3, [r7, #4]
 804fc36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fc38:	68db      	ldr	r3, [r3, #12]
 804fc3a:	685b      	ldr	r3, [r3, #4]
 804fc3c:	4a36      	ldr	r2, [pc, #216]	; (804fd18 <tcp_receive+0xb0c>)
 804fc3e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 804fc40:	68bb      	ldr	r3, [r7, #8]
 804fc42:	891b      	ldrh	r3, [r3, #8]
 804fc44:	461c      	mov	r4, r3
 804fc46:	68bb      	ldr	r3, [r7, #8]
 804fc48:	68db      	ldr	r3, [r3, #12]
 804fc4a:	899b      	ldrh	r3, [r3, #12]
 804fc4c:	b29b      	uxth	r3, r3
 804fc4e:	4618      	mov	r0, r3
 804fc50:	f7fa fdfe 	bl	804a850 <lwip_htons>
 804fc54:	4603      	mov	r3, r0
 804fc56:	b2db      	uxtb	r3, r3
 804fc58:	f003 0303 	and.w	r3, r3, #3
 804fc5c:	2b00      	cmp	r3, #0
 804fc5e:	d001      	beq.n	804fc64 <tcp_receive+0xa58>
 804fc60:	2301      	movs	r3, #1
 804fc62:	e000      	b.n	804fc66 <tcp_receive+0xa5a>
 804fc64:	2300      	movs	r3, #0
 804fc66:	191a      	adds	r2, r3, r4
 804fc68:	687b      	ldr	r3, [r7, #4]
 804fc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fc6c:	441a      	add	r2, r3
 804fc6e:	687b      	ldr	r3, [r7, #4]
 804fc70:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 804fc72:	687b      	ldr	r3, [r7, #4]
 804fc74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804fc76:	461c      	mov	r4, r3
 804fc78:	68bb      	ldr	r3, [r7, #8]
 804fc7a:	891b      	ldrh	r3, [r3, #8]
 804fc7c:	461d      	mov	r5, r3
 804fc7e:	68bb      	ldr	r3, [r7, #8]
 804fc80:	68db      	ldr	r3, [r3, #12]
 804fc82:	899b      	ldrh	r3, [r3, #12]
 804fc84:	b29b      	uxth	r3, r3
 804fc86:	4618      	mov	r0, r3
 804fc88:	f7fa fde2 	bl	804a850 <lwip_htons>
 804fc8c:	4603      	mov	r3, r0
 804fc8e:	b2db      	uxtb	r3, r3
 804fc90:	f003 0303 	and.w	r3, r3, #3
 804fc94:	2b00      	cmp	r3, #0
 804fc96:	d001      	beq.n	804fc9c <tcp_receive+0xa90>
 804fc98:	2301      	movs	r3, #1
 804fc9a:	e000      	b.n	804fc9e <tcp_receive+0xa92>
 804fc9c:	2300      	movs	r3, #0
 804fc9e:	442b      	add	r3, r5
 804fca0:	429c      	cmp	r4, r3
 804fca2:	d206      	bcs.n	804fcb2 <tcp_receive+0xaa6>
 804fca4:	4b1e      	ldr	r3, [pc, #120]	; (804fd20 <tcp_receive+0xb14>)
 804fca6:	f240 622b 	movw	r2, #1579	; 0x62b
 804fcaa:	4923      	ldr	r1, [pc, #140]	; (804fd38 <tcp_receive+0xb2c>)
 804fcac:	481e      	ldr	r0, [pc, #120]	; (804fd28 <tcp_receive+0xb1c>)
 804fcae:	f004 fdc7 	bl	8054840 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 804fcb2:	68bb      	ldr	r3, [r7, #8]
 804fcb4:	891b      	ldrh	r3, [r3, #8]
 804fcb6:	461c      	mov	r4, r3
 804fcb8:	68bb      	ldr	r3, [r7, #8]
 804fcba:	68db      	ldr	r3, [r3, #12]
 804fcbc:	899b      	ldrh	r3, [r3, #12]
 804fcbe:	b29b      	uxth	r3, r3
 804fcc0:	4618      	mov	r0, r3
 804fcc2:	f7fa fdc5 	bl	804a850 <lwip_htons>
 804fcc6:	4603      	mov	r3, r0
 804fcc8:	b2db      	uxtb	r3, r3
 804fcca:	f003 0303 	and.w	r3, r3, #3
 804fcce:	2b00      	cmp	r3, #0
 804fcd0:	d001      	beq.n	804fcd6 <tcp_receive+0xaca>
 804fcd2:	2301      	movs	r3, #1
 804fcd4:	e000      	b.n	804fcd8 <tcp_receive+0xacc>
 804fcd6:	2300      	movs	r3, #0
 804fcd8:	1919      	adds	r1, r3, r4
 804fcda:	687b      	ldr	r3, [r7, #4]
 804fcdc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 804fcde:	b28b      	uxth	r3, r1
 804fce0:	1ad3      	subs	r3, r2, r3
 804fce2:	b29a      	uxth	r2, r3
 804fce4:	687b      	ldr	r3, [r7, #4]
 804fce6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 804fce8:	6878      	ldr	r0, [r7, #4]
 804fcea:	f7fc ff43 	bl	804cb74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 804fcee:	68bb      	ldr	r3, [r7, #8]
 804fcf0:	685b      	ldr	r3, [r3, #4]
 804fcf2:	891b      	ldrh	r3, [r3, #8]
 804fcf4:	2b00      	cmp	r3, #0
 804fcf6:	d028      	beq.n	804fd4a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 804fcf8:	4b0d      	ldr	r3, [pc, #52]	; (804fd30 <tcp_receive+0xb24>)
 804fcfa:	681b      	ldr	r3, [r3, #0]
 804fcfc:	2b00      	cmp	r3, #0
 804fcfe:	d01d      	beq.n	804fd3c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 804fd00:	4b0b      	ldr	r3, [pc, #44]	; (804fd30 <tcp_receive+0xb24>)
 804fd02:	681a      	ldr	r2, [r3, #0]
 804fd04:	68bb      	ldr	r3, [r7, #8]
 804fd06:	685b      	ldr	r3, [r3, #4]
 804fd08:	4619      	mov	r1, r3
 804fd0a:	4610      	mov	r0, r2
 804fd0c:	f7fc fa60 	bl	804c1d0 <pbuf_cat>
 804fd10:	e018      	b.n	804fd44 <tcp_receive+0xb38>
 804fd12:	bf00      	nop
 804fd14:	2002380e 	.word	0x2002380e
 804fd18:	20023804 	.word	0x20023804
 804fd1c:	200237e4 	.word	0x200237e4
 804fd20:	08056c90 	.word	0x08056c90
 804fd24:	08057070 	.word	0x08057070
 804fd28:	08056cdc 	.word	0x08056cdc
 804fd2c:	080570ac 	.word	0x080570ac
 804fd30:	20023814 	.word	0x20023814
 804fd34:	20023811 	.word	0x20023811
 804fd38:	080570cc 	.word	0x080570cc
            } else {
              recv_data = cseg->p;
 804fd3c:	68bb      	ldr	r3, [r7, #8]
 804fd3e:	685b      	ldr	r3, [r3, #4]
 804fd40:	4a70      	ldr	r2, [pc, #448]	; (804ff04 <tcp_receive+0xcf8>)
 804fd42:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 804fd44:	68bb      	ldr	r3, [r7, #8]
 804fd46:	2200      	movs	r2, #0
 804fd48:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 804fd4a:	68bb      	ldr	r3, [r7, #8]
 804fd4c:	68db      	ldr	r3, [r3, #12]
 804fd4e:	899b      	ldrh	r3, [r3, #12]
 804fd50:	b29b      	uxth	r3, r3
 804fd52:	4618      	mov	r0, r3
 804fd54:	f7fa fd7c 	bl	804a850 <lwip_htons>
 804fd58:	4603      	mov	r3, r0
 804fd5a:	b2db      	uxtb	r3, r3
 804fd5c:	f003 0301 	and.w	r3, r3, #1
 804fd60:	2b00      	cmp	r3, #0
 804fd62:	d00d      	beq.n	804fd80 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 804fd64:	4b68      	ldr	r3, [pc, #416]	; (804ff08 <tcp_receive+0xcfc>)
 804fd66:	781b      	ldrb	r3, [r3, #0]
 804fd68:	f043 0320 	orr.w	r3, r3, #32
 804fd6c:	b2da      	uxtb	r2, r3
 804fd6e:	4b66      	ldr	r3, [pc, #408]	; (804ff08 <tcp_receive+0xcfc>)
 804fd70:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 804fd72:	687b      	ldr	r3, [r7, #4]
 804fd74:	7d1b      	ldrb	r3, [r3, #20]
 804fd76:	2b04      	cmp	r3, #4
 804fd78:	d102      	bne.n	804fd80 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 804fd7a:	687b      	ldr	r3, [r7, #4]
 804fd7c:	2207      	movs	r2, #7
 804fd7e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 804fd80:	68bb      	ldr	r3, [r7, #8]
 804fd82:	681a      	ldr	r2, [r3, #0]
 804fd84:	687b      	ldr	r3, [r7, #4]
 804fd86:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 804fd88:	68b8      	ldr	r0, [r7, #8]
 804fd8a:	f7fd fbd2 	bl	804d532 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 804fd8e:	687b      	ldr	r3, [r7, #4]
 804fd90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fd92:	2b00      	cmp	r3, #0
 804fd94:	d008      	beq.n	804fda8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 804fd96:	687b      	ldr	r3, [r7, #4]
 804fd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fd9a:	68db      	ldr	r3, [r3, #12]
 804fd9c:	685a      	ldr	r2, [r3, #4]
 804fd9e:	687b      	ldr	r3, [r7, #4]
 804fda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 804fda2:	429a      	cmp	r2, r3
 804fda4:	f43f af43 	beq.w	804fc2e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 804fda8:	687b      	ldr	r3, [r7, #4]
 804fdaa:	8b5b      	ldrh	r3, [r3, #26]
 804fdac:	f003 0301 	and.w	r3, r3, #1
 804fdb0:	2b00      	cmp	r3, #0
 804fdb2:	d00e      	beq.n	804fdd2 <tcp_receive+0xbc6>
 804fdb4:	687b      	ldr	r3, [r7, #4]
 804fdb6:	8b5b      	ldrh	r3, [r3, #26]
 804fdb8:	f023 0301 	bic.w	r3, r3, #1
 804fdbc:	b29a      	uxth	r2, r3
 804fdbe:	687b      	ldr	r3, [r7, #4]
 804fdc0:	835a      	strh	r2, [r3, #26]
 804fdc2:	687b      	ldr	r3, [r7, #4]
 804fdc4:	8b5b      	ldrh	r3, [r3, #26]
 804fdc6:	f043 0302 	orr.w	r3, r3, #2
 804fdca:	b29a      	uxth	r2, r3
 804fdcc:	687b      	ldr	r3, [r7, #4]
 804fdce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 804fdd0:	e188      	b.n	80500e4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 804fdd2:	687b      	ldr	r3, [r7, #4]
 804fdd4:	8b5b      	ldrh	r3, [r3, #26]
 804fdd6:	f043 0301 	orr.w	r3, r3, #1
 804fdda:	b29a      	uxth	r2, r3
 804fddc:	687b      	ldr	r3, [r7, #4]
 804fdde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 804fde0:	e180      	b.n	80500e4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 804fde2:	687b      	ldr	r3, [r7, #4]
 804fde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fde6:	2b00      	cmp	r3, #0
 804fde8:	d106      	bne.n	804fdf8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 804fdea:	4848      	ldr	r0, [pc, #288]	; (804ff0c <tcp_receive+0xd00>)
 804fdec:	f7fd fbba 	bl	804d564 <tcp_seg_copy>
 804fdf0:	4602      	mov	r2, r0
 804fdf2:	687b      	ldr	r3, [r7, #4]
 804fdf4:	675a      	str	r2, [r3, #116]	; 0x74
 804fdf6:	e16d      	b.n	80500d4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 804fdf8:	2300      	movs	r3, #0
 804fdfa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 804fdfc:	687b      	ldr	r3, [r7, #4]
 804fdfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fe00:	63bb      	str	r3, [r7, #56]	; 0x38
 804fe02:	e157      	b.n	80500b4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 804fe04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804fe06:	68db      	ldr	r3, [r3, #12]
 804fe08:	685a      	ldr	r2, [r3, #4]
 804fe0a:	4b41      	ldr	r3, [pc, #260]	; (804ff10 <tcp_receive+0xd04>)
 804fe0c:	681b      	ldr	r3, [r3, #0]
 804fe0e:	429a      	cmp	r2, r3
 804fe10:	d11d      	bne.n	804fe4e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 804fe12:	4b3e      	ldr	r3, [pc, #248]	; (804ff0c <tcp_receive+0xd00>)
 804fe14:	891a      	ldrh	r2, [r3, #8]
 804fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804fe18:	891b      	ldrh	r3, [r3, #8]
 804fe1a:	429a      	cmp	r2, r3
 804fe1c:	f240 814f 	bls.w	80500be <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 804fe20:	483a      	ldr	r0, [pc, #232]	; (804ff0c <tcp_receive+0xd00>)
 804fe22:	f7fd fb9f 	bl	804d564 <tcp_seg_copy>
 804fe26:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 804fe28:	697b      	ldr	r3, [r7, #20]
 804fe2a:	2b00      	cmp	r3, #0
 804fe2c:	f000 8149 	beq.w	80500c2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 804fe30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fe32:	2b00      	cmp	r3, #0
 804fe34:	d003      	beq.n	804fe3e <tcp_receive+0xc32>
                    prev->next = cseg;
 804fe36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fe38:	697a      	ldr	r2, [r7, #20]
 804fe3a:	601a      	str	r2, [r3, #0]
 804fe3c:	e002      	b.n	804fe44 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 804fe3e:	687b      	ldr	r3, [r7, #4]
 804fe40:	697a      	ldr	r2, [r7, #20]
 804fe42:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 804fe44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 804fe46:	6978      	ldr	r0, [r7, #20]
 804fe48:	f7ff f8dc 	bl	804f004 <tcp_oos_insert_segment>
                }
                break;
 804fe4c:	e139      	b.n	80500c2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 804fe4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fe50:	2b00      	cmp	r3, #0
 804fe52:	d117      	bne.n	804fe84 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 804fe54:	4b2e      	ldr	r3, [pc, #184]	; (804ff10 <tcp_receive+0xd04>)
 804fe56:	681a      	ldr	r2, [r3, #0]
 804fe58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804fe5a:	68db      	ldr	r3, [r3, #12]
 804fe5c:	685b      	ldr	r3, [r3, #4]
 804fe5e:	1ad3      	subs	r3, r2, r3
 804fe60:	2b00      	cmp	r3, #0
 804fe62:	da57      	bge.n	804ff14 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 804fe64:	4829      	ldr	r0, [pc, #164]	; (804ff0c <tcp_receive+0xd00>)
 804fe66:	f7fd fb7d 	bl	804d564 <tcp_seg_copy>
 804fe6a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 804fe6c:	69bb      	ldr	r3, [r7, #24]
 804fe6e:	2b00      	cmp	r3, #0
 804fe70:	f000 8129 	beq.w	80500c6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 804fe74:	687b      	ldr	r3, [r7, #4]
 804fe76:	69ba      	ldr	r2, [r7, #24]
 804fe78:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 804fe7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 804fe7c:	69b8      	ldr	r0, [r7, #24]
 804fe7e:	f7ff f8c1 	bl	804f004 <tcp_oos_insert_segment>
                  }
                  break;
 804fe82:	e120      	b.n	80500c6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 804fe84:	4b22      	ldr	r3, [pc, #136]	; (804ff10 <tcp_receive+0xd04>)
 804fe86:	681a      	ldr	r2, [r3, #0]
 804fe88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fe8a:	68db      	ldr	r3, [r3, #12]
 804fe8c:	685b      	ldr	r3, [r3, #4]
 804fe8e:	1ad3      	subs	r3, r2, r3
 804fe90:	3b01      	subs	r3, #1
 804fe92:	2b00      	cmp	r3, #0
 804fe94:	db3e      	blt.n	804ff14 <tcp_receive+0xd08>
 804fe96:	4b1e      	ldr	r3, [pc, #120]	; (804ff10 <tcp_receive+0xd04>)
 804fe98:	681a      	ldr	r2, [r3, #0]
 804fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804fe9c:	68db      	ldr	r3, [r3, #12]
 804fe9e:	685b      	ldr	r3, [r3, #4]
 804fea0:	1ad3      	subs	r3, r2, r3
 804fea2:	3301      	adds	r3, #1
 804fea4:	2b00      	cmp	r3, #0
 804fea6:	dc35      	bgt.n	804ff14 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 804fea8:	4818      	ldr	r0, [pc, #96]	; (804ff0c <tcp_receive+0xd00>)
 804feaa:	f7fd fb5b 	bl	804d564 <tcp_seg_copy>
 804feae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 804feb0:	69fb      	ldr	r3, [r7, #28]
 804feb2:	2b00      	cmp	r3, #0
 804feb4:	f000 8109 	beq.w	80500ca <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 804feb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804feba:	68db      	ldr	r3, [r3, #12]
 804febc:	685b      	ldr	r3, [r3, #4]
 804febe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804fec0:	8912      	ldrh	r2, [r2, #8]
 804fec2:	441a      	add	r2, r3
 804fec4:	4b12      	ldr	r3, [pc, #72]	; (804ff10 <tcp_receive+0xd04>)
 804fec6:	681b      	ldr	r3, [r3, #0]
 804fec8:	1ad3      	subs	r3, r2, r3
 804feca:	2b00      	cmp	r3, #0
 804fecc:	dd12      	ble.n	804fef4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 804fece:	4b10      	ldr	r3, [pc, #64]	; (804ff10 <tcp_receive+0xd04>)
 804fed0:	681b      	ldr	r3, [r3, #0]
 804fed2:	b29a      	uxth	r2, r3
 804fed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fed6:	68db      	ldr	r3, [r3, #12]
 804fed8:	685b      	ldr	r3, [r3, #4]
 804feda:	b29b      	uxth	r3, r3
 804fedc:	1ad3      	subs	r3, r2, r3
 804fede:	b29a      	uxth	r2, r3
 804fee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fee2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 804fee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fee6:	685a      	ldr	r2, [r3, #4]
 804fee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804feea:	891b      	ldrh	r3, [r3, #8]
 804feec:	4619      	mov	r1, r3
 804feee:	4610      	mov	r0, r2
 804fef0:	f7fb ff1a 	bl	804bd28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 804fef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804fef6:	69fa      	ldr	r2, [r7, #28]
 804fef8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 804fefa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 804fefc:	69f8      	ldr	r0, [r7, #28]
 804fefe:	f7ff f881 	bl	804f004 <tcp_oos_insert_segment>
                  }
                  break;
 804ff02:	e0e2      	b.n	80500ca <tcp_receive+0xebe>
 804ff04:	20023814 	.word	0x20023814
 804ff08:	20023811 	.word	0x20023811
 804ff0c:	200237e4 	.word	0x200237e4
 804ff10:	20023804 	.word	0x20023804
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 804ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff16:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 804ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff1a:	681b      	ldr	r3, [r3, #0]
 804ff1c:	2b00      	cmp	r3, #0
 804ff1e:	f040 80c6 	bne.w	80500ae <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 804ff22:	4b80      	ldr	r3, [pc, #512]	; (8050124 <tcp_receive+0xf18>)
 804ff24:	681a      	ldr	r2, [r3, #0]
 804ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff28:	68db      	ldr	r3, [r3, #12]
 804ff2a:	685b      	ldr	r3, [r3, #4]
 804ff2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 804ff2e:	2b00      	cmp	r3, #0
 804ff30:	f340 80bd 	ble.w	80500ae <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 804ff34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff36:	68db      	ldr	r3, [r3, #12]
 804ff38:	899b      	ldrh	r3, [r3, #12]
 804ff3a:	b29b      	uxth	r3, r3
 804ff3c:	4618      	mov	r0, r3
 804ff3e:	f7fa fc87 	bl	804a850 <lwip_htons>
 804ff42:	4603      	mov	r3, r0
 804ff44:	b2db      	uxtb	r3, r3
 804ff46:	f003 0301 	and.w	r3, r3, #1
 804ff4a:	2b00      	cmp	r3, #0
 804ff4c:	f040 80bf 	bne.w	80500ce <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 804ff50:	4875      	ldr	r0, [pc, #468]	; (8050128 <tcp_receive+0xf1c>)
 804ff52:	f7fd fb07 	bl	804d564 <tcp_seg_copy>
 804ff56:	4602      	mov	r2, r0
 804ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 804ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff5e:	681b      	ldr	r3, [r3, #0]
 804ff60:	2b00      	cmp	r3, #0
 804ff62:	f000 80b6 	beq.w	80500d2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 804ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff68:	68db      	ldr	r3, [r3, #12]
 804ff6a:	685b      	ldr	r3, [r3, #4]
 804ff6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804ff6e:	8912      	ldrh	r2, [r2, #8]
 804ff70:	441a      	add	r2, r3
 804ff72:	4b6c      	ldr	r3, [pc, #432]	; (8050124 <tcp_receive+0xf18>)
 804ff74:	681b      	ldr	r3, [r3, #0]
 804ff76:	1ad3      	subs	r3, r2, r3
 804ff78:	2b00      	cmp	r3, #0
 804ff7a:	dd12      	ble.n	804ffa2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 804ff7c:	4b69      	ldr	r3, [pc, #420]	; (8050124 <tcp_receive+0xf18>)
 804ff7e:	681b      	ldr	r3, [r3, #0]
 804ff80:	b29a      	uxth	r2, r3
 804ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff84:	68db      	ldr	r3, [r3, #12]
 804ff86:	685b      	ldr	r3, [r3, #4]
 804ff88:	b29b      	uxth	r3, r3
 804ff8a:	1ad3      	subs	r3, r2, r3
 804ff8c:	b29a      	uxth	r2, r3
 804ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 804ff92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff94:	685a      	ldr	r2, [r3, #4]
 804ff96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ff98:	891b      	ldrh	r3, [r3, #8]
 804ff9a:	4619      	mov	r1, r3
 804ff9c:	4610      	mov	r0, r2
 804ff9e:	f7fb fec3 	bl	804bd28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 804ffa2:	4b62      	ldr	r3, [pc, #392]	; (805012c <tcp_receive+0xf20>)
 804ffa4:	881b      	ldrh	r3, [r3, #0]
 804ffa6:	461a      	mov	r2, r3
 804ffa8:	4b5e      	ldr	r3, [pc, #376]	; (8050124 <tcp_receive+0xf18>)
 804ffaa:	681b      	ldr	r3, [r3, #0]
 804ffac:	441a      	add	r2, r3
 804ffae:	687b      	ldr	r3, [r7, #4]
 804ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ffb2:	6879      	ldr	r1, [r7, #4]
 804ffb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 804ffb6:	440b      	add	r3, r1
 804ffb8:	1ad3      	subs	r3, r2, r3
 804ffba:	2b00      	cmp	r3, #0
 804ffbc:	f340 8089 	ble.w	80500d2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 804ffc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ffc2:	681b      	ldr	r3, [r3, #0]
 804ffc4:	68db      	ldr	r3, [r3, #12]
 804ffc6:	899b      	ldrh	r3, [r3, #12]
 804ffc8:	b29b      	uxth	r3, r3
 804ffca:	4618      	mov	r0, r3
 804ffcc:	f7fa fc40 	bl	804a850 <lwip_htons>
 804ffd0:	4603      	mov	r3, r0
 804ffd2:	b2db      	uxtb	r3, r3
 804ffd4:	f003 0301 	and.w	r3, r3, #1
 804ffd8:	2b00      	cmp	r3, #0
 804ffda:	d022      	beq.n	8050022 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 804ffdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804ffde:	681b      	ldr	r3, [r3, #0]
 804ffe0:	68db      	ldr	r3, [r3, #12]
 804ffe2:	899b      	ldrh	r3, [r3, #12]
 804ffe4:	b29b      	uxth	r3, r3
 804ffe6:	b21b      	sxth	r3, r3
 804ffe8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 804ffec:	b21c      	sxth	r4, r3
 804ffee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804fff0:	681b      	ldr	r3, [r3, #0]
 804fff2:	68db      	ldr	r3, [r3, #12]
 804fff4:	899b      	ldrh	r3, [r3, #12]
 804fff6:	b29b      	uxth	r3, r3
 804fff8:	4618      	mov	r0, r3
 804fffa:	f7fa fc29 	bl	804a850 <lwip_htons>
 804fffe:	4603      	mov	r3, r0
 8050000:	b2db      	uxtb	r3, r3
 8050002:	b29b      	uxth	r3, r3
 8050004:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8050008:	b29b      	uxth	r3, r3
 805000a:	4618      	mov	r0, r3
 805000c:	f7fa fc20 	bl	804a850 <lwip_htons>
 8050010:	4603      	mov	r3, r0
 8050012:	b21b      	sxth	r3, r3
 8050014:	4323      	orrs	r3, r4
 8050016:	b21a      	sxth	r2, r3
 8050018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805001a:	681b      	ldr	r3, [r3, #0]
 805001c:	68db      	ldr	r3, [r3, #12]
 805001e:	b292      	uxth	r2, r2
 8050020:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8050022:	687b      	ldr	r3, [r7, #4]
 8050024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050026:	b29a      	uxth	r2, r3
 8050028:	687b      	ldr	r3, [r7, #4]
 805002a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 805002c:	4413      	add	r3, r2
 805002e:	b299      	uxth	r1, r3
 8050030:	4b3c      	ldr	r3, [pc, #240]	; (8050124 <tcp_receive+0xf18>)
 8050032:	681b      	ldr	r3, [r3, #0]
 8050034:	b29a      	uxth	r2, r3
 8050036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8050038:	681b      	ldr	r3, [r3, #0]
 805003a:	1a8a      	subs	r2, r1, r2
 805003c:	b292      	uxth	r2, r2
 805003e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8050040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8050042:	681b      	ldr	r3, [r3, #0]
 8050044:	685a      	ldr	r2, [r3, #4]
 8050046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8050048:	681b      	ldr	r3, [r3, #0]
 805004a:	891b      	ldrh	r3, [r3, #8]
 805004c:	4619      	mov	r1, r3
 805004e:	4610      	mov	r0, r2
 8050050:	f7fb fe6a 	bl	804bd28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8050054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8050056:	681b      	ldr	r3, [r3, #0]
 8050058:	891c      	ldrh	r4, [r3, #8]
 805005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805005c:	681b      	ldr	r3, [r3, #0]
 805005e:	68db      	ldr	r3, [r3, #12]
 8050060:	899b      	ldrh	r3, [r3, #12]
 8050062:	b29b      	uxth	r3, r3
 8050064:	4618      	mov	r0, r3
 8050066:	f7fa fbf3 	bl	804a850 <lwip_htons>
 805006a:	4603      	mov	r3, r0
 805006c:	b2db      	uxtb	r3, r3
 805006e:	f003 0303 	and.w	r3, r3, #3
 8050072:	2b00      	cmp	r3, #0
 8050074:	d001      	beq.n	805007a <tcp_receive+0xe6e>
 8050076:	2301      	movs	r3, #1
 8050078:	e000      	b.n	805007c <tcp_receive+0xe70>
 805007a:	2300      	movs	r3, #0
 805007c:	4423      	add	r3, r4
 805007e:	b29a      	uxth	r2, r3
 8050080:	4b2a      	ldr	r3, [pc, #168]	; (805012c <tcp_receive+0xf20>)
 8050082:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8050084:	4b29      	ldr	r3, [pc, #164]	; (805012c <tcp_receive+0xf20>)
 8050086:	881b      	ldrh	r3, [r3, #0]
 8050088:	461a      	mov	r2, r3
 805008a:	4b26      	ldr	r3, [pc, #152]	; (8050124 <tcp_receive+0xf18>)
 805008c:	681b      	ldr	r3, [r3, #0]
 805008e:	441a      	add	r2, r3
 8050090:	687b      	ldr	r3, [r7, #4]
 8050092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050094:	6879      	ldr	r1, [r7, #4]
 8050096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8050098:	440b      	add	r3, r1
 805009a:	429a      	cmp	r2, r3
 805009c:	d019      	beq.n	80500d2 <tcp_receive+0xec6>
 805009e:	4b24      	ldr	r3, [pc, #144]	; (8050130 <tcp_receive+0xf24>)
 80500a0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80500a4:	4923      	ldr	r1, [pc, #140]	; (8050134 <tcp_receive+0xf28>)
 80500a6:	4824      	ldr	r0, [pc, #144]	; (8050138 <tcp_receive+0xf2c>)
 80500a8:	f004 fbca 	bl	8054840 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80500ac:	e011      	b.n	80500d2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80500ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80500b0:	681b      	ldr	r3, [r3, #0]
 80500b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80500b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80500b6:	2b00      	cmp	r3, #0
 80500b8:	f47f aea4 	bne.w	804fe04 <tcp_receive+0xbf8>
 80500bc:	e00a      	b.n	80500d4 <tcp_receive+0xec8>
                break;
 80500be:	bf00      	nop
 80500c0:	e008      	b.n	80500d4 <tcp_receive+0xec8>
                break;
 80500c2:	bf00      	nop
 80500c4:	e006      	b.n	80500d4 <tcp_receive+0xec8>
                  break;
 80500c6:	bf00      	nop
 80500c8:	e004      	b.n	80500d4 <tcp_receive+0xec8>
                  break;
 80500ca:	bf00      	nop
 80500cc:	e002      	b.n	80500d4 <tcp_receive+0xec8>
                  break;
 80500ce:	bf00      	nop
 80500d0:	e000      	b.n	80500d4 <tcp_receive+0xec8>
                break;
 80500d2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80500d4:	6878      	ldr	r0, [r7, #4]
 80500d6:	f001 fa33 	bl	8051540 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80500da:	e003      	b.n	80500e4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80500dc:	6878      	ldr	r0, [r7, #4]
 80500de:	f001 fa2f 	bl	8051540 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80500e2:	e01a      	b.n	805011a <tcp_receive+0xf0e>
 80500e4:	e019      	b.n	805011a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80500e6:	4b0f      	ldr	r3, [pc, #60]	; (8050124 <tcp_receive+0xf18>)
 80500e8:	681a      	ldr	r2, [r3, #0]
 80500ea:	687b      	ldr	r3, [r7, #4]
 80500ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80500ee:	1ad3      	subs	r3, r2, r3
 80500f0:	2b00      	cmp	r3, #0
 80500f2:	db0a      	blt.n	805010a <tcp_receive+0xefe>
 80500f4:	4b0b      	ldr	r3, [pc, #44]	; (8050124 <tcp_receive+0xf18>)
 80500f6:	681a      	ldr	r2, [r3, #0]
 80500f8:	687b      	ldr	r3, [r7, #4]
 80500fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80500fc:	6879      	ldr	r1, [r7, #4]
 80500fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8050100:	440b      	add	r3, r1
 8050102:	1ad3      	subs	r3, r2, r3
 8050104:	3301      	adds	r3, #1
 8050106:	2b00      	cmp	r3, #0
 8050108:	dd07      	ble.n	805011a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 805010a:	687b      	ldr	r3, [r7, #4]
 805010c:	8b5b      	ldrh	r3, [r3, #26]
 805010e:	f043 0302 	orr.w	r3, r3, #2
 8050112:	b29a      	uxth	r2, r3
 8050114:	687b      	ldr	r3, [r7, #4]
 8050116:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8050118:	e7ff      	b.n	805011a <tcp_receive+0xf0e>
 805011a:	bf00      	nop
 805011c:	3750      	adds	r7, #80	; 0x50
 805011e:	46bd      	mov	sp, r7
 8050120:	bdb0      	pop	{r4, r5, r7, pc}
 8050122:	bf00      	nop
 8050124:	20023804 	.word	0x20023804
 8050128:	200237e4 	.word	0x200237e4
 805012c:	2002380e 	.word	0x2002380e
 8050130:	08056c90 	.word	0x08056c90
 8050134:	08057038 	.word	0x08057038
 8050138:	08056cdc 	.word	0x08056cdc

0805013c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 805013c:	b480      	push	{r7}
 805013e:	b083      	sub	sp, #12
 8050140:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8050142:	4b15      	ldr	r3, [pc, #84]	; (8050198 <tcp_get_next_optbyte+0x5c>)
 8050144:	881b      	ldrh	r3, [r3, #0]
 8050146:	1c5a      	adds	r2, r3, #1
 8050148:	b291      	uxth	r1, r2
 805014a:	4a13      	ldr	r2, [pc, #76]	; (8050198 <tcp_get_next_optbyte+0x5c>)
 805014c:	8011      	strh	r1, [r2, #0]
 805014e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8050150:	4b12      	ldr	r3, [pc, #72]	; (805019c <tcp_get_next_optbyte+0x60>)
 8050152:	681b      	ldr	r3, [r3, #0]
 8050154:	2b00      	cmp	r3, #0
 8050156:	d004      	beq.n	8050162 <tcp_get_next_optbyte+0x26>
 8050158:	4b11      	ldr	r3, [pc, #68]	; (80501a0 <tcp_get_next_optbyte+0x64>)
 805015a:	881b      	ldrh	r3, [r3, #0]
 805015c:	88fa      	ldrh	r2, [r7, #6]
 805015e:	429a      	cmp	r2, r3
 8050160:	d208      	bcs.n	8050174 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8050162:	4b10      	ldr	r3, [pc, #64]	; (80501a4 <tcp_get_next_optbyte+0x68>)
 8050164:	681b      	ldr	r3, [r3, #0]
 8050166:	3314      	adds	r3, #20
 8050168:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 805016a:	88fb      	ldrh	r3, [r7, #6]
 805016c:	683a      	ldr	r2, [r7, #0]
 805016e:	4413      	add	r3, r2
 8050170:	781b      	ldrb	r3, [r3, #0]
 8050172:	e00b      	b.n	805018c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8050174:	88fb      	ldrh	r3, [r7, #6]
 8050176:	b2da      	uxtb	r2, r3
 8050178:	4b09      	ldr	r3, [pc, #36]	; (80501a0 <tcp_get_next_optbyte+0x64>)
 805017a:	881b      	ldrh	r3, [r3, #0]
 805017c:	b2db      	uxtb	r3, r3
 805017e:	1ad3      	subs	r3, r2, r3
 8050180:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8050182:	4b06      	ldr	r3, [pc, #24]	; (805019c <tcp_get_next_optbyte+0x60>)
 8050184:	681a      	ldr	r2, [r3, #0]
 8050186:	797b      	ldrb	r3, [r7, #5]
 8050188:	4413      	add	r3, r2
 805018a:	781b      	ldrb	r3, [r3, #0]
  }
}
 805018c:	4618      	mov	r0, r3
 805018e:	370c      	adds	r7, #12
 8050190:	46bd      	mov	sp, r7
 8050192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050196:	4770      	bx	lr
 8050198:	20023800 	.word	0x20023800
 805019c:	200237fc 	.word	0x200237fc
 80501a0:	200237fa 	.word	0x200237fa
 80501a4:	200237f4 	.word	0x200237f4

080501a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80501a8:	b580      	push	{r7, lr}
 80501aa:	b084      	sub	sp, #16
 80501ac:	af00      	add	r7, sp, #0
 80501ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80501b0:	687b      	ldr	r3, [r7, #4]
 80501b2:	2b00      	cmp	r3, #0
 80501b4:	d106      	bne.n	80501c4 <tcp_parseopt+0x1c>
 80501b6:	4b32      	ldr	r3, [pc, #200]	; (8050280 <tcp_parseopt+0xd8>)
 80501b8:	f240 727d 	movw	r2, #1917	; 0x77d
 80501bc:	4931      	ldr	r1, [pc, #196]	; (8050284 <tcp_parseopt+0xdc>)
 80501be:	4832      	ldr	r0, [pc, #200]	; (8050288 <tcp_parseopt+0xe0>)
 80501c0:	f004 fb3e 	bl	8054840 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80501c4:	4b31      	ldr	r3, [pc, #196]	; (805028c <tcp_parseopt+0xe4>)
 80501c6:	881b      	ldrh	r3, [r3, #0]
 80501c8:	2b00      	cmp	r3, #0
 80501ca:	d055      	beq.n	8050278 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80501cc:	4b30      	ldr	r3, [pc, #192]	; (8050290 <tcp_parseopt+0xe8>)
 80501ce:	2200      	movs	r2, #0
 80501d0:	801a      	strh	r2, [r3, #0]
 80501d2:	e045      	b.n	8050260 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80501d4:	f7ff ffb2 	bl	805013c <tcp_get_next_optbyte>
 80501d8:	4603      	mov	r3, r0
 80501da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80501dc:	7bfb      	ldrb	r3, [r7, #15]
 80501de:	2b02      	cmp	r3, #2
 80501e0:	d006      	beq.n	80501f0 <tcp_parseopt+0x48>
 80501e2:	2b02      	cmp	r3, #2
 80501e4:	dc2b      	bgt.n	805023e <tcp_parseopt+0x96>
 80501e6:	2b00      	cmp	r3, #0
 80501e8:	d041      	beq.n	805026e <tcp_parseopt+0xc6>
 80501ea:	2b01      	cmp	r3, #1
 80501ec:	d127      	bne.n	805023e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80501ee:	e037      	b.n	8050260 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80501f0:	f7ff ffa4 	bl	805013c <tcp_get_next_optbyte>
 80501f4:	4603      	mov	r3, r0
 80501f6:	2b04      	cmp	r3, #4
 80501f8:	d13b      	bne.n	8050272 <tcp_parseopt+0xca>
 80501fa:	4b25      	ldr	r3, [pc, #148]	; (8050290 <tcp_parseopt+0xe8>)
 80501fc:	881b      	ldrh	r3, [r3, #0]
 80501fe:	3301      	adds	r3, #1
 8050200:	4a22      	ldr	r2, [pc, #136]	; (805028c <tcp_parseopt+0xe4>)
 8050202:	8812      	ldrh	r2, [r2, #0]
 8050204:	4293      	cmp	r3, r2
 8050206:	da34      	bge.n	8050272 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8050208:	f7ff ff98 	bl	805013c <tcp_get_next_optbyte>
 805020c:	4603      	mov	r3, r0
 805020e:	b29b      	uxth	r3, r3
 8050210:	021b      	lsls	r3, r3, #8
 8050212:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8050214:	f7ff ff92 	bl	805013c <tcp_get_next_optbyte>
 8050218:	4603      	mov	r3, r0
 805021a:	b29a      	uxth	r2, r3
 805021c:	89bb      	ldrh	r3, [r7, #12]
 805021e:	4313      	orrs	r3, r2
 8050220:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8050222:	89bb      	ldrh	r3, [r7, #12]
 8050224:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8050228:	d804      	bhi.n	8050234 <tcp_parseopt+0x8c>
 805022a:	89bb      	ldrh	r3, [r7, #12]
 805022c:	2b00      	cmp	r3, #0
 805022e:	d001      	beq.n	8050234 <tcp_parseopt+0x8c>
 8050230:	89ba      	ldrh	r2, [r7, #12]
 8050232:	e001      	b.n	8050238 <tcp_parseopt+0x90>
 8050234:	f44f 7206 	mov.w	r2, #536	; 0x218
 8050238:	687b      	ldr	r3, [r7, #4]
 805023a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 805023c:	e010      	b.n	8050260 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 805023e:	f7ff ff7d 	bl	805013c <tcp_get_next_optbyte>
 8050242:	4603      	mov	r3, r0
 8050244:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8050246:	7afb      	ldrb	r3, [r7, #11]
 8050248:	2b01      	cmp	r3, #1
 805024a:	d914      	bls.n	8050276 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 805024c:	7afb      	ldrb	r3, [r7, #11]
 805024e:	b29a      	uxth	r2, r3
 8050250:	4b0f      	ldr	r3, [pc, #60]	; (8050290 <tcp_parseopt+0xe8>)
 8050252:	881b      	ldrh	r3, [r3, #0]
 8050254:	4413      	add	r3, r2
 8050256:	b29b      	uxth	r3, r3
 8050258:	3b02      	subs	r3, #2
 805025a:	b29a      	uxth	r2, r3
 805025c:	4b0c      	ldr	r3, [pc, #48]	; (8050290 <tcp_parseopt+0xe8>)
 805025e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8050260:	4b0b      	ldr	r3, [pc, #44]	; (8050290 <tcp_parseopt+0xe8>)
 8050262:	881a      	ldrh	r2, [r3, #0]
 8050264:	4b09      	ldr	r3, [pc, #36]	; (805028c <tcp_parseopt+0xe4>)
 8050266:	881b      	ldrh	r3, [r3, #0]
 8050268:	429a      	cmp	r2, r3
 805026a:	d3b3      	bcc.n	80501d4 <tcp_parseopt+0x2c>
 805026c:	e004      	b.n	8050278 <tcp_parseopt+0xd0>
          return;
 805026e:	bf00      	nop
 8050270:	e002      	b.n	8050278 <tcp_parseopt+0xd0>
            return;
 8050272:	bf00      	nop
 8050274:	e000      	b.n	8050278 <tcp_parseopt+0xd0>
            return;
 8050276:	bf00      	nop
      }
    }
  }
}
 8050278:	3710      	adds	r7, #16
 805027a:	46bd      	mov	sp, r7
 805027c:	bd80      	pop	{r7, pc}
 805027e:	bf00      	nop
 8050280:	08056c90 	.word	0x08056c90
 8050284:	080570f4 	.word	0x080570f4
 8050288:	08056cdc 	.word	0x08056cdc
 805028c:	200237f8 	.word	0x200237f8
 8050290:	20023800 	.word	0x20023800

08050294 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8050294:	b480      	push	{r7}
 8050296:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8050298:	4b05      	ldr	r3, [pc, #20]	; (80502b0 <tcp_trigger_input_pcb_close+0x1c>)
 805029a:	781b      	ldrb	r3, [r3, #0]
 805029c:	f043 0310 	orr.w	r3, r3, #16
 80502a0:	b2da      	uxtb	r2, r3
 80502a2:	4b03      	ldr	r3, [pc, #12]	; (80502b0 <tcp_trigger_input_pcb_close+0x1c>)
 80502a4:	701a      	strb	r2, [r3, #0]
}
 80502a6:	bf00      	nop
 80502a8:	46bd      	mov	sp, r7
 80502aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80502ae:	4770      	bx	lr
 80502b0:	20023811 	.word	0x20023811

080502b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80502b4:	b580      	push	{r7, lr}
 80502b6:	b084      	sub	sp, #16
 80502b8:	af00      	add	r7, sp, #0
 80502ba:	60f8      	str	r0, [r7, #12]
 80502bc:	60b9      	str	r1, [r7, #8]
 80502be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80502c0:	68fb      	ldr	r3, [r7, #12]
 80502c2:	2b00      	cmp	r3, #0
 80502c4:	d00a      	beq.n	80502dc <tcp_route+0x28>
 80502c6:	68fb      	ldr	r3, [r7, #12]
 80502c8:	7a1b      	ldrb	r3, [r3, #8]
 80502ca:	2b00      	cmp	r3, #0
 80502cc:	d006      	beq.n	80502dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80502ce:	68fb      	ldr	r3, [r7, #12]
 80502d0:	7a1b      	ldrb	r3, [r3, #8]
 80502d2:	4618      	mov	r0, r3
 80502d4:	f7fb fb20 	bl	804b918 <netif_get_by_index>
 80502d8:	4603      	mov	r3, r0
 80502da:	e003      	b.n	80502e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80502dc:	6878      	ldr	r0, [r7, #4]
 80502de:	f002 fead 	bl	805303c <ip4_route>
 80502e2:	4603      	mov	r3, r0
  }
}
 80502e4:	4618      	mov	r0, r3
 80502e6:	3710      	adds	r7, #16
 80502e8:	46bd      	mov	sp, r7
 80502ea:	bd80      	pop	{r7, pc}

080502ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80502ec:	b590      	push	{r4, r7, lr}
 80502ee:	b087      	sub	sp, #28
 80502f0:	af00      	add	r7, sp, #0
 80502f2:	60f8      	str	r0, [r7, #12]
 80502f4:	60b9      	str	r1, [r7, #8]
 80502f6:	603b      	str	r3, [r7, #0]
 80502f8:	4613      	mov	r3, r2
 80502fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80502fc:	68fb      	ldr	r3, [r7, #12]
 80502fe:	2b00      	cmp	r3, #0
 8050300:	d105      	bne.n	805030e <tcp_create_segment+0x22>
 8050302:	4b44      	ldr	r3, [pc, #272]	; (8050414 <tcp_create_segment+0x128>)
 8050304:	22a3      	movs	r2, #163	; 0xa3
 8050306:	4944      	ldr	r1, [pc, #272]	; (8050418 <tcp_create_segment+0x12c>)
 8050308:	4844      	ldr	r0, [pc, #272]	; (805041c <tcp_create_segment+0x130>)
 805030a:	f004 fa99 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 805030e:	68bb      	ldr	r3, [r7, #8]
 8050310:	2b00      	cmp	r3, #0
 8050312:	d105      	bne.n	8050320 <tcp_create_segment+0x34>
 8050314:	4b3f      	ldr	r3, [pc, #252]	; (8050414 <tcp_create_segment+0x128>)
 8050316:	22a4      	movs	r2, #164	; 0xa4
 8050318:	4941      	ldr	r1, [pc, #260]	; (8050420 <tcp_create_segment+0x134>)
 805031a:	4840      	ldr	r0, [pc, #256]	; (805041c <tcp_create_segment+0x130>)
 805031c:	f004 fa90 	bl	8054840 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8050320:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8050324:	009b      	lsls	r3, r3, #2
 8050326:	b2db      	uxtb	r3, r3
 8050328:	f003 0304 	and.w	r3, r3, #4
 805032c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 805032e:	2003      	movs	r0, #3
 8050330:	f7fa ff66 	bl	804b200 <memp_malloc>
 8050334:	6138      	str	r0, [r7, #16]
 8050336:	693b      	ldr	r3, [r7, #16]
 8050338:	2b00      	cmp	r3, #0
 805033a:	d104      	bne.n	8050346 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 805033c:	68b8      	ldr	r0, [r7, #8]
 805033e:	f7fb fe79 	bl	804c034 <pbuf_free>
    return NULL;
 8050342:	2300      	movs	r3, #0
 8050344:	e061      	b.n	805040a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8050346:	693b      	ldr	r3, [r7, #16]
 8050348:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 805034c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 805034e:	693b      	ldr	r3, [r7, #16]
 8050350:	2200      	movs	r2, #0
 8050352:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8050354:	693b      	ldr	r3, [r7, #16]
 8050356:	68ba      	ldr	r2, [r7, #8]
 8050358:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 805035a:	68bb      	ldr	r3, [r7, #8]
 805035c:	891a      	ldrh	r2, [r3, #8]
 805035e:	7dfb      	ldrb	r3, [r7, #23]
 8050360:	b29b      	uxth	r3, r3
 8050362:	429a      	cmp	r2, r3
 8050364:	d205      	bcs.n	8050372 <tcp_create_segment+0x86>
 8050366:	4b2b      	ldr	r3, [pc, #172]	; (8050414 <tcp_create_segment+0x128>)
 8050368:	22b0      	movs	r2, #176	; 0xb0
 805036a:	492e      	ldr	r1, [pc, #184]	; (8050424 <tcp_create_segment+0x138>)
 805036c:	482b      	ldr	r0, [pc, #172]	; (805041c <tcp_create_segment+0x130>)
 805036e:	f004 fa67 	bl	8054840 <iprintf>
  seg->len = p->tot_len - optlen;
 8050372:	68bb      	ldr	r3, [r7, #8]
 8050374:	891a      	ldrh	r2, [r3, #8]
 8050376:	7dfb      	ldrb	r3, [r7, #23]
 8050378:	b29b      	uxth	r3, r3
 805037a:	1ad3      	subs	r3, r2, r3
 805037c:	b29a      	uxth	r2, r3
 805037e:	693b      	ldr	r3, [r7, #16]
 8050380:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8050382:	2114      	movs	r1, #20
 8050384:	68b8      	ldr	r0, [r7, #8]
 8050386:	f7fb fdbf 	bl	804bf08 <pbuf_add_header>
 805038a:	4603      	mov	r3, r0
 805038c:	2b00      	cmp	r3, #0
 805038e:	d004      	beq.n	805039a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8050390:	6938      	ldr	r0, [r7, #16]
 8050392:	f7fd f8ce 	bl	804d532 <tcp_seg_free>
    return NULL;
 8050396:	2300      	movs	r3, #0
 8050398:	e037      	b.n	805040a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 805039a:	693b      	ldr	r3, [r7, #16]
 805039c:	685b      	ldr	r3, [r3, #4]
 805039e:	685a      	ldr	r2, [r3, #4]
 80503a0:	693b      	ldr	r3, [r7, #16]
 80503a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80503a4:	68fb      	ldr	r3, [r7, #12]
 80503a6:	8ada      	ldrh	r2, [r3, #22]
 80503a8:	693b      	ldr	r3, [r7, #16]
 80503aa:	68dc      	ldr	r4, [r3, #12]
 80503ac:	4610      	mov	r0, r2
 80503ae:	f7fa fa4f 	bl	804a850 <lwip_htons>
 80503b2:	4603      	mov	r3, r0
 80503b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80503b6:	68fb      	ldr	r3, [r7, #12]
 80503b8:	8b1a      	ldrh	r2, [r3, #24]
 80503ba:	693b      	ldr	r3, [r7, #16]
 80503bc:	68dc      	ldr	r4, [r3, #12]
 80503be:	4610      	mov	r0, r2
 80503c0:	f7fa fa46 	bl	804a850 <lwip_htons>
 80503c4:	4603      	mov	r3, r0
 80503c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80503c8:	693b      	ldr	r3, [r7, #16]
 80503ca:	68dc      	ldr	r4, [r3, #12]
 80503cc:	6838      	ldr	r0, [r7, #0]
 80503ce:	f7fa fa54 	bl	804a87a <lwip_htonl>
 80503d2:	4603      	mov	r3, r0
 80503d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80503d6:	7dfb      	ldrb	r3, [r7, #23]
 80503d8:	089b      	lsrs	r3, r3, #2
 80503da:	b2db      	uxtb	r3, r3
 80503dc:	b29b      	uxth	r3, r3
 80503de:	3305      	adds	r3, #5
 80503e0:	b29b      	uxth	r3, r3
 80503e2:	031b      	lsls	r3, r3, #12
 80503e4:	b29a      	uxth	r2, r3
 80503e6:	79fb      	ldrb	r3, [r7, #7]
 80503e8:	b29b      	uxth	r3, r3
 80503ea:	4313      	orrs	r3, r2
 80503ec:	b29a      	uxth	r2, r3
 80503ee:	693b      	ldr	r3, [r7, #16]
 80503f0:	68dc      	ldr	r4, [r3, #12]
 80503f2:	4610      	mov	r0, r2
 80503f4:	f7fa fa2c 	bl	804a850 <lwip_htons>
 80503f8:	4603      	mov	r3, r0
 80503fa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80503fc:	693b      	ldr	r3, [r7, #16]
 80503fe:	68db      	ldr	r3, [r3, #12]
 8050400:	2200      	movs	r2, #0
 8050402:	749a      	strb	r2, [r3, #18]
 8050404:	2200      	movs	r2, #0
 8050406:	74da      	strb	r2, [r3, #19]
  return seg;
 8050408:	693b      	ldr	r3, [r7, #16]
}
 805040a:	4618      	mov	r0, r3
 805040c:	371c      	adds	r7, #28
 805040e:	46bd      	mov	sp, r7
 8050410:	bd90      	pop	{r4, r7, pc}
 8050412:	bf00      	nop
 8050414:	08057110 	.word	0x08057110
 8050418:	08057144 	.word	0x08057144
 805041c:	08057164 	.word	0x08057164
 8050420:	0805718c 	.word	0x0805718c
 8050424:	080571b0 	.word	0x080571b0

08050428 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8050428:	b590      	push	{r4, r7, lr}
 805042a:	b08b      	sub	sp, #44	; 0x2c
 805042c:	af02      	add	r7, sp, #8
 805042e:	6078      	str	r0, [r7, #4]
 8050430:	460b      	mov	r3, r1
 8050432:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8050434:	2300      	movs	r3, #0
 8050436:	61fb      	str	r3, [r7, #28]
 8050438:	2300      	movs	r3, #0
 805043a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 805043c:	2300      	movs	r3, #0
 805043e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8050440:	687b      	ldr	r3, [r7, #4]
 8050442:	2b00      	cmp	r3, #0
 8050444:	d106      	bne.n	8050454 <tcp_split_unsent_seg+0x2c>
 8050446:	4b95      	ldr	r3, [pc, #596]	; (805069c <tcp_split_unsent_seg+0x274>)
 8050448:	f240 324b 	movw	r2, #843	; 0x34b
 805044c:	4994      	ldr	r1, [pc, #592]	; (80506a0 <tcp_split_unsent_seg+0x278>)
 805044e:	4895      	ldr	r0, [pc, #596]	; (80506a4 <tcp_split_unsent_seg+0x27c>)
 8050450:	f004 f9f6 	bl	8054840 <iprintf>

  useg = pcb->unsent;
 8050454:	687b      	ldr	r3, [r7, #4]
 8050456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050458:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 805045a:	697b      	ldr	r3, [r7, #20]
 805045c:	2b00      	cmp	r3, #0
 805045e:	d102      	bne.n	8050466 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8050460:	f04f 33ff 	mov.w	r3, #4294967295
 8050464:	e116      	b.n	8050694 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8050466:	887b      	ldrh	r3, [r7, #2]
 8050468:	2b00      	cmp	r3, #0
 805046a:	d109      	bne.n	8050480 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 805046c:	4b8b      	ldr	r3, [pc, #556]	; (805069c <tcp_split_unsent_seg+0x274>)
 805046e:	f240 3253 	movw	r2, #851	; 0x353
 8050472:	498d      	ldr	r1, [pc, #564]	; (80506a8 <tcp_split_unsent_seg+0x280>)
 8050474:	488b      	ldr	r0, [pc, #556]	; (80506a4 <tcp_split_unsent_seg+0x27c>)
 8050476:	f004 f9e3 	bl	8054840 <iprintf>
    return ERR_VAL;
 805047a:	f06f 0305 	mvn.w	r3, #5
 805047e:	e109      	b.n	8050694 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8050480:	697b      	ldr	r3, [r7, #20]
 8050482:	891b      	ldrh	r3, [r3, #8]
 8050484:	887a      	ldrh	r2, [r7, #2]
 8050486:	429a      	cmp	r2, r3
 8050488:	d301      	bcc.n	805048e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 805048a:	2300      	movs	r3, #0
 805048c:	e102      	b.n	8050694 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 805048e:	687b      	ldr	r3, [r7, #4]
 8050490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8050492:	887a      	ldrh	r2, [r7, #2]
 8050494:	429a      	cmp	r2, r3
 8050496:	d906      	bls.n	80504a6 <tcp_split_unsent_seg+0x7e>
 8050498:	4b80      	ldr	r3, [pc, #512]	; (805069c <tcp_split_unsent_seg+0x274>)
 805049a:	f240 325b 	movw	r2, #859	; 0x35b
 805049e:	4983      	ldr	r1, [pc, #524]	; (80506ac <tcp_split_unsent_seg+0x284>)
 80504a0:	4880      	ldr	r0, [pc, #512]	; (80506a4 <tcp_split_unsent_seg+0x27c>)
 80504a2:	f004 f9cd 	bl	8054840 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80504a6:	697b      	ldr	r3, [r7, #20]
 80504a8:	891b      	ldrh	r3, [r3, #8]
 80504aa:	2b00      	cmp	r3, #0
 80504ac:	d106      	bne.n	80504bc <tcp_split_unsent_seg+0x94>
 80504ae:	4b7b      	ldr	r3, [pc, #492]	; (805069c <tcp_split_unsent_seg+0x274>)
 80504b0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80504b4:	497e      	ldr	r1, [pc, #504]	; (80506b0 <tcp_split_unsent_seg+0x288>)
 80504b6:	487b      	ldr	r0, [pc, #492]	; (80506a4 <tcp_split_unsent_seg+0x27c>)
 80504b8:	f004 f9c2 	bl	8054840 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80504bc:	697b      	ldr	r3, [r7, #20]
 80504be:	7a9b      	ldrb	r3, [r3, #10]
 80504c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80504c2:	7bfb      	ldrb	r3, [r7, #15]
 80504c4:	009b      	lsls	r3, r3, #2
 80504c6:	b2db      	uxtb	r3, r3
 80504c8:	f003 0304 	and.w	r3, r3, #4
 80504cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80504ce:	697b      	ldr	r3, [r7, #20]
 80504d0:	891a      	ldrh	r2, [r3, #8]
 80504d2:	887b      	ldrh	r3, [r7, #2]
 80504d4:	1ad3      	subs	r3, r2, r3
 80504d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80504d8:	7bbb      	ldrb	r3, [r7, #14]
 80504da:	b29a      	uxth	r2, r3
 80504dc:	89bb      	ldrh	r3, [r7, #12]
 80504de:	4413      	add	r3, r2
 80504e0:	b29b      	uxth	r3, r3
 80504e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80504e6:	4619      	mov	r1, r3
 80504e8:	2036      	movs	r0, #54	; 0x36
 80504ea:	f7fb fabf 	bl	804ba6c <pbuf_alloc>
 80504ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80504f0:	693b      	ldr	r3, [r7, #16]
 80504f2:	2b00      	cmp	r3, #0
 80504f4:	f000 80b7 	beq.w	8050666 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80504f8:	697b      	ldr	r3, [r7, #20]
 80504fa:	685b      	ldr	r3, [r3, #4]
 80504fc:	891a      	ldrh	r2, [r3, #8]
 80504fe:	697b      	ldr	r3, [r7, #20]
 8050500:	891b      	ldrh	r3, [r3, #8]
 8050502:	1ad3      	subs	r3, r2, r3
 8050504:	b29a      	uxth	r2, r3
 8050506:	887b      	ldrh	r3, [r7, #2]
 8050508:	4413      	add	r3, r2
 805050a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 805050c:	697b      	ldr	r3, [r7, #20]
 805050e:	6858      	ldr	r0, [r3, #4]
 8050510:	693b      	ldr	r3, [r7, #16]
 8050512:	685a      	ldr	r2, [r3, #4]
 8050514:	7bbb      	ldrb	r3, [r7, #14]
 8050516:	18d1      	adds	r1, r2, r3
 8050518:	897b      	ldrh	r3, [r7, #10]
 805051a:	89ba      	ldrh	r2, [r7, #12]
 805051c:	f7fb ff80 	bl	804c420 <pbuf_copy_partial>
 8050520:	4603      	mov	r3, r0
 8050522:	461a      	mov	r2, r3
 8050524:	89bb      	ldrh	r3, [r7, #12]
 8050526:	4293      	cmp	r3, r2
 8050528:	f040 809f 	bne.w	805066a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 805052c:	697b      	ldr	r3, [r7, #20]
 805052e:	68db      	ldr	r3, [r3, #12]
 8050530:	899b      	ldrh	r3, [r3, #12]
 8050532:	b29b      	uxth	r3, r3
 8050534:	4618      	mov	r0, r3
 8050536:	f7fa f98b 	bl	804a850 <lwip_htons>
 805053a:	4603      	mov	r3, r0
 805053c:	b2db      	uxtb	r3, r3
 805053e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8050542:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8050544:	2300      	movs	r3, #0
 8050546:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8050548:	7efb      	ldrb	r3, [r7, #27]
 805054a:	f003 0308 	and.w	r3, r3, #8
 805054e:	2b00      	cmp	r3, #0
 8050550:	d007      	beq.n	8050562 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8050552:	7efb      	ldrb	r3, [r7, #27]
 8050554:	f023 0308 	bic.w	r3, r3, #8
 8050558:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 805055a:	7ebb      	ldrb	r3, [r7, #26]
 805055c:	f043 0308 	orr.w	r3, r3, #8
 8050560:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8050562:	7efb      	ldrb	r3, [r7, #27]
 8050564:	f003 0301 	and.w	r3, r3, #1
 8050568:	2b00      	cmp	r3, #0
 805056a:	d007      	beq.n	805057c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 805056c:	7efb      	ldrb	r3, [r7, #27]
 805056e:	f023 0301 	bic.w	r3, r3, #1
 8050572:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8050574:	7ebb      	ldrb	r3, [r7, #26]
 8050576:	f043 0301 	orr.w	r3, r3, #1
 805057a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 805057c:	697b      	ldr	r3, [r7, #20]
 805057e:	68db      	ldr	r3, [r3, #12]
 8050580:	685b      	ldr	r3, [r3, #4]
 8050582:	4618      	mov	r0, r3
 8050584:	f7fa f979 	bl	804a87a <lwip_htonl>
 8050588:	4602      	mov	r2, r0
 805058a:	887b      	ldrh	r3, [r7, #2]
 805058c:	18d1      	adds	r1, r2, r3
 805058e:	7eba      	ldrb	r2, [r7, #26]
 8050590:	7bfb      	ldrb	r3, [r7, #15]
 8050592:	9300      	str	r3, [sp, #0]
 8050594:	460b      	mov	r3, r1
 8050596:	6939      	ldr	r1, [r7, #16]
 8050598:	6878      	ldr	r0, [r7, #4]
 805059a:	f7ff fea7 	bl	80502ec <tcp_create_segment>
 805059e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80505a0:	69fb      	ldr	r3, [r7, #28]
 80505a2:	2b00      	cmp	r3, #0
 80505a4:	d063      	beq.n	805066e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80505a6:	697b      	ldr	r3, [r7, #20]
 80505a8:	685b      	ldr	r3, [r3, #4]
 80505aa:	4618      	mov	r0, r3
 80505ac:	f7fb fdd0 	bl	804c150 <pbuf_clen>
 80505b0:	4603      	mov	r3, r0
 80505b2:	461a      	mov	r2, r3
 80505b4:	687b      	ldr	r3, [r7, #4]
 80505b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80505ba:	1a9b      	subs	r3, r3, r2
 80505bc:	b29a      	uxth	r2, r3
 80505be:	687b      	ldr	r3, [r7, #4]
 80505c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80505c4:	697b      	ldr	r3, [r7, #20]
 80505c6:	6858      	ldr	r0, [r3, #4]
 80505c8:	697b      	ldr	r3, [r7, #20]
 80505ca:	685b      	ldr	r3, [r3, #4]
 80505cc:	891a      	ldrh	r2, [r3, #8]
 80505ce:	89bb      	ldrh	r3, [r7, #12]
 80505d0:	1ad3      	subs	r3, r2, r3
 80505d2:	b29b      	uxth	r3, r3
 80505d4:	4619      	mov	r1, r3
 80505d6:	f7fb fba7 	bl	804bd28 <pbuf_realloc>
  useg->len -= remainder;
 80505da:	697b      	ldr	r3, [r7, #20]
 80505dc:	891a      	ldrh	r2, [r3, #8]
 80505de:	89bb      	ldrh	r3, [r7, #12]
 80505e0:	1ad3      	subs	r3, r2, r3
 80505e2:	b29a      	uxth	r2, r3
 80505e4:	697b      	ldr	r3, [r7, #20]
 80505e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80505e8:	697b      	ldr	r3, [r7, #20]
 80505ea:	68db      	ldr	r3, [r3, #12]
 80505ec:	899b      	ldrh	r3, [r3, #12]
 80505ee:	b29c      	uxth	r4, r3
 80505f0:	7efb      	ldrb	r3, [r7, #27]
 80505f2:	b29b      	uxth	r3, r3
 80505f4:	4618      	mov	r0, r3
 80505f6:	f7fa f92b 	bl	804a850 <lwip_htons>
 80505fa:	4603      	mov	r3, r0
 80505fc:	461a      	mov	r2, r3
 80505fe:	697b      	ldr	r3, [r7, #20]
 8050600:	68db      	ldr	r3, [r3, #12]
 8050602:	4322      	orrs	r2, r4
 8050604:	b292      	uxth	r2, r2
 8050606:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8050608:	697b      	ldr	r3, [r7, #20]
 805060a:	685b      	ldr	r3, [r3, #4]
 805060c:	4618      	mov	r0, r3
 805060e:	f7fb fd9f 	bl	804c150 <pbuf_clen>
 8050612:	4603      	mov	r3, r0
 8050614:	461a      	mov	r2, r3
 8050616:	687b      	ldr	r3, [r7, #4]
 8050618:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 805061c:	4413      	add	r3, r2
 805061e:	b29a      	uxth	r2, r3
 8050620:	687b      	ldr	r3, [r7, #4]
 8050622:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8050626:	69fb      	ldr	r3, [r7, #28]
 8050628:	685b      	ldr	r3, [r3, #4]
 805062a:	4618      	mov	r0, r3
 805062c:	f7fb fd90 	bl	804c150 <pbuf_clen>
 8050630:	4603      	mov	r3, r0
 8050632:	461a      	mov	r2, r3
 8050634:	687b      	ldr	r3, [r7, #4]
 8050636:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 805063a:	4413      	add	r3, r2
 805063c:	b29a      	uxth	r2, r3
 805063e:	687b      	ldr	r3, [r7, #4]
 8050640:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8050644:	697b      	ldr	r3, [r7, #20]
 8050646:	681a      	ldr	r2, [r3, #0]
 8050648:	69fb      	ldr	r3, [r7, #28]
 805064a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 805064c:	697b      	ldr	r3, [r7, #20]
 805064e:	69fa      	ldr	r2, [r7, #28]
 8050650:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8050652:	69fb      	ldr	r3, [r7, #28]
 8050654:	681b      	ldr	r3, [r3, #0]
 8050656:	2b00      	cmp	r3, #0
 8050658:	d103      	bne.n	8050662 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 805065a:	687b      	ldr	r3, [r7, #4]
 805065c:	2200      	movs	r2, #0
 805065e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8050662:	2300      	movs	r3, #0
 8050664:	e016      	b.n	8050694 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8050666:	bf00      	nop
 8050668:	e002      	b.n	8050670 <tcp_split_unsent_seg+0x248>
    goto memerr;
 805066a:	bf00      	nop
 805066c:	e000      	b.n	8050670 <tcp_split_unsent_seg+0x248>
    goto memerr;
 805066e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8050670:	69fb      	ldr	r3, [r7, #28]
 8050672:	2b00      	cmp	r3, #0
 8050674:	d006      	beq.n	8050684 <tcp_split_unsent_seg+0x25c>
 8050676:	4b09      	ldr	r3, [pc, #36]	; (805069c <tcp_split_unsent_seg+0x274>)
 8050678:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 805067c:	490d      	ldr	r1, [pc, #52]	; (80506b4 <tcp_split_unsent_seg+0x28c>)
 805067e:	4809      	ldr	r0, [pc, #36]	; (80506a4 <tcp_split_unsent_seg+0x27c>)
 8050680:	f004 f8de 	bl	8054840 <iprintf>
  if (p != NULL) {
 8050684:	693b      	ldr	r3, [r7, #16]
 8050686:	2b00      	cmp	r3, #0
 8050688:	d002      	beq.n	8050690 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 805068a:	6938      	ldr	r0, [r7, #16]
 805068c:	f7fb fcd2 	bl	804c034 <pbuf_free>
  }

  return ERR_MEM;
 8050690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8050694:	4618      	mov	r0, r3
 8050696:	3724      	adds	r7, #36	; 0x24
 8050698:	46bd      	mov	sp, r7
 805069a:	bd90      	pop	{r4, r7, pc}
 805069c:	08057110 	.word	0x08057110
 80506a0:	080574a4 	.word	0x080574a4
 80506a4:	08057164 	.word	0x08057164
 80506a8:	080574c8 	.word	0x080574c8
 80506ac:	080574ec 	.word	0x080574ec
 80506b0:	080574fc 	.word	0x080574fc
 80506b4:	0805750c 	.word	0x0805750c

080506b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80506b8:	b590      	push	{r4, r7, lr}
 80506ba:	b085      	sub	sp, #20
 80506bc:	af00      	add	r7, sp, #0
 80506be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80506c0:	687b      	ldr	r3, [r7, #4]
 80506c2:	2b00      	cmp	r3, #0
 80506c4:	d106      	bne.n	80506d4 <tcp_send_fin+0x1c>
 80506c6:	4b21      	ldr	r3, [pc, #132]	; (805074c <tcp_send_fin+0x94>)
 80506c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80506cc:	4920      	ldr	r1, [pc, #128]	; (8050750 <tcp_send_fin+0x98>)
 80506ce:	4821      	ldr	r0, [pc, #132]	; (8050754 <tcp_send_fin+0x9c>)
 80506d0:	f004 f8b6 	bl	8054840 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80506d4:	687b      	ldr	r3, [r7, #4]
 80506d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80506d8:	2b00      	cmp	r3, #0
 80506da:	d02e      	beq.n	805073a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80506dc:	687b      	ldr	r3, [r7, #4]
 80506de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80506e0:	60fb      	str	r3, [r7, #12]
 80506e2:	e002      	b.n	80506ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80506e4:	68fb      	ldr	r3, [r7, #12]
 80506e6:	681b      	ldr	r3, [r3, #0]
 80506e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80506ea:	68fb      	ldr	r3, [r7, #12]
 80506ec:	681b      	ldr	r3, [r3, #0]
 80506ee:	2b00      	cmp	r3, #0
 80506f0:	d1f8      	bne.n	80506e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80506f2:	68fb      	ldr	r3, [r7, #12]
 80506f4:	68db      	ldr	r3, [r3, #12]
 80506f6:	899b      	ldrh	r3, [r3, #12]
 80506f8:	b29b      	uxth	r3, r3
 80506fa:	4618      	mov	r0, r3
 80506fc:	f7fa f8a8 	bl	804a850 <lwip_htons>
 8050700:	4603      	mov	r3, r0
 8050702:	b2db      	uxtb	r3, r3
 8050704:	f003 0307 	and.w	r3, r3, #7
 8050708:	2b00      	cmp	r3, #0
 805070a:	d116      	bne.n	805073a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 805070c:	68fb      	ldr	r3, [r7, #12]
 805070e:	68db      	ldr	r3, [r3, #12]
 8050710:	899b      	ldrh	r3, [r3, #12]
 8050712:	b29c      	uxth	r4, r3
 8050714:	2001      	movs	r0, #1
 8050716:	f7fa f89b 	bl	804a850 <lwip_htons>
 805071a:	4603      	mov	r3, r0
 805071c:	461a      	mov	r2, r3
 805071e:	68fb      	ldr	r3, [r7, #12]
 8050720:	68db      	ldr	r3, [r3, #12]
 8050722:	4322      	orrs	r2, r4
 8050724:	b292      	uxth	r2, r2
 8050726:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8050728:	687b      	ldr	r3, [r7, #4]
 805072a:	8b5b      	ldrh	r3, [r3, #26]
 805072c:	f043 0320 	orr.w	r3, r3, #32
 8050730:	b29a      	uxth	r2, r3
 8050732:	687b      	ldr	r3, [r7, #4]
 8050734:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8050736:	2300      	movs	r3, #0
 8050738:	e004      	b.n	8050744 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 805073a:	2101      	movs	r1, #1
 805073c:	6878      	ldr	r0, [r7, #4]
 805073e:	f000 f80b 	bl	8050758 <tcp_enqueue_flags>
 8050742:	4603      	mov	r3, r0
}
 8050744:	4618      	mov	r0, r3
 8050746:	3714      	adds	r7, #20
 8050748:	46bd      	mov	sp, r7
 805074a:	bd90      	pop	{r4, r7, pc}
 805074c:	08057110 	.word	0x08057110
 8050750:	08057518 	.word	0x08057518
 8050754:	08057164 	.word	0x08057164

08050758 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8050758:	b580      	push	{r7, lr}
 805075a:	b08a      	sub	sp, #40	; 0x28
 805075c:	af02      	add	r7, sp, #8
 805075e:	6078      	str	r0, [r7, #4]
 8050760:	460b      	mov	r3, r1
 8050762:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8050764:	2300      	movs	r3, #0
 8050766:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8050768:	2300      	movs	r3, #0
 805076a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 805076c:	78fb      	ldrb	r3, [r7, #3]
 805076e:	f003 0303 	and.w	r3, r3, #3
 8050772:	2b00      	cmp	r3, #0
 8050774:	d106      	bne.n	8050784 <tcp_enqueue_flags+0x2c>
 8050776:	4b67      	ldr	r3, [pc, #412]	; (8050914 <tcp_enqueue_flags+0x1bc>)
 8050778:	f240 4211 	movw	r2, #1041	; 0x411
 805077c:	4966      	ldr	r1, [pc, #408]	; (8050918 <tcp_enqueue_flags+0x1c0>)
 805077e:	4867      	ldr	r0, [pc, #412]	; (805091c <tcp_enqueue_flags+0x1c4>)
 8050780:	f004 f85e 	bl	8054840 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8050784:	687b      	ldr	r3, [r7, #4]
 8050786:	2b00      	cmp	r3, #0
 8050788:	d106      	bne.n	8050798 <tcp_enqueue_flags+0x40>
 805078a:	4b62      	ldr	r3, [pc, #392]	; (8050914 <tcp_enqueue_flags+0x1bc>)
 805078c:	f240 4213 	movw	r2, #1043	; 0x413
 8050790:	4963      	ldr	r1, [pc, #396]	; (8050920 <tcp_enqueue_flags+0x1c8>)
 8050792:	4862      	ldr	r0, [pc, #392]	; (805091c <tcp_enqueue_flags+0x1c4>)
 8050794:	f004 f854 	bl	8054840 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8050798:	78fb      	ldrb	r3, [r7, #3]
 805079a:	f003 0302 	and.w	r3, r3, #2
 805079e:	2b00      	cmp	r3, #0
 80507a0:	d001      	beq.n	80507a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80507a2:	2301      	movs	r3, #1
 80507a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80507a6:	7ffb      	ldrb	r3, [r7, #31]
 80507a8:	009b      	lsls	r3, r3, #2
 80507aa:	b2db      	uxtb	r3, r3
 80507ac:	f003 0304 	and.w	r3, r3, #4
 80507b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80507b2:	7dfb      	ldrb	r3, [r7, #23]
 80507b4:	b29b      	uxth	r3, r3
 80507b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80507ba:	4619      	mov	r1, r3
 80507bc:	2036      	movs	r0, #54	; 0x36
 80507be:	f7fb f955 	bl	804ba6c <pbuf_alloc>
 80507c2:	6138      	str	r0, [r7, #16]
 80507c4:	693b      	ldr	r3, [r7, #16]
 80507c6:	2b00      	cmp	r3, #0
 80507c8:	d109      	bne.n	80507de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80507ca:	687b      	ldr	r3, [r7, #4]
 80507cc:	8b5b      	ldrh	r3, [r3, #26]
 80507ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80507d2:	b29a      	uxth	r2, r3
 80507d4:	687b      	ldr	r3, [r7, #4]
 80507d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80507d8:	f04f 33ff 	mov.w	r3, #4294967295
 80507dc:	e095      	b.n	805090a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80507de:	693b      	ldr	r3, [r7, #16]
 80507e0:	895a      	ldrh	r2, [r3, #10]
 80507e2:	7dfb      	ldrb	r3, [r7, #23]
 80507e4:	b29b      	uxth	r3, r3
 80507e6:	429a      	cmp	r2, r3
 80507e8:	d206      	bcs.n	80507f8 <tcp_enqueue_flags+0xa0>
 80507ea:	4b4a      	ldr	r3, [pc, #296]	; (8050914 <tcp_enqueue_flags+0x1bc>)
 80507ec:	f240 4239 	movw	r2, #1081	; 0x439
 80507f0:	494c      	ldr	r1, [pc, #304]	; (8050924 <tcp_enqueue_flags+0x1cc>)
 80507f2:	484a      	ldr	r0, [pc, #296]	; (805091c <tcp_enqueue_flags+0x1c4>)
 80507f4:	f004 f824 	bl	8054840 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80507f8:	687b      	ldr	r3, [r7, #4]
 80507fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80507fc:	78fa      	ldrb	r2, [r7, #3]
 80507fe:	7ffb      	ldrb	r3, [r7, #31]
 8050800:	9300      	str	r3, [sp, #0]
 8050802:	460b      	mov	r3, r1
 8050804:	6939      	ldr	r1, [r7, #16]
 8050806:	6878      	ldr	r0, [r7, #4]
 8050808:	f7ff fd70 	bl	80502ec <tcp_create_segment>
 805080c:	60f8      	str	r0, [r7, #12]
 805080e:	68fb      	ldr	r3, [r7, #12]
 8050810:	2b00      	cmp	r3, #0
 8050812:	d109      	bne.n	8050828 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8050814:	687b      	ldr	r3, [r7, #4]
 8050816:	8b5b      	ldrh	r3, [r3, #26]
 8050818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805081c:	b29a      	uxth	r2, r3
 805081e:	687b      	ldr	r3, [r7, #4]
 8050820:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8050822:	f04f 33ff 	mov.w	r3, #4294967295
 8050826:	e070      	b.n	805090a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8050828:	68fb      	ldr	r3, [r7, #12]
 805082a:	68db      	ldr	r3, [r3, #12]
 805082c:	f003 0303 	and.w	r3, r3, #3
 8050830:	2b00      	cmp	r3, #0
 8050832:	d006      	beq.n	8050842 <tcp_enqueue_flags+0xea>
 8050834:	4b37      	ldr	r3, [pc, #220]	; (8050914 <tcp_enqueue_flags+0x1bc>)
 8050836:	f240 4242 	movw	r2, #1090	; 0x442
 805083a:	493b      	ldr	r1, [pc, #236]	; (8050928 <tcp_enqueue_flags+0x1d0>)
 805083c:	4837      	ldr	r0, [pc, #220]	; (805091c <tcp_enqueue_flags+0x1c4>)
 805083e:	f003 ffff 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8050842:	68fb      	ldr	r3, [r7, #12]
 8050844:	891b      	ldrh	r3, [r3, #8]
 8050846:	2b00      	cmp	r3, #0
 8050848:	d006      	beq.n	8050858 <tcp_enqueue_flags+0x100>
 805084a:	4b32      	ldr	r3, [pc, #200]	; (8050914 <tcp_enqueue_flags+0x1bc>)
 805084c:	f240 4243 	movw	r2, #1091	; 0x443
 8050850:	4936      	ldr	r1, [pc, #216]	; (805092c <tcp_enqueue_flags+0x1d4>)
 8050852:	4832      	ldr	r0, [pc, #200]	; (805091c <tcp_enqueue_flags+0x1c4>)
 8050854:	f003 fff4 	bl	8054840 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8050858:	687b      	ldr	r3, [r7, #4]
 805085a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 805085c:	2b00      	cmp	r3, #0
 805085e:	d103      	bne.n	8050868 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8050860:	687b      	ldr	r3, [r7, #4]
 8050862:	68fa      	ldr	r2, [r7, #12]
 8050864:	66da      	str	r2, [r3, #108]	; 0x6c
 8050866:	e00d      	b.n	8050884 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8050868:	687b      	ldr	r3, [r7, #4]
 805086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 805086c:	61bb      	str	r3, [r7, #24]
 805086e:	e002      	b.n	8050876 <tcp_enqueue_flags+0x11e>
 8050870:	69bb      	ldr	r3, [r7, #24]
 8050872:	681b      	ldr	r3, [r3, #0]
 8050874:	61bb      	str	r3, [r7, #24]
 8050876:	69bb      	ldr	r3, [r7, #24]
 8050878:	681b      	ldr	r3, [r3, #0]
 805087a:	2b00      	cmp	r3, #0
 805087c:	d1f8      	bne.n	8050870 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 805087e:	69bb      	ldr	r3, [r7, #24]
 8050880:	68fa      	ldr	r2, [r7, #12]
 8050882:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8050884:	687b      	ldr	r3, [r7, #4]
 8050886:	2200      	movs	r2, #0
 8050888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 805088c:	78fb      	ldrb	r3, [r7, #3]
 805088e:	f003 0302 	and.w	r3, r3, #2
 8050892:	2b00      	cmp	r3, #0
 8050894:	d104      	bne.n	80508a0 <tcp_enqueue_flags+0x148>
 8050896:	78fb      	ldrb	r3, [r7, #3]
 8050898:	f003 0301 	and.w	r3, r3, #1
 805089c:	2b00      	cmp	r3, #0
 805089e:	d004      	beq.n	80508aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80508a0:	687b      	ldr	r3, [r7, #4]
 80508a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80508a4:	1c5a      	adds	r2, r3, #1
 80508a6:	687b      	ldr	r3, [r7, #4]
 80508a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80508aa:	78fb      	ldrb	r3, [r7, #3]
 80508ac:	f003 0301 	and.w	r3, r3, #1
 80508b0:	2b00      	cmp	r3, #0
 80508b2:	d006      	beq.n	80508c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80508b4:	687b      	ldr	r3, [r7, #4]
 80508b6:	8b5b      	ldrh	r3, [r3, #26]
 80508b8:	f043 0320 	orr.w	r3, r3, #32
 80508bc:	b29a      	uxth	r2, r3
 80508be:	687b      	ldr	r3, [r7, #4]
 80508c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80508c2:	68fb      	ldr	r3, [r7, #12]
 80508c4:	685b      	ldr	r3, [r3, #4]
 80508c6:	4618      	mov	r0, r3
 80508c8:	f7fb fc42 	bl	804c150 <pbuf_clen>
 80508cc:	4603      	mov	r3, r0
 80508ce:	461a      	mov	r2, r3
 80508d0:	687b      	ldr	r3, [r7, #4]
 80508d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80508d6:	4413      	add	r3, r2
 80508d8:	b29a      	uxth	r2, r3
 80508da:	687b      	ldr	r3, [r7, #4]
 80508dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80508e0:	687b      	ldr	r3, [r7, #4]
 80508e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80508e6:	2b00      	cmp	r3, #0
 80508e8:	d00e      	beq.n	8050908 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80508ea:	687b      	ldr	r3, [r7, #4]
 80508ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80508ee:	2b00      	cmp	r3, #0
 80508f0:	d10a      	bne.n	8050908 <tcp_enqueue_flags+0x1b0>
 80508f2:	687b      	ldr	r3, [r7, #4]
 80508f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80508f6:	2b00      	cmp	r3, #0
 80508f8:	d106      	bne.n	8050908 <tcp_enqueue_flags+0x1b0>
 80508fa:	4b06      	ldr	r3, [pc, #24]	; (8050914 <tcp_enqueue_flags+0x1bc>)
 80508fc:	f240 4265 	movw	r2, #1125	; 0x465
 8050900:	490b      	ldr	r1, [pc, #44]	; (8050930 <tcp_enqueue_flags+0x1d8>)
 8050902:	4806      	ldr	r0, [pc, #24]	; (805091c <tcp_enqueue_flags+0x1c4>)
 8050904:	f003 ff9c 	bl	8054840 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8050908:	2300      	movs	r3, #0
}
 805090a:	4618      	mov	r0, r3
 805090c:	3720      	adds	r7, #32
 805090e:	46bd      	mov	sp, r7
 8050910:	bd80      	pop	{r7, pc}
 8050912:	bf00      	nop
 8050914:	08057110 	.word	0x08057110
 8050918:	08057534 	.word	0x08057534
 805091c:	08057164 	.word	0x08057164
 8050920:	0805758c 	.word	0x0805758c
 8050924:	080575ac 	.word	0x080575ac
 8050928:	080575e8 	.word	0x080575e8
 805092c:	08057600 	.word	0x08057600
 8050930:	0805762c 	.word	0x0805762c

08050934 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8050934:	b5b0      	push	{r4, r5, r7, lr}
 8050936:	b08a      	sub	sp, #40	; 0x28
 8050938:	af00      	add	r7, sp, #0
 805093a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 805093c:	687b      	ldr	r3, [r7, #4]
 805093e:	2b00      	cmp	r3, #0
 8050940:	d106      	bne.n	8050950 <tcp_output+0x1c>
 8050942:	4b8a      	ldr	r3, [pc, #552]	; (8050b6c <tcp_output+0x238>)
 8050944:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8050948:	4989      	ldr	r1, [pc, #548]	; (8050b70 <tcp_output+0x23c>)
 805094a:	488a      	ldr	r0, [pc, #552]	; (8050b74 <tcp_output+0x240>)
 805094c:	f003 ff78 	bl	8054840 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8050950:	687b      	ldr	r3, [r7, #4]
 8050952:	7d1b      	ldrb	r3, [r3, #20]
 8050954:	2b01      	cmp	r3, #1
 8050956:	d106      	bne.n	8050966 <tcp_output+0x32>
 8050958:	4b84      	ldr	r3, [pc, #528]	; (8050b6c <tcp_output+0x238>)
 805095a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 805095e:	4986      	ldr	r1, [pc, #536]	; (8050b78 <tcp_output+0x244>)
 8050960:	4884      	ldr	r0, [pc, #528]	; (8050b74 <tcp_output+0x240>)
 8050962:	f003 ff6d 	bl	8054840 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8050966:	4b85      	ldr	r3, [pc, #532]	; (8050b7c <tcp_output+0x248>)
 8050968:	681b      	ldr	r3, [r3, #0]
 805096a:	687a      	ldr	r2, [r7, #4]
 805096c:	429a      	cmp	r2, r3
 805096e:	d101      	bne.n	8050974 <tcp_output+0x40>
    return ERR_OK;
 8050970:	2300      	movs	r3, #0
 8050972:	e1ce      	b.n	8050d12 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8050974:	687b      	ldr	r3, [r7, #4]
 8050976:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 805097a:	687b      	ldr	r3, [r7, #4]
 805097c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8050980:	4293      	cmp	r3, r2
 8050982:	bf28      	it	cs
 8050984:	4613      	movcs	r3, r2
 8050986:	b29b      	uxth	r3, r3
 8050988:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 805098a:	687b      	ldr	r3, [r7, #4]
 805098c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 805098e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8050990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050992:	2b00      	cmp	r3, #0
 8050994:	d10b      	bne.n	80509ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8050996:	687b      	ldr	r3, [r7, #4]
 8050998:	8b5b      	ldrh	r3, [r3, #26]
 805099a:	f003 0302 	and.w	r3, r3, #2
 805099e:	2b00      	cmp	r3, #0
 80509a0:	f000 81aa 	beq.w	8050cf8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80509a4:	6878      	ldr	r0, [r7, #4]
 80509a6:	f000 fdcb 	bl	8051540 <tcp_send_empty_ack>
 80509aa:	4603      	mov	r3, r0
 80509ac:	e1b1      	b.n	8050d12 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80509ae:	6879      	ldr	r1, [r7, #4]
 80509b0:	687b      	ldr	r3, [r7, #4]
 80509b2:	3304      	adds	r3, #4
 80509b4:	461a      	mov	r2, r3
 80509b6:	6878      	ldr	r0, [r7, #4]
 80509b8:	f7ff fc7c 	bl	80502b4 <tcp_route>
 80509bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80509be:	697b      	ldr	r3, [r7, #20]
 80509c0:	2b00      	cmp	r3, #0
 80509c2:	d102      	bne.n	80509ca <tcp_output+0x96>
    return ERR_RTE;
 80509c4:	f06f 0303 	mvn.w	r3, #3
 80509c8:	e1a3      	b.n	8050d12 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80509ca:	687b      	ldr	r3, [r7, #4]
 80509cc:	2b00      	cmp	r3, #0
 80509ce:	d003      	beq.n	80509d8 <tcp_output+0xa4>
 80509d0:	687b      	ldr	r3, [r7, #4]
 80509d2:	681b      	ldr	r3, [r3, #0]
 80509d4:	2b00      	cmp	r3, #0
 80509d6:	d111      	bne.n	80509fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80509d8:	697b      	ldr	r3, [r7, #20]
 80509da:	2b00      	cmp	r3, #0
 80509dc:	d002      	beq.n	80509e4 <tcp_output+0xb0>
 80509de:	697b      	ldr	r3, [r7, #20]
 80509e0:	3304      	adds	r3, #4
 80509e2:	e000      	b.n	80509e6 <tcp_output+0xb2>
 80509e4:	2300      	movs	r3, #0
 80509e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80509e8:	693b      	ldr	r3, [r7, #16]
 80509ea:	2b00      	cmp	r3, #0
 80509ec:	d102      	bne.n	80509f4 <tcp_output+0xc0>
      return ERR_RTE;
 80509ee:	f06f 0303 	mvn.w	r3, #3
 80509f2:	e18e      	b.n	8050d12 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80509f4:	693b      	ldr	r3, [r7, #16]
 80509f6:	681a      	ldr	r2, [r3, #0]
 80509f8:	687b      	ldr	r3, [r7, #4]
 80509fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80509fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80509fe:	68db      	ldr	r3, [r3, #12]
 8050a00:	685b      	ldr	r3, [r3, #4]
 8050a02:	4618      	mov	r0, r3
 8050a04:	f7f9 ff39 	bl	804a87a <lwip_htonl>
 8050a08:	4602      	mov	r2, r0
 8050a0a:	687b      	ldr	r3, [r7, #4]
 8050a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8050a0e:	1ad3      	subs	r3, r2, r3
 8050a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8050a12:	8912      	ldrh	r2, [r2, #8]
 8050a14:	4413      	add	r3, r2
 8050a16:	69ba      	ldr	r2, [r7, #24]
 8050a18:	429a      	cmp	r2, r3
 8050a1a:	d227      	bcs.n	8050a6c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8050a1c:	687b      	ldr	r3, [r7, #4]
 8050a1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8050a22:	461a      	mov	r2, r3
 8050a24:	69bb      	ldr	r3, [r7, #24]
 8050a26:	4293      	cmp	r3, r2
 8050a28:	d114      	bne.n	8050a54 <tcp_output+0x120>
 8050a2a:	687b      	ldr	r3, [r7, #4]
 8050a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8050a2e:	2b00      	cmp	r3, #0
 8050a30:	d110      	bne.n	8050a54 <tcp_output+0x120>
 8050a32:	687b      	ldr	r3, [r7, #4]
 8050a34:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8050a38:	2b00      	cmp	r3, #0
 8050a3a:	d10b      	bne.n	8050a54 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8050a3c:	687b      	ldr	r3, [r7, #4]
 8050a3e:	2200      	movs	r2, #0
 8050a40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8050a44:	687b      	ldr	r3, [r7, #4]
 8050a46:	2201      	movs	r2, #1
 8050a48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8050a4c:	687b      	ldr	r3, [r7, #4]
 8050a4e:	2200      	movs	r2, #0
 8050a50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8050a54:	687b      	ldr	r3, [r7, #4]
 8050a56:	8b5b      	ldrh	r3, [r3, #26]
 8050a58:	f003 0302 	and.w	r3, r3, #2
 8050a5c:	2b00      	cmp	r3, #0
 8050a5e:	f000 814d 	beq.w	8050cfc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8050a62:	6878      	ldr	r0, [r7, #4]
 8050a64:	f000 fd6c 	bl	8051540 <tcp_send_empty_ack>
 8050a68:	4603      	mov	r3, r0
 8050a6a:	e152      	b.n	8050d12 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8050a6c:	687b      	ldr	r3, [r7, #4]
 8050a6e:	2200      	movs	r2, #0
 8050a70:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8050a74:	687b      	ldr	r3, [r7, #4]
 8050a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8050a78:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8050a7a:	6a3b      	ldr	r3, [r7, #32]
 8050a7c:	2b00      	cmp	r3, #0
 8050a7e:	f000 811c 	beq.w	8050cba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8050a82:	e002      	b.n	8050a8a <tcp_output+0x156>
 8050a84:	6a3b      	ldr	r3, [r7, #32]
 8050a86:	681b      	ldr	r3, [r3, #0]
 8050a88:	623b      	str	r3, [r7, #32]
 8050a8a:	6a3b      	ldr	r3, [r7, #32]
 8050a8c:	681b      	ldr	r3, [r3, #0]
 8050a8e:	2b00      	cmp	r3, #0
 8050a90:	d1f8      	bne.n	8050a84 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8050a92:	e112      	b.n	8050cba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8050a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050a96:	68db      	ldr	r3, [r3, #12]
 8050a98:	899b      	ldrh	r3, [r3, #12]
 8050a9a:	b29b      	uxth	r3, r3
 8050a9c:	4618      	mov	r0, r3
 8050a9e:	f7f9 fed7 	bl	804a850 <lwip_htons>
 8050aa2:	4603      	mov	r3, r0
 8050aa4:	b2db      	uxtb	r3, r3
 8050aa6:	f003 0304 	and.w	r3, r3, #4
 8050aaa:	2b00      	cmp	r3, #0
 8050aac:	d006      	beq.n	8050abc <tcp_output+0x188>
 8050aae:	4b2f      	ldr	r3, [pc, #188]	; (8050b6c <tcp_output+0x238>)
 8050ab0:	f240 5236 	movw	r2, #1334	; 0x536
 8050ab4:	4932      	ldr	r1, [pc, #200]	; (8050b80 <tcp_output+0x24c>)
 8050ab6:	482f      	ldr	r0, [pc, #188]	; (8050b74 <tcp_output+0x240>)
 8050ab8:	f003 fec2 	bl	8054840 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8050abc:	687b      	ldr	r3, [r7, #4]
 8050abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8050ac0:	2b00      	cmp	r3, #0
 8050ac2:	d01f      	beq.n	8050b04 <tcp_output+0x1d0>
 8050ac4:	687b      	ldr	r3, [r7, #4]
 8050ac6:	8b5b      	ldrh	r3, [r3, #26]
 8050ac8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8050acc:	2b00      	cmp	r3, #0
 8050ace:	d119      	bne.n	8050b04 <tcp_output+0x1d0>
 8050ad0:	687b      	ldr	r3, [r7, #4]
 8050ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050ad4:	2b00      	cmp	r3, #0
 8050ad6:	d00b      	beq.n	8050af0 <tcp_output+0x1bc>
 8050ad8:	687b      	ldr	r3, [r7, #4]
 8050ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050adc:	681b      	ldr	r3, [r3, #0]
 8050ade:	2b00      	cmp	r3, #0
 8050ae0:	d110      	bne.n	8050b04 <tcp_output+0x1d0>
 8050ae2:	687b      	ldr	r3, [r7, #4]
 8050ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050ae6:	891a      	ldrh	r2, [r3, #8]
 8050ae8:	687b      	ldr	r3, [r7, #4]
 8050aea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8050aec:	429a      	cmp	r2, r3
 8050aee:	d209      	bcs.n	8050b04 <tcp_output+0x1d0>
 8050af0:	687b      	ldr	r3, [r7, #4]
 8050af2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8050af6:	2b00      	cmp	r3, #0
 8050af8:	d004      	beq.n	8050b04 <tcp_output+0x1d0>
 8050afa:	687b      	ldr	r3, [r7, #4]
 8050afc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8050b00:	2b08      	cmp	r3, #8
 8050b02:	d901      	bls.n	8050b08 <tcp_output+0x1d4>
 8050b04:	2301      	movs	r3, #1
 8050b06:	e000      	b.n	8050b0a <tcp_output+0x1d6>
 8050b08:	2300      	movs	r3, #0
 8050b0a:	2b00      	cmp	r3, #0
 8050b0c:	d106      	bne.n	8050b1c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8050b0e:	687b      	ldr	r3, [r7, #4]
 8050b10:	8b5b      	ldrh	r3, [r3, #26]
 8050b12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8050b16:	2b00      	cmp	r3, #0
 8050b18:	f000 80e4 	beq.w	8050ce4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8050b1c:	687b      	ldr	r3, [r7, #4]
 8050b1e:	7d1b      	ldrb	r3, [r3, #20]
 8050b20:	2b02      	cmp	r3, #2
 8050b22:	d00d      	beq.n	8050b40 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8050b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050b26:	68db      	ldr	r3, [r3, #12]
 8050b28:	899b      	ldrh	r3, [r3, #12]
 8050b2a:	b29c      	uxth	r4, r3
 8050b2c:	2010      	movs	r0, #16
 8050b2e:	f7f9 fe8f 	bl	804a850 <lwip_htons>
 8050b32:	4603      	mov	r3, r0
 8050b34:	461a      	mov	r2, r3
 8050b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050b38:	68db      	ldr	r3, [r3, #12]
 8050b3a:	4322      	orrs	r2, r4
 8050b3c:	b292      	uxth	r2, r2
 8050b3e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8050b40:	697a      	ldr	r2, [r7, #20]
 8050b42:	6879      	ldr	r1, [r7, #4]
 8050b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8050b46:	f000 f909 	bl	8050d5c <tcp_output_segment>
 8050b4a:	4603      	mov	r3, r0
 8050b4c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8050b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8050b52:	2b00      	cmp	r3, #0
 8050b54:	d016      	beq.n	8050b84 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8050b56:	687b      	ldr	r3, [r7, #4]
 8050b58:	8b5b      	ldrh	r3, [r3, #26]
 8050b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8050b5e:	b29a      	uxth	r2, r3
 8050b60:	687b      	ldr	r3, [r7, #4]
 8050b62:	835a      	strh	r2, [r3, #26]
      return err;
 8050b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8050b68:	e0d3      	b.n	8050d12 <tcp_output+0x3de>
 8050b6a:	bf00      	nop
 8050b6c:	08057110 	.word	0x08057110
 8050b70:	08057654 	.word	0x08057654
 8050b74:	08057164 	.word	0x08057164
 8050b78:	0805766c 	.word	0x0805766c
 8050b7c:	20023818 	.word	0x20023818
 8050b80:	08057694 	.word	0x08057694
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8050b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050b86:	681a      	ldr	r2, [r3, #0]
 8050b88:	687b      	ldr	r3, [r7, #4]
 8050b8a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8050b8c:	687b      	ldr	r3, [r7, #4]
 8050b8e:	7d1b      	ldrb	r3, [r3, #20]
 8050b90:	2b02      	cmp	r3, #2
 8050b92:	d006      	beq.n	8050ba2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8050b94:	687b      	ldr	r3, [r7, #4]
 8050b96:	8b5b      	ldrh	r3, [r3, #26]
 8050b98:	f023 0303 	bic.w	r3, r3, #3
 8050b9c:	b29a      	uxth	r2, r3
 8050b9e:	687b      	ldr	r3, [r7, #4]
 8050ba0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8050ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050ba4:	68db      	ldr	r3, [r3, #12]
 8050ba6:	685b      	ldr	r3, [r3, #4]
 8050ba8:	4618      	mov	r0, r3
 8050baa:	f7f9 fe66 	bl	804a87a <lwip_htonl>
 8050bae:	4604      	mov	r4, r0
 8050bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050bb2:	891b      	ldrh	r3, [r3, #8]
 8050bb4:	461d      	mov	r5, r3
 8050bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050bb8:	68db      	ldr	r3, [r3, #12]
 8050bba:	899b      	ldrh	r3, [r3, #12]
 8050bbc:	b29b      	uxth	r3, r3
 8050bbe:	4618      	mov	r0, r3
 8050bc0:	f7f9 fe46 	bl	804a850 <lwip_htons>
 8050bc4:	4603      	mov	r3, r0
 8050bc6:	b2db      	uxtb	r3, r3
 8050bc8:	f003 0303 	and.w	r3, r3, #3
 8050bcc:	2b00      	cmp	r3, #0
 8050bce:	d001      	beq.n	8050bd4 <tcp_output+0x2a0>
 8050bd0:	2301      	movs	r3, #1
 8050bd2:	e000      	b.n	8050bd6 <tcp_output+0x2a2>
 8050bd4:	2300      	movs	r3, #0
 8050bd6:	442b      	add	r3, r5
 8050bd8:	4423      	add	r3, r4
 8050bda:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8050bdc:	687b      	ldr	r3, [r7, #4]
 8050bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8050be0:	68bb      	ldr	r3, [r7, #8]
 8050be2:	1ad3      	subs	r3, r2, r3
 8050be4:	2b00      	cmp	r3, #0
 8050be6:	da02      	bge.n	8050bee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8050be8:	687b      	ldr	r3, [r7, #4]
 8050bea:	68ba      	ldr	r2, [r7, #8]
 8050bec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8050bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050bf0:	891b      	ldrh	r3, [r3, #8]
 8050bf2:	461c      	mov	r4, r3
 8050bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050bf6:	68db      	ldr	r3, [r3, #12]
 8050bf8:	899b      	ldrh	r3, [r3, #12]
 8050bfa:	b29b      	uxth	r3, r3
 8050bfc:	4618      	mov	r0, r3
 8050bfe:	f7f9 fe27 	bl	804a850 <lwip_htons>
 8050c02:	4603      	mov	r3, r0
 8050c04:	b2db      	uxtb	r3, r3
 8050c06:	f003 0303 	and.w	r3, r3, #3
 8050c0a:	2b00      	cmp	r3, #0
 8050c0c:	d001      	beq.n	8050c12 <tcp_output+0x2de>
 8050c0e:	2301      	movs	r3, #1
 8050c10:	e000      	b.n	8050c14 <tcp_output+0x2e0>
 8050c12:	2300      	movs	r3, #0
 8050c14:	4423      	add	r3, r4
 8050c16:	2b00      	cmp	r3, #0
 8050c18:	d049      	beq.n	8050cae <tcp_output+0x37a>
      seg->next = NULL;
 8050c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050c1c:	2200      	movs	r2, #0
 8050c1e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8050c20:	687b      	ldr	r3, [r7, #4]
 8050c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8050c24:	2b00      	cmp	r3, #0
 8050c26:	d105      	bne.n	8050c34 <tcp_output+0x300>
        pcb->unacked = seg;
 8050c28:	687b      	ldr	r3, [r7, #4]
 8050c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8050c2c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8050c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050c30:	623b      	str	r3, [r7, #32]
 8050c32:	e03f      	b.n	8050cb4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8050c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050c36:	68db      	ldr	r3, [r3, #12]
 8050c38:	685b      	ldr	r3, [r3, #4]
 8050c3a:	4618      	mov	r0, r3
 8050c3c:	f7f9 fe1d 	bl	804a87a <lwip_htonl>
 8050c40:	4604      	mov	r4, r0
 8050c42:	6a3b      	ldr	r3, [r7, #32]
 8050c44:	68db      	ldr	r3, [r3, #12]
 8050c46:	685b      	ldr	r3, [r3, #4]
 8050c48:	4618      	mov	r0, r3
 8050c4a:	f7f9 fe16 	bl	804a87a <lwip_htonl>
 8050c4e:	4603      	mov	r3, r0
 8050c50:	1ae3      	subs	r3, r4, r3
 8050c52:	2b00      	cmp	r3, #0
 8050c54:	da24      	bge.n	8050ca0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8050c56:	687b      	ldr	r3, [r7, #4]
 8050c58:	3370      	adds	r3, #112	; 0x70
 8050c5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8050c5c:	e002      	b.n	8050c64 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8050c5e:	69fb      	ldr	r3, [r7, #28]
 8050c60:	681b      	ldr	r3, [r3, #0]
 8050c62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8050c64:	69fb      	ldr	r3, [r7, #28]
 8050c66:	681b      	ldr	r3, [r3, #0]
 8050c68:	2b00      	cmp	r3, #0
 8050c6a:	d011      	beq.n	8050c90 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8050c6c:	69fb      	ldr	r3, [r7, #28]
 8050c6e:	681b      	ldr	r3, [r3, #0]
 8050c70:	68db      	ldr	r3, [r3, #12]
 8050c72:	685b      	ldr	r3, [r3, #4]
 8050c74:	4618      	mov	r0, r3
 8050c76:	f7f9 fe00 	bl	804a87a <lwip_htonl>
 8050c7a:	4604      	mov	r4, r0
 8050c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050c7e:	68db      	ldr	r3, [r3, #12]
 8050c80:	685b      	ldr	r3, [r3, #4]
 8050c82:	4618      	mov	r0, r3
 8050c84:	f7f9 fdf9 	bl	804a87a <lwip_htonl>
 8050c88:	4603      	mov	r3, r0
 8050c8a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8050c8c:	2b00      	cmp	r3, #0
 8050c8e:	dbe6      	blt.n	8050c5e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8050c90:	69fb      	ldr	r3, [r7, #28]
 8050c92:	681a      	ldr	r2, [r3, #0]
 8050c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050c96:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8050c98:	69fb      	ldr	r3, [r7, #28]
 8050c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8050c9c:	601a      	str	r2, [r3, #0]
 8050c9e:	e009      	b.n	8050cb4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8050ca0:	6a3b      	ldr	r3, [r7, #32]
 8050ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8050ca4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8050ca6:	6a3b      	ldr	r3, [r7, #32]
 8050ca8:	681b      	ldr	r3, [r3, #0]
 8050caa:	623b      	str	r3, [r7, #32]
 8050cac:	e002      	b.n	8050cb4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8050cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8050cb0:	f7fc fc3f 	bl	804d532 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8050cb4:	687b      	ldr	r3, [r7, #4]
 8050cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050cb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8050cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050cbc:	2b00      	cmp	r3, #0
 8050cbe:	d012      	beq.n	8050ce6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8050cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8050cc2:	68db      	ldr	r3, [r3, #12]
 8050cc4:	685b      	ldr	r3, [r3, #4]
 8050cc6:	4618      	mov	r0, r3
 8050cc8:	f7f9 fdd7 	bl	804a87a <lwip_htonl>
 8050ccc:	4602      	mov	r2, r0
 8050cce:	687b      	ldr	r3, [r7, #4]
 8050cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8050cd2:	1ad3      	subs	r3, r2, r3
 8050cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8050cd6:	8912      	ldrh	r2, [r2, #8]
 8050cd8:	4413      	add	r3, r2
  while (seg != NULL &&
 8050cda:	69ba      	ldr	r2, [r7, #24]
 8050cdc:	429a      	cmp	r2, r3
 8050cde:	f4bf aed9 	bcs.w	8050a94 <tcp_output+0x160>
 8050ce2:	e000      	b.n	8050ce6 <tcp_output+0x3b2>
      break;
 8050ce4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8050ce6:	687b      	ldr	r3, [r7, #4]
 8050ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050cea:	2b00      	cmp	r3, #0
 8050cec:	d108      	bne.n	8050d00 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8050cee:	687b      	ldr	r3, [r7, #4]
 8050cf0:	2200      	movs	r2, #0
 8050cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8050cf6:	e004      	b.n	8050d02 <tcp_output+0x3ce>
    goto output_done;
 8050cf8:	bf00      	nop
 8050cfa:	e002      	b.n	8050d02 <tcp_output+0x3ce>
    goto output_done;
 8050cfc:	bf00      	nop
 8050cfe:	e000      	b.n	8050d02 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8050d00:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8050d02:	687b      	ldr	r3, [r7, #4]
 8050d04:	8b5b      	ldrh	r3, [r3, #26]
 8050d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8050d0a:	b29a      	uxth	r2, r3
 8050d0c:	687b      	ldr	r3, [r7, #4]
 8050d0e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8050d10:	2300      	movs	r3, #0
}
 8050d12:	4618      	mov	r0, r3
 8050d14:	3728      	adds	r7, #40	; 0x28
 8050d16:	46bd      	mov	sp, r7
 8050d18:	bdb0      	pop	{r4, r5, r7, pc}
 8050d1a:	bf00      	nop

08050d1c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8050d1c:	b580      	push	{r7, lr}
 8050d1e:	b082      	sub	sp, #8
 8050d20:	af00      	add	r7, sp, #0
 8050d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8050d24:	687b      	ldr	r3, [r7, #4]
 8050d26:	2b00      	cmp	r3, #0
 8050d28:	d106      	bne.n	8050d38 <tcp_output_segment_busy+0x1c>
 8050d2a:	4b09      	ldr	r3, [pc, #36]	; (8050d50 <tcp_output_segment_busy+0x34>)
 8050d2c:	f240 529a 	movw	r2, #1434	; 0x59a
 8050d30:	4908      	ldr	r1, [pc, #32]	; (8050d54 <tcp_output_segment_busy+0x38>)
 8050d32:	4809      	ldr	r0, [pc, #36]	; (8050d58 <tcp_output_segment_busy+0x3c>)
 8050d34:	f003 fd84 	bl	8054840 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8050d38:	687b      	ldr	r3, [r7, #4]
 8050d3a:	685b      	ldr	r3, [r3, #4]
 8050d3c:	7b9b      	ldrb	r3, [r3, #14]
 8050d3e:	2b01      	cmp	r3, #1
 8050d40:	d001      	beq.n	8050d46 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8050d42:	2301      	movs	r3, #1
 8050d44:	e000      	b.n	8050d48 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8050d46:	2300      	movs	r3, #0
}
 8050d48:	4618      	mov	r0, r3
 8050d4a:	3708      	adds	r7, #8
 8050d4c:	46bd      	mov	sp, r7
 8050d4e:	bd80      	pop	{r7, pc}
 8050d50:	08057110 	.word	0x08057110
 8050d54:	080576ac 	.word	0x080576ac
 8050d58:	08057164 	.word	0x08057164

08050d5c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8050d5c:	b5b0      	push	{r4, r5, r7, lr}
 8050d5e:	b08c      	sub	sp, #48	; 0x30
 8050d60:	af04      	add	r7, sp, #16
 8050d62:	60f8      	str	r0, [r7, #12]
 8050d64:	60b9      	str	r1, [r7, #8]
 8050d66:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8050d68:	68fb      	ldr	r3, [r7, #12]
 8050d6a:	2b00      	cmp	r3, #0
 8050d6c:	d106      	bne.n	8050d7c <tcp_output_segment+0x20>
 8050d6e:	4b64      	ldr	r3, [pc, #400]	; (8050f00 <tcp_output_segment+0x1a4>)
 8050d70:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8050d74:	4963      	ldr	r1, [pc, #396]	; (8050f04 <tcp_output_segment+0x1a8>)
 8050d76:	4864      	ldr	r0, [pc, #400]	; (8050f08 <tcp_output_segment+0x1ac>)
 8050d78:	f003 fd62 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8050d7c:	68bb      	ldr	r3, [r7, #8]
 8050d7e:	2b00      	cmp	r3, #0
 8050d80:	d106      	bne.n	8050d90 <tcp_output_segment+0x34>
 8050d82:	4b5f      	ldr	r3, [pc, #380]	; (8050f00 <tcp_output_segment+0x1a4>)
 8050d84:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8050d88:	4960      	ldr	r1, [pc, #384]	; (8050f0c <tcp_output_segment+0x1b0>)
 8050d8a:	485f      	ldr	r0, [pc, #380]	; (8050f08 <tcp_output_segment+0x1ac>)
 8050d8c:	f003 fd58 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8050d90:	687b      	ldr	r3, [r7, #4]
 8050d92:	2b00      	cmp	r3, #0
 8050d94:	d106      	bne.n	8050da4 <tcp_output_segment+0x48>
 8050d96:	4b5a      	ldr	r3, [pc, #360]	; (8050f00 <tcp_output_segment+0x1a4>)
 8050d98:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8050d9c:	495c      	ldr	r1, [pc, #368]	; (8050f10 <tcp_output_segment+0x1b4>)
 8050d9e:	485a      	ldr	r0, [pc, #360]	; (8050f08 <tcp_output_segment+0x1ac>)
 8050da0:	f003 fd4e 	bl	8054840 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8050da4:	68f8      	ldr	r0, [r7, #12]
 8050da6:	f7ff ffb9 	bl	8050d1c <tcp_output_segment_busy>
 8050daa:	4603      	mov	r3, r0
 8050dac:	2b00      	cmp	r3, #0
 8050dae:	d001      	beq.n	8050db4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8050db0:	2300      	movs	r3, #0
 8050db2:	e0a1      	b.n	8050ef8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8050db4:	68bb      	ldr	r3, [r7, #8]
 8050db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8050db8:	68fb      	ldr	r3, [r7, #12]
 8050dba:	68dc      	ldr	r4, [r3, #12]
 8050dbc:	4610      	mov	r0, r2
 8050dbe:	f7f9 fd5c 	bl	804a87a <lwip_htonl>
 8050dc2:	4603      	mov	r3, r0
 8050dc4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8050dc6:	68bb      	ldr	r3, [r7, #8]
 8050dc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8050dca:	68fb      	ldr	r3, [r7, #12]
 8050dcc:	68dc      	ldr	r4, [r3, #12]
 8050dce:	4610      	mov	r0, r2
 8050dd0:	f7f9 fd3e 	bl	804a850 <lwip_htons>
 8050dd4:	4603      	mov	r3, r0
 8050dd6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8050dd8:	68bb      	ldr	r3, [r7, #8]
 8050dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050ddc:	68ba      	ldr	r2, [r7, #8]
 8050dde:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8050de0:	441a      	add	r2, r3
 8050de2:	68bb      	ldr	r3, [r7, #8]
 8050de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8050de6:	68fb      	ldr	r3, [r7, #12]
 8050de8:	68db      	ldr	r3, [r3, #12]
 8050dea:	3314      	adds	r3, #20
 8050dec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8050dee:	68fb      	ldr	r3, [r7, #12]
 8050df0:	7a9b      	ldrb	r3, [r3, #10]
 8050df2:	f003 0301 	and.w	r3, r3, #1
 8050df6:	2b00      	cmp	r3, #0
 8050df8:	d015      	beq.n	8050e26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8050dfa:	68bb      	ldr	r3, [r7, #8]
 8050dfc:	3304      	adds	r3, #4
 8050dfe:	461a      	mov	r2, r3
 8050e00:	6879      	ldr	r1, [r7, #4]
 8050e02:	f44f 7006 	mov.w	r0, #536	; 0x218
 8050e06:	f7fc fe8b 	bl	804db20 <tcp_eff_send_mss_netif>
 8050e0a:	4603      	mov	r3, r0
 8050e0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8050e0e:	8b7b      	ldrh	r3, [r7, #26]
 8050e10:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8050e14:	4618      	mov	r0, r3
 8050e16:	f7f9 fd30 	bl	804a87a <lwip_htonl>
 8050e1a:	4602      	mov	r2, r0
 8050e1c:	69fb      	ldr	r3, [r7, #28]
 8050e1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8050e20:	69fb      	ldr	r3, [r7, #28]
 8050e22:	3304      	adds	r3, #4
 8050e24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8050e26:	68bb      	ldr	r3, [r7, #8]
 8050e28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8050e2c:	2b00      	cmp	r3, #0
 8050e2e:	da02      	bge.n	8050e36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8050e30:	68bb      	ldr	r3, [r7, #8]
 8050e32:	2200      	movs	r2, #0
 8050e34:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8050e36:	68bb      	ldr	r3, [r7, #8]
 8050e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8050e3a:	2b00      	cmp	r3, #0
 8050e3c:	d10c      	bne.n	8050e58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8050e3e:	4b35      	ldr	r3, [pc, #212]	; (8050f14 <tcp_output_segment+0x1b8>)
 8050e40:	681a      	ldr	r2, [r3, #0]
 8050e42:	68bb      	ldr	r3, [r7, #8]
 8050e44:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8050e46:	68fb      	ldr	r3, [r7, #12]
 8050e48:	68db      	ldr	r3, [r3, #12]
 8050e4a:	685b      	ldr	r3, [r3, #4]
 8050e4c:	4618      	mov	r0, r3
 8050e4e:	f7f9 fd14 	bl	804a87a <lwip_htonl>
 8050e52:	4602      	mov	r2, r0
 8050e54:	68bb      	ldr	r3, [r7, #8]
 8050e56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8050e58:	68fb      	ldr	r3, [r7, #12]
 8050e5a:	68da      	ldr	r2, [r3, #12]
 8050e5c:	68fb      	ldr	r3, [r7, #12]
 8050e5e:	685b      	ldr	r3, [r3, #4]
 8050e60:	685b      	ldr	r3, [r3, #4]
 8050e62:	1ad3      	subs	r3, r2, r3
 8050e64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8050e66:	68fb      	ldr	r3, [r7, #12]
 8050e68:	685b      	ldr	r3, [r3, #4]
 8050e6a:	8959      	ldrh	r1, [r3, #10]
 8050e6c:	68fb      	ldr	r3, [r7, #12]
 8050e6e:	685b      	ldr	r3, [r3, #4]
 8050e70:	8b3a      	ldrh	r2, [r7, #24]
 8050e72:	1a8a      	subs	r2, r1, r2
 8050e74:	b292      	uxth	r2, r2
 8050e76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8050e78:	68fb      	ldr	r3, [r7, #12]
 8050e7a:	685b      	ldr	r3, [r3, #4]
 8050e7c:	8919      	ldrh	r1, [r3, #8]
 8050e7e:	68fb      	ldr	r3, [r7, #12]
 8050e80:	685b      	ldr	r3, [r3, #4]
 8050e82:	8b3a      	ldrh	r2, [r7, #24]
 8050e84:	1a8a      	subs	r2, r1, r2
 8050e86:	b292      	uxth	r2, r2
 8050e88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8050e8a:	68fb      	ldr	r3, [r7, #12]
 8050e8c:	685b      	ldr	r3, [r3, #4]
 8050e8e:	68fa      	ldr	r2, [r7, #12]
 8050e90:	68d2      	ldr	r2, [r2, #12]
 8050e92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8050e94:	68fb      	ldr	r3, [r7, #12]
 8050e96:	68db      	ldr	r3, [r3, #12]
 8050e98:	2200      	movs	r2, #0
 8050e9a:	741a      	strb	r2, [r3, #16]
 8050e9c:	2200      	movs	r2, #0
 8050e9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8050ea0:	68fb      	ldr	r3, [r7, #12]
 8050ea2:	68da      	ldr	r2, [r3, #12]
 8050ea4:	68fb      	ldr	r3, [r7, #12]
 8050ea6:	7a9b      	ldrb	r3, [r3, #10]
 8050ea8:	f003 0301 	and.w	r3, r3, #1
 8050eac:	2b00      	cmp	r3, #0
 8050eae:	d001      	beq.n	8050eb4 <tcp_output_segment+0x158>
 8050eb0:	2318      	movs	r3, #24
 8050eb2:	e000      	b.n	8050eb6 <tcp_output_segment+0x15a>
 8050eb4:	2314      	movs	r3, #20
 8050eb6:	4413      	add	r3, r2
 8050eb8:	69fa      	ldr	r2, [r7, #28]
 8050eba:	429a      	cmp	r2, r3
 8050ebc:	d006      	beq.n	8050ecc <tcp_output_segment+0x170>
 8050ebe:	4b10      	ldr	r3, [pc, #64]	; (8050f00 <tcp_output_segment+0x1a4>)
 8050ec0:	f240 621c 	movw	r2, #1564	; 0x61c
 8050ec4:	4914      	ldr	r1, [pc, #80]	; (8050f18 <tcp_output_segment+0x1bc>)
 8050ec6:	4810      	ldr	r0, [pc, #64]	; (8050f08 <tcp_output_segment+0x1ac>)
 8050ec8:	f003 fcba 	bl	8054840 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8050ecc:	68fb      	ldr	r3, [r7, #12]
 8050ece:	6858      	ldr	r0, [r3, #4]
 8050ed0:	68b9      	ldr	r1, [r7, #8]
 8050ed2:	68bb      	ldr	r3, [r7, #8]
 8050ed4:	1d1c      	adds	r4, r3, #4
 8050ed6:	68bb      	ldr	r3, [r7, #8]
 8050ed8:	7add      	ldrb	r5, [r3, #11]
 8050eda:	68bb      	ldr	r3, [r7, #8]
 8050edc:	7a9b      	ldrb	r3, [r3, #10]
 8050ede:	687a      	ldr	r2, [r7, #4]
 8050ee0:	9202      	str	r2, [sp, #8]
 8050ee2:	2206      	movs	r2, #6
 8050ee4:	9201      	str	r2, [sp, #4]
 8050ee6:	9300      	str	r3, [sp, #0]
 8050ee8:	462b      	mov	r3, r5
 8050eea:	4622      	mov	r2, r4
 8050eec:	f002 fa64 	bl	80533b8 <ip4_output_if>
 8050ef0:	4603      	mov	r3, r0
 8050ef2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8050ef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8050ef8:	4618      	mov	r0, r3
 8050efa:	3720      	adds	r7, #32
 8050efc:	46bd      	mov	sp, r7
 8050efe:	bdb0      	pop	{r4, r5, r7, pc}
 8050f00:	08057110 	.word	0x08057110
 8050f04:	080576d4 	.word	0x080576d4
 8050f08:	08057164 	.word	0x08057164
 8050f0c:	080576f4 	.word	0x080576f4
 8050f10:	08057714 	.word	0x08057714
 8050f14:	200237cc 	.word	0x200237cc
 8050f18:	08057738 	.word	0x08057738

08050f1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8050f1c:	b5b0      	push	{r4, r5, r7, lr}
 8050f1e:	b084      	sub	sp, #16
 8050f20:	af00      	add	r7, sp, #0
 8050f22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8050f24:	687b      	ldr	r3, [r7, #4]
 8050f26:	2b00      	cmp	r3, #0
 8050f28:	d106      	bne.n	8050f38 <tcp_rexmit_rto_prepare+0x1c>
 8050f2a:	4b31      	ldr	r3, [pc, #196]	; (8050ff0 <tcp_rexmit_rto_prepare+0xd4>)
 8050f2c:	f240 6263 	movw	r2, #1635	; 0x663
 8050f30:	4930      	ldr	r1, [pc, #192]	; (8050ff4 <tcp_rexmit_rto_prepare+0xd8>)
 8050f32:	4831      	ldr	r0, [pc, #196]	; (8050ff8 <tcp_rexmit_rto_prepare+0xdc>)
 8050f34:	f003 fc84 	bl	8054840 <iprintf>

  if (pcb->unacked == NULL) {
 8050f38:	687b      	ldr	r3, [r7, #4]
 8050f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8050f3c:	2b00      	cmp	r3, #0
 8050f3e:	d102      	bne.n	8050f46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8050f40:	f06f 0305 	mvn.w	r3, #5
 8050f44:	e050      	b.n	8050fe8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8050f46:	687b      	ldr	r3, [r7, #4]
 8050f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8050f4a:	60fb      	str	r3, [r7, #12]
 8050f4c:	e00b      	b.n	8050f66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8050f4e:	68f8      	ldr	r0, [r7, #12]
 8050f50:	f7ff fee4 	bl	8050d1c <tcp_output_segment_busy>
 8050f54:	4603      	mov	r3, r0
 8050f56:	2b00      	cmp	r3, #0
 8050f58:	d002      	beq.n	8050f60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8050f5a:	f06f 0305 	mvn.w	r3, #5
 8050f5e:	e043      	b.n	8050fe8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8050f60:	68fb      	ldr	r3, [r7, #12]
 8050f62:	681b      	ldr	r3, [r3, #0]
 8050f64:	60fb      	str	r3, [r7, #12]
 8050f66:	68fb      	ldr	r3, [r7, #12]
 8050f68:	681b      	ldr	r3, [r3, #0]
 8050f6a:	2b00      	cmp	r3, #0
 8050f6c:	d1ef      	bne.n	8050f4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8050f6e:	68f8      	ldr	r0, [r7, #12]
 8050f70:	f7ff fed4 	bl	8050d1c <tcp_output_segment_busy>
 8050f74:	4603      	mov	r3, r0
 8050f76:	2b00      	cmp	r3, #0
 8050f78:	d002      	beq.n	8050f80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8050f7a:	f06f 0305 	mvn.w	r3, #5
 8050f7e:	e033      	b.n	8050fe8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8050f80:	687b      	ldr	r3, [r7, #4]
 8050f82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8050f84:	68fb      	ldr	r3, [r7, #12]
 8050f86:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8050f88:	687b      	ldr	r3, [r7, #4]
 8050f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8050f8c:	687b      	ldr	r3, [r7, #4]
 8050f8e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8050f90:	687b      	ldr	r3, [r7, #4]
 8050f92:	2200      	movs	r2, #0
 8050f94:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8050f96:	687b      	ldr	r3, [r7, #4]
 8050f98:	8b5b      	ldrh	r3, [r3, #26]
 8050f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8050f9e:	b29a      	uxth	r2, r3
 8050fa0:	687b      	ldr	r3, [r7, #4]
 8050fa2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8050fa4:	68fb      	ldr	r3, [r7, #12]
 8050fa6:	68db      	ldr	r3, [r3, #12]
 8050fa8:	685b      	ldr	r3, [r3, #4]
 8050faa:	4618      	mov	r0, r3
 8050fac:	f7f9 fc65 	bl	804a87a <lwip_htonl>
 8050fb0:	4604      	mov	r4, r0
 8050fb2:	68fb      	ldr	r3, [r7, #12]
 8050fb4:	891b      	ldrh	r3, [r3, #8]
 8050fb6:	461d      	mov	r5, r3
 8050fb8:	68fb      	ldr	r3, [r7, #12]
 8050fba:	68db      	ldr	r3, [r3, #12]
 8050fbc:	899b      	ldrh	r3, [r3, #12]
 8050fbe:	b29b      	uxth	r3, r3
 8050fc0:	4618      	mov	r0, r3
 8050fc2:	f7f9 fc45 	bl	804a850 <lwip_htons>
 8050fc6:	4603      	mov	r3, r0
 8050fc8:	b2db      	uxtb	r3, r3
 8050fca:	f003 0303 	and.w	r3, r3, #3
 8050fce:	2b00      	cmp	r3, #0
 8050fd0:	d001      	beq.n	8050fd6 <tcp_rexmit_rto_prepare+0xba>
 8050fd2:	2301      	movs	r3, #1
 8050fd4:	e000      	b.n	8050fd8 <tcp_rexmit_rto_prepare+0xbc>
 8050fd6:	2300      	movs	r3, #0
 8050fd8:	442b      	add	r3, r5
 8050fda:	18e2      	adds	r2, r4, r3
 8050fdc:	687b      	ldr	r3, [r7, #4]
 8050fde:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8050fe0:	687b      	ldr	r3, [r7, #4]
 8050fe2:	2200      	movs	r2, #0
 8050fe4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8050fe6:	2300      	movs	r3, #0
}
 8050fe8:	4618      	mov	r0, r3
 8050fea:	3710      	adds	r7, #16
 8050fec:	46bd      	mov	sp, r7
 8050fee:	bdb0      	pop	{r4, r5, r7, pc}
 8050ff0:	08057110 	.word	0x08057110
 8050ff4:	0805774c 	.word	0x0805774c
 8050ff8:	08057164 	.word	0x08057164

08050ffc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8050ffc:	b580      	push	{r7, lr}
 8050ffe:	b082      	sub	sp, #8
 8051000:	af00      	add	r7, sp, #0
 8051002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8051004:	687b      	ldr	r3, [r7, #4]
 8051006:	2b00      	cmp	r3, #0
 8051008:	d106      	bne.n	8051018 <tcp_rexmit_rto_commit+0x1c>
 805100a:	4b0d      	ldr	r3, [pc, #52]	; (8051040 <tcp_rexmit_rto_commit+0x44>)
 805100c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8051010:	490c      	ldr	r1, [pc, #48]	; (8051044 <tcp_rexmit_rto_commit+0x48>)
 8051012:	480d      	ldr	r0, [pc, #52]	; (8051048 <tcp_rexmit_rto_commit+0x4c>)
 8051014:	f003 fc14 	bl	8054840 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8051018:	687b      	ldr	r3, [r7, #4]
 805101a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 805101e:	2bff      	cmp	r3, #255	; 0xff
 8051020:	d007      	beq.n	8051032 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8051022:	687b      	ldr	r3, [r7, #4]
 8051024:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8051028:	3301      	adds	r3, #1
 805102a:	b2da      	uxtb	r2, r3
 805102c:	687b      	ldr	r3, [r7, #4]
 805102e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8051032:	6878      	ldr	r0, [r7, #4]
 8051034:	f7ff fc7e 	bl	8050934 <tcp_output>
}
 8051038:	bf00      	nop
 805103a:	3708      	adds	r7, #8
 805103c:	46bd      	mov	sp, r7
 805103e:	bd80      	pop	{r7, pc}
 8051040:	08057110 	.word	0x08057110
 8051044:	08057770 	.word	0x08057770
 8051048:	08057164 	.word	0x08057164

0805104c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 805104c:	b580      	push	{r7, lr}
 805104e:	b082      	sub	sp, #8
 8051050:	af00      	add	r7, sp, #0
 8051052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8051054:	687b      	ldr	r3, [r7, #4]
 8051056:	2b00      	cmp	r3, #0
 8051058:	d106      	bne.n	8051068 <tcp_rexmit_rto+0x1c>
 805105a:	4b0a      	ldr	r3, [pc, #40]	; (8051084 <tcp_rexmit_rto+0x38>)
 805105c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8051060:	4909      	ldr	r1, [pc, #36]	; (8051088 <tcp_rexmit_rto+0x3c>)
 8051062:	480a      	ldr	r0, [pc, #40]	; (805108c <tcp_rexmit_rto+0x40>)
 8051064:	f003 fbec 	bl	8054840 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8051068:	6878      	ldr	r0, [r7, #4]
 805106a:	f7ff ff57 	bl	8050f1c <tcp_rexmit_rto_prepare>
 805106e:	4603      	mov	r3, r0
 8051070:	2b00      	cmp	r3, #0
 8051072:	d102      	bne.n	805107a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8051074:	6878      	ldr	r0, [r7, #4]
 8051076:	f7ff ffc1 	bl	8050ffc <tcp_rexmit_rto_commit>
  }
}
 805107a:	bf00      	nop
 805107c:	3708      	adds	r7, #8
 805107e:	46bd      	mov	sp, r7
 8051080:	bd80      	pop	{r7, pc}
 8051082:	bf00      	nop
 8051084:	08057110 	.word	0x08057110
 8051088:	08057794 	.word	0x08057794
 805108c:	08057164 	.word	0x08057164

08051090 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8051090:	b590      	push	{r4, r7, lr}
 8051092:	b085      	sub	sp, #20
 8051094:	af00      	add	r7, sp, #0
 8051096:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8051098:	687b      	ldr	r3, [r7, #4]
 805109a:	2b00      	cmp	r3, #0
 805109c:	d106      	bne.n	80510ac <tcp_rexmit+0x1c>
 805109e:	4b2f      	ldr	r3, [pc, #188]	; (805115c <tcp_rexmit+0xcc>)
 80510a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80510a4:	492e      	ldr	r1, [pc, #184]	; (8051160 <tcp_rexmit+0xd0>)
 80510a6:	482f      	ldr	r0, [pc, #188]	; (8051164 <tcp_rexmit+0xd4>)
 80510a8:	f003 fbca 	bl	8054840 <iprintf>

  if (pcb->unacked == NULL) {
 80510ac:	687b      	ldr	r3, [r7, #4]
 80510ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80510b0:	2b00      	cmp	r3, #0
 80510b2:	d102      	bne.n	80510ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80510b4:	f06f 0305 	mvn.w	r3, #5
 80510b8:	e04c      	b.n	8051154 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80510ba:	687b      	ldr	r3, [r7, #4]
 80510bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80510be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80510c0:	68b8      	ldr	r0, [r7, #8]
 80510c2:	f7ff fe2b 	bl	8050d1c <tcp_output_segment_busy>
 80510c6:	4603      	mov	r3, r0
 80510c8:	2b00      	cmp	r3, #0
 80510ca:	d002      	beq.n	80510d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80510cc:	f06f 0305 	mvn.w	r3, #5
 80510d0:	e040      	b.n	8051154 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80510d2:	68bb      	ldr	r3, [r7, #8]
 80510d4:	681a      	ldr	r2, [r3, #0]
 80510d6:	687b      	ldr	r3, [r7, #4]
 80510d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80510da:	687b      	ldr	r3, [r7, #4]
 80510dc:	336c      	adds	r3, #108	; 0x6c
 80510de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80510e0:	e002      	b.n	80510e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80510e2:	68fb      	ldr	r3, [r7, #12]
 80510e4:	681b      	ldr	r3, [r3, #0]
 80510e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80510e8:	68fb      	ldr	r3, [r7, #12]
 80510ea:	681b      	ldr	r3, [r3, #0]
 80510ec:	2b00      	cmp	r3, #0
 80510ee:	d011      	beq.n	8051114 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80510f0:	68fb      	ldr	r3, [r7, #12]
 80510f2:	681b      	ldr	r3, [r3, #0]
 80510f4:	68db      	ldr	r3, [r3, #12]
 80510f6:	685b      	ldr	r3, [r3, #4]
 80510f8:	4618      	mov	r0, r3
 80510fa:	f7f9 fbbe 	bl	804a87a <lwip_htonl>
 80510fe:	4604      	mov	r4, r0
 8051100:	68bb      	ldr	r3, [r7, #8]
 8051102:	68db      	ldr	r3, [r3, #12]
 8051104:	685b      	ldr	r3, [r3, #4]
 8051106:	4618      	mov	r0, r3
 8051108:	f7f9 fbb7 	bl	804a87a <lwip_htonl>
 805110c:	4603      	mov	r3, r0
 805110e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8051110:	2b00      	cmp	r3, #0
 8051112:	dbe6      	blt.n	80510e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8051114:	68fb      	ldr	r3, [r7, #12]
 8051116:	681a      	ldr	r2, [r3, #0]
 8051118:	68bb      	ldr	r3, [r7, #8]
 805111a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 805111c:	68fb      	ldr	r3, [r7, #12]
 805111e:	68ba      	ldr	r2, [r7, #8]
 8051120:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8051122:	68bb      	ldr	r3, [r7, #8]
 8051124:	681b      	ldr	r3, [r3, #0]
 8051126:	2b00      	cmp	r3, #0
 8051128:	d103      	bne.n	8051132 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 805112a:	687b      	ldr	r3, [r7, #4]
 805112c:	2200      	movs	r2, #0
 805112e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8051132:	687b      	ldr	r3, [r7, #4]
 8051134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8051138:	2bff      	cmp	r3, #255	; 0xff
 805113a:	d007      	beq.n	805114c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 805113c:	687b      	ldr	r3, [r7, #4]
 805113e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8051142:	3301      	adds	r3, #1
 8051144:	b2da      	uxtb	r2, r3
 8051146:	687b      	ldr	r3, [r7, #4]
 8051148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 805114c:	687b      	ldr	r3, [r7, #4]
 805114e:	2200      	movs	r2, #0
 8051150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8051152:	2300      	movs	r3, #0
}
 8051154:	4618      	mov	r0, r3
 8051156:	3714      	adds	r7, #20
 8051158:	46bd      	mov	sp, r7
 805115a:	bd90      	pop	{r4, r7, pc}
 805115c:	08057110 	.word	0x08057110
 8051160:	080577b0 	.word	0x080577b0
 8051164:	08057164 	.word	0x08057164

08051168 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8051168:	b580      	push	{r7, lr}
 805116a:	b082      	sub	sp, #8
 805116c:	af00      	add	r7, sp, #0
 805116e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8051170:	687b      	ldr	r3, [r7, #4]
 8051172:	2b00      	cmp	r3, #0
 8051174:	d106      	bne.n	8051184 <tcp_rexmit_fast+0x1c>
 8051176:	4b2a      	ldr	r3, [pc, #168]	; (8051220 <tcp_rexmit_fast+0xb8>)
 8051178:	f240 62f9 	movw	r2, #1785	; 0x6f9
 805117c:	4929      	ldr	r1, [pc, #164]	; (8051224 <tcp_rexmit_fast+0xbc>)
 805117e:	482a      	ldr	r0, [pc, #168]	; (8051228 <tcp_rexmit_fast+0xc0>)
 8051180:	f003 fb5e 	bl	8054840 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8051184:	687b      	ldr	r3, [r7, #4]
 8051186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8051188:	2b00      	cmp	r3, #0
 805118a:	d045      	beq.n	8051218 <tcp_rexmit_fast+0xb0>
 805118c:	687b      	ldr	r3, [r7, #4]
 805118e:	8b5b      	ldrh	r3, [r3, #26]
 8051190:	f003 0304 	and.w	r3, r3, #4
 8051194:	2b00      	cmp	r3, #0
 8051196:	d13f      	bne.n	8051218 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8051198:	6878      	ldr	r0, [r7, #4]
 805119a:	f7ff ff79 	bl	8051090 <tcp_rexmit>
 805119e:	4603      	mov	r3, r0
 80511a0:	2b00      	cmp	r3, #0
 80511a2:	d139      	bne.n	8051218 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80511a4:	687b      	ldr	r3, [r7, #4]
 80511a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80511aa:	687b      	ldr	r3, [r7, #4]
 80511ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80511b0:	4293      	cmp	r3, r2
 80511b2:	bf28      	it	cs
 80511b4:	4613      	movcs	r3, r2
 80511b6:	b29b      	uxth	r3, r3
 80511b8:	2b00      	cmp	r3, #0
 80511ba:	da00      	bge.n	80511be <tcp_rexmit_fast+0x56>
 80511bc:	3301      	adds	r3, #1
 80511be:	105b      	asrs	r3, r3, #1
 80511c0:	b29a      	uxth	r2, r3
 80511c2:	687b      	ldr	r3, [r7, #4]
 80511c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80511c8:	687b      	ldr	r3, [r7, #4]
 80511ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80511ce:	461a      	mov	r2, r3
 80511d0:	687b      	ldr	r3, [r7, #4]
 80511d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80511d4:	005b      	lsls	r3, r3, #1
 80511d6:	429a      	cmp	r2, r3
 80511d8:	d206      	bcs.n	80511e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80511da:	687b      	ldr	r3, [r7, #4]
 80511dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80511de:	005b      	lsls	r3, r3, #1
 80511e0:	b29a      	uxth	r2, r3
 80511e2:	687b      	ldr	r3, [r7, #4]
 80511e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80511e8:	687b      	ldr	r3, [r7, #4]
 80511ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80511ee:	687b      	ldr	r3, [r7, #4]
 80511f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80511f2:	4619      	mov	r1, r3
 80511f4:	0049      	lsls	r1, r1, #1
 80511f6:	440b      	add	r3, r1
 80511f8:	b29b      	uxth	r3, r3
 80511fa:	4413      	add	r3, r2
 80511fc:	b29a      	uxth	r2, r3
 80511fe:	687b      	ldr	r3, [r7, #4]
 8051200:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8051204:	687b      	ldr	r3, [r7, #4]
 8051206:	8b5b      	ldrh	r3, [r3, #26]
 8051208:	f043 0304 	orr.w	r3, r3, #4
 805120c:	b29a      	uxth	r2, r3
 805120e:	687b      	ldr	r3, [r7, #4]
 8051210:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8051212:	687b      	ldr	r3, [r7, #4]
 8051214:	2200      	movs	r2, #0
 8051216:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8051218:	bf00      	nop
 805121a:	3708      	adds	r7, #8
 805121c:	46bd      	mov	sp, r7
 805121e:	bd80      	pop	{r7, pc}
 8051220:	08057110 	.word	0x08057110
 8051224:	080577c8 	.word	0x080577c8
 8051228:	08057164 	.word	0x08057164

0805122c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 805122c:	b580      	push	{r7, lr}
 805122e:	b086      	sub	sp, #24
 8051230:	af00      	add	r7, sp, #0
 8051232:	60f8      	str	r0, [r7, #12]
 8051234:	607b      	str	r3, [r7, #4]
 8051236:	460b      	mov	r3, r1
 8051238:	817b      	strh	r3, [r7, #10]
 805123a:	4613      	mov	r3, r2
 805123c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 805123e:	897a      	ldrh	r2, [r7, #10]
 8051240:	893b      	ldrh	r3, [r7, #8]
 8051242:	4413      	add	r3, r2
 8051244:	b29b      	uxth	r3, r3
 8051246:	3314      	adds	r3, #20
 8051248:	b29b      	uxth	r3, r3
 805124a:	f44f 7220 	mov.w	r2, #640	; 0x280
 805124e:	4619      	mov	r1, r3
 8051250:	2022      	movs	r0, #34	; 0x22
 8051252:	f7fa fc0b 	bl	804ba6c <pbuf_alloc>
 8051256:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8051258:	697b      	ldr	r3, [r7, #20]
 805125a:	2b00      	cmp	r3, #0
 805125c:	d04d      	beq.n	80512fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 805125e:	897b      	ldrh	r3, [r7, #10]
 8051260:	3313      	adds	r3, #19
 8051262:	697a      	ldr	r2, [r7, #20]
 8051264:	8952      	ldrh	r2, [r2, #10]
 8051266:	4293      	cmp	r3, r2
 8051268:	db06      	blt.n	8051278 <tcp_output_alloc_header_common+0x4c>
 805126a:	4b26      	ldr	r3, [pc, #152]	; (8051304 <tcp_output_alloc_header_common+0xd8>)
 805126c:	f240 7223 	movw	r2, #1827	; 0x723
 8051270:	4925      	ldr	r1, [pc, #148]	; (8051308 <tcp_output_alloc_header_common+0xdc>)
 8051272:	4826      	ldr	r0, [pc, #152]	; (805130c <tcp_output_alloc_header_common+0xe0>)
 8051274:	f003 fae4 	bl	8054840 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8051278:	697b      	ldr	r3, [r7, #20]
 805127a:	685b      	ldr	r3, [r3, #4]
 805127c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 805127e:	8c3b      	ldrh	r3, [r7, #32]
 8051280:	4618      	mov	r0, r3
 8051282:	f7f9 fae5 	bl	804a850 <lwip_htons>
 8051286:	4603      	mov	r3, r0
 8051288:	461a      	mov	r2, r3
 805128a:	693b      	ldr	r3, [r7, #16]
 805128c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 805128e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8051290:	4618      	mov	r0, r3
 8051292:	f7f9 fadd 	bl	804a850 <lwip_htons>
 8051296:	4603      	mov	r3, r0
 8051298:	461a      	mov	r2, r3
 805129a:	693b      	ldr	r3, [r7, #16]
 805129c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 805129e:	693b      	ldr	r3, [r7, #16]
 80512a0:	687a      	ldr	r2, [r7, #4]
 80512a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80512a4:	68f8      	ldr	r0, [r7, #12]
 80512a6:	f7f9 fae8 	bl	804a87a <lwip_htonl>
 80512aa:	4602      	mov	r2, r0
 80512ac:	693b      	ldr	r3, [r7, #16]
 80512ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80512b0:	897b      	ldrh	r3, [r7, #10]
 80512b2:	089b      	lsrs	r3, r3, #2
 80512b4:	b29b      	uxth	r3, r3
 80512b6:	3305      	adds	r3, #5
 80512b8:	b29b      	uxth	r3, r3
 80512ba:	031b      	lsls	r3, r3, #12
 80512bc:	b29a      	uxth	r2, r3
 80512be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80512c2:	b29b      	uxth	r3, r3
 80512c4:	4313      	orrs	r3, r2
 80512c6:	b29b      	uxth	r3, r3
 80512c8:	4618      	mov	r0, r3
 80512ca:	f7f9 fac1 	bl	804a850 <lwip_htons>
 80512ce:	4603      	mov	r3, r0
 80512d0:	461a      	mov	r2, r3
 80512d2:	693b      	ldr	r3, [r7, #16]
 80512d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80512d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80512d8:	4618      	mov	r0, r3
 80512da:	f7f9 fab9 	bl	804a850 <lwip_htons>
 80512de:	4603      	mov	r3, r0
 80512e0:	461a      	mov	r2, r3
 80512e2:	693b      	ldr	r3, [r7, #16]
 80512e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80512e6:	693b      	ldr	r3, [r7, #16]
 80512e8:	2200      	movs	r2, #0
 80512ea:	741a      	strb	r2, [r3, #16]
 80512ec:	2200      	movs	r2, #0
 80512ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80512f0:	693b      	ldr	r3, [r7, #16]
 80512f2:	2200      	movs	r2, #0
 80512f4:	749a      	strb	r2, [r3, #18]
 80512f6:	2200      	movs	r2, #0
 80512f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80512fa:	697b      	ldr	r3, [r7, #20]
}
 80512fc:	4618      	mov	r0, r3
 80512fe:	3718      	adds	r7, #24
 8051300:	46bd      	mov	sp, r7
 8051302:	bd80      	pop	{r7, pc}
 8051304:	08057110 	.word	0x08057110
 8051308:	080577e8 	.word	0x080577e8
 805130c:	08057164 	.word	0x08057164

08051310 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8051310:	b5b0      	push	{r4, r5, r7, lr}
 8051312:	b08a      	sub	sp, #40	; 0x28
 8051314:	af04      	add	r7, sp, #16
 8051316:	60f8      	str	r0, [r7, #12]
 8051318:	607b      	str	r3, [r7, #4]
 805131a:	460b      	mov	r3, r1
 805131c:	817b      	strh	r3, [r7, #10]
 805131e:	4613      	mov	r3, r2
 8051320:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8051322:	68fb      	ldr	r3, [r7, #12]
 8051324:	2b00      	cmp	r3, #0
 8051326:	d106      	bne.n	8051336 <tcp_output_alloc_header+0x26>
 8051328:	4b15      	ldr	r3, [pc, #84]	; (8051380 <tcp_output_alloc_header+0x70>)
 805132a:	f240 7242 	movw	r2, #1858	; 0x742
 805132e:	4915      	ldr	r1, [pc, #84]	; (8051384 <tcp_output_alloc_header+0x74>)
 8051330:	4815      	ldr	r0, [pc, #84]	; (8051388 <tcp_output_alloc_header+0x78>)
 8051332:	f003 fa85 	bl	8054840 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8051336:	68fb      	ldr	r3, [r7, #12]
 8051338:	6a58      	ldr	r0, [r3, #36]	; 0x24
 805133a:	68fb      	ldr	r3, [r7, #12]
 805133c:	8adb      	ldrh	r3, [r3, #22]
 805133e:	68fa      	ldr	r2, [r7, #12]
 8051340:	8b12      	ldrh	r2, [r2, #24]
 8051342:	68f9      	ldr	r1, [r7, #12]
 8051344:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8051346:	893d      	ldrh	r5, [r7, #8]
 8051348:	897c      	ldrh	r4, [r7, #10]
 805134a:	9103      	str	r1, [sp, #12]
 805134c:	2110      	movs	r1, #16
 805134e:	9102      	str	r1, [sp, #8]
 8051350:	9201      	str	r2, [sp, #4]
 8051352:	9300      	str	r3, [sp, #0]
 8051354:	687b      	ldr	r3, [r7, #4]
 8051356:	462a      	mov	r2, r5
 8051358:	4621      	mov	r1, r4
 805135a:	f7ff ff67 	bl	805122c <tcp_output_alloc_header_common>
 805135e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8051360:	697b      	ldr	r3, [r7, #20]
 8051362:	2b00      	cmp	r3, #0
 8051364:	d006      	beq.n	8051374 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8051366:	68fb      	ldr	r3, [r7, #12]
 8051368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805136a:	68fa      	ldr	r2, [r7, #12]
 805136c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 805136e:	441a      	add	r2, r3
 8051370:	68fb      	ldr	r3, [r7, #12]
 8051372:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8051374:	697b      	ldr	r3, [r7, #20]
}
 8051376:	4618      	mov	r0, r3
 8051378:	3718      	adds	r7, #24
 805137a:	46bd      	mov	sp, r7
 805137c:	bdb0      	pop	{r4, r5, r7, pc}
 805137e:	bf00      	nop
 8051380:	08057110 	.word	0x08057110
 8051384:	08057818 	.word	0x08057818
 8051388:	08057164 	.word	0x08057164

0805138c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 805138c:	b580      	push	{r7, lr}
 805138e:	b088      	sub	sp, #32
 8051390:	af00      	add	r7, sp, #0
 8051392:	60f8      	str	r0, [r7, #12]
 8051394:	60b9      	str	r1, [r7, #8]
 8051396:	4611      	mov	r1, r2
 8051398:	461a      	mov	r2, r3
 805139a:	460b      	mov	r3, r1
 805139c:	71fb      	strb	r3, [r7, #7]
 805139e:	4613      	mov	r3, r2
 80513a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80513a2:	2300      	movs	r3, #0
 80513a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80513a6:	68bb      	ldr	r3, [r7, #8]
 80513a8:	2b00      	cmp	r3, #0
 80513aa:	d106      	bne.n	80513ba <tcp_output_fill_options+0x2e>
 80513ac:	4b12      	ldr	r3, [pc, #72]	; (80513f8 <tcp_output_fill_options+0x6c>)
 80513ae:	f240 7256 	movw	r2, #1878	; 0x756
 80513b2:	4912      	ldr	r1, [pc, #72]	; (80513fc <tcp_output_fill_options+0x70>)
 80513b4:	4812      	ldr	r0, [pc, #72]	; (8051400 <tcp_output_fill_options+0x74>)
 80513b6:	f003 fa43 	bl	8054840 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80513ba:	68bb      	ldr	r3, [r7, #8]
 80513bc:	685b      	ldr	r3, [r3, #4]
 80513be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80513c0:	69bb      	ldr	r3, [r7, #24]
 80513c2:	3314      	adds	r3, #20
 80513c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80513c6:	8bfb      	ldrh	r3, [r7, #30]
 80513c8:	009b      	lsls	r3, r3, #2
 80513ca:	461a      	mov	r2, r3
 80513cc:	79fb      	ldrb	r3, [r7, #7]
 80513ce:	009b      	lsls	r3, r3, #2
 80513d0:	f003 0304 	and.w	r3, r3, #4
 80513d4:	4413      	add	r3, r2
 80513d6:	3314      	adds	r3, #20
 80513d8:	69ba      	ldr	r2, [r7, #24]
 80513da:	4413      	add	r3, r2
 80513dc:	697a      	ldr	r2, [r7, #20]
 80513de:	429a      	cmp	r2, r3
 80513e0:	d006      	beq.n	80513f0 <tcp_output_fill_options+0x64>
 80513e2:	4b05      	ldr	r3, [pc, #20]	; (80513f8 <tcp_output_fill_options+0x6c>)
 80513e4:	f240 7275 	movw	r2, #1909	; 0x775
 80513e8:	4906      	ldr	r1, [pc, #24]	; (8051404 <tcp_output_fill_options+0x78>)
 80513ea:	4805      	ldr	r0, [pc, #20]	; (8051400 <tcp_output_fill_options+0x74>)
 80513ec:	f003 fa28 	bl	8054840 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80513f0:	bf00      	nop
 80513f2:	3720      	adds	r7, #32
 80513f4:	46bd      	mov	sp, r7
 80513f6:	bd80      	pop	{r7, pc}
 80513f8:	08057110 	.word	0x08057110
 80513fc:	08057840 	.word	0x08057840
 8051400:	08057164 	.word	0x08057164
 8051404:	08057738 	.word	0x08057738

08051408 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8051408:	b580      	push	{r7, lr}
 805140a:	b08a      	sub	sp, #40	; 0x28
 805140c:	af04      	add	r7, sp, #16
 805140e:	60f8      	str	r0, [r7, #12]
 8051410:	60b9      	str	r1, [r7, #8]
 8051412:	607a      	str	r2, [r7, #4]
 8051414:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8051416:	68bb      	ldr	r3, [r7, #8]
 8051418:	2b00      	cmp	r3, #0
 805141a:	d106      	bne.n	805142a <tcp_output_control_segment+0x22>
 805141c:	4b1c      	ldr	r3, [pc, #112]	; (8051490 <tcp_output_control_segment+0x88>)
 805141e:	f240 7287 	movw	r2, #1927	; 0x787
 8051422:	491c      	ldr	r1, [pc, #112]	; (8051494 <tcp_output_control_segment+0x8c>)
 8051424:	481c      	ldr	r0, [pc, #112]	; (8051498 <tcp_output_control_segment+0x90>)
 8051426:	f003 fa0b 	bl	8054840 <iprintf>

  netif = tcp_route(pcb, src, dst);
 805142a:	683a      	ldr	r2, [r7, #0]
 805142c:	6879      	ldr	r1, [r7, #4]
 805142e:	68f8      	ldr	r0, [r7, #12]
 8051430:	f7fe ff40 	bl	80502b4 <tcp_route>
 8051434:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8051436:	693b      	ldr	r3, [r7, #16]
 8051438:	2b00      	cmp	r3, #0
 805143a:	d102      	bne.n	8051442 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 805143c:	23fc      	movs	r3, #252	; 0xfc
 805143e:	75fb      	strb	r3, [r7, #23]
 8051440:	e01c      	b.n	805147c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8051442:	68fb      	ldr	r3, [r7, #12]
 8051444:	2b00      	cmp	r3, #0
 8051446:	d006      	beq.n	8051456 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8051448:	68fb      	ldr	r3, [r7, #12]
 805144a:	7adb      	ldrb	r3, [r3, #11]
 805144c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 805144e:	68fb      	ldr	r3, [r7, #12]
 8051450:	7a9b      	ldrb	r3, [r3, #10]
 8051452:	757b      	strb	r3, [r7, #21]
 8051454:	e003      	b.n	805145e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8051456:	23ff      	movs	r3, #255	; 0xff
 8051458:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 805145a:	2300      	movs	r3, #0
 805145c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 805145e:	7dba      	ldrb	r2, [r7, #22]
 8051460:	693b      	ldr	r3, [r7, #16]
 8051462:	9302      	str	r3, [sp, #8]
 8051464:	2306      	movs	r3, #6
 8051466:	9301      	str	r3, [sp, #4]
 8051468:	7d7b      	ldrb	r3, [r7, #21]
 805146a:	9300      	str	r3, [sp, #0]
 805146c:	4613      	mov	r3, r2
 805146e:	683a      	ldr	r2, [r7, #0]
 8051470:	6879      	ldr	r1, [r7, #4]
 8051472:	68b8      	ldr	r0, [r7, #8]
 8051474:	f001 ffa0 	bl	80533b8 <ip4_output_if>
 8051478:	4603      	mov	r3, r0
 805147a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 805147c:	68b8      	ldr	r0, [r7, #8]
 805147e:	f7fa fdd9 	bl	804c034 <pbuf_free>
  return err;
 8051482:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8051486:	4618      	mov	r0, r3
 8051488:	3718      	adds	r7, #24
 805148a:	46bd      	mov	sp, r7
 805148c:	bd80      	pop	{r7, pc}
 805148e:	bf00      	nop
 8051490:	08057110 	.word	0x08057110
 8051494:	08057868 	.word	0x08057868
 8051498:	08057164 	.word	0x08057164

0805149c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 805149c:	b590      	push	{r4, r7, lr}
 805149e:	b08b      	sub	sp, #44	; 0x2c
 80514a0:	af04      	add	r7, sp, #16
 80514a2:	60f8      	str	r0, [r7, #12]
 80514a4:	60b9      	str	r1, [r7, #8]
 80514a6:	607a      	str	r2, [r7, #4]
 80514a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80514aa:	683b      	ldr	r3, [r7, #0]
 80514ac:	2b00      	cmp	r3, #0
 80514ae:	d106      	bne.n	80514be <tcp_rst+0x22>
 80514b0:	4b1f      	ldr	r3, [pc, #124]	; (8051530 <tcp_rst+0x94>)
 80514b2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80514b6:	491f      	ldr	r1, [pc, #124]	; (8051534 <tcp_rst+0x98>)
 80514b8:	481f      	ldr	r0, [pc, #124]	; (8051538 <tcp_rst+0x9c>)
 80514ba:	f003 f9c1 	bl	8054840 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80514be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80514c0:	2b00      	cmp	r3, #0
 80514c2:	d106      	bne.n	80514d2 <tcp_rst+0x36>
 80514c4:	4b1a      	ldr	r3, [pc, #104]	; (8051530 <tcp_rst+0x94>)
 80514c6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80514ca:	491c      	ldr	r1, [pc, #112]	; (805153c <tcp_rst+0xa0>)
 80514cc:	481a      	ldr	r0, [pc, #104]	; (8051538 <tcp_rst+0x9c>)
 80514ce:	f003 f9b7 	bl	8054840 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80514d2:	2300      	movs	r3, #0
 80514d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80514d6:	f246 0308 	movw	r3, #24584	; 0x6008
 80514da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80514dc:	7dfb      	ldrb	r3, [r7, #23]
 80514de:	b29c      	uxth	r4, r3
 80514e0:	68b8      	ldr	r0, [r7, #8]
 80514e2:	f7f9 f9ca 	bl	804a87a <lwip_htonl>
 80514e6:	4602      	mov	r2, r0
 80514e8:	8abb      	ldrh	r3, [r7, #20]
 80514ea:	9303      	str	r3, [sp, #12]
 80514ec:	2314      	movs	r3, #20
 80514ee:	9302      	str	r3, [sp, #8]
 80514f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80514f2:	9301      	str	r3, [sp, #4]
 80514f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80514f6:	9300      	str	r3, [sp, #0]
 80514f8:	4613      	mov	r3, r2
 80514fa:	2200      	movs	r2, #0
 80514fc:	4621      	mov	r1, r4
 80514fe:	6878      	ldr	r0, [r7, #4]
 8051500:	f7ff fe94 	bl	805122c <tcp_output_alloc_header_common>
 8051504:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8051506:	693b      	ldr	r3, [r7, #16]
 8051508:	2b00      	cmp	r3, #0
 805150a:	d00c      	beq.n	8051526 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 805150c:	7dfb      	ldrb	r3, [r7, #23]
 805150e:	2200      	movs	r2, #0
 8051510:	6939      	ldr	r1, [r7, #16]
 8051512:	68f8      	ldr	r0, [r7, #12]
 8051514:	f7ff ff3a 	bl	805138c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8051518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805151a:	683a      	ldr	r2, [r7, #0]
 805151c:	6939      	ldr	r1, [r7, #16]
 805151e:	68f8      	ldr	r0, [r7, #12]
 8051520:	f7ff ff72 	bl	8051408 <tcp_output_control_segment>
 8051524:	e000      	b.n	8051528 <tcp_rst+0x8c>
    return;
 8051526:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8051528:	371c      	adds	r7, #28
 805152a:	46bd      	mov	sp, r7
 805152c:	bd90      	pop	{r4, r7, pc}
 805152e:	bf00      	nop
 8051530:	08057110 	.word	0x08057110
 8051534:	08057894 	.word	0x08057894
 8051538:	08057164 	.word	0x08057164
 805153c:	080578b0 	.word	0x080578b0

08051540 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8051540:	b590      	push	{r4, r7, lr}
 8051542:	b087      	sub	sp, #28
 8051544:	af00      	add	r7, sp, #0
 8051546:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8051548:	2300      	movs	r3, #0
 805154a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 805154c:	2300      	movs	r3, #0
 805154e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8051550:	687b      	ldr	r3, [r7, #4]
 8051552:	2b00      	cmp	r3, #0
 8051554:	d106      	bne.n	8051564 <tcp_send_empty_ack+0x24>
 8051556:	4b28      	ldr	r3, [pc, #160]	; (80515f8 <tcp_send_empty_ack+0xb8>)
 8051558:	f240 72ea 	movw	r2, #2026	; 0x7ea
 805155c:	4927      	ldr	r1, [pc, #156]	; (80515fc <tcp_send_empty_ack+0xbc>)
 805155e:	4828      	ldr	r0, [pc, #160]	; (8051600 <tcp_send_empty_ack+0xc0>)
 8051560:	f003 f96e 	bl	8054840 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8051564:	7dfb      	ldrb	r3, [r7, #23]
 8051566:	009b      	lsls	r3, r3, #2
 8051568:	b2db      	uxtb	r3, r3
 805156a:	f003 0304 	and.w	r3, r3, #4
 805156e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8051570:	7d7b      	ldrb	r3, [r7, #21]
 8051572:	b29c      	uxth	r4, r3
 8051574:	687b      	ldr	r3, [r7, #4]
 8051576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8051578:	4618      	mov	r0, r3
 805157a:	f7f9 f97e 	bl	804a87a <lwip_htonl>
 805157e:	4603      	mov	r3, r0
 8051580:	2200      	movs	r2, #0
 8051582:	4621      	mov	r1, r4
 8051584:	6878      	ldr	r0, [r7, #4]
 8051586:	f7ff fec3 	bl	8051310 <tcp_output_alloc_header>
 805158a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 805158c:	693b      	ldr	r3, [r7, #16]
 805158e:	2b00      	cmp	r3, #0
 8051590:	d109      	bne.n	80515a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8051592:	687b      	ldr	r3, [r7, #4]
 8051594:	8b5b      	ldrh	r3, [r3, #26]
 8051596:	f043 0303 	orr.w	r3, r3, #3
 805159a:	b29a      	uxth	r2, r3
 805159c:	687b      	ldr	r3, [r7, #4]
 805159e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80515a0:	f06f 0301 	mvn.w	r3, #1
 80515a4:	e023      	b.n	80515ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80515a6:	7dbb      	ldrb	r3, [r7, #22]
 80515a8:	7dfa      	ldrb	r2, [r7, #23]
 80515aa:	6939      	ldr	r1, [r7, #16]
 80515ac:	6878      	ldr	r0, [r7, #4]
 80515ae:	f7ff feed 	bl	805138c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80515b2:	687a      	ldr	r2, [r7, #4]
 80515b4:	687b      	ldr	r3, [r7, #4]
 80515b6:	3304      	adds	r3, #4
 80515b8:	6939      	ldr	r1, [r7, #16]
 80515ba:	6878      	ldr	r0, [r7, #4]
 80515bc:	f7ff ff24 	bl	8051408 <tcp_output_control_segment>
 80515c0:	4603      	mov	r3, r0
 80515c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80515c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80515c8:	2b00      	cmp	r3, #0
 80515ca:	d007      	beq.n	80515dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80515cc:	687b      	ldr	r3, [r7, #4]
 80515ce:	8b5b      	ldrh	r3, [r3, #26]
 80515d0:	f043 0303 	orr.w	r3, r3, #3
 80515d4:	b29a      	uxth	r2, r3
 80515d6:	687b      	ldr	r3, [r7, #4]
 80515d8:	835a      	strh	r2, [r3, #26]
 80515da:	e006      	b.n	80515ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80515dc:	687b      	ldr	r3, [r7, #4]
 80515de:	8b5b      	ldrh	r3, [r3, #26]
 80515e0:	f023 0303 	bic.w	r3, r3, #3
 80515e4:	b29a      	uxth	r2, r3
 80515e6:	687b      	ldr	r3, [r7, #4]
 80515e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80515ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80515ee:	4618      	mov	r0, r3
 80515f0:	371c      	adds	r7, #28
 80515f2:	46bd      	mov	sp, r7
 80515f4:	bd90      	pop	{r4, r7, pc}
 80515f6:	bf00      	nop
 80515f8:	08057110 	.word	0x08057110
 80515fc:	080578cc 	.word	0x080578cc
 8051600:	08057164 	.word	0x08057164

08051604 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8051604:	b590      	push	{r4, r7, lr}
 8051606:	b087      	sub	sp, #28
 8051608:	af00      	add	r7, sp, #0
 805160a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 805160c:	2300      	movs	r3, #0
 805160e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8051610:	687b      	ldr	r3, [r7, #4]
 8051612:	2b00      	cmp	r3, #0
 8051614:	d106      	bne.n	8051624 <tcp_keepalive+0x20>
 8051616:	4b18      	ldr	r3, [pc, #96]	; (8051678 <tcp_keepalive+0x74>)
 8051618:	f640 0224 	movw	r2, #2084	; 0x824
 805161c:	4917      	ldr	r1, [pc, #92]	; (805167c <tcp_keepalive+0x78>)
 805161e:	4818      	ldr	r0, [pc, #96]	; (8051680 <tcp_keepalive+0x7c>)
 8051620:	f003 f90e 	bl	8054840 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8051624:	7dfb      	ldrb	r3, [r7, #23]
 8051626:	b29c      	uxth	r4, r3
 8051628:	687b      	ldr	r3, [r7, #4]
 805162a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805162c:	3b01      	subs	r3, #1
 805162e:	4618      	mov	r0, r3
 8051630:	f7f9 f923 	bl	804a87a <lwip_htonl>
 8051634:	4603      	mov	r3, r0
 8051636:	2200      	movs	r2, #0
 8051638:	4621      	mov	r1, r4
 805163a:	6878      	ldr	r0, [r7, #4]
 805163c:	f7ff fe68 	bl	8051310 <tcp_output_alloc_header>
 8051640:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8051642:	693b      	ldr	r3, [r7, #16]
 8051644:	2b00      	cmp	r3, #0
 8051646:	d102      	bne.n	805164e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8051648:	f04f 33ff 	mov.w	r3, #4294967295
 805164c:	e010      	b.n	8051670 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 805164e:	7dfb      	ldrb	r3, [r7, #23]
 8051650:	2200      	movs	r2, #0
 8051652:	6939      	ldr	r1, [r7, #16]
 8051654:	6878      	ldr	r0, [r7, #4]
 8051656:	f7ff fe99 	bl	805138c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 805165a:	687a      	ldr	r2, [r7, #4]
 805165c:	687b      	ldr	r3, [r7, #4]
 805165e:	3304      	adds	r3, #4
 8051660:	6939      	ldr	r1, [r7, #16]
 8051662:	6878      	ldr	r0, [r7, #4]
 8051664:	f7ff fed0 	bl	8051408 <tcp_output_control_segment>
 8051668:	4603      	mov	r3, r0
 805166a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 805166c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8051670:	4618      	mov	r0, r3
 8051672:	371c      	adds	r7, #28
 8051674:	46bd      	mov	sp, r7
 8051676:	bd90      	pop	{r4, r7, pc}
 8051678:	08057110 	.word	0x08057110
 805167c:	080578ec 	.word	0x080578ec
 8051680:	08057164 	.word	0x08057164

08051684 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8051684:	b590      	push	{r4, r7, lr}
 8051686:	b08b      	sub	sp, #44	; 0x2c
 8051688:	af00      	add	r7, sp, #0
 805168a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 805168c:	2300      	movs	r3, #0
 805168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8051692:	687b      	ldr	r3, [r7, #4]
 8051694:	2b00      	cmp	r3, #0
 8051696:	d106      	bne.n	80516a6 <tcp_zero_window_probe+0x22>
 8051698:	4b4c      	ldr	r3, [pc, #304]	; (80517cc <tcp_zero_window_probe+0x148>)
 805169a:	f640 024f 	movw	r2, #2127	; 0x84f
 805169e:	494c      	ldr	r1, [pc, #304]	; (80517d0 <tcp_zero_window_probe+0x14c>)
 80516a0:	484c      	ldr	r0, [pc, #304]	; (80517d4 <tcp_zero_window_probe+0x150>)
 80516a2:	f003 f8cd 	bl	8054840 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80516a6:	687b      	ldr	r3, [r7, #4]
 80516a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80516aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80516ac:	6a3b      	ldr	r3, [r7, #32]
 80516ae:	2b00      	cmp	r3, #0
 80516b0:	d101      	bne.n	80516b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80516b2:	2300      	movs	r3, #0
 80516b4:	e086      	b.n	80517c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80516b6:	687b      	ldr	r3, [r7, #4]
 80516b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80516bc:	2bff      	cmp	r3, #255	; 0xff
 80516be:	d007      	beq.n	80516d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80516c0:	687b      	ldr	r3, [r7, #4]
 80516c2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80516c6:	3301      	adds	r3, #1
 80516c8:	b2da      	uxtb	r2, r3
 80516ca:	687b      	ldr	r3, [r7, #4]
 80516cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80516d0:	6a3b      	ldr	r3, [r7, #32]
 80516d2:	68db      	ldr	r3, [r3, #12]
 80516d4:	899b      	ldrh	r3, [r3, #12]
 80516d6:	b29b      	uxth	r3, r3
 80516d8:	4618      	mov	r0, r3
 80516da:	f7f9 f8b9 	bl	804a850 <lwip_htons>
 80516de:	4603      	mov	r3, r0
 80516e0:	b2db      	uxtb	r3, r3
 80516e2:	f003 0301 	and.w	r3, r3, #1
 80516e6:	2b00      	cmp	r3, #0
 80516e8:	d005      	beq.n	80516f6 <tcp_zero_window_probe+0x72>
 80516ea:	6a3b      	ldr	r3, [r7, #32]
 80516ec:	891b      	ldrh	r3, [r3, #8]
 80516ee:	2b00      	cmp	r3, #0
 80516f0:	d101      	bne.n	80516f6 <tcp_zero_window_probe+0x72>
 80516f2:	2301      	movs	r3, #1
 80516f4:	e000      	b.n	80516f8 <tcp_zero_window_probe+0x74>
 80516f6:	2300      	movs	r3, #0
 80516f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80516fa:	7ffb      	ldrb	r3, [r7, #31]
 80516fc:	2b00      	cmp	r3, #0
 80516fe:	bf0c      	ite	eq
 8051700:	2301      	moveq	r3, #1
 8051702:	2300      	movne	r3, #0
 8051704:	b2db      	uxtb	r3, r3
 8051706:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8051708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 805170c:	b299      	uxth	r1, r3
 805170e:	6a3b      	ldr	r3, [r7, #32]
 8051710:	68db      	ldr	r3, [r3, #12]
 8051712:	685b      	ldr	r3, [r3, #4]
 8051714:	8bba      	ldrh	r2, [r7, #28]
 8051716:	6878      	ldr	r0, [r7, #4]
 8051718:	f7ff fdfa 	bl	8051310 <tcp_output_alloc_header>
 805171c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 805171e:	69bb      	ldr	r3, [r7, #24]
 8051720:	2b00      	cmp	r3, #0
 8051722:	d102      	bne.n	805172a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8051724:	f04f 33ff 	mov.w	r3, #4294967295
 8051728:	e04c      	b.n	80517c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 805172a:	69bb      	ldr	r3, [r7, #24]
 805172c:	685b      	ldr	r3, [r3, #4]
 805172e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8051730:	7ffb      	ldrb	r3, [r7, #31]
 8051732:	2b00      	cmp	r3, #0
 8051734:	d011      	beq.n	805175a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8051736:	697b      	ldr	r3, [r7, #20]
 8051738:	899b      	ldrh	r3, [r3, #12]
 805173a:	b29b      	uxth	r3, r3
 805173c:	b21b      	sxth	r3, r3
 805173e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8051742:	b21c      	sxth	r4, r3
 8051744:	2011      	movs	r0, #17
 8051746:	f7f9 f883 	bl	804a850 <lwip_htons>
 805174a:	4603      	mov	r3, r0
 805174c:	b21b      	sxth	r3, r3
 805174e:	4323      	orrs	r3, r4
 8051750:	b21b      	sxth	r3, r3
 8051752:	b29a      	uxth	r2, r3
 8051754:	697b      	ldr	r3, [r7, #20]
 8051756:	819a      	strh	r2, [r3, #12]
 8051758:	e010      	b.n	805177c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 805175a:	69bb      	ldr	r3, [r7, #24]
 805175c:	685b      	ldr	r3, [r3, #4]
 805175e:	3314      	adds	r3, #20
 8051760:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8051762:	6a3b      	ldr	r3, [r7, #32]
 8051764:	6858      	ldr	r0, [r3, #4]
 8051766:	6a3b      	ldr	r3, [r7, #32]
 8051768:	685b      	ldr	r3, [r3, #4]
 805176a:	891a      	ldrh	r2, [r3, #8]
 805176c:	6a3b      	ldr	r3, [r7, #32]
 805176e:	891b      	ldrh	r3, [r3, #8]
 8051770:	1ad3      	subs	r3, r2, r3
 8051772:	b29b      	uxth	r3, r3
 8051774:	2201      	movs	r2, #1
 8051776:	6939      	ldr	r1, [r7, #16]
 8051778:	f7fa fe52 	bl	804c420 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 805177c:	6a3b      	ldr	r3, [r7, #32]
 805177e:	68db      	ldr	r3, [r3, #12]
 8051780:	685b      	ldr	r3, [r3, #4]
 8051782:	4618      	mov	r0, r3
 8051784:	f7f9 f879 	bl	804a87a <lwip_htonl>
 8051788:	4603      	mov	r3, r0
 805178a:	3301      	adds	r3, #1
 805178c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 805178e:	687b      	ldr	r3, [r7, #4]
 8051790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8051792:	68fb      	ldr	r3, [r7, #12]
 8051794:	1ad3      	subs	r3, r2, r3
 8051796:	2b00      	cmp	r3, #0
 8051798:	da02      	bge.n	80517a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 805179a:	687b      	ldr	r3, [r7, #4]
 805179c:	68fa      	ldr	r2, [r7, #12]
 805179e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80517a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80517a4:	2200      	movs	r2, #0
 80517a6:	69b9      	ldr	r1, [r7, #24]
 80517a8:	6878      	ldr	r0, [r7, #4]
 80517aa:	f7ff fdef 	bl	805138c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80517ae:	687a      	ldr	r2, [r7, #4]
 80517b0:	687b      	ldr	r3, [r7, #4]
 80517b2:	3304      	adds	r3, #4
 80517b4:	69b9      	ldr	r1, [r7, #24]
 80517b6:	6878      	ldr	r0, [r7, #4]
 80517b8:	f7ff fe26 	bl	8051408 <tcp_output_control_segment>
 80517bc:	4603      	mov	r3, r0
 80517be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80517c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80517c4:	4618      	mov	r0, r3
 80517c6:	372c      	adds	r7, #44	; 0x2c
 80517c8:	46bd      	mov	sp, r7
 80517ca:	bd90      	pop	{r4, r7, pc}
 80517cc:	08057110 	.word	0x08057110
 80517d0:	08057908 	.word	0x08057908
 80517d4:	08057164 	.word	0x08057164

080517d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80517d8:	b580      	push	{r7, lr}
 80517da:	b082      	sub	sp, #8
 80517dc:	af00      	add	r7, sp, #0
 80517de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80517e0:	f7fa ff0c 	bl	804c5fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80517e4:	4b0a      	ldr	r3, [pc, #40]	; (8051810 <tcpip_tcp_timer+0x38>)
 80517e6:	681b      	ldr	r3, [r3, #0]
 80517e8:	2b00      	cmp	r3, #0
 80517ea:	d103      	bne.n	80517f4 <tcpip_tcp_timer+0x1c>
 80517ec:	4b09      	ldr	r3, [pc, #36]	; (8051814 <tcpip_tcp_timer+0x3c>)
 80517ee:	681b      	ldr	r3, [r3, #0]
 80517f0:	2b00      	cmp	r3, #0
 80517f2:	d005      	beq.n	8051800 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80517f4:	2200      	movs	r2, #0
 80517f6:	4908      	ldr	r1, [pc, #32]	; (8051818 <tcpip_tcp_timer+0x40>)
 80517f8:	20fa      	movs	r0, #250	; 0xfa
 80517fa:	f000 f8f3 	bl	80519e4 <sys_timeout>
 80517fe:	e003      	b.n	8051808 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8051800:	4b06      	ldr	r3, [pc, #24]	; (805181c <tcpip_tcp_timer+0x44>)
 8051802:	2200      	movs	r2, #0
 8051804:	601a      	str	r2, [r3, #0]
  }
}
 8051806:	bf00      	nop
 8051808:	bf00      	nop
 805180a:	3708      	adds	r7, #8
 805180c:	46bd      	mov	sp, r7
 805180e:	bd80      	pop	{r7, pc}
 8051810:	200237d8 	.word	0x200237d8
 8051814:	200237dc 	.word	0x200237dc
 8051818:	080517d9 	.word	0x080517d9
 805181c:	20023824 	.word	0x20023824

08051820 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8051820:	b580      	push	{r7, lr}
 8051822:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8051824:	4b0a      	ldr	r3, [pc, #40]	; (8051850 <tcp_timer_needed+0x30>)
 8051826:	681b      	ldr	r3, [r3, #0]
 8051828:	2b00      	cmp	r3, #0
 805182a:	d10f      	bne.n	805184c <tcp_timer_needed+0x2c>
 805182c:	4b09      	ldr	r3, [pc, #36]	; (8051854 <tcp_timer_needed+0x34>)
 805182e:	681b      	ldr	r3, [r3, #0]
 8051830:	2b00      	cmp	r3, #0
 8051832:	d103      	bne.n	805183c <tcp_timer_needed+0x1c>
 8051834:	4b08      	ldr	r3, [pc, #32]	; (8051858 <tcp_timer_needed+0x38>)
 8051836:	681b      	ldr	r3, [r3, #0]
 8051838:	2b00      	cmp	r3, #0
 805183a:	d007      	beq.n	805184c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 805183c:	4b04      	ldr	r3, [pc, #16]	; (8051850 <tcp_timer_needed+0x30>)
 805183e:	2201      	movs	r2, #1
 8051840:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8051842:	2200      	movs	r2, #0
 8051844:	4905      	ldr	r1, [pc, #20]	; (805185c <tcp_timer_needed+0x3c>)
 8051846:	20fa      	movs	r0, #250	; 0xfa
 8051848:	f000 f8cc 	bl	80519e4 <sys_timeout>
  }
}
 805184c:	bf00      	nop
 805184e:	bd80      	pop	{r7, pc}
 8051850:	20023824 	.word	0x20023824
 8051854:	200237d8 	.word	0x200237d8
 8051858:	200237dc 	.word	0x200237dc
 805185c:	080517d9 	.word	0x080517d9

08051860 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8051860:	b580      	push	{r7, lr}
 8051862:	b086      	sub	sp, #24
 8051864:	af00      	add	r7, sp, #0
 8051866:	60f8      	str	r0, [r7, #12]
 8051868:	60b9      	str	r1, [r7, #8]
 805186a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 805186c:	200a      	movs	r0, #10
 805186e:	f7f9 fcc7 	bl	804b200 <memp_malloc>
 8051872:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8051874:	693b      	ldr	r3, [r7, #16]
 8051876:	2b00      	cmp	r3, #0
 8051878:	d109      	bne.n	805188e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 805187a:	693b      	ldr	r3, [r7, #16]
 805187c:	2b00      	cmp	r3, #0
 805187e:	d151      	bne.n	8051924 <sys_timeout_abs+0xc4>
 8051880:	4b2a      	ldr	r3, [pc, #168]	; (805192c <sys_timeout_abs+0xcc>)
 8051882:	22be      	movs	r2, #190	; 0xbe
 8051884:	492a      	ldr	r1, [pc, #168]	; (8051930 <sys_timeout_abs+0xd0>)
 8051886:	482b      	ldr	r0, [pc, #172]	; (8051934 <sys_timeout_abs+0xd4>)
 8051888:	f002 ffda 	bl	8054840 <iprintf>
    return;
 805188c:	e04a      	b.n	8051924 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 805188e:	693b      	ldr	r3, [r7, #16]
 8051890:	2200      	movs	r2, #0
 8051892:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8051894:	693b      	ldr	r3, [r7, #16]
 8051896:	68ba      	ldr	r2, [r7, #8]
 8051898:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 805189a:	693b      	ldr	r3, [r7, #16]
 805189c:	687a      	ldr	r2, [r7, #4]
 805189e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80518a0:	693b      	ldr	r3, [r7, #16]
 80518a2:	68fa      	ldr	r2, [r7, #12]
 80518a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80518a6:	4b24      	ldr	r3, [pc, #144]	; (8051938 <sys_timeout_abs+0xd8>)
 80518a8:	681b      	ldr	r3, [r3, #0]
 80518aa:	2b00      	cmp	r3, #0
 80518ac:	d103      	bne.n	80518b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80518ae:	4a22      	ldr	r2, [pc, #136]	; (8051938 <sys_timeout_abs+0xd8>)
 80518b0:	693b      	ldr	r3, [r7, #16]
 80518b2:	6013      	str	r3, [r2, #0]
    return;
 80518b4:	e037      	b.n	8051926 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80518b6:	693b      	ldr	r3, [r7, #16]
 80518b8:	685a      	ldr	r2, [r3, #4]
 80518ba:	4b1f      	ldr	r3, [pc, #124]	; (8051938 <sys_timeout_abs+0xd8>)
 80518bc:	681b      	ldr	r3, [r3, #0]
 80518be:	685b      	ldr	r3, [r3, #4]
 80518c0:	1ad3      	subs	r3, r2, r3
 80518c2:	0fdb      	lsrs	r3, r3, #31
 80518c4:	f003 0301 	and.w	r3, r3, #1
 80518c8:	b2db      	uxtb	r3, r3
 80518ca:	2b00      	cmp	r3, #0
 80518cc:	d007      	beq.n	80518de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80518ce:	4b1a      	ldr	r3, [pc, #104]	; (8051938 <sys_timeout_abs+0xd8>)
 80518d0:	681a      	ldr	r2, [r3, #0]
 80518d2:	693b      	ldr	r3, [r7, #16]
 80518d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80518d6:	4a18      	ldr	r2, [pc, #96]	; (8051938 <sys_timeout_abs+0xd8>)
 80518d8:	693b      	ldr	r3, [r7, #16]
 80518da:	6013      	str	r3, [r2, #0]
 80518dc:	e023      	b.n	8051926 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80518de:	4b16      	ldr	r3, [pc, #88]	; (8051938 <sys_timeout_abs+0xd8>)
 80518e0:	681b      	ldr	r3, [r3, #0]
 80518e2:	617b      	str	r3, [r7, #20]
 80518e4:	e01a      	b.n	805191c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80518e6:	697b      	ldr	r3, [r7, #20]
 80518e8:	681b      	ldr	r3, [r3, #0]
 80518ea:	2b00      	cmp	r3, #0
 80518ec:	d00b      	beq.n	8051906 <sys_timeout_abs+0xa6>
 80518ee:	693b      	ldr	r3, [r7, #16]
 80518f0:	685a      	ldr	r2, [r3, #4]
 80518f2:	697b      	ldr	r3, [r7, #20]
 80518f4:	681b      	ldr	r3, [r3, #0]
 80518f6:	685b      	ldr	r3, [r3, #4]
 80518f8:	1ad3      	subs	r3, r2, r3
 80518fa:	0fdb      	lsrs	r3, r3, #31
 80518fc:	f003 0301 	and.w	r3, r3, #1
 8051900:	b2db      	uxtb	r3, r3
 8051902:	2b00      	cmp	r3, #0
 8051904:	d007      	beq.n	8051916 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8051906:	697b      	ldr	r3, [r7, #20]
 8051908:	681a      	ldr	r2, [r3, #0]
 805190a:	693b      	ldr	r3, [r7, #16]
 805190c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 805190e:	697b      	ldr	r3, [r7, #20]
 8051910:	693a      	ldr	r2, [r7, #16]
 8051912:	601a      	str	r2, [r3, #0]
        break;
 8051914:	e007      	b.n	8051926 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8051916:	697b      	ldr	r3, [r7, #20]
 8051918:	681b      	ldr	r3, [r3, #0]
 805191a:	617b      	str	r3, [r7, #20]
 805191c:	697b      	ldr	r3, [r7, #20]
 805191e:	2b00      	cmp	r3, #0
 8051920:	d1e1      	bne.n	80518e6 <sys_timeout_abs+0x86>
 8051922:	e000      	b.n	8051926 <sys_timeout_abs+0xc6>
    return;
 8051924:	bf00      	nop
      }
    }
  }
}
 8051926:	3718      	adds	r7, #24
 8051928:	46bd      	mov	sp, r7
 805192a:	bd80      	pop	{r7, pc}
 805192c:	0805792c 	.word	0x0805792c
 8051930:	08057960 	.word	0x08057960
 8051934:	080579a0 	.word	0x080579a0
 8051938:	2002381c 	.word	0x2002381c

0805193c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 805193c:	b580      	push	{r7, lr}
 805193e:	b086      	sub	sp, #24
 8051940:	af00      	add	r7, sp, #0
 8051942:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8051944:	687b      	ldr	r3, [r7, #4]
 8051946:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8051948:	697b      	ldr	r3, [r7, #20]
 805194a:	685b      	ldr	r3, [r3, #4]
 805194c:	4798      	blx	r3

  now = sys_now();
 805194e:	f7f5 fb5d 	bl	804700c <sys_now>
 8051952:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8051954:	697b      	ldr	r3, [r7, #20]
 8051956:	681a      	ldr	r2, [r3, #0]
 8051958:	4b0f      	ldr	r3, [pc, #60]	; (8051998 <lwip_cyclic_timer+0x5c>)
 805195a:	681b      	ldr	r3, [r3, #0]
 805195c:	4413      	add	r3, r2
 805195e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8051960:	68fa      	ldr	r2, [r7, #12]
 8051962:	693b      	ldr	r3, [r7, #16]
 8051964:	1ad3      	subs	r3, r2, r3
 8051966:	0fdb      	lsrs	r3, r3, #31
 8051968:	f003 0301 	and.w	r3, r3, #1
 805196c:	b2db      	uxtb	r3, r3
 805196e:	2b00      	cmp	r3, #0
 8051970:	d009      	beq.n	8051986 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8051972:	697b      	ldr	r3, [r7, #20]
 8051974:	681a      	ldr	r2, [r3, #0]
 8051976:	693b      	ldr	r3, [r7, #16]
 8051978:	4413      	add	r3, r2
 805197a:	687a      	ldr	r2, [r7, #4]
 805197c:	4907      	ldr	r1, [pc, #28]	; (805199c <lwip_cyclic_timer+0x60>)
 805197e:	4618      	mov	r0, r3
 8051980:	f7ff ff6e 	bl	8051860 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8051984:	e004      	b.n	8051990 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8051986:	687a      	ldr	r2, [r7, #4]
 8051988:	4904      	ldr	r1, [pc, #16]	; (805199c <lwip_cyclic_timer+0x60>)
 805198a:	68f8      	ldr	r0, [r7, #12]
 805198c:	f7ff ff68 	bl	8051860 <sys_timeout_abs>
}
 8051990:	bf00      	nop
 8051992:	3718      	adds	r7, #24
 8051994:	46bd      	mov	sp, r7
 8051996:	bd80      	pop	{r7, pc}
 8051998:	20023820 	.word	0x20023820
 805199c:	0805193d 	.word	0x0805193d

080519a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80519a0:	b580      	push	{r7, lr}
 80519a2:	b082      	sub	sp, #8
 80519a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80519a6:	2301      	movs	r3, #1
 80519a8:	607b      	str	r3, [r7, #4]
 80519aa:	e00e      	b.n	80519ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80519ac:	4a0b      	ldr	r2, [pc, #44]	; (80519dc <sys_timeouts_init+0x3c>)
 80519ae:	687b      	ldr	r3, [r7, #4]
 80519b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80519b4:	687b      	ldr	r3, [r7, #4]
 80519b6:	00db      	lsls	r3, r3, #3
 80519b8:	4a08      	ldr	r2, [pc, #32]	; (80519dc <sys_timeouts_init+0x3c>)
 80519ba:	4413      	add	r3, r2
 80519bc:	461a      	mov	r2, r3
 80519be:	4908      	ldr	r1, [pc, #32]	; (80519e0 <sys_timeouts_init+0x40>)
 80519c0:	f000 f810 	bl	80519e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80519c4:	687b      	ldr	r3, [r7, #4]
 80519c6:	3301      	adds	r3, #1
 80519c8:	607b      	str	r3, [r7, #4]
 80519ca:	687b      	ldr	r3, [r7, #4]
 80519cc:	2b02      	cmp	r3, #2
 80519ce:	d9ed      	bls.n	80519ac <sys_timeouts_init+0xc>
  }
}
 80519d0:	bf00      	nop
 80519d2:	bf00      	nop
 80519d4:	3708      	adds	r7, #8
 80519d6:	46bd      	mov	sp, r7
 80519d8:	bd80      	pop	{r7, pc}
 80519da:	bf00      	nop
 80519dc:	08058560 	.word	0x08058560
 80519e0:	0805193d 	.word	0x0805193d

080519e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80519e4:	b580      	push	{r7, lr}
 80519e6:	b086      	sub	sp, #24
 80519e8:	af00      	add	r7, sp, #0
 80519ea:	60f8      	str	r0, [r7, #12]
 80519ec:	60b9      	str	r1, [r7, #8]
 80519ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80519f0:	68fb      	ldr	r3, [r7, #12]
 80519f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80519f6:	d306      	bcc.n	8051a06 <sys_timeout+0x22>
 80519f8:	4b0a      	ldr	r3, [pc, #40]	; (8051a24 <sys_timeout+0x40>)
 80519fa:	f240 1229 	movw	r2, #297	; 0x129
 80519fe:	490a      	ldr	r1, [pc, #40]	; (8051a28 <sys_timeout+0x44>)
 8051a00:	480a      	ldr	r0, [pc, #40]	; (8051a2c <sys_timeout+0x48>)
 8051a02:	f002 ff1d 	bl	8054840 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8051a06:	f7f5 fb01 	bl	804700c <sys_now>
 8051a0a:	4602      	mov	r2, r0
 8051a0c:	68fb      	ldr	r3, [r7, #12]
 8051a0e:	4413      	add	r3, r2
 8051a10:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8051a12:	687a      	ldr	r2, [r7, #4]
 8051a14:	68b9      	ldr	r1, [r7, #8]
 8051a16:	6978      	ldr	r0, [r7, #20]
 8051a18:	f7ff ff22 	bl	8051860 <sys_timeout_abs>
#endif
}
 8051a1c:	bf00      	nop
 8051a1e:	3718      	adds	r7, #24
 8051a20:	46bd      	mov	sp, r7
 8051a22:	bd80      	pop	{r7, pc}
 8051a24:	0805792c 	.word	0x0805792c
 8051a28:	080579c8 	.word	0x080579c8
 8051a2c:	080579a0 	.word	0x080579a0

08051a30 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8051a30:	b580      	push	{r7, lr}
 8051a32:	b084      	sub	sp, #16
 8051a34:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8051a36:	f7f5 fae9 	bl	804700c <sys_now>
 8051a3a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8051a3c:	4b17      	ldr	r3, [pc, #92]	; (8051a9c <sys_check_timeouts+0x6c>)
 8051a3e:	681b      	ldr	r3, [r3, #0]
 8051a40:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8051a42:	68bb      	ldr	r3, [r7, #8]
 8051a44:	2b00      	cmp	r3, #0
 8051a46:	d022      	beq.n	8051a8e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8051a48:	68bb      	ldr	r3, [r7, #8]
 8051a4a:	685b      	ldr	r3, [r3, #4]
 8051a4c:	68fa      	ldr	r2, [r7, #12]
 8051a4e:	1ad3      	subs	r3, r2, r3
 8051a50:	0fdb      	lsrs	r3, r3, #31
 8051a52:	f003 0301 	and.w	r3, r3, #1
 8051a56:	b2db      	uxtb	r3, r3
 8051a58:	2b00      	cmp	r3, #0
 8051a5a:	d11a      	bne.n	8051a92 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8051a5c:	68bb      	ldr	r3, [r7, #8]
 8051a5e:	681b      	ldr	r3, [r3, #0]
 8051a60:	4a0e      	ldr	r2, [pc, #56]	; (8051a9c <sys_check_timeouts+0x6c>)
 8051a62:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8051a64:	68bb      	ldr	r3, [r7, #8]
 8051a66:	689b      	ldr	r3, [r3, #8]
 8051a68:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8051a6a:	68bb      	ldr	r3, [r7, #8]
 8051a6c:	68db      	ldr	r3, [r3, #12]
 8051a6e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8051a70:	68bb      	ldr	r3, [r7, #8]
 8051a72:	685b      	ldr	r3, [r3, #4]
 8051a74:	4a0a      	ldr	r2, [pc, #40]	; (8051aa0 <sys_check_timeouts+0x70>)
 8051a76:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8051a78:	68b9      	ldr	r1, [r7, #8]
 8051a7a:	200a      	movs	r0, #10
 8051a7c:	f7f9 fc36 	bl	804b2ec <memp_free>
    if (handler != NULL) {
 8051a80:	687b      	ldr	r3, [r7, #4]
 8051a82:	2b00      	cmp	r3, #0
 8051a84:	d0da      	beq.n	8051a3c <sys_check_timeouts+0xc>
      handler(arg);
 8051a86:	687b      	ldr	r3, [r7, #4]
 8051a88:	6838      	ldr	r0, [r7, #0]
 8051a8a:	4798      	blx	r3
  do {
 8051a8c:	e7d6      	b.n	8051a3c <sys_check_timeouts+0xc>
      return;
 8051a8e:	bf00      	nop
 8051a90:	e000      	b.n	8051a94 <sys_check_timeouts+0x64>
      return;
 8051a92:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8051a94:	3710      	adds	r7, #16
 8051a96:	46bd      	mov	sp, r7
 8051a98:	bd80      	pop	{r7, pc}
 8051a9a:	bf00      	nop
 8051a9c:	2002381c 	.word	0x2002381c
 8051aa0:	20023820 	.word	0x20023820

08051aa4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8051aa4:	b580      	push	{r7, lr}
 8051aa6:	b082      	sub	sp, #8
 8051aa8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8051aaa:	4b16      	ldr	r3, [pc, #88]	; (8051b04 <sys_timeouts_sleeptime+0x60>)
 8051aac:	681b      	ldr	r3, [r3, #0]
 8051aae:	2b00      	cmp	r3, #0
 8051ab0:	d102      	bne.n	8051ab8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8051ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8051ab6:	e020      	b.n	8051afa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8051ab8:	f7f5 faa8 	bl	804700c <sys_now>
 8051abc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8051abe:	4b11      	ldr	r3, [pc, #68]	; (8051b04 <sys_timeouts_sleeptime+0x60>)
 8051ac0:	681b      	ldr	r3, [r3, #0]
 8051ac2:	685a      	ldr	r2, [r3, #4]
 8051ac4:	687b      	ldr	r3, [r7, #4]
 8051ac6:	1ad3      	subs	r3, r2, r3
 8051ac8:	0fdb      	lsrs	r3, r3, #31
 8051aca:	f003 0301 	and.w	r3, r3, #1
 8051ace:	b2db      	uxtb	r3, r3
 8051ad0:	2b00      	cmp	r3, #0
 8051ad2:	d001      	beq.n	8051ad8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8051ad4:	2300      	movs	r3, #0
 8051ad6:	e010      	b.n	8051afa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8051ad8:	4b0a      	ldr	r3, [pc, #40]	; (8051b04 <sys_timeouts_sleeptime+0x60>)
 8051ada:	681b      	ldr	r3, [r3, #0]
 8051adc:	685a      	ldr	r2, [r3, #4]
 8051ade:	687b      	ldr	r3, [r7, #4]
 8051ae0:	1ad3      	subs	r3, r2, r3
 8051ae2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8051ae4:	683b      	ldr	r3, [r7, #0]
 8051ae6:	2b00      	cmp	r3, #0
 8051ae8:	da06      	bge.n	8051af8 <sys_timeouts_sleeptime+0x54>
 8051aea:	4b07      	ldr	r3, [pc, #28]	; (8051b08 <sys_timeouts_sleeptime+0x64>)
 8051aec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8051af0:	4906      	ldr	r1, [pc, #24]	; (8051b0c <sys_timeouts_sleeptime+0x68>)
 8051af2:	4807      	ldr	r0, [pc, #28]	; (8051b10 <sys_timeouts_sleeptime+0x6c>)
 8051af4:	f002 fea4 	bl	8054840 <iprintf>
    return ret;
 8051af8:	683b      	ldr	r3, [r7, #0]
  }
}
 8051afa:	4618      	mov	r0, r3
 8051afc:	3708      	adds	r7, #8
 8051afe:	46bd      	mov	sp, r7
 8051b00:	bd80      	pop	{r7, pc}
 8051b02:	bf00      	nop
 8051b04:	2002381c 	.word	0x2002381c
 8051b08:	0805792c 	.word	0x0805792c
 8051b0c:	08057a00 	.word	0x08057a00
 8051b10:	080579a0 	.word	0x080579a0

08051b14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8051b14:	b580      	push	{r7, lr}
 8051b16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8051b18:	f002 fd92 	bl	8054640 <rand>
 8051b1c:	4603      	mov	r3, r0
 8051b1e:	b29b      	uxth	r3, r3
 8051b20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8051b24:	b29b      	uxth	r3, r3
 8051b26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8051b2a:	b29a      	uxth	r2, r3
 8051b2c:	4b01      	ldr	r3, [pc, #4]	; (8051b34 <udp_init+0x20>)
 8051b2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8051b30:	bf00      	nop
 8051b32:	bd80      	pop	{r7, pc}
 8051b34:	2000002c 	.word	0x2000002c

08051b38 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8051b38:	b580      	push	{r7, lr}
 8051b3a:	b084      	sub	sp, #16
 8051b3c:	af00      	add	r7, sp, #0
 8051b3e:	60f8      	str	r0, [r7, #12]
 8051b40:	60b9      	str	r1, [r7, #8]
 8051b42:	4613      	mov	r3, r2
 8051b44:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8051b46:	68fb      	ldr	r3, [r7, #12]
 8051b48:	2b00      	cmp	r3, #0
 8051b4a:	d105      	bne.n	8051b58 <udp_input_local_match+0x20>
 8051b4c:	4b27      	ldr	r3, [pc, #156]	; (8051bec <udp_input_local_match+0xb4>)
 8051b4e:	2287      	movs	r2, #135	; 0x87
 8051b50:	4927      	ldr	r1, [pc, #156]	; (8051bf0 <udp_input_local_match+0xb8>)
 8051b52:	4828      	ldr	r0, [pc, #160]	; (8051bf4 <udp_input_local_match+0xbc>)
 8051b54:	f002 fe74 	bl	8054840 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8051b58:	68bb      	ldr	r3, [r7, #8]
 8051b5a:	2b00      	cmp	r3, #0
 8051b5c:	d105      	bne.n	8051b6a <udp_input_local_match+0x32>
 8051b5e:	4b23      	ldr	r3, [pc, #140]	; (8051bec <udp_input_local_match+0xb4>)
 8051b60:	2288      	movs	r2, #136	; 0x88
 8051b62:	4925      	ldr	r1, [pc, #148]	; (8051bf8 <udp_input_local_match+0xc0>)
 8051b64:	4823      	ldr	r0, [pc, #140]	; (8051bf4 <udp_input_local_match+0xbc>)
 8051b66:	f002 fe6b 	bl	8054840 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8051b6a:	68fb      	ldr	r3, [r7, #12]
 8051b6c:	7a1b      	ldrb	r3, [r3, #8]
 8051b6e:	2b00      	cmp	r3, #0
 8051b70:	d00b      	beq.n	8051b8a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8051b72:	68fb      	ldr	r3, [r7, #12]
 8051b74:	7a1a      	ldrb	r2, [r3, #8]
 8051b76:	4b21      	ldr	r3, [pc, #132]	; (8051bfc <udp_input_local_match+0xc4>)
 8051b78:	685b      	ldr	r3, [r3, #4]
 8051b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8051b7e:	3301      	adds	r3, #1
 8051b80:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8051b82:	429a      	cmp	r2, r3
 8051b84:	d001      	beq.n	8051b8a <udp_input_local_match+0x52>
    return 0;
 8051b86:	2300      	movs	r3, #0
 8051b88:	e02b      	b.n	8051be2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8051b8a:	79fb      	ldrb	r3, [r7, #7]
 8051b8c:	2b00      	cmp	r3, #0
 8051b8e:	d018      	beq.n	8051bc2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8051b90:	68fb      	ldr	r3, [r7, #12]
 8051b92:	2b00      	cmp	r3, #0
 8051b94:	d013      	beq.n	8051bbe <udp_input_local_match+0x86>
 8051b96:	68fb      	ldr	r3, [r7, #12]
 8051b98:	681b      	ldr	r3, [r3, #0]
 8051b9a:	2b00      	cmp	r3, #0
 8051b9c:	d00f      	beq.n	8051bbe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8051b9e:	4b17      	ldr	r3, [pc, #92]	; (8051bfc <udp_input_local_match+0xc4>)
 8051ba0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8051ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8051ba6:	d00a      	beq.n	8051bbe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8051ba8:	68fb      	ldr	r3, [r7, #12]
 8051baa:	681a      	ldr	r2, [r3, #0]
 8051bac:	4b13      	ldr	r3, [pc, #76]	; (8051bfc <udp_input_local_match+0xc4>)
 8051bae:	695b      	ldr	r3, [r3, #20]
 8051bb0:	405a      	eors	r2, r3
 8051bb2:	68bb      	ldr	r3, [r7, #8]
 8051bb4:	3308      	adds	r3, #8
 8051bb6:	681b      	ldr	r3, [r3, #0]
 8051bb8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8051bba:	2b00      	cmp	r3, #0
 8051bbc:	d110      	bne.n	8051be0 <udp_input_local_match+0xa8>
          return 1;
 8051bbe:	2301      	movs	r3, #1
 8051bc0:	e00f      	b.n	8051be2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8051bc2:	68fb      	ldr	r3, [r7, #12]
 8051bc4:	2b00      	cmp	r3, #0
 8051bc6:	d009      	beq.n	8051bdc <udp_input_local_match+0xa4>
 8051bc8:	68fb      	ldr	r3, [r7, #12]
 8051bca:	681b      	ldr	r3, [r3, #0]
 8051bcc:	2b00      	cmp	r3, #0
 8051bce:	d005      	beq.n	8051bdc <udp_input_local_match+0xa4>
 8051bd0:	68fb      	ldr	r3, [r7, #12]
 8051bd2:	681a      	ldr	r2, [r3, #0]
 8051bd4:	4b09      	ldr	r3, [pc, #36]	; (8051bfc <udp_input_local_match+0xc4>)
 8051bd6:	695b      	ldr	r3, [r3, #20]
 8051bd8:	429a      	cmp	r2, r3
 8051bda:	d101      	bne.n	8051be0 <udp_input_local_match+0xa8>
        return 1;
 8051bdc:	2301      	movs	r3, #1
 8051bde:	e000      	b.n	8051be2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8051be0:	2300      	movs	r3, #0
}
 8051be2:	4618      	mov	r0, r3
 8051be4:	3710      	adds	r7, #16
 8051be6:	46bd      	mov	sp, r7
 8051be8:	bd80      	pop	{r7, pc}
 8051bea:	bf00      	nop
 8051bec:	08057a14 	.word	0x08057a14
 8051bf0:	08057a44 	.word	0x08057a44
 8051bf4:	08057a68 	.word	0x08057a68
 8051bf8:	08057a90 	.word	0x08057a90
 8051bfc:	20020078 	.word	0x20020078

08051c00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8051c00:	b590      	push	{r4, r7, lr}
 8051c02:	b08d      	sub	sp, #52	; 0x34
 8051c04:	af02      	add	r7, sp, #8
 8051c06:	6078      	str	r0, [r7, #4]
 8051c08:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8051c0a:	2300      	movs	r3, #0
 8051c0c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8051c0e:	687b      	ldr	r3, [r7, #4]
 8051c10:	2b00      	cmp	r3, #0
 8051c12:	d105      	bne.n	8051c20 <udp_input+0x20>
 8051c14:	4b7c      	ldr	r3, [pc, #496]	; (8051e08 <udp_input+0x208>)
 8051c16:	22cf      	movs	r2, #207	; 0xcf
 8051c18:	497c      	ldr	r1, [pc, #496]	; (8051e0c <udp_input+0x20c>)
 8051c1a:	487d      	ldr	r0, [pc, #500]	; (8051e10 <udp_input+0x210>)
 8051c1c:	f002 fe10 	bl	8054840 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8051c20:	683b      	ldr	r3, [r7, #0]
 8051c22:	2b00      	cmp	r3, #0
 8051c24:	d105      	bne.n	8051c32 <udp_input+0x32>
 8051c26:	4b78      	ldr	r3, [pc, #480]	; (8051e08 <udp_input+0x208>)
 8051c28:	22d0      	movs	r2, #208	; 0xd0
 8051c2a:	497a      	ldr	r1, [pc, #488]	; (8051e14 <udp_input+0x214>)
 8051c2c:	4878      	ldr	r0, [pc, #480]	; (8051e10 <udp_input+0x210>)
 8051c2e:	f002 fe07 	bl	8054840 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8051c32:	687b      	ldr	r3, [r7, #4]
 8051c34:	895b      	ldrh	r3, [r3, #10]
 8051c36:	2b07      	cmp	r3, #7
 8051c38:	d803      	bhi.n	8051c42 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8051c3a:	6878      	ldr	r0, [r7, #4]
 8051c3c:	f7fa f9fa 	bl	804c034 <pbuf_free>
    goto end;
 8051c40:	e0de      	b.n	8051e00 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8051c42:	687b      	ldr	r3, [r7, #4]
 8051c44:	685b      	ldr	r3, [r3, #4]
 8051c46:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8051c48:	4b73      	ldr	r3, [pc, #460]	; (8051e18 <udp_input+0x218>)
 8051c4a:	695b      	ldr	r3, [r3, #20]
 8051c4c:	4a72      	ldr	r2, [pc, #456]	; (8051e18 <udp_input+0x218>)
 8051c4e:	6812      	ldr	r2, [r2, #0]
 8051c50:	4611      	mov	r1, r2
 8051c52:	4618      	mov	r0, r3
 8051c54:	f001 fc88 	bl	8053568 <ip4_addr_isbroadcast_u32>
 8051c58:	4603      	mov	r3, r0
 8051c5a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8051c5c:	697b      	ldr	r3, [r7, #20]
 8051c5e:	881b      	ldrh	r3, [r3, #0]
 8051c60:	b29b      	uxth	r3, r3
 8051c62:	4618      	mov	r0, r3
 8051c64:	f7f8 fdf4 	bl	804a850 <lwip_htons>
 8051c68:	4603      	mov	r3, r0
 8051c6a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8051c6c:	697b      	ldr	r3, [r7, #20]
 8051c6e:	885b      	ldrh	r3, [r3, #2]
 8051c70:	b29b      	uxth	r3, r3
 8051c72:	4618      	mov	r0, r3
 8051c74:	f7f8 fdec 	bl	804a850 <lwip_htons>
 8051c78:	4603      	mov	r3, r0
 8051c7a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8051c7c:	2300      	movs	r3, #0
 8051c7e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8051c80:	2300      	movs	r3, #0
 8051c82:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8051c84:	2300      	movs	r3, #0
 8051c86:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8051c88:	4b64      	ldr	r3, [pc, #400]	; (8051e1c <udp_input+0x21c>)
 8051c8a:	681b      	ldr	r3, [r3, #0]
 8051c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8051c8e:	e054      	b.n	8051d3a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8051c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051c92:	8a5b      	ldrh	r3, [r3, #18]
 8051c94:	89fa      	ldrh	r2, [r7, #14]
 8051c96:	429a      	cmp	r2, r3
 8051c98:	d14a      	bne.n	8051d30 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8051c9a:	7cfb      	ldrb	r3, [r7, #19]
 8051c9c:	461a      	mov	r2, r3
 8051c9e:	6839      	ldr	r1, [r7, #0]
 8051ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8051ca2:	f7ff ff49 	bl	8051b38 <udp_input_local_match>
 8051ca6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8051ca8:	2b00      	cmp	r3, #0
 8051caa:	d041      	beq.n	8051d30 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8051cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051cae:	7c1b      	ldrb	r3, [r3, #16]
 8051cb0:	f003 0304 	and.w	r3, r3, #4
 8051cb4:	2b00      	cmp	r3, #0
 8051cb6:	d11d      	bne.n	8051cf4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8051cb8:	69fb      	ldr	r3, [r7, #28]
 8051cba:	2b00      	cmp	r3, #0
 8051cbc:	d102      	bne.n	8051cc4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8051cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051cc0:	61fb      	str	r3, [r7, #28]
 8051cc2:	e017      	b.n	8051cf4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8051cc4:	7cfb      	ldrb	r3, [r7, #19]
 8051cc6:	2b00      	cmp	r3, #0
 8051cc8:	d014      	beq.n	8051cf4 <udp_input+0xf4>
 8051cca:	4b53      	ldr	r3, [pc, #332]	; (8051e18 <udp_input+0x218>)
 8051ccc:	695b      	ldr	r3, [r3, #20]
 8051cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8051cd2:	d10f      	bne.n	8051cf4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8051cd4:	69fb      	ldr	r3, [r7, #28]
 8051cd6:	681a      	ldr	r2, [r3, #0]
 8051cd8:	683b      	ldr	r3, [r7, #0]
 8051cda:	3304      	adds	r3, #4
 8051cdc:	681b      	ldr	r3, [r3, #0]
 8051cde:	429a      	cmp	r2, r3
 8051ce0:	d008      	beq.n	8051cf4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8051ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051ce4:	681a      	ldr	r2, [r3, #0]
 8051ce6:	683b      	ldr	r3, [r7, #0]
 8051ce8:	3304      	adds	r3, #4
 8051cea:	681b      	ldr	r3, [r3, #0]
 8051cec:	429a      	cmp	r2, r3
 8051cee:	d101      	bne.n	8051cf4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8051cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051cf2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8051cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051cf6:	8a9b      	ldrh	r3, [r3, #20]
 8051cf8:	8a3a      	ldrh	r2, [r7, #16]
 8051cfa:	429a      	cmp	r2, r3
 8051cfc:	d118      	bne.n	8051d30 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8051cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d00:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8051d02:	2b00      	cmp	r3, #0
 8051d04:	d005      	beq.n	8051d12 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8051d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d08:	685a      	ldr	r2, [r3, #4]
 8051d0a:	4b43      	ldr	r3, [pc, #268]	; (8051e18 <udp_input+0x218>)
 8051d0c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8051d0e:	429a      	cmp	r2, r3
 8051d10:	d10e      	bne.n	8051d30 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8051d12:	6a3b      	ldr	r3, [r7, #32]
 8051d14:	2b00      	cmp	r3, #0
 8051d16:	d014      	beq.n	8051d42 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8051d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d1a:	68da      	ldr	r2, [r3, #12]
 8051d1c:	6a3b      	ldr	r3, [r7, #32]
 8051d1e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8051d20:	4b3e      	ldr	r3, [pc, #248]	; (8051e1c <udp_input+0x21c>)
 8051d22:	681a      	ldr	r2, [r3, #0]
 8051d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d26:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8051d28:	4a3c      	ldr	r2, [pc, #240]	; (8051e1c <udp_input+0x21c>)
 8051d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d2c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8051d2e:	e008      	b.n	8051d42 <udp_input+0x142>
      }
    }

    prev = pcb;
 8051d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d32:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8051d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d36:	68db      	ldr	r3, [r3, #12]
 8051d38:	627b      	str	r3, [r7, #36]	; 0x24
 8051d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d3c:	2b00      	cmp	r3, #0
 8051d3e:	d1a7      	bne.n	8051c90 <udp_input+0x90>
 8051d40:	e000      	b.n	8051d44 <udp_input+0x144>
        break;
 8051d42:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8051d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d46:	2b00      	cmp	r3, #0
 8051d48:	d101      	bne.n	8051d4e <udp_input+0x14e>
    pcb = uncon_pcb;
 8051d4a:	69fb      	ldr	r3, [r7, #28]
 8051d4c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8051d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d50:	2b00      	cmp	r3, #0
 8051d52:	d002      	beq.n	8051d5a <udp_input+0x15a>
    for_us = 1;
 8051d54:	2301      	movs	r3, #1
 8051d56:	76fb      	strb	r3, [r7, #27]
 8051d58:	e00a      	b.n	8051d70 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8051d5a:	683b      	ldr	r3, [r7, #0]
 8051d5c:	3304      	adds	r3, #4
 8051d5e:	681a      	ldr	r2, [r3, #0]
 8051d60:	4b2d      	ldr	r3, [pc, #180]	; (8051e18 <udp_input+0x218>)
 8051d62:	695b      	ldr	r3, [r3, #20]
 8051d64:	429a      	cmp	r2, r3
 8051d66:	bf0c      	ite	eq
 8051d68:	2301      	moveq	r3, #1
 8051d6a:	2300      	movne	r3, #0
 8051d6c:	b2db      	uxtb	r3, r3
 8051d6e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8051d70:	7efb      	ldrb	r3, [r7, #27]
 8051d72:	2b00      	cmp	r3, #0
 8051d74:	d041      	beq.n	8051dfa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8051d76:	2108      	movs	r1, #8
 8051d78:	6878      	ldr	r0, [r7, #4]
 8051d7a:	f7fa f8d5 	bl	804bf28 <pbuf_remove_header>
 8051d7e:	4603      	mov	r3, r0
 8051d80:	2b00      	cmp	r3, #0
 8051d82:	d00a      	beq.n	8051d9a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8051d84:	4b20      	ldr	r3, [pc, #128]	; (8051e08 <udp_input+0x208>)
 8051d86:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8051d8a:	4925      	ldr	r1, [pc, #148]	; (8051e20 <udp_input+0x220>)
 8051d8c:	4820      	ldr	r0, [pc, #128]	; (8051e10 <udp_input+0x210>)
 8051d8e:	f002 fd57 	bl	8054840 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8051d92:	6878      	ldr	r0, [r7, #4]
 8051d94:	f7fa f94e 	bl	804c034 <pbuf_free>
      goto end;
 8051d98:	e032      	b.n	8051e00 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8051d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051d9c:	2b00      	cmp	r3, #0
 8051d9e:	d012      	beq.n	8051dc6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8051da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051da2:	699b      	ldr	r3, [r3, #24]
 8051da4:	2b00      	cmp	r3, #0
 8051da6:	d00a      	beq.n	8051dbe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8051da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051daa:	699c      	ldr	r4, [r3, #24]
 8051dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8051dae:	69d8      	ldr	r0, [r3, #28]
 8051db0:	8a3b      	ldrh	r3, [r7, #16]
 8051db2:	9300      	str	r3, [sp, #0]
 8051db4:	4b1b      	ldr	r3, [pc, #108]	; (8051e24 <udp_input+0x224>)
 8051db6:	687a      	ldr	r2, [r7, #4]
 8051db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8051dba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8051dbc:	e021      	b.n	8051e02 <udp_input+0x202>
        pbuf_free(p);
 8051dbe:	6878      	ldr	r0, [r7, #4]
 8051dc0:	f7fa f938 	bl	804c034 <pbuf_free>
        goto end;
 8051dc4:	e01c      	b.n	8051e00 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8051dc6:	7cfb      	ldrb	r3, [r7, #19]
 8051dc8:	2b00      	cmp	r3, #0
 8051dca:	d112      	bne.n	8051df2 <udp_input+0x1f2>
 8051dcc:	4b12      	ldr	r3, [pc, #72]	; (8051e18 <udp_input+0x218>)
 8051dce:	695b      	ldr	r3, [r3, #20]
 8051dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8051dd4:	2be0      	cmp	r3, #224	; 0xe0
 8051dd6:	d00c      	beq.n	8051df2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8051dd8:	4b0f      	ldr	r3, [pc, #60]	; (8051e18 <udp_input+0x218>)
 8051dda:	899b      	ldrh	r3, [r3, #12]
 8051ddc:	3308      	adds	r3, #8
 8051dde:	b29b      	uxth	r3, r3
 8051de0:	b21b      	sxth	r3, r3
 8051de2:	4619      	mov	r1, r3
 8051de4:	6878      	ldr	r0, [r7, #4]
 8051de6:	f7fa f912 	bl	804c00e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8051dea:	2103      	movs	r1, #3
 8051dec:	6878      	ldr	r0, [r7, #4]
 8051dee:	f001 f89b 	bl	8052f28 <icmp_dest_unreach>
      pbuf_free(p);
 8051df2:	6878      	ldr	r0, [r7, #4]
 8051df4:	f7fa f91e 	bl	804c034 <pbuf_free>
  return;
 8051df8:	e003      	b.n	8051e02 <udp_input+0x202>
    pbuf_free(p);
 8051dfa:	6878      	ldr	r0, [r7, #4]
 8051dfc:	f7fa f91a 	bl	804c034 <pbuf_free>
  return;
 8051e00:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8051e02:	372c      	adds	r7, #44	; 0x2c
 8051e04:	46bd      	mov	sp, r7
 8051e06:	bd90      	pop	{r4, r7, pc}
 8051e08:	08057a14 	.word	0x08057a14
 8051e0c:	08057ab8 	.word	0x08057ab8
 8051e10:	08057a68 	.word	0x08057a68
 8051e14:	08057ad0 	.word	0x08057ad0
 8051e18:	20020078 	.word	0x20020078
 8051e1c:	20023828 	.word	0x20023828
 8051e20:	08057aec 	.word	0x08057aec
 8051e24:	20020088 	.word	0x20020088

08051e28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8051e28:	b480      	push	{r7}
 8051e2a:	b085      	sub	sp, #20
 8051e2c:	af00      	add	r7, sp, #0
 8051e2e:	6078      	str	r0, [r7, #4]
 8051e30:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8051e32:	687b      	ldr	r3, [r7, #4]
 8051e34:	2b00      	cmp	r3, #0
 8051e36:	d01e      	beq.n	8051e76 <udp_netif_ip_addr_changed+0x4e>
 8051e38:	687b      	ldr	r3, [r7, #4]
 8051e3a:	681b      	ldr	r3, [r3, #0]
 8051e3c:	2b00      	cmp	r3, #0
 8051e3e:	d01a      	beq.n	8051e76 <udp_netif_ip_addr_changed+0x4e>
 8051e40:	683b      	ldr	r3, [r7, #0]
 8051e42:	2b00      	cmp	r3, #0
 8051e44:	d017      	beq.n	8051e76 <udp_netif_ip_addr_changed+0x4e>
 8051e46:	683b      	ldr	r3, [r7, #0]
 8051e48:	681b      	ldr	r3, [r3, #0]
 8051e4a:	2b00      	cmp	r3, #0
 8051e4c:	d013      	beq.n	8051e76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8051e4e:	4b0d      	ldr	r3, [pc, #52]	; (8051e84 <udp_netif_ip_addr_changed+0x5c>)
 8051e50:	681b      	ldr	r3, [r3, #0]
 8051e52:	60fb      	str	r3, [r7, #12]
 8051e54:	e00c      	b.n	8051e70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8051e56:	68fb      	ldr	r3, [r7, #12]
 8051e58:	681a      	ldr	r2, [r3, #0]
 8051e5a:	687b      	ldr	r3, [r7, #4]
 8051e5c:	681b      	ldr	r3, [r3, #0]
 8051e5e:	429a      	cmp	r2, r3
 8051e60:	d103      	bne.n	8051e6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8051e62:	683b      	ldr	r3, [r7, #0]
 8051e64:	681a      	ldr	r2, [r3, #0]
 8051e66:	68fb      	ldr	r3, [r7, #12]
 8051e68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8051e6a:	68fb      	ldr	r3, [r7, #12]
 8051e6c:	68db      	ldr	r3, [r3, #12]
 8051e6e:	60fb      	str	r3, [r7, #12]
 8051e70:	68fb      	ldr	r3, [r7, #12]
 8051e72:	2b00      	cmp	r3, #0
 8051e74:	d1ef      	bne.n	8051e56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8051e76:	bf00      	nop
 8051e78:	3714      	adds	r7, #20
 8051e7a:	46bd      	mov	sp, r7
 8051e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051e80:	4770      	bx	lr
 8051e82:	bf00      	nop
 8051e84:	20023828 	.word	0x20023828

08051e88 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8051e88:	b580      	push	{r7, lr}
 8051e8a:	b082      	sub	sp, #8
 8051e8c:	af00      	add	r7, sp, #0
 8051e8e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8051e90:	4915      	ldr	r1, [pc, #84]	; (8051ee8 <etharp_free_entry+0x60>)
 8051e92:	687a      	ldr	r2, [r7, #4]
 8051e94:	4613      	mov	r3, r2
 8051e96:	005b      	lsls	r3, r3, #1
 8051e98:	4413      	add	r3, r2
 8051e9a:	00db      	lsls	r3, r3, #3
 8051e9c:	440b      	add	r3, r1
 8051e9e:	681b      	ldr	r3, [r3, #0]
 8051ea0:	2b00      	cmp	r3, #0
 8051ea2:	d013      	beq.n	8051ecc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8051ea4:	4910      	ldr	r1, [pc, #64]	; (8051ee8 <etharp_free_entry+0x60>)
 8051ea6:	687a      	ldr	r2, [r7, #4]
 8051ea8:	4613      	mov	r3, r2
 8051eaa:	005b      	lsls	r3, r3, #1
 8051eac:	4413      	add	r3, r2
 8051eae:	00db      	lsls	r3, r3, #3
 8051eb0:	440b      	add	r3, r1
 8051eb2:	681b      	ldr	r3, [r3, #0]
 8051eb4:	4618      	mov	r0, r3
 8051eb6:	f7fa f8bd 	bl	804c034 <pbuf_free>
    arp_table[i].q = NULL;
 8051eba:	490b      	ldr	r1, [pc, #44]	; (8051ee8 <etharp_free_entry+0x60>)
 8051ebc:	687a      	ldr	r2, [r7, #4]
 8051ebe:	4613      	mov	r3, r2
 8051ec0:	005b      	lsls	r3, r3, #1
 8051ec2:	4413      	add	r3, r2
 8051ec4:	00db      	lsls	r3, r3, #3
 8051ec6:	440b      	add	r3, r1
 8051ec8:	2200      	movs	r2, #0
 8051eca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8051ecc:	4906      	ldr	r1, [pc, #24]	; (8051ee8 <etharp_free_entry+0x60>)
 8051ece:	687a      	ldr	r2, [r7, #4]
 8051ed0:	4613      	mov	r3, r2
 8051ed2:	005b      	lsls	r3, r3, #1
 8051ed4:	4413      	add	r3, r2
 8051ed6:	00db      	lsls	r3, r3, #3
 8051ed8:	440b      	add	r3, r1
 8051eda:	3314      	adds	r3, #20
 8051edc:	2200      	movs	r2, #0
 8051ede:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8051ee0:	bf00      	nop
 8051ee2:	3708      	adds	r7, #8
 8051ee4:	46bd      	mov	sp, r7
 8051ee6:	bd80      	pop	{r7, pc}
 8051ee8:	2002382c 	.word	0x2002382c

08051eec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8051eec:	b580      	push	{r7, lr}
 8051eee:	b082      	sub	sp, #8
 8051ef0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8051ef2:	2300      	movs	r3, #0
 8051ef4:	607b      	str	r3, [r7, #4]
 8051ef6:	e096      	b.n	8052026 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8051ef8:	494f      	ldr	r1, [pc, #316]	; (8052038 <etharp_tmr+0x14c>)
 8051efa:	687a      	ldr	r2, [r7, #4]
 8051efc:	4613      	mov	r3, r2
 8051efe:	005b      	lsls	r3, r3, #1
 8051f00:	4413      	add	r3, r2
 8051f02:	00db      	lsls	r3, r3, #3
 8051f04:	440b      	add	r3, r1
 8051f06:	3314      	adds	r3, #20
 8051f08:	781b      	ldrb	r3, [r3, #0]
 8051f0a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8051f0c:	78fb      	ldrb	r3, [r7, #3]
 8051f0e:	2b00      	cmp	r3, #0
 8051f10:	f000 8086 	beq.w	8052020 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8051f14:	4948      	ldr	r1, [pc, #288]	; (8052038 <etharp_tmr+0x14c>)
 8051f16:	687a      	ldr	r2, [r7, #4]
 8051f18:	4613      	mov	r3, r2
 8051f1a:	005b      	lsls	r3, r3, #1
 8051f1c:	4413      	add	r3, r2
 8051f1e:	00db      	lsls	r3, r3, #3
 8051f20:	440b      	add	r3, r1
 8051f22:	3312      	adds	r3, #18
 8051f24:	881b      	ldrh	r3, [r3, #0]
 8051f26:	3301      	adds	r3, #1
 8051f28:	b298      	uxth	r0, r3
 8051f2a:	4943      	ldr	r1, [pc, #268]	; (8052038 <etharp_tmr+0x14c>)
 8051f2c:	687a      	ldr	r2, [r7, #4]
 8051f2e:	4613      	mov	r3, r2
 8051f30:	005b      	lsls	r3, r3, #1
 8051f32:	4413      	add	r3, r2
 8051f34:	00db      	lsls	r3, r3, #3
 8051f36:	440b      	add	r3, r1
 8051f38:	3312      	adds	r3, #18
 8051f3a:	4602      	mov	r2, r0
 8051f3c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8051f3e:	493e      	ldr	r1, [pc, #248]	; (8052038 <etharp_tmr+0x14c>)
 8051f40:	687a      	ldr	r2, [r7, #4]
 8051f42:	4613      	mov	r3, r2
 8051f44:	005b      	lsls	r3, r3, #1
 8051f46:	4413      	add	r3, r2
 8051f48:	00db      	lsls	r3, r3, #3
 8051f4a:	440b      	add	r3, r1
 8051f4c:	3312      	adds	r3, #18
 8051f4e:	881b      	ldrh	r3, [r3, #0]
 8051f50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8051f54:	d215      	bcs.n	8051f82 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8051f56:	4938      	ldr	r1, [pc, #224]	; (8052038 <etharp_tmr+0x14c>)
 8051f58:	687a      	ldr	r2, [r7, #4]
 8051f5a:	4613      	mov	r3, r2
 8051f5c:	005b      	lsls	r3, r3, #1
 8051f5e:	4413      	add	r3, r2
 8051f60:	00db      	lsls	r3, r3, #3
 8051f62:	440b      	add	r3, r1
 8051f64:	3314      	adds	r3, #20
 8051f66:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8051f68:	2b01      	cmp	r3, #1
 8051f6a:	d10e      	bne.n	8051f8a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8051f6c:	4932      	ldr	r1, [pc, #200]	; (8052038 <etharp_tmr+0x14c>)
 8051f6e:	687a      	ldr	r2, [r7, #4]
 8051f70:	4613      	mov	r3, r2
 8051f72:	005b      	lsls	r3, r3, #1
 8051f74:	4413      	add	r3, r2
 8051f76:	00db      	lsls	r3, r3, #3
 8051f78:	440b      	add	r3, r1
 8051f7a:	3312      	adds	r3, #18
 8051f7c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8051f7e:	2b04      	cmp	r3, #4
 8051f80:	d903      	bls.n	8051f8a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8051f82:	6878      	ldr	r0, [r7, #4]
 8051f84:	f7ff ff80 	bl	8051e88 <etharp_free_entry>
 8051f88:	e04a      	b.n	8052020 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8051f8a:	492b      	ldr	r1, [pc, #172]	; (8052038 <etharp_tmr+0x14c>)
 8051f8c:	687a      	ldr	r2, [r7, #4]
 8051f8e:	4613      	mov	r3, r2
 8051f90:	005b      	lsls	r3, r3, #1
 8051f92:	4413      	add	r3, r2
 8051f94:	00db      	lsls	r3, r3, #3
 8051f96:	440b      	add	r3, r1
 8051f98:	3314      	adds	r3, #20
 8051f9a:	781b      	ldrb	r3, [r3, #0]
 8051f9c:	2b03      	cmp	r3, #3
 8051f9e:	d10a      	bne.n	8051fb6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8051fa0:	4925      	ldr	r1, [pc, #148]	; (8052038 <etharp_tmr+0x14c>)
 8051fa2:	687a      	ldr	r2, [r7, #4]
 8051fa4:	4613      	mov	r3, r2
 8051fa6:	005b      	lsls	r3, r3, #1
 8051fa8:	4413      	add	r3, r2
 8051faa:	00db      	lsls	r3, r3, #3
 8051fac:	440b      	add	r3, r1
 8051fae:	3314      	adds	r3, #20
 8051fb0:	2204      	movs	r2, #4
 8051fb2:	701a      	strb	r2, [r3, #0]
 8051fb4:	e034      	b.n	8052020 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8051fb6:	4920      	ldr	r1, [pc, #128]	; (8052038 <etharp_tmr+0x14c>)
 8051fb8:	687a      	ldr	r2, [r7, #4]
 8051fba:	4613      	mov	r3, r2
 8051fbc:	005b      	lsls	r3, r3, #1
 8051fbe:	4413      	add	r3, r2
 8051fc0:	00db      	lsls	r3, r3, #3
 8051fc2:	440b      	add	r3, r1
 8051fc4:	3314      	adds	r3, #20
 8051fc6:	781b      	ldrb	r3, [r3, #0]
 8051fc8:	2b04      	cmp	r3, #4
 8051fca:	d10a      	bne.n	8051fe2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8051fcc:	491a      	ldr	r1, [pc, #104]	; (8052038 <etharp_tmr+0x14c>)
 8051fce:	687a      	ldr	r2, [r7, #4]
 8051fd0:	4613      	mov	r3, r2
 8051fd2:	005b      	lsls	r3, r3, #1
 8051fd4:	4413      	add	r3, r2
 8051fd6:	00db      	lsls	r3, r3, #3
 8051fd8:	440b      	add	r3, r1
 8051fda:	3314      	adds	r3, #20
 8051fdc:	2202      	movs	r2, #2
 8051fde:	701a      	strb	r2, [r3, #0]
 8051fe0:	e01e      	b.n	8052020 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8051fe2:	4915      	ldr	r1, [pc, #84]	; (8052038 <etharp_tmr+0x14c>)
 8051fe4:	687a      	ldr	r2, [r7, #4]
 8051fe6:	4613      	mov	r3, r2
 8051fe8:	005b      	lsls	r3, r3, #1
 8051fea:	4413      	add	r3, r2
 8051fec:	00db      	lsls	r3, r3, #3
 8051fee:	440b      	add	r3, r1
 8051ff0:	3314      	adds	r3, #20
 8051ff2:	781b      	ldrb	r3, [r3, #0]
 8051ff4:	2b01      	cmp	r3, #1
 8051ff6:	d113      	bne.n	8052020 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8051ff8:	490f      	ldr	r1, [pc, #60]	; (8052038 <etharp_tmr+0x14c>)
 8051ffa:	687a      	ldr	r2, [r7, #4]
 8051ffc:	4613      	mov	r3, r2
 8051ffe:	005b      	lsls	r3, r3, #1
 8052000:	4413      	add	r3, r2
 8052002:	00db      	lsls	r3, r3, #3
 8052004:	440b      	add	r3, r1
 8052006:	3308      	adds	r3, #8
 8052008:	6818      	ldr	r0, [r3, #0]
 805200a:	687a      	ldr	r2, [r7, #4]
 805200c:	4613      	mov	r3, r2
 805200e:	005b      	lsls	r3, r3, #1
 8052010:	4413      	add	r3, r2
 8052012:	00db      	lsls	r3, r3, #3
 8052014:	4a08      	ldr	r2, [pc, #32]	; (8052038 <etharp_tmr+0x14c>)
 8052016:	4413      	add	r3, r2
 8052018:	3304      	adds	r3, #4
 805201a:	4619      	mov	r1, r3
 805201c:	f000 fe6e 	bl	8052cfc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8052020:	687b      	ldr	r3, [r7, #4]
 8052022:	3301      	adds	r3, #1
 8052024:	607b      	str	r3, [r7, #4]
 8052026:	687b      	ldr	r3, [r7, #4]
 8052028:	2b09      	cmp	r3, #9
 805202a:	f77f af65 	ble.w	8051ef8 <etharp_tmr+0xc>
      }
    }
  }
}
 805202e:	bf00      	nop
 8052030:	bf00      	nop
 8052032:	3708      	adds	r7, #8
 8052034:	46bd      	mov	sp, r7
 8052036:	bd80      	pop	{r7, pc}
 8052038:	2002382c 	.word	0x2002382c

0805203c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 805203c:	b580      	push	{r7, lr}
 805203e:	b08a      	sub	sp, #40	; 0x28
 8052040:	af00      	add	r7, sp, #0
 8052042:	60f8      	str	r0, [r7, #12]
 8052044:	460b      	mov	r3, r1
 8052046:	607a      	str	r2, [r7, #4]
 8052048:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 805204a:	230a      	movs	r3, #10
 805204c:	84fb      	strh	r3, [r7, #38]	; 0x26
 805204e:	230a      	movs	r3, #10
 8052050:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8052052:	230a      	movs	r3, #10
 8052054:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8052056:	2300      	movs	r3, #0
 8052058:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 805205a:	230a      	movs	r3, #10
 805205c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 805205e:	2300      	movs	r3, #0
 8052060:	83bb      	strh	r3, [r7, #28]
 8052062:	2300      	movs	r3, #0
 8052064:	837b      	strh	r3, [r7, #26]
 8052066:	2300      	movs	r3, #0
 8052068:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 805206a:	2300      	movs	r3, #0
 805206c:	843b      	strh	r3, [r7, #32]
 805206e:	e0ae      	b.n	80521ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8052070:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052074:	49a6      	ldr	r1, [pc, #664]	; (8052310 <etharp_find_entry+0x2d4>)
 8052076:	4613      	mov	r3, r2
 8052078:	005b      	lsls	r3, r3, #1
 805207a:	4413      	add	r3, r2
 805207c:	00db      	lsls	r3, r3, #3
 805207e:	440b      	add	r3, r1
 8052080:	3314      	adds	r3, #20
 8052082:	781b      	ldrb	r3, [r3, #0]
 8052084:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8052086:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 805208a:	2b0a      	cmp	r3, #10
 805208c:	d105      	bne.n	805209a <etharp_find_entry+0x5e>
 805208e:	7dfb      	ldrb	r3, [r7, #23]
 8052090:	2b00      	cmp	r3, #0
 8052092:	d102      	bne.n	805209a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8052094:	8c3b      	ldrh	r3, [r7, #32]
 8052096:	847b      	strh	r3, [r7, #34]	; 0x22
 8052098:	e095      	b.n	80521c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 805209a:	7dfb      	ldrb	r3, [r7, #23]
 805209c:	2b00      	cmp	r3, #0
 805209e:	f000 8092 	beq.w	80521c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80520a2:	7dfb      	ldrb	r3, [r7, #23]
 80520a4:	2b01      	cmp	r3, #1
 80520a6:	d009      	beq.n	80520bc <etharp_find_entry+0x80>
 80520a8:	7dfb      	ldrb	r3, [r7, #23]
 80520aa:	2b01      	cmp	r3, #1
 80520ac:	d806      	bhi.n	80520bc <etharp_find_entry+0x80>
 80520ae:	4b99      	ldr	r3, [pc, #612]	; (8052314 <etharp_find_entry+0x2d8>)
 80520b0:	f240 1223 	movw	r2, #291	; 0x123
 80520b4:	4998      	ldr	r1, [pc, #608]	; (8052318 <etharp_find_entry+0x2dc>)
 80520b6:	4899      	ldr	r0, [pc, #612]	; (805231c <etharp_find_entry+0x2e0>)
 80520b8:	f002 fbc2 	bl	8054840 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80520bc:	68fb      	ldr	r3, [r7, #12]
 80520be:	2b00      	cmp	r3, #0
 80520c0:	d020      	beq.n	8052104 <etharp_find_entry+0xc8>
 80520c2:	68fb      	ldr	r3, [r7, #12]
 80520c4:	6819      	ldr	r1, [r3, #0]
 80520c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80520ca:	4891      	ldr	r0, [pc, #580]	; (8052310 <etharp_find_entry+0x2d4>)
 80520cc:	4613      	mov	r3, r2
 80520ce:	005b      	lsls	r3, r3, #1
 80520d0:	4413      	add	r3, r2
 80520d2:	00db      	lsls	r3, r3, #3
 80520d4:	4403      	add	r3, r0
 80520d6:	3304      	adds	r3, #4
 80520d8:	681b      	ldr	r3, [r3, #0]
 80520da:	4299      	cmp	r1, r3
 80520dc:	d112      	bne.n	8052104 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80520de:	687b      	ldr	r3, [r7, #4]
 80520e0:	2b00      	cmp	r3, #0
 80520e2:	d00c      	beq.n	80520fe <etharp_find_entry+0xc2>
 80520e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80520e8:	4989      	ldr	r1, [pc, #548]	; (8052310 <etharp_find_entry+0x2d4>)
 80520ea:	4613      	mov	r3, r2
 80520ec:	005b      	lsls	r3, r3, #1
 80520ee:	4413      	add	r3, r2
 80520f0:	00db      	lsls	r3, r3, #3
 80520f2:	440b      	add	r3, r1
 80520f4:	3308      	adds	r3, #8
 80520f6:	681b      	ldr	r3, [r3, #0]
 80520f8:	687a      	ldr	r2, [r7, #4]
 80520fa:	429a      	cmp	r2, r3
 80520fc:	d102      	bne.n	8052104 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80520fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8052102:	e100      	b.n	8052306 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8052104:	7dfb      	ldrb	r3, [r7, #23]
 8052106:	2b01      	cmp	r3, #1
 8052108:	d140      	bne.n	805218c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 805210a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 805210e:	4980      	ldr	r1, [pc, #512]	; (8052310 <etharp_find_entry+0x2d4>)
 8052110:	4613      	mov	r3, r2
 8052112:	005b      	lsls	r3, r3, #1
 8052114:	4413      	add	r3, r2
 8052116:	00db      	lsls	r3, r3, #3
 8052118:	440b      	add	r3, r1
 805211a:	681b      	ldr	r3, [r3, #0]
 805211c:	2b00      	cmp	r3, #0
 805211e:	d01a      	beq.n	8052156 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8052120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052124:	497a      	ldr	r1, [pc, #488]	; (8052310 <etharp_find_entry+0x2d4>)
 8052126:	4613      	mov	r3, r2
 8052128:	005b      	lsls	r3, r3, #1
 805212a:	4413      	add	r3, r2
 805212c:	00db      	lsls	r3, r3, #3
 805212e:	440b      	add	r3, r1
 8052130:	3312      	adds	r3, #18
 8052132:	881b      	ldrh	r3, [r3, #0]
 8052134:	8bba      	ldrh	r2, [r7, #28]
 8052136:	429a      	cmp	r2, r3
 8052138:	d845      	bhi.n	80521c6 <etharp_find_entry+0x18a>
            old_queue = i;
 805213a:	8c3b      	ldrh	r3, [r7, #32]
 805213c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 805213e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052142:	4973      	ldr	r1, [pc, #460]	; (8052310 <etharp_find_entry+0x2d4>)
 8052144:	4613      	mov	r3, r2
 8052146:	005b      	lsls	r3, r3, #1
 8052148:	4413      	add	r3, r2
 805214a:	00db      	lsls	r3, r3, #3
 805214c:	440b      	add	r3, r1
 805214e:	3312      	adds	r3, #18
 8052150:	881b      	ldrh	r3, [r3, #0]
 8052152:	83bb      	strh	r3, [r7, #28]
 8052154:	e037      	b.n	80521c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8052156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 805215a:	496d      	ldr	r1, [pc, #436]	; (8052310 <etharp_find_entry+0x2d4>)
 805215c:	4613      	mov	r3, r2
 805215e:	005b      	lsls	r3, r3, #1
 8052160:	4413      	add	r3, r2
 8052162:	00db      	lsls	r3, r3, #3
 8052164:	440b      	add	r3, r1
 8052166:	3312      	adds	r3, #18
 8052168:	881b      	ldrh	r3, [r3, #0]
 805216a:	8b7a      	ldrh	r2, [r7, #26]
 805216c:	429a      	cmp	r2, r3
 805216e:	d82a      	bhi.n	80521c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8052170:	8c3b      	ldrh	r3, [r7, #32]
 8052172:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8052174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052178:	4965      	ldr	r1, [pc, #404]	; (8052310 <etharp_find_entry+0x2d4>)
 805217a:	4613      	mov	r3, r2
 805217c:	005b      	lsls	r3, r3, #1
 805217e:	4413      	add	r3, r2
 8052180:	00db      	lsls	r3, r3, #3
 8052182:	440b      	add	r3, r1
 8052184:	3312      	adds	r3, #18
 8052186:	881b      	ldrh	r3, [r3, #0]
 8052188:	837b      	strh	r3, [r7, #26]
 805218a:	e01c      	b.n	80521c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 805218c:	7dfb      	ldrb	r3, [r7, #23]
 805218e:	2b01      	cmp	r3, #1
 8052190:	d919      	bls.n	80521c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8052192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052196:	495e      	ldr	r1, [pc, #376]	; (8052310 <etharp_find_entry+0x2d4>)
 8052198:	4613      	mov	r3, r2
 805219a:	005b      	lsls	r3, r3, #1
 805219c:	4413      	add	r3, r2
 805219e:	00db      	lsls	r3, r3, #3
 80521a0:	440b      	add	r3, r1
 80521a2:	3312      	adds	r3, #18
 80521a4:	881b      	ldrh	r3, [r3, #0]
 80521a6:	8b3a      	ldrh	r2, [r7, #24]
 80521a8:	429a      	cmp	r2, r3
 80521aa:	d80c      	bhi.n	80521c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80521ac:	8c3b      	ldrh	r3, [r7, #32]
 80521ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80521b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80521b4:	4956      	ldr	r1, [pc, #344]	; (8052310 <etharp_find_entry+0x2d4>)
 80521b6:	4613      	mov	r3, r2
 80521b8:	005b      	lsls	r3, r3, #1
 80521ba:	4413      	add	r3, r2
 80521bc:	00db      	lsls	r3, r3, #3
 80521be:	440b      	add	r3, r1
 80521c0:	3312      	adds	r3, #18
 80521c2:	881b      	ldrh	r3, [r3, #0]
 80521c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80521c6:	8c3b      	ldrh	r3, [r7, #32]
 80521c8:	3301      	adds	r3, #1
 80521ca:	b29b      	uxth	r3, r3
 80521cc:	843b      	strh	r3, [r7, #32]
 80521ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80521d2:	2b09      	cmp	r3, #9
 80521d4:	f77f af4c 	ble.w	8052070 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80521d8:	7afb      	ldrb	r3, [r7, #11]
 80521da:	f003 0302 	and.w	r3, r3, #2
 80521de:	2b00      	cmp	r3, #0
 80521e0:	d108      	bne.n	80521f4 <etharp_find_entry+0x1b8>
 80521e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80521e6:	2b0a      	cmp	r3, #10
 80521e8:	d107      	bne.n	80521fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80521ea:	7afb      	ldrb	r3, [r7, #11]
 80521ec:	f003 0301 	and.w	r3, r3, #1
 80521f0:	2b00      	cmp	r3, #0
 80521f2:	d102      	bne.n	80521fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80521f4:	f04f 33ff 	mov.w	r3, #4294967295
 80521f8:	e085      	b.n	8052306 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80521fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80521fe:	2b09      	cmp	r3, #9
 8052200:	dc02      	bgt.n	8052208 <etharp_find_entry+0x1cc>
    i = empty;
 8052202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052204:	843b      	strh	r3, [r7, #32]
 8052206:	e039      	b.n	805227c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8052208:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 805220c:	2b09      	cmp	r3, #9
 805220e:	dc14      	bgt.n	805223a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8052210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8052212:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8052214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052218:	493d      	ldr	r1, [pc, #244]	; (8052310 <etharp_find_entry+0x2d4>)
 805221a:	4613      	mov	r3, r2
 805221c:	005b      	lsls	r3, r3, #1
 805221e:	4413      	add	r3, r2
 8052220:	00db      	lsls	r3, r3, #3
 8052222:	440b      	add	r3, r1
 8052224:	681b      	ldr	r3, [r3, #0]
 8052226:	2b00      	cmp	r3, #0
 8052228:	d018      	beq.n	805225c <etharp_find_entry+0x220>
 805222a:	4b3a      	ldr	r3, [pc, #232]	; (8052314 <etharp_find_entry+0x2d8>)
 805222c:	f240 126d 	movw	r2, #365	; 0x16d
 8052230:	493b      	ldr	r1, [pc, #236]	; (8052320 <etharp_find_entry+0x2e4>)
 8052232:	483a      	ldr	r0, [pc, #232]	; (805231c <etharp_find_entry+0x2e0>)
 8052234:	f002 fb04 	bl	8054840 <iprintf>
 8052238:	e010      	b.n	805225c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 805223a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 805223e:	2b09      	cmp	r3, #9
 8052240:	dc02      	bgt.n	8052248 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8052242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8052244:	843b      	strh	r3, [r7, #32]
 8052246:	e009      	b.n	805225c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8052248:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 805224c:	2b09      	cmp	r3, #9
 805224e:	dc02      	bgt.n	8052256 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8052250:	8bfb      	ldrh	r3, [r7, #30]
 8052252:	843b      	strh	r3, [r7, #32]
 8052254:	e002      	b.n	805225c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8052256:	f04f 33ff 	mov.w	r3, #4294967295
 805225a:	e054      	b.n	8052306 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 805225c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8052260:	2b09      	cmp	r3, #9
 8052262:	dd06      	ble.n	8052272 <etharp_find_entry+0x236>
 8052264:	4b2b      	ldr	r3, [pc, #172]	; (8052314 <etharp_find_entry+0x2d8>)
 8052266:	f240 127f 	movw	r2, #383	; 0x17f
 805226a:	492e      	ldr	r1, [pc, #184]	; (8052324 <etharp_find_entry+0x2e8>)
 805226c:	482b      	ldr	r0, [pc, #172]	; (805231c <etharp_find_entry+0x2e0>)
 805226e:	f002 fae7 	bl	8054840 <iprintf>
    etharp_free_entry(i);
 8052272:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8052276:	4618      	mov	r0, r3
 8052278:	f7ff fe06 	bl	8051e88 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 805227c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8052280:	2b09      	cmp	r3, #9
 8052282:	dd06      	ble.n	8052292 <etharp_find_entry+0x256>
 8052284:	4b23      	ldr	r3, [pc, #140]	; (8052314 <etharp_find_entry+0x2d8>)
 8052286:	f240 1283 	movw	r2, #387	; 0x183
 805228a:	4926      	ldr	r1, [pc, #152]	; (8052324 <etharp_find_entry+0x2e8>)
 805228c:	4823      	ldr	r0, [pc, #140]	; (805231c <etharp_find_entry+0x2e0>)
 805228e:	f002 fad7 	bl	8054840 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8052292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8052296:	491e      	ldr	r1, [pc, #120]	; (8052310 <etharp_find_entry+0x2d4>)
 8052298:	4613      	mov	r3, r2
 805229a:	005b      	lsls	r3, r3, #1
 805229c:	4413      	add	r3, r2
 805229e:	00db      	lsls	r3, r3, #3
 80522a0:	440b      	add	r3, r1
 80522a2:	3314      	adds	r3, #20
 80522a4:	781b      	ldrb	r3, [r3, #0]
 80522a6:	2b00      	cmp	r3, #0
 80522a8:	d006      	beq.n	80522b8 <etharp_find_entry+0x27c>
 80522aa:	4b1a      	ldr	r3, [pc, #104]	; (8052314 <etharp_find_entry+0x2d8>)
 80522ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80522b0:	491d      	ldr	r1, [pc, #116]	; (8052328 <etharp_find_entry+0x2ec>)
 80522b2:	481a      	ldr	r0, [pc, #104]	; (805231c <etharp_find_entry+0x2e0>)
 80522b4:	f002 fac4 	bl	8054840 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80522b8:	68fb      	ldr	r3, [r7, #12]
 80522ba:	2b00      	cmp	r3, #0
 80522bc:	d00b      	beq.n	80522d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80522be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80522c2:	68fb      	ldr	r3, [r7, #12]
 80522c4:	6819      	ldr	r1, [r3, #0]
 80522c6:	4812      	ldr	r0, [pc, #72]	; (8052310 <etharp_find_entry+0x2d4>)
 80522c8:	4613      	mov	r3, r2
 80522ca:	005b      	lsls	r3, r3, #1
 80522cc:	4413      	add	r3, r2
 80522ce:	00db      	lsls	r3, r3, #3
 80522d0:	4403      	add	r3, r0
 80522d2:	3304      	adds	r3, #4
 80522d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80522d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80522da:	490d      	ldr	r1, [pc, #52]	; (8052310 <etharp_find_entry+0x2d4>)
 80522dc:	4613      	mov	r3, r2
 80522de:	005b      	lsls	r3, r3, #1
 80522e0:	4413      	add	r3, r2
 80522e2:	00db      	lsls	r3, r3, #3
 80522e4:	440b      	add	r3, r1
 80522e6:	3312      	adds	r3, #18
 80522e8:	2200      	movs	r2, #0
 80522ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80522ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80522f0:	4907      	ldr	r1, [pc, #28]	; (8052310 <etharp_find_entry+0x2d4>)
 80522f2:	4613      	mov	r3, r2
 80522f4:	005b      	lsls	r3, r3, #1
 80522f6:	4413      	add	r3, r2
 80522f8:	00db      	lsls	r3, r3, #3
 80522fa:	440b      	add	r3, r1
 80522fc:	3308      	adds	r3, #8
 80522fe:	687a      	ldr	r2, [r7, #4]
 8052300:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8052302:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8052306:	4618      	mov	r0, r3
 8052308:	3728      	adds	r7, #40	; 0x28
 805230a:	46bd      	mov	sp, r7
 805230c:	bd80      	pop	{r7, pc}
 805230e:	bf00      	nop
 8052310:	2002382c 	.word	0x2002382c
 8052314:	08057d78 	.word	0x08057d78
 8052318:	08057db0 	.word	0x08057db0
 805231c:	08057df0 	.word	0x08057df0
 8052320:	08057e18 	.word	0x08057e18
 8052324:	08057e30 	.word	0x08057e30
 8052328:	08057e44 	.word	0x08057e44

0805232c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 805232c:	b580      	push	{r7, lr}
 805232e:	b088      	sub	sp, #32
 8052330:	af02      	add	r7, sp, #8
 8052332:	60f8      	str	r0, [r7, #12]
 8052334:	60b9      	str	r1, [r7, #8]
 8052336:	607a      	str	r2, [r7, #4]
 8052338:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 805233a:	68fb      	ldr	r3, [r7, #12]
 805233c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8052340:	2b06      	cmp	r3, #6
 8052342:	d006      	beq.n	8052352 <etharp_update_arp_entry+0x26>
 8052344:	4b48      	ldr	r3, [pc, #288]	; (8052468 <etharp_update_arp_entry+0x13c>)
 8052346:	f240 12a9 	movw	r2, #425	; 0x1a9
 805234a:	4948      	ldr	r1, [pc, #288]	; (805246c <etharp_update_arp_entry+0x140>)
 805234c:	4848      	ldr	r0, [pc, #288]	; (8052470 <etharp_update_arp_entry+0x144>)
 805234e:	f002 fa77 	bl	8054840 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8052352:	68bb      	ldr	r3, [r7, #8]
 8052354:	2b00      	cmp	r3, #0
 8052356:	d012      	beq.n	805237e <etharp_update_arp_entry+0x52>
 8052358:	68bb      	ldr	r3, [r7, #8]
 805235a:	681b      	ldr	r3, [r3, #0]
 805235c:	2b00      	cmp	r3, #0
 805235e:	d00e      	beq.n	805237e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8052360:	68bb      	ldr	r3, [r7, #8]
 8052362:	681b      	ldr	r3, [r3, #0]
 8052364:	68f9      	ldr	r1, [r7, #12]
 8052366:	4618      	mov	r0, r3
 8052368:	f001 f8fe 	bl	8053568 <ip4_addr_isbroadcast_u32>
 805236c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 805236e:	2b00      	cmp	r3, #0
 8052370:	d105      	bne.n	805237e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8052372:	68bb      	ldr	r3, [r7, #8]
 8052374:	681b      	ldr	r3, [r3, #0]
 8052376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 805237a:	2be0      	cmp	r3, #224	; 0xe0
 805237c:	d102      	bne.n	8052384 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 805237e:	f06f 030f 	mvn.w	r3, #15
 8052382:	e06c      	b.n	805245e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8052384:	78fb      	ldrb	r3, [r7, #3]
 8052386:	68fa      	ldr	r2, [r7, #12]
 8052388:	4619      	mov	r1, r3
 805238a:	68b8      	ldr	r0, [r7, #8]
 805238c:	f7ff fe56 	bl	805203c <etharp_find_entry>
 8052390:	4603      	mov	r3, r0
 8052392:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8052394:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8052398:	2b00      	cmp	r3, #0
 805239a:	da02      	bge.n	80523a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 805239c:	8afb      	ldrh	r3, [r7, #22]
 805239e:	b25b      	sxtb	r3, r3
 80523a0:	e05d      	b.n	805245e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80523a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80523a6:	4933      	ldr	r1, [pc, #204]	; (8052474 <etharp_update_arp_entry+0x148>)
 80523a8:	4613      	mov	r3, r2
 80523aa:	005b      	lsls	r3, r3, #1
 80523ac:	4413      	add	r3, r2
 80523ae:	00db      	lsls	r3, r3, #3
 80523b0:	440b      	add	r3, r1
 80523b2:	3314      	adds	r3, #20
 80523b4:	2202      	movs	r2, #2
 80523b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80523b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80523bc:	492d      	ldr	r1, [pc, #180]	; (8052474 <etharp_update_arp_entry+0x148>)
 80523be:	4613      	mov	r3, r2
 80523c0:	005b      	lsls	r3, r3, #1
 80523c2:	4413      	add	r3, r2
 80523c4:	00db      	lsls	r3, r3, #3
 80523c6:	440b      	add	r3, r1
 80523c8:	3308      	adds	r3, #8
 80523ca:	68fa      	ldr	r2, [r7, #12]
 80523cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80523ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80523d2:	4613      	mov	r3, r2
 80523d4:	005b      	lsls	r3, r3, #1
 80523d6:	4413      	add	r3, r2
 80523d8:	00db      	lsls	r3, r3, #3
 80523da:	3308      	adds	r3, #8
 80523dc:	4a25      	ldr	r2, [pc, #148]	; (8052474 <etharp_update_arp_entry+0x148>)
 80523de:	4413      	add	r3, r2
 80523e0:	3304      	adds	r3, #4
 80523e2:	2206      	movs	r2, #6
 80523e4:	6879      	ldr	r1, [r7, #4]
 80523e6:	4618      	mov	r0, r3
 80523e8:	f002 fc4b 	bl	8054c82 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80523ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80523f0:	4920      	ldr	r1, [pc, #128]	; (8052474 <etharp_update_arp_entry+0x148>)
 80523f2:	4613      	mov	r3, r2
 80523f4:	005b      	lsls	r3, r3, #1
 80523f6:	4413      	add	r3, r2
 80523f8:	00db      	lsls	r3, r3, #3
 80523fa:	440b      	add	r3, r1
 80523fc:	3312      	adds	r3, #18
 80523fe:	2200      	movs	r2, #0
 8052400:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8052402:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8052406:	491b      	ldr	r1, [pc, #108]	; (8052474 <etharp_update_arp_entry+0x148>)
 8052408:	4613      	mov	r3, r2
 805240a:	005b      	lsls	r3, r3, #1
 805240c:	4413      	add	r3, r2
 805240e:	00db      	lsls	r3, r3, #3
 8052410:	440b      	add	r3, r1
 8052412:	681b      	ldr	r3, [r3, #0]
 8052414:	2b00      	cmp	r3, #0
 8052416:	d021      	beq.n	805245c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8052418:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 805241c:	4915      	ldr	r1, [pc, #84]	; (8052474 <etharp_update_arp_entry+0x148>)
 805241e:	4613      	mov	r3, r2
 8052420:	005b      	lsls	r3, r3, #1
 8052422:	4413      	add	r3, r2
 8052424:	00db      	lsls	r3, r3, #3
 8052426:	440b      	add	r3, r1
 8052428:	681b      	ldr	r3, [r3, #0]
 805242a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 805242c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8052430:	4910      	ldr	r1, [pc, #64]	; (8052474 <etharp_update_arp_entry+0x148>)
 8052432:	4613      	mov	r3, r2
 8052434:	005b      	lsls	r3, r3, #1
 8052436:	4413      	add	r3, r2
 8052438:	00db      	lsls	r3, r3, #3
 805243a:	440b      	add	r3, r1
 805243c:	2200      	movs	r2, #0
 805243e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8052440:	68fb      	ldr	r3, [r7, #12]
 8052442:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8052446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 805244a:	9300      	str	r3, [sp, #0]
 805244c:	687b      	ldr	r3, [r7, #4]
 805244e:	6939      	ldr	r1, [r7, #16]
 8052450:	68f8      	ldr	r0, [r7, #12]
 8052452:	f001 ff97 	bl	8054384 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8052456:	6938      	ldr	r0, [r7, #16]
 8052458:	f7f9 fdec 	bl	804c034 <pbuf_free>
  }
  return ERR_OK;
 805245c:	2300      	movs	r3, #0
}
 805245e:	4618      	mov	r0, r3
 8052460:	3718      	adds	r7, #24
 8052462:	46bd      	mov	sp, r7
 8052464:	bd80      	pop	{r7, pc}
 8052466:	bf00      	nop
 8052468:	08057d78 	.word	0x08057d78
 805246c:	08057e70 	.word	0x08057e70
 8052470:	08057df0 	.word	0x08057df0
 8052474:	2002382c 	.word	0x2002382c

08052478 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8052478:	b580      	push	{r7, lr}
 805247a:	b084      	sub	sp, #16
 805247c:	af00      	add	r7, sp, #0
 805247e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8052480:	2300      	movs	r3, #0
 8052482:	60fb      	str	r3, [r7, #12]
 8052484:	e01e      	b.n	80524c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8052486:	4913      	ldr	r1, [pc, #76]	; (80524d4 <etharp_cleanup_netif+0x5c>)
 8052488:	68fa      	ldr	r2, [r7, #12]
 805248a:	4613      	mov	r3, r2
 805248c:	005b      	lsls	r3, r3, #1
 805248e:	4413      	add	r3, r2
 8052490:	00db      	lsls	r3, r3, #3
 8052492:	440b      	add	r3, r1
 8052494:	3314      	adds	r3, #20
 8052496:	781b      	ldrb	r3, [r3, #0]
 8052498:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 805249a:	7afb      	ldrb	r3, [r7, #11]
 805249c:	2b00      	cmp	r3, #0
 805249e:	d00e      	beq.n	80524be <etharp_cleanup_netif+0x46>
 80524a0:	490c      	ldr	r1, [pc, #48]	; (80524d4 <etharp_cleanup_netif+0x5c>)
 80524a2:	68fa      	ldr	r2, [r7, #12]
 80524a4:	4613      	mov	r3, r2
 80524a6:	005b      	lsls	r3, r3, #1
 80524a8:	4413      	add	r3, r2
 80524aa:	00db      	lsls	r3, r3, #3
 80524ac:	440b      	add	r3, r1
 80524ae:	3308      	adds	r3, #8
 80524b0:	681b      	ldr	r3, [r3, #0]
 80524b2:	687a      	ldr	r2, [r7, #4]
 80524b4:	429a      	cmp	r2, r3
 80524b6:	d102      	bne.n	80524be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80524b8:	68f8      	ldr	r0, [r7, #12]
 80524ba:	f7ff fce5 	bl	8051e88 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80524be:	68fb      	ldr	r3, [r7, #12]
 80524c0:	3301      	adds	r3, #1
 80524c2:	60fb      	str	r3, [r7, #12]
 80524c4:	68fb      	ldr	r3, [r7, #12]
 80524c6:	2b09      	cmp	r3, #9
 80524c8:	dddd      	ble.n	8052486 <etharp_cleanup_netif+0xe>
    }
  }
}
 80524ca:	bf00      	nop
 80524cc:	bf00      	nop
 80524ce:	3710      	adds	r7, #16
 80524d0:	46bd      	mov	sp, r7
 80524d2:	bd80      	pop	{r7, pc}
 80524d4:	2002382c 	.word	0x2002382c

080524d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80524d8:	b5b0      	push	{r4, r5, r7, lr}
 80524da:	b08a      	sub	sp, #40	; 0x28
 80524dc:	af04      	add	r7, sp, #16
 80524de:	6078      	str	r0, [r7, #4]
 80524e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80524e2:	683b      	ldr	r3, [r7, #0]
 80524e4:	2b00      	cmp	r3, #0
 80524e6:	d107      	bne.n	80524f8 <etharp_input+0x20>
 80524e8:	4b3d      	ldr	r3, [pc, #244]	; (80525e0 <etharp_input+0x108>)
 80524ea:	f240 228a 	movw	r2, #650	; 0x28a
 80524ee:	493d      	ldr	r1, [pc, #244]	; (80525e4 <etharp_input+0x10c>)
 80524f0:	483d      	ldr	r0, [pc, #244]	; (80525e8 <etharp_input+0x110>)
 80524f2:	f002 f9a5 	bl	8054840 <iprintf>
 80524f6:	e06f      	b.n	80525d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80524f8:	687b      	ldr	r3, [r7, #4]
 80524fa:	685b      	ldr	r3, [r3, #4]
 80524fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80524fe:	693b      	ldr	r3, [r7, #16]
 8052500:	881b      	ldrh	r3, [r3, #0]
 8052502:	b29b      	uxth	r3, r3
 8052504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8052508:	d10c      	bne.n	8052524 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 805250a:	693b      	ldr	r3, [r7, #16]
 805250c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 805250e:	2b06      	cmp	r3, #6
 8052510:	d108      	bne.n	8052524 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8052512:	693b      	ldr	r3, [r7, #16]
 8052514:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8052516:	2b04      	cmp	r3, #4
 8052518:	d104      	bne.n	8052524 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 805251a:	693b      	ldr	r3, [r7, #16]
 805251c:	885b      	ldrh	r3, [r3, #2]
 805251e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8052520:	2b08      	cmp	r3, #8
 8052522:	d003      	beq.n	805252c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8052524:	6878      	ldr	r0, [r7, #4]
 8052526:	f7f9 fd85 	bl	804c034 <pbuf_free>
    return;
 805252a:	e055      	b.n	80525d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 805252c:	693b      	ldr	r3, [r7, #16]
 805252e:	330e      	adds	r3, #14
 8052530:	681b      	ldr	r3, [r3, #0]
 8052532:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8052534:	693b      	ldr	r3, [r7, #16]
 8052536:	3318      	adds	r3, #24
 8052538:	681b      	ldr	r3, [r3, #0]
 805253a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 805253c:	683b      	ldr	r3, [r7, #0]
 805253e:	3304      	adds	r3, #4
 8052540:	681b      	ldr	r3, [r3, #0]
 8052542:	2b00      	cmp	r3, #0
 8052544:	d102      	bne.n	805254c <etharp_input+0x74>
    for_us = 0;
 8052546:	2300      	movs	r3, #0
 8052548:	75fb      	strb	r3, [r7, #23]
 805254a:	e009      	b.n	8052560 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 805254c:	68ba      	ldr	r2, [r7, #8]
 805254e:	683b      	ldr	r3, [r7, #0]
 8052550:	3304      	adds	r3, #4
 8052552:	681b      	ldr	r3, [r3, #0]
 8052554:	429a      	cmp	r2, r3
 8052556:	bf0c      	ite	eq
 8052558:	2301      	moveq	r3, #1
 805255a:	2300      	movne	r3, #0
 805255c:	b2db      	uxtb	r3, r3
 805255e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8052560:	693b      	ldr	r3, [r7, #16]
 8052562:	f103 0208 	add.w	r2, r3, #8
 8052566:	7dfb      	ldrb	r3, [r7, #23]
 8052568:	2b00      	cmp	r3, #0
 805256a:	d001      	beq.n	8052570 <etharp_input+0x98>
 805256c:	2301      	movs	r3, #1
 805256e:	e000      	b.n	8052572 <etharp_input+0x9a>
 8052570:	2302      	movs	r3, #2
 8052572:	f107 010c 	add.w	r1, r7, #12
 8052576:	6838      	ldr	r0, [r7, #0]
 8052578:	f7ff fed8 	bl	805232c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 805257c:	693b      	ldr	r3, [r7, #16]
 805257e:	88db      	ldrh	r3, [r3, #6]
 8052580:	b29b      	uxth	r3, r3
 8052582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8052586:	d003      	beq.n	8052590 <etharp_input+0xb8>
 8052588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 805258c:	d01e      	beq.n	80525cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 805258e:	e020      	b.n	80525d2 <etharp_input+0xfa>
      if (for_us) {
 8052590:	7dfb      	ldrb	r3, [r7, #23]
 8052592:	2b00      	cmp	r3, #0
 8052594:	d01c      	beq.n	80525d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8052596:	683b      	ldr	r3, [r7, #0]
 8052598:	f103 0026 	add.w	r0, r3, #38	; 0x26
 805259c:	693b      	ldr	r3, [r7, #16]
 805259e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80525a2:	683b      	ldr	r3, [r7, #0]
 80525a4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80525a8:	683b      	ldr	r3, [r7, #0]
 80525aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80525ac:	693a      	ldr	r2, [r7, #16]
 80525ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 80525b0:	2102      	movs	r1, #2
 80525b2:	9103      	str	r1, [sp, #12]
 80525b4:	f107 010c 	add.w	r1, r7, #12
 80525b8:	9102      	str	r1, [sp, #8]
 80525ba:	9201      	str	r2, [sp, #4]
 80525bc:	9300      	str	r3, [sp, #0]
 80525be:	462b      	mov	r3, r5
 80525c0:	4622      	mov	r2, r4
 80525c2:	4601      	mov	r1, r0
 80525c4:	6838      	ldr	r0, [r7, #0]
 80525c6:	f000 faeb 	bl	8052ba0 <etharp_raw>
      break;
 80525ca:	e001      	b.n	80525d0 <etharp_input+0xf8>
      break;
 80525cc:	bf00      	nop
 80525ce:	e000      	b.n	80525d2 <etharp_input+0xfa>
      break;
 80525d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80525d2:	6878      	ldr	r0, [r7, #4]
 80525d4:	f7f9 fd2e 	bl	804c034 <pbuf_free>
}
 80525d8:	3718      	adds	r7, #24
 80525da:	46bd      	mov	sp, r7
 80525dc:	bdb0      	pop	{r4, r5, r7, pc}
 80525de:	bf00      	nop
 80525e0:	08057d78 	.word	0x08057d78
 80525e4:	08057ec8 	.word	0x08057ec8
 80525e8:	08057df0 	.word	0x08057df0

080525ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80525ec:	b580      	push	{r7, lr}
 80525ee:	b086      	sub	sp, #24
 80525f0:	af02      	add	r7, sp, #8
 80525f2:	60f8      	str	r0, [r7, #12]
 80525f4:	60b9      	str	r1, [r7, #8]
 80525f6:	4613      	mov	r3, r2
 80525f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80525fa:	79fa      	ldrb	r2, [r7, #7]
 80525fc:	4944      	ldr	r1, [pc, #272]	; (8052710 <etharp_output_to_arp_index+0x124>)
 80525fe:	4613      	mov	r3, r2
 8052600:	005b      	lsls	r3, r3, #1
 8052602:	4413      	add	r3, r2
 8052604:	00db      	lsls	r3, r3, #3
 8052606:	440b      	add	r3, r1
 8052608:	3314      	adds	r3, #20
 805260a:	781b      	ldrb	r3, [r3, #0]
 805260c:	2b01      	cmp	r3, #1
 805260e:	d806      	bhi.n	805261e <etharp_output_to_arp_index+0x32>
 8052610:	4b40      	ldr	r3, [pc, #256]	; (8052714 <etharp_output_to_arp_index+0x128>)
 8052612:	f240 22ee 	movw	r2, #750	; 0x2ee
 8052616:	4940      	ldr	r1, [pc, #256]	; (8052718 <etharp_output_to_arp_index+0x12c>)
 8052618:	4840      	ldr	r0, [pc, #256]	; (805271c <etharp_output_to_arp_index+0x130>)
 805261a:	f002 f911 	bl	8054840 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 805261e:	79fa      	ldrb	r2, [r7, #7]
 8052620:	493b      	ldr	r1, [pc, #236]	; (8052710 <etharp_output_to_arp_index+0x124>)
 8052622:	4613      	mov	r3, r2
 8052624:	005b      	lsls	r3, r3, #1
 8052626:	4413      	add	r3, r2
 8052628:	00db      	lsls	r3, r3, #3
 805262a:	440b      	add	r3, r1
 805262c:	3314      	adds	r3, #20
 805262e:	781b      	ldrb	r3, [r3, #0]
 8052630:	2b02      	cmp	r3, #2
 8052632:	d153      	bne.n	80526dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8052634:	79fa      	ldrb	r2, [r7, #7]
 8052636:	4936      	ldr	r1, [pc, #216]	; (8052710 <etharp_output_to_arp_index+0x124>)
 8052638:	4613      	mov	r3, r2
 805263a:	005b      	lsls	r3, r3, #1
 805263c:	4413      	add	r3, r2
 805263e:	00db      	lsls	r3, r3, #3
 8052640:	440b      	add	r3, r1
 8052642:	3312      	adds	r3, #18
 8052644:	881b      	ldrh	r3, [r3, #0]
 8052646:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 805264a:	d919      	bls.n	8052680 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 805264c:	79fa      	ldrb	r2, [r7, #7]
 805264e:	4613      	mov	r3, r2
 8052650:	005b      	lsls	r3, r3, #1
 8052652:	4413      	add	r3, r2
 8052654:	00db      	lsls	r3, r3, #3
 8052656:	4a2e      	ldr	r2, [pc, #184]	; (8052710 <etharp_output_to_arp_index+0x124>)
 8052658:	4413      	add	r3, r2
 805265a:	3304      	adds	r3, #4
 805265c:	4619      	mov	r1, r3
 805265e:	68f8      	ldr	r0, [r7, #12]
 8052660:	f000 fb4c 	bl	8052cfc <etharp_request>
 8052664:	4603      	mov	r3, r0
 8052666:	2b00      	cmp	r3, #0
 8052668:	d138      	bne.n	80526dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 805266a:	79fa      	ldrb	r2, [r7, #7]
 805266c:	4928      	ldr	r1, [pc, #160]	; (8052710 <etharp_output_to_arp_index+0x124>)
 805266e:	4613      	mov	r3, r2
 8052670:	005b      	lsls	r3, r3, #1
 8052672:	4413      	add	r3, r2
 8052674:	00db      	lsls	r3, r3, #3
 8052676:	440b      	add	r3, r1
 8052678:	3314      	adds	r3, #20
 805267a:	2203      	movs	r2, #3
 805267c:	701a      	strb	r2, [r3, #0]
 805267e:	e02d      	b.n	80526dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8052680:	79fa      	ldrb	r2, [r7, #7]
 8052682:	4923      	ldr	r1, [pc, #140]	; (8052710 <etharp_output_to_arp_index+0x124>)
 8052684:	4613      	mov	r3, r2
 8052686:	005b      	lsls	r3, r3, #1
 8052688:	4413      	add	r3, r2
 805268a:	00db      	lsls	r3, r3, #3
 805268c:	440b      	add	r3, r1
 805268e:	3312      	adds	r3, #18
 8052690:	881b      	ldrh	r3, [r3, #0]
 8052692:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8052696:	d321      	bcc.n	80526dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8052698:	79fa      	ldrb	r2, [r7, #7]
 805269a:	4613      	mov	r3, r2
 805269c:	005b      	lsls	r3, r3, #1
 805269e:	4413      	add	r3, r2
 80526a0:	00db      	lsls	r3, r3, #3
 80526a2:	4a1b      	ldr	r2, [pc, #108]	; (8052710 <etharp_output_to_arp_index+0x124>)
 80526a4:	4413      	add	r3, r2
 80526a6:	1d19      	adds	r1, r3, #4
 80526a8:	79fa      	ldrb	r2, [r7, #7]
 80526aa:	4613      	mov	r3, r2
 80526ac:	005b      	lsls	r3, r3, #1
 80526ae:	4413      	add	r3, r2
 80526b0:	00db      	lsls	r3, r3, #3
 80526b2:	3308      	adds	r3, #8
 80526b4:	4a16      	ldr	r2, [pc, #88]	; (8052710 <etharp_output_to_arp_index+0x124>)
 80526b6:	4413      	add	r3, r2
 80526b8:	3304      	adds	r3, #4
 80526ba:	461a      	mov	r2, r3
 80526bc:	68f8      	ldr	r0, [r7, #12]
 80526be:	f000 fafb 	bl	8052cb8 <etharp_request_dst>
 80526c2:	4603      	mov	r3, r0
 80526c4:	2b00      	cmp	r3, #0
 80526c6:	d109      	bne.n	80526dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80526c8:	79fa      	ldrb	r2, [r7, #7]
 80526ca:	4911      	ldr	r1, [pc, #68]	; (8052710 <etharp_output_to_arp_index+0x124>)
 80526cc:	4613      	mov	r3, r2
 80526ce:	005b      	lsls	r3, r3, #1
 80526d0:	4413      	add	r3, r2
 80526d2:	00db      	lsls	r3, r3, #3
 80526d4:	440b      	add	r3, r1
 80526d6:	3314      	adds	r3, #20
 80526d8:	2203      	movs	r2, #3
 80526da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80526dc:	68fb      	ldr	r3, [r7, #12]
 80526de:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80526e2:	79fa      	ldrb	r2, [r7, #7]
 80526e4:	4613      	mov	r3, r2
 80526e6:	005b      	lsls	r3, r3, #1
 80526e8:	4413      	add	r3, r2
 80526ea:	00db      	lsls	r3, r3, #3
 80526ec:	3308      	adds	r3, #8
 80526ee:	4a08      	ldr	r2, [pc, #32]	; (8052710 <etharp_output_to_arp_index+0x124>)
 80526f0:	4413      	add	r3, r2
 80526f2:	3304      	adds	r3, #4
 80526f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80526f8:	9200      	str	r2, [sp, #0]
 80526fa:	460a      	mov	r2, r1
 80526fc:	68b9      	ldr	r1, [r7, #8]
 80526fe:	68f8      	ldr	r0, [r7, #12]
 8052700:	f001 fe40 	bl	8054384 <ethernet_output>
 8052704:	4603      	mov	r3, r0
}
 8052706:	4618      	mov	r0, r3
 8052708:	3710      	adds	r7, #16
 805270a:	46bd      	mov	sp, r7
 805270c:	bd80      	pop	{r7, pc}
 805270e:	bf00      	nop
 8052710:	2002382c 	.word	0x2002382c
 8052714:	08057d78 	.word	0x08057d78
 8052718:	08057ee8 	.word	0x08057ee8
 805271c:	08057df0 	.word	0x08057df0

08052720 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8052720:	b580      	push	{r7, lr}
 8052722:	b08a      	sub	sp, #40	; 0x28
 8052724:	af02      	add	r7, sp, #8
 8052726:	60f8      	str	r0, [r7, #12]
 8052728:	60b9      	str	r1, [r7, #8]
 805272a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 805272c:	687b      	ldr	r3, [r7, #4]
 805272e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8052730:	68fb      	ldr	r3, [r7, #12]
 8052732:	2b00      	cmp	r3, #0
 8052734:	d106      	bne.n	8052744 <etharp_output+0x24>
 8052736:	4b73      	ldr	r3, [pc, #460]	; (8052904 <etharp_output+0x1e4>)
 8052738:	f240 321e 	movw	r2, #798	; 0x31e
 805273c:	4972      	ldr	r1, [pc, #456]	; (8052908 <etharp_output+0x1e8>)
 805273e:	4873      	ldr	r0, [pc, #460]	; (805290c <etharp_output+0x1ec>)
 8052740:	f002 f87e 	bl	8054840 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8052744:	68bb      	ldr	r3, [r7, #8]
 8052746:	2b00      	cmp	r3, #0
 8052748:	d106      	bne.n	8052758 <etharp_output+0x38>
 805274a:	4b6e      	ldr	r3, [pc, #440]	; (8052904 <etharp_output+0x1e4>)
 805274c:	f240 321f 	movw	r2, #799	; 0x31f
 8052750:	496f      	ldr	r1, [pc, #444]	; (8052910 <etharp_output+0x1f0>)
 8052752:	486e      	ldr	r0, [pc, #440]	; (805290c <etharp_output+0x1ec>)
 8052754:	f002 f874 	bl	8054840 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8052758:	687b      	ldr	r3, [r7, #4]
 805275a:	2b00      	cmp	r3, #0
 805275c:	d106      	bne.n	805276c <etharp_output+0x4c>
 805275e:	4b69      	ldr	r3, [pc, #420]	; (8052904 <etharp_output+0x1e4>)
 8052760:	f44f 7248 	mov.w	r2, #800	; 0x320
 8052764:	496b      	ldr	r1, [pc, #428]	; (8052914 <etharp_output+0x1f4>)
 8052766:	4869      	ldr	r0, [pc, #420]	; (805290c <etharp_output+0x1ec>)
 8052768:	f002 f86a 	bl	8054840 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 805276c:	687b      	ldr	r3, [r7, #4]
 805276e:	681b      	ldr	r3, [r3, #0]
 8052770:	68f9      	ldr	r1, [r7, #12]
 8052772:	4618      	mov	r0, r3
 8052774:	f000 fef8 	bl	8053568 <ip4_addr_isbroadcast_u32>
 8052778:	4603      	mov	r3, r0
 805277a:	2b00      	cmp	r3, #0
 805277c:	d002      	beq.n	8052784 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 805277e:	4b66      	ldr	r3, [pc, #408]	; (8052918 <etharp_output+0x1f8>)
 8052780:	61fb      	str	r3, [r7, #28]
 8052782:	e0af      	b.n	80528e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8052784:	687b      	ldr	r3, [r7, #4]
 8052786:	681b      	ldr	r3, [r3, #0]
 8052788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 805278c:	2be0      	cmp	r3, #224	; 0xe0
 805278e:	d118      	bne.n	80527c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8052790:	2301      	movs	r3, #1
 8052792:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8052794:	2300      	movs	r3, #0
 8052796:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8052798:	235e      	movs	r3, #94	; 0x5e
 805279a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 805279c:	687b      	ldr	r3, [r7, #4]
 805279e:	3301      	adds	r3, #1
 80527a0:	781b      	ldrb	r3, [r3, #0]
 80527a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80527a6:	b2db      	uxtb	r3, r3
 80527a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80527aa:	687b      	ldr	r3, [r7, #4]
 80527ac:	3302      	adds	r3, #2
 80527ae:	781b      	ldrb	r3, [r3, #0]
 80527b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80527b2:	687b      	ldr	r3, [r7, #4]
 80527b4:	3303      	adds	r3, #3
 80527b6:	781b      	ldrb	r3, [r3, #0]
 80527b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80527ba:	f107 0310 	add.w	r3, r7, #16
 80527be:	61fb      	str	r3, [r7, #28]
 80527c0:	e090      	b.n	80528e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80527c2:	687b      	ldr	r3, [r7, #4]
 80527c4:	681a      	ldr	r2, [r3, #0]
 80527c6:	68fb      	ldr	r3, [r7, #12]
 80527c8:	3304      	adds	r3, #4
 80527ca:	681b      	ldr	r3, [r3, #0]
 80527cc:	405a      	eors	r2, r3
 80527ce:	68fb      	ldr	r3, [r7, #12]
 80527d0:	3308      	adds	r3, #8
 80527d2:	681b      	ldr	r3, [r3, #0]
 80527d4:	4013      	ands	r3, r2
 80527d6:	2b00      	cmp	r3, #0
 80527d8:	d012      	beq.n	8052800 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80527da:	687b      	ldr	r3, [r7, #4]
 80527dc:	681b      	ldr	r3, [r3, #0]
 80527de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80527e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80527e4:	4293      	cmp	r3, r2
 80527e6:	d00b      	beq.n	8052800 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80527e8:	68fb      	ldr	r3, [r7, #12]
 80527ea:	330c      	adds	r3, #12
 80527ec:	681b      	ldr	r3, [r3, #0]
 80527ee:	2b00      	cmp	r3, #0
 80527f0:	d003      	beq.n	80527fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80527f2:	68fb      	ldr	r3, [r7, #12]
 80527f4:	330c      	adds	r3, #12
 80527f6:	61bb      	str	r3, [r7, #24]
 80527f8:	e002      	b.n	8052800 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80527fa:	f06f 0303 	mvn.w	r3, #3
 80527fe:	e07d      	b.n	80528fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8052800:	4b46      	ldr	r3, [pc, #280]	; (805291c <etharp_output+0x1fc>)
 8052802:	781b      	ldrb	r3, [r3, #0]
 8052804:	4619      	mov	r1, r3
 8052806:	4a46      	ldr	r2, [pc, #280]	; (8052920 <etharp_output+0x200>)
 8052808:	460b      	mov	r3, r1
 805280a:	005b      	lsls	r3, r3, #1
 805280c:	440b      	add	r3, r1
 805280e:	00db      	lsls	r3, r3, #3
 8052810:	4413      	add	r3, r2
 8052812:	3314      	adds	r3, #20
 8052814:	781b      	ldrb	r3, [r3, #0]
 8052816:	2b01      	cmp	r3, #1
 8052818:	d925      	bls.n	8052866 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 805281a:	4b40      	ldr	r3, [pc, #256]	; (805291c <etharp_output+0x1fc>)
 805281c:	781b      	ldrb	r3, [r3, #0]
 805281e:	4619      	mov	r1, r3
 8052820:	4a3f      	ldr	r2, [pc, #252]	; (8052920 <etharp_output+0x200>)
 8052822:	460b      	mov	r3, r1
 8052824:	005b      	lsls	r3, r3, #1
 8052826:	440b      	add	r3, r1
 8052828:	00db      	lsls	r3, r3, #3
 805282a:	4413      	add	r3, r2
 805282c:	3308      	adds	r3, #8
 805282e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8052830:	68fa      	ldr	r2, [r7, #12]
 8052832:	429a      	cmp	r2, r3
 8052834:	d117      	bne.n	8052866 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8052836:	69bb      	ldr	r3, [r7, #24]
 8052838:	681a      	ldr	r2, [r3, #0]
 805283a:	4b38      	ldr	r3, [pc, #224]	; (805291c <etharp_output+0x1fc>)
 805283c:	781b      	ldrb	r3, [r3, #0]
 805283e:	4618      	mov	r0, r3
 8052840:	4937      	ldr	r1, [pc, #220]	; (8052920 <etharp_output+0x200>)
 8052842:	4603      	mov	r3, r0
 8052844:	005b      	lsls	r3, r3, #1
 8052846:	4403      	add	r3, r0
 8052848:	00db      	lsls	r3, r3, #3
 805284a:	440b      	add	r3, r1
 805284c:	3304      	adds	r3, #4
 805284e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8052850:	429a      	cmp	r2, r3
 8052852:	d108      	bne.n	8052866 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8052854:	4b31      	ldr	r3, [pc, #196]	; (805291c <etharp_output+0x1fc>)
 8052856:	781b      	ldrb	r3, [r3, #0]
 8052858:	461a      	mov	r2, r3
 805285a:	68b9      	ldr	r1, [r7, #8]
 805285c:	68f8      	ldr	r0, [r7, #12]
 805285e:	f7ff fec5 	bl	80525ec <etharp_output_to_arp_index>
 8052862:	4603      	mov	r3, r0
 8052864:	e04a      	b.n	80528fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8052866:	2300      	movs	r3, #0
 8052868:	75fb      	strb	r3, [r7, #23]
 805286a:	e031      	b.n	80528d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 805286c:	7dfa      	ldrb	r2, [r7, #23]
 805286e:	492c      	ldr	r1, [pc, #176]	; (8052920 <etharp_output+0x200>)
 8052870:	4613      	mov	r3, r2
 8052872:	005b      	lsls	r3, r3, #1
 8052874:	4413      	add	r3, r2
 8052876:	00db      	lsls	r3, r3, #3
 8052878:	440b      	add	r3, r1
 805287a:	3314      	adds	r3, #20
 805287c:	781b      	ldrb	r3, [r3, #0]
 805287e:	2b01      	cmp	r3, #1
 8052880:	d923      	bls.n	80528ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8052882:	7dfa      	ldrb	r2, [r7, #23]
 8052884:	4926      	ldr	r1, [pc, #152]	; (8052920 <etharp_output+0x200>)
 8052886:	4613      	mov	r3, r2
 8052888:	005b      	lsls	r3, r3, #1
 805288a:	4413      	add	r3, r2
 805288c:	00db      	lsls	r3, r3, #3
 805288e:	440b      	add	r3, r1
 8052890:	3308      	adds	r3, #8
 8052892:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8052894:	68fa      	ldr	r2, [r7, #12]
 8052896:	429a      	cmp	r2, r3
 8052898:	d117      	bne.n	80528ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 805289a:	69bb      	ldr	r3, [r7, #24]
 805289c:	6819      	ldr	r1, [r3, #0]
 805289e:	7dfa      	ldrb	r2, [r7, #23]
 80528a0:	481f      	ldr	r0, [pc, #124]	; (8052920 <etharp_output+0x200>)
 80528a2:	4613      	mov	r3, r2
 80528a4:	005b      	lsls	r3, r3, #1
 80528a6:	4413      	add	r3, r2
 80528a8:	00db      	lsls	r3, r3, #3
 80528aa:	4403      	add	r3, r0
 80528ac:	3304      	adds	r3, #4
 80528ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80528b0:	4299      	cmp	r1, r3
 80528b2:	d10a      	bne.n	80528ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80528b4:	4a19      	ldr	r2, [pc, #100]	; (805291c <etharp_output+0x1fc>)
 80528b6:	7dfb      	ldrb	r3, [r7, #23]
 80528b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80528ba:	7dfb      	ldrb	r3, [r7, #23]
 80528bc:	461a      	mov	r2, r3
 80528be:	68b9      	ldr	r1, [r7, #8]
 80528c0:	68f8      	ldr	r0, [r7, #12]
 80528c2:	f7ff fe93 	bl	80525ec <etharp_output_to_arp_index>
 80528c6:	4603      	mov	r3, r0
 80528c8:	e018      	b.n	80528fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80528ca:	7dfb      	ldrb	r3, [r7, #23]
 80528cc:	3301      	adds	r3, #1
 80528ce:	75fb      	strb	r3, [r7, #23]
 80528d0:	7dfb      	ldrb	r3, [r7, #23]
 80528d2:	2b09      	cmp	r3, #9
 80528d4:	d9ca      	bls.n	805286c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80528d6:	68ba      	ldr	r2, [r7, #8]
 80528d8:	69b9      	ldr	r1, [r7, #24]
 80528da:	68f8      	ldr	r0, [r7, #12]
 80528dc:	f000 f822 	bl	8052924 <etharp_query>
 80528e0:	4603      	mov	r3, r0
 80528e2:	e00b      	b.n	80528fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80528e4:	68fb      	ldr	r3, [r7, #12]
 80528e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80528ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80528ee:	9300      	str	r3, [sp, #0]
 80528f0:	69fb      	ldr	r3, [r7, #28]
 80528f2:	68b9      	ldr	r1, [r7, #8]
 80528f4:	68f8      	ldr	r0, [r7, #12]
 80528f6:	f001 fd45 	bl	8054384 <ethernet_output>
 80528fa:	4603      	mov	r3, r0
}
 80528fc:	4618      	mov	r0, r3
 80528fe:	3720      	adds	r7, #32
 8052900:	46bd      	mov	sp, r7
 8052902:	bd80      	pop	{r7, pc}
 8052904:	08057d78 	.word	0x08057d78
 8052908:	08057ec8 	.word	0x08057ec8
 805290c:	08057df0 	.word	0x08057df0
 8052910:	08057f18 	.word	0x08057f18
 8052914:	08057eb8 	.word	0x08057eb8
 8052918:	0805857c 	.word	0x0805857c
 805291c:	2002391c 	.word	0x2002391c
 8052920:	2002382c 	.word	0x2002382c

08052924 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8052924:	b580      	push	{r7, lr}
 8052926:	b08c      	sub	sp, #48	; 0x30
 8052928:	af02      	add	r7, sp, #8
 805292a:	60f8      	str	r0, [r7, #12]
 805292c:	60b9      	str	r1, [r7, #8]
 805292e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8052930:	68fb      	ldr	r3, [r7, #12]
 8052932:	3326      	adds	r3, #38	; 0x26
 8052934:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8052936:	23ff      	movs	r3, #255	; 0xff
 8052938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 805293c:	2300      	movs	r3, #0
 805293e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8052940:	68bb      	ldr	r3, [r7, #8]
 8052942:	681b      	ldr	r3, [r3, #0]
 8052944:	68f9      	ldr	r1, [r7, #12]
 8052946:	4618      	mov	r0, r3
 8052948:	f000 fe0e 	bl	8053568 <ip4_addr_isbroadcast_u32>
 805294c:	4603      	mov	r3, r0
 805294e:	2b00      	cmp	r3, #0
 8052950:	d10c      	bne.n	805296c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8052952:	68bb      	ldr	r3, [r7, #8]
 8052954:	681b      	ldr	r3, [r3, #0]
 8052956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 805295a:	2be0      	cmp	r3, #224	; 0xe0
 805295c:	d006      	beq.n	805296c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 805295e:	68bb      	ldr	r3, [r7, #8]
 8052960:	2b00      	cmp	r3, #0
 8052962:	d003      	beq.n	805296c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8052964:	68bb      	ldr	r3, [r7, #8]
 8052966:	681b      	ldr	r3, [r3, #0]
 8052968:	2b00      	cmp	r3, #0
 805296a:	d102      	bne.n	8052972 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 805296c:	f06f 030f 	mvn.w	r3, #15
 8052970:	e101      	b.n	8052b76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8052972:	68fa      	ldr	r2, [r7, #12]
 8052974:	2101      	movs	r1, #1
 8052976:	68b8      	ldr	r0, [r7, #8]
 8052978:	f7ff fb60 	bl	805203c <etharp_find_entry>
 805297c:	4603      	mov	r3, r0
 805297e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8052980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8052984:	2b00      	cmp	r3, #0
 8052986:	da02      	bge.n	805298e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8052988:	8a7b      	ldrh	r3, [r7, #18]
 805298a:	b25b      	sxtb	r3, r3
 805298c:	e0f3      	b.n	8052b76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 805298e:	8a7b      	ldrh	r3, [r7, #18]
 8052990:	2b7e      	cmp	r3, #126	; 0x7e
 8052992:	d906      	bls.n	80529a2 <etharp_query+0x7e>
 8052994:	4b7a      	ldr	r3, [pc, #488]	; (8052b80 <etharp_query+0x25c>)
 8052996:	f240 32c1 	movw	r2, #961	; 0x3c1
 805299a:	497a      	ldr	r1, [pc, #488]	; (8052b84 <etharp_query+0x260>)
 805299c:	487a      	ldr	r0, [pc, #488]	; (8052b88 <etharp_query+0x264>)
 805299e:	f001 ff4f 	bl	8054840 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80529a2:	8a7b      	ldrh	r3, [r7, #18]
 80529a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80529a6:	7c7a      	ldrb	r2, [r7, #17]
 80529a8:	4978      	ldr	r1, [pc, #480]	; (8052b8c <etharp_query+0x268>)
 80529aa:	4613      	mov	r3, r2
 80529ac:	005b      	lsls	r3, r3, #1
 80529ae:	4413      	add	r3, r2
 80529b0:	00db      	lsls	r3, r3, #3
 80529b2:	440b      	add	r3, r1
 80529b4:	3314      	adds	r3, #20
 80529b6:	781b      	ldrb	r3, [r3, #0]
 80529b8:	2b00      	cmp	r3, #0
 80529ba:	d115      	bne.n	80529e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80529bc:	2301      	movs	r3, #1
 80529be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80529c0:	7c7a      	ldrb	r2, [r7, #17]
 80529c2:	4972      	ldr	r1, [pc, #456]	; (8052b8c <etharp_query+0x268>)
 80529c4:	4613      	mov	r3, r2
 80529c6:	005b      	lsls	r3, r3, #1
 80529c8:	4413      	add	r3, r2
 80529ca:	00db      	lsls	r3, r3, #3
 80529cc:	440b      	add	r3, r1
 80529ce:	3314      	adds	r3, #20
 80529d0:	2201      	movs	r2, #1
 80529d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80529d4:	7c7a      	ldrb	r2, [r7, #17]
 80529d6:	496d      	ldr	r1, [pc, #436]	; (8052b8c <etharp_query+0x268>)
 80529d8:	4613      	mov	r3, r2
 80529da:	005b      	lsls	r3, r3, #1
 80529dc:	4413      	add	r3, r2
 80529de:	00db      	lsls	r3, r3, #3
 80529e0:	440b      	add	r3, r1
 80529e2:	3308      	adds	r3, #8
 80529e4:	68fa      	ldr	r2, [r7, #12]
 80529e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80529e8:	7c7a      	ldrb	r2, [r7, #17]
 80529ea:	4968      	ldr	r1, [pc, #416]	; (8052b8c <etharp_query+0x268>)
 80529ec:	4613      	mov	r3, r2
 80529ee:	005b      	lsls	r3, r3, #1
 80529f0:	4413      	add	r3, r2
 80529f2:	00db      	lsls	r3, r3, #3
 80529f4:	440b      	add	r3, r1
 80529f6:	3314      	adds	r3, #20
 80529f8:	781b      	ldrb	r3, [r3, #0]
 80529fa:	2b01      	cmp	r3, #1
 80529fc:	d011      	beq.n	8052a22 <etharp_query+0xfe>
 80529fe:	7c7a      	ldrb	r2, [r7, #17]
 8052a00:	4962      	ldr	r1, [pc, #392]	; (8052b8c <etharp_query+0x268>)
 8052a02:	4613      	mov	r3, r2
 8052a04:	005b      	lsls	r3, r3, #1
 8052a06:	4413      	add	r3, r2
 8052a08:	00db      	lsls	r3, r3, #3
 8052a0a:	440b      	add	r3, r1
 8052a0c:	3314      	adds	r3, #20
 8052a0e:	781b      	ldrb	r3, [r3, #0]
 8052a10:	2b01      	cmp	r3, #1
 8052a12:	d806      	bhi.n	8052a22 <etharp_query+0xfe>
 8052a14:	4b5a      	ldr	r3, [pc, #360]	; (8052b80 <etharp_query+0x25c>)
 8052a16:	f240 32cd 	movw	r2, #973	; 0x3cd
 8052a1a:	495d      	ldr	r1, [pc, #372]	; (8052b90 <etharp_query+0x26c>)
 8052a1c:	485a      	ldr	r0, [pc, #360]	; (8052b88 <etharp_query+0x264>)
 8052a1e:	f001 ff0f 	bl	8054840 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8052a22:	6a3b      	ldr	r3, [r7, #32]
 8052a24:	2b00      	cmp	r3, #0
 8052a26:	d102      	bne.n	8052a2e <etharp_query+0x10a>
 8052a28:	687b      	ldr	r3, [r7, #4]
 8052a2a:	2b00      	cmp	r3, #0
 8052a2c:	d10c      	bne.n	8052a48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8052a2e:	68b9      	ldr	r1, [r7, #8]
 8052a30:	68f8      	ldr	r0, [r7, #12]
 8052a32:	f000 f963 	bl	8052cfc <etharp_request>
 8052a36:	4603      	mov	r3, r0
 8052a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8052a3c:	687b      	ldr	r3, [r7, #4]
 8052a3e:	2b00      	cmp	r3, #0
 8052a40:	d102      	bne.n	8052a48 <etharp_query+0x124>
      return result;
 8052a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8052a46:	e096      	b.n	8052b76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8052a48:	687b      	ldr	r3, [r7, #4]
 8052a4a:	2b00      	cmp	r3, #0
 8052a4c:	d106      	bne.n	8052a5c <etharp_query+0x138>
 8052a4e:	4b4c      	ldr	r3, [pc, #304]	; (8052b80 <etharp_query+0x25c>)
 8052a50:	f240 32e1 	movw	r2, #993	; 0x3e1
 8052a54:	494f      	ldr	r1, [pc, #316]	; (8052b94 <etharp_query+0x270>)
 8052a56:	484c      	ldr	r0, [pc, #304]	; (8052b88 <etharp_query+0x264>)
 8052a58:	f001 fef2 	bl	8054840 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8052a5c:	7c7a      	ldrb	r2, [r7, #17]
 8052a5e:	494b      	ldr	r1, [pc, #300]	; (8052b8c <etharp_query+0x268>)
 8052a60:	4613      	mov	r3, r2
 8052a62:	005b      	lsls	r3, r3, #1
 8052a64:	4413      	add	r3, r2
 8052a66:	00db      	lsls	r3, r3, #3
 8052a68:	440b      	add	r3, r1
 8052a6a:	3314      	adds	r3, #20
 8052a6c:	781b      	ldrb	r3, [r3, #0]
 8052a6e:	2b01      	cmp	r3, #1
 8052a70:	d917      	bls.n	8052aa2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8052a72:	4a49      	ldr	r2, [pc, #292]	; (8052b98 <etharp_query+0x274>)
 8052a74:	7c7b      	ldrb	r3, [r7, #17]
 8052a76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8052a78:	7c7a      	ldrb	r2, [r7, #17]
 8052a7a:	4613      	mov	r3, r2
 8052a7c:	005b      	lsls	r3, r3, #1
 8052a7e:	4413      	add	r3, r2
 8052a80:	00db      	lsls	r3, r3, #3
 8052a82:	3308      	adds	r3, #8
 8052a84:	4a41      	ldr	r2, [pc, #260]	; (8052b8c <etharp_query+0x268>)
 8052a86:	4413      	add	r3, r2
 8052a88:	3304      	adds	r3, #4
 8052a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8052a8e:	9200      	str	r2, [sp, #0]
 8052a90:	697a      	ldr	r2, [r7, #20]
 8052a92:	6879      	ldr	r1, [r7, #4]
 8052a94:	68f8      	ldr	r0, [r7, #12]
 8052a96:	f001 fc75 	bl	8054384 <ethernet_output>
 8052a9a:	4603      	mov	r3, r0
 8052a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8052aa0:	e067      	b.n	8052b72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8052aa2:	7c7a      	ldrb	r2, [r7, #17]
 8052aa4:	4939      	ldr	r1, [pc, #228]	; (8052b8c <etharp_query+0x268>)
 8052aa6:	4613      	mov	r3, r2
 8052aa8:	005b      	lsls	r3, r3, #1
 8052aaa:	4413      	add	r3, r2
 8052aac:	00db      	lsls	r3, r3, #3
 8052aae:	440b      	add	r3, r1
 8052ab0:	3314      	adds	r3, #20
 8052ab2:	781b      	ldrb	r3, [r3, #0]
 8052ab4:	2b01      	cmp	r3, #1
 8052ab6:	d15c      	bne.n	8052b72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8052ab8:	2300      	movs	r3, #0
 8052aba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8052abc:	687b      	ldr	r3, [r7, #4]
 8052abe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8052ac0:	e01c      	b.n	8052afc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8052ac2:	69fb      	ldr	r3, [r7, #28]
 8052ac4:	895a      	ldrh	r2, [r3, #10]
 8052ac6:	69fb      	ldr	r3, [r7, #28]
 8052ac8:	891b      	ldrh	r3, [r3, #8]
 8052aca:	429a      	cmp	r2, r3
 8052acc:	d10a      	bne.n	8052ae4 <etharp_query+0x1c0>
 8052ace:	69fb      	ldr	r3, [r7, #28]
 8052ad0:	681b      	ldr	r3, [r3, #0]
 8052ad2:	2b00      	cmp	r3, #0
 8052ad4:	d006      	beq.n	8052ae4 <etharp_query+0x1c0>
 8052ad6:	4b2a      	ldr	r3, [pc, #168]	; (8052b80 <etharp_query+0x25c>)
 8052ad8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8052adc:	492f      	ldr	r1, [pc, #188]	; (8052b9c <etharp_query+0x278>)
 8052ade:	482a      	ldr	r0, [pc, #168]	; (8052b88 <etharp_query+0x264>)
 8052ae0:	f001 feae 	bl	8054840 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8052ae4:	69fb      	ldr	r3, [r7, #28]
 8052ae6:	7b1b      	ldrb	r3, [r3, #12]
 8052ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8052aec:	2b00      	cmp	r3, #0
 8052aee:	d002      	beq.n	8052af6 <etharp_query+0x1d2>
        copy_needed = 1;
 8052af0:	2301      	movs	r3, #1
 8052af2:	61bb      	str	r3, [r7, #24]
        break;
 8052af4:	e005      	b.n	8052b02 <etharp_query+0x1de>
      }
      p = p->next;
 8052af6:	69fb      	ldr	r3, [r7, #28]
 8052af8:	681b      	ldr	r3, [r3, #0]
 8052afa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8052afc:	69fb      	ldr	r3, [r7, #28]
 8052afe:	2b00      	cmp	r3, #0
 8052b00:	d1df      	bne.n	8052ac2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8052b02:	69bb      	ldr	r3, [r7, #24]
 8052b04:	2b00      	cmp	r3, #0
 8052b06:	d007      	beq.n	8052b18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8052b08:	687a      	ldr	r2, [r7, #4]
 8052b0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8052b0e:	200e      	movs	r0, #14
 8052b10:	f7f9 fcf8 	bl	804c504 <pbuf_clone>
 8052b14:	61f8      	str	r0, [r7, #28]
 8052b16:	e004      	b.n	8052b22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8052b18:	687b      	ldr	r3, [r7, #4]
 8052b1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8052b1c:	69f8      	ldr	r0, [r7, #28]
 8052b1e:	f7f9 fb2f 	bl	804c180 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8052b22:	69fb      	ldr	r3, [r7, #28]
 8052b24:	2b00      	cmp	r3, #0
 8052b26:	d021      	beq.n	8052b6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8052b28:	7c7a      	ldrb	r2, [r7, #17]
 8052b2a:	4918      	ldr	r1, [pc, #96]	; (8052b8c <etharp_query+0x268>)
 8052b2c:	4613      	mov	r3, r2
 8052b2e:	005b      	lsls	r3, r3, #1
 8052b30:	4413      	add	r3, r2
 8052b32:	00db      	lsls	r3, r3, #3
 8052b34:	440b      	add	r3, r1
 8052b36:	681b      	ldr	r3, [r3, #0]
 8052b38:	2b00      	cmp	r3, #0
 8052b3a:	d00a      	beq.n	8052b52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8052b3c:	7c7a      	ldrb	r2, [r7, #17]
 8052b3e:	4913      	ldr	r1, [pc, #76]	; (8052b8c <etharp_query+0x268>)
 8052b40:	4613      	mov	r3, r2
 8052b42:	005b      	lsls	r3, r3, #1
 8052b44:	4413      	add	r3, r2
 8052b46:	00db      	lsls	r3, r3, #3
 8052b48:	440b      	add	r3, r1
 8052b4a:	681b      	ldr	r3, [r3, #0]
 8052b4c:	4618      	mov	r0, r3
 8052b4e:	f7f9 fa71 	bl	804c034 <pbuf_free>
      }
      arp_table[i].q = p;
 8052b52:	7c7a      	ldrb	r2, [r7, #17]
 8052b54:	490d      	ldr	r1, [pc, #52]	; (8052b8c <etharp_query+0x268>)
 8052b56:	4613      	mov	r3, r2
 8052b58:	005b      	lsls	r3, r3, #1
 8052b5a:	4413      	add	r3, r2
 8052b5c:	00db      	lsls	r3, r3, #3
 8052b5e:	440b      	add	r3, r1
 8052b60:	69fa      	ldr	r2, [r7, #28]
 8052b62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8052b64:	2300      	movs	r3, #0
 8052b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8052b6a:	e002      	b.n	8052b72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8052b6c:	23ff      	movs	r3, #255	; 0xff
 8052b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8052b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8052b76:	4618      	mov	r0, r3
 8052b78:	3728      	adds	r7, #40	; 0x28
 8052b7a:	46bd      	mov	sp, r7
 8052b7c:	bd80      	pop	{r7, pc}
 8052b7e:	bf00      	nop
 8052b80:	08057d78 	.word	0x08057d78
 8052b84:	08057f24 	.word	0x08057f24
 8052b88:	08057df0 	.word	0x08057df0
 8052b8c:	2002382c 	.word	0x2002382c
 8052b90:	08057f34 	.word	0x08057f34
 8052b94:	08057f18 	.word	0x08057f18
 8052b98:	2002391c 	.word	0x2002391c
 8052b9c:	08057f5c 	.word	0x08057f5c

08052ba0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8052ba0:	b580      	push	{r7, lr}
 8052ba2:	b08a      	sub	sp, #40	; 0x28
 8052ba4:	af02      	add	r7, sp, #8
 8052ba6:	60f8      	str	r0, [r7, #12]
 8052ba8:	60b9      	str	r1, [r7, #8]
 8052baa:	607a      	str	r2, [r7, #4]
 8052bac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8052bae:	2300      	movs	r3, #0
 8052bb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8052bb2:	68fb      	ldr	r3, [r7, #12]
 8052bb4:	2b00      	cmp	r3, #0
 8052bb6:	d106      	bne.n	8052bc6 <etharp_raw+0x26>
 8052bb8:	4b3a      	ldr	r3, [pc, #232]	; (8052ca4 <etharp_raw+0x104>)
 8052bba:	f240 4257 	movw	r2, #1111	; 0x457
 8052bbe:	493a      	ldr	r1, [pc, #232]	; (8052ca8 <etharp_raw+0x108>)
 8052bc0:	483a      	ldr	r0, [pc, #232]	; (8052cac <etharp_raw+0x10c>)
 8052bc2:	f001 fe3d 	bl	8054840 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8052bc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8052bca:	211c      	movs	r1, #28
 8052bcc:	200e      	movs	r0, #14
 8052bce:	f7f8 ff4d 	bl	804ba6c <pbuf_alloc>
 8052bd2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8052bd4:	69bb      	ldr	r3, [r7, #24]
 8052bd6:	2b00      	cmp	r3, #0
 8052bd8:	d102      	bne.n	8052be0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8052bda:	f04f 33ff 	mov.w	r3, #4294967295
 8052bde:	e05d      	b.n	8052c9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8052be0:	69bb      	ldr	r3, [r7, #24]
 8052be2:	895b      	ldrh	r3, [r3, #10]
 8052be4:	2b1b      	cmp	r3, #27
 8052be6:	d806      	bhi.n	8052bf6 <etharp_raw+0x56>
 8052be8:	4b2e      	ldr	r3, [pc, #184]	; (8052ca4 <etharp_raw+0x104>)
 8052bea:	f240 4262 	movw	r2, #1122	; 0x462
 8052bee:	4930      	ldr	r1, [pc, #192]	; (8052cb0 <etharp_raw+0x110>)
 8052bf0:	482e      	ldr	r0, [pc, #184]	; (8052cac <etharp_raw+0x10c>)
 8052bf2:	f001 fe25 	bl	8054840 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8052bf6:	69bb      	ldr	r3, [r7, #24]
 8052bf8:	685b      	ldr	r3, [r3, #4]
 8052bfa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8052bfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8052bfe:	4618      	mov	r0, r3
 8052c00:	f7f7 fe26 	bl	804a850 <lwip_htons>
 8052c04:	4603      	mov	r3, r0
 8052c06:	461a      	mov	r2, r3
 8052c08:	697b      	ldr	r3, [r7, #20]
 8052c0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8052c0c:	68fb      	ldr	r3, [r7, #12]
 8052c0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8052c12:	2b06      	cmp	r3, #6
 8052c14:	d006      	beq.n	8052c24 <etharp_raw+0x84>
 8052c16:	4b23      	ldr	r3, [pc, #140]	; (8052ca4 <etharp_raw+0x104>)
 8052c18:	f240 4269 	movw	r2, #1129	; 0x469
 8052c1c:	4925      	ldr	r1, [pc, #148]	; (8052cb4 <etharp_raw+0x114>)
 8052c1e:	4823      	ldr	r0, [pc, #140]	; (8052cac <etharp_raw+0x10c>)
 8052c20:	f001 fe0e 	bl	8054840 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8052c24:	697b      	ldr	r3, [r7, #20]
 8052c26:	3308      	adds	r3, #8
 8052c28:	2206      	movs	r2, #6
 8052c2a:	6839      	ldr	r1, [r7, #0]
 8052c2c:	4618      	mov	r0, r3
 8052c2e:	f002 f828 	bl	8054c82 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8052c32:	697b      	ldr	r3, [r7, #20]
 8052c34:	3312      	adds	r3, #18
 8052c36:	2206      	movs	r2, #6
 8052c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8052c3a:	4618      	mov	r0, r3
 8052c3c:	f002 f821 	bl	8054c82 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8052c40:	697b      	ldr	r3, [r7, #20]
 8052c42:	330e      	adds	r3, #14
 8052c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8052c46:	6812      	ldr	r2, [r2, #0]
 8052c48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8052c4a:	697b      	ldr	r3, [r7, #20]
 8052c4c:	3318      	adds	r3, #24
 8052c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8052c50:	6812      	ldr	r2, [r2, #0]
 8052c52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8052c54:	697b      	ldr	r3, [r7, #20]
 8052c56:	2200      	movs	r2, #0
 8052c58:	701a      	strb	r2, [r3, #0]
 8052c5a:	2200      	movs	r2, #0
 8052c5c:	f042 0201 	orr.w	r2, r2, #1
 8052c60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8052c62:	697b      	ldr	r3, [r7, #20]
 8052c64:	2200      	movs	r2, #0
 8052c66:	f042 0208 	orr.w	r2, r2, #8
 8052c6a:	709a      	strb	r2, [r3, #2]
 8052c6c:	2200      	movs	r2, #0
 8052c6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8052c70:	697b      	ldr	r3, [r7, #20]
 8052c72:	2206      	movs	r2, #6
 8052c74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8052c76:	697b      	ldr	r3, [r7, #20]
 8052c78:	2204      	movs	r2, #4
 8052c7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8052c7c:	f640 0306 	movw	r3, #2054	; 0x806
 8052c80:	9300      	str	r3, [sp, #0]
 8052c82:	687b      	ldr	r3, [r7, #4]
 8052c84:	68ba      	ldr	r2, [r7, #8]
 8052c86:	69b9      	ldr	r1, [r7, #24]
 8052c88:	68f8      	ldr	r0, [r7, #12]
 8052c8a:	f001 fb7b 	bl	8054384 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8052c8e:	69b8      	ldr	r0, [r7, #24]
 8052c90:	f7f9 f9d0 	bl	804c034 <pbuf_free>
  p = NULL;
 8052c94:	2300      	movs	r3, #0
 8052c96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8052c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8052c9c:	4618      	mov	r0, r3
 8052c9e:	3720      	adds	r7, #32
 8052ca0:	46bd      	mov	sp, r7
 8052ca2:	bd80      	pop	{r7, pc}
 8052ca4:	08057d78 	.word	0x08057d78
 8052ca8:	08057ec8 	.word	0x08057ec8
 8052cac:	08057df0 	.word	0x08057df0
 8052cb0:	08057f78 	.word	0x08057f78
 8052cb4:	08057fac 	.word	0x08057fac

08052cb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8052cb8:	b580      	push	{r7, lr}
 8052cba:	b088      	sub	sp, #32
 8052cbc:	af04      	add	r7, sp, #16
 8052cbe:	60f8      	str	r0, [r7, #12]
 8052cc0:	60b9      	str	r1, [r7, #8]
 8052cc2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8052cc4:	68fb      	ldr	r3, [r7, #12]
 8052cc6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8052cca:	68fb      	ldr	r3, [r7, #12]
 8052ccc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8052cd0:	68fb      	ldr	r3, [r7, #12]
 8052cd2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8052cd4:	2201      	movs	r2, #1
 8052cd6:	9203      	str	r2, [sp, #12]
 8052cd8:	68ba      	ldr	r2, [r7, #8]
 8052cda:	9202      	str	r2, [sp, #8]
 8052cdc:	4a06      	ldr	r2, [pc, #24]	; (8052cf8 <etharp_request_dst+0x40>)
 8052cde:	9201      	str	r2, [sp, #4]
 8052ce0:	9300      	str	r3, [sp, #0]
 8052ce2:	4603      	mov	r3, r0
 8052ce4:	687a      	ldr	r2, [r7, #4]
 8052ce6:	68f8      	ldr	r0, [r7, #12]
 8052ce8:	f7ff ff5a 	bl	8052ba0 <etharp_raw>
 8052cec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8052cee:	4618      	mov	r0, r3
 8052cf0:	3710      	adds	r7, #16
 8052cf2:	46bd      	mov	sp, r7
 8052cf4:	bd80      	pop	{r7, pc}
 8052cf6:	bf00      	nop
 8052cf8:	08058584 	.word	0x08058584

08052cfc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8052cfc:	b580      	push	{r7, lr}
 8052cfe:	b082      	sub	sp, #8
 8052d00:	af00      	add	r7, sp, #0
 8052d02:	6078      	str	r0, [r7, #4]
 8052d04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8052d06:	4a05      	ldr	r2, [pc, #20]	; (8052d1c <etharp_request+0x20>)
 8052d08:	6839      	ldr	r1, [r7, #0]
 8052d0a:	6878      	ldr	r0, [r7, #4]
 8052d0c:	f7ff ffd4 	bl	8052cb8 <etharp_request_dst>
 8052d10:	4603      	mov	r3, r0
}
 8052d12:	4618      	mov	r0, r3
 8052d14:	3708      	adds	r7, #8
 8052d16:	46bd      	mov	sp, r7
 8052d18:	bd80      	pop	{r7, pc}
 8052d1a:	bf00      	nop
 8052d1c:	0805857c 	.word	0x0805857c

08052d20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8052d20:	b580      	push	{r7, lr}
 8052d22:	b08e      	sub	sp, #56	; 0x38
 8052d24:	af04      	add	r7, sp, #16
 8052d26:	6078      	str	r0, [r7, #4]
 8052d28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8052d2a:	4b79      	ldr	r3, [pc, #484]	; (8052f10 <icmp_input+0x1f0>)
 8052d2c:	689b      	ldr	r3, [r3, #8]
 8052d2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8052d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052d32:	781b      	ldrb	r3, [r3, #0]
 8052d34:	f003 030f 	and.w	r3, r3, #15
 8052d38:	b2db      	uxtb	r3, r3
 8052d3a:	009b      	lsls	r3, r3, #2
 8052d3c:	b2db      	uxtb	r3, r3
 8052d3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8052d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052d42:	2b13      	cmp	r3, #19
 8052d44:	f240 80cd 	bls.w	8052ee2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8052d48:	687b      	ldr	r3, [r7, #4]
 8052d4a:	895b      	ldrh	r3, [r3, #10]
 8052d4c:	2b03      	cmp	r3, #3
 8052d4e:	f240 80ca 	bls.w	8052ee6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8052d52:	687b      	ldr	r3, [r7, #4]
 8052d54:	685b      	ldr	r3, [r3, #4]
 8052d56:	781b      	ldrb	r3, [r3, #0]
 8052d58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8052d5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8052d60:	2b00      	cmp	r3, #0
 8052d62:	f000 80b7 	beq.w	8052ed4 <icmp_input+0x1b4>
 8052d66:	2b08      	cmp	r3, #8
 8052d68:	f040 80b7 	bne.w	8052eda <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8052d6c:	4b69      	ldr	r3, [pc, #420]	; (8052f14 <icmp_input+0x1f4>)
 8052d6e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8052d70:	4b67      	ldr	r3, [pc, #412]	; (8052f10 <icmp_input+0x1f0>)
 8052d72:	695b      	ldr	r3, [r3, #20]
 8052d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8052d78:	2be0      	cmp	r3, #224	; 0xe0
 8052d7a:	f000 80bb 	beq.w	8052ef4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8052d7e:	4b64      	ldr	r3, [pc, #400]	; (8052f10 <icmp_input+0x1f0>)
 8052d80:	695b      	ldr	r3, [r3, #20]
 8052d82:	4a63      	ldr	r2, [pc, #396]	; (8052f10 <icmp_input+0x1f0>)
 8052d84:	6812      	ldr	r2, [r2, #0]
 8052d86:	4611      	mov	r1, r2
 8052d88:	4618      	mov	r0, r3
 8052d8a:	f000 fbed 	bl	8053568 <ip4_addr_isbroadcast_u32>
 8052d8e:	4603      	mov	r3, r0
 8052d90:	2b00      	cmp	r3, #0
 8052d92:	f040 80b1 	bne.w	8052ef8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8052d96:	687b      	ldr	r3, [r7, #4]
 8052d98:	891b      	ldrh	r3, [r3, #8]
 8052d9a:	2b07      	cmp	r3, #7
 8052d9c:	f240 80a5 	bls.w	8052eea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8052da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052da2:	330e      	adds	r3, #14
 8052da4:	4619      	mov	r1, r3
 8052da6:	6878      	ldr	r0, [r7, #4]
 8052da8:	f7f9 f8ae 	bl	804bf08 <pbuf_add_header>
 8052dac:	4603      	mov	r3, r0
 8052dae:	2b00      	cmp	r3, #0
 8052db0:	d04b      	beq.n	8052e4a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8052db2:	687b      	ldr	r3, [r7, #4]
 8052db4:	891a      	ldrh	r2, [r3, #8]
 8052db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052db8:	4413      	add	r3, r2
 8052dba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8052dbc:	687b      	ldr	r3, [r7, #4]
 8052dbe:	891b      	ldrh	r3, [r3, #8]
 8052dc0:	8b7a      	ldrh	r2, [r7, #26]
 8052dc2:	429a      	cmp	r2, r3
 8052dc4:	f0c0 809a 	bcc.w	8052efc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8052dc8:	8b7b      	ldrh	r3, [r7, #26]
 8052dca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8052dce:	4619      	mov	r1, r3
 8052dd0:	200e      	movs	r0, #14
 8052dd2:	f7f8 fe4b 	bl	804ba6c <pbuf_alloc>
 8052dd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8052dd8:	697b      	ldr	r3, [r7, #20]
 8052dda:	2b00      	cmp	r3, #0
 8052ddc:	f000 8090 	beq.w	8052f00 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8052de0:	697b      	ldr	r3, [r7, #20]
 8052de2:	895b      	ldrh	r3, [r3, #10]
 8052de4:	461a      	mov	r2, r3
 8052de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052de8:	3308      	adds	r3, #8
 8052dea:	429a      	cmp	r2, r3
 8052dec:	d203      	bcs.n	8052df6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8052dee:	6978      	ldr	r0, [r7, #20]
 8052df0:	f7f9 f920 	bl	804c034 <pbuf_free>
          goto icmperr;
 8052df4:	e085      	b.n	8052f02 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8052df6:	697b      	ldr	r3, [r7, #20]
 8052df8:	685b      	ldr	r3, [r3, #4]
 8052dfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8052dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8052dfe:	4618      	mov	r0, r3
 8052e00:	f001 ff3f 	bl	8054c82 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8052e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052e06:	4619      	mov	r1, r3
 8052e08:	6978      	ldr	r0, [r7, #20]
 8052e0a:	f7f9 f88d 	bl	804bf28 <pbuf_remove_header>
 8052e0e:	4603      	mov	r3, r0
 8052e10:	2b00      	cmp	r3, #0
 8052e12:	d009      	beq.n	8052e28 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8052e14:	4b40      	ldr	r3, [pc, #256]	; (8052f18 <icmp_input+0x1f8>)
 8052e16:	22b6      	movs	r2, #182	; 0xb6
 8052e18:	4940      	ldr	r1, [pc, #256]	; (8052f1c <icmp_input+0x1fc>)
 8052e1a:	4841      	ldr	r0, [pc, #260]	; (8052f20 <icmp_input+0x200>)
 8052e1c:	f001 fd10 	bl	8054840 <iprintf>
          pbuf_free(r);
 8052e20:	6978      	ldr	r0, [r7, #20]
 8052e22:	f7f9 f907 	bl	804c034 <pbuf_free>
          goto icmperr;
 8052e26:	e06c      	b.n	8052f02 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8052e28:	6879      	ldr	r1, [r7, #4]
 8052e2a:	6978      	ldr	r0, [r7, #20]
 8052e2c:	f7f9 fa26 	bl	804c27c <pbuf_copy>
 8052e30:	4603      	mov	r3, r0
 8052e32:	2b00      	cmp	r3, #0
 8052e34:	d003      	beq.n	8052e3e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8052e36:	6978      	ldr	r0, [r7, #20]
 8052e38:	f7f9 f8fc 	bl	804c034 <pbuf_free>
          goto icmperr;
 8052e3c:	e061      	b.n	8052f02 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8052e3e:	6878      	ldr	r0, [r7, #4]
 8052e40:	f7f9 f8f8 	bl	804c034 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8052e44:	697b      	ldr	r3, [r7, #20]
 8052e46:	607b      	str	r3, [r7, #4]
 8052e48:	e00f      	b.n	8052e6a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8052e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052e4c:	330e      	adds	r3, #14
 8052e4e:	4619      	mov	r1, r3
 8052e50:	6878      	ldr	r0, [r7, #4]
 8052e52:	f7f9 f869 	bl	804bf28 <pbuf_remove_header>
 8052e56:	4603      	mov	r3, r0
 8052e58:	2b00      	cmp	r3, #0
 8052e5a:	d006      	beq.n	8052e6a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8052e5c:	4b2e      	ldr	r3, [pc, #184]	; (8052f18 <icmp_input+0x1f8>)
 8052e5e:	22c7      	movs	r2, #199	; 0xc7
 8052e60:	4930      	ldr	r1, [pc, #192]	; (8052f24 <icmp_input+0x204>)
 8052e62:	482f      	ldr	r0, [pc, #188]	; (8052f20 <icmp_input+0x200>)
 8052e64:	f001 fcec 	bl	8054840 <iprintf>
          goto icmperr;
 8052e68:	e04b      	b.n	8052f02 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8052e6a:	687b      	ldr	r3, [r7, #4]
 8052e6c:	685b      	ldr	r3, [r3, #4]
 8052e6e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8052e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8052e72:	4619      	mov	r1, r3
 8052e74:	6878      	ldr	r0, [r7, #4]
 8052e76:	f7f9 f847 	bl	804bf08 <pbuf_add_header>
 8052e7a:	4603      	mov	r3, r0
 8052e7c:	2b00      	cmp	r3, #0
 8052e7e:	d12b      	bne.n	8052ed8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8052e80:	687b      	ldr	r3, [r7, #4]
 8052e82:	685b      	ldr	r3, [r3, #4]
 8052e84:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8052e86:	69fb      	ldr	r3, [r7, #28]
 8052e88:	681a      	ldr	r2, [r3, #0]
 8052e8a:	68fb      	ldr	r3, [r7, #12]
 8052e8c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8052e8e:	4b20      	ldr	r3, [pc, #128]	; (8052f10 <icmp_input+0x1f0>)
 8052e90:	691a      	ldr	r2, [r3, #16]
 8052e92:	68fb      	ldr	r3, [r7, #12]
 8052e94:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8052e96:	693b      	ldr	r3, [r7, #16]
 8052e98:	2200      	movs	r2, #0
 8052e9a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8052e9c:	693b      	ldr	r3, [r7, #16]
 8052e9e:	2200      	movs	r2, #0
 8052ea0:	709a      	strb	r2, [r3, #2]
 8052ea2:	2200      	movs	r2, #0
 8052ea4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8052ea6:	68fb      	ldr	r3, [r7, #12]
 8052ea8:	22ff      	movs	r2, #255	; 0xff
 8052eaa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8052eac:	68fb      	ldr	r3, [r7, #12]
 8052eae:	2200      	movs	r2, #0
 8052eb0:	729a      	strb	r2, [r3, #10]
 8052eb2:	2200      	movs	r2, #0
 8052eb4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8052eb6:	683b      	ldr	r3, [r7, #0]
 8052eb8:	9302      	str	r3, [sp, #8]
 8052eba:	2301      	movs	r3, #1
 8052ebc:	9301      	str	r3, [sp, #4]
 8052ebe:	2300      	movs	r3, #0
 8052ec0:	9300      	str	r3, [sp, #0]
 8052ec2:	23ff      	movs	r3, #255	; 0xff
 8052ec4:	2200      	movs	r2, #0
 8052ec6:	69f9      	ldr	r1, [r7, #28]
 8052ec8:	6878      	ldr	r0, [r7, #4]
 8052eca:	f000 fa75 	bl	80533b8 <ip4_output_if>
 8052ece:	4603      	mov	r3, r0
 8052ed0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8052ed2:	e001      	b.n	8052ed8 <icmp_input+0x1b8>
      break;
 8052ed4:	bf00      	nop
 8052ed6:	e000      	b.n	8052eda <icmp_input+0x1ba>
      break;
 8052ed8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8052eda:	6878      	ldr	r0, [r7, #4]
 8052edc:	f7f9 f8aa 	bl	804c034 <pbuf_free>
  return;
 8052ee0:	e013      	b.n	8052f0a <icmp_input+0x1ea>
    goto lenerr;
 8052ee2:	bf00      	nop
 8052ee4:	e002      	b.n	8052eec <icmp_input+0x1cc>
    goto lenerr;
 8052ee6:	bf00      	nop
 8052ee8:	e000      	b.n	8052eec <icmp_input+0x1cc>
        goto lenerr;
 8052eea:	bf00      	nop
lenerr:
  pbuf_free(p);
 8052eec:	6878      	ldr	r0, [r7, #4]
 8052eee:	f7f9 f8a1 	bl	804c034 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8052ef2:	e00a      	b.n	8052f0a <icmp_input+0x1ea>
        goto icmperr;
 8052ef4:	bf00      	nop
 8052ef6:	e004      	b.n	8052f02 <icmp_input+0x1e2>
        goto icmperr;
 8052ef8:	bf00      	nop
 8052efa:	e002      	b.n	8052f02 <icmp_input+0x1e2>
          goto icmperr;
 8052efc:	bf00      	nop
 8052efe:	e000      	b.n	8052f02 <icmp_input+0x1e2>
          goto icmperr;
 8052f00:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8052f02:	6878      	ldr	r0, [r7, #4]
 8052f04:	f7f9 f896 	bl	804c034 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8052f08:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8052f0a:	3728      	adds	r7, #40	; 0x28
 8052f0c:	46bd      	mov	sp, r7
 8052f0e:	bd80      	pop	{r7, pc}
 8052f10:	20020078 	.word	0x20020078
 8052f14:	2002008c 	.word	0x2002008c
 8052f18:	08057ff0 	.word	0x08057ff0
 8052f1c:	08058028 	.word	0x08058028
 8052f20:	08058060 	.word	0x08058060
 8052f24:	08058088 	.word	0x08058088

08052f28 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8052f28:	b580      	push	{r7, lr}
 8052f2a:	b082      	sub	sp, #8
 8052f2c:	af00      	add	r7, sp, #0
 8052f2e:	6078      	str	r0, [r7, #4]
 8052f30:	460b      	mov	r3, r1
 8052f32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8052f34:	78fb      	ldrb	r3, [r7, #3]
 8052f36:	461a      	mov	r2, r3
 8052f38:	2103      	movs	r1, #3
 8052f3a:	6878      	ldr	r0, [r7, #4]
 8052f3c:	f000 f814 	bl	8052f68 <icmp_send_response>
}
 8052f40:	bf00      	nop
 8052f42:	3708      	adds	r7, #8
 8052f44:	46bd      	mov	sp, r7
 8052f46:	bd80      	pop	{r7, pc}

08052f48 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8052f48:	b580      	push	{r7, lr}
 8052f4a:	b082      	sub	sp, #8
 8052f4c:	af00      	add	r7, sp, #0
 8052f4e:	6078      	str	r0, [r7, #4]
 8052f50:	460b      	mov	r3, r1
 8052f52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8052f54:	78fb      	ldrb	r3, [r7, #3]
 8052f56:	461a      	mov	r2, r3
 8052f58:	210b      	movs	r1, #11
 8052f5a:	6878      	ldr	r0, [r7, #4]
 8052f5c:	f000 f804 	bl	8052f68 <icmp_send_response>
}
 8052f60:	bf00      	nop
 8052f62:	3708      	adds	r7, #8
 8052f64:	46bd      	mov	sp, r7
 8052f66:	bd80      	pop	{r7, pc}

08052f68 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8052f68:	b580      	push	{r7, lr}
 8052f6a:	b08c      	sub	sp, #48	; 0x30
 8052f6c:	af04      	add	r7, sp, #16
 8052f6e:	6078      	str	r0, [r7, #4]
 8052f70:	460b      	mov	r3, r1
 8052f72:	70fb      	strb	r3, [r7, #3]
 8052f74:	4613      	mov	r3, r2
 8052f76:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8052f78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8052f7c:	2124      	movs	r1, #36	; 0x24
 8052f7e:	2022      	movs	r0, #34	; 0x22
 8052f80:	f7f8 fd74 	bl	804ba6c <pbuf_alloc>
 8052f84:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8052f86:	69fb      	ldr	r3, [r7, #28]
 8052f88:	2b00      	cmp	r3, #0
 8052f8a:	d04c      	beq.n	8053026 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8052f8c:	69fb      	ldr	r3, [r7, #28]
 8052f8e:	895b      	ldrh	r3, [r3, #10]
 8052f90:	2b23      	cmp	r3, #35	; 0x23
 8052f92:	d806      	bhi.n	8052fa2 <icmp_send_response+0x3a>
 8052f94:	4b26      	ldr	r3, [pc, #152]	; (8053030 <icmp_send_response+0xc8>)
 8052f96:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8052f9a:	4926      	ldr	r1, [pc, #152]	; (8053034 <icmp_send_response+0xcc>)
 8052f9c:	4826      	ldr	r0, [pc, #152]	; (8053038 <icmp_send_response+0xd0>)
 8052f9e:	f001 fc4f 	bl	8054840 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8052fa2:	687b      	ldr	r3, [r7, #4]
 8052fa4:	685b      	ldr	r3, [r3, #4]
 8052fa6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8052fa8:	69fb      	ldr	r3, [r7, #28]
 8052faa:	685b      	ldr	r3, [r3, #4]
 8052fac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8052fae:	697b      	ldr	r3, [r7, #20]
 8052fb0:	78fa      	ldrb	r2, [r7, #3]
 8052fb2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8052fb4:	697b      	ldr	r3, [r7, #20]
 8052fb6:	78ba      	ldrb	r2, [r7, #2]
 8052fb8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8052fba:	697b      	ldr	r3, [r7, #20]
 8052fbc:	2200      	movs	r2, #0
 8052fbe:	711a      	strb	r2, [r3, #4]
 8052fc0:	2200      	movs	r2, #0
 8052fc2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8052fc4:	697b      	ldr	r3, [r7, #20]
 8052fc6:	2200      	movs	r2, #0
 8052fc8:	719a      	strb	r2, [r3, #6]
 8052fca:	2200      	movs	r2, #0
 8052fcc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8052fce:	69fb      	ldr	r3, [r7, #28]
 8052fd0:	685b      	ldr	r3, [r3, #4]
 8052fd2:	f103 0008 	add.w	r0, r3, #8
 8052fd6:	687b      	ldr	r3, [r7, #4]
 8052fd8:	685b      	ldr	r3, [r3, #4]
 8052fda:	221c      	movs	r2, #28
 8052fdc:	4619      	mov	r1, r3
 8052fde:	f001 fe50 	bl	8054c82 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8052fe2:	69bb      	ldr	r3, [r7, #24]
 8052fe4:	68db      	ldr	r3, [r3, #12]
 8052fe6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8052fe8:	f107 030c 	add.w	r3, r7, #12
 8052fec:	4618      	mov	r0, r3
 8052fee:	f000 f825 	bl	805303c <ip4_route>
 8052ff2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8052ff4:	693b      	ldr	r3, [r7, #16]
 8052ff6:	2b00      	cmp	r3, #0
 8052ff8:	d011      	beq.n	805301e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8052ffa:	697b      	ldr	r3, [r7, #20]
 8052ffc:	2200      	movs	r2, #0
 8052ffe:	709a      	strb	r2, [r3, #2]
 8053000:	2200      	movs	r2, #0
 8053002:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8053004:	f107 020c 	add.w	r2, r7, #12
 8053008:	693b      	ldr	r3, [r7, #16]
 805300a:	9302      	str	r3, [sp, #8]
 805300c:	2301      	movs	r3, #1
 805300e:	9301      	str	r3, [sp, #4]
 8053010:	2300      	movs	r3, #0
 8053012:	9300      	str	r3, [sp, #0]
 8053014:	23ff      	movs	r3, #255	; 0xff
 8053016:	2100      	movs	r1, #0
 8053018:	69f8      	ldr	r0, [r7, #28]
 805301a:	f000 f9cd 	bl	80533b8 <ip4_output_if>
  }
  pbuf_free(q);
 805301e:	69f8      	ldr	r0, [r7, #28]
 8053020:	f7f9 f808 	bl	804c034 <pbuf_free>
 8053024:	e000      	b.n	8053028 <icmp_send_response+0xc0>
    return;
 8053026:	bf00      	nop
}
 8053028:	3720      	adds	r7, #32
 805302a:	46bd      	mov	sp, r7
 805302c:	bd80      	pop	{r7, pc}
 805302e:	bf00      	nop
 8053030:	08057ff0 	.word	0x08057ff0
 8053034:	080580bc 	.word	0x080580bc
 8053038:	08058060 	.word	0x08058060

0805303c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 805303c:	b480      	push	{r7}
 805303e:	b085      	sub	sp, #20
 8053040:	af00      	add	r7, sp, #0
 8053042:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8053044:	4b33      	ldr	r3, [pc, #204]	; (8053114 <ip4_route+0xd8>)
 8053046:	681b      	ldr	r3, [r3, #0]
 8053048:	60fb      	str	r3, [r7, #12]
 805304a:	e036      	b.n	80530ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 805304c:	68fb      	ldr	r3, [r7, #12]
 805304e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8053052:	f003 0301 	and.w	r3, r3, #1
 8053056:	b2db      	uxtb	r3, r3
 8053058:	2b00      	cmp	r3, #0
 805305a:	d02b      	beq.n	80530b4 <ip4_route+0x78>
 805305c:	68fb      	ldr	r3, [r7, #12]
 805305e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8053062:	089b      	lsrs	r3, r3, #2
 8053064:	f003 0301 	and.w	r3, r3, #1
 8053068:	b2db      	uxtb	r3, r3
 805306a:	2b00      	cmp	r3, #0
 805306c:	d022      	beq.n	80530b4 <ip4_route+0x78>
 805306e:	68fb      	ldr	r3, [r7, #12]
 8053070:	3304      	adds	r3, #4
 8053072:	681b      	ldr	r3, [r3, #0]
 8053074:	2b00      	cmp	r3, #0
 8053076:	d01d      	beq.n	80530b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8053078:	687b      	ldr	r3, [r7, #4]
 805307a:	681a      	ldr	r2, [r3, #0]
 805307c:	68fb      	ldr	r3, [r7, #12]
 805307e:	3304      	adds	r3, #4
 8053080:	681b      	ldr	r3, [r3, #0]
 8053082:	405a      	eors	r2, r3
 8053084:	68fb      	ldr	r3, [r7, #12]
 8053086:	3308      	adds	r3, #8
 8053088:	681b      	ldr	r3, [r3, #0]
 805308a:	4013      	ands	r3, r2
 805308c:	2b00      	cmp	r3, #0
 805308e:	d101      	bne.n	8053094 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8053090:	68fb      	ldr	r3, [r7, #12]
 8053092:	e038      	b.n	8053106 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8053094:	68fb      	ldr	r3, [r7, #12]
 8053096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 805309a:	f003 0302 	and.w	r3, r3, #2
 805309e:	2b00      	cmp	r3, #0
 80530a0:	d108      	bne.n	80530b4 <ip4_route+0x78>
 80530a2:	687b      	ldr	r3, [r7, #4]
 80530a4:	681a      	ldr	r2, [r3, #0]
 80530a6:	68fb      	ldr	r3, [r7, #12]
 80530a8:	330c      	adds	r3, #12
 80530aa:	681b      	ldr	r3, [r3, #0]
 80530ac:	429a      	cmp	r2, r3
 80530ae:	d101      	bne.n	80530b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80530b0:	68fb      	ldr	r3, [r7, #12]
 80530b2:	e028      	b.n	8053106 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80530b4:	68fb      	ldr	r3, [r7, #12]
 80530b6:	681b      	ldr	r3, [r3, #0]
 80530b8:	60fb      	str	r3, [r7, #12]
 80530ba:	68fb      	ldr	r3, [r7, #12]
 80530bc:	2b00      	cmp	r3, #0
 80530be:	d1c5      	bne.n	805304c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80530c0:	4b15      	ldr	r3, [pc, #84]	; (8053118 <ip4_route+0xdc>)
 80530c2:	681b      	ldr	r3, [r3, #0]
 80530c4:	2b00      	cmp	r3, #0
 80530c6:	d01a      	beq.n	80530fe <ip4_route+0xc2>
 80530c8:	4b13      	ldr	r3, [pc, #76]	; (8053118 <ip4_route+0xdc>)
 80530ca:	681b      	ldr	r3, [r3, #0]
 80530cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80530d0:	f003 0301 	and.w	r3, r3, #1
 80530d4:	2b00      	cmp	r3, #0
 80530d6:	d012      	beq.n	80530fe <ip4_route+0xc2>
 80530d8:	4b0f      	ldr	r3, [pc, #60]	; (8053118 <ip4_route+0xdc>)
 80530da:	681b      	ldr	r3, [r3, #0]
 80530dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80530e0:	f003 0304 	and.w	r3, r3, #4
 80530e4:	2b00      	cmp	r3, #0
 80530e6:	d00a      	beq.n	80530fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80530e8:	4b0b      	ldr	r3, [pc, #44]	; (8053118 <ip4_route+0xdc>)
 80530ea:	681b      	ldr	r3, [r3, #0]
 80530ec:	3304      	adds	r3, #4
 80530ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80530f0:	2b00      	cmp	r3, #0
 80530f2:	d004      	beq.n	80530fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80530f4:	687b      	ldr	r3, [r7, #4]
 80530f6:	681b      	ldr	r3, [r3, #0]
 80530f8:	b2db      	uxtb	r3, r3
 80530fa:	2b7f      	cmp	r3, #127	; 0x7f
 80530fc:	d101      	bne.n	8053102 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80530fe:	2300      	movs	r3, #0
 8053100:	e001      	b.n	8053106 <ip4_route+0xca>
  }

  return netif_default;
 8053102:	4b05      	ldr	r3, [pc, #20]	; (8053118 <ip4_route+0xdc>)
 8053104:	681b      	ldr	r3, [r3, #0]
}
 8053106:	4618      	mov	r0, r3
 8053108:	3714      	adds	r7, #20
 805310a:	46bd      	mov	sp, r7
 805310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8053110:	4770      	bx	lr
 8053112:	bf00      	nop
 8053114:	200237c0 	.word	0x200237c0
 8053118:	200237c4 	.word	0x200237c4

0805311c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 805311c:	b580      	push	{r7, lr}
 805311e:	b082      	sub	sp, #8
 8053120:	af00      	add	r7, sp, #0
 8053122:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8053124:	687b      	ldr	r3, [r7, #4]
 8053126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 805312a:	f003 0301 	and.w	r3, r3, #1
 805312e:	b2db      	uxtb	r3, r3
 8053130:	2b00      	cmp	r3, #0
 8053132:	d016      	beq.n	8053162 <ip4_input_accept+0x46>
 8053134:	687b      	ldr	r3, [r7, #4]
 8053136:	3304      	adds	r3, #4
 8053138:	681b      	ldr	r3, [r3, #0]
 805313a:	2b00      	cmp	r3, #0
 805313c:	d011      	beq.n	8053162 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 805313e:	4b0b      	ldr	r3, [pc, #44]	; (805316c <ip4_input_accept+0x50>)
 8053140:	695a      	ldr	r2, [r3, #20]
 8053142:	687b      	ldr	r3, [r7, #4]
 8053144:	3304      	adds	r3, #4
 8053146:	681b      	ldr	r3, [r3, #0]
 8053148:	429a      	cmp	r2, r3
 805314a:	d008      	beq.n	805315e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 805314c:	4b07      	ldr	r3, [pc, #28]	; (805316c <ip4_input_accept+0x50>)
 805314e:	695b      	ldr	r3, [r3, #20]
 8053150:	6879      	ldr	r1, [r7, #4]
 8053152:	4618      	mov	r0, r3
 8053154:	f000 fa08 	bl	8053568 <ip4_addr_isbroadcast_u32>
 8053158:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 805315a:	2b00      	cmp	r3, #0
 805315c:	d001      	beq.n	8053162 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 805315e:	2301      	movs	r3, #1
 8053160:	e000      	b.n	8053164 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8053162:	2300      	movs	r3, #0
}
 8053164:	4618      	mov	r0, r3
 8053166:	3708      	adds	r7, #8
 8053168:	46bd      	mov	sp, r7
 805316a:	bd80      	pop	{r7, pc}
 805316c:	20020078 	.word	0x20020078

08053170 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8053170:	b580      	push	{r7, lr}
 8053172:	b086      	sub	sp, #24
 8053174:	af00      	add	r7, sp, #0
 8053176:	6078      	str	r0, [r7, #4]
 8053178:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 805317a:	687b      	ldr	r3, [r7, #4]
 805317c:	685b      	ldr	r3, [r3, #4]
 805317e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8053180:	697b      	ldr	r3, [r7, #20]
 8053182:	781b      	ldrb	r3, [r3, #0]
 8053184:	091b      	lsrs	r3, r3, #4
 8053186:	b2db      	uxtb	r3, r3
 8053188:	2b04      	cmp	r3, #4
 805318a:	d004      	beq.n	8053196 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 805318c:	6878      	ldr	r0, [r7, #4]
 805318e:	f7f8 ff51 	bl	804c034 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8053192:	2300      	movs	r3, #0
 8053194:	e107      	b.n	80533a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8053196:	697b      	ldr	r3, [r7, #20]
 8053198:	781b      	ldrb	r3, [r3, #0]
 805319a:	f003 030f 	and.w	r3, r3, #15
 805319e:	b2db      	uxtb	r3, r3
 80531a0:	009b      	lsls	r3, r3, #2
 80531a2:	b2db      	uxtb	r3, r3
 80531a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80531a6:	697b      	ldr	r3, [r7, #20]
 80531a8:	885b      	ldrh	r3, [r3, #2]
 80531aa:	b29b      	uxth	r3, r3
 80531ac:	4618      	mov	r0, r3
 80531ae:	f7f7 fb4f 	bl	804a850 <lwip_htons>
 80531b2:	4603      	mov	r3, r0
 80531b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80531b6:	687b      	ldr	r3, [r7, #4]
 80531b8:	891b      	ldrh	r3, [r3, #8]
 80531ba:	89ba      	ldrh	r2, [r7, #12]
 80531bc:	429a      	cmp	r2, r3
 80531be:	d204      	bcs.n	80531ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80531c0:	89bb      	ldrh	r3, [r7, #12]
 80531c2:	4619      	mov	r1, r3
 80531c4:	6878      	ldr	r0, [r7, #4]
 80531c6:	f7f8 fdaf 	bl	804bd28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80531ca:	687b      	ldr	r3, [r7, #4]
 80531cc:	895b      	ldrh	r3, [r3, #10]
 80531ce:	89fa      	ldrh	r2, [r7, #14]
 80531d0:	429a      	cmp	r2, r3
 80531d2:	d807      	bhi.n	80531e4 <ip4_input+0x74>
 80531d4:	687b      	ldr	r3, [r7, #4]
 80531d6:	891b      	ldrh	r3, [r3, #8]
 80531d8:	89ba      	ldrh	r2, [r7, #12]
 80531da:	429a      	cmp	r2, r3
 80531dc:	d802      	bhi.n	80531e4 <ip4_input+0x74>
 80531de:	89fb      	ldrh	r3, [r7, #14]
 80531e0:	2b13      	cmp	r3, #19
 80531e2:	d804      	bhi.n	80531ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80531e4:	6878      	ldr	r0, [r7, #4]
 80531e6:	f7f8 ff25 	bl	804c034 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80531ea:	2300      	movs	r3, #0
 80531ec:	e0db      	b.n	80533a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80531ee:	697b      	ldr	r3, [r7, #20]
 80531f0:	691b      	ldr	r3, [r3, #16]
 80531f2:	4a6f      	ldr	r2, [pc, #444]	; (80533b0 <ip4_input+0x240>)
 80531f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80531f6:	697b      	ldr	r3, [r7, #20]
 80531f8:	68db      	ldr	r3, [r3, #12]
 80531fa:	4a6d      	ldr	r2, [pc, #436]	; (80533b0 <ip4_input+0x240>)
 80531fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80531fe:	4b6c      	ldr	r3, [pc, #432]	; (80533b0 <ip4_input+0x240>)
 8053200:	695b      	ldr	r3, [r3, #20]
 8053202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8053206:	2be0      	cmp	r3, #224	; 0xe0
 8053208:	d112      	bne.n	8053230 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 805320a:	683b      	ldr	r3, [r7, #0]
 805320c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8053210:	f003 0301 	and.w	r3, r3, #1
 8053214:	b2db      	uxtb	r3, r3
 8053216:	2b00      	cmp	r3, #0
 8053218:	d007      	beq.n	805322a <ip4_input+0xba>
 805321a:	683b      	ldr	r3, [r7, #0]
 805321c:	3304      	adds	r3, #4
 805321e:	681b      	ldr	r3, [r3, #0]
 8053220:	2b00      	cmp	r3, #0
 8053222:	d002      	beq.n	805322a <ip4_input+0xba>
      netif = inp;
 8053224:	683b      	ldr	r3, [r7, #0]
 8053226:	613b      	str	r3, [r7, #16]
 8053228:	e02a      	b.n	8053280 <ip4_input+0x110>
    } else {
      netif = NULL;
 805322a:	2300      	movs	r3, #0
 805322c:	613b      	str	r3, [r7, #16]
 805322e:	e027      	b.n	8053280 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8053230:	6838      	ldr	r0, [r7, #0]
 8053232:	f7ff ff73 	bl	805311c <ip4_input_accept>
 8053236:	4603      	mov	r3, r0
 8053238:	2b00      	cmp	r3, #0
 805323a:	d002      	beq.n	8053242 <ip4_input+0xd2>
      netif = inp;
 805323c:	683b      	ldr	r3, [r7, #0]
 805323e:	613b      	str	r3, [r7, #16]
 8053240:	e01e      	b.n	8053280 <ip4_input+0x110>
    } else {
      netif = NULL;
 8053242:	2300      	movs	r3, #0
 8053244:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8053246:	4b5a      	ldr	r3, [pc, #360]	; (80533b0 <ip4_input+0x240>)
 8053248:	695b      	ldr	r3, [r3, #20]
 805324a:	b2db      	uxtb	r3, r3
 805324c:	2b7f      	cmp	r3, #127	; 0x7f
 805324e:	d017      	beq.n	8053280 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8053250:	4b58      	ldr	r3, [pc, #352]	; (80533b4 <ip4_input+0x244>)
 8053252:	681b      	ldr	r3, [r3, #0]
 8053254:	613b      	str	r3, [r7, #16]
 8053256:	e00e      	b.n	8053276 <ip4_input+0x106>
          if (netif == inp) {
 8053258:	693a      	ldr	r2, [r7, #16]
 805325a:	683b      	ldr	r3, [r7, #0]
 805325c:	429a      	cmp	r2, r3
 805325e:	d006      	beq.n	805326e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8053260:	6938      	ldr	r0, [r7, #16]
 8053262:	f7ff ff5b 	bl	805311c <ip4_input_accept>
 8053266:	4603      	mov	r3, r0
 8053268:	2b00      	cmp	r3, #0
 805326a:	d108      	bne.n	805327e <ip4_input+0x10e>
 805326c:	e000      	b.n	8053270 <ip4_input+0x100>
            continue;
 805326e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8053270:	693b      	ldr	r3, [r7, #16]
 8053272:	681b      	ldr	r3, [r3, #0]
 8053274:	613b      	str	r3, [r7, #16]
 8053276:	693b      	ldr	r3, [r7, #16]
 8053278:	2b00      	cmp	r3, #0
 805327a:	d1ed      	bne.n	8053258 <ip4_input+0xe8>
 805327c:	e000      	b.n	8053280 <ip4_input+0x110>
            break;
 805327e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8053280:	4b4b      	ldr	r3, [pc, #300]	; (80533b0 <ip4_input+0x240>)
 8053282:	691b      	ldr	r3, [r3, #16]
 8053284:	6839      	ldr	r1, [r7, #0]
 8053286:	4618      	mov	r0, r3
 8053288:	f000 f96e 	bl	8053568 <ip4_addr_isbroadcast_u32>
 805328c:	4603      	mov	r3, r0
 805328e:	2b00      	cmp	r3, #0
 8053290:	d105      	bne.n	805329e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8053292:	4b47      	ldr	r3, [pc, #284]	; (80533b0 <ip4_input+0x240>)
 8053294:	691b      	ldr	r3, [r3, #16]
 8053296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 805329a:	2be0      	cmp	r3, #224	; 0xe0
 805329c:	d104      	bne.n	80532a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 805329e:	6878      	ldr	r0, [r7, #4]
 80532a0:	f7f8 fec8 	bl	804c034 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80532a4:	2300      	movs	r3, #0
 80532a6:	e07e      	b.n	80533a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80532a8:	693b      	ldr	r3, [r7, #16]
 80532aa:	2b00      	cmp	r3, #0
 80532ac:	d104      	bne.n	80532b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80532ae:	6878      	ldr	r0, [r7, #4]
 80532b0:	f7f8 fec0 	bl	804c034 <pbuf_free>
    return ERR_OK;
 80532b4:	2300      	movs	r3, #0
 80532b6:	e076      	b.n	80533a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80532b8:	697b      	ldr	r3, [r7, #20]
 80532ba:	88db      	ldrh	r3, [r3, #6]
 80532bc:	b29b      	uxth	r3, r3
 80532be:	461a      	mov	r2, r3
 80532c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80532c4:	4013      	ands	r3, r2
 80532c6:	2b00      	cmp	r3, #0
 80532c8:	d00b      	beq.n	80532e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80532ca:	6878      	ldr	r0, [r7, #4]
 80532cc:	f000 fc92 	bl	8053bf4 <ip4_reass>
 80532d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80532d2:	687b      	ldr	r3, [r7, #4]
 80532d4:	2b00      	cmp	r3, #0
 80532d6:	d101      	bne.n	80532dc <ip4_input+0x16c>
      return ERR_OK;
 80532d8:	2300      	movs	r3, #0
 80532da:	e064      	b.n	80533a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80532dc:	687b      	ldr	r3, [r7, #4]
 80532de:	685b      	ldr	r3, [r3, #4]
 80532e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80532e2:	4a33      	ldr	r2, [pc, #204]	; (80533b0 <ip4_input+0x240>)
 80532e4:	693b      	ldr	r3, [r7, #16]
 80532e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80532e8:	4a31      	ldr	r2, [pc, #196]	; (80533b0 <ip4_input+0x240>)
 80532ea:	683b      	ldr	r3, [r7, #0]
 80532ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80532ee:	4a30      	ldr	r2, [pc, #192]	; (80533b0 <ip4_input+0x240>)
 80532f0:	697b      	ldr	r3, [r7, #20]
 80532f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80532f4:	697b      	ldr	r3, [r7, #20]
 80532f6:	781b      	ldrb	r3, [r3, #0]
 80532f8:	f003 030f 	and.w	r3, r3, #15
 80532fc:	b2db      	uxtb	r3, r3
 80532fe:	009b      	lsls	r3, r3, #2
 8053300:	b2db      	uxtb	r3, r3
 8053302:	b29a      	uxth	r2, r3
 8053304:	4b2a      	ldr	r3, [pc, #168]	; (80533b0 <ip4_input+0x240>)
 8053306:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8053308:	89fb      	ldrh	r3, [r7, #14]
 805330a:	4619      	mov	r1, r3
 805330c:	6878      	ldr	r0, [r7, #4]
 805330e:	f7f8 fe0b 	bl	804bf28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8053312:	697b      	ldr	r3, [r7, #20]
 8053314:	7a5b      	ldrb	r3, [r3, #9]
 8053316:	2b11      	cmp	r3, #17
 8053318:	d006      	beq.n	8053328 <ip4_input+0x1b8>
 805331a:	2b11      	cmp	r3, #17
 805331c:	dc13      	bgt.n	8053346 <ip4_input+0x1d6>
 805331e:	2b01      	cmp	r3, #1
 8053320:	d00c      	beq.n	805333c <ip4_input+0x1cc>
 8053322:	2b06      	cmp	r3, #6
 8053324:	d005      	beq.n	8053332 <ip4_input+0x1c2>
 8053326:	e00e      	b.n	8053346 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8053328:	6839      	ldr	r1, [r7, #0]
 805332a:	6878      	ldr	r0, [r7, #4]
 805332c:	f7fe fc68 	bl	8051c00 <udp_input>
        break;
 8053330:	e026      	b.n	8053380 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8053332:	6839      	ldr	r1, [r7, #0]
 8053334:	6878      	ldr	r0, [r7, #4]
 8053336:	f7fa fcb1 	bl	804dc9c <tcp_input>
        break;
 805333a:	e021      	b.n	8053380 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 805333c:	6839      	ldr	r1, [r7, #0]
 805333e:	6878      	ldr	r0, [r7, #4]
 8053340:	f7ff fcee 	bl	8052d20 <icmp_input>
        break;
 8053344:	e01c      	b.n	8053380 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8053346:	4b1a      	ldr	r3, [pc, #104]	; (80533b0 <ip4_input+0x240>)
 8053348:	695b      	ldr	r3, [r3, #20]
 805334a:	6939      	ldr	r1, [r7, #16]
 805334c:	4618      	mov	r0, r3
 805334e:	f000 f90b 	bl	8053568 <ip4_addr_isbroadcast_u32>
 8053352:	4603      	mov	r3, r0
 8053354:	2b00      	cmp	r3, #0
 8053356:	d10f      	bne.n	8053378 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8053358:	4b15      	ldr	r3, [pc, #84]	; (80533b0 <ip4_input+0x240>)
 805335a:	695b      	ldr	r3, [r3, #20]
 805335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8053360:	2be0      	cmp	r3, #224	; 0xe0
 8053362:	d009      	beq.n	8053378 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8053364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8053368:	4619      	mov	r1, r3
 805336a:	6878      	ldr	r0, [r7, #4]
 805336c:	f7f8 fe4f 	bl	804c00e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8053370:	2102      	movs	r1, #2
 8053372:	6878      	ldr	r0, [r7, #4]
 8053374:	f7ff fdd8 	bl	8052f28 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8053378:	6878      	ldr	r0, [r7, #4]
 805337a:	f7f8 fe5b 	bl	804c034 <pbuf_free>
        break;
 805337e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8053380:	4b0b      	ldr	r3, [pc, #44]	; (80533b0 <ip4_input+0x240>)
 8053382:	2200      	movs	r2, #0
 8053384:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8053386:	4b0a      	ldr	r3, [pc, #40]	; (80533b0 <ip4_input+0x240>)
 8053388:	2200      	movs	r2, #0
 805338a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 805338c:	4b08      	ldr	r3, [pc, #32]	; (80533b0 <ip4_input+0x240>)
 805338e:	2200      	movs	r2, #0
 8053390:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8053392:	4b07      	ldr	r3, [pc, #28]	; (80533b0 <ip4_input+0x240>)
 8053394:	2200      	movs	r2, #0
 8053396:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8053398:	4b05      	ldr	r3, [pc, #20]	; (80533b0 <ip4_input+0x240>)
 805339a:	2200      	movs	r2, #0
 805339c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 805339e:	4b04      	ldr	r3, [pc, #16]	; (80533b0 <ip4_input+0x240>)
 80533a0:	2200      	movs	r2, #0
 80533a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80533a4:	2300      	movs	r3, #0
}
 80533a6:	4618      	mov	r0, r3
 80533a8:	3718      	adds	r7, #24
 80533aa:	46bd      	mov	sp, r7
 80533ac:	bd80      	pop	{r7, pc}
 80533ae:	bf00      	nop
 80533b0:	20020078 	.word	0x20020078
 80533b4:	200237c0 	.word	0x200237c0

080533b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80533b8:	b580      	push	{r7, lr}
 80533ba:	b08a      	sub	sp, #40	; 0x28
 80533bc:	af04      	add	r7, sp, #16
 80533be:	60f8      	str	r0, [r7, #12]
 80533c0:	60b9      	str	r1, [r7, #8]
 80533c2:	607a      	str	r2, [r7, #4]
 80533c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80533c6:	68bb      	ldr	r3, [r7, #8]
 80533c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80533ca:	687b      	ldr	r3, [r7, #4]
 80533cc:	2b00      	cmp	r3, #0
 80533ce:	d009      	beq.n	80533e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80533d0:	68bb      	ldr	r3, [r7, #8]
 80533d2:	2b00      	cmp	r3, #0
 80533d4:	d003      	beq.n	80533de <ip4_output_if+0x26>
 80533d6:	68bb      	ldr	r3, [r7, #8]
 80533d8:	681b      	ldr	r3, [r3, #0]
 80533da:	2b00      	cmp	r3, #0
 80533dc:	d102      	bne.n	80533e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80533de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80533e0:	3304      	adds	r3, #4
 80533e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80533e4:	78fa      	ldrb	r2, [r7, #3]
 80533e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80533e8:	9302      	str	r3, [sp, #8]
 80533ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80533ee:	9301      	str	r3, [sp, #4]
 80533f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80533f4:	9300      	str	r3, [sp, #0]
 80533f6:	4613      	mov	r3, r2
 80533f8:	687a      	ldr	r2, [r7, #4]
 80533fa:	6979      	ldr	r1, [r7, #20]
 80533fc:	68f8      	ldr	r0, [r7, #12]
 80533fe:	f000 f805 	bl	805340c <ip4_output_if_src>
 8053402:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8053404:	4618      	mov	r0, r3
 8053406:	3718      	adds	r7, #24
 8053408:	46bd      	mov	sp, r7
 805340a:	bd80      	pop	{r7, pc}

0805340c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 805340c:	b580      	push	{r7, lr}
 805340e:	b088      	sub	sp, #32
 8053410:	af00      	add	r7, sp, #0
 8053412:	60f8      	str	r0, [r7, #12]
 8053414:	60b9      	str	r1, [r7, #8]
 8053416:	607a      	str	r2, [r7, #4]
 8053418:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 805341a:	68fb      	ldr	r3, [r7, #12]
 805341c:	7b9b      	ldrb	r3, [r3, #14]
 805341e:	2b01      	cmp	r3, #1
 8053420:	d006      	beq.n	8053430 <ip4_output_if_src+0x24>
 8053422:	4b4b      	ldr	r3, [pc, #300]	; (8053550 <ip4_output_if_src+0x144>)
 8053424:	f44f 7255 	mov.w	r2, #852	; 0x354
 8053428:	494a      	ldr	r1, [pc, #296]	; (8053554 <ip4_output_if_src+0x148>)
 805342a:	484b      	ldr	r0, [pc, #300]	; (8053558 <ip4_output_if_src+0x14c>)
 805342c:	f001 fa08 	bl	8054840 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8053430:	687b      	ldr	r3, [r7, #4]
 8053432:	2b00      	cmp	r3, #0
 8053434:	d060      	beq.n	80534f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8053436:	2314      	movs	r3, #20
 8053438:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 805343a:	2114      	movs	r1, #20
 805343c:	68f8      	ldr	r0, [r7, #12]
 805343e:	f7f8 fd63 	bl	804bf08 <pbuf_add_header>
 8053442:	4603      	mov	r3, r0
 8053444:	2b00      	cmp	r3, #0
 8053446:	d002      	beq.n	805344e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8053448:	f06f 0301 	mvn.w	r3, #1
 805344c:	e07c      	b.n	8053548 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 805344e:	68fb      	ldr	r3, [r7, #12]
 8053450:	685b      	ldr	r3, [r3, #4]
 8053452:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8053454:	68fb      	ldr	r3, [r7, #12]
 8053456:	895b      	ldrh	r3, [r3, #10]
 8053458:	2b13      	cmp	r3, #19
 805345a:	d806      	bhi.n	805346a <ip4_output_if_src+0x5e>
 805345c:	4b3c      	ldr	r3, [pc, #240]	; (8053550 <ip4_output_if_src+0x144>)
 805345e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8053462:	493e      	ldr	r1, [pc, #248]	; (805355c <ip4_output_if_src+0x150>)
 8053464:	483c      	ldr	r0, [pc, #240]	; (8053558 <ip4_output_if_src+0x14c>)
 8053466:	f001 f9eb 	bl	8054840 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 805346a:	69fb      	ldr	r3, [r7, #28]
 805346c:	78fa      	ldrb	r2, [r7, #3]
 805346e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8053470:	69fb      	ldr	r3, [r7, #28]
 8053472:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8053476:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8053478:	687b      	ldr	r3, [r7, #4]
 805347a:	681a      	ldr	r2, [r3, #0]
 805347c:	69fb      	ldr	r3, [r7, #28]
 805347e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8053480:	8b7b      	ldrh	r3, [r7, #26]
 8053482:	089b      	lsrs	r3, r3, #2
 8053484:	b29b      	uxth	r3, r3
 8053486:	b2db      	uxtb	r3, r3
 8053488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805348c:	b2da      	uxtb	r2, r3
 805348e:	69fb      	ldr	r3, [r7, #28]
 8053490:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8053492:	69fb      	ldr	r3, [r7, #28]
 8053494:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8053498:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 805349a:	68fb      	ldr	r3, [r7, #12]
 805349c:	891b      	ldrh	r3, [r3, #8]
 805349e:	4618      	mov	r0, r3
 80534a0:	f7f7 f9d6 	bl	804a850 <lwip_htons>
 80534a4:	4603      	mov	r3, r0
 80534a6:	461a      	mov	r2, r3
 80534a8:	69fb      	ldr	r3, [r7, #28]
 80534aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80534ac:	69fb      	ldr	r3, [r7, #28]
 80534ae:	2200      	movs	r2, #0
 80534b0:	719a      	strb	r2, [r3, #6]
 80534b2:	2200      	movs	r2, #0
 80534b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80534b6:	4b2a      	ldr	r3, [pc, #168]	; (8053560 <ip4_output_if_src+0x154>)
 80534b8:	881b      	ldrh	r3, [r3, #0]
 80534ba:	4618      	mov	r0, r3
 80534bc:	f7f7 f9c8 	bl	804a850 <lwip_htons>
 80534c0:	4603      	mov	r3, r0
 80534c2:	461a      	mov	r2, r3
 80534c4:	69fb      	ldr	r3, [r7, #28]
 80534c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80534c8:	4b25      	ldr	r3, [pc, #148]	; (8053560 <ip4_output_if_src+0x154>)
 80534ca:	881b      	ldrh	r3, [r3, #0]
 80534cc:	3301      	adds	r3, #1
 80534ce:	b29a      	uxth	r2, r3
 80534d0:	4b23      	ldr	r3, [pc, #140]	; (8053560 <ip4_output_if_src+0x154>)
 80534d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80534d4:	68bb      	ldr	r3, [r7, #8]
 80534d6:	2b00      	cmp	r3, #0
 80534d8:	d104      	bne.n	80534e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80534da:	4b22      	ldr	r3, [pc, #136]	; (8053564 <ip4_output_if_src+0x158>)
 80534dc:	681a      	ldr	r2, [r3, #0]
 80534de:	69fb      	ldr	r3, [r7, #28]
 80534e0:	60da      	str	r2, [r3, #12]
 80534e2:	e003      	b.n	80534ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80534e4:	68bb      	ldr	r3, [r7, #8]
 80534e6:	681a      	ldr	r2, [r3, #0]
 80534e8:	69fb      	ldr	r3, [r7, #28]
 80534ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80534ec:	69fb      	ldr	r3, [r7, #28]
 80534ee:	2200      	movs	r2, #0
 80534f0:	729a      	strb	r2, [r3, #10]
 80534f2:	2200      	movs	r2, #0
 80534f4:	72da      	strb	r2, [r3, #11]
 80534f6:	e00f      	b.n	8053518 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80534f8:	68fb      	ldr	r3, [r7, #12]
 80534fa:	895b      	ldrh	r3, [r3, #10]
 80534fc:	2b13      	cmp	r3, #19
 80534fe:	d802      	bhi.n	8053506 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8053500:	f06f 0301 	mvn.w	r3, #1
 8053504:	e020      	b.n	8053548 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8053506:	68fb      	ldr	r3, [r7, #12]
 8053508:	685b      	ldr	r3, [r3, #4]
 805350a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 805350c:	69fb      	ldr	r3, [r7, #28]
 805350e:	691b      	ldr	r3, [r3, #16]
 8053510:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8053512:	f107 0314 	add.w	r3, r7, #20
 8053516:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8053518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805351a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 805351c:	2b00      	cmp	r3, #0
 805351e:	d00c      	beq.n	805353a <ip4_output_if_src+0x12e>
 8053520:	68fb      	ldr	r3, [r7, #12]
 8053522:	891a      	ldrh	r2, [r3, #8]
 8053524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8053528:	429a      	cmp	r2, r3
 805352a:	d906      	bls.n	805353a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 805352c:	687a      	ldr	r2, [r7, #4]
 805352e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8053530:	68f8      	ldr	r0, [r7, #12]
 8053532:	f000 fd53 	bl	8053fdc <ip4_frag>
 8053536:	4603      	mov	r3, r0
 8053538:	e006      	b.n	8053548 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 805353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805353c:	695b      	ldr	r3, [r3, #20]
 805353e:	687a      	ldr	r2, [r7, #4]
 8053540:	68f9      	ldr	r1, [r7, #12]
 8053542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8053544:	4798      	blx	r3
 8053546:	4603      	mov	r3, r0
}
 8053548:	4618      	mov	r0, r3
 805354a:	3720      	adds	r7, #32
 805354c:	46bd      	mov	sp, r7
 805354e:	bd80      	pop	{r7, pc}
 8053550:	080580e8 	.word	0x080580e8
 8053554:	0805811c 	.word	0x0805811c
 8053558:	08058128 	.word	0x08058128
 805355c:	08058150 	.word	0x08058150
 8053560:	2002391e 	.word	0x2002391e
 8053564:	08058578 	.word	0x08058578

08053568 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8053568:	b480      	push	{r7}
 805356a:	b085      	sub	sp, #20
 805356c:	af00      	add	r7, sp, #0
 805356e:	6078      	str	r0, [r7, #4]
 8053570:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8053572:	687b      	ldr	r3, [r7, #4]
 8053574:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8053576:	687b      	ldr	r3, [r7, #4]
 8053578:	f1b3 3fff 	cmp.w	r3, #4294967295
 805357c:	d002      	beq.n	8053584 <ip4_addr_isbroadcast_u32+0x1c>
 805357e:	687b      	ldr	r3, [r7, #4]
 8053580:	2b00      	cmp	r3, #0
 8053582:	d101      	bne.n	8053588 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8053584:	2301      	movs	r3, #1
 8053586:	e02a      	b.n	80535de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8053588:	683b      	ldr	r3, [r7, #0]
 805358a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 805358e:	f003 0302 	and.w	r3, r3, #2
 8053592:	2b00      	cmp	r3, #0
 8053594:	d101      	bne.n	805359a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8053596:	2300      	movs	r3, #0
 8053598:	e021      	b.n	80535de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 805359a:	683b      	ldr	r3, [r7, #0]
 805359c:	3304      	adds	r3, #4
 805359e:	681b      	ldr	r3, [r3, #0]
 80535a0:	687a      	ldr	r2, [r7, #4]
 80535a2:	429a      	cmp	r2, r3
 80535a4:	d101      	bne.n	80535aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80535a6:	2300      	movs	r3, #0
 80535a8:	e019      	b.n	80535de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80535aa:	68fa      	ldr	r2, [r7, #12]
 80535ac:	683b      	ldr	r3, [r7, #0]
 80535ae:	3304      	adds	r3, #4
 80535b0:	681b      	ldr	r3, [r3, #0]
 80535b2:	405a      	eors	r2, r3
 80535b4:	683b      	ldr	r3, [r7, #0]
 80535b6:	3308      	adds	r3, #8
 80535b8:	681b      	ldr	r3, [r3, #0]
 80535ba:	4013      	ands	r3, r2
 80535bc:	2b00      	cmp	r3, #0
 80535be:	d10d      	bne.n	80535dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80535c0:	683b      	ldr	r3, [r7, #0]
 80535c2:	3308      	adds	r3, #8
 80535c4:	681b      	ldr	r3, [r3, #0]
 80535c6:	43da      	mvns	r2, r3
 80535c8:	687b      	ldr	r3, [r7, #4]
 80535ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80535cc:	683b      	ldr	r3, [r7, #0]
 80535ce:	3308      	adds	r3, #8
 80535d0:	681b      	ldr	r3, [r3, #0]
 80535d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80535d4:	429a      	cmp	r2, r3
 80535d6:	d101      	bne.n	80535dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80535d8:	2301      	movs	r3, #1
 80535da:	e000      	b.n	80535de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80535dc:	2300      	movs	r3, #0
  }
}
 80535de:	4618      	mov	r0, r3
 80535e0:	3714      	adds	r7, #20
 80535e2:	46bd      	mov	sp, r7
 80535e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80535e8:	4770      	bx	lr
	...

080535ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80535ec:	b580      	push	{r7, lr}
 80535ee:	b084      	sub	sp, #16
 80535f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80535f2:	2300      	movs	r3, #0
 80535f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80535f6:	4b12      	ldr	r3, [pc, #72]	; (8053640 <ip_reass_tmr+0x54>)
 80535f8:	681b      	ldr	r3, [r3, #0]
 80535fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80535fc:	e018      	b.n	8053630 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80535fe:	68fb      	ldr	r3, [r7, #12]
 8053600:	7fdb      	ldrb	r3, [r3, #31]
 8053602:	2b00      	cmp	r3, #0
 8053604:	d00b      	beq.n	805361e <ip_reass_tmr+0x32>
      r->timer--;
 8053606:	68fb      	ldr	r3, [r7, #12]
 8053608:	7fdb      	ldrb	r3, [r3, #31]
 805360a:	3b01      	subs	r3, #1
 805360c:	b2da      	uxtb	r2, r3
 805360e:	68fb      	ldr	r3, [r7, #12]
 8053610:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8053612:	68fb      	ldr	r3, [r7, #12]
 8053614:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8053616:	68fb      	ldr	r3, [r7, #12]
 8053618:	681b      	ldr	r3, [r3, #0]
 805361a:	60fb      	str	r3, [r7, #12]
 805361c:	e008      	b.n	8053630 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 805361e:	68fb      	ldr	r3, [r7, #12]
 8053620:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8053622:	68fb      	ldr	r3, [r7, #12]
 8053624:	681b      	ldr	r3, [r3, #0]
 8053626:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8053628:	68b9      	ldr	r1, [r7, #8]
 805362a:	6878      	ldr	r0, [r7, #4]
 805362c:	f000 f80a 	bl	8053644 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8053630:	68fb      	ldr	r3, [r7, #12]
 8053632:	2b00      	cmp	r3, #0
 8053634:	d1e3      	bne.n	80535fe <ip_reass_tmr+0x12>
    }
  }
}
 8053636:	bf00      	nop
 8053638:	bf00      	nop
 805363a:	3710      	adds	r7, #16
 805363c:	46bd      	mov	sp, r7
 805363e:	bd80      	pop	{r7, pc}
 8053640:	20023920 	.word	0x20023920

08053644 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8053644:	b580      	push	{r7, lr}
 8053646:	b088      	sub	sp, #32
 8053648:	af00      	add	r7, sp, #0
 805364a:	6078      	str	r0, [r7, #4]
 805364c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 805364e:	2300      	movs	r3, #0
 8053650:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8053652:	683a      	ldr	r2, [r7, #0]
 8053654:	687b      	ldr	r3, [r7, #4]
 8053656:	429a      	cmp	r2, r3
 8053658:	d105      	bne.n	8053666 <ip_reass_free_complete_datagram+0x22>
 805365a:	4b45      	ldr	r3, [pc, #276]	; (8053770 <ip_reass_free_complete_datagram+0x12c>)
 805365c:	22ab      	movs	r2, #171	; 0xab
 805365e:	4945      	ldr	r1, [pc, #276]	; (8053774 <ip_reass_free_complete_datagram+0x130>)
 8053660:	4845      	ldr	r0, [pc, #276]	; (8053778 <ip_reass_free_complete_datagram+0x134>)
 8053662:	f001 f8ed 	bl	8054840 <iprintf>
  if (prev != NULL) {
 8053666:	683b      	ldr	r3, [r7, #0]
 8053668:	2b00      	cmp	r3, #0
 805366a:	d00a      	beq.n	8053682 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 805366c:	683b      	ldr	r3, [r7, #0]
 805366e:	681b      	ldr	r3, [r3, #0]
 8053670:	687a      	ldr	r2, [r7, #4]
 8053672:	429a      	cmp	r2, r3
 8053674:	d005      	beq.n	8053682 <ip_reass_free_complete_datagram+0x3e>
 8053676:	4b3e      	ldr	r3, [pc, #248]	; (8053770 <ip_reass_free_complete_datagram+0x12c>)
 8053678:	22ad      	movs	r2, #173	; 0xad
 805367a:	4940      	ldr	r1, [pc, #256]	; (805377c <ip_reass_free_complete_datagram+0x138>)
 805367c:	483e      	ldr	r0, [pc, #248]	; (8053778 <ip_reass_free_complete_datagram+0x134>)
 805367e:	f001 f8df 	bl	8054840 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8053682:	687b      	ldr	r3, [r7, #4]
 8053684:	685b      	ldr	r3, [r3, #4]
 8053686:	685b      	ldr	r3, [r3, #4]
 8053688:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 805368a:	697b      	ldr	r3, [r7, #20]
 805368c:	889b      	ldrh	r3, [r3, #4]
 805368e:	b29b      	uxth	r3, r3
 8053690:	2b00      	cmp	r3, #0
 8053692:	d12a      	bne.n	80536ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8053694:	687b      	ldr	r3, [r7, #4]
 8053696:	685b      	ldr	r3, [r3, #4]
 8053698:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 805369a:	697b      	ldr	r3, [r7, #20]
 805369c:	681a      	ldr	r2, [r3, #0]
 805369e:	687b      	ldr	r3, [r7, #4]
 80536a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80536a2:	69bb      	ldr	r3, [r7, #24]
 80536a4:	6858      	ldr	r0, [r3, #4]
 80536a6:	687b      	ldr	r3, [r7, #4]
 80536a8:	3308      	adds	r3, #8
 80536aa:	2214      	movs	r2, #20
 80536ac:	4619      	mov	r1, r3
 80536ae:	f001 fae8 	bl	8054c82 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80536b2:	2101      	movs	r1, #1
 80536b4:	69b8      	ldr	r0, [r7, #24]
 80536b6:	f7ff fc47 	bl	8052f48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80536ba:	69b8      	ldr	r0, [r7, #24]
 80536bc:	f7f8 fd48 	bl	804c150 <pbuf_clen>
 80536c0:	4603      	mov	r3, r0
 80536c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80536c4:	8bfa      	ldrh	r2, [r7, #30]
 80536c6:	8a7b      	ldrh	r3, [r7, #18]
 80536c8:	4413      	add	r3, r2
 80536ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80536ce:	db05      	blt.n	80536dc <ip_reass_free_complete_datagram+0x98>
 80536d0:	4b27      	ldr	r3, [pc, #156]	; (8053770 <ip_reass_free_complete_datagram+0x12c>)
 80536d2:	22bc      	movs	r2, #188	; 0xbc
 80536d4:	492a      	ldr	r1, [pc, #168]	; (8053780 <ip_reass_free_complete_datagram+0x13c>)
 80536d6:	4828      	ldr	r0, [pc, #160]	; (8053778 <ip_reass_free_complete_datagram+0x134>)
 80536d8:	f001 f8b2 	bl	8054840 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80536dc:	8bfa      	ldrh	r2, [r7, #30]
 80536de:	8a7b      	ldrh	r3, [r7, #18]
 80536e0:	4413      	add	r3, r2
 80536e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80536e4:	69b8      	ldr	r0, [r7, #24]
 80536e6:	f7f8 fca5 	bl	804c034 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80536ea:	687b      	ldr	r3, [r7, #4]
 80536ec:	685b      	ldr	r3, [r3, #4]
 80536ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80536f0:	e01f      	b.n	8053732 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80536f2:	69bb      	ldr	r3, [r7, #24]
 80536f4:	685b      	ldr	r3, [r3, #4]
 80536f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80536f8:	69bb      	ldr	r3, [r7, #24]
 80536fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80536fc:	697b      	ldr	r3, [r7, #20]
 80536fe:	681b      	ldr	r3, [r3, #0]
 8053700:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8053702:	68f8      	ldr	r0, [r7, #12]
 8053704:	f7f8 fd24 	bl	804c150 <pbuf_clen>
 8053708:	4603      	mov	r3, r0
 805370a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 805370c:	8bfa      	ldrh	r2, [r7, #30]
 805370e:	8a7b      	ldrh	r3, [r7, #18]
 8053710:	4413      	add	r3, r2
 8053712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8053716:	db05      	blt.n	8053724 <ip_reass_free_complete_datagram+0xe0>
 8053718:	4b15      	ldr	r3, [pc, #84]	; (8053770 <ip_reass_free_complete_datagram+0x12c>)
 805371a:	22cc      	movs	r2, #204	; 0xcc
 805371c:	4918      	ldr	r1, [pc, #96]	; (8053780 <ip_reass_free_complete_datagram+0x13c>)
 805371e:	4816      	ldr	r0, [pc, #88]	; (8053778 <ip_reass_free_complete_datagram+0x134>)
 8053720:	f001 f88e 	bl	8054840 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8053724:	8bfa      	ldrh	r2, [r7, #30]
 8053726:	8a7b      	ldrh	r3, [r7, #18]
 8053728:	4413      	add	r3, r2
 805372a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 805372c:	68f8      	ldr	r0, [r7, #12]
 805372e:	f7f8 fc81 	bl	804c034 <pbuf_free>
  while (p != NULL) {
 8053732:	69bb      	ldr	r3, [r7, #24]
 8053734:	2b00      	cmp	r3, #0
 8053736:	d1dc      	bne.n	80536f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8053738:	6839      	ldr	r1, [r7, #0]
 805373a:	6878      	ldr	r0, [r7, #4]
 805373c:	f000 f8c2 	bl	80538c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8053740:	4b10      	ldr	r3, [pc, #64]	; (8053784 <ip_reass_free_complete_datagram+0x140>)
 8053742:	881b      	ldrh	r3, [r3, #0]
 8053744:	8bfa      	ldrh	r2, [r7, #30]
 8053746:	429a      	cmp	r2, r3
 8053748:	d905      	bls.n	8053756 <ip_reass_free_complete_datagram+0x112>
 805374a:	4b09      	ldr	r3, [pc, #36]	; (8053770 <ip_reass_free_complete_datagram+0x12c>)
 805374c:	22d2      	movs	r2, #210	; 0xd2
 805374e:	490e      	ldr	r1, [pc, #56]	; (8053788 <ip_reass_free_complete_datagram+0x144>)
 8053750:	4809      	ldr	r0, [pc, #36]	; (8053778 <ip_reass_free_complete_datagram+0x134>)
 8053752:	f001 f875 	bl	8054840 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8053756:	4b0b      	ldr	r3, [pc, #44]	; (8053784 <ip_reass_free_complete_datagram+0x140>)
 8053758:	881a      	ldrh	r2, [r3, #0]
 805375a:	8bfb      	ldrh	r3, [r7, #30]
 805375c:	1ad3      	subs	r3, r2, r3
 805375e:	b29a      	uxth	r2, r3
 8053760:	4b08      	ldr	r3, [pc, #32]	; (8053784 <ip_reass_free_complete_datagram+0x140>)
 8053762:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8053764:	8bfb      	ldrh	r3, [r7, #30]
}
 8053766:	4618      	mov	r0, r3
 8053768:	3720      	adds	r7, #32
 805376a:	46bd      	mov	sp, r7
 805376c:	bd80      	pop	{r7, pc}
 805376e:	bf00      	nop
 8053770:	08058180 	.word	0x08058180
 8053774:	080581bc 	.word	0x080581bc
 8053778:	080581c8 	.word	0x080581c8
 805377c:	080581f0 	.word	0x080581f0
 8053780:	08058204 	.word	0x08058204
 8053784:	20023924 	.word	0x20023924
 8053788:	08058224 	.word	0x08058224

0805378c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 805378c:	b580      	push	{r7, lr}
 805378e:	b08a      	sub	sp, #40	; 0x28
 8053790:	af00      	add	r7, sp, #0
 8053792:	6078      	str	r0, [r7, #4]
 8053794:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8053796:	2300      	movs	r3, #0
 8053798:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 805379a:	2300      	movs	r3, #0
 805379c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 805379e:	2300      	movs	r3, #0
 80537a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80537a2:	2300      	movs	r3, #0
 80537a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80537a6:	2300      	movs	r3, #0
 80537a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80537aa:	4b28      	ldr	r3, [pc, #160]	; (805384c <ip_reass_remove_oldest_datagram+0xc0>)
 80537ac:	681b      	ldr	r3, [r3, #0]
 80537ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80537b0:	e030      	b.n	8053814 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80537b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80537b4:	695a      	ldr	r2, [r3, #20]
 80537b6:	687b      	ldr	r3, [r7, #4]
 80537b8:	68db      	ldr	r3, [r3, #12]
 80537ba:	429a      	cmp	r2, r3
 80537bc:	d10c      	bne.n	80537d8 <ip_reass_remove_oldest_datagram+0x4c>
 80537be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80537c0:	699a      	ldr	r2, [r3, #24]
 80537c2:	687b      	ldr	r3, [r7, #4]
 80537c4:	691b      	ldr	r3, [r3, #16]
 80537c6:	429a      	cmp	r2, r3
 80537c8:	d106      	bne.n	80537d8 <ip_reass_remove_oldest_datagram+0x4c>
 80537ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80537cc:	899a      	ldrh	r2, [r3, #12]
 80537ce:	687b      	ldr	r3, [r7, #4]
 80537d0:	889b      	ldrh	r3, [r3, #4]
 80537d2:	b29b      	uxth	r3, r3
 80537d4:	429a      	cmp	r2, r3
 80537d6:	d014      	beq.n	8053802 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80537d8:	693b      	ldr	r3, [r7, #16]
 80537da:	3301      	adds	r3, #1
 80537dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80537de:	6a3b      	ldr	r3, [r7, #32]
 80537e0:	2b00      	cmp	r3, #0
 80537e2:	d104      	bne.n	80537ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80537e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80537e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80537e8:	69fb      	ldr	r3, [r7, #28]
 80537ea:	61bb      	str	r3, [r7, #24]
 80537ec:	e009      	b.n	8053802 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80537ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80537f0:	7fda      	ldrb	r2, [r3, #31]
 80537f2:	6a3b      	ldr	r3, [r7, #32]
 80537f4:	7fdb      	ldrb	r3, [r3, #31]
 80537f6:	429a      	cmp	r2, r3
 80537f8:	d803      	bhi.n	8053802 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80537fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80537fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80537fe:	69fb      	ldr	r3, [r7, #28]
 8053800:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8053802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053804:	681b      	ldr	r3, [r3, #0]
 8053806:	2b00      	cmp	r3, #0
 8053808:	d001      	beq.n	805380e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 805380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805380c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 805380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053810:	681b      	ldr	r3, [r3, #0]
 8053812:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8053814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053816:	2b00      	cmp	r3, #0
 8053818:	d1cb      	bne.n	80537b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 805381a:	6a3b      	ldr	r3, [r7, #32]
 805381c:	2b00      	cmp	r3, #0
 805381e:	d008      	beq.n	8053832 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8053820:	69b9      	ldr	r1, [r7, #24]
 8053822:	6a38      	ldr	r0, [r7, #32]
 8053824:	f7ff ff0e 	bl	8053644 <ip_reass_free_complete_datagram>
 8053828:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 805382a:	697a      	ldr	r2, [r7, #20]
 805382c:	68fb      	ldr	r3, [r7, #12]
 805382e:	4413      	add	r3, r2
 8053830:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8053832:	697a      	ldr	r2, [r7, #20]
 8053834:	683b      	ldr	r3, [r7, #0]
 8053836:	429a      	cmp	r2, r3
 8053838:	da02      	bge.n	8053840 <ip_reass_remove_oldest_datagram+0xb4>
 805383a:	693b      	ldr	r3, [r7, #16]
 805383c:	2b01      	cmp	r3, #1
 805383e:	dcac      	bgt.n	805379a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8053840:	697b      	ldr	r3, [r7, #20]
}
 8053842:	4618      	mov	r0, r3
 8053844:	3728      	adds	r7, #40	; 0x28
 8053846:	46bd      	mov	sp, r7
 8053848:	bd80      	pop	{r7, pc}
 805384a:	bf00      	nop
 805384c:	20023920 	.word	0x20023920

08053850 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8053850:	b580      	push	{r7, lr}
 8053852:	b084      	sub	sp, #16
 8053854:	af00      	add	r7, sp, #0
 8053856:	6078      	str	r0, [r7, #4]
 8053858:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 805385a:	2004      	movs	r0, #4
 805385c:	f7f7 fcd0 	bl	804b200 <memp_malloc>
 8053860:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8053862:	68fb      	ldr	r3, [r7, #12]
 8053864:	2b00      	cmp	r3, #0
 8053866:	d110      	bne.n	805388a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8053868:	6839      	ldr	r1, [r7, #0]
 805386a:	6878      	ldr	r0, [r7, #4]
 805386c:	f7ff ff8e 	bl	805378c <ip_reass_remove_oldest_datagram>
 8053870:	4602      	mov	r2, r0
 8053872:	683b      	ldr	r3, [r7, #0]
 8053874:	4293      	cmp	r3, r2
 8053876:	dc03      	bgt.n	8053880 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8053878:	2004      	movs	r0, #4
 805387a:	f7f7 fcc1 	bl	804b200 <memp_malloc>
 805387e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8053880:	68fb      	ldr	r3, [r7, #12]
 8053882:	2b00      	cmp	r3, #0
 8053884:	d101      	bne.n	805388a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8053886:	2300      	movs	r3, #0
 8053888:	e016      	b.n	80538b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 805388a:	2220      	movs	r2, #32
 805388c:	2100      	movs	r1, #0
 805388e:	68f8      	ldr	r0, [r7, #12]
 8053890:	f001 f92c 	bl	8054aec <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8053894:	68fb      	ldr	r3, [r7, #12]
 8053896:	220f      	movs	r2, #15
 8053898:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 805389a:	4b09      	ldr	r3, [pc, #36]	; (80538c0 <ip_reass_enqueue_new_datagram+0x70>)
 805389c:	681a      	ldr	r2, [r3, #0]
 805389e:	68fb      	ldr	r3, [r7, #12]
 80538a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80538a2:	4a07      	ldr	r2, [pc, #28]	; (80538c0 <ip_reass_enqueue_new_datagram+0x70>)
 80538a4:	68fb      	ldr	r3, [r7, #12]
 80538a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80538a8:	68fb      	ldr	r3, [r7, #12]
 80538aa:	3308      	adds	r3, #8
 80538ac:	2214      	movs	r2, #20
 80538ae:	6879      	ldr	r1, [r7, #4]
 80538b0:	4618      	mov	r0, r3
 80538b2:	f001 f9e6 	bl	8054c82 <memcpy>
  return ipr;
 80538b6:	68fb      	ldr	r3, [r7, #12]
}
 80538b8:	4618      	mov	r0, r3
 80538ba:	3710      	adds	r7, #16
 80538bc:	46bd      	mov	sp, r7
 80538be:	bd80      	pop	{r7, pc}
 80538c0:	20023920 	.word	0x20023920

080538c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80538c4:	b580      	push	{r7, lr}
 80538c6:	b082      	sub	sp, #8
 80538c8:	af00      	add	r7, sp, #0
 80538ca:	6078      	str	r0, [r7, #4]
 80538cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80538ce:	4b10      	ldr	r3, [pc, #64]	; (8053910 <ip_reass_dequeue_datagram+0x4c>)
 80538d0:	681b      	ldr	r3, [r3, #0]
 80538d2:	687a      	ldr	r2, [r7, #4]
 80538d4:	429a      	cmp	r2, r3
 80538d6:	d104      	bne.n	80538e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80538d8:	687b      	ldr	r3, [r7, #4]
 80538da:	681b      	ldr	r3, [r3, #0]
 80538dc:	4a0c      	ldr	r2, [pc, #48]	; (8053910 <ip_reass_dequeue_datagram+0x4c>)
 80538de:	6013      	str	r3, [r2, #0]
 80538e0:	e00d      	b.n	80538fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80538e2:	683b      	ldr	r3, [r7, #0]
 80538e4:	2b00      	cmp	r3, #0
 80538e6:	d106      	bne.n	80538f6 <ip_reass_dequeue_datagram+0x32>
 80538e8:	4b0a      	ldr	r3, [pc, #40]	; (8053914 <ip_reass_dequeue_datagram+0x50>)
 80538ea:	f240 1245 	movw	r2, #325	; 0x145
 80538ee:	490a      	ldr	r1, [pc, #40]	; (8053918 <ip_reass_dequeue_datagram+0x54>)
 80538f0:	480a      	ldr	r0, [pc, #40]	; (805391c <ip_reass_dequeue_datagram+0x58>)
 80538f2:	f000 ffa5 	bl	8054840 <iprintf>
    prev->next = ipr->next;
 80538f6:	687b      	ldr	r3, [r7, #4]
 80538f8:	681a      	ldr	r2, [r3, #0]
 80538fa:	683b      	ldr	r3, [r7, #0]
 80538fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80538fe:	6879      	ldr	r1, [r7, #4]
 8053900:	2004      	movs	r0, #4
 8053902:	f7f7 fcf3 	bl	804b2ec <memp_free>
}
 8053906:	bf00      	nop
 8053908:	3708      	adds	r7, #8
 805390a:	46bd      	mov	sp, r7
 805390c:	bd80      	pop	{r7, pc}
 805390e:	bf00      	nop
 8053910:	20023920 	.word	0x20023920
 8053914:	08058180 	.word	0x08058180
 8053918:	08058248 	.word	0x08058248
 805391c:	080581c8 	.word	0x080581c8

08053920 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8053920:	b580      	push	{r7, lr}
 8053922:	b08c      	sub	sp, #48	; 0x30
 8053924:	af00      	add	r7, sp, #0
 8053926:	60f8      	str	r0, [r7, #12]
 8053928:	60b9      	str	r1, [r7, #8]
 805392a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 805392c:	2300      	movs	r3, #0
 805392e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8053930:	2301      	movs	r3, #1
 8053932:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8053934:	68bb      	ldr	r3, [r7, #8]
 8053936:	685b      	ldr	r3, [r3, #4]
 8053938:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 805393a:	69fb      	ldr	r3, [r7, #28]
 805393c:	885b      	ldrh	r3, [r3, #2]
 805393e:	b29b      	uxth	r3, r3
 8053940:	4618      	mov	r0, r3
 8053942:	f7f6 ff85 	bl	804a850 <lwip_htons>
 8053946:	4603      	mov	r3, r0
 8053948:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 805394a:	69fb      	ldr	r3, [r7, #28]
 805394c:	781b      	ldrb	r3, [r3, #0]
 805394e:	f003 030f 	and.w	r3, r3, #15
 8053952:	b2db      	uxtb	r3, r3
 8053954:	009b      	lsls	r3, r3, #2
 8053956:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8053958:	7e7b      	ldrb	r3, [r7, #25]
 805395a:	b29b      	uxth	r3, r3
 805395c:	8b7a      	ldrh	r2, [r7, #26]
 805395e:	429a      	cmp	r2, r3
 8053960:	d202      	bcs.n	8053968 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8053962:	f04f 33ff 	mov.w	r3, #4294967295
 8053966:	e135      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8053968:	7e7b      	ldrb	r3, [r7, #25]
 805396a:	b29b      	uxth	r3, r3
 805396c:	8b7a      	ldrh	r2, [r7, #26]
 805396e:	1ad3      	subs	r3, r2, r3
 8053970:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8053972:	69fb      	ldr	r3, [r7, #28]
 8053974:	88db      	ldrh	r3, [r3, #6]
 8053976:	b29b      	uxth	r3, r3
 8053978:	4618      	mov	r0, r3
 805397a:	f7f6 ff69 	bl	804a850 <lwip_htons>
 805397e:	4603      	mov	r3, r0
 8053980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8053984:	b29b      	uxth	r3, r3
 8053986:	00db      	lsls	r3, r3, #3
 8053988:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 805398a:	68bb      	ldr	r3, [r7, #8]
 805398c:	685b      	ldr	r3, [r3, #4]
 805398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8053990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053992:	2200      	movs	r2, #0
 8053994:	701a      	strb	r2, [r3, #0]
 8053996:	2200      	movs	r2, #0
 8053998:	705a      	strb	r2, [r3, #1]
 805399a:	2200      	movs	r2, #0
 805399c:	709a      	strb	r2, [r3, #2]
 805399e:	2200      	movs	r2, #0
 80539a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80539a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80539a4:	8afa      	ldrh	r2, [r7, #22]
 80539a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80539a8:	8afa      	ldrh	r2, [r7, #22]
 80539aa:	8b7b      	ldrh	r3, [r7, #26]
 80539ac:	4413      	add	r3, r2
 80539ae:	b29a      	uxth	r2, r3
 80539b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80539b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80539b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80539b6:	88db      	ldrh	r3, [r3, #6]
 80539b8:	b29b      	uxth	r3, r3
 80539ba:	8afa      	ldrh	r2, [r7, #22]
 80539bc:	429a      	cmp	r2, r3
 80539be:	d902      	bls.n	80539c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80539c0:	f04f 33ff 	mov.w	r3, #4294967295
 80539c4:	e106      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80539c6:	68fb      	ldr	r3, [r7, #12]
 80539c8:	685b      	ldr	r3, [r3, #4]
 80539ca:	627b      	str	r3, [r7, #36]	; 0x24
 80539cc:	e068      	b.n	8053aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80539ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80539d0:	685b      	ldr	r3, [r3, #4]
 80539d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80539d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80539d6:	889b      	ldrh	r3, [r3, #4]
 80539d8:	b29a      	uxth	r2, r3
 80539da:	693b      	ldr	r3, [r7, #16]
 80539dc:	889b      	ldrh	r3, [r3, #4]
 80539de:	b29b      	uxth	r3, r3
 80539e0:	429a      	cmp	r2, r3
 80539e2:	d235      	bcs.n	8053a50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80539e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80539e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80539e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80539ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80539ec:	2b00      	cmp	r3, #0
 80539ee:	d020      	beq.n	8053a32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80539f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80539f2:	889b      	ldrh	r3, [r3, #4]
 80539f4:	b29a      	uxth	r2, r3
 80539f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80539f8:	88db      	ldrh	r3, [r3, #6]
 80539fa:	b29b      	uxth	r3, r3
 80539fc:	429a      	cmp	r2, r3
 80539fe:	d307      	bcc.n	8053a10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8053a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053a02:	88db      	ldrh	r3, [r3, #6]
 8053a04:	b29a      	uxth	r2, r3
 8053a06:	693b      	ldr	r3, [r7, #16]
 8053a08:	889b      	ldrh	r3, [r3, #4]
 8053a0a:	b29b      	uxth	r3, r3
 8053a0c:	429a      	cmp	r2, r3
 8053a0e:	d902      	bls.n	8053a16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8053a10:	f04f 33ff 	mov.w	r3, #4294967295
 8053a14:	e0de      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8053a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053a18:	68ba      	ldr	r2, [r7, #8]
 8053a1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8053a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053a1e:	88db      	ldrh	r3, [r3, #6]
 8053a20:	b29a      	uxth	r2, r3
 8053a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053a24:	889b      	ldrh	r3, [r3, #4]
 8053a26:	b29b      	uxth	r3, r3
 8053a28:	429a      	cmp	r2, r3
 8053a2a:	d03d      	beq.n	8053aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8053a2c:	2300      	movs	r3, #0
 8053a2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8053a30:	e03a      	b.n	8053aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8053a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053a34:	88db      	ldrh	r3, [r3, #6]
 8053a36:	b29a      	uxth	r2, r3
 8053a38:	693b      	ldr	r3, [r7, #16]
 8053a3a:	889b      	ldrh	r3, [r3, #4]
 8053a3c:	b29b      	uxth	r3, r3
 8053a3e:	429a      	cmp	r2, r3
 8053a40:	d902      	bls.n	8053a48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8053a42:	f04f 33ff 	mov.w	r3, #4294967295
 8053a46:	e0c5      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8053a48:	68fb      	ldr	r3, [r7, #12]
 8053a4a:	68ba      	ldr	r2, [r7, #8]
 8053a4c:	605a      	str	r2, [r3, #4]
      break;
 8053a4e:	e02b      	b.n	8053aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8053a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053a52:	889b      	ldrh	r3, [r3, #4]
 8053a54:	b29a      	uxth	r2, r3
 8053a56:	693b      	ldr	r3, [r7, #16]
 8053a58:	889b      	ldrh	r3, [r3, #4]
 8053a5a:	b29b      	uxth	r3, r3
 8053a5c:	429a      	cmp	r2, r3
 8053a5e:	d102      	bne.n	8053a66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8053a60:	f04f 33ff 	mov.w	r3, #4294967295
 8053a64:	e0b6      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8053a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053a68:	889b      	ldrh	r3, [r3, #4]
 8053a6a:	b29a      	uxth	r2, r3
 8053a6c:	693b      	ldr	r3, [r7, #16]
 8053a6e:	88db      	ldrh	r3, [r3, #6]
 8053a70:	b29b      	uxth	r3, r3
 8053a72:	429a      	cmp	r2, r3
 8053a74:	d202      	bcs.n	8053a7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8053a76:	f04f 33ff 	mov.w	r3, #4294967295
 8053a7a:	e0ab      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8053a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053a7e:	2b00      	cmp	r3, #0
 8053a80:	d009      	beq.n	8053a96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8053a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053a84:	88db      	ldrh	r3, [r3, #6]
 8053a86:	b29a      	uxth	r2, r3
 8053a88:	693b      	ldr	r3, [r7, #16]
 8053a8a:	889b      	ldrh	r3, [r3, #4]
 8053a8c:	b29b      	uxth	r3, r3
 8053a8e:	429a      	cmp	r2, r3
 8053a90:	d001      	beq.n	8053a96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8053a92:	2300      	movs	r3, #0
 8053a94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8053a96:	693b      	ldr	r3, [r7, #16]
 8053a98:	681b      	ldr	r3, [r3, #0]
 8053a9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8053a9c:	693b      	ldr	r3, [r7, #16]
 8053a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8053aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053aa2:	2b00      	cmp	r3, #0
 8053aa4:	d193      	bne.n	80539ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8053aa6:	e000      	b.n	8053aaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8053aa8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8053aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053aac:	2b00      	cmp	r3, #0
 8053aae:	d12d      	bne.n	8053b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8053ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053ab2:	2b00      	cmp	r3, #0
 8053ab4:	d01c      	beq.n	8053af0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8053ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053ab8:	88db      	ldrh	r3, [r3, #6]
 8053aba:	b29a      	uxth	r2, r3
 8053abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053abe:	889b      	ldrh	r3, [r3, #4]
 8053ac0:	b29b      	uxth	r3, r3
 8053ac2:	429a      	cmp	r2, r3
 8053ac4:	d906      	bls.n	8053ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8053ac6:	4b45      	ldr	r3, [pc, #276]	; (8053bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8053ac8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8053acc:	4944      	ldr	r1, [pc, #272]	; (8053be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8053ace:	4845      	ldr	r0, [pc, #276]	; (8053be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8053ad0:	f000 feb6 	bl	8054840 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8053ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053ad6:	68ba      	ldr	r2, [r7, #8]
 8053ad8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8053ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053adc:	88db      	ldrh	r3, [r3, #6]
 8053ade:	b29a      	uxth	r2, r3
 8053ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053ae2:	889b      	ldrh	r3, [r3, #4]
 8053ae4:	b29b      	uxth	r3, r3
 8053ae6:	429a      	cmp	r2, r3
 8053ae8:	d010      	beq.n	8053b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8053aea:	2300      	movs	r3, #0
 8053aec:	623b      	str	r3, [r7, #32]
 8053aee:	e00d      	b.n	8053b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8053af0:	68fb      	ldr	r3, [r7, #12]
 8053af2:	685b      	ldr	r3, [r3, #4]
 8053af4:	2b00      	cmp	r3, #0
 8053af6:	d006      	beq.n	8053b06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8053af8:	4b38      	ldr	r3, [pc, #224]	; (8053bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8053afa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8053afe:	493a      	ldr	r1, [pc, #232]	; (8053be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8053b00:	4838      	ldr	r0, [pc, #224]	; (8053be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8053b02:	f000 fe9d 	bl	8054840 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8053b06:	68fb      	ldr	r3, [r7, #12]
 8053b08:	68ba      	ldr	r2, [r7, #8]
 8053b0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8053b0c:	687b      	ldr	r3, [r7, #4]
 8053b0e:	2b00      	cmp	r3, #0
 8053b10:	d105      	bne.n	8053b1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8053b12:	68fb      	ldr	r3, [r7, #12]
 8053b14:	7f9b      	ldrb	r3, [r3, #30]
 8053b16:	f003 0301 	and.w	r3, r3, #1
 8053b1a:	2b00      	cmp	r3, #0
 8053b1c:	d059      	beq.n	8053bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8053b1e:	6a3b      	ldr	r3, [r7, #32]
 8053b20:	2b00      	cmp	r3, #0
 8053b22:	d04f      	beq.n	8053bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8053b24:	68fb      	ldr	r3, [r7, #12]
 8053b26:	685b      	ldr	r3, [r3, #4]
 8053b28:	2b00      	cmp	r3, #0
 8053b2a:	d006      	beq.n	8053b3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8053b2c:	68fb      	ldr	r3, [r7, #12]
 8053b2e:	685b      	ldr	r3, [r3, #4]
 8053b30:	685b      	ldr	r3, [r3, #4]
 8053b32:	889b      	ldrh	r3, [r3, #4]
 8053b34:	b29b      	uxth	r3, r3
 8053b36:	2b00      	cmp	r3, #0
 8053b38:	d002      	beq.n	8053b40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8053b3a:	2300      	movs	r3, #0
 8053b3c:	623b      	str	r3, [r7, #32]
 8053b3e:	e041      	b.n	8053bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8053b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053b42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8053b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053b46:	681b      	ldr	r3, [r3, #0]
 8053b48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8053b4a:	e012      	b.n	8053b72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8053b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053b4e:	685b      	ldr	r3, [r3, #4]
 8053b50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8053b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053b54:	88db      	ldrh	r3, [r3, #6]
 8053b56:	b29a      	uxth	r2, r3
 8053b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053b5a:	889b      	ldrh	r3, [r3, #4]
 8053b5c:	b29b      	uxth	r3, r3
 8053b5e:	429a      	cmp	r2, r3
 8053b60:	d002      	beq.n	8053b68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8053b62:	2300      	movs	r3, #0
 8053b64:	623b      	str	r3, [r7, #32]
            break;
 8053b66:	e007      	b.n	8053b78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8053b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053b6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8053b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053b6e:	681b      	ldr	r3, [r3, #0]
 8053b70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8053b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8053b74:	2b00      	cmp	r3, #0
 8053b76:	d1e9      	bne.n	8053b4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8053b78:	6a3b      	ldr	r3, [r7, #32]
 8053b7a:	2b00      	cmp	r3, #0
 8053b7c:	d022      	beq.n	8053bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8053b7e:	68fb      	ldr	r3, [r7, #12]
 8053b80:	685b      	ldr	r3, [r3, #4]
 8053b82:	2b00      	cmp	r3, #0
 8053b84:	d106      	bne.n	8053b94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8053b86:	4b15      	ldr	r3, [pc, #84]	; (8053bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8053b88:	f240 12df 	movw	r2, #479	; 0x1df
 8053b8c:	4917      	ldr	r1, [pc, #92]	; (8053bec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8053b8e:	4815      	ldr	r0, [pc, #84]	; (8053be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8053b90:	f000 fe56 	bl	8054840 <iprintf>
          LWIP_ASSERT("sanity check",
 8053b94:	68fb      	ldr	r3, [r7, #12]
 8053b96:	685b      	ldr	r3, [r3, #4]
 8053b98:	685b      	ldr	r3, [r3, #4]
 8053b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8053b9c:	429a      	cmp	r2, r3
 8053b9e:	d106      	bne.n	8053bae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8053ba0:	4b0e      	ldr	r3, [pc, #56]	; (8053bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8053ba2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8053ba6:	4911      	ldr	r1, [pc, #68]	; (8053bec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8053ba8:	480e      	ldr	r0, [pc, #56]	; (8053be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8053baa:	f000 fe49 	bl	8054840 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8053bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053bb0:	681b      	ldr	r3, [r3, #0]
 8053bb2:	2b00      	cmp	r3, #0
 8053bb4:	d006      	beq.n	8053bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8053bb6:	4b09      	ldr	r3, [pc, #36]	; (8053bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8053bb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8053bbc:	490c      	ldr	r1, [pc, #48]	; (8053bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8053bbe:	4809      	ldr	r0, [pc, #36]	; (8053be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8053bc0:	f000 fe3e 	bl	8054840 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8053bc4:	6a3b      	ldr	r3, [r7, #32]
 8053bc6:	2b00      	cmp	r3, #0
 8053bc8:	bf14      	ite	ne
 8053bca:	2301      	movne	r3, #1
 8053bcc:	2300      	moveq	r3, #0
 8053bce:	b2db      	uxtb	r3, r3
 8053bd0:	e000      	b.n	8053bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8053bd2:	2300      	movs	r3, #0
}
 8053bd4:	4618      	mov	r0, r3
 8053bd6:	3730      	adds	r7, #48	; 0x30
 8053bd8:	46bd      	mov	sp, r7
 8053bda:	bd80      	pop	{r7, pc}
 8053bdc:	08058180 	.word	0x08058180
 8053be0:	08058264 	.word	0x08058264
 8053be4:	080581c8 	.word	0x080581c8
 8053be8:	08058284 	.word	0x08058284
 8053bec:	080582bc 	.word	0x080582bc
 8053bf0:	080582cc 	.word	0x080582cc

08053bf4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8053bf4:	b580      	push	{r7, lr}
 8053bf6:	b08e      	sub	sp, #56	; 0x38
 8053bf8:	af00      	add	r7, sp, #0
 8053bfa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8053bfc:	687b      	ldr	r3, [r7, #4]
 8053bfe:	685b      	ldr	r3, [r3, #4]
 8053c00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8053c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053c04:	781b      	ldrb	r3, [r3, #0]
 8053c06:	f003 030f 	and.w	r3, r3, #15
 8053c0a:	b2db      	uxtb	r3, r3
 8053c0c:	009b      	lsls	r3, r3, #2
 8053c0e:	b2db      	uxtb	r3, r3
 8053c10:	2b14      	cmp	r3, #20
 8053c12:	f040 8171 	bne.w	8053ef8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8053c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053c18:	88db      	ldrh	r3, [r3, #6]
 8053c1a:	b29b      	uxth	r3, r3
 8053c1c:	4618      	mov	r0, r3
 8053c1e:	f7f6 fe17 	bl	804a850 <lwip_htons>
 8053c22:	4603      	mov	r3, r0
 8053c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8053c28:	b29b      	uxth	r3, r3
 8053c2a:	00db      	lsls	r3, r3, #3
 8053c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8053c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053c30:	885b      	ldrh	r3, [r3, #2]
 8053c32:	b29b      	uxth	r3, r3
 8053c34:	4618      	mov	r0, r3
 8053c36:	f7f6 fe0b 	bl	804a850 <lwip_htons>
 8053c3a:	4603      	mov	r3, r0
 8053c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8053c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053c40:	781b      	ldrb	r3, [r3, #0]
 8053c42:	f003 030f 	and.w	r3, r3, #15
 8053c46:	b2db      	uxtb	r3, r3
 8053c48:	009b      	lsls	r3, r3, #2
 8053c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8053c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8053c52:	b29b      	uxth	r3, r3
 8053c54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8053c56:	429a      	cmp	r2, r3
 8053c58:	f0c0 8150 	bcc.w	8053efc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8053c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8053c60:	b29b      	uxth	r3, r3
 8053c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8053c64:	1ad3      	subs	r3, r2, r3
 8053c66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8053c68:	6878      	ldr	r0, [r7, #4]
 8053c6a:	f7f8 fa71 	bl	804c150 <pbuf_clen>
 8053c6e:	4603      	mov	r3, r0
 8053c70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8053c72:	4b8c      	ldr	r3, [pc, #560]	; (8053ea4 <ip4_reass+0x2b0>)
 8053c74:	881b      	ldrh	r3, [r3, #0]
 8053c76:	461a      	mov	r2, r3
 8053c78:	8c3b      	ldrh	r3, [r7, #32]
 8053c7a:	4413      	add	r3, r2
 8053c7c:	2b0a      	cmp	r3, #10
 8053c7e:	dd10      	ble.n	8053ca2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8053c80:	8c3b      	ldrh	r3, [r7, #32]
 8053c82:	4619      	mov	r1, r3
 8053c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8053c86:	f7ff fd81 	bl	805378c <ip_reass_remove_oldest_datagram>
 8053c8a:	4603      	mov	r3, r0
 8053c8c:	2b00      	cmp	r3, #0
 8053c8e:	f000 8137 	beq.w	8053f00 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8053c92:	4b84      	ldr	r3, [pc, #528]	; (8053ea4 <ip4_reass+0x2b0>)
 8053c94:	881b      	ldrh	r3, [r3, #0]
 8053c96:	461a      	mov	r2, r3
 8053c98:	8c3b      	ldrh	r3, [r7, #32]
 8053c9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8053c9c:	2b0a      	cmp	r3, #10
 8053c9e:	f300 812f 	bgt.w	8053f00 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8053ca2:	4b81      	ldr	r3, [pc, #516]	; (8053ea8 <ip4_reass+0x2b4>)
 8053ca4:	681b      	ldr	r3, [r3, #0]
 8053ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8053ca8:	e015      	b.n	8053cd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8053caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053cac:	695a      	ldr	r2, [r3, #20]
 8053cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053cb0:	68db      	ldr	r3, [r3, #12]
 8053cb2:	429a      	cmp	r2, r3
 8053cb4:	d10c      	bne.n	8053cd0 <ip4_reass+0xdc>
 8053cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053cb8:	699a      	ldr	r2, [r3, #24]
 8053cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053cbc:	691b      	ldr	r3, [r3, #16]
 8053cbe:	429a      	cmp	r2, r3
 8053cc0:	d106      	bne.n	8053cd0 <ip4_reass+0xdc>
 8053cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053cc4:	899a      	ldrh	r2, [r3, #12]
 8053cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053cc8:	889b      	ldrh	r3, [r3, #4]
 8053cca:	b29b      	uxth	r3, r3
 8053ccc:	429a      	cmp	r2, r3
 8053cce:	d006      	beq.n	8053cde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8053cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053cd2:	681b      	ldr	r3, [r3, #0]
 8053cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8053cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053cd8:	2b00      	cmp	r3, #0
 8053cda:	d1e6      	bne.n	8053caa <ip4_reass+0xb6>
 8053cdc:	e000      	b.n	8053ce0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8053cde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8053ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053ce2:	2b00      	cmp	r3, #0
 8053ce4:	d109      	bne.n	8053cfa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8053ce6:	8c3b      	ldrh	r3, [r7, #32]
 8053ce8:	4619      	mov	r1, r3
 8053cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8053cec:	f7ff fdb0 	bl	8053850 <ip_reass_enqueue_new_datagram>
 8053cf0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8053cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053cf4:	2b00      	cmp	r3, #0
 8053cf6:	d11c      	bne.n	8053d32 <ip4_reass+0x13e>
      goto nullreturn;
 8053cf8:	e105      	b.n	8053f06 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8053cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053cfc:	88db      	ldrh	r3, [r3, #6]
 8053cfe:	b29b      	uxth	r3, r3
 8053d00:	4618      	mov	r0, r3
 8053d02:	f7f6 fda5 	bl	804a850 <lwip_htons>
 8053d06:	4603      	mov	r3, r0
 8053d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8053d0c:	2b00      	cmp	r3, #0
 8053d0e:	d110      	bne.n	8053d32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8053d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053d12:	89db      	ldrh	r3, [r3, #14]
 8053d14:	4618      	mov	r0, r3
 8053d16:	f7f6 fd9b 	bl	804a850 <lwip_htons>
 8053d1a:	4603      	mov	r3, r0
 8053d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8053d20:	2b00      	cmp	r3, #0
 8053d22:	d006      	beq.n	8053d32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8053d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053d26:	3308      	adds	r3, #8
 8053d28:	2214      	movs	r2, #20
 8053d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8053d2c:	4618      	mov	r0, r3
 8053d2e:	f000 ffa8 	bl	8054c82 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8053d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053d34:	88db      	ldrh	r3, [r3, #6]
 8053d36:	b29b      	uxth	r3, r3
 8053d38:	f003 0320 	and.w	r3, r3, #32
 8053d3c:	2b00      	cmp	r3, #0
 8053d3e:	bf0c      	ite	eq
 8053d40:	2301      	moveq	r3, #1
 8053d42:	2300      	movne	r3, #0
 8053d44:	b2db      	uxtb	r3, r3
 8053d46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8053d48:	69fb      	ldr	r3, [r7, #28]
 8053d4a:	2b00      	cmp	r3, #0
 8053d4c:	d00e      	beq.n	8053d6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8053d4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8053d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053d52:	4413      	add	r3, r2
 8053d54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8053d56:	8b7a      	ldrh	r2, [r7, #26]
 8053d58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8053d5a:	429a      	cmp	r2, r3
 8053d5c:	f0c0 80a0 	bcc.w	8053ea0 <ip4_reass+0x2ac>
 8053d60:	8b7b      	ldrh	r3, [r7, #26]
 8053d62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8053d66:	4293      	cmp	r3, r2
 8053d68:	f200 809a 	bhi.w	8053ea0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8053d6c:	69fa      	ldr	r2, [r7, #28]
 8053d6e:	6879      	ldr	r1, [r7, #4]
 8053d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8053d72:	f7ff fdd5 	bl	8053920 <ip_reass_chain_frag_into_datagram_and_validate>
 8053d76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8053d78:	697b      	ldr	r3, [r7, #20]
 8053d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8053d7e:	f000 809b 	beq.w	8053eb8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8053d82:	4b48      	ldr	r3, [pc, #288]	; (8053ea4 <ip4_reass+0x2b0>)
 8053d84:	881a      	ldrh	r2, [r3, #0]
 8053d86:	8c3b      	ldrh	r3, [r7, #32]
 8053d88:	4413      	add	r3, r2
 8053d8a:	b29a      	uxth	r2, r3
 8053d8c:	4b45      	ldr	r3, [pc, #276]	; (8053ea4 <ip4_reass+0x2b0>)
 8053d8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8053d90:	69fb      	ldr	r3, [r7, #28]
 8053d92:	2b00      	cmp	r3, #0
 8053d94:	d00d      	beq.n	8053db2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8053d96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8053d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053d9a:	4413      	add	r3, r2
 8053d9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8053d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053da0:	8a7a      	ldrh	r2, [r7, #18]
 8053da2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8053da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053da6:	7f9b      	ldrb	r3, [r3, #30]
 8053da8:	f043 0301 	orr.w	r3, r3, #1
 8053dac:	b2da      	uxtb	r2, r3
 8053dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053db0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8053db2:	697b      	ldr	r3, [r7, #20]
 8053db4:	2b01      	cmp	r3, #1
 8053db6:	d171      	bne.n	8053e9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8053db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053dba:	8b9b      	ldrh	r3, [r3, #28]
 8053dbc:	3314      	adds	r3, #20
 8053dbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8053dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053dc2:	685b      	ldr	r3, [r3, #4]
 8053dc4:	685b      	ldr	r3, [r3, #4]
 8053dc6:	681b      	ldr	r3, [r3, #0]
 8053dc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8053dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053dcc:	685b      	ldr	r3, [r3, #4]
 8053dce:	685b      	ldr	r3, [r3, #4]
 8053dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8053dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053dd4:	3308      	adds	r3, #8
 8053dd6:	2214      	movs	r2, #20
 8053dd8:	4619      	mov	r1, r3
 8053dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8053ddc:	f000 ff51 	bl	8054c82 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8053de0:	8a3b      	ldrh	r3, [r7, #16]
 8053de2:	4618      	mov	r0, r3
 8053de4:	f7f6 fd34 	bl	804a850 <lwip_htons>
 8053de8:	4603      	mov	r3, r0
 8053dea:	461a      	mov	r2, r3
 8053dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053dee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8053df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053df2:	2200      	movs	r2, #0
 8053df4:	719a      	strb	r2, [r3, #6]
 8053df6:	2200      	movs	r2, #0
 8053df8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8053dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8053dfc:	2200      	movs	r2, #0
 8053dfe:	729a      	strb	r2, [r3, #10]
 8053e00:	2200      	movs	r2, #0
 8053e02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8053e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053e06:	685b      	ldr	r3, [r3, #4]
 8053e08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8053e0a:	e00d      	b.n	8053e28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8053e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8053e0e:	685b      	ldr	r3, [r3, #4]
 8053e10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8053e12:	2114      	movs	r1, #20
 8053e14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8053e16:	f7f8 f887 	bl	804bf28 <pbuf_remove_header>
      pbuf_cat(p, r);
 8053e1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8053e1c:	6878      	ldr	r0, [r7, #4]
 8053e1e:	f7f8 f9d7 	bl	804c1d0 <pbuf_cat>
      r = iprh->next_pbuf;
 8053e22:	68fb      	ldr	r3, [r7, #12]
 8053e24:	681b      	ldr	r3, [r3, #0]
 8053e26:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8053e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8053e2a:	2b00      	cmp	r3, #0
 8053e2c:	d1ee      	bne.n	8053e0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8053e2e:	4b1e      	ldr	r3, [pc, #120]	; (8053ea8 <ip4_reass+0x2b4>)
 8053e30:	681b      	ldr	r3, [r3, #0]
 8053e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8053e34:	429a      	cmp	r2, r3
 8053e36:	d102      	bne.n	8053e3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8053e38:	2300      	movs	r3, #0
 8053e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8053e3c:	e010      	b.n	8053e60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8053e3e:	4b1a      	ldr	r3, [pc, #104]	; (8053ea8 <ip4_reass+0x2b4>)
 8053e40:	681b      	ldr	r3, [r3, #0]
 8053e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8053e44:	e007      	b.n	8053e56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8053e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053e48:	681b      	ldr	r3, [r3, #0]
 8053e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8053e4c:	429a      	cmp	r2, r3
 8053e4e:	d006      	beq.n	8053e5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8053e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053e52:	681b      	ldr	r3, [r3, #0]
 8053e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8053e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8053e58:	2b00      	cmp	r3, #0
 8053e5a:	d1f4      	bne.n	8053e46 <ip4_reass+0x252>
 8053e5c:	e000      	b.n	8053e60 <ip4_reass+0x26c>
          break;
 8053e5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8053e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8053e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8053e64:	f7ff fd2e 	bl	80538c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8053e68:	6878      	ldr	r0, [r7, #4]
 8053e6a:	f7f8 f971 	bl	804c150 <pbuf_clen>
 8053e6e:	4603      	mov	r3, r0
 8053e70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8053e72:	4b0c      	ldr	r3, [pc, #48]	; (8053ea4 <ip4_reass+0x2b0>)
 8053e74:	881b      	ldrh	r3, [r3, #0]
 8053e76:	8c3a      	ldrh	r2, [r7, #32]
 8053e78:	429a      	cmp	r2, r3
 8053e7a:	d906      	bls.n	8053e8a <ip4_reass+0x296>
 8053e7c:	4b0b      	ldr	r3, [pc, #44]	; (8053eac <ip4_reass+0x2b8>)
 8053e7e:	f240 229b 	movw	r2, #667	; 0x29b
 8053e82:	490b      	ldr	r1, [pc, #44]	; (8053eb0 <ip4_reass+0x2bc>)
 8053e84:	480b      	ldr	r0, [pc, #44]	; (8053eb4 <ip4_reass+0x2c0>)
 8053e86:	f000 fcdb 	bl	8054840 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8053e8a:	4b06      	ldr	r3, [pc, #24]	; (8053ea4 <ip4_reass+0x2b0>)
 8053e8c:	881a      	ldrh	r2, [r3, #0]
 8053e8e:	8c3b      	ldrh	r3, [r7, #32]
 8053e90:	1ad3      	subs	r3, r2, r3
 8053e92:	b29a      	uxth	r2, r3
 8053e94:	4b03      	ldr	r3, [pc, #12]	; (8053ea4 <ip4_reass+0x2b0>)
 8053e96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8053e98:	687b      	ldr	r3, [r7, #4]
 8053e9a:	e038      	b.n	8053f0e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8053e9c:	2300      	movs	r3, #0
 8053e9e:	e036      	b.n	8053f0e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8053ea0:	bf00      	nop
 8053ea2:	e00a      	b.n	8053eba <ip4_reass+0x2c6>
 8053ea4:	20023924 	.word	0x20023924
 8053ea8:	20023920 	.word	0x20023920
 8053eac:	08058180 	.word	0x08058180
 8053eb0:	080582f0 	.word	0x080582f0
 8053eb4:	080581c8 	.word	0x080581c8
    goto nullreturn_ipr;
 8053eb8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8053eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053ebc:	2b00      	cmp	r3, #0
 8053ebe:	d106      	bne.n	8053ece <ip4_reass+0x2da>
 8053ec0:	4b15      	ldr	r3, [pc, #84]	; (8053f18 <ip4_reass+0x324>)
 8053ec2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8053ec6:	4915      	ldr	r1, [pc, #84]	; (8053f1c <ip4_reass+0x328>)
 8053ec8:	4815      	ldr	r0, [pc, #84]	; (8053f20 <ip4_reass+0x32c>)
 8053eca:	f000 fcb9 	bl	8054840 <iprintf>
  if (ipr->p == NULL) {
 8053ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8053ed0:	685b      	ldr	r3, [r3, #4]
 8053ed2:	2b00      	cmp	r3, #0
 8053ed4:	d116      	bne.n	8053f04 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8053ed6:	4b13      	ldr	r3, [pc, #76]	; (8053f24 <ip4_reass+0x330>)
 8053ed8:	681b      	ldr	r3, [r3, #0]
 8053eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8053edc:	429a      	cmp	r2, r3
 8053ede:	d006      	beq.n	8053eee <ip4_reass+0x2fa>
 8053ee0:	4b0d      	ldr	r3, [pc, #52]	; (8053f18 <ip4_reass+0x324>)
 8053ee2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8053ee6:	4910      	ldr	r1, [pc, #64]	; (8053f28 <ip4_reass+0x334>)
 8053ee8:	480d      	ldr	r0, [pc, #52]	; (8053f20 <ip4_reass+0x32c>)
 8053eea:	f000 fca9 	bl	8054840 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8053eee:	2100      	movs	r1, #0
 8053ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8053ef2:	f7ff fce7 	bl	80538c4 <ip_reass_dequeue_datagram>
 8053ef6:	e006      	b.n	8053f06 <ip4_reass+0x312>
    goto nullreturn;
 8053ef8:	bf00      	nop
 8053efa:	e004      	b.n	8053f06 <ip4_reass+0x312>
    goto nullreturn;
 8053efc:	bf00      	nop
 8053efe:	e002      	b.n	8053f06 <ip4_reass+0x312>
      goto nullreturn;
 8053f00:	bf00      	nop
 8053f02:	e000      	b.n	8053f06 <ip4_reass+0x312>
  }

nullreturn:
 8053f04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8053f06:	6878      	ldr	r0, [r7, #4]
 8053f08:	f7f8 f894 	bl	804c034 <pbuf_free>
  return NULL;
 8053f0c:	2300      	movs	r3, #0
}
 8053f0e:	4618      	mov	r0, r3
 8053f10:	3738      	adds	r7, #56	; 0x38
 8053f12:	46bd      	mov	sp, r7
 8053f14:	bd80      	pop	{r7, pc}
 8053f16:	bf00      	nop
 8053f18:	08058180 	.word	0x08058180
 8053f1c:	0805830c 	.word	0x0805830c
 8053f20:	080581c8 	.word	0x080581c8
 8053f24:	20023920 	.word	0x20023920
 8053f28:	08058318 	.word	0x08058318

08053f2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8053f2c:	b580      	push	{r7, lr}
 8053f2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8053f30:	2005      	movs	r0, #5
 8053f32:	f7f7 f965 	bl	804b200 <memp_malloc>
 8053f36:	4603      	mov	r3, r0
}
 8053f38:	4618      	mov	r0, r3
 8053f3a:	bd80      	pop	{r7, pc}

08053f3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8053f3c:	b580      	push	{r7, lr}
 8053f3e:	b082      	sub	sp, #8
 8053f40:	af00      	add	r7, sp, #0
 8053f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8053f44:	687b      	ldr	r3, [r7, #4]
 8053f46:	2b00      	cmp	r3, #0
 8053f48:	d106      	bne.n	8053f58 <ip_frag_free_pbuf_custom_ref+0x1c>
 8053f4a:	4b07      	ldr	r3, [pc, #28]	; (8053f68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8053f4c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8053f50:	4906      	ldr	r1, [pc, #24]	; (8053f6c <ip_frag_free_pbuf_custom_ref+0x30>)
 8053f52:	4807      	ldr	r0, [pc, #28]	; (8053f70 <ip_frag_free_pbuf_custom_ref+0x34>)
 8053f54:	f000 fc74 	bl	8054840 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8053f58:	6879      	ldr	r1, [r7, #4]
 8053f5a:	2005      	movs	r0, #5
 8053f5c:	f7f7 f9c6 	bl	804b2ec <memp_free>
}
 8053f60:	bf00      	nop
 8053f62:	3708      	adds	r7, #8
 8053f64:	46bd      	mov	sp, r7
 8053f66:	bd80      	pop	{r7, pc}
 8053f68:	08058180 	.word	0x08058180
 8053f6c:	08058338 	.word	0x08058338
 8053f70:	080581c8 	.word	0x080581c8

08053f74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8053f74:	b580      	push	{r7, lr}
 8053f76:	b084      	sub	sp, #16
 8053f78:	af00      	add	r7, sp, #0
 8053f7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8053f7c:	687b      	ldr	r3, [r7, #4]
 8053f7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8053f80:	68fb      	ldr	r3, [r7, #12]
 8053f82:	2b00      	cmp	r3, #0
 8053f84:	d106      	bne.n	8053f94 <ipfrag_free_pbuf_custom+0x20>
 8053f86:	4b11      	ldr	r3, [pc, #68]	; (8053fcc <ipfrag_free_pbuf_custom+0x58>)
 8053f88:	f240 22ce 	movw	r2, #718	; 0x2ce
 8053f8c:	4910      	ldr	r1, [pc, #64]	; (8053fd0 <ipfrag_free_pbuf_custom+0x5c>)
 8053f8e:	4811      	ldr	r0, [pc, #68]	; (8053fd4 <ipfrag_free_pbuf_custom+0x60>)
 8053f90:	f000 fc56 	bl	8054840 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8053f94:	68fa      	ldr	r2, [r7, #12]
 8053f96:	687b      	ldr	r3, [r7, #4]
 8053f98:	429a      	cmp	r2, r3
 8053f9a:	d006      	beq.n	8053faa <ipfrag_free_pbuf_custom+0x36>
 8053f9c:	4b0b      	ldr	r3, [pc, #44]	; (8053fcc <ipfrag_free_pbuf_custom+0x58>)
 8053f9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8053fa2:	490d      	ldr	r1, [pc, #52]	; (8053fd8 <ipfrag_free_pbuf_custom+0x64>)
 8053fa4:	480b      	ldr	r0, [pc, #44]	; (8053fd4 <ipfrag_free_pbuf_custom+0x60>)
 8053fa6:	f000 fc4b 	bl	8054840 <iprintf>
  if (pcr->original != NULL) {
 8053faa:	68fb      	ldr	r3, [r7, #12]
 8053fac:	695b      	ldr	r3, [r3, #20]
 8053fae:	2b00      	cmp	r3, #0
 8053fb0:	d004      	beq.n	8053fbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8053fb2:	68fb      	ldr	r3, [r7, #12]
 8053fb4:	695b      	ldr	r3, [r3, #20]
 8053fb6:	4618      	mov	r0, r3
 8053fb8:	f7f8 f83c 	bl	804c034 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8053fbc:	68f8      	ldr	r0, [r7, #12]
 8053fbe:	f7ff ffbd 	bl	8053f3c <ip_frag_free_pbuf_custom_ref>
}
 8053fc2:	bf00      	nop
 8053fc4:	3710      	adds	r7, #16
 8053fc6:	46bd      	mov	sp, r7
 8053fc8:	bd80      	pop	{r7, pc}
 8053fca:	bf00      	nop
 8053fcc:	08058180 	.word	0x08058180
 8053fd0:	08058344 	.word	0x08058344
 8053fd4:	080581c8 	.word	0x080581c8
 8053fd8:	08058350 	.word	0x08058350

08053fdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8053fdc:	b580      	push	{r7, lr}
 8053fde:	b094      	sub	sp, #80	; 0x50
 8053fe0:	af02      	add	r7, sp, #8
 8053fe2:	60f8      	str	r0, [r7, #12]
 8053fe4:	60b9      	str	r1, [r7, #8]
 8053fe6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8053fe8:	2300      	movs	r3, #0
 8053fea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8053fee:	68bb      	ldr	r3, [r7, #8]
 8053ff0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8053ff2:	3b14      	subs	r3, #20
 8053ff4:	2b00      	cmp	r3, #0
 8053ff6:	da00      	bge.n	8053ffa <ip4_frag+0x1e>
 8053ff8:	3307      	adds	r3, #7
 8053ffa:	10db      	asrs	r3, r3, #3
 8053ffc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8053ffe:	2314      	movs	r3, #20
 8054000:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8054002:	68fb      	ldr	r3, [r7, #12]
 8054004:	685b      	ldr	r3, [r3, #4]
 8054006:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8054008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805400a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 805400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805400e:	781b      	ldrb	r3, [r3, #0]
 8054010:	f003 030f 	and.w	r3, r3, #15
 8054014:	b2db      	uxtb	r3, r3
 8054016:	009b      	lsls	r3, r3, #2
 8054018:	b2db      	uxtb	r3, r3
 805401a:	2b14      	cmp	r3, #20
 805401c:	d002      	beq.n	8054024 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 805401e:	f06f 0305 	mvn.w	r3, #5
 8054022:	e110      	b.n	8054246 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8054024:	68fb      	ldr	r3, [r7, #12]
 8054026:	895b      	ldrh	r3, [r3, #10]
 8054028:	2b13      	cmp	r3, #19
 805402a:	d809      	bhi.n	8054040 <ip4_frag+0x64>
 805402c:	4b88      	ldr	r3, [pc, #544]	; (8054250 <ip4_frag+0x274>)
 805402e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8054032:	4988      	ldr	r1, [pc, #544]	; (8054254 <ip4_frag+0x278>)
 8054034:	4888      	ldr	r0, [pc, #544]	; (8054258 <ip4_frag+0x27c>)
 8054036:	f000 fc03 	bl	8054840 <iprintf>
 805403a:	f06f 0305 	mvn.w	r3, #5
 805403e:	e102      	b.n	8054246 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8054040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054042:	88db      	ldrh	r3, [r3, #6]
 8054044:	b29b      	uxth	r3, r3
 8054046:	4618      	mov	r0, r3
 8054048:	f7f6 fc02 	bl	804a850 <lwip_htons>
 805404c:	4603      	mov	r3, r0
 805404e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8054050:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8054052:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8054056:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 805405a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 805405c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8054060:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8054062:	68fb      	ldr	r3, [r7, #12]
 8054064:	891b      	ldrh	r3, [r3, #8]
 8054066:	3b14      	subs	r3, #20
 8054068:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 805406c:	e0e1      	b.n	8054232 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 805406e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8054070:	00db      	lsls	r3, r3, #3
 8054072:	b29b      	uxth	r3, r3
 8054074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8054078:	4293      	cmp	r3, r2
 805407a:	bf28      	it	cs
 805407c:	4613      	movcs	r3, r2
 805407e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8054080:	f44f 7220 	mov.w	r2, #640	; 0x280
 8054084:	2114      	movs	r1, #20
 8054086:	200e      	movs	r0, #14
 8054088:	f7f7 fcf0 	bl	804ba6c <pbuf_alloc>
 805408c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 805408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054090:	2b00      	cmp	r3, #0
 8054092:	f000 80d5 	beq.w	8054240 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8054096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054098:	895b      	ldrh	r3, [r3, #10]
 805409a:	2b13      	cmp	r3, #19
 805409c:	d806      	bhi.n	80540ac <ip4_frag+0xd0>
 805409e:	4b6c      	ldr	r3, [pc, #432]	; (8054250 <ip4_frag+0x274>)
 80540a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80540a4:	496d      	ldr	r1, [pc, #436]	; (805425c <ip4_frag+0x280>)
 80540a6:	486c      	ldr	r0, [pc, #432]	; (8054258 <ip4_frag+0x27c>)
 80540a8:	f000 fbca 	bl	8054840 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80540ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80540ae:	685b      	ldr	r3, [r3, #4]
 80540b0:	2214      	movs	r2, #20
 80540b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80540b4:	4618      	mov	r0, r3
 80540b6:	f000 fde4 	bl	8054c82 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80540ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80540bc:	685b      	ldr	r3, [r3, #4]
 80540be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80540c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80540c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80540c6:	e064      	b.n	8054192 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80540c8:	68fb      	ldr	r3, [r7, #12]
 80540ca:	895a      	ldrh	r2, [r3, #10]
 80540cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80540ce:	1ad3      	subs	r3, r2, r3
 80540d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80540d2:	68fb      	ldr	r3, [r7, #12]
 80540d4:	895b      	ldrh	r3, [r3, #10]
 80540d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80540d8:	429a      	cmp	r2, r3
 80540da:	d906      	bls.n	80540ea <ip4_frag+0x10e>
 80540dc:	4b5c      	ldr	r3, [pc, #368]	; (8054250 <ip4_frag+0x274>)
 80540de:	f240 322d 	movw	r2, #813	; 0x32d
 80540e2:	495f      	ldr	r1, [pc, #380]	; (8054260 <ip4_frag+0x284>)
 80540e4:	485c      	ldr	r0, [pc, #368]	; (8054258 <ip4_frag+0x27c>)
 80540e6:	f000 fbab 	bl	8054840 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80540ea:	8bfa      	ldrh	r2, [r7, #30]
 80540ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80540f0:	4293      	cmp	r3, r2
 80540f2:	bf28      	it	cs
 80540f4:	4613      	movcs	r3, r2
 80540f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80540fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80540fe:	2b00      	cmp	r3, #0
 8054100:	d105      	bne.n	805410e <ip4_frag+0x132>
        poff = 0;
 8054102:	2300      	movs	r3, #0
 8054104:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8054106:	68fb      	ldr	r3, [r7, #12]
 8054108:	681b      	ldr	r3, [r3, #0]
 805410a:	60fb      	str	r3, [r7, #12]
        continue;
 805410c:	e041      	b.n	8054192 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 805410e:	f7ff ff0d 	bl	8053f2c <ip_frag_alloc_pbuf_custom_ref>
 8054112:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8054114:	69bb      	ldr	r3, [r7, #24]
 8054116:	2b00      	cmp	r3, #0
 8054118:	d103      	bne.n	8054122 <ip4_frag+0x146>
        pbuf_free(rambuf);
 805411a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 805411c:	f7f7 ff8a 	bl	804c034 <pbuf_free>
        goto memerr;
 8054120:	e08f      	b.n	8054242 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8054122:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8054124:	68fb      	ldr	r3, [r7, #12]
 8054126:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8054128:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 805412a:	4413      	add	r3, r2
 805412c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8054130:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8054134:	9201      	str	r2, [sp, #4]
 8054136:	9300      	str	r3, [sp, #0]
 8054138:	4603      	mov	r3, r0
 805413a:	2241      	movs	r2, #65	; 0x41
 805413c:	2000      	movs	r0, #0
 805413e:	f7f7 fdbf 	bl	804bcc0 <pbuf_alloced_custom>
 8054142:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8054144:	697b      	ldr	r3, [r7, #20]
 8054146:	2b00      	cmp	r3, #0
 8054148:	d106      	bne.n	8054158 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 805414a:	69b8      	ldr	r0, [r7, #24]
 805414c:	f7ff fef6 	bl	8053f3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8054150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8054152:	f7f7 ff6f 	bl	804c034 <pbuf_free>
        goto memerr;
 8054156:	e074      	b.n	8054242 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8054158:	68f8      	ldr	r0, [r7, #12]
 805415a:	f7f8 f811 	bl	804c180 <pbuf_ref>
      pcr->original = p;
 805415e:	69bb      	ldr	r3, [r7, #24]
 8054160:	68fa      	ldr	r2, [r7, #12]
 8054162:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8054164:	69bb      	ldr	r3, [r7, #24]
 8054166:	4a3f      	ldr	r2, [pc, #252]	; (8054264 <ip4_frag+0x288>)
 8054168:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 805416a:	6979      	ldr	r1, [r7, #20]
 805416c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 805416e:	f7f8 f82f 	bl	804c1d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8054172:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8054176:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 805417a:	1ad3      	subs	r3, r2, r3
 805417c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8054180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8054184:	2b00      	cmp	r3, #0
 8054186:	d004      	beq.n	8054192 <ip4_frag+0x1b6>
        poff = 0;
 8054188:	2300      	movs	r3, #0
 805418a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 805418c:	68fb      	ldr	r3, [r7, #12]
 805418e:	681b      	ldr	r3, [r3, #0]
 8054190:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8054192:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8054196:	2b00      	cmp	r3, #0
 8054198:	d196      	bne.n	80540c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 805419a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 805419c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80541a0:	4413      	add	r3, r2
 80541a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80541a4:	68bb      	ldr	r3, [r7, #8]
 80541a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80541a8:	f1a3 0213 	sub.w	r2, r3, #19
 80541ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80541b0:	429a      	cmp	r2, r3
 80541b2:	bfcc      	ite	gt
 80541b4:	2301      	movgt	r3, #1
 80541b6:	2300      	movle	r3, #0
 80541b8:	b2db      	uxtb	r3, r3
 80541ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80541bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80541c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80541c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80541c6:	6a3b      	ldr	r3, [r7, #32]
 80541c8:	2b00      	cmp	r3, #0
 80541ca:	d002      	beq.n	80541d2 <ip4_frag+0x1f6>
 80541cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80541ce:	2b00      	cmp	r3, #0
 80541d0:	d003      	beq.n	80541da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80541d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80541d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80541d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80541da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80541dc:	4618      	mov	r0, r3
 80541de:	f7f6 fb37 	bl	804a850 <lwip_htons>
 80541e2:	4603      	mov	r3, r0
 80541e4:	461a      	mov	r2, r3
 80541e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80541e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80541ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80541ec:	3314      	adds	r3, #20
 80541ee:	b29b      	uxth	r3, r3
 80541f0:	4618      	mov	r0, r3
 80541f2:	f7f6 fb2d 	bl	804a850 <lwip_htons>
 80541f6:	4603      	mov	r3, r0
 80541f8:	461a      	mov	r2, r3
 80541fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80541fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80541fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054200:	2200      	movs	r2, #0
 8054202:	729a      	strb	r2, [r3, #10]
 8054204:	2200      	movs	r2, #0
 8054206:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8054208:	68bb      	ldr	r3, [r7, #8]
 805420a:	695b      	ldr	r3, [r3, #20]
 805420c:	687a      	ldr	r2, [r7, #4]
 805420e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8054210:	68b8      	ldr	r0, [r7, #8]
 8054212:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8054214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8054216:	f7f7 ff0d 	bl	804c034 <pbuf_free>
    left = (u16_t)(left - fragsize);
 805421a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 805421e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8054220:	1ad3      	subs	r3, r2, r3
 8054222:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8054226:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 805422a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 805422c:	4413      	add	r3, r2
 805422e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8054232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8054236:	2b00      	cmp	r3, #0
 8054238:	f47f af19 	bne.w	805406e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 805423c:	2300      	movs	r3, #0
 805423e:	e002      	b.n	8054246 <ip4_frag+0x26a>
      goto memerr;
 8054240:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8054242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8054246:	4618      	mov	r0, r3
 8054248:	3748      	adds	r7, #72	; 0x48
 805424a:	46bd      	mov	sp, r7
 805424c:	bd80      	pop	{r7, pc}
 805424e:	bf00      	nop
 8054250:	08058180 	.word	0x08058180
 8054254:	0805835c 	.word	0x0805835c
 8054258:	080581c8 	.word	0x080581c8
 805425c:	08058378 	.word	0x08058378
 8054260:	08058398 	.word	0x08058398
 8054264:	08053f75 	.word	0x08053f75

08054268 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8054268:	b580      	push	{r7, lr}
 805426a:	b086      	sub	sp, #24
 805426c:	af00      	add	r7, sp, #0
 805426e:	6078      	str	r0, [r7, #4]
 8054270:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8054272:	230e      	movs	r3, #14
 8054274:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8054276:	687b      	ldr	r3, [r7, #4]
 8054278:	895b      	ldrh	r3, [r3, #10]
 805427a:	2b0e      	cmp	r3, #14
 805427c:	d96e      	bls.n	805435c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 805427e:	687b      	ldr	r3, [r7, #4]
 8054280:	7bdb      	ldrb	r3, [r3, #15]
 8054282:	2b00      	cmp	r3, #0
 8054284:	d106      	bne.n	8054294 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8054286:	683b      	ldr	r3, [r7, #0]
 8054288:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 805428c:	3301      	adds	r3, #1
 805428e:	b2da      	uxtb	r2, r3
 8054290:	687b      	ldr	r3, [r7, #4]
 8054292:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8054294:	687b      	ldr	r3, [r7, #4]
 8054296:	685b      	ldr	r3, [r3, #4]
 8054298:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 805429a:	693b      	ldr	r3, [r7, #16]
 805429c:	7b1a      	ldrb	r2, [r3, #12]
 805429e:	7b5b      	ldrb	r3, [r3, #13]
 80542a0:	021b      	lsls	r3, r3, #8
 80542a2:	4313      	orrs	r3, r2
 80542a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80542a6:	693b      	ldr	r3, [r7, #16]
 80542a8:	781b      	ldrb	r3, [r3, #0]
 80542aa:	f003 0301 	and.w	r3, r3, #1
 80542ae:	2b00      	cmp	r3, #0
 80542b0:	d023      	beq.n	80542fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80542b2:	693b      	ldr	r3, [r7, #16]
 80542b4:	781b      	ldrb	r3, [r3, #0]
 80542b6:	2b01      	cmp	r3, #1
 80542b8:	d10f      	bne.n	80542da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80542ba:	693b      	ldr	r3, [r7, #16]
 80542bc:	785b      	ldrb	r3, [r3, #1]
 80542be:	2b00      	cmp	r3, #0
 80542c0:	d11b      	bne.n	80542fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80542c2:	693b      	ldr	r3, [r7, #16]
 80542c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80542c6:	2b5e      	cmp	r3, #94	; 0x5e
 80542c8:	d117      	bne.n	80542fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80542ca:	687b      	ldr	r3, [r7, #4]
 80542cc:	7b5b      	ldrb	r3, [r3, #13]
 80542ce:	f043 0310 	orr.w	r3, r3, #16
 80542d2:	b2da      	uxtb	r2, r3
 80542d4:	687b      	ldr	r3, [r7, #4]
 80542d6:	735a      	strb	r2, [r3, #13]
 80542d8:	e00f      	b.n	80542fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80542da:	693b      	ldr	r3, [r7, #16]
 80542dc:	2206      	movs	r2, #6
 80542de:	4928      	ldr	r1, [pc, #160]	; (8054380 <ethernet_input+0x118>)
 80542e0:	4618      	mov	r0, r3
 80542e2:	f000 fbf3 	bl	8054acc <memcmp>
 80542e6:	4603      	mov	r3, r0
 80542e8:	2b00      	cmp	r3, #0
 80542ea:	d106      	bne.n	80542fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80542ec:	687b      	ldr	r3, [r7, #4]
 80542ee:	7b5b      	ldrb	r3, [r3, #13]
 80542f0:	f043 0308 	orr.w	r3, r3, #8
 80542f4:	b2da      	uxtb	r2, r3
 80542f6:	687b      	ldr	r3, [r7, #4]
 80542f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80542fa:	89fb      	ldrh	r3, [r7, #14]
 80542fc:	2b08      	cmp	r3, #8
 80542fe:	d003      	beq.n	8054308 <ethernet_input+0xa0>
 8054300:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8054304:	d014      	beq.n	8054330 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8054306:	e032      	b.n	805436e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8054308:	683b      	ldr	r3, [r7, #0]
 805430a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 805430e:	f003 0308 	and.w	r3, r3, #8
 8054312:	2b00      	cmp	r3, #0
 8054314:	d024      	beq.n	8054360 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8054316:	8afb      	ldrh	r3, [r7, #22]
 8054318:	4619      	mov	r1, r3
 805431a:	6878      	ldr	r0, [r7, #4]
 805431c:	f7f7 fe04 	bl	804bf28 <pbuf_remove_header>
 8054320:	4603      	mov	r3, r0
 8054322:	2b00      	cmp	r3, #0
 8054324:	d11e      	bne.n	8054364 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8054326:	6839      	ldr	r1, [r7, #0]
 8054328:	6878      	ldr	r0, [r7, #4]
 805432a:	f7fe ff21 	bl	8053170 <ip4_input>
      break;
 805432e:	e013      	b.n	8054358 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8054330:	683b      	ldr	r3, [r7, #0]
 8054332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8054336:	f003 0308 	and.w	r3, r3, #8
 805433a:	2b00      	cmp	r3, #0
 805433c:	d014      	beq.n	8054368 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 805433e:	8afb      	ldrh	r3, [r7, #22]
 8054340:	4619      	mov	r1, r3
 8054342:	6878      	ldr	r0, [r7, #4]
 8054344:	f7f7 fdf0 	bl	804bf28 <pbuf_remove_header>
 8054348:	4603      	mov	r3, r0
 805434a:	2b00      	cmp	r3, #0
 805434c:	d10e      	bne.n	805436c <ethernet_input+0x104>
        etharp_input(p, netif);
 805434e:	6839      	ldr	r1, [r7, #0]
 8054350:	6878      	ldr	r0, [r7, #4]
 8054352:	f7fe f8c1 	bl	80524d8 <etharp_input>
      break;
 8054356:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8054358:	2300      	movs	r3, #0
 805435a:	e00c      	b.n	8054376 <ethernet_input+0x10e>
    goto free_and_return;
 805435c:	bf00      	nop
 805435e:	e006      	b.n	805436e <ethernet_input+0x106>
        goto free_and_return;
 8054360:	bf00      	nop
 8054362:	e004      	b.n	805436e <ethernet_input+0x106>
        goto free_and_return;
 8054364:	bf00      	nop
 8054366:	e002      	b.n	805436e <ethernet_input+0x106>
        goto free_and_return;
 8054368:	bf00      	nop
 805436a:	e000      	b.n	805436e <ethernet_input+0x106>
        goto free_and_return;
 805436c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 805436e:	6878      	ldr	r0, [r7, #4]
 8054370:	f7f7 fe60 	bl	804c034 <pbuf_free>
  return ERR_OK;
 8054374:	2300      	movs	r3, #0
}
 8054376:	4618      	mov	r0, r3
 8054378:	3718      	adds	r7, #24
 805437a:	46bd      	mov	sp, r7
 805437c:	bd80      	pop	{r7, pc}
 805437e:	bf00      	nop
 8054380:	0805857c 	.word	0x0805857c

08054384 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8054384:	b580      	push	{r7, lr}
 8054386:	b086      	sub	sp, #24
 8054388:	af00      	add	r7, sp, #0
 805438a:	60f8      	str	r0, [r7, #12]
 805438c:	60b9      	str	r1, [r7, #8]
 805438e:	607a      	str	r2, [r7, #4]
 8054390:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8054392:	8c3b      	ldrh	r3, [r7, #32]
 8054394:	4618      	mov	r0, r3
 8054396:	f7f6 fa5b 	bl	804a850 <lwip_htons>
 805439a:	4603      	mov	r3, r0
 805439c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 805439e:	210e      	movs	r1, #14
 80543a0:	68b8      	ldr	r0, [r7, #8]
 80543a2:	f7f7 fdb1 	bl	804bf08 <pbuf_add_header>
 80543a6:	4603      	mov	r3, r0
 80543a8:	2b00      	cmp	r3, #0
 80543aa:	d125      	bne.n	80543f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80543ac:	68bb      	ldr	r3, [r7, #8]
 80543ae:	685b      	ldr	r3, [r3, #4]
 80543b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80543b2:	693b      	ldr	r3, [r7, #16]
 80543b4:	8afa      	ldrh	r2, [r7, #22]
 80543b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80543b8:	693b      	ldr	r3, [r7, #16]
 80543ba:	2206      	movs	r2, #6
 80543bc:	6839      	ldr	r1, [r7, #0]
 80543be:	4618      	mov	r0, r3
 80543c0:	f000 fc5f 	bl	8054c82 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80543c4:	693b      	ldr	r3, [r7, #16]
 80543c6:	3306      	adds	r3, #6
 80543c8:	2206      	movs	r2, #6
 80543ca:	6879      	ldr	r1, [r7, #4]
 80543cc:	4618      	mov	r0, r3
 80543ce:	f000 fc58 	bl	8054c82 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80543d2:	68fb      	ldr	r3, [r7, #12]
 80543d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80543d8:	2b06      	cmp	r3, #6
 80543da:	d006      	beq.n	80543ea <ethernet_output+0x66>
 80543dc:	4b0a      	ldr	r3, [pc, #40]	; (8054408 <ethernet_output+0x84>)
 80543de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80543e2:	490a      	ldr	r1, [pc, #40]	; (805440c <ethernet_output+0x88>)
 80543e4:	480a      	ldr	r0, [pc, #40]	; (8054410 <ethernet_output+0x8c>)
 80543e6:	f000 fa2b 	bl	8054840 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80543ea:	68fb      	ldr	r3, [r7, #12]
 80543ec:	699b      	ldr	r3, [r3, #24]
 80543ee:	68b9      	ldr	r1, [r7, #8]
 80543f0:	68f8      	ldr	r0, [r7, #12]
 80543f2:	4798      	blx	r3
 80543f4:	4603      	mov	r3, r0
 80543f6:	e002      	b.n	80543fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80543f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80543fa:	f06f 0301 	mvn.w	r3, #1
}
 80543fe:	4618      	mov	r0, r3
 8054400:	3718      	adds	r7, #24
 8054402:	46bd      	mov	sp, r7
 8054404:	bd80      	pop	{r7, pc}
 8054406:	bf00      	nop
 8054408:	080583a8 	.word	0x080583a8
 805440c:	080583e0 	.word	0x080583e0
 8054410:	08058414 	.word	0x08058414

08054414 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8054414:	b580      	push	{r7, lr}
 8054416:	b086      	sub	sp, #24
 8054418:	af00      	add	r7, sp, #0
 805441a:	6078      	str	r0, [r7, #4]
 805441c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 805441e:	683b      	ldr	r3, [r7, #0]
 8054420:	60bb      	str	r3, [r7, #8]
 8054422:	2304      	movs	r3, #4
 8054424:	60fb      	str	r3, [r7, #12]
 8054426:	2300      	movs	r3, #0
 8054428:	613b      	str	r3, [r7, #16]
 805442a:	2300      	movs	r3, #0
 805442c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 805442e:	f107 0308 	add.w	r3, r7, #8
 8054432:	2100      	movs	r1, #0
 8054434:	4618      	mov	r0, r3
 8054436:	f7f3 fa3f 	bl	80478b8 <osMessageCreate>
 805443a:	4602      	mov	r2, r0
 805443c:	687b      	ldr	r3, [r7, #4]
 805443e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8054440:	687b      	ldr	r3, [r7, #4]
 8054442:	681b      	ldr	r3, [r3, #0]
 8054444:	2b00      	cmp	r3, #0
 8054446:	d102      	bne.n	805444e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8054448:	f04f 33ff 	mov.w	r3, #4294967295
 805444c:	e000      	b.n	8054450 <sys_mbox_new+0x3c>

  return ERR_OK;
 805444e:	2300      	movs	r3, #0
}
 8054450:	4618      	mov	r0, r3
 8054452:	3718      	adds	r7, #24
 8054454:	46bd      	mov	sp, r7
 8054456:	bd80      	pop	{r7, pc}

08054458 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8054458:	b580      	push	{r7, lr}
 805445a:	b084      	sub	sp, #16
 805445c:	af00      	add	r7, sp, #0
 805445e:	6078      	str	r0, [r7, #4]
 8054460:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8054462:	687b      	ldr	r3, [r7, #4]
 8054464:	681b      	ldr	r3, [r3, #0]
 8054466:	6839      	ldr	r1, [r7, #0]
 8054468:	2200      	movs	r2, #0
 805446a:	4618      	mov	r0, r3
 805446c:	f7f3 fa4c 	bl	8047908 <osMessagePut>
 8054470:	4603      	mov	r3, r0
 8054472:	2b00      	cmp	r3, #0
 8054474:	d102      	bne.n	805447c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8054476:	2300      	movs	r3, #0
 8054478:	73fb      	strb	r3, [r7, #15]
 805447a:	e001      	b.n	8054480 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 805447c:	23ff      	movs	r3, #255	; 0xff
 805447e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8054480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8054484:	4618      	mov	r0, r3
 8054486:	3710      	adds	r7, #16
 8054488:	46bd      	mov	sp, r7
 805448a:	bd80      	pop	{r7, pc}

0805448c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 805448c:	b580      	push	{r7, lr}
 805448e:	b08c      	sub	sp, #48	; 0x30
 8054490:	af00      	add	r7, sp, #0
 8054492:	61f8      	str	r0, [r7, #28]
 8054494:	61b9      	str	r1, [r7, #24]
 8054496:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8054498:	f7f3 f83f 	bl	804751a <osKernelSysTick>
 805449c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 805449e:	697b      	ldr	r3, [r7, #20]
 80544a0:	2b00      	cmp	r3, #0
 80544a2:	d017      	beq.n	80544d4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80544a4:	69fb      	ldr	r3, [r7, #28]
 80544a6:	6819      	ldr	r1, [r3, #0]
 80544a8:	f107 0320 	add.w	r3, r7, #32
 80544ac:	697a      	ldr	r2, [r7, #20]
 80544ae:	4618      	mov	r0, r3
 80544b0:	f7f3 fa6a 	bl	8047988 <osMessageGet>

    if(event.status == osEventMessage)
 80544b4:	6a3b      	ldr	r3, [r7, #32]
 80544b6:	2b10      	cmp	r3, #16
 80544b8:	d109      	bne.n	80544ce <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80544ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80544bc:	461a      	mov	r2, r3
 80544be:	69bb      	ldr	r3, [r7, #24]
 80544c0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80544c2:	f7f3 f82a 	bl	804751a <osKernelSysTick>
 80544c6:	4602      	mov	r2, r0
 80544c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80544ca:	1ad3      	subs	r3, r2, r3
 80544cc:	e019      	b.n	8054502 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80544ce:	f04f 33ff 	mov.w	r3, #4294967295
 80544d2:	e016      	b.n	8054502 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80544d4:	69fb      	ldr	r3, [r7, #28]
 80544d6:	6819      	ldr	r1, [r3, #0]
 80544d8:	463b      	mov	r3, r7
 80544da:	f04f 32ff 	mov.w	r2, #4294967295
 80544de:	4618      	mov	r0, r3
 80544e0:	f7f3 fa52 	bl	8047988 <osMessageGet>
 80544e4:	f107 0320 	add.w	r3, r7, #32
 80544e8:	463a      	mov	r2, r7
 80544ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80544ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80544f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80544f2:	461a      	mov	r2, r3
 80544f4:	69bb      	ldr	r3, [r7, #24]
 80544f6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80544f8:	f7f3 f80f 	bl	804751a <osKernelSysTick>
 80544fc:	4602      	mov	r2, r0
 80544fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054500:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8054502:	4618      	mov	r0, r3
 8054504:	3730      	adds	r7, #48	; 0x30
 8054506:	46bd      	mov	sp, r7
 8054508:	bd80      	pop	{r7, pc}

0805450a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 805450a:	b480      	push	{r7}
 805450c:	b083      	sub	sp, #12
 805450e:	af00      	add	r7, sp, #0
 8054510:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8054512:	687b      	ldr	r3, [r7, #4]
 8054514:	681b      	ldr	r3, [r3, #0]
 8054516:	2b00      	cmp	r3, #0
 8054518:	d101      	bne.n	805451e <sys_mbox_valid+0x14>
    return 0;
 805451a:	2300      	movs	r3, #0
 805451c:	e000      	b.n	8054520 <sys_mbox_valid+0x16>
  else
    return 1;
 805451e:	2301      	movs	r3, #1
}
 8054520:	4618      	mov	r0, r3
 8054522:	370c      	adds	r7, #12
 8054524:	46bd      	mov	sp, r7
 8054526:	f85d 7b04 	ldr.w	r7, [sp], #4
 805452a:	4770      	bx	lr

0805452c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 805452c:	b580      	push	{r7, lr}
 805452e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8054530:	4803      	ldr	r0, [pc, #12]	; (8054540 <sys_init+0x14>)
 8054532:	f7f3 f86e 	bl	8047612 <osMutexCreate>
 8054536:	4603      	mov	r3, r0
 8054538:	4a02      	ldr	r2, [pc, #8]	; (8054544 <sys_init+0x18>)
 805453a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 805453c:	bf00      	nop
 805453e:	bd80      	pop	{r7, pc}
 8054540:	0805858c 	.word	0x0805858c
 8054544:	20023928 	.word	0x20023928

08054548 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8054548:	b580      	push	{r7, lr}
 805454a:	b084      	sub	sp, #16
 805454c:	af00      	add	r7, sp, #0
 805454e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8054550:	2300      	movs	r3, #0
 8054552:	60bb      	str	r3, [r7, #8]
 8054554:	2300      	movs	r3, #0
 8054556:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8054558:	f107 0308 	add.w	r3, r7, #8
 805455c:	4618      	mov	r0, r3
 805455e:	f7f3 f858 	bl	8047612 <osMutexCreate>
 8054562:	4602      	mov	r2, r0
 8054564:	687b      	ldr	r3, [r7, #4]
 8054566:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8054568:	687b      	ldr	r3, [r7, #4]
 805456a:	681b      	ldr	r3, [r3, #0]
 805456c:	2b00      	cmp	r3, #0
 805456e:	d102      	bne.n	8054576 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8054570:	f04f 33ff 	mov.w	r3, #4294967295
 8054574:	e000      	b.n	8054578 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8054576:	2300      	movs	r3, #0
}
 8054578:	4618      	mov	r0, r3
 805457a:	3710      	adds	r7, #16
 805457c:	46bd      	mov	sp, r7
 805457e:	bd80      	pop	{r7, pc}

08054580 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8054580:	b580      	push	{r7, lr}
 8054582:	b082      	sub	sp, #8
 8054584:	af00      	add	r7, sp, #0
 8054586:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8054588:	687b      	ldr	r3, [r7, #4]
 805458a:	681b      	ldr	r3, [r3, #0]
 805458c:	f04f 31ff 	mov.w	r1, #4294967295
 8054590:	4618      	mov	r0, r3
 8054592:	f7f3 f857 	bl	8047644 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8054596:	bf00      	nop
 8054598:	3708      	adds	r7, #8
 805459a:	46bd      	mov	sp, r7
 805459c:	bd80      	pop	{r7, pc}

0805459e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 805459e:	b580      	push	{r7, lr}
 80545a0:	b082      	sub	sp, #8
 80545a2:	af00      	add	r7, sp, #0
 80545a4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80545a6:	687b      	ldr	r3, [r7, #4]
 80545a8:	681b      	ldr	r3, [r3, #0]
 80545aa:	4618      	mov	r0, r3
 80545ac:	f7f3 f898 	bl	80476e0 <osMutexRelease>
}
 80545b0:	bf00      	nop
 80545b2:	3708      	adds	r7, #8
 80545b4:	46bd      	mov	sp, r7
 80545b6:	bd80      	pop	{r7, pc}

080545b8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80545b8:	b580      	push	{r7, lr}
 80545ba:	b08c      	sub	sp, #48	; 0x30
 80545bc:	af00      	add	r7, sp, #0
 80545be:	60f8      	str	r0, [r7, #12]
 80545c0:	60b9      	str	r1, [r7, #8]
 80545c2:	607a      	str	r2, [r7, #4]
 80545c4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80545c6:	f107 0314 	add.w	r3, r7, #20
 80545ca:	2200      	movs	r2, #0
 80545cc:	601a      	str	r2, [r3, #0]
 80545ce:	605a      	str	r2, [r3, #4]
 80545d0:	609a      	str	r2, [r3, #8]
 80545d2:	60da      	str	r2, [r3, #12]
 80545d4:	611a      	str	r2, [r3, #16]
 80545d6:	615a      	str	r2, [r3, #20]
 80545d8:	619a      	str	r2, [r3, #24]
 80545da:	68fb      	ldr	r3, [r7, #12]
 80545dc:	617b      	str	r3, [r7, #20]
 80545de:	68bb      	ldr	r3, [r7, #8]
 80545e0:	61bb      	str	r3, [r7, #24]
 80545e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80545e4:	b21b      	sxth	r3, r3
 80545e6:	83bb      	strh	r3, [r7, #28]
 80545e8:	683b      	ldr	r3, [r7, #0]
 80545ea:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80545ec:	f107 0314 	add.w	r3, r7, #20
 80545f0:	6879      	ldr	r1, [r7, #4]
 80545f2:	4618      	mov	r0, r3
 80545f4:	f7f2 ffa1 	bl	804753a <osThreadCreate>
 80545f8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80545fa:	4618      	mov	r0, r3
 80545fc:	3730      	adds	r7, #48	; 0x30
 80545fe:	46bd      	mov	sp, r7
 8054600:	bd80      	pop	{r7, pc}
	...

08054604 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8054604:	b580      	push	{r7, lr}
 8054606:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8054608:	4b04      	ldr	r3, [pc, #16]	; (805461c <sys_arch_protect+0x18>)
 805460a:	681b      	ldr	r3, [r3, #0]
 805460c:	f04f 31ff 	mov.w	r1, #4294967295
 8054610:	4618      	mov	r0, r3
 8054612:	f7f3 f817 	bl	8047644 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8054616:	2301      	movs	r3, #1
}
 8054618:	4618      	mov	r0, r3
 805461a:	bd80      	pop	{r7, pc}
 805461c:	20023928 	.word	0x20023928

08054620 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8054620:	b580      	push	{r7, lr}
 8054622:	b082      	sub	sp, #8
 8054624:	af00      	add	r7, sp, #0
 8054626:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8054628:	4b04      	ldr	r3, [pc, #16]	; (805463c <sys_arch_unprotect+0x1c>)
 805462a:	681b      	ldr	r3, [r3, #0]
 805462c:	4618      	mov	r0, r3
 805462e:	f7f3 f857 	bl	80476e0 <osMutexRelease>
}
 8054632:	bf00      	nop
 8054634:	3708      	adds	r7, #8
 8054636:	46bd      	mov	sp, r7
 8054638:	bd80      	pop	{r7, pc}
 805463a:	bf00      	nop
 805463c:	20023928 	.word	0x20023928

08054640 <rand>:
 8054640:	4b16      	ldr	r3, [pc, #88]	; (805469c <rand+0x5c>)
 8054642:	b510      	push	{r4, lr}
 8054644:	681c      	ldr	r4, [r3, #0]
 8054646:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8054648:	b9b3      	cbnz	r3, 8054678 <rand+0x38>
 805464a:	2018      	movs	r0, #24
 805464c:	f000 fb92 	bl	8054d74 <malloc>
 8054650:	4602      	mov	r2, r0
 8054652:	6320      	str	r0, [r4, #48]	; 0x30
 8054654:	b920      	cbnz	r0, 8054660 <rand+0x20>
 8054656:	4b12      	ldr	r3, [pc, #72]	; (80546a0 <rand+0x60>)
 8054658:	4812      	ldr	r0, [pc, #72]	; (80546a4 <rand+0x64>)
 805465a:	2152      	movs	r1, #82	; 0x52
 805465c:	f000 fb20 	bl	8054ca0 <__assert_func>
 8054660:	4911      	ldr	r1, [pc, #68]	; (80546a8 <rand+0x68>)
 8054662:	4b12      	ldr	r3, [pc, #72]	; (80546ac <rand+0x6c>)
 8054664:	e9c0 1300 	strd	r1, r3, [r0]
 8054668:	4b11      	ldr	r3, [pc, #68]	; (80546b0 <rand+0x70>)
 805466a:	6083      	str	r3, [r0, #8]
 805466c:	230b      	movs	r3, #11
 805466e:	8183      	strh	r3, [r0, #12]
 8054670:	2100      	movs	r1, #0
 8054672:	2001      	movs	r0, #1
 8054674:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8054678:	6b21      	ldr	r1, [r4, #48]	; 0x30
 805467a:	480e      	ldr	r0, [pc, #56]	; (80546b4 <rand+0x74>)
 805467c:	690b      	ldr	r3, [r1, #16]
 805467e:	694c      	ldr	r4, [r1, #20]
 8054680:	4a0d      	ldr	r2, [pc, #52]	; (80546b8 <rand+0x78>)
 8054682:	4358      	muls	r0, r3
 8054684:	fb02 0004 	mla	r0, r2, r4, r0
 8054688:	fba3 3202 	umull	r3, r2, r3, r2
 805468c:	3301      	adds	r3, #1
 805468e:	eb40 0002 	adc.w	r0, r0, r2
 8054692:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8054696:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 805469a:	bd10      	pop	{r4, pc}
 805469c:	20000088 	.word	0x20000088
 80546a0:	08058594 	.word	0x08058594
 80546a4:	080585ab 	.word	0x080585ab
 80546a8:	abcd330e 	.word	0xabcd330e
 80546ac:	e66d1234 	.word	0xe66d1234
 80546b0:	0005deec 	.word	0x0005deec
 80546b4:	5851f42d 	.word	0x5851f42d
 80546b8:	4c957f2d 	.word	0x4c957f2d

080546bc <std>:
 80546bc:	2300      	movs	r3, #0
 80546be:	b510      	push	{r4, lr}
 80546c0:	4604      	mov	r4, r0
 80546c2:	e9c0 3300 	strd	r3, r3, [r0]
 80546c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80546ca:	6083      	str	r3, [r0, #8]
 80546cc:	8181      	strh	r1, [r0, #12]
 80546ce:	6643      	str	r3, [r0, #100]	; 0x64
 80546d0:	81c2      	strh	r2, [r0, #14]
 80546d2:	6183      	str	r3, [r0, #24]
 80546d4:	4619      	mov	r1, r3
 80546d6:	2208      	movs	r2, #8
 80546d8:	305c      	adds	r0, #92	; 0x5c
 80546da:	f000 fa07 	bl	8054aec <memset>
 80546de:	4b0d      	ldr	r3, [pc, #52]	; (8054714 <std+0x58>)
 80546e0:	6263      	str	r3, [r4, #36]	; 0x24
 80546e2:	4b0d      	ldr	r3, [pc, #52]	; (8054718 <std+0x5c>)
 80546e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80546e6:	4b0d      	ldr	r3, [pc, #52]	; (805471c <std+0x60>)
 80546e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80546ea:	4b0d      	ldr	r3, [pc, #52]	; (8054720 <std+0x64>)
 80546ec:	6323      	str	r3, [r4, #48]	; 0x30
 80546ee:	4b0d      	ldr	r3, [pc, #52]	; (8054724 <std+0x68>)
 80546f0:	6224      	str	r4, [r4, #32]
 80546f2:	429c      	cmp	r4, r3
 80546f4:	d006      	beq.n	8054704 <std+0x48>
 80546f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80546fa:	4294      	cmp	r4, r2
 80546fc:	d002      	beq.n	8054704 <std+0x48>
 80546fe:	33d0      	adds	r3, #208	; 0xd0
 8054700:	429c      	cmp	r4, r3
 8054702:	d105      	bne.n	8054710 <std+0x54>
 8054704:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8054708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805470c:	f000 bab6 	b.w	8054c7c <__retarget_lock_init_recursive>
 8054710:	bd10      	pop	{r4, pc}
 8054712:	bf00      	nop
 8054714:	0805491d 	.word	0x0805491d
 8054718:	0805493f 	.word	0x0805493f
 805471c:	08054977 	.word	0x08054977
 8054720:	0805499b 	.word	0x0805499b
 8054724:	2002392c 	.word	0x2002392c

08054728 <stdio_exit_handler>:
 8054728:	4a02      	ldr	r2, [pc, #8]	; (8054734 <stdio_exit_handler+0xc>)
 805472a:	4903      	ldr	r1, [pc, #12]	; (8054738 <stdio_exit_handler+0x10>)
 805472c:	4803      	ldr	r0, [pc, #12]	; (805473c <stdio_exit_handler+0x14>)
 805472e:	f000 b869 	b.w	8054804 <_fwalk_sglue>
 8054732:	bf00      	nop
 8054734:	20000030 	.word	0x20000030
 8054738:	08055591 	.word	0x08055591
 805473c:	2000003c 	.word	0x2000003c

08054740 <cleanup_stdio>:
 8054740:	6841      	ldr	r1, [r0, #4]
 8054742:	4b0c      	ldr	r3, [pc, #48]	; (8054774 <cleanup_stdio+0x34>)
 8054744:	4299      	cmp	r1, r3
 8054746:	b510      	push	{r4, lr}
 8054748:	4604      	mov	r4, r0
 805474a:	d001      	beq.n	8054750 <cleanup_stdio+0x10>
 805474c:	f000 ff20 	bl	8055590 <_fflush_r>
 8054750:	68a1      	ldr	r1, [r4, #8]
 8054752:	4b09      	ldr	r3, [pc, #36]	; (8054778 <cleanup_stdio+0x38>)
 8054754:	4299      	cmp	r1, r3
 8054756:	d002      	beq.n	805475e <cleanup_stdio+0x1e>
 8054758:	4620      	mov	r0, r4
 805475a:	f000 ff19 	bl	8055590 <_fflush_r>
 805475e:	68e1      	ldr	r1, [r4, #12]
 8054760:	4b06      	ldr	r3, [pc, #24]	; (805477c <cleanup_stdio+0x3c>)
 8054762:	4299      	cmp	r1, r3
 8054764:	d004      	beq.n	8054770 <cleanup_stdio+0x30>
 8054766:	4620      	mov	r0, r4
 8054768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805476c:	f000 bf10 	b.w	8055590 <_fflush_r>
 8054770:	bd10      	pop	{r4, pc}
 8054772:	bf00      	nop
 8054774:	2002392c 	.word	0x2002392c
 8054778:	20023994 	.word	0x20023994
 805477c:	200239fc 	.word	0x200239fc

08054780 <global_stdio_init.part.0>:
 8054780:	b510      	push	{r4, lr}
 8054782:	4b0b      	ldr	r3, [pc, #44]	; (80547b0 <global_stdio_init.part.0+0x30>)
 8054784:	4c0b      	ldr	r4, [pc, #44]	; (80547b4 <global_stdio_init.part.0+0x34>)
 8054786:	4a0c      	ldr	r2, [pc, #48]	; (80547b8 <global_stdio_init.part.0+0x38>)
 8054788:	601a      	str	r2, [r3, #0]
 805478a:	4620      	mov	r0, r4
 805478c:	2200      	movs	r2, #0
 805478e:	2104      	movs	r1, #4
 8054790:	f7ff ff94 	bl	80546bc <std>
 8054794:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8054798:	2201      	movs	r2, #1
 805479a:	2109      	movs	r1, #9
 805479c:	f7ff ff8e 	bl	80546bc <std>
 80547a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80547a4:	2202      	movs	r2, #2
 80547a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80547aa:	2112      	movs	r1, #18
 80547ac:	f7ff bf86 	b.w	80546bc <std>
 80547b0:	20023a64 	.word	0x20023a64
 80547b4:	2002392c 	.word	0x2002392c
 80547b8:	08054729 	.word	0x08054729

080547bc <__sfp_lock_acquire>:
 80547bc:	4801      	ldr	r0, [pc, #4]	; (80547c4 <__sfp_lock_acquire+0x8>)
 80547be:	f000 ba5e 	b.w	8054c7e <__retarget_lock_acquire_recursive>
 80547c2:	bf00      	nop
 80547c4:	20023a6d 	.word	0x20023a6d

080547c8 <__sfp_lock_release>:
 80547c8:	4801      	ldr	r0, [pc, #4]	; (80547d0 <__sfp_lock_release+0x8>)
 80547ca:	f000 ba59 	b.w	8054c80 <__retarget_lock_release_recursive>
 80547ce:	bf00      	nop
 80547d0:	20023a6d 	.word	0x20023a6d

080547d4 <__sinit>:
 80547d4:	b510      	push	{r4, lr}
 80547d6:	4604      	mov	r4, r0
 80547d8:	f7ff fff0 	bl	80547bc <__sfp_lock_acquire>
 80547dc:	6a23      	ldr	r3, [r4, #32]
 80547de:	b11b      	cbz	r3, 80547e8 <__sinit+0x14>
 80547e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80547e4:	f7ff bff0 	b.w	80547c8 <__sfp_lock_release>
 80547e8:	4b04      	ldr	r3, [pc, #16]	; (80547fc <__sinit+0x28>)
 80547ea:	6223      	str	r3, [r4, #32]
 80547ec:	4b04      	ldr	r3, [pc, #16]	; (8054800 <__sinit+0x2c>)
 80547ee:	681b      	ldr	r3, [r3, #0]
 80547f0:	2b00      	cmp	r3, #0
 80547f2:	d1f5      	bne.n	80547e0 <__sinit+0xc>
 80547f4:	f7ff ffc4 	bl	8054780 <global_stdio_init.part.0>
 80547f8:	e7f2      	b.n	80547e0 <__sinit+0xc>
 80547fa:	bf00      	nop
 80547fc:	08054741 	.word	0x08054741
 8054800:	20023a64 	.word	0x20023a64

08054804 <_fwalk_sglue>:
 8054804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8054808:	4607      	mov	r7, r0
 805480a:	4688      	mov	r8, r1
 805480c:	4614      	mov	r4, r2
 805480e:	2600      	movs	r6, #0
 8054810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8054814:	f1b9 0901 	subs.w	r9, r9, #1
 8054818:	d505      	bpl.n	8054826 <_fwalk_sglue+0x22>
 805481a:	6824      	ldr	r4, [r4, #0]
 805481c:	2c00      	cmp	r4, #0
 805481e:	d1f7      	bne.n	8054810 <_fwalk_sglue+0xc>
 8054820:	4630      	mov	r0, r6
 8054822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8054826:	89ab      	ldrh	r3, [r5, #12]
 8054828:	2b01      	cmp	r3, #1
 805482a:	d907      	bls.n	805483c <_fwalk_sglue+0x38>
 805482c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8054830:	3301      	adds	r3, #1
 8054832:	d003      	beq.n	805483c <_fwalk_sglue+0x38>
 8054834:	4629      	mov	r1, r5
 8054836:	4638      	mov	r0, r7
 8054838:	47c0      	blx	r8
 805483a:	4306      	orrs	r6, r0
 805483c:	3568      	adds	r5, #104	; 0x68
 805483e:	e7e9      	b.n	8054814 <_fwalk_sglue+0x10>

08054840 <iprintf>:
 8054840:	b40f      	push	{r0, r1, r2, r3}
 8054842:	b507      	push	{r0, r1, r2, lr}
 8054844:	4906      	ldr	r1, [pc, #24]	; (8054860 <iprintf+0x20>)
 8054846:	ab04      	add	r3, sp, #16
 8054848:	6808      	ldr	r0, [r1, #0]
 805484a:	f853 2b04 	ldr.w	r2, [r3], #4
 805484e:	6881      	ldr	r1, [r0, #8]
 8054850:	9301      	str	r3, [sp, #4]
 8054852:	f000 fb6d 	bl	8054f30 <_vfiprintf_r>
 8054856:	b003      	add	sp, #12
 8054858:	f85d eb04 	ldr.w	lr, [sp], #4
 805485c:	b004      	add	sp, #16
 805485e:	4770      	bx	lr
 8054860:	20000088 	.word	0x20000088

08054864 <_puts_r>:
 8054864:	6a03      	ldr	r3, [r0, #32]
 8054866:	b570      	push	{r4, r5, r6, lr}
 8054868:	6884      	ldr	r4, [r0, #8]
 805486a:	4605      	mov	r5, r0
 805486c:	460e      	mov	r6, r1
 805486e:	b90b      	cbnz	r3, 8054874 <_puts_r+0x10>
 8054870:	f7ff ffb0 	bl	80547d4 <__sinit>
 8054874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8054876:	07db      	lsls	r3, r3, #31
 8054878:	d405      	bmi.n	8054886 <_puts_r+0x22>
 805487a:	89a3      	ldrh	r3, [r4, #12]
 805487c:	0598      	lsls	r0, r3, #22
 805487e:	d402      	bmi.n	8054886 <_puts_r+0x22>
 8054880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8054882:	f000 f9fc 	bl	8054c7e <__retarget_lock_acquire_recursive>
 8054886:	89a3      	ldrh	r3, [r4, #12]
 8054888:	0719      	lsls	r1, r3, #28
 805488a:	d513      	bpl.n	80548b4 <_puts_r+0x50>
 805488c:	6923      	ldr	r3, [r4, #16]
 805488e:	b18b      	cbz	r3, 80548b4 <_puts_r+0x50>
 8054890:	3e01      	subs	r6, #1
 8054892:	68a3      	ldr	r3, [r4, #8]
 8054894:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8054898:	3b01      	subs	r3, #1
 805489a:	60a3      	str	r3, [r4, #8]
 805489c:	b9e9      	cbnz	r1, 80548da <_puts_r+0x76>
 805489e:	2b00      	cmp	r3, #0
 80548a0:	da2e      	bge.n	8054900 <_puts_r+0x9c>
 80548a2:	4622      	mov	r2, r4
 80548a4:	210a      	movs	r1, #10
 80548a6:	4628      	mov	r0, r5
 80548a8:	f000 f87b 	bl	80549a2 <__swbuf_r>
 80548ac:	3001      	adds	r0, #1
 80548ae:	d007      	beq.n	80548c0 <_puts_r+0x5c>
 80548b0:	250a      	movs	r5, #10
 80548b2:	e007      	b.n	80548c4 <_puts_r+0x60>
 80548b4:	4621      	mov	r1, r4
 80548b6:	4628      	mov	r0, r5
 80548b8:	f000 f8b0 	bl	8054a1c <__swsetup_r>
 80548bc:	2800      	cmp	r0, #0
 80548be:	d0e7      	beq.n	8054890 <_puts_r+0x2c>
 80548c0:	f04f 35ff 	mov.w	r5, #4294967295
 80548c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80548c6:	07da      	lsls	r2, r3, #31
 80548c8:	d405      	bmi.n	80548d6 <_puts_r+0x72>
 80548ca:	89a3      	ldrh	r3, [r4, #12]
 80548cc:	059b      	lsls	r3, r3, #22
 80548ce:	d402      	bmi.n	80548d6 <_puts_r+0x72>
 80548d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80548d2:	f000 f9d5 	bl	8054c80 <__retarget_lock_release_recursive>
 80548d6:	4628      	mov	r0, r5
 80548d8:	bd70      	pop	{r4, r5, r6, pc}
 80548da:	2b00      	cmp	r3, #0
 80548dc:	da04      	bge.n	80548e8 <_puts_r+0x84>
 80548de:	69a2      	ldr	r2, [r4, #24]
 80548e0:	429a      	cmp	r2, r3
 80548e2:	dc06      	bgt.n	80548f2 <_puts_r+0x8e>
 80548e4:	290a      	cmp	r1, #10
 80548e6:	d004      	beq.n	80548f2 <_puts_r+0x8e>
 80548e8:	6823      	ldr	r3, [r4, #0]
 80548ea:	1c5a      	adds	r2, r3, #1
 80548ec:	6022      	str	r2, [r4, #0]
 80548ee:	7019      	strb	r1, [r3, #0]
 80548f0:	e7cf      	b.n	8054892 <_puts_r+0x2e>
 80548f2:	4622      	mov	r2, r4
 80548f4:	4628      	mov	r0, r5
 80548f6:	f000 f854 	bl	80549a2 <__swbuf_r>
 80548fa:	3001      	adds	r0, #1
 80548fc:	d1c9      	bne.n	8054892 <_puts_r+0x2e>
 80548fe:	e7df      	b.n	80548c0 <_puts_r+0x5c>
 8054900:	6823      	ldr	r3, [r4, #0]
 8054902:	250a      	movs	r5, #10
 8054904:	1c5a      	adds	r2, r3, #1
 8054906:	6022      	str	r2, [r4, #0]
 8054908:	701d      	strb	r5, [r3, #0]
 805490a:	e7db      	b.n	80548c4 <_puts_r+0x60>

0805490c <puts>:
 805490c:	4b02      	ldr	r3, [pc, #8]	; (8054918 <puts+0xc>)
 805490e:	4601      	mov	r1, r0
 8054910:	6818      	ldr	r0, [r3, #0]
 8054912:	f7ff bfa7 	b.w	8054864 <_puts_r>
 8054916:	bf00      	nop
 8054918:	20000088 	.word	0x20000088

0805491c <__sread>:
 805491c:	b510      	push	{r4, lr}
 805491e:	460c      	mov	r4, r1
 8054920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8054924:	f000 f962 	bl	8054bec <_read_r>
 8054928:	2800      	cmp	r0, #0
 805492a:	bfab      	itete	ge
 805492c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 805492e:	89a3      	ldrhlt	r3, [r4, #12]
 8054930:	181b      	addge	r3, r3, r0
 8054932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8054936:	bfac      	ite	ge
 8054938:	6563      	strge	r3, [r4, #84]	; 0x54
 805493a:	81a3      	strhlt	r3, [r4, #12]
 805493c:	bd10      	pop	{r4, pc}

0805493e <__swrite>:
 805493e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8054942:	461f      	mov	r7, r3
 8054944:	898b      	ldrh	r3, [r1, #12]
 8054946:	05db      	lsls	r3, r3, #23
 8054948:	4605      	mov	r5, r0
 805494a:	460c      	mov	r4, r1
 805494c:	4616      	mov	r6, r2
 805494e:	d505      	bpl.n	805495c <__swrite+0x1e>
 8054950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8054954:	2302      	movs	r3, #2
 8054956:	2200      	movs	r2, #0
 8054958:	f000 f936 	bl	8054bc8 <_lseek_r>
 805495c:	89a3      	ldrh	r3, [r4, #12]
 805495e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8054962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8054966:	81a3      	strh	r3, [r4, #12]
 8054968:	4632      	mov	r2, r6
 805496a:	463b      	mov	r3, r7
 805496c:	4628      	mov	r0, r5
 805496e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8054972:	f000 b94d 	b.w	8054c10 <_write_r>

08054976 <__sseek>:
 8054976:	b510      	push	{r4, lr}
 8054978:	460c      	mov	r4, r1
 805497a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805497e:	f000 f923 	bl	8054bc8 <_lseek_r>
 8054982:	1c43      	adds	r3, r0, #1
 8054984:	89a3      	ldrh	r3, [r4, #12]
 8054986:	bf15      	itete	ne
 8054988:	6560      	strne	r0, [r4, #84]	; 0x54
 805498a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 805498e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8054992:	81a3      	strheq	r3, [r4, #12]
 8054994:	bf18      	it	ne
 8054996:	81a3      	strhne	r3, [r4, #12]
 8054998:	bd10      	pop	{r4, pc}

0805499a <__sclose>:
 805499a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805499e:	f000 b8ad 	b.w	8054afc <_close_r>

080549a2 <__swbuf_r>:
 80549a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80549a4:	460e      	mov	r6, r1
 80549a6:	4614      	mov	r4, r2
 80549a8:	4605      	mov	r5, r0
 80549aa:	b118      	cbz	r0, 80549b4 <__swbuf_r+0x12>
 80549ac:	6a03      	ldr	r3, [r0, #32]
 80549ae:	b90b      	cbnz	r3, 80549b4 <__swbuf_r+0x12>
 80549b0:	f7ff ff10 	bl	80547d4 <__sinit>
 80549b4:	69a3      	ldr	r3, [r4, #24]
 80549b6:	60a3      	str	r3, [r4, #8]
 80549b8:	89a3      	ldrh	r3, [r4, #12]
 80549ba:	071a      	lsls	r2, r3, #28
 80549bc:	d525      	bpl.n	8054a0a <__swbuf_r+0x68>
 80549be:	6923      	ldr	r3, [r4, #16]
 80549c0:	b31b      	cbz	r3, 8054a0a <__swbuf_r+0x68>
 80549c2:	6823      	ldr	r3, [r4, #0]
 80549c4:	6922      	ldr	r2, [r4, #16]
 80549c6:	1a98      	subs	r0, r3, r2
 80549c8:	6963      	ldr	r3, [r4, #20]
 80549ca:	b2f6      	uxtb	r6, r6
 80549cc:	4283      	cmp	r3, r0
 80549ce:	4637      	mov	r7, r6
 80549d0:	dc04      	bgt.n	80549dc <__swbuf_r+0x3a>
 80549d2:	4621      	mov	r1, r4
 80549d4:	4628      	mov	r0, r5
 80549d6:	f000 fddb 	bl	8055590 <_fflush_r>
 80549da:	b9e0      	cbnz	r0, 8054a16 <__swbuf_r+0x74>
 80549dc:	68a3      	ldr	r3, [r4, #8]
 80549de:	3b01      	subs	r3, #1
 80549e0:	60a3      	str	r3, [r4, #8]
 80549e2:	6823      	ldr	r3, [r4, #0]
 80549e4:	1c5a      	adds	r2, r3, #1
 80549e6:	6022      	str	r2, [r4, #0]
 80549e8:	701e      	strb	r6, [r3, #0]
 80549ea:	6962      	ldr	r2, [r4, #20]
 80549ec:	1c43      	adds	r3, r0, #1
 80549ee:	429a      	cmp	r2, r3
 80549f0:	d004      	beq.n	80549fc <__swbuf_r+0x5a>
 80549f2:	89a3      	ldrh	r3, [r4, #12]
 80549f4:	07db      	lsls	r3, r3, #31
 80549f6:	d506      	bpl.n	8054a06 <__swbuf_r+0x64>
 80549f8:	2e0a      	cmp	r6, #10
 80549fa:	d104      	bne.n	8054a06 <__swbuf_r+0x64>
 80549fc:	4621      	mov	r1, r4
 80549fe:	4628      	mov	r0, r5
 8054a00:	f000 fdc6 	bl	8055590 <_fflush_r>
 8054a04:	b938      	cbnz	r0, 8054a16 <__swbuf_r+0x74>
 8054a06:	4638      	mov	r0, r7
 8054a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8054a0a:	4621      	mov	r1, r4
 8054a0c:	4628      	mov	r0, r5
 8054a0e:	f000 f805 	bl	8054a1c <__swsetup_r>
 8054a12:	2800      	cmp	r0, #0
 8054a14:	d0d5      	beq.n	80549c2 <__swbuf_r+0x20>
 8054a16:	f04f 37ff 	mov.w	r7, #4294967295
 8054a1a:	e7f4      	b.n	8054a06 <__swbuf_r+0x64>

08054a1c <__swsetup_r>:
 8054a1c:	b538      	push	{r3, r4, r5, lr}
 8054a1e:	4b2a      	ldr	r3, [pc, #168]	; (8054ac8 <__swsetup_r+0xac>)
 8054a20:	4605      	mov	r5, r0
 8054a22:	6818      	ldr	r0, [r3, #0]
 8054a24:	460c      	mov	r4, r1
 8054a26:	b118      	cbz	r0, 8054a30 <__swsetup_r+0x14>
 8054a28:	6a03      	ldr	r3, [r0, #32]
 8054a2a:	b90b      	cbnz	r3, 8054a30 <__swsetup_r+0x14>
 8054a2c:	f7ff fed2 	bl	80547d4 <__sinit>
 8054a30:	89a3      	ldrh	r3, [r4, #12]
 8054a32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8054a36:	0718      	lsls	r0, r3, #28
 8054a38:	d422      	bmi.n	8054a80 <__swsetup_r+0x64>
 8054a3a:	06d9      	lsls	r1, r3, #27
 8054a3c:	d407      	bmi.n	8054a4e <__swsetup_r+0x32>
 8054a3e:	2309      	movs	r3, #9
 8054a40:	602b      	str	r3, [r5, #0]
 8054a42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8054a46:	81a3      	strh	r3, [r4, #12]
 8054a48:	f04f 30ff 	mov.w	r0, #4294967295
 8054a4c:	e034      	b.n	8054ab8 <__swsetup_r+0x9c>
 8054a4e:	0758      	lsls	r0, r3, #29
 8054a50:	d512      	bpl.n	8054a78 <__swsetup_r+0x5c>
 8054a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8054a54:	b141      	cbz	r1, 8054a68 <__swsetup_r+0x4c>
 8054a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8054a5a:	4299      	cmp	r1, r3
 8054a5c:	d002      	beq.n	8054a64 <__swsetup_r+0x48>
 8054a5e:	4628      	mov	r0, r5
 8054a60:	f000 f93c 	bl	8054cdc <_free_r>
 8054a64:	2300      	movs	r3, #0
 8054a66:	6363      	str	r3, [r4, #52]	; 0x34
 8054a68:	89a3      	ldrh	r3, [r4, #12]
 8054a6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8054a6e:	81a3      	strh	r3, [r4, #12]
 8054a70:	2300      	movs	r3, #0
 8054a72:	6063      	str	r3, [r4, #4]
 8054a74:	6923      	ldr	r3, [r4, #16]
 8054a76:	6023      	str	r3, [r4, #0]
 8054a78:	89a3      	ldrh	r3, [r4, #12]
 8054a7a:	f043 0308 	orr.w	r3, r3, #8
 8054a7e:	81a3      	strh	r3, [r4, #12]
 8054a80:	6923      	ldr	r3, [r4, #16]
 8054a82:	b94b      	cbnz	r3, 8054a98 <__swsetup_r+0x7c>
 8054a84:	89a3      	ldrh	r3, [r4, #12]
 8054a86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8054a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8054a8e:	d003      	beq.n	8054a98 <__swsetup_r+0x7c>
 8054a90:	4621      	mov	r1, r4
 8054a92:	4628      	mov	r0, r5
 8054a94:	f000 fddc 	bl	8055650 <__smakebuf_r>
 8054a98:	89a0      	ldrh	r0, [r4, #12]
 8054a9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8054a9e:	f010 0301 	ands.w	r3, r0, #1
 8054aa2:	d00a      	beq.n	8054aba <__swsetup_r+0x9e>
 8054aa4:	2300      	movs	r3, #0
 8054aa6:	60a3      	str	r3, [r4, #8]
 8054aa8:	6963      	ldr	r3, [r4, #20]
 8054aaa:	425b      	negs	r3, r3
 8054aac:	61a3      	str	r3, [r4, #24]
 8054aae:	6923      	ldr	r3, [r4, #16]
 8054ab0:	b943      	cbnz	r3, 8054ac4 <__swsetup_r+0xa8>
 8054ab2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8054ab6:	d1c4      	bne.n	8054a42 <__swsetup_r+0x26>
 8054ab8:	bd38      	pop	{r3, r4, r5, pc}
 8054aba:	0781      	lsls	r1, r0, #30
 8054abc:	bf58      	it	pl
 8054abe:	6963      	ldrpl	r3, [r4, #20]
 8054ac0:	60a3      	str	r3, [r4, #8]
 8054ac2:	e7f4      	b.n	8054aae <__swsetup_r+0x92>
 8054ac4:	2000      	movs	r0, #0
 8054ac6:	e7f7      	b.n	8054ab8 <__swsetup_r+0x9c>
 8054ac8:	20000088 	.word	0x20000088

08054acc <memcmp>:
 8054acc:	b510      	push	{r4, lr}
 8054ace:	3901      	subs	r1, #1
 8054ad0:	4402      	add	r2, r0
 8054ad2:	4290      	cmp	r0, r2
 8054ad4:	d101      	bne.n	8054ada <memcmp+0xe>
 8054ad6:	2000      	movs	r0, #0
 8054ad8:	e005      	b.n	8054ae6 <memcmp+0x1a>
 8054ada:	7803      	ldrb	r3, [r0, #0]
 8054adc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8054ae0:	42a3      	cmp	r3, r4
 8054ae2:	d001      	beq.n	8054ae8 <memcmp+0x1c>
 8054ae4:	1b18      	subs	r0, r3, r4
 8054ae6:	bd10      	pop	{r4, pc}
 8054ae8:	3001      	adds	r0, #1
 8054aea:	e7f2      	b.n	8054ad2 <memcmp+0x6>

08054aec <memset>:
 8054aec:	4402      	add	r2, r0
 8054aee:	4603      	mov	r3, r0
 8054af0:	4293      	cmp	r3, r2
 8054af2:	d100      	bne.n	8054af6 <memset+0xa>
 8054af4:	4770      	bx	lr
 8054af6:	f803 1b01 	strb.w	r1, [r3], #1
 8054afa:	e7f9      	b.n	8054af0 <memset+0x4>

08054afc <_close_r>:
 8054afc:	b538      	push	{r3, r4, r5, lr}
 8054afe:	4d06      	ldr	r5, [pc, #24]	; (8054b18 <_close_r+0x1c>)
 8054b00:	2300      	movs	r3, #0
 8054b02:	4604      	mov	r4, r0
 8054b04:	4608      	mov	r0, r1
 8054b06:	602b      	str	r3, [r5, #0]
 8054b08:	f7ec fc27 	bl	804135a <_close>
 8054b0c:	1c43      	adds	r3, r0, #1
 8054b0e:	d102      	bne.n	8054b16 <_close_r+0x1a>
 8054b10:	682b      	ldr	r3, [r5, #0]
 8054b12:	b103      	cbz	r3, 8054b16 <_close_r+0x1a>
 8054b14:	6023      	str	r3, [r4, #0]
 8054b16:	bd38      	pop	{r3, r4, r5, pc}
 8054b18:	20023a68 	.word	0x20023a68

08054b1c <_reclaim_reent>:
 8054b1c:	4b29      	ldr	r3, [pc, #164]	; (8054bc4 <_reclaim_reent+0xa8>)
 8054b1e:	681b      	ldr	r3, [r3, #0]
 8054b20:	4283      	cmp	r3, r0
 8054b22:	b570      	push	{r4, r5, r6, lr}
 8054b24:	4604      	mov	r4, r0
 8054b26:	d04b      	beq.n	8054bc0 <_reclaim_reent+0xa4>
 8054b28:	69c3      	ldr	r3, [r0, #28]
 8054b2a:	b143      	cbz	r3, 8054b3e <_reclaim_reent+0x22>
 8054b2c:	68db      	ldr	r3, [r3, #12]
 8054b2e:	2b00      	cmp	r3, #0
 8054b30:	d144      	bne.n	8054bbc <_reclaim_reent+0xa0>
 8054b32:	69e3      	ldr	r3, [r4, #28]
 8054b34:	6819      	ldr	r1, [r3, #0]
 8054b36:	b111      	cbz	r1, 8054b3e <_reclaim_reent+0x22>
 8054b38:	4620      	mov	r0, r4
 8054b3a:	f000 f8cf 	bl	8054cdc <_free_r>
 8054b3e:	6961      	ldr	r1, [r4, #20]
 8054b40:	b111      	cbz	r1, 8054b48 <_reclaim_reent+0x2c>
 8054b42:	4620      	mov	r0, r4
 8054b44:	f000 f8ca 	bl	8054cdc <_free_r>
 8054b48:	69e1      	ldr	r1, [r4, #28]
 8054b4a:	b111      	cbz	r1, 8054b52 <_reclaim_reent+0x36>
 8054b4c:	4620      	mov	r0, r4
 8054b4e:	f000 f8c5 	bl	8054cdc <_free_r>
 8054b52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8054b54:	b111      	cbz	r1, 8054b5c <_reclaim_reent+0x40>
 8054b56:	4620      	mov	r0, r4
 8054b58:	f000 f8c0 	bl	8054cdc <_free_r>
 8054b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8054b5e:	b111      	cbz	r1, 8054b66 <_reclaim_reent+0x4a>
 8054b60:	4620      	mov	r0, r4
 8054b62:	f000 f8bb 	bl	8054cdc <_free_r>
 8054b66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8054b68:	b111      	cbz	r1, 8054b70 <_reclaim_reent+0x54>
 8054b6a:	4620      	mov	r0, r4
 8054b6c:	f000 f8b6 	bl	8054cdc <_free_r>
 8054b70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8054b72:	b111      	cbz	r1, 8054b7a <_reclaim_reent+0x5e>
 8054b74:	4620      	mov	r0, r4
 8054b76:	f000 f8b1 	bl	8054cdc <_free_r>
 8054b7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8054b7c:	b111      	cbz	r1, 8054b84 <_reclaim_reent+0x68>
 8054b7e:	4620      	mov	r0, r4
 8054b80:	f000 f8ac 	bl	8054cdc <_free_r>
 8054b84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8054b86:	b111      	cbz	r1, 8054b8e <_reclaim_reent+0x72>
 8054b88:	4620      	mov	r0, r4
 8054b8a:	f000 f8a7 	bl	8054cdc <_free_r>
 8054b8e:	6a23      	ldr	r3, [r4, #32]
 8054b90:	b1b3      	cbz	r3, 8054bc0 <_reclaim_reent+0xa4>
 8054b92:	4620      	mov	r0, r4
 8054b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8054b98:	4718      	bx	r3
 8054b9a:	5949      	ldr	r1, [r1, r5]
 8054b9c:	b941      	cbnz	r1, 8054bb0 <_reclaim_reent+0x94>
 8054b9e:	3504      	adds	r5, #4
 8054ba0:	69e3      	ldr	r3, [r4, #28]
 8054ba2:	2d80      	cmp	r5, #128	; 0x80
 8054ba4:	68d9      	ldr	r1, [r3, #12]
 8054ba6:	d1f8      	bne.n	8054b9a <_reclaim_reent+0x7e>
 8054ba8:	4620      	mov	r0, r4
 8054baa:	f000 f897 	bl	8054cdc <_free_r>
 8054bae:	e7c0      	b.n	8054b32 <_reclaim_reent+0x16>
 8054bb0:	680e      	ldr	r6, [r1, #0]
 8054bb2:	4620      	mov	r0, r4
 8054bb4:	f000 f892 	bl	8054cdc <_free_r>
 8054bb8:	4631      	mov	r1, r6
 8054bba:	e7ef      	b.n	8054b9c <_reclaim_reent+0x80>
 8054bbc:	2500      	movs	r5, #0
 8054bbe:	e7ef      	b.n	8054ba0 <_reclaim_reent+0x84>
 8054bc0:	bd70      	pop	{r4, r5, r6, pc}
 8054bc2:	bf00      	nop
 8054bc4:	20000088 	.word	0x20000088

08054bc8 <_lseek_r>:
 8054bc8:	b538      	push	{r3, r4, r5, lr}
 8054bca:	4d07      	ldr	r5, [pc, #28]	; (8054be8 <_lseek_r+0x20>)
 8054bcc:	4604      	mov	r4, r0
 8054bce:	4608      	mov	r0, r1
 8054bd0:	4611      	mov	r1, r2
 8054bd2:	2200      	movs	r2, #0
 8054bd4:	602a      	str	r2, [r5, #0]
 8054bd6:	461a      	mov	r2, r3
 8054bd8:	f7ec fbe6 	bl	80413a8 <_lseek>
 8054bdc:	1c43      	adds	r3, r0, #1
 8054bde:	d102      	bne.n	8054be6 <_lseek_r+0x1e>
 8054be0:	682b      	ldr	r3, [r5, #0]
 8054be2:	b103      	cbz	r3, 8054be6 <_lseek_r+0x1e>
 8054be4:	6023      	str	r3, [r4, #0]
 8054be6:	bd38      	pop	{r3, r4, r5, pc}
 8054be8:	20023a68 	.word	0x20023a68

08054bec <_read_r>:
 8054bec:	b538      	push	{r3, r4, r5, lr}
 8054bee:	4d07      	ldr	r5, [pc, #28]	; (8054c0c <_read_r+0x20>)
 8054bf0:	4604      	mov	r4, r0
 8054bf2:	4608      	mov	r0, r1
 8054bf4:	4611      	mov	r1, r2
 8054bf6:	2200      	movs	r2, #0
 8054bf8:	602a      	str	r2, [r5, #0]
 8054bfa:	461a      	mov	r2, r3
 8054bfc:	f7ec fb90 	bl	8041320 <_read>
 8054c00:	1c43      	adds	r3, r0, #1
 8054c02:	d102      	bne.n	8054c0a <_read_r+0x1e>
 8054c04:	682b      	ldr	r3, [r5, #0]
 8054c06:	b103      	cbz	r3, 8054c0a <_read_r+0x1e>
 8054c08:	6023      	str	r3, [r4, #0]
 8054c0a:	bd38      	pop	{r3, r4, r5, pc}
 8054c0c:	20023a68 	.word	0x20023a68

08054c10 <_write_r>:
 8054c10:	b538      	push	{r3, r4, r5, lr}
 8054c12:	4d07      	ldr	r5, [pc, #28]	; (8054c30 <_write_r+0x20>)
 8054c14:	4604      	mov	r4, r0
 8054c16:	4608      	mov	r0, r1
 8054c18:	4611      	mov	r1, r2
 8054c1a:	2200      	movs	r2, #0
 8054c1c:	602a      	str	r2, [r5, #0]
 8054c1e:	461a      	mov	r2, r3
 8054c20:	f7ec fa54 	bl	80410cc <_write>
 8054c24:	1c43      	adds	r3, r0, #1
 8054c26:	d102      	bne.n	8054c2e <_write_r+0x1e>
 8054c28:	682b      	ldr	r3, [r5, #0]
 8054c2a:	b103      	cbz	r3, 8054c2e <_write_r+0x1e>
 8054c2c:	6023      	str	r3, [r4, #0]
 8054c2e:	bd38      	pop	{r3, r4, r5, pc}
 8054c30:	20023a68 	.word	0x20023a68

08054c34 <__libc_init_array>:
 8054c34:	b570      	push	{r4, r5, r6, lr}
 8054c36:	4d0d      	ldr	r5, [pc, #52]	; (8054c6c <__libc_init_array+0x38>)
 8054c38:	4c0d      	ldr	r4, [pc, #52]	; (8054c70 <__libc_init_array+0x3c>)
 8054c3a:	1b64      	subs	r4, r4, r5
 8054c3c:	10a4      	asrs	r4, r4, #2
 8054c3e:	2600      	movs	r6, #0
 8054c40:	42a6      	cmp	r6, r4
 8054c42:	d109      	bne.n	8054c58 <__libc_init_array+0x24>
 8054c44:	4d0b      	ldr	r5, [pc, #44]	; (8054c74 <__libc_init_array+0x40>)
 8054c46:	4c0c      	ldr	r4, [pc, #48]	; (8054c78 <__libc_init_array+0x44>)
 8054c48:	f000 fdbc 	bl	80557c4 <_init>
 8054c4c:	1b64      	subs	r4, r4, r5
 8054c4e:	10a4      	asrs	r4, r4, #2
 8054c50:	2600      	movs	r6, #0
 8054c52:	42a6      	cmp	r6, r4
 8054c54:	d105      	bne.n	8054c62 <__libc_init_array+0x2e>
 8054c56:	bd70      	pop	{r4, r5, r6, pc}
 8054c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8054c5c:	4798      	blx	r3
 8054c5e:	3601      	adds	r6, #1
 8054c60:	e7ee      	b.n	8054c40 <__libc_init_array+0xc>
 8054c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8054c66:	4798      	blx	r3
 8054c68:	3601      	adds	r6, #1
 8054c6a:	e7f2      	b.n	8054c52 <__libc_init_array+0x1e>
 8054c6c:	0805867c 	.word	0x0805867c
 8054c70:	0805867c 	.word	0x0805867c
 8054c74:	0805867c 	.word	0x0805867c
 8054c78:	08058680 	.word	0x08058680

08054c7c <__retarget_lock_init_recursive>:
 8054c7c:	4770      	bx	lr

08054c7e <__retarget_lock_acquire_recursive>:
 8054c7e:	4770      	bx	lr

08054c80 <__retarget_lock_release_recursive>:
 8054c80:	4770      	bx	lr

08054c82 <memcpy>:
 8054c82:	440a      	add	r2, r1
 8054c84:	4291      	cmp	r1, r2
 8054c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8054c8a:	d100      	bne.n	8054c8e <memcpy+0xc>
 8054c8c:	4770      	bx	lr
 8054c8e:	b510      	push	{r4, lr}
 8054c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8054c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8054c98:	4291      	cmp	r1, r2
 8054c9a:	d1f9      	bne.n	8054c90 <memcpy+0xe>
 8054c9c:	bd10      	pop	{r4, pc}
	...

08054ca0 <__assert_func>:
 8054ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8054ca2:	4614      	mov	r4, r2
 8054ca4:	461a      	mov	r2, r3
 8054ca6:	4b09      	ldr	r3, [pc, #36]	; (8054ccc <__assert_func+0x2c>)
 8054ca8:	681b      	ldr	r3, [r3, #0]
 8054caa:	4605      	mov	r5, r0
 8054cac:	68d8      	ldr	r0, [r3, #12]
 8054cae:	b14c      	cbz	r4, 8054cc4 <__assert_func+0x24>
 8054cb0:	4b07      	ldr	r3, [pc, #28]	; (8054cd0 <__assert_func+0x30>)
 8054cb2:	9100      	str	r1, [sp, #0]
 8054cb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8054cb8:	4906      	ldr	r1, [pc, #24]	; (8054cd4 <__assert_func+0x34>)
 8054cba:	462b      	mov	r3, r5
 8054cbc:	f000 fc90 	bl	80555e0 <fiprintf>
 8054cc0:	f000 fd34 	bl	805572c <abort>
 8054cc4:	4b04      	ldr	r3, [pc, #16]	; (8054cd8 <__assert_func+0x38>)
 8054cc6:	461c      	mov	r4, r3
 8054cc8:	e7f3      	b.n	8054cb2 <__assert_func+0x12>
 8054cca:	bf00      	nop
 8054ccc:	20000088 	.word	0x20000088
 8054cd0:	08058603 	.word	0x08058603
 8054cd4:	08058610 	.word	0x08058610
 8054cd8:	0805863e 	.word	0x0805863e

08054cdc <_free_r>:
 8054cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8054cde:	2900      	cmp	r1, #0
 8054ce0:	d044      	beq.n	8054d6c <_free_r+0x90>
 8054ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8054ce6:	9001      	str	r0, [sp, #4]
 8054ce8:	2b00      	cmp	r3, #0
 8054cea:	f1a1 0404 	sub.w	r4, r1, #4
 8054cee:	bfb8      	it	lt
 8054cf0:	18e4      	addlt	r4, r4, r3
 8054cf2:	f000 f8e7 	bl	8054ec4 <__malloc_lock>
 8054cf6:	4a1e      	ldr	r2, [pc, #120]	; (8054d70 <_free_r+0x94>)
 8054cf8:	9801      	ldr	r0, [sp, #4]
 8054cfa:	6813      	ldr	r3, [r2, #0]
 8054cfc:	b933      	cbnz	r3, 8054d0c <_free_r+0x30>
 8054cfe:	6063      	str	r3, [r4, #4]
 8054d00:	6014      	str	r4, [r2, #0]
 8054d02:	b003      	add	sp, #12
 8054d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8054d08:	f000 b8e2 	b.w	8054ed0 <__malloc_unlock>
 8054d0c:	42a3      	cmp	r3, r4
 8054d0e:	d908      	bls.n	8054d22 <_free_r+0x46>
 8054d10:	6825      	ldr	r5, [r4, #0]
 8054d12:	1961      	adds	r1, r4, r5
 8054d14:	428b      	cmp	r3, r1
 8054d16:	bf01      	itttt	eq
 8054d18:	6819      	ldreq	r1, [r3, #0]
 8054d1a:	685b      	ldreq	r3, [r3, #4]
 8054d1c:	1949      	addeq	r1, r1, r5
 8054d1e:	6021      	streq	r1, [r4, #0]
 8054d20:	e7ed      	b.n	8054cfe <_free_r+0x22>
 8054d22:	461a      	mov	r2, r3
 8054d24:	685b      	ldr	r3, [r3, #4]
 8054d26:	b10b      	cbz	r3, 8054d2c <_free_r+0x50>
 8054d28:	42a3      	cmp	r3, r4
 8054d2a:	d9fa      	bls.n	8054d22 <_free_r+0x46>
 8054d2c:	6811      	ldr	r1, [r2, #0]
 8054d2e:	1855      	adds	r5, r2, r1
 8054d30:	42a5      	cmp	r5, r4
 8054d32:	d10b      	bne.n	8054d4c <_free_r+0x70>
 8054d34:	6824      	ldr	r4, [r4, #0]
 8054d36:	4421      	add	r1, r4
 8054d38:	1854      	adds	r4, r2, r1
 8054d3a:	42a3      	cmp	r3, r4
 8054d3c:	6011      	str	r1, [r2, #0]
 8054d3e:	d1e0      	bne.n	8054d02 <_free_r+0x26>
 8054d40:	681c      	ldr	r4, [r3, #0]
 8054d42:	685b      	ldr	r3, [r3, #4]
 8054d44:	6053      	str	r3, [r2, #4]
 8054d46:	440c      	add	r4, r1
 8054d48:	6014      	str	r4, [r2, #0]
 8054d4a:	e7da      	b.n	8054d02 <_free_r+0x26>
 8054d4c:	d902      	bls.n	8054d54 <_free_r+0x78>
 8054d4e:	230c      	movs	r3, #12
 8054d50:	6003      	str	r3, [r0, #0]
 8054d52:	e7d6      	b.n	8054d02 <_free_r+0x26>
 8054d54:	6825      	ldr	r5, [r4, #0]
 8054d56:	1961      	adds	r1, r4, r5
 8054d58:	428b      	cmp	r3, r1
 8054d5a:	bf04      	itt	eq
 8054d5c:	6819      	ldreq	r1, [r3, #0]
 8054d5e:	685b      	ldreq	r3, [r3, #4]
 8054d60:	6063      	str	r3, [r4, #4]
 8054d62:	bf04      	itt	eq
 8054d64:	1949      	addeq	r1, r1, r5
 8054d66:	6021      	streq	r1, [r4, #0]
 8054d68:	6054      	str	r4, [r2, #4]
 8054d6a:	e7ca      	b.n	8054d02 <_free_r+0x26>
 8054d6c:	b003      	add	sp, #12
 8054d6e:	bd30      	pop	{r4, r5, pc}
 8054d70:	20023a70 	.word	0x20023a70

08054d74 <malloc>:
 8054d74:	4b02      	ldr	r3, [pc, #8]	; (8054d80 <malloc+0xc>)
 8054d76:	4601      	mov	r1, r0
 8054d78:	6818      	ldr	r0, [r3, #0]
 8054d7a:	f000 b823 	b.w	8054dc4 <_malloc_r>
 8054d7e:	bf00      	nop
 8054d80:	20000088 	.word	0x20000088

08054d84 <sbrk_aligned>:
 8054d84:	b570      	push	{r4, r5, r6, lr}
 8054d86:	4e0e      	ldr	r6, [pc, #56]	; (8054dc0 <sbrk_aligned+0x3c>)
 8054d88:	460c      	mov	r4, r1
 8054d8a:	6831      	ldr	r1, [r6, #0]
 8054d8c:	4605      	mov	r5, r0
 8054d8e:	b911      	cbnz	r1, 8054d96 <sbrk_aligned+0x12>
 8054d90:	f000 fcbc 	bl	805570c <_sbrk_r>
 8054d94:	6030      	str	r0, [r6, #0]
 8054d96:	4621      	mov	r1, r4
 8054d98:	4628      	mov	r0, r5
 8054d9a:	f000 fcb7 	bl	805570c <_sbrk_r>
 8054d9e:	1c43      	adds	r3, r0, #1
 8054da0:	d00a      	beq.n	8054db8 <sbrk_aligned+0x34>
 8054da2:	1cc4      	adds	r4, r0, #3
 8054da4:	f024 0403 	bic.w	r4, r4, #3
 8054da8:	42a0      	cmp	r0, r4
 8054daa:	d007      	beq.n	8054dbc <sbrk_aligned+0x38>
 8054dac:	1a21      	subs	r1, r4, r0
 8054dae:	4628      	mov	r0, r5
 8054db0:	f000 fcac 	bl	805570c <_sbrk_r>
 8054db4:	3001      	adds	r0, #1
 8054db6:	d101      	bne.n	8054dbc <sbrk_aligned+0x38>
 8054db8:	f04f 34ff 	mov.w	r4, #4294967295
 8054dbc:	4620      	mov	r0, r4
 8054dbe:	bd70      	pop	{r4, r5, r6, pc}
 8054dc0:	20023a74 	.word	0x20023a74

08054dc4 <_malloc_r>:
 8054dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8054dc8:	1ccd      	adds	r5, r1, #3
 8054dca:	f025 0503 	bic.w	r5, r5, #3
 8054dce:	3508      	adds	r5, #8
 8054dd0:	2d0c      	cmp	r5, #12
 8054dd2:	bf38      	it	cc
 8054dd4:	250c      	movcc	r5, #12
 8054dd6:	2d00      	cmp	r5, #0
 8054dd8:	4607      	mov	r7, r0
 8054dda:	db01      	blt.n	8054de0 <_malloc_r+0x1c>
 8054ddc:	42a9      	cmp	r1, r5
 8054dde:	d905      	bls.n	8054dec <_malloc_r+0x28>
 8054de0:	230c      	movs	r3, #12
 8054de2:	603b      	str	r3, [r7, #0]
 8054de4:	2600      	movs	r6, #0
 8054de6:	4630      	mov	r0, r6
 8054de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8054dec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8054ec0 <_malloc_r+0xfc>
 8054df0:	f000 f868 	bl	8054ec4 <__malloc_lock>
 8054df4:	f8d8 3000 	ldr.w	r3, [r8]
 8054df8:	461c      	mov	r4, r3
 8054dfa:	bb5c      	cbnz	r4, 8054e54 <_malloc_r+0x90>
 8054dfc:	4629      	mov	r1, r5
 8054dfe:	4638      	mov	r0, r7
 8054e00:	f7ff ffc0 	bl	8054d84 <sbrk_aligned>
 8054e04:	1c43      	adds	r3, r0, #1
 8054e06:	4604      	mov	r4, r0
 8054e08:	d155      	bne.n	8054eb6 <_malloc_r+0xf2>
 8054e0a:	f8d8 4000 	ldr.w	r4, [r8]
 8054e0e:	4626      	mov	r6, r4
 8054e10:	2e00      	cmp	r6, #0
 8054e12:	d145      	bne.n	8054ea0 <_malloc_r+0xdc>
 8054e14:	2c00      	cmp	r4, #0
 8054e16:	d048      	beq.n	8054eaa <_malloc_r+0xe6>
 8054e18:	6823      	ldr	r3, [r4, #0]
 8054e1a:	4631      	mov	r1, r6
 8054e1c:	4638      	mov	r0, r7
 8054e1e:	eb04 0903 	add.w	r9, r4, r3
 8054e22:	f000 fc73 	bl	805570c <_sbrk_r>
 8054e26:	4581      	cmp	r9, r0
 8054e28:	d13f      	bne.n	8054eaa <_malloc_r+0xe6>
 8054e2a:	6821      	ldr	r1, [r4, #0]
 8054e2c:	1a6d      	subs	r5, r5, r1
 8054e2e:	4629      	mov	r1, r5
 8054e30:	4638      	mov	r0, r7
 8054e32:	f7ff ffa7 	bl	8054d84 <sbrk_aligned>
 8054e36:	3001      	adds	r0, #1
 8054e38:	d037      	beq.n	8054eaa <_malloc_r+0xe6>
 8054e3a:	6823      	ldr	r3, [r4, #0]
 8054e3c:	442b      	add	r3, r5
 8054e3e:	6023      	str	r3, [r4, #0]
 8054e40:	f8d8 3000 	ldr.w	r3, [r8]
 8054e44:	2b00      	cmp	r3, #0
 8054e46:	d038      	beq.n	8054eba <_malloc_r+0xf6>
 8054e48:	685a      	ldr	r2, [r3, #4]
 8054e4a:	42a2      	cmp	r2, r4
 8054e4c:	d12b      	bne.n	8054ea6 <_malloc_r+0xe2>
 8054e4e:	2200      	movs	r2, #0
 8054e50:	605a      	str	r2, [r3, #4]
 8054e52:	e00f      	b.n	8054e74 <_malloc_r+0xb0>
 8054e54:	6822      	ldr	r2, [r4, #0]
 8054e56:	1b52      	subs	r2, r2, r5
 8054e58:	d41f      	bmi.n	8054e9a <_malloc_r+0xd6>
 8054e5a:	2a0b      	cmp	r2, #11
 8054e5c:	d917      	bls.n	8054e8e <_malloc_r+0xca>
 8054e5e:	1961      	adds	r1, r4, r5
 8054e60:	42a3      	cmp	r3, r4
 8054e62:	6025      	str	r5, [r4, #0]
 8054e64:	bf18      	it	ne
 8054e66:	6059      	strne	r1, [r3, #4]
 8054e68:	6863      	ldr	r3, [r4, #4]
 8054e6a:	bf08      	it	eq
 8054e6c:	f8c8 1000 	streq.w	r1, [r8]
 8054e70:	5162      	str	r2, [r4, r5]
 8054e72:	604b      	str	r3, [r1, #4]
 8054e74:	4638      	mov	r0, r7
 8054e76:	f104 060b 	add.w	r6, r4, #11
 8054e7a:	f000 f829 	bl	8054ed0 <__malloc_unlock>
 8054e7e:	f026 0607 	bic.w	r6, r6, #7
 8054e82:	1d23      	adds	r3, r4, #4
 8054e84:	1af2      	subs	r2, r6, r3
 8054e86:	d0ae      	beq.n	8054de6 <_malloc_r+0x22>
 8054e88:	1b9b      	subs	r3, r3, r6
 8054e8a:	50a3      	str	r3, [r4, r2]
 8054e8c:	e7ab      	b.n	8054de6 <_malloc_r+0x22>
 8054e8e:	42a3      	cmp	r3, r4
 8054e90:	6862      	ldr	r2, [r4, #4]
 8054e92:	d1dd      	bne.n	8054e50 <_malloc_r+0x8c>
 8054e94:	f8c8 2000 	str.w	r2, [r8]
 8054e98:	e7ec      	b.n	8054e74 <_malloc_r+0xb0>
 8054e9a:	4623      	mov	r3, r4
 8054e9c:	6864      	ldr	r4, [r4, #4]
 8054e9e:	e7ac      	b.n	8054dfa <_malloc_r+0x36>
 8054ea0:	4634      	mov	r4, r6
 8054ea2:	6876      	ldr	r6, [r6, #4]
 8054ea4:	e7b4      	b.n	8054e10 <_malloc_r+0x4c>
 8054ea6:	4613      	mov	r3, r2
 8054ea8:	e7cc      	b.n	8054e44 <_malloc_r+0x80>
 8054eaa:	230c      	movs	r3, #12
 8054eac:	603b      	str	r3, [r7, #0]
 8054eae:	4638      	mov	r0, r7
 8054eb0:	f000 f80e 	bl	8054ed0 <__malloc_unlock>
 8054eb4:	e797      	b.n	8054de6 <_malloc_r+0x22>
 8054eb6:	6025      	str	r5, [r4, #0]
 8054eb8:	e7dc      	b.n	8054e74 <_malloc_r+0xb0>
 8054eba:	605b      	str	r3, [r3, #4]
 8054ebc:	deff      	udf	#255	; 0xff
 8054ebe:	bf00      	nop
 8054ec0:	20023a70 	.word	0x20023a70

08054ec4 <__malloc_lock>:
 8054ec4:	4801      	ldr	r0, [pc, #4]	; (8054ecc <__malloc_lock+0x8>)
 8054ec6:	f7ff beda 	b.w	8054c7e <__retarget_lock_acquire_recursive>
 8054eca:	bf00      	nop
 8054ecc:	20023a6c 	.word	0x20023a6c

08054ed0 <__malloc_unlock>:
 8054ed0:	4801      	ldr	r0, [pc, #4]	; (8054ed8 <__malloc_unlock+0x8>)
 8054ed2:	f7ff bed5 	b.w	8054c80 <__retarget_lock_release_recursive>
 8054ed6:	bf00      	nop
 8054ed8:	20023a6c 	.word	0x20023a6c

08054edc <__sfputc_r>:
 8054edc:	6893      	ldr	r3, [r2, #8]
 8054ede:	3b01      	subs	r3, #1
 8054ee0:	2b00      	cmp	r3, #0
 8054ee2:	b410      	push	{r4}
 8054ee4:	6093      	str	r3, [r2, #8]
 8054ee6:	da08      	bge.n	8054efa <__sfputc_r+0x1e>
 8054ee8:	6994      	ldr	r4, [r2, #24]
 8054eea:	42a3      	cmp	r3, r4
 8054eec:	db01      	blt.n	8054ef2 <__sfputc_r+0x16>
 8054eee:	290a      	cmp	r1, #10
 8054ef0:	d103      	bne.n	8054efa <__sfputc_r+0x1e>
 8054ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8054ef6:	f7ff bd54 	b.w	80549a2 <__swbuf_r>
 8054efa:	6813      	ldr	r3, [r2, #0]
 8054efc:	1c58      	adds	r0, r3, #1
 8054efe:	6010      	str	r0, [r2, #0]
 8054f00:	7019      	strb	r1, [r3, #0]
 8054f02:	4608      	mov	r0, r1
 8054f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8054f08:	4770      	bx	lr

08054f0a <__sfputs_r>:
 8054f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8054f0c:	4606      	mov	r6, r0
 8054f0e:	460f      	mov	r7, r1
 8054f10:	4614      	mov	r4, r2
 8054f12:	18d5      	adds	r5, r2, r3
 8054f14:	42ac      	cmp	r4, r5
 8054f16:	d101      	bne.n	8054f1c <__sfputs_r+0x12>
 8054f18:	2000      	movs	r0, #0
 8054f1a:	e007      	b.n	8054f2c <__sfputs_r+0x22>
 8054f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8054f20:	463a      	mov	r2, r7
 8054f22:	4630      	mov	r0, r6
 8054f24:	f7ff ffda 	bl	8054edc <__sfputc_r>
 8054f28:	1c43      	adds	r3, r0, #1
 8054f2a:	d1f3      	bne.n	8054f14 <__sfputs_r+0xa>
 8054f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08054f30 <_vfiprintf_r>:
 8054f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8054f34:	460d      	mov	r5, r1
 8054f36:	b09d      	sub	sp, #116	; 0x74
 8054f38:	4614      	mov	r4, r2
 8054f3a:	4698      	mov	r8, r3
 8054f3c:	4606      	mov	r6, r0
 8054f3e:	b118      	cbz	r0, 8054f48 <_vfiprintf_r+0x18>
 8054f40:	6a03      	ldr	r3, [r0, #32]
 8054f42:	b90b      	cbnz	r3, 8054f48 <_vfiprintf_r+0x18>
 8054f44:	f7ff fc46 	bl	80547d4 <__sinit>
 8054f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8054f4a:	07d9      	lsls	r1, r3, #31
 8054f4c:	d405      	bmi.n	8054f5a <_vfiprintf_r+0x2a>
 8054f4e:	89ab      	ldrh	r3, [r5, #12]
 8054f50:	059a      	lsls	r2, r3, #22
 8054f52:	d402      	bmi.n	8054f5a <_vfiprintf_r+0x2a>
 8054f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8054f56:	f7ff fe92 	bl	8054c7e <__retarget_lock_acquire_recursive>
 8054f5a:	89ab      	ldrh	r3, [r5, #12]
 8054f5c:	071b      	lsls	r3, r3, #28
 8054f5e:	d501      	bpl.n	8054f64 <_vfiprintf_r+0x34>
 8054f60:	692b      	ldr	r3, [r5, #16]
 8054f62:	b99b      	cbnz	r3, 8054f8c <_vfiprintf_r+0x5c>
 8054f64:	4629      	mov	r1, r5
 8054f66:	4630      	mov	r0, r6
 8054f68:	f7ff fd58 	bl	8054a1c <__swsetup_r>
 8054f6c:	b170      	cbz	r0, 8054f8c <_vfiprintf_r+0x5c>
 8054f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8054f70:	07dc      	lsls	r4, r3, #31
 8054f72:	d504      	bpl.n	8054f7e <_vfiprintf_r+0x4e>
 8054f74:	f04f 30ff 	mov.w	r0, #4294967295
 8054f78:	b01d      	add	sp, #116	; 0x74
 8054f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8054f7e:	89ab      	ldrh	r3, [r5, #12]
 8054f80:	0598      	lsls	r0, r3, #22
 8054f82:	d4f7      	bmi.n	8054f74 <_vfiprintf_r+0x44>
 8054f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8054f86:	f7ff fe7b 	bl	8054c80 <__retarget_lock_release_recursive>
 8054f8a:	e7f3      	b.n	8054f74 <_vfiprintf_r+0x44>
 8054f8c:	2300      	movs	r3, #0
 8054f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8054f90:	2320      	movs	r3, #32
 8054f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8054f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8054f9a:	2330      	movs	r3, #48	; 0x30
 8054f9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8055150 <_vfiprintf_r+0x220>
 8054fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8054fa4:	f04f 0901 	mov.w	r9, #1
 8054fa8:	4623      	mov	r3, r4
 8054faa:	469a      	mov	sl, r3
 8054fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8054fb0:	b10a      	cbz	r2, 8054fb6 <_vfiprintf_r+0x86>
 8054fb2:	2a25      	cmp	r2, #37	; 0x25
 8054fb4:	d1f9      	bne.n	8054faa <_vfiprintf_r+0x7a>
 8054fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8054fba:	d00b      	beq.n	8054fd4 <_vfiprintf_r+0xa4>
 8054fbc:	465b      	mov	r3, fp
 8054fbe:	4622      	mov	r2, r4
 8054fc0:	4629      	mov	r1, r5
 8054fc2:	4630      	mov	r0, r6
 8054fc4:	f7ff ffa1 	bl	8054f0a <__sfputs_r>
 8054fc8:	3001      	adds	r0, #1
 8054fca:	f000 80a9 	beq.w	8055120 <_vfiprintf_r+0x1f0>
 8054fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8054fd0:	445a      	add	r2, fp
 8054fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8054fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8054fd8:	2b00      	cmp	r3, #0
 8054fda:	f000 80a1 	beq.w	8055120 <_vfiprintf_r+0x1f0>
 8054fde:	2300      	movs	r3, #0
 8054fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8054fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8054fe8:	f10a 0a01 	add.w	sl, sl, #1
 8054fec:	9304      	str	r3, [sp, #16]
 8054fee:	9307      	str	r3, [sp, #28]
 8054ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8054ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8054ff6:	4654      	mov	r4, sl
 8054ff8:	2205      	movs	r2, #5
 8054ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8054ffe:	4854      	ldr	r0, [pc, #336]	; (8055150 <_vfiprintf_r+0x220>)
 8055000:	f7eb f91e 	bl	8040240 <memchr>
 8055004:	9a04      	ldr	r2, [sp, #16]
 8055006:	b9d8      	cbnz	r0, 8055040 <_vfiprintf_r+0x110>
 8055008:	06d1      	lsls	r1, r2, #27
 805500a:	bf44      	itt	mi
 805500c:	2320      	movmi	r3, #32
 805500e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8055012:	0713      	lsls	r3, r2, #28
 8055014:	bf44      	itt	mi
 8055016:	232b      	movmi	r3, #43	; 0x2b
 8055018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805501c:	f89a 3000 	ldrb.w	r3, [sl]
 8055020:	2b2a      	cmp	r3, #42	; 0x2a
 8055022:	d015      	beq.n	8055050 <_vfiprintf_r+0x120>
 8055024:	9a07      	ldr	r2, [sp, #28]
 8055026:	4654      	mov	r4, sl
 8055028:	2000      	movs	r0, #0
 805502a:	f04f 0c0a 	mov.w	ip, #10
 805502e:	4621      	mov	r1, r4
 8055030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8055034:	3b30      	subs	r3, #48	; 0x30
 8055036:	2b09      	cmp	r3, #9
 8055038:	d94d      	bls.n	80550d6 <_vfiprintf_r+0x1a6>
 805503a:	b1b0      	cbz	r0, 805506a <_vfiprintf_r+0x13a>
 805503c:	9207      	str	r2, [sp, #28]
 805503e:	e014      	b.n	805506a <_vfiprintf_r+0x13a>
 8055040:	eba0 0308 	sub.w	r3, r0, r8
 8055044:	fa09 f303 	lsl.w	r3, r9, r3
 8055048:	4313      	orrs	r3, r2
 805504a:	9304      	str	r3, [sp, #16]
 805504c:	46a2      	mov	sl, r4
 805504e:	e7d2      	b.n	8054ff6 <_vfiprintf_r+0xc6>
 8055050:	9b03      	ldr	r3, [sp, #12]
 8055052:	1d19      	adds	r1, r3, #4
 8055054:	681b      	ldr	r3, [r3, #0]
 8055056:	9103      	str	r1, [sp, #12]
 8055058:	2b00      	cmp	r3, #0
 805505a:	bfbb      	ittet	lt
 805505c:	425b      	neglt	r3, r3
 805505e:	f042 0202 	orrlt.w	r2, r2, #2
 8055062:	9307      	strge	r3, [sp, #28]
 8055064:	9307      	strlt	r3, [sp, #28]
 8055066:	bfb8      	it	lt
 8055068:	9204      	strlt	r2, [sp, #16]
 805506a:	7823      	ldrb	r3, [r4, #0]
 805506c:	2b2e      	cmp	r3, #46	; 0x2e
 805506e:	d10c      	bne.n	805508a <_vfiprintf_r+0x15a>
 8055070:	7863      	ldrb	r3, [r4, #1]
 8055072:	2b2a      	cmp	r3, #42	; 0x2a
 8055074:	d134      	bne.n	80550e0 <_vfiprintf_r+0x1b0>
 8055076:	9b03      	ldr	r3, [sp, #12]
 8055078:	1d1a      	adds	r2, r3, #4
 805507a:	681b      	ldr	r3, [r3, #0]
 805507c:	9203      	str	r2, [sp, #12]
 805507e:	2b00      	cmp	r3, #0
 8055080:	bfb8      	it	lt
 8055082:	f04f 33ff 	movlt.w	r3, #4294967295
 8055086:	3402      	adds	r4, #2
 8055088:	9305      	str	r3, [sp, #20]
 805508a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8055160 <_vfiprintf_r+0x230>
 805508e:	7821      	ldrb	r1, [r4, #0]
 8055090:	2203      	movs	r2, #3
 8055092:	4650      	mov	r0, sl
 8055094:	f7eb f8d4 	bl	8040240 <memchr>
 8055098:	b138      	cbz	r0, 80550aa <_vfiprintf_r+0x17a>
 805509a:	9b04      	ldr	r3, [sp, #16]
 805509c:	eba0 000a 	sub.w	r0, r0, sl
 80550a0:	2240      	movs	r2, #64	; 0x40
 80550a2:	4082      	lsls	r2, r0
 80550a4:	4313      	orrs	r3, r2
 80550a6:	3401      	adds	r4, #1
 80550a8:	9304      	str	r3, [sp, #16]
 80550aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80550ae:	4829      	ldr	r0, [pc, #164]	; (8055154 <_vfiprintf_r+0x224>)
 80550b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80550b4:	2206      	movs	r2, #6
 80550b6:	f7eb f8c3 	bl	8040240 <memchr>
 80550ba:	2800      	cmp	r0, #0
 80550bc:	d03f      	beq.n	805513e <_vfiprintf_r+0x20e>
 80550be:	4b26      	ldr	r3, [pc, #152]	; (8055158 <_vfiprintf_r+0x228>)
 80550c0:	bb1b      	cbnz	r3, 805510a <_vfiprintf_r+0x1da>
 80550c2:	9b03      	ldr	r3, [sp, #12]
 80550c4:	3307      	adds	r3, #7
 80550c6:	f023 0307 	bic.w	r3, r3, #7
 80550ca:	3308      	adds	r3, #8
 80550cc:	9303      	str	r3, [sp, #12]
 80550ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80550d0:	443b      	add	r3, r7
 80550d2:	9309      	str	r3, [sp, #36]	; 0x24
 80550d4:	e768      	b.n	8054fa8 <_vfiprintf_r+0x78>
 80550d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80550da:	460c      	mov	r4, r1
 80550dc:	2001      	movs	r0, #1
 80550de:	e7a6      	b.n	805502e <_vfiprintf_r+0xfe>
 80550e0:	2300      	movs	r3, #0
 80550e2:	3401      	adds	r4, #1
 80550e4:	9305      	str	r3, [sp, #20]
 80550e6:	4619      	mov	r1, r3
 80550e8:	f04f 0c0a 	mov.w	ip, #10
 80550ec:	4620      	mov	r0, r4
 80550ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80550f2:	3a30      	subs	r2, #48	; 0x30
 80550f4:	2a09      	cmp	r2, #9
 80550f6:	d903      	bls.n	8055100 <_vfiprintf_r+0x1d0>
 80550f8:	2b00      	cmp	r3, #0
 80550fa:	d0c6      	beq.n	805508a <_vfiprintf_r+0x15a>
 80550fc:	9105      	str	r1, [sp, #20]
 80550fe:	e7c4      	b.n	805508a <_vfiprintf_r+0x15a>
 8055100:	fb0c 2101 	mla	r1, ip, r1, r2
 8055104:	4604      	mov	r4, r0
 8055106:	2301      	movs	r3, #1
 8055108:	e7f0      	b.n	80550ec <_vfiprintf_r+0x1bc>
 805510a:	ab03      	add	r3, sp, #12
 805510c:	9300      	str	r3, [sp, #0]
 805510e:	462a      	mov	r2, r5
 8055110:	4b12      	ldr	r3, [pc, #72]	; (805515c <_vfiprintf_r+0x22c>)
 8055112:	a904      	add	r1, sp, #16
 8055114:	4630      	mov	r0, r6
 8055116:	f3af 8000 	nop.w
 805511a:	4607      	mov	r7, r0
 805511c:	1c78      	adds	r0, r7, #1
 805511e:	d1d6      	bne.n	80550ce <_vfiprintf_r+0x19e>
 8055120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8055122:	07d9      	lsls	r1, r3, #31
 8055124:	d405      	bmi.n	8055132 <_vfiprintf_r+0x202>
 8055126:	89ab      	ldrh	r3, [r5, #12]
 8055128:	059a      	lsls	r2, r3, #22
 805512a:	d402      	bmi.n	8055132 <_vfiprintf_r+0x202>
 805512c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 805512e:	f7ff fda7 	bl	8054c80 <__retarget_lock_release_recursive>
 8055132:	89ab      	ldrh	r3, [r5, #12]
 8055134:	065b      	lsls	r3, r3, #25
 8055136:	f53f af1d 	bmi.w	8054f74 <_vfiprintf_r+0x44>
 805513a:	9809      	ldr	r0, [sp, #36]	; 0x24
 805513c:	e71c      	b.n	8054f78 <_vfiprintf_r+0x48>
 805513e:	ab03      	add	r3, sp, #12
 8055140:	9300      	str	r3, [sp, #0]
 8055142:	462a      	mov	r2, r5
 8055144:	4b05      	ldr	r3, [pc, #20]	; (805515c <_vfiprintf_r+0x22c>)
 8055146:	a904      	add	r1, sp, #16
 8055148:	4630      	mov	r0, r6
 805514a:	f000 f879 	bl	8055240 <_printf_i>
 805514e:	e7e4      	b.n	805511a <_vfiprintf_r+0x1ea>
 8055150:	0805863f 	.word	0x0805863f
 8055154:	08058649 	.word	0x08058649
 8055158:	00000000 	.word	0x00000000
 805515c:	08054f0b 	.word	0x08054f0b
 8055160:	08058645 	.word	0x08058645

08055164 <_printf_common>:
 8055164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8055168:	4616      	mov	r6, r2
 805516a:	4699      	mov	r9, r3
 805516c:	688a      	ldr	r2, [r1, #8]
 805516e:	690b      	ldr	r3, [r1, #16]
 8055170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8055174:	4293      	cmp	r3, r2
 8055176:	bfb8      	it	lt
 8055178:	4613      	movlt	r3, r2
 805517a:	6033      	str	r3, [r6, #0]
 805517c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8055180:	4607      	mov	r7, r0
 8055182:	460c      	mov	r4, r1
 8055184:	b10a      	cbz	r2, 805518a <_printf_common+0x26>
 8055186:	3301      	adds	r3, #1
 8055188:	6033      	str	r3, [r6, #0]
 805518a:	6823      	ldr	r3, [r4, #0]
 805518c:	0699      	lsls	r1, r3, #26
 805518e:	bf42      	ittt	mi
 8055190:	6833      	ldrmi	r3, [r6, #0]
 8055192:	3302      	addmi	r3, #2
 8055194:	6033      	strmi	r3, [r6, #0]
 8055196:	6825      	ldr	r5, [r4, #0]
 8055198:	f015 0506 	ands.w	r5, r5, #6
 805519c:	d106      	bne.n	80551ac <_printf_common+0x48>
 805519e:	f104 0a19 	add.w	sl, r4, #25
 80551a2:	68e3      	ldr	r3, [r4, #12]
 80551a4:	6832      	ldr	r2, [r6, #0]
 80551a6:	1a9b      	subs	r3, r3, r2
 80551a8:	42ab      	cmp	r3, r5
 80551aa:	dc26      	bgt.n	80551fa <_printf_common+0x96>
 80551ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80551b0:	1e13      	subs	r3, r2, #0
 80551b2:	6822      	ldr	r2, [r4, #0]
 80551b4:	bf18      	it	ne
 80551b6:	2301      	movne	r3, #1
 80551b8:	0692      	lsls	r2, r2, #26
 80551ba:	d42b      	bmi.n	8055214 <_printf_common+0xb0>
 80551bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80551c0:	4649      	mov	r1, r9
 80551c2:	4638      	mov	r0, r7
 80551c4:	47c0      	blx	r8
 80551c6:	3001      	adds	r0, #1
 80551c8:	d01e      	beq.n	8055208 <_printf_common+0xa4>
 80551ca:	6823      	ldr	r3, [r4, #0]
 80551cc:	6922      	ldr	r2, [r4, #16]
 80551ce:	f003 0306 	and.w	r3, r3, #6
 80551d2:	2b04      	cmp	r3, #4
 80551d4:	bf02      	ittt	eq
 80551d6:	68e5      	ldreq	r5, [r4, #12]
 80551d8:	6833      	ldreq	r3, [r6, #0]
 80551da:	1aed      	subeq	r5, r5, r3
 80551dc:	68a3      	ldr	r3, [r4, #8]
 80551de:	bf0c      	ite	eq
 80551e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80551e4:	2500      	movne	r5, #0
 80551e6:	4293      	cmp	r3, r2
 80551e8:	bfc4      	itt	gt
 80551ea:	1a9b      	subgt	r3, r3, r2
 80551ec:	18ed      	addgt	r5, r5, r3
 80551ee:	2600      	movs	r6, #0
 80551f0:	341a      	adds	r4, #26
 80551f2:	42b5      	cmp	r5, r6
 80551f4:	d11a      	bne.n	805522c <_printf_common+0xc8>
 80551f6:	2000      	movs	r0, #0
 80551f8:	e008      	b.n	805520c <_printf_common+0xa8>
 80551fa:	2301      	movs	r3, #1
 80551fc:	4652      	mov	r2, sl
 80551fe:	4649      	mov	r1, r9
 8055200:	4638      	mov	r0, r7
 8055202:	47c0      	blx	r8
 8055204:	3001      	adds	r0, #1
 8055206:	d103      	bne.n	8055210 <_printf_common+0xac>
 8055208:	f04f 30ff 	mov.w	r0, #4294967295
 805520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8055210:	3501      	adds	r5, #1
 8055212:	e7c6      	b.n	80551a2 <_printf_common+0x3e>
 8055214:	18e1      	adds	r1, r4, r3
 8055216:	1c5a      	adds	r2, r3, #1
 8055218:	2030      	movs	r0, #48	; 0x30
 805521a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 805521e:	4422      	add	r2, r4
 8055220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8055224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8055228:	3302      	adds	r3, #2
 805522a:	e7c7      	b.n	80551bc <_printf_common+0x58>
 805522c:	2301      	movs	r3, #1
 805522e:	4622      	mov	r2, r4
 8055230:	4649      	mov	r1, r9
 8055232:	4638      	mov	r0, r7
 8055234:	47c0      	blx	r8
 8055236:	3001      	adds	r0, #1
 8055238:	d0e6      	beq.n	8055208 <_printf_common+0xa4>
 805523a:	3601      	adds	r6, #1
 805523c:	e7d9      	b.n	80551f2 <_printf_common+0x8e>
	...

08055240 <_printf_i>:
 8055240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8055244:	7e0f      	ldrb	r7, [r1, #24]
 8055246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8055248:	2f78      	cmp	r7, #120	; 0x78
 805524a:	4691      	mov	r9, r2
 805524c:	4680      	mov	r8, r0
 805524e:	460c      	mov	r4, r1
 8055250:	469a      	mov	sl, r3
 8055252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8055256:	d807      	bhi.n	8055268 <_printf_i+0x28>
 8055258:	2f62      	cmp	r7, #98	; 0x62
 805525a:	d80a      	bhi.n	8055272 <_printf_i+0x32>
 805525c:	2f00      	cmp	r7, #0
 805525e:	f000 80d4 	beq.w	805540a <_printf_i+0x1ca>
 8055262:	2f58      	cmp	r7, #88	; 0x58
 8055264:	f000 80c0 	beq.w	80553e8 <_printf_i+0x1a8>
 8055268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 805526c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8055270:	e03a      	b.n	80552e8 <_printf_i+0xa8>
 8055272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8055276:	2b15      	cmp	r3, #21
 8055278:	d8f6      	bhi.n	8055268 <_printf_i+0x28>
 805527a:	a101      	add	r1, pc, #4	; (adr r1, 8055280 <_printf_i+0x40>)
 805527c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8055280:	080552d9 	.word	0x080552d9
 8055284:	080552ed 	.word	0x080552ed
 8055288:	08055269 	.word	0x08055269
 805528c:	08055269 	.word	0x08055269
 8055290:	08055269 	.word	0x08055269
 8055294:	08055269 	.word	0x08055269
 8055298:	080552ed 	.word	0x080552ed
 805529c:	08055269 	.word	0x08055269
 80552a0:	08055269 	.word	0x08055269
 80552a4:	08055269 	.word	0x08055269
 80552a8:	08055269 	.word	0x08055269
 80552ac:	080553f1 	.word	0x080553f1
 80552b0:	08055319 	.word	0x08055319
 80552b4:	080553ab 	.word	0x080553ab
 80552b8:	08055269 	.word	0x08055269
 80552bc:	08055269 	.word	0x08055269
 80552c0:	08055413 	.word	0x08055413
 80552c4:	08055269 	.word	0x08055269
 80552c8:	08055319 	.word	0x08055319
 80552cc:	08055269 	.word	0x08055269
 80552d0:	08055269 	.word	0x08055269
 80552d4:	080553b3 	.word	0x080553b3
 80552d8:	682b      	ldr	r3, [r5, #0]
 80552da:	1d1a      	adds	r2, r3, #4
 80552dc:	681b      	ldr	r3, [r3, #0]
 80552de:	602a      	str	r2, [r5, #0]
 80552e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80552e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80552e8:	2301      	movs	r3, #1
 80552ea:	e09f      	b.n	805542c <_printf_i+0x1ec>
 80552ec:	6820      	ldr	r0, [r4, #0]
 80552ee:	682b      	ldr	r3, [r5, #0]
 80552f0:	0607      	lsls	r7, r0, #24
 80552f2:	f103 0104 	add.w	r1, r3, #4
 80552f6:	6029      	str	r1, [r5, #0]
 80552f8:	d501      	bpl.n	80552fe <_printf_i+0xbe>
 80552fa:	681e      	ldr	r6, [r3, #0]
 80552fc:	e003      	b.n	8055306 <_printf_i+0xc6>
 80552fe:	0646      	lsls	r6, r0, #25
 8055300:	d5fb      	bpl.n	80552fa <_printf_i+0xba>
 8055302:	f9b3 6000 	ldrsh.w	r6, [r3]
 8055306:	2e00      	cmp	r6, #0
 8055308:	da03      	bge.n	8055312 <_printf_i+0xd2>
 805530a:	232d      	movs	r3, #45	; 0x2d
 805530c:	4276      	negs	r6, r6
 805530e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8055312:	485a      	ldr	r0, [pc, #360]	; (805547c <_printf_i+0x23c>)
 8055314:	230a      	movs	r3, #10
 8055316:	e012      	b.n	805533e <_printf_i+0xfe>
 8055318:	682b      	ldr	r3, [r5, #0]
 805531a:	6820      	ldr	r0, [r4, #0]
 805531c:	1d19      	adds	r1, r3, #4
 805531e:	6029      	str	r1, [r5, #0]
 8055320:	0605      	lsls	r5, r0, #24
 8055322:	d501      	bpl.n	8055328 <_printf_i+0xe8>
 8055324:	681e      	ldr	r6, [r3, #0]
 8055326:	e002      	b.n	805532e <_printf_i+0xee>
 8055328:	0641      	lsls	r1, r0, #25
 805532a:	d5fb      	bpl.n	8055324 <_printf_i+0xe4>
 805532c:	881e      	ldrh	r6, [r3, #0]
 805532e:	4853      	ldr	r0, [pc, #332]	; (805547c <_printf_i+0x23c>)
 8055330:	2f6f      	cmp	r7, #111	; 0x6f
 8055332:	bf0c      	ite	eq
 8055334:	2308      	moveq	r3, #8
 8055336:	230a      	movne	r3, #10
 8055338:	2100      	movs	r1, #0
 805533a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 805533e:	6865      	ldr	r5, [r4, #4]
 8055340:	60a5      	str	r5, [r4, #8]
 8055342:	2d00      	cmp	r5, #0
 8055344:	bfa2      	ittt	ge
 8055346:	6821      	ldrge	r1, [r4, #0]
 8055348:	f021 0104 	bicge.w	r1, r1, #4
 805534c:	6021      	strge	r1, [r4, #0]
 805534e:	b90e      	cbnz	r6, 8055354 <_printf_i+0x114>
 8055350:	2d00      	cmp	r5, #0
 8055352:	d04b      	beq.n	80553ec <_printf_i+0x1ac>
 8055354:	4615      	mov	r5, r2
 8055356:	fbb6 f1f3 	udiv	r1, r6, r3
 805535a:	fb03 6711 	mls	r7, r3, r1, r6
 805535e:	5dc7      	ldrb	r7, [r0, r7]
 8055360:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8055364:	4637      	mov	r7, r6
 8055366:	42bb      	cmp	r3, r7
 8055368:	460e      	mov	r6, r1
 805536a:	d9f4      	bls.n	8055356 <_printf_i+0x116>
 805536c:	2b08      	cmp	r3, #8
 805536e:	d10b      	bne.n	8055388 <_printf_i+0x148>
 8055370:	6823      	ldr	r3, [r4, #0]
 8055372:	07de      	lsls	r6, r3, #31
 8055374:	d508      	bpl.n	8055388 <_printf_i+0x148>
 8055376:	6923      	ldr	r3, [r4, #16]
 8055378:	6861      	ldr	r1, [r4, #4]
 805537a:	4299      	cmp	r1, r3
 805537c:	bfde      	ittt	le
 805537e:	2330      	movle	r3, #48	; 0x30
 8055380:	f805 3c01 	strble.w	r3, [r5, #-1]
 8055384:	f105 35ff 	addle.w	r5, r5, #4294967295
 8055388:	1b52      	subs	r2, r2, r5
 805538a:	6122      	str	r2, [r4, #16]
 805538c:	f8cd a000 	str.w	sl, [sp]
 8055390:	464b      	mov	r3, r9
 8055392:	aa03      	add	r2, sp, #12
 8055394:	4621      	mov	r1, r4
 8055396:	4640      	mov	r0, r8
 8055398:	f7ff fee4 	bl	8055164 <_printf_common>
 805539c:	3001      	adds	r0, #1
 805539e:	d14a      	bne.n	8055436 <_printf_i+0x1f6>
 80553a0:	f04f 30ff 	mov.w	r0, #4294967295
 80553a4:	b004      	add	sp, #16
 80553a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80553aa:	6823      	ldr	r3, [r4, #0]
 80553ac:	f043 0320 	orr.w	r3, r3, #32
 80553b0:	6023      	str	r3, [r4, #0]
 80553b2:	4833      	ldr	r0, [pc, #204]	; (8055480 <_printf_i+0x240>)
 80553b4:	2778      	movs	r7, #120	; 0x78
 80553b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80553ba:	6823      	ldr	r3, [r4, #0]
 80553bc:	6829      	ldr	r1, [r5, #0]
 80553be:	061f      	lsls	r7, r3, #24
 80553c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80553c4:	d402      	bmi.n	80553cc <_printf_i+0x18c>
 80553c6:	065f      	lsls	r7, r3, #25
 80553c8:	bf48      	it	mi
 80553ca:	b2b6      	uxthmi	r6, r6
 80553cc:	07df      	lsls	r7, r3, #31
 80553ce:	bf48      	it	mi
 80553d0:	f043 0320 	orrmi.w	r3, r3, #32
 80553d4:	6029      	str	r1, [r5, #0]
 80553d6:	bf48      	it	mi
 80553d8:	6023      	strmi	r3, [r4, #0]
 80553da:	b91e      	cbnz	r6, 80553e4 <_printf_i+0x1a4>
 80553dc:	6823      	ldr	r3, [r4, #0]
 80553de:	f023 0320 	bic.w	r3, r3, #32
 80553e2:	6023      	str	r3, [r4, #0]
 80553e4:	2310      	movs	r3, #16
 80553e6:	e7a7      	b.n	8055338 <_printf_i+0xf8>
 80553e8:	4824      	ldr	r0, [pc, #144]	; (805547c <_printf_i+0x23c>)
 80553ea:	e7e4      	b.n	80553b6 <_printf_i+0x176>
 80553ec:	4615      	mov	r5, r2
 80553ee:	e7bd      	b.n	805536c <_printf_i+0x12c>
 80553f0:	682b      	ldr	r3, [r5, #0]
 80553f2:	6826      	ldr	r6, [r4, #0]
 80553f4:	6961      	ldr	r1, [r4, #20]
 80553f6:	1d18      	adds	r0, r3, #4
 80553f8:	6028      	str	r0, [r5, #0]
 80553fa:	0635      	lsls	r5, r6, #24
 80553fc:	681b      	ldr	r3, [r3, #0]
 80553fe:	d501      	bpl.n	8055404 <_printf_i+0x1c4>
 8055400:	6019      	str	r1, [r3, #0]
 8055402:	e002      	b.n	805540a <_printf_i+0x1ca>
 8055404:	0670      	lsls	r0, r6, #25
 8055406:	d5fb      	bpl.n	8055400 <_printf_i+0x1c0>
 8055408:	8019      	strh	r1, [r3, #0]
 805540a:	2300      	movs	r3, #0
 805540c:	6123      	str	r3, [r4, #16]
 805540e:	4615      	mov	r5, r2
 8055410:	e7bc      	b.n	805538c <_printf_i+0x14c>
 8055412:	682b      	ldr	r3, [r5, #0]
 8055414:	1d1a      	adds	r2, r3, #4
 8055416:	602a      	str	r2, [r5, #0]
 8055418:	681d      	ldr	r5, [r3, #0]
 805541a:	6862      	ldr	r2, [r4, #4]
 805541c:	2100      	movs	r1, #0
 805541e:	4628      	mov	r0, r5
 8055420:	f7ea ff0e 	bl	8040240 <memchr>
 8055424:	b108      	cbz	r0, 805542a <_printf_i+0x1ea>
 8055426:	1b40      	subs	r0, r0, r5
 8055428:	6060      	str	r0, [r4, #4]
 805542a:	6863      	ldr	r3, [r4, #4]
 805542c:	6123      	str	r3, [r4, #16]
 805542e:	2300      	movs	r3, #0
 8055430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8055434:	e7aa      	b.n	805538c <_printf_i+0x14c>
 8055436:	6923      	ldr	r3, [r4, #16]
 8055438:	462a      	mov	r2, r5
 805543a:	4649      	mov	r1, r9
 805543c:	4640      	mov	r0, r8
 805543e:	47d0      	blx	sl
 8055440:	3001      	adds	r0, #1
 8055442:	d0ad      	beq.n	80553a0 <_printf_i+0x160>
 8055444:	6823      	ldr	r3, [r4, #0]
 8055446:	079b      	lsls	r3, r3, #30
 8055448:	d413      	bmi.n	8055472 <_printf_i+0x232>
 805544a:	68e0      	ldr	r0, [r4, #12]
 805544c:	9b03      	ldr	r3, [sp, #12]
 805544e:	4298      	cmp	r0, r3
 8055450:	bfb8      	it	lt
 8055452:	4618      	movlt	r0, r3
 8055454:	e7a6      	b.n	80553a4 <_printf_i+0x164>
 8055456:	2301      	movs	r3, #1
 8055458:	4632      	mov	r2, r6
 805545a:	4649      	mov	r1, r9
 805545c:	4640      	mov	r0, r8
 805545e:	47d0      	blx	sl
 8055460:	3001      	adds	r0, #1
 8055462:	d09d      	beq.n	80553a0 <_printf_i+0x160>
 8055464:	3501      	adds	r5, #1
 8055466:	68e3      	ldr	r3, [r4, #12]
 8055468:	9903      	ldr	r1, [sp, #12]
 805546a:	1a5b      	subs	r3, r3, r1
 805546c:	42ab      	cmp	r3, r5
 805546e:	dcf2      	bgt.n	8055456 <_printf_i+0x216>
 8055470:	e7eb      	b.n	805544a <_printf_i+0x20a>
 8055472:	2500      	movs	r5, #0
 8055474:	f104 0619 	add.w	r6, r4, #25
 8055478:	e7f5      	b.n	8055466 <_printf_i+0x226>
 805547a:	bf00      	nop
 805547c:	08058650 	.word	0x08058650
 8055480:	08058661 	.word	0x08058661

08055484 <__sflush_r>:
 8055484:	898a      	ldrh	r2, [r1, #12]
 8055486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805548a:	4605      	mov	r5, r0
 805548c:	0710      	lsls	r0, r2, #28
 805548e:	460c      	mov	r4, r1
 8055490:	d458      	bmi.n	8055544 <__sflush_r+0xc0>
 8055492:	684b      	ldr	r3, [r1, #4]
 8055494:	2b00      	cmp	r3, #0
 8055496:	dc05      	bgt.n	80554a4 <__sflush_r+0x20>
 8055498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 805549a:	2b00      	cmp	r3, #0
 805549c:	dc02      	bgt.n	80554a4 <__sflush_r+0x20>
 805549e:	2000      	movs	r0, #0
 80554a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80554a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80554a6:	2e00      	cmp	r6, #0
 80554a8:	d0f9      	beq.n	805549e <__sflush_r+0x1a>
 80554aa:	2300      	movs	r3, #0
 80554ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80554b0:	682f      	ldr	r7, [r5, #0]
 80554b2:	6a21      	ldr	r1, [r4, #32]
 80554b4:	602b      	str	r3, [r5, #0]
 80554b6:	d032      	beq.n	805551e <__sflush_r+0x9a>
 80554b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80554ba:	89a3      	ldrh	r3, [r4, #12]
 80554bc:	075a      	lsls	r2, r3, #29
 80554be:	d505      	bpl.n	80554cc <__sflush_r+0x48>
 80554c0:	6863      	ldr	r3, [r4, #4]
 80554c2:	1ac0      	subs	r0, r0, r3
 80554c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80554c6:	b10b      	cbz	r3, 80554cc <__sflush_r+0x48>
 80554c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80554ca:	1ac0      	subs	r0, r0, r3
 80554cc:	2300      	movs	r3, #0
 80554ce:	4602      	mov	r2, r0
 80554d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80554d2:	6a21      	ldr	r1, [r4, #32]
 80554d4:	4628      	mov	r0, r5
 80554d6:	47b0      	blx	r6
 80554d8:	1c43      	adds	r3, r0, #1
 80554da:	89a3      	ldrh	r3, [r4, #12]
 80554dc:	d106      	bne.n	80554ec <__sflush_r+0x68>
 80554de:	6829      	ldr	r1, [r5, #0]
 80554e0:	291d      	cmp	r1, #29
 80554e2:	d82b      	bhi.n	805553c <__sflush_r+0xb8>
 80554e4:	4a29      	ldr	r2, [pc, #164]	; (805558c <__sflush_r+0x108>)
 80554e6:	410a      	asrs	r2, r1
 80554e8:	07d6      	lsls	r6, r2, #31
 80554ea:	d427      	bmi.n	805553c <__sflush_r+0xb8>
 80554ec:	2200      	movs	r2, #0
 80554ee:	6062      	str	r2, [r4, #4]
 80554f0:	04d9      	lsls	r1, r3, #19
 80554f2:	6922      	ldr	r2, [r4, #16]
 80554f4:	6022      	str	r2, [r4, #0]
 80554f6:	d504      	bpl.n	8055502 <__sflush_r+0x7e>
 80554f8:	1c42      	adds	r2, r0, #1
 80554fa:	d101      	bne.n	8055500 <__sflush_r+0x7c>
 80554fc:	682b      	ldr	r3, [r5, #0]
 80554fe:	b903      	cbnz	r3, 8055502 <__sflush_r+0x7e>
 8055500:	6560      	str	r0, [r4, #84]	; 0x54
 8055502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8055504:	602f      	str	r7, [r5, #0]
 8055506:	2900      	cmp	r1, #0
 8055508:	d0c9      	beq.n	805549e <__sflush_r+0x1a>
 805550a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 805550e:	4299      	cmp	r1, r3
 8055510:	d002      	beq.n	8055518 <__sflush_r+0x94>
 8055512:	4628      	mov	r0, r5
 8055514:	f7ff fbe2 	bl	8054cdc <_free_r>
 8055518:	2000      	movs	r0, #0
 805551a:	6360      	str	r0, [r4, #52]	; 0x34
 805551c:	e7c0      	b.n	80554a0 <__sflush_r+0x1c>
 805551e:	2301      	movs	r3, #1
 8055520:	4628      	mov	r0, r5
 8055522:	47b0      	blx	r6
 8055524:	1c41      	adds	r1, r0, #1
 8055526:	d1c8      	bne.n	80554ba <__sflush_r+0x36>
 8055528:	682b      	ldr	r3, [r5, #0]
 805552a:	2b00      	cmp	r3, #0
 805552c:	d0c5      	beq.n	80554ba <__sflush_r+0x36>
 805552e:	2b1d      	cmp	r3, #29
 8055530:	d001      	beq.n	8055536 <__sflush_r+0xb2>
 8055532:	2b16      	cmp	r3, #22
 8055534:	d101      	bne.n	805553a <__sflush_r+0xb6>
 8055536:	602f      	str	r7, [r5, #0]
 8055538:	e7b1      	b.n	805549e <__sflush_r+0x1a>
 805553a:	89a3      	ldrh	r3, [r4, #12]
 805553c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8055540:	81a3      	strh	r3, [r4, #12]
 8055542:	e7ad      	b.n	80554a0 <__sflush_r+0x1c>
 8055544:	690f      	ldr	r7, [r1, #16]
 8055546:	2f00      	cmp	r7, #0
 8055548:	d0a9      	beq.n	805549e <__sflush_r+0x1a>
 805554a:	0793      	lsls	r3, r2, #30
 805554c:	680e      	ldr	r6, [r1, #0]
 805554e:	bf08      	it	eq
 8055550:	694b      	ldreq	r3, [r1, #20]
 8055552:	600f      	str	r7, [r1, #0]
 8055554:	bf18      	it	ne
 8055556:	2300      	movne	r3, #0
 8055558:	eba6 0807 	sub.w	r8, r6, r7
 805555c:	608b      	str	r3, [r1, #8]
 805555e:	f1b8 0f00 	cmp.w	r8, #0
 8055562:	dd9c      	ble.n	805549e <__sflush_r+0x1a>
 8055564:	6a21      	ldr	r1, [r4, #32]
 8055566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8055568:	4643      	mov	r3, r8
 805556a:	463a      	mov	r2, r7
 805556c:	4628      	mov	r0, r5
 805556e:	47b0      	blx	r6
 8055570:	2800      	cmp	r0, #0
 8055572:	dc06      	bgt.n	8055582 <__sflush_r+0xfe>
 8055574:	89a3      	ldrh	r3, [r4, #12]
 8055576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805557a:	81a3      	strh	r3, [r4, #12]
 805557c:	f04f 30ff 	mov.w	r0, #4294967295
 8055580:	e78e      	b.n	80554a0 <__sflush_r+0x1c>
 8055582:	4407      	add	r7, r0
 8055584:	eba8 0800 	sub.w	r8, r8, r0
 8055588:	e7e9      	b.n	805555e <__sflush_r+0xda>
 805558a:	bf00      	nop
 805558c:	dfbffffe 	.word	0xdfbffffe

08055590 <_fflush_r>:
 8055590:	b538      	push	{r3, r4, r5, lr}
 8055592:	690b      	ldr	r3, [r1, #16]
 8055594:	4605      	mov	r5, r0
 8055596:	460c      	mov	r4, r1
 8055598:	b913      	cbnz	r3, 80555a0 <_fflush_r+0x10>
 805559a:	2500      	movs	r5, #0
 805559c:	4628      	mov	r0, r5
 805559e:	bd38      	pop	{r3, r4, r5, pc}
 80555a0:	b118      	cbz	r0, 80555aa <_fflush_r+0x1a>
 80555a2:	6a03      	ldr	r3, [r0, #32]
 80555a4:	b90b      	cbnz	r3, 80555aa <_fflush_r+0x1a>
 80555a6:	f7ff f915 	bl	80547d4 <__sinit>
 80555aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80555ae:	2b00      	cmp	r3, #0
 80555b0:	d0f3      	beq.n	805559a <_fflush_r+0xa>
 80555b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80555b4:	07d0      	lsls	r0, r2, #31
 80555b6:	d404      	bmi.n	80555c2 <_fflush_r+0x32>
 80555b8:	0599      	lsls	r1, r3, #22
 80555ba:	d402      	bmi.n	80555c2 <_fflush_r+0x32>
 80555bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80555be:	f7ff fb5e 	bl	8054c7e <__retarget_lock_acquire_recursive>
 80555c2:	4628      	mov	r0, r5
 80555c4:	4621      	mov	r1, r4
 80555c6:	f7ff ff5d 	bl	8055484 <__sflush_r>
 80555ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80555cc:	07da      	lsls	r2, r3, #31
 80555ce:	4605      	mov	r5, r0
 80555d0:	d4e4      	bmi.n	805559c <_fflush_r+0xc>
 80555d2:	89a3      	ldrh	r3, [r4, #12]
 80555d4:	059b      	lsls	r3, r3, #22
 80555d6:	d4e1      	bmi.n	805559c <_fflush_r+0xc>
 80555d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80555da:	f7ff fb51 	bl	8054c80 <__retarget_lock_release_recursive>
 80555de:	e7dd      	b.n	805559c <_fflush_r+0xc>

080555e0 <fiprintf>:
 80555e0:	b40e      	push	{r1, r2, r3}
 80555e2:	b503      	push	{r0, r1, lr}
 80555e4:	4601      	mov	r1, r0
 80555e6:	ab03      	add	r3, sp, #12
 80555e8:	4805      	ldr	r0, [pc, #20]	; (8055600 <fiprintf+0x20>)
 80555ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80555ee:	6800      	ldr	r0, [r0, #0]
 80555f0:	9301      	str	r3, [sp, #4]
 80555f2:	f7ff fc9d 	bl	8054f30 <_vfiprintf_r>
 80555f6:	b002      	add	sp, #8
 80555f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80555fc:	b003      	add	sp, #12
 80555fe:	4770      	bx	lr
 8055600:	20000088 	.word	0x20000088

08055604 <__swhatbuf_r>:
 8055604:	b570      	push	{r4, r5, r6, lr}
 8055606:	460c      	mov	r4, r1
 8055608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805560c:	2900      	cmp	r1, #0
 805560e:	b096      	sub	sp, #88	; 0x58
 8055610:	4615      	mov	r5, r2
 8055612:	461e      	mov	r6, r3
 8055614:	da0d      	bge.n	8055632 <__swhatbuf_r+0x2e>
 8055616:	89a3      	ldrh	r3, [r4, #12]
 8055618:	f013 0f80 	tst.w	r3, #128	; 0x80
 805561c:	f04f 0100 	mov.w	r1, #0
 8055620:	bf0c      	ite	eq
 8055622:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8055626:	2340      	movne	r3, #64	; 0x40
 8055628:	2000      	movs	r0, #0
 805562a:	6031      	str	r1, [r6, #0]
 805562c:	602b      	str	r3, [r5, #0]
 805562e:	b016      	add	sp, #88	; 0x58
 8055630:	bd70      	pop	{r4, r5, r6, pc}
 8055632:	466a      	mov	r2, sp
 8055634:	f000 f848 	bl	80556c8 <_fstat_r>
 8055638:	2800      	cmp	r0, #0
 805563a:	dbec      	blt.n	8055616 <__swhatbuf_r+0x12>
 805563c:	9901      	ldr	r1, [sp, #4]
 805563e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8055642:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8055646:	4259      	negs	r1, r3
 8055648:	4159      	adcs	r1, r3
 805564a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805564e:	e7eb      	b.n	8055628 <__swhatbuf_r+0x24>

08055650 <__smakebuf_r>:
 8055650:	898b      	ldrh	r3, [r1, #12]
 8055652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8055654:	079d      	lsls	r5, r3, #30
 8055656:	4606      	mov	r6, r0
 8055658:	460c      	mov	r4, r1
 805565a:	d507      	bpl.n	805566c <__smakebuf_r+0x1c>
 805565c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8055660:	6023      	str	r3, [r4, #0]
 8055662:	6123      	str	r3, [r4, #16]
 8055664:	2301      	movs	r3, #1
 8055666:	6163      	str	r3, [r4, #20]
 8055668:	b002      	add	sp, #8
 805566a:	bd70      	pop	{r4, r5, r6, pc}
 805566c:	ab01      	add	r3, sp, #4
 805566e:	466a      	mov	r2, sp
 8055670:	f7ff ffc8 	bl	8055604 <__swhatbuf_r>
 8055674:	9900      	ldr	r1, [sp, #0]
 8055676:	4605      	mov	r5, r0
 8055678:	4630      	mov	r0, r6
 805567a:	f7ff fba3 	bl	8054dc4 <_malloc_r>
 805567e:	b948      	cbnz	r0, 8055694 <__smakebuf_r+0x44>
 8055680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8055684:	059a      	lsls	r2, r3, #22
 8055686:	d4ef      	bmi.n	8055668 <__smakebuf_r+0x18>
 8055688:	f023 0303 	bic.w	r3, r3, #3
 805568c:	f043 0302 	orr.w	r3, r3, #2
 8055690:	81a3      	strh	r3, [r4, #12]
 8055692:	e7e3      	b.n	805565c <__smakebuf_r+0xc>
 8055694:	89a3      	ldrh	r3, [r4, #12]
 8055696:	6020      	str	r0, [r4, #0]
 8055698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805569c:	81a3      	strh	r3, [r4, #12]
 805569e:	9b00      	ldr	r3, [sp, #0]
 80556a0:	6163      	str	r3, [r4, #20]
 80556a2:	9b01      	ldr	r3, [sp, #4]
 80556a4:	6120      	str	r0, [r4, #16]
 80556a6:	b15b      	cbz	r3, 80556c0 <__smakebuf_r+0x70>
 80556a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80556ac:	4630      	mov	r0, r6
 80556ae:	f000 f81d 	bl	80556ec <_isatty_r>
 80556b2:	b128      	cbz	r0, 80556c0 <__smakebuf_r+0x70>
 80556b4:	89a3      	ldrh	r3, [r4, #12]
 80556b6:	f023 0303 	bic.w	r3, r3, #3
 80556ba:	f043 0301 	orr.w	r3, r3, #1
 80556be:	81a3      	strh	r3, [r4, #12]
 80556c0:	89a3      	ldrh	r3, [r4, #12]
 80556c2:	431d      	orrs	r5, r3
 80556c4:	81a5      	strh	r5, [r4, #12]
 80556c6:	e7cf      	b.n	8055668 <__smakebuf_r+0x18>

080556c8 <_fstat_r>:
 80556c8:	b538      	push	{r3, r4, r5, lr}
 80556ca:	4d07      	ldr	r5, [pc, #28]	; (80556e8 <_fstat_r+0x20>)
 80556cc:	2300      	movs	r3, #0
 80556ce:	4604      	mov	r4, r0
 80556d0:	4608      	mov	r0, r1
 80556d2:	4611      	mov	r1, r2
 80556d4:	602b      	str	r3, [r5, #0]
 80556d6:	f7eb fe4c 	bl	8041372 <_fstat>
 80556da:	1c43      	adds	r3, r0, #1
 80556dc:	d102      	bne.n	80556e4 <_fstat_r+0x1c>
 80556de:	682b      	ldr	r3, [r5, #0]
 80556e0:	b103      	cbz	r3, 80556e4 <_fstat_r+0x1c>
 80556e2:	6023      	str	r3, [r4, #0]
 80556e4:	bd38      	pop	{r3, r4, r5, pc}
 80556e6:	bf00      	nop
 80556e8:	20023a68 	.word	0x20023a68

080556ec <_isatty_r>:
 80556ec:	b538      	push	{r3, r4, r5, lr}
 80556ee:	4d06      	ldr	r5, [pc, #24]	; (8055708 <_isatty_r+0x1c>)
 80556f0:	2300      	movs	r3, #0
 80556f2:	4604      	mov	r4, r0
 80556f4:	4608      	mov	r0, r1
 80556f6:	602b      	str	r3, [r5, #0]
 80556f8:	f7eb fe4b 	bl	8041392 <_isatty>
 80556fc:	1c43      	adds	r3, r0, #1
 80556fe:	d102      	bne.n	8055706 <_isatty_r+0x1a>
 8055700:	682b      	ldr	r3, [r5, #0]
 8055702:	b103      	cbz	r3, 8055706 <_isatty_r+0x1a>
 8055704:	6023      	str	r3, [r4, #0]
 8055706:	bd38      	pop	{r3, r4, r5, pc}
 8055708:	20023a68 	.word	0x20023a68

0805570c <_sbrk_r>:
 805570c:	b538      	push	{r3, r4, r5, lr}
 805570e:	4d06      	ldr	r5, [pc, #24]	; (8055728 <_sbrk_r+0x1c>)
 8055710:	2300      	movs	r3, #0
 8055712:	4604      	mov	r4, r0
 8055714:	4608      	mov	r0, r1
 8055716:	602b      	str	r3, [r5, #0]
 8055718:	f7eb fe54 	bl	80413c4 <_sbrk>
 805571c:	1c43      	adds	r3, r0, #1
 805571e:	d102      	bne.n	8055726 <_sbrk_r+0x1a>
 8055720:	682b      	ldr	r3, [r5, #0]
 8055722:	b103      	cbz	r3, 8055726 <_sbrk_r+0x1a>
 8055724:	6023      	str	r3, [r4, #0]
 8055726:	bd38      	pop	{r3, r4, r5, pc}
 8055728:	20023a68 	.word	0x20023a68

0805572c <abort>:
 805572c:	b508      	push	{r3, lr}
 805572e:	2006      	movs	r0, #6
 8055730:	f000 f82c 	bl	805578c <raise>
 8055734:	2001      	movs	r0, #1
 8055736:	f7eb fde9 	bl	804130c <_exit>

0805573a <_raise_r>:
 805573a:	291f      	cmp	r1, #31
 805573c:	b538      	push	{r3, r4, r5, lr}
 805573e:	4604      	mov	r4, r0
 8055740:	460d      	mov	r5, r1
 8055742:	d904      	bls.n	805574e <_raise_r+0x14>
 8055744:	2316      	movs	r3, #22
 8055746:	6003      	str	r3, [r0, #0]
 8055748:	f04f 30ff 	mov.w	r0, #4294967295
 805574c:	bd38      	pop	{r3, r4, r5, pc}
 805574e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8055750:	b112      	cbz	r2, 8055758 <_raise_r+0x1e>
 8055752:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8055756:	b94b      	cbnz	r3, 805576c <_raise_r+0x32>
 8055758:	4620      	mov	r0, r4
 805575a:	f000 f831 	bl	80557c0 <_getpid_r>
 805575e:	462a      	mov	r2, r5
 8055760:	4601      	mov	r1, r0
 8055762:	4620      	mov	r0, r4
 8055764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8055768:	f000 b818 	b.w	805579c <_kill_r>
 805576c:	2b01      	cmp	r3, #1
 805576e:	d00a      	beq.n	8055786 <_raise_r+0x4c>
 8055770:	1c59      	adds	r1, r3, #1
 8055772:	d103      	bne.n	805577c <_raise_r+0x42>
 8055774:	2316      	movs	r3, #22
 8055776:	6003      	str	r3, [r0, #0]
 8055778:	2001      	movs	r0, #1
 805577a:	e7e7      	b.n	805574c <_raise_r+0x12>
 805577c:	2400      	movs	r4, #0
 805577e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8055782:	4628      	mov	r0, r5
 8055784:	4798      	blx	r3
 8055786:	2000      	movs	r0, #0
 8055788:	e7e0      	b.n	805574c <_raise_r+0x12>
	...

0805578c <raise>:
 805578c:	4b02      	ldr	r3, [pc, #8]	; (8055798 <raise+0xc>)
 805578e:	4601      	mov	r1, r0
 8055790:	6818      	ldr	r0, [r3, #0]
 8055792:	f7ff bfd2 	b.w	805573a <_raise_r>
 8055796:	bf00      	nop
 8055798:	20000088 	.word	0x20000088

0805579c <_kill_r>:
 805579c:	b538      	push	{r3, r4, r5, lr}
 805579e:	4d07      	ldr	r5, [pc, #28]	; (80557bc <_kill_r+0x20>)
 80557a0:	2300      	movs	r3, #0
 80557a2:	4604      	mov	r4, r0
 80557a4:	4608      	mov	r0, r1
 80557a6:	4611      	mov	r1, r2
 80557a8:	602b      	str	r3, [r5, #0]
 80557aa:	f7eb fd9d 	bl	80412e8 <_kill>
 80557ae:	1c43      	adds	r3, r0, #1
 80557b0:	d102      	bne.n	80557b8 <_kill_r+0x1c>
 80557b2:	682b      	ldr	r3, [r5, #0]
 80557b4:	b103      	cbz	r3, 80557b8 <_kill_r+0x1c>
 80557b6:	6023      	str	r3, [r4, #0]
 80557b8:	bd38      	pop	{r3, r4, r5, pc}
 80557ba:	bf00      	nop
 80557bc:	20023a68 	.word	0x20023a68

080557c0 <_getpid_r>:
 80557c0:	f7eb bd8a 	b.w	80412d8 <_getpid>

080557c4 <_init>:
 80557c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80557c6:	bf00      	nop
 80557c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80557ca:	bc08      	pop	{r3}
 80557cc:	469e      	mov	lr, r3
 80557ce:	4770      	bx	lr

080557d0 <_fini>:
 80557d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80557d2:	bf00      	nop
 80557d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80557d6:	bc08      	pop	{r3}
 80557d8:	469e      	mov	lr, r3
 80557da:	4770      	bx	lr
