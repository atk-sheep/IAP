
flash_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08046870  08046870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046900  08046900  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08046900  08046900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08046908  08046908  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08046908  08046908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804690c  0804690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08046910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b4fc  2000006c  0804697c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  2001b568  0804697c  0002b568  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019341  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c4d  00000000  00000000  0003941e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003d070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa1  00000000  00000000  0003e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b937  00000000  00000000  0003f469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a746  00000000  00000000  0006ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010614a  00000000  00000000  000854e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005880  00000000  00000000  0018b630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00190eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	2000006c 	.word	0x2000006c
 804021c:	00000000 	.word	0x00000000
 8040220:	08046858 	.word	0x08046858

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	20000070 	.word	0x20000070
 804023c:	08046858 	.word	0x08046858

08040240 <__aeabi_uldivmod>:
 8040240:	b953      	cbnz	r3, 8040258 <__aeabi_uldivmod+0x18>
 8040242:	b94a      	cbnz	r2, 8040258 <__aeabi_uldivmod+0x18>
 8040244:	2900      	cmp	r1, #0
 8040246:	bf08      	it	eq
 8040248:	2800      	cmpeq	r0, #0
 804024a:	bf1c      	itt	ne
 804024c:	f04f 31ff 	movne.w	r1, #4294967295
 8040250:	f04f 30ff 	movne.w	r0, #4294967295
 8040254:	f000 b970 	b.w	8040538 <__aeabi_idiv0>
 8040258:	f1ad 0c08 	sub.w	ip, sp, #8
 804025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040260:	f000 f806 	bl	8040270 <__udivmoddi4>
 8040264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804026c:	b004      	add	sp, #16
 804026e:	4770      	bx	lr

08040270 <__udivmoddi4>:
 8040270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040274:	9e08      	ldr	r6, [sp, #32]
 8040276:	460d      	mov	r5, r1
 8040278:	4604      	mov	r4, r0
 804027a:	460f      	mov	r7, r1
 804027c:	2b00      	cmp	r3, #0
 804027e:	d14a      	bne.n	8040316 <__udivmoddi4+0xa6>
 8040280:	428a      	cmp	r2, r1
 8040282:	4694      	mov	ip, r2
 8040284:	d965      	bls.n	8040352 <__udivmoddi4+0xe2>
 8040286:	fab2 f382 	clz	r3, r2
 804028a:	b143      	cbz	r3, 804029e <__udivmoddi4+0x2e>
 804028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8040290:	f1c3 0220 	rsb	r2, r3, #32
 8040294:	409f      	lsls	r7, r3
 8040296:	fa20 f202 	lsr.w	r2, r0, r2
 804029a:	4317      	orrs	r7, r2
 804029c:	409c      	lsls	r4, r3
 804029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80402a2:	fa1f f58c 	uxth.w	r5, ip
 80402a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80402aa:	0c22      	lsrs	r2, r4, #16
 80402ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80402b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80402b4:	fb01 f005 	mul.w	r0, r1, r5
 80402b8:	4290      	cmp	r0, r2
 80402ba:	d90a      	bls.n	80402d2 <__udivmoddi4+0x62>
 80402bc:	eb1c 0202 	adds.w	r2, ip, r2
 80402c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80402c4:	f080 811c 	bcs.w	8040500 <__udivmoddi4+0x290>
 80402c8:	4290      	cmp	r0, r2
 80402ca:	f240 8119 	bls.w	8040500 <__udivmoddi4+0x290>
 80402ce:	3902      	subs	r1, #2
 80402d0:	4462      	add	r2, ip
 80402d2:	1a12      	subs	r2, r2, r0
 80402d4:	b2a4      	uxth	r4, r4
 80402d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80402da:	fb0e 2210 	mls	r2, lr, r0, r2
 80402de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80402e2:	fb00 f505 	mul.w	r5, r0, r5
 80402e6:	42a5      	cmp	r5, r4
 80402e8:	d90a      	bls.n	8040300 <__udivmoddi4+0x90>
 80402ea:	eb1c 0404 	adds.w	r4, ip, r4
 80402ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80402f2:	f080 8107 	bcs.w	8040504 <__udivmoddi4+0x294>
 80402f6:	42a5      	cmp	r5, r4
 80402f8:	f240 8104 	bls.w	8040504 <__udivmoddi4+0x294>
 80402fc:	4464      	add	r4, ip
 80402fe:	3802      	subs	r0, #2
 8040300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040304:	1b64      	subs	r4, r4, r5
 8040306:	2100      	movs	r1, #0
 8040308:	b11e      	cbz	r6, 8040312 <__udivmoddi4+0xa2>
 804030a:	40dc      	lsrs	r4, r3
 804030c:	2300      	movs	r3, #0
 804030e:	e9c6 4300 	strd	r4, r3, [r6]
 8040312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040316:	428b      	cmp	r3, r1
 8040318:	d908      	bls.n	804032c <__udivmoddi4+0xbc>
 804031a:	2e00      	cmp	r6, #0
 804031c:	f000 80ed 	beq.w	80404fa <__udivmoddi4+0x28a>
 8040320:	2100      	movs	r1, #0
 8040322:	e9c6 0500 	strd	r0, r5, [r6]
 8040326:	4608      	mov	r0, r1
 8040328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804032c:	fab3 f183 	clz	r1, r3
 8040330:	2900      	cmp	r1, #0
 8040332:	d149      	bne.n	80403c8 <__udivmoddi4+0x158>
 8040334:	42ab      	cmp	r3, r5
 8040336:	d302      	bcc.n	804033e <__udivmoddi4+0xce>
 8040338:	4282      	cmp	r2, r0
 804033a:	f200 80f8 	bhi.w	804052e <__udivmoddi4+0x2be>
 804033e:	1a84      	subs	r4, r0, r2
 8040340:	eb65 0203 	sbc.w	r2, r5, r3
 8040344:	2001      	movs	r0, #1
 8040346:	4617      	mov	r7, r2
 8040348:	2e00      	cmp	r6, #0
 804034a:	d0e2      	beq.n	8040312 <__udivmoddi4+0xa2>
 804034c:	e9c6 4700 	strd	r4, r7, [r6]
 8040350:	e7df      	b.n	8040312 <__udivmoddi4+0xa2>
 8040352:	b902      	cbnz	r2, 8040356 <__udivmoddi4+0xe6>
 8040354:	deff      	udf	#255	; 0xff
 8040356:	fab2 f382 	clz	r3, r2
 804035a:	2b00      	cmp	r3, #0
 804035c:	f040 8090 	bne.w	8040480 <__udivmoddi4+0x210>
 8040360:	1a8a      	subs	r2, r1, r2
 8040362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040366:	fa1f fe8c 	uxth.w	lr, ip
 804036a:	2101      	movs	r1, #1
 804036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8040370:	fb07 2015 	mls	r0, r7, r5, r2
 8040374:	0c22      	lsrs	r2, r4, #16
 8040376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 804037a:	fb0e f005 	mul.w	r0, lr, r5
 804037e:	4290      	cmp	r0, r2
 8040380:	d908      	bls.n	8040394 <__udivmoddi4+0x124>
 8040382:	eb1c 0202 	adds.w	r2, ip, r2
 8040386:	f105 38ff 	add.w	r8, r5, #4294967295
 804038a:	d202      	bcs.n	8040392 <__udivmoddi4+0x122>
 804038c:	4290      	cmp	r0, r2
 804038e:	f200 80cb 	bhi.w	8040528 <__udivmoddi4+0x2b8>
 8040392:	4645      	mov	r5, r8
 8040394:	1a12      	subs	r2, r2, r0
 8040396:	b2a4      	uxth	r4, r4
 8040398:	fbb2 f0f7 	udiv	r0, r2, r7
 804039c:	fb07 2210 	mls	r2, r7, r0, r2
 80403a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80403a4:	fb0e fe00 	mul.w	lr, lr, r0
 80403a8:	45a6      	cmp	lr, r4
 80403aa:	d908      	bls.n	80403be <__udivmoddi4+0x14e>
 80403ac:	eb1c 0404 	adds.w	r4, ip, r4
 80403b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80403b4:	d202      	bcs.n	80403bc <__udivmoddi4+0x14c>
 80403b6:	45a6      	cmp	lr, r4
 80403b8:	f200 80bb 	bhi.w	8040532 <__udivmoddi4+0x2c2>
 80403bc:	4610      	mov	r0, r2
 80403be:	eba4 040e 	sub.w	r4, r4, lr
 80403c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80403c6:	e79f      	b.n	8040308 <__udivmoddi4+0x98>
 80403c8:	f1c1 0720 	rsb	r7, r1, #32
 80403cc:	408b      	lsls	r3, r1
 80403ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80403d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403d6:	fa05 f401 	lsl.w	r4, r5, r1
 80403da:	fa20 f307 	lsr.w	r3, r0, r7
 80403de:	40fd      	lsrs	r5, r7
 80403e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403e4:	4323      	orrs	r3, r4
 80403e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80403ea:	fa1f fe8c 	uxth.w	lr, ip
 80403ee:	fb09 5518 	mls	r5, r9, r8, r5
 80403f2:	0c1c      	lsrs	r4, r3, #16
 80403f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80403f8:	fb08 f50e 	mul.w	r5, r8, lr
 80403fc:	42a5      	cmp	r5, r4
 80403fe:	fa02 f201 	lsl.w	r2, r2, r1
 8040402:	fa00 f001 	lsl.w	r0, r0, r1
 8040406:	d90b      	bls.n	8040420 <__udivmoddi4+0x1b0>
 8040408:	eb1c 0404 	adds.w	r4, ip, r4
 804040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8040410:	f080 8088 	bcs.w	8040524 <__udivmoddi4+0x2b4>
 8040414:	42a5      	cmp	r5, r4
 8040416:	f240 8085 	bls.w	8040524 <__udivmoddi4+0x2b4>
 804041a:	f1a8 0802 	sub.w	r8, r8, #2
 804041e:	4464      	add	r4, ip
 8040420:	1b64      	subs	r4, r4, r5
 8040422:	b29d      	uxth	r5, r3
 8040424:	fbb4 f3f9 	udiv	r3, r4, r9
 8040428:	fb09 4413 	mls	r4, r9, r3, r4
 804042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8040430:	fb03 fe0e 	mul.w	lr, r3, lr
 8040434:	45a6      	cmp	lr, r4
 8040436:	d908      	bls.n	804044a <__udivmoddi4+0x1da>
 8040438:	eb1c 0404 	adds.w	r4, ip, r4
 804043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8040440:	d26c      	bcs.n	804051c <__udivmoddi4+0x2ac>
 8040442:	45a6      	cmp	lr, r4
 8040444:	d96a      	bls.n	804051c <__udivmoddi4+0x2ac>
 8040446:	3b02      	subs	r3, #2
 8040448:	4464      	add	r4, ip
 804044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 804044e:	fba3 9502 	umull	r9, r5, r3, r2
 8040452:	eba4 040e 	sub.w	r4, r4, lr
 8040456:	42ac      	cmp	r4, r5
 8040458:	46c8      	mov	r8, r9
 804045a:	46ae      	mov	lr, r5
 804045c:	d356      	bcc.n	804050c <__udivmoddi4+0x29c>
 804045e:	d053      	beq.n	8040508 <__udivmoddi4+0x298>
 8040460:	b156      	cbz	r6, 8040478 <__udivmoddi4+0x208>
 8040462:	ebb0 0208 	subs.w	r2, r0, r8
 8040466:	eb64 040e 	sbc.w	r4, r4, lr
 804046a:	fa04 f707 	lsl.w	r7, r4, r7
 804046e:	40ca      	lsrs	r2, r1
 8040470:	40cc      	lsrs	r4, r1
 8040472:	4317      	orrs	r7, r2
 8040474:	e9c6 7400 	strd	r7, r4, [r6]
 8040478:	4618      	mov	r0, r3
 804047a:	2100      	movs	r1, #0
 804047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040480:	f1c3 0120 	rsb	r1, r3, #32
 8040484:	fa02 fc03 	lsl.w	ip, r2, r3
 8040488:	fa20 f201 	lsr.w	r2, r0, r1
 804048c:	fa25 f101 	lsr.w	r1, r5, r1
 8040490:	409d      	lsls	r5, r3
 8040492:	432a      	orrs	r2, r5
 8040494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040498:	fa1f fe8c 	uxth.w	lr, ip
 804049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80404a0:	fb07 1510 	mls	r5, r7, r0, r1
 80404a4:	0c11      	lsrs	r1, r2, #16
 80404a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80404aa:	fb00 f50e 	mul.w	r5, r0, lr
 80404ae:	428d      	cmp	r5, r1
 80404b0:	fa04 f403 	lsl.w	r4, r4, r3
 80404b4:	d908      	bls.n	80404c8 <__udivmoddi4+0x258>
 80404b6:	eb1c 0101 	adds.w	r1, ip, r1
 80404ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80404be:	d22f      	bcs.n	8040520 <__udivmoddi4+0x2b0>
 80404c0:	428d      	cmp	r5, r1
 80404c2:	d92d      	bls.n	8040520 <__udivmoddi4+0x2b0>
 80404c4:	3802      	subs	r0, #2
 80404c6:	4461      	add	r1, ip
 80404c8:	1b49      	subs	r1, r1, r5
 80404ca:	b292      	uxth	r2, r2
 80404cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80404d0:	fb07 1115 	mls	r1, r7, r5, r1
 80404d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80404d8:	fb05 f10e 	mul.w	r1, r5, lr
 80404dc:	4291      	cmp	r1, r2
 80404de:	d908      	bls.n	80404f2 <__udivmoddi4+0x282>
 80404e0:	eb1c 0202 	adds.w	r2, ip, r2
 80404e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80404e8:	d216      	bcs.n	8040518 <__udivmoddi4+0x2a8>
 80404ea:	4291      	cmp	r1, r2
 80404ec:	d914      	bls.n	8040518 <__udivmoddi4+0x2a8>
 80404ee:	3d02      	subs	r5, #2
 80404f0:	4462      	add	r2, ip
 80404f2:	1a52      	subs	r2, r2, r1
 80404f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80404f8:	e738      	b.n	804036c <__udivmoddi4+0xfc>
 80404fa:	4631      	mov	r1, r6
 80404fc:	4630      	mov	r0, r6
 80404fe:	e708      	b.n	8040312 <__udivmoddi4+0xa2>
 8040500:	4639      	mov	r1, r7
 8040502:	e6e6      	b.n	80402d2 <__udivmoddi4+0x62>
 8040504:	4610      	mov	r0, r2
 8040506:	e6fb      	b.n	8040300 <__udivmoddi4+0x90>
 8040508:	4548      	cmp	r0, r9
 804050a:	d2a9      	bcs.n	8040460 <__udivmoddi4+0x1f0>
 804050c:	ebb9 0802 	subs.w	r8, r9, r2
 8040510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8040514:	3b01      	subs	r3, #1
 8040516:	e7a3      	b.n	8040460 <__udivmoddi4+0x1f0>
 8040518:	4645      	mov	r5, r8
 804051a:	e7ea      	b.n	80404f2 <__udivmoddi4+0x282>
 804051c:	462b      	mov	r3, r5
 804051e:	e794      	b.n	804044a <__udivmoddi4+0x1da>
 8040520:	4640      	mov	r0, r8
 8040522:	e7d1      	b.n	80404c8 <__udivmoddi4+0x258>
 8040524:	46d0      	mov	r8, sl
 8040526:	e77b      	b.n	8040420 <__udivmoddi4+0x1b0>
 8040528:	3d02      	subs	r5, #2
 804052a:	4462      	add	r2, ip
 804052c:	e732      	b.n	8040394 <__udivmoddi4+0x124>
 804052e:	4608      	mov	r0, r1
 8040530:	e70a      	b.n	8040348 <__udivmoddi4+0xd8>
 8040532:	4464      	add	r4, ip
 8040534:	3802      	subs	r0, #2
 8040536:	e742      	b.n	80403be <__udivmoddi4+0x14e>

08040538 <__aeabi_idiv0>:
 8040538:	4770      	bx	lr
 804053a:	bf00      	nop

0804053c <delay_init>:
static uint16_t fac_us = 0;
static uint32_t fac_ms = 0;

/*初始化*/
void delay_init(void)
{
 804053c:	b480      	push	{r7}
 804053e:	af00      	add	r7, sp, #0
#if	(!Timebase_Source_is_SysTick)
	fac_ms = 1000000;				//作为时基的计数器时钟频率在HAL_InitTick()中被设为了1MHz
 8040540:	4b08      	ldr	r3, [pc, #32]	; (8040564 <delay_init+0x28>)
 8040542:	4a09      	ldr	r2, [pc, #36]	; (8040568 <delay_init+0x2c>)
 8040544:	601a      	str	r2, [r3, #0]
	fac_us = fac_ms / 1000;
 8040546:	4b07      	ldr	r3, [pc, #28]	; (8040564 <delay_init+0x28>)
 8040548:	681b      	ldr	r3, [r3, #0]
 804054a:	4a08      	ldr	r2, [pc, #32]	; (804056c <delay_init+0x30>)
 804054c:	fba2 2303 	umull	r2, r3, r2, r3
 8040550:	099b      	lsrs	r3, r3, #6
 8040552:	b29a      	uxth	r2, r3
 8040554:	4b06      	ldr	r3, [pc, #24]	; (8040570 <delay_init+0x34>)
 8040556:	801a      	strh	r2, [r3, #0]
#else
	fac_ms = SystemCoreClock / 1000;
	fac_us = fac_ms / 1000;
#endif
}
 8040558:	bf00      	nop
 804055a:	46bd      	mov	sp, r7
 804055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040560:	4770      	bx	lr
 8040562:	bf00      	nop
 8040564:	2000008c 	.word	0x2000008c
 8040568:	000f4240 	.word	0x000f4240
 804056c:	10624dd3 	.word	0x10624dd3
 8040570:	20000088 	.word	0x20000088

08040574 <delay_ms>:
	}
}

/*毫秒级延时*/
void delay_ms(uint32_t nms)
{
 8040574:	b480      	push	{r7}
 8040576:	b089      	sub	sp, #36	; 0x24
 8040578:	af00      	add	r7, sp, #0
 804057a:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 804057c:	2300      	movs	r3, #0
 804057e:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 8040580:	2300      	movs	r3, #0
 8040582:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 8040584:	2300      	movs	r3, #0
 8040586:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 8040588:	2300      	movs	r3, #0
 804058a:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 804058c:	2300      	movs	r3, #0
 804058e:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 8040590:	4b1b      	ldr	r3, [pc, #108]	; (8040600 <delay_ms+0x8c>)
 8040592:	681b      	ldr	r3, [r3, #0]
 8040594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8040596:	60fb      	str	r3, [r7, #12]

	ticks = nms * fac_ms;
 8040598:	4b1a      	ldr	r3, [pc, #104]	; (8040604 <delay_ms+0x90>)
 804059a:	681a      	ldr	r2, [r3, #0]
 804059c:	687b      	ldr	r3, [r7, #4]
 804059e:	fb02 f303 	mul.w	r3, r2, r3
 80405a2:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 80405a4:	4b16      	ldr	r3, [pc, #88]	; (8040600 <delay_ms+0x8c>)
 80405a6:	681b      	ldr	r3, [r3, #0]
 80405a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80405aa:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 80405ac:	4b14      	ldr	r3, [pc, #80]	; (8040600 <delay_ms+0x8c>)
 80405ae:	681b      	ldr	r3, [r3, #0]
 80405b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80405b2:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 80405b4:	693a      	ldr	r2, [r7, #16]
 80405b6:	69fb      	ldr	r3, [r7, #28]
 80405b8:	429a      	cmp	r2, r3
 80405ba:	d0f7      	beq.n	80405ac <delay_ms+0x38>
		{
			if (tnow < told)
 80405bc:	693a      	ldr	r2, [r7, #16]
 80405be:	69fb      	ldr	r3, [r7, #28]
 80405c0:	429a      	cmp	r2, r3
 80405c2:	d206      	bcs.n	80405d2 <delay_ms+0x5e>
			{
				tcnt += told - tnow;
 80405c4:	69fa      	ldr	r2, [r7, #28]
 80405c6:	693b      	ldr	r3, [r7, #16]
 80405c8:	1ad3      	subs	r3, r2, r3
 80405ca:	69ba      	ldr	r2, [r7, #24]
 80405cc:	4413      	add	r3, r2
 80405ce:	61bb      	str	r3, [r7, #24]
 80405d0:	e007      	b.n	80405e2 <delay_ms+0x6e>
			}
			else
			{
				tcnt += reload - tnow + told;
 80405d2:	68fa      	ldr	r2, [r7, #12]
 80405d4:	693b      	ldr	r3, [r7, #16]
 80405d6:	1ad2      	subs	r2, r2, r3
 80405d8:	69fb      	ldr	r3, [r7, #28]
 80405da:	4413      	add	r3, r2
 80405dc:	69ba      	ldr	r2, [r7, #24]
 80405de:	4413      	add	r3, r2
 80405e0:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 80405e2:	693b      	ldr	r3, [r7, #16]
 80405e4:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 80405e6:	69ba      	ldr	r2, [r7, #24]
 80405e8:	697b      	ldr	r3, [r7, #20]
 80405ea:	429a      	cmp	r2, r3
 80405ec:	d200      	bcs.n	80405f0 <delay_ms+0x7c>
		tnow = Delay_GetCounter();
 80405ee:	e7dd      	b.n	80405ac <delay_ms+0x38>
			{
				break;
 80405f0:	bf00      	nop
			}
		}
	}
}
 80405f2:	bf00      	nop
 80405f4:	3724      	adds	r7, #36	; 0x24
 80405f6:	46bd      	mov	sp, r7
 80405f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405fc:	4770      	bx	lr
 80405fe:	bf00      	nop
 8040600:	20002134 	.word	0x20002134
 8040604:	2000008c 	.word	0x2000008c

08040608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8040608:	b580      	push	{r7, lr}
 804060a:	b082      	sub	sp, #8
 804060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 804060e:	4b10      	ldr	r3, [pc, #64]	; (8040650 <MX_DMA_Init+0x48>)
 8040610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040612:	4a0f      	ldr	r2, [pc, #60]	; (8040650 <MX_DMA_Init+0x48>)
 8040614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8040618:	6313      	str	r3, [r2, #48]	; 0x30
 804061a:	4b0d      	ldr	r3, [pc, #52]	; (8040650 <MX_DMA_Init+0x48>)
 804061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804061e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8040622:	607b      	str	r3, [r7, #4]
 8040624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8040626:	2200      	movs	r2, #0
 8040628:	2105      	movs	r1, #5
 804062a:	203a      	movs	r0, #58	; 0x3a
 804062c:	f000 fe00 	bl	8041230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8040630:	203a      	movs	r0, #58	; 0x3a
 8040632:	f000 fe19 	bl	8041268 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8040636:	2200      	movs	r2, #0
 8040638:	2105      	movs	r1, #5
 804063a:	2046      	movs	r0, #70	; 0x46
 804063c:	f000 fdf8 	bl	8041230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8040640:	2046      	movs	r0, #70	; 0x46
 8040642:	f000 fe11 	bl	8041268 <HAL_NVIC_EnableIRQ>

}
 8040646:	bf00      	nop
 8040648:	3708      	adds	r7, #8
 804064a:	46bd      	mov	sp, r7
 804064c:	bd80      	pop	{r7, pc}
 804064e:	bf00      	nop
 8040650:	40023800 	.word	0x40023800

08040654 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8040654:	b480      	push	{r7}
 8040656:	b085      	sub	sp, #20
 8040658:	af00      	add	r7, sp, #0
 804065a:	60f8      	str	r0, [r7, #12]
 804065c:	60b9      	str	r1, [r7, #8]
 804065e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8040660:	68fb      	ldr	r3, [r7, #12]
 8040662:	4a07      	ldr	r2, [pc, #28]	; (8040680 <vApplicationGetIdleTaskMemory+0x2c>)
 8040664:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8040666:	68bb      	ldr	r3, [r7, #8]
 8040668:	4a06      	ldr	r2, [pc, #24]	; (8040684 <vApplicationGetIdleTaskMemory+0x30>)
 804066a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 804066c:	687b      	ldr	r3, [r7, #4]
 804066e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040672:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8040674:	bf00      	nop
 8040676:	3714      	adds	r7, #20
 8040678:	46bd      	mov	sp, r7
 804067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804067e:	4770      	bx	lr
 8040680:	20000094 	.word	0x20000094
 8040684:	20000134 	.word	0x20000134

08040688 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8040688:	b5b0      	push	{r4, r5, r7, lr}
 804068a:	b088      	sub	sp, #32
 804068c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 804068e:	4b0a      	ldr	r3, [pc, #40]	; (80406b8 <MX_FREERTOS_Init+0x30>)
 8040690:	1d3c      	adds	r4, r7, #4
 8040692:	461d      	mov	r5, r3
 8040694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8040696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8040698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 804069c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80406a0:	1d3b      	adds	r3, r7, #4
 80406a2:	2100      	movs	r1, #0
 80406a4:	4618      	mov	r0, r3
 80406a6:	f004 f983 	bl	80449b0 <osThreadCreate>
 80406aa:	4603      	mov	r3, r0
 80406ac:	4a03      	ldr	r2, [pc, #12]	; (80406bc <MX_FREERTOS_Init+0x34>)
 80406ae:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
//  osThreadDef(dmaReceiveTask, StartTask03, osPriorityIdle, 0, 2048);
//  dmaReceiveTaskHandle = osThreadCreate(osThread(dmaReceiveTask), NULL);
  /* USER CODE END RTOS_THREADS */

}
 80406b0:	bf00      	nop
 80406b2:	3720      	adds	r7, #32
 80406b4:	46bd      	mov	sp, r7
 80406b6:	bdb0      	pop	{r4, r5, r7, pc}
 80406b8:	0804687c 	.word	0x0804687c
 80406bc:	20000090 	.word	0x20000090

080406c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80406c0:	b580      	push	{r7, lr}
 80406c2:	b082      	sub	sp, #8
 80406c4:	af00      	add	r7, sp, #0
 80406c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  printf("flashapp defult task started!!!\r\n");
 80406c8:	480c      	ldr	r0, [pc, #48]	; (80406fc <StartDefaultTask+0x3c>)
 80406ca:	f005 fcd9 	bl	8046080 <puts>

  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80406ce:	2201      	movs	r2, #1
 80406d0:	2102      	movs	r1, #2
 80406d2:	480b      	ldr	r0, [pc, #44]	; (8040700 <StartDefaultTask+0x40>)
 80406d4:	f001 fb8c 	bl	8041df0 <HAL_GPIO_WritePin>
	  osDelay(500);
 80406d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80406dc:	f004 f9b4 	bl	8044a48 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80406e0:	2200      	movs	r2, #0
 80406e2:	2102      	movs	r1, #2
 80406e4:	4806      	ldr	r0, [pc, #24]	; (8040700 <StartDefaultTask+0x40>)
 80406e6:	f001 fb83 	bl	8041df0 <HAL_GPIO_WritePin>
	  osDelay(500);
 80406ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80406ee:	f004 f9ab 	bl	8044a48 <osDelay>

	  printf("hello flashApp\r\n");
 80406f2:	4804      	ldr	r0, [pc, #16]	; (8040704 <StartDefaultTask+0x44>)
 80406f4:	f005 fcc4 	bl	8046080 <puts>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80406f8:	e7e9      	b.n	80406ce <StartDefaultTask+0xe>
 80406fa:	bf00      	nop
 80406fc:	08046898 	.word	0x08046898
 8040700:	40020400 	.word	0x40020400
 8040704:	080468bc 	.word	0x080468bc

08040708 <MX_GPIO_Init>:
     PG13   ------> ETH_TXD0
     PG14   ------> ETH_TXD1
     PB6   ------> QUADSPI_BK1_NCS
*/
void MX_GPIO_Init(void)
{
 8040708:	b580      	push	{r7, lr}
 804070a:	b08c      	sub	sp, #48	; 0x30
 804070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804070e:	f107 031c 	add.w	r3, r7, #28
 8040712:	2200      	movs	r2, #0
 8040714:	601a      	str	r2, [r3, #0]
 8040716:	605a      	str	r2, [r3, #4]
 8040718:	609a      	str	r2, [r3, #8]
 804071a:	60da      	str	r2, [r3, #12]
 804071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 804071e:	4b52      	ldr	r3, [pc, #328]	; (8040868 <MX_GPIO_Init+0x160>)
 8040720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040722:	4a51      	ldr	r2, [pc, #324]	; (8040868 <MX_GPIO_Init+0x160>)
 8040724:	f043 0310 	orr.w	r3, r3, #16
 8040728:	6313      	str	r3, [r2, #48]	; 0x30
 804072a:	4b4f      	ldr	r3, [pc, #316]	; (8040868 <MX_GPIO_Init+0x160>)
 804072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804072e:	f003 0310 	and.w	r3, r3, #16
 8040732:	61bb      	str	r3, [r7, #24]
 8040734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040736:	4b4c      	ldr	r3, [pc, #304]	; (8040868 <MX_GPIO_Init+0x160>)
 8040738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804073a:	4a4b      	ldr	r2, [pc, #300]	; (8040868 <MX_GPIO_Init+0x160>)
 804073c:	f043 0304 	orr.w	r3, r3, #4
 8040740:	6313      	str	r3, [r2, #48]	; 0x30
 8040742:	4b49      	ldr	r3, [pc, #292]	; (8040868 <MX_GPIO_Init+0x160>)
 8040744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040746:	f003 0304 	and.w	r3, r3, #4
 804074a:	617b      	str	r3, [r7, #20]
 804074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804074e:	4b46      	ldr	r3, [pc, #280]	; (8040868 <MX_GPIO_Init+0x160>)
 8040750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040752:	4a45      	ldr	r2, [pc, #276]	; (8040868 <MX_GPIO_Init+0x160>)
 8040754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040758:	6313      	str	r3, [r2, #48]	; 0x30
 804075a:	4b43      	ldr	r3, [pc, #268]	; (8040868 <MX_GPIO_Init+0x160>)
 804075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040762:	613b      	str	r3, [r7, #16]
 8040764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040766:	4b40      	ldr	r3, [pc, #256]	; (8040868 <MX_GPIO_Init+0x160>)
 8040768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804076a:	4a3f      	ldr	r2, [pc, #252]	; (8040868 <MX_GPIO_Init+0x160>)
 804076c:	f043 0302 	orr.w	r3, r3, #2
 8040770:	6313      	str	r3, [r2, #48]	; 0x30
 8040772:	4b3d      	ldr	r3, [pc, #244]	; (8040868 <MX_GPIO_Init+0x160>)
 8040774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040776:	f003 0302 	and.w	r3, r3, #2
 804077a:	60fb      	str	r3, [r7, #12]
 804077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804077e:	4b3a      	ldr	r3, [pc, #232]	; (8040868 <MX_GPIO_Init+0x160>)
 8040780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040782:	4a39      	ldr	r2, [pc, #228]	; (8040868 <MX_GPIO_Init+0x160>)
 8040784:	f043 0301 	orr.w	r3, r3, #1
 8040788:	6313      	str	r3, [r2, #48]	; 0x30
 804078a:	4b37      	ldr	r3, [pc, #220]	; (8040868 <MX_GPIO_Init+0x160>)
 804078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804078e:	f003 0301 	and.w	r3, r3, #1
 8040792:	60bb      	str	r3, [r7, #8]
 8040794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040796:	4b34      	ldr	r3, [pc, #208]	; (8040868 <MX_GPIO_Init+0x160>)
 8040798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804079a:	4a33      	ldr	r2, [pc, #204]	; (8040868 <MX_GPIO_Init+0x160>)
 804079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80407a0:	6313      	str	r3, [r2, #48]	; 0x30
 80407a2:	4b31      	ldr	r3, [pc, #196]	; (8040868 <MX_GPIO_Init+0x160>)
 80407a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80407aa:	607b      	str	r3, [r7, #4]
 80407ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80407ae:	2201      	movs	r2, #1
 80407b0:	2103      	movs	r1, #3
 80407b2:	482e      	ldr	r0, [pc, #184]	; (804086c <MX_GPIO_Init+0x164>)
 80407b4:	f001 fb1c 	bl	8041df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80407b8:	2308      	movs	r3, #8
 80407ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80407bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80407c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80407c2:	2301      	movs	r3, #1
 80407c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80407c6:	f107 031c 	add.w	r3, r7, #28
 80407ca:	4619      	mov	r1, r3
 80407cc:	4828      	ldr	r0, [pc, #160]	; (8040870 <MX_GPIO_Init+0x168>)
 80407ce:	f001 f963 	bl	8041a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80407d2:	2303      	movs	r3, #3
 80407d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407d6:	2301      	movs	r3, #1
 80407d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407da:	2300      	movs	r3, #0
 80407dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407de:	2300      	movs	r3, #0
 80407e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80407e2:	f107 031c 	add.w	r3, r7, #28
 80407e6:	4619      	mov	r1, r3
 80407e8:	4820      	ldr	r0, [pc, #128]	; (804086c <MX_GPIO_Init+0x164>)
 80407ea:	f001 f955 	bl	8041a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80407ee:	2304      	movs	r3, #4
 80407f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80407f2:	2302      	movs	r3, #2
 80407f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407f6:	2300      	movs	r3, #0
 80407f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80407fa:	2303      	movs	r3, #3
 80407fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80407fe:	2309      	movs	r3, #9
 8040800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040802:	f107 031c 	add.w	r3, r7, #28
 8040806:	4619      	mov	r1, r3
 8040808:	4818      	ldr	r0, [pc, #96]	; (804086c <MX_GPIO_Init+0x164>)
 804080a:	f001 f945 	bl	8041a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 804080e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040814:	2302      	movs	r3, #2
 8040816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040818:	2300      	movs	r3, #0
 804081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804081c:	2303      	movs	r3, #3
 804081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8040820:	230b      	movs	r3, #11
 8040822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040824:	f107 031c 	add.w	r3, r7, #28
 8040828:	4619      	mov	r1, r3
 804082a:	4812      	ldr	r0, [pc, #72]	; (8040874 <MX_GPIO_Init+0x16c>)
 804082c:	f001 f934 	bl	8041a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8040830:	2340      	movs	r3, #64	; 0x40
 8040832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040834:	2302      	movs	r3, #2
 8040836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040838:	2300      	movs	r3, #0
 804083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804083c:	2303      	movs	r3, #3
 804083e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8040840:	230a      	movs	r3, #10
 8040842:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040844:	f107 031c 	add.w	r3, r7, #28
 8040848:	4619      	mov	r1, r3
 804084a:	4808      	ldr	r0, [pc, #32]	; (804086c <MX_GPIO_Init+0x164>)
 804084c:	f001 f924 	bl	8041a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8040850:	2200      	movs	r2, #0
 8040852:	2105      	movs	r1, #5
 8040854:	2009      	movs	r0, #9
 8040856:	f000 fceb 	bl	8041230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 804085a:	2009      	movs	r0, #9
 804085c:	f000 fd04 	bl	8041268 <HAL_NVIC_EnableIRQ>

}
 8040860:	bf00      	nop
 8040862:	3730      	adds	r7, #48	; 0x30
 8040864:	46bd      	mov	sp, r7
 8040866:	bd80      	pop	{r7, pc}
 8040868:	40023800 	.word	0x40023800
 804086c:	40020400 	.word	0x40020400
 8040870:	40021c00 	.word	0x40021c00
 8040874:	40021800 	.word	0x40021800

08040878 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8040878:	b580      	push	{r7, lr}
 804087a:	b082      	sub	sp, #8
 804087c:	af00      	add	r7, sp, #0
 804087e:	4603      	mov	r3, r0
 8040880:	80fb      	strh	r3, [r7, #6]
    delay_ms(200);  //延时消抖
 8040882:	20c8      	movs	r0, #200	; 0xc8
 8040884:	f7ff fe76 	bl	8040574 <delay_ms>

    switch (GPIO_Pin)
 8040888:	88fb      	ldrh	r3, [r7, #6]
 804088a:	2b08      	cmp	r3, #8
 804088c:	d103      	bne.n	8040896 <HAL_GPIO_EXTI_Callback+0x1e>
    {
    case KEY0_Pin:
      printf("key0 press\r\n");
 804088e:	4804      	ldr	r0, [pc, #16]	; (80408a0 <HAL_GPIO_EXTI_Callback+0x28>)
 8040890:	f005 fbf6 	bl	8046080 <puts>
      
      break;
 8040894:	e000      	b.n	8040898 <HAL_GPIO_EXTI_Callback+0x20>
    
    default:
      break;
 8040896:	bf00      	nop
    }
}
 8040898:	bf00      	nop
 804089a:	3708      	adds	r7, #8
 804089c:	46bd      	mov	sp, r7
 804089e:	bd80      	pop	{r7, pc}
 80408a0:	080468cc 	.word	0x080468cc

080408a4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80408a4:	b480      	push	{r7}
 80408a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80408a8:	f3bf 8f4f 	dsb	sy
}
 80408ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80408ae:	f3bf 8f6f 	isb	sy
}
 80408b2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80408b4:	4b0d      	ldr	r3, [pc, #52]	; (80408ec <SCB_EnableICache+0x48>)
 80408b6:	2200      	movs	r2, #0
 80408b8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80408bc:	f3bf 8f4f 	dsb	sy
}
 80408c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80408c2:	f3bf 8f6f 	isb	sy
}
 80408c6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80408c8:	4b08      	ldr	r3, [pc, #32]	; (80408ec <SCB_EnableICache+0x48>)
 80408ca:	695b      	ldr	r3, [r3, #20]
 80408cc:	4a07      	ldr	r2, [pc, #28]	; (80408ec <SCB_EnableICache+0x48>)
 80408ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80408d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80408d4:	f3bf 8f4f 	dsb	sy
}
 80408d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80408da:	f3bf 8f6f 	isb	sy
}
 80408de:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80408e0:	bf00      	nop
 80408e2:	46bd      	mov	sp, r7
 80408e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408e8:	4770      	bx	lr
 80408ea:	bf00      	nop
 80408ec:	e000ed00 	.word	0xe000ed00

080408f0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80408f0:	b480      	push	{r7}
 80408f2:	b085      	sub	sp, #20
 80408f4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80408f6:	4b1f      	ldr	r3, [pc, #124]	; (8040974 <SCB_EnableDCache+0x84>)
 80408f8:	2200      	movs	r2, #0
 80408fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80408fe:	f3bf 8f4f 	dsb	sy
}
 8040902:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8040904:	4b1b      	ldr	r3, [pc, #108]	; (8040974 <SCB_EnableDCache+0x84>)
 8040906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804090a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 804090c:	687b      	ldr	r3, [r7, #4]
 804090e:	0b5b      	lsrs	r3, r3, #13
 8040910:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8040914:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8040916:	687b      	ldr	r3, [r7, #4]
 8040918:	08db      	lsrs	r3, r3, #3
 804091a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 804091e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8040920:	68fb      	ldr	r3, [r7, #12]
 8040922:	015a      	lsls	r2, r3, #5
 8040924:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8040928:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 804092a:	68ba      	ldr	r2, [r7, #8]
 804092c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 804092e:	4911      	ldr	r1, [pc, #68]	; (8040974 <SCB_EnableDCache+0x84>)
 8040930:	4313      	orrs	r3, r2
 8040932:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8040936:	68bb      	ldr	r3, [r7, #8]
 8040938:	1e5a      	subs	r2, r3, #1
 804093a:	60ba      	str	r2, [r7, #8]
 804093c:	2b00      	cmp	r3, #0
 804093e:	d1ef      	bne.n	8040920 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8040940:	68fb      	ldr	r3, [r7, #12]
 8040942:	1e5a      	subs	r2, r3, #1
 8040944:	60fa      	str	r2, [r7, #12]
 8040946:	2b00      	cmp	r3, #0
 8040948:	d1e5      	bne.n	8040916 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 804094a:	f3bf 8f4f 	dsb	sy
}
 804094e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8040950:	4b08      	ldr	r3, [pc, #32]	; (8040974 <SCB_EnableDCache+0x84>)
 8040952:	695b      	ldr	r3, [r3, #20]
 8040954:	4a07      	ldr	r2, [pc, #28]	; (8040974 <SCB_EnableDCache+0x84>)
 8040956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804095a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 804095c:	f3bf 8f4f 	dsb	sy
}
 8040960:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8040962:	f3bf 8f6f 	isb	sy
}
 8040966:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8040968:	bf00      	nop
 804096a:	3714      	adds	r7, #20
 804096c:	46bd      	mov	sp, r7
 804096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040972:	4770      	bx	lr
 8040974:	e000ed00 	.word	0xe000ed00

08040978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040978:	b580      	push	{r7, lr}
 804097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SCB->VTOR = FLASH_BASE | 0x40000;
 804097c:	4b0f      	ldr	r3, [pc, #60]	; (80409bc <main+0x44>)
 804097e:	4a10      	ldr	r2, [pc, #64]	; (80409c0 <main+0x48>)
 8040980:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8040982:	f7ff ff8f 	bl	80408a4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8040986:	f7ff ffb3 	bl	80408f0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804098a:	f000 fb6c 	bl	8041066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804098e:	f000 f819 	bl	80409c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->CACR|=1<<2;
 8040992:	4b0a      	ldr	r3, [pc, #40]	; (80409bc <main+0x44>)
 8040994:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8040998:	4a08      	ldr	r2, [pc, #32]	; (80409bc <main+0x44>)
 804099a:	f043 0304 	orr.w	r3, r3, #4
 804099e:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
  delay_init();
 80409a2:	f7ff fdcb 	bl	804053c <delay_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80409a6:	f7ff feaf 	bl	8040708 <MX_GPIO_Init>
  MX_DMA_Init();
 80409aa:	f7ff fe2d 	bl	8040608 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80409ae:	f000 fa35 	bl	8040e1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80409b2:	f7ff fe69 	bl	8040688 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80409b6:	f003 fff4 	bl	80449a2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80409ba:	e7fe      	b.n	80409ba <main+0x42>
 80409bc:	e000ed00 	.word	0xe000ed00
 80409c0:	08040000 	.word	0x08040000

080409c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80409c4:	b580      	push	{r7, lr}
 80409c6:	b094      	sub	sp, #80	; 0x50
 80409c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80409ca:	f107 031c 	add.w	r3, r7, #28
 80409ce:	2234      	movs	r2, #52	; 0x34
 80409d0:	2100      	movs	r1, #0
 80409d2:	4618      	mov	r0, r3
 80409d4:	f005 fc34 	bl	8046240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80409d8:	f107 0308 	add.w	r3, r7, #8
 80409dc:	2200      	movs	r2, #0
 80409de:	601a      	str	r2, [r3, #0]
 80409e0:	605a      	str	r2, [r3, #4]
 80409e2:	609a      	str	r2, [r3, #8]
 80409e4:	60da      	str	r2, [r3, #12]
 80409e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80409e8:	f001 fa34 	bl	8041e54 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80409ec:	4b2b      	ldr	r3, [pc, #172]	; (8040a9c <SystemClock_Config+0xd8>)
 80409ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80409f0:	4a2a      	ldr	r2, [pc, #168]	; (8040a9c <SystemClock_Config+0xd8>)
 80409f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80409f6:	6413      	str	r3, [r2, #64]	; 0x40
 80409f8:	4b28      	ldr	r3, [pc, #160]	; (8040a9c <SystemClock_Config+0xd8>)
 80409fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80409fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a00:	607b      	str	r3, [r7, #4]
 8040a02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040a04:	4b26      	ldr	r3, [pc, #152]	; (8040aa0 <SystemClock_Config+0xdc>)
 8040a06:	681b      	ldr	r3, [r3, #0]
 8040a08:	4a25      	ldr	r2, [pc, #148]	; (8040aa0 <SystemClock_Config+0xdc>)
 8040a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8040a0e:	6013      	str	r3, [r2, #0]
 8040a10:	4b23      	ldr	r3, [pc, #140]	; (8040aa0 <SystemClock_Config+0xdc>)
 8040a12:	681b      	ldr	r3, [r3, #0]
 8040a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040a18:	603b      	str	r3, [r7, #0]
 8040a1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040a1c:	2302      	movs	r3, #2
 8040a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040a20:	2301      	movs	r3, #1
 8040a22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040a24:	2310      	movs	r3, #16
 8040a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040a28:	2302      	movs	r3, #2
 8040a2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8040a2c:	2300      	movs	r3, #0
 8040a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8040a30:	2308      	movs	r3, #8
 8040a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8040a34:	23d8      	movs	r3, #216	; 0xd8
 8040a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8040a38:	2302      	movs	r3, #2
 8040a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8040a3c:	2302      	movs	r3, #2
 8040a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8040a40:	2302      	movs	r3, #2
 8040a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040a44:	f107 031c 	add.w	r3, r7, #28
 8040a48:	4618      	mov	r0, r3
 8040a4a:	f001 fa63 	bl	8041f14 <HAL_RCC_OscConfig>
 8040a4e:	4603      	mov	r3, r0
 8040a50:	2b00      	cmp	r3, #0
 8040a52:	d001      	beq.n	8040a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8040a54:	f000 f838 	bl	8040ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8040a58:	f001 fa0c 	bl	8041e74 <HAL_PWREx_EnableOverDrive>
 8040a5c:	4603      	mov	r3, r0
 8040a5e:	2b00      	cmp	r3, #0
 8040a60:	d001      	beq.n	8040a66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8040a62:	f000 f831 	bl	8040ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040a66:	230f      	movs	r3, #15
 8040a68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040a6a:	2302      	movs	r3, #2
 8040a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040a6e:	2300      	movs	r3, #0
 8040a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8040a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8040a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8040a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040a7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8040a7e:	f107 0308 	add.w	r3, r7, #8
 8040a82:	2107      	movs	r1, #7
 8040a84:	4618      	mov	r0, r3
 8040a86:	f001 fcf3 	bl	8042470 <HAL_RCC_ClockConfig>
 8040a8a:	4603      	mov	r3, r0
 8040a8c:	2b00      	cmp	r3, #0
 8040a8e:	d001      	beq.n	8040a94 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8040a90:	f000 f81a 	bl	8040ac8 <Error_Handler>
  }
}
 8040a94:	bf00      	nop
 8040a96:	3750      	adds	r7, #80	; 0x50
 8040a98:	46bd      	mov	sp, r7
 8040a9a:	bd80      	pop	{r7, pc}
 8040a9c:	40023800 	.word	0x40023800
 8040aa0:	40007000 	.word	0x40007000

08040aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040aa4:	b580      	push	{r7, lr}
 8040aa6:	b082      	sub	sp, #8
 8040aa8:	af00      	add	r7, sp, #0
 8040aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8040aac:	687b      	ldr	r3, [r7, #4]
 8040aae:	681b      	ldr	r3, [r3, #0]
 8040ab0:	4a04      	ldr	r2, [pc, #16]	; (8040ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040ab2:	4293      	cmp	r3, r2
 8040ab4:	d101      	bne.n	8040aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040ab6:	f000 fae3 	bl	8041080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040aba:	bf00      	nop
 8040abc:	3708      	adds	r7, #8
 8040abe:	46bd      	mov	sp, r7
 8040ac0:	bd80      	pop	{r7, pc}
 8040ac2:	bf00      	nop
 8040ac4:	40014400 	.word	0x40014400

08040ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040ac8:	b480      	push	{r7}
 8040aca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8040acc:	b672      	cpsid	i
}
 8040ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040ad0:	e7fe      	b.n	8040ad0 <Error_Handler+0x8>

08040ad2 <UART_GetTXState>:
 * 
 * @param huart 
 * @return HAL_UART_StateTypeDef 
 */
HAL_UART_StateTypeDef UART_GetTXState(const UART_HandleTypeDef *huart)
{
 8040ad2:	b480      	push	{r7}
 8040ad4:	b085      	sub	sp, #20
 8040ad6:	af00      	add	r7, sp, #0
 8040ad8:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  temp1 = huart->gState;
 8040ada:	687b      	ldr	r3, [r7, #4]
 8040adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8040ade:	60fb      	str	r3, [r7, #12]

  return (HAL_UART_StateTypeDef)(temp1);
 8040ae0:	68fb      	ldr	r3, [r7, #12]
}
 8040ae2:	4618      	mov	r0, r3
 8040ae4:	3714      	adds	r7, #20
 8040ae6:	46bd      	mov	sp, r7
 8040ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040aec:	4770      	bx	lr
	...

08040af0 <_write>:

int _write(int file, char *ptr, int len){
 8040af0:	b580      	push	{r7, lr}
 8040af2:	b084      	sub	sp, #16
 8040af4:	af00      	add	r7, sp, #0
 8040af6:	60f8      	str	r0, [r7, #12]
 8040af8:	60b9      	str	r1, [r7, #8]
 8040afa:	607a      	str	r2, [r7, #4]
	//阻塞发送
	//HAL_UART_Transmit(&huart1,(uint8_t*)ptr, len, 0xFFFF);

	//DMA发送
	//SCB_CleanDCache_by_Addr(ptr, len);	//更新cache到内存（如果未开启透写）
	HAL_UART_Transmit_DMA(&huart1, ptr, len);	//DMA发送
 8040afc:	687b      	ldr	r3, [r7, #4]
 8040afe:	b29b      	uxth	r3, r3
 8040b00:	461a      	mov	r2, r3
 8040b02:	68b9      	ldr	r1, [r7, #8]
 8040b04:	4807      	ldr	r0, [pc, #28]	; (8040b24 <_write+0x34>)
 8040b06:	f002 fe21 	bl	804374c <HAL_UART_Transmit_DMA>
	
	while (UART_GetTXState(&huart1) != HAL_UART_STATE_READY)
 8040b0a:	bf00      	nop
 8040b0c:	4805      	ldr	r0, [pc, #20]	; (8040b24 <_write+0x34>)
 8040b0e:	f7ff ffe0 	bl	8040ad2 <UART_GetTXState>
 8040b12:	4603      	mov	r3, r0
 8040b14:	2b20      	cmp	r3, #32
 8040b16:	d1f9      	bne.n	8040b0c <_write+0x1c>

	//not work
	// while (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_READY)
	// {
	// }
	return len;
 8040b18:	687b      	ldr	r3, [r7, #4]
}
 8040b1a:	4618      	mov	r0, r3
 8040b1c:	3710      	adds	r7, #16
 8040b1e:	46bd      	mov	sp, r7
 8040b20:	bd80      	pop	{r7, pc}
 8040b22:	bf00      	nop
 8040b24:	20002184 	.word	0x20002184

08040b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040b28:	b580      	push	{r7, lr}
 8040b2a:	b082      	sub	sp, #8
 8040b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8040b2e:	4b11      	ldr	r3, [pc, #68]	; (8040b74 <HAL_MspInit+0x4c>)
 8040b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b32:	4a10      	ldr	r2, [pc, #64]	; (8040b74 <HAL_MspInit+0x4c>)
 8040b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040b38:	6413      	str	r3, [r2, #64]	; 0x40
 8040b3a:	4b0e      	ldr	r3, [pc, #56]	; (8040b74 <HAL_MspInit+0x4c>)
 8040b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040b42:	607b      	str	r3, [r7, #4]
 8040b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b46:	4b0b      	ldr	r3, [pc, #44]	; (8040b74 <HAL_MspInit+0x4c>)
 8040b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040b4a:	4a0a      	ldr	r2, [pc, #40]	; (8040b74 <HAL_MspInit+0x4c>)
 8040b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040b50:	6453      	str	r3, [r2, #68]	; 0x44
 8040b52:	4b08      	ldr	r3, [pc, #32]	; (8040b74 <HAL_MspInit+0x4c>)
 8040b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040b5a:	603b      	str	r3, [r7, #0]
 8040b5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8040b5e:	2200      	movs	r2, #0
 8040b60:	210f      	movs	r1, #15
 8040b62:	f06f 0001 	mvn.w	r0, #1
 8040b66:	f000 fb63 	bl	8041230 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040b6a:	bf00      	nop
 8040b6c:	3708      	adds	r7, #8
 8040b6e:	46bd      	mov	sp, r7
 8040b70:	bd80      	pop	{r7, pc}
 8040b72:	bf00      	nop
 8040b74:	40023800 	.word	0x40023800

08040b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b78:	b580      	push	{r7, lr}
 8040b7a:	b08c      	sub	sp, #48	; 0x30
 8040b7c:	af00      	add	r7, sp, #0
 8040b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8040b80:	2300      	movs	r3, #0
 8040b82:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8040b84:	2300      	movs	r3, #0
 8040b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8040b88:	4b2f      	ldr	r3, [pc, #188]	; (8040c48 <HAL_InitTick+0xd0>)
 8040b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040b8c:	4a2e      	ldr	r2, [pc, #184]	; (8040c48 <HAL_InitTick+0xd0>)
 8040b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040b92:	6453      	str	r3, [r2, #68]	; 0x44
 8040b94:	4b2c      	ldr	r3, [pc, #176]	; (8040c48 <HAL_InitTick+0xd0>)
 8040b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040b9c:	60bb      	str	r3, [r7, #8]
 8040b9e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8040ba0:	f107 020c 	add.w	r2, r7, #12
 8040ba4:	f107 0310 	add.w	r3, r7, #16
 8040ba8:	4611      	mov	r1, r2
 8040baa:	4618      	mov	r0, r3
 8040bac:	f001 fe46 	bl	804283c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8040bb0:	f001 fe30 	bl	8042814 <HAL_RCC_GetPCLK2Freq>
 8040bb4:	4603      	mov	r3, r0
 8040bb6:	005b      	lsls	r3, r3, #1
 8040bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8040bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8040bbc:	4a23      	ldr	r2, [pc, #140]	; (8040c4c <HAL_InitTick+0xd4>)
 8040bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8040bc2:	0c9b      	lsrs	r3, r3, #18
 8040bc4:	3b01      	subs	r3, #1
 8040bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8040bc8:	4b21      	ldr	r3, [pc, #132]	; (8040c50 <HAL_InitTick+0xd8>)
 8040bca:	4a22      	ldr	r2, [pc, #136]	; (8040c54 <HAL_InitTick+0xdc>)
 8040bcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8040bce:	4b20      	ldr	r3, [pc, #128]	; (8040c50 <HAL_InitTick+0xd8>)
 8040bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8040bd4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8040bd6:	4a1e      	ldr	r2, [pc, #120]	; (8040c50 <HAL_InitTick+0xd8>)
 8040bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8040bda:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8040bdc:	4b1c      	ldr	r3, [pc, #112]	; (8040c50 <HAL_InitTick+0xd8>)
 8040bde:	2200      	movs	r2, #0
 8040be0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040be2:	4b1b      	ldr	r3, [pc, #108]	; (8040c50 <HAL_InitTick+0xd8>)
 8040be4:	2200      	movs	r2, #0
 8040be6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040be8:	4b19      	ldr	r3, [pc, #100]	; (8040c50 <HAL_InitTick+0xd8>)
 8040bea:	2200      	movs	r2, #0
 8040bec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8040bee:	4818      	ldr	r0, [pc, #96]	; (8040c50 <HAL_InitTick+0xd8>)
 8040bf0:	f002 fa7e 	bl	80430f0 <HAL_TIM_Base_Init>
 8040bf4:	4603      	mov	r3, r0
 8040bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8040bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8040bfe:	2b00      	cmp	r3, #0
 8040c00:	d11b      	bne.n	8040c3a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8040c02:	4813      	ldr	r0, [pc, #76]	; (8040c50 <HAL_InitTick+0xd8>)
 8040c04:	f002 fad6 	bl	80431b4 <HAL_TIM_Base_Start_IT>
 8040c08:	4603      	mov	r3, r0
 8040c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8040c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8040c12:	2b00      	cmp	r3, #0
 8040c14:	d111      	bne.n	8040c3a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8040c16:	2019      	movs	r0, #25
 8040c18:	f000 fb26 	bl	8041268 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040c1c:	687b      	ldr	r3, [r7, #4]
 8040c1e:	2b0f      	cmp	r3, #15
 8040c20:	d808      	bhi.n	8040c34 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8040c22:	2200      	movs	r2, #0
 8040c24:	6879      	ldr	r1, [r7, #4]
 8040c26:	2019      	movs	r0, #25
 8040c28:	f000 fb02 	bl	8041230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040c2c:	4a0a      	ldr	r2, [pc, #40]	; (8040c58 <HAL_InitTick+0xe0>)
 8040c2e:	687b      	ldr	r3, [r7, #4]
 8040c30:	6013      	str	r3, [r2, #0]
 8040c32:	e002      	b.n	8040c3a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8040c34:	2301      	movs	r3, #1
 8040c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8040c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8040c3e:	4618      	mov	r0, r3
 8040c40:	3730      	adds	r7, #48	; 0x30
 8040c42:	46bd      	mov	sp, r7
 8040c44:	bd80      	pop	{r7, pc}
 8040c46:	bf00      	nop
 8040c48:	40023800 	.word	0x40023800
 8040c4c:	431bde83 	.word	0x431bde83
 8040c50:	20002134 	.word	0x20002134
 8040c54:	40014400 	.word	0x40014400
 8040c58:	20000004 	.word	0x20000004

08040c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040c5c:	b480      	push	{r7}
 8040c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040c60:	e7fe      	b.n	8040c60 <NMI_Handler+0x4>

08040c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040c62:	b480      	push	{r7}
 8040c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040c66:	e7fe      	b.n	8040c66 <HardFault_Handler+0x4>

08040c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040c68:	b480      	push	{r7}
 8040c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040c6c:	e7fe      	b.n	8040c6c <MemManage_Handler+0x4>

08040c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040c6e:	b480      	push	{r7}
 8040c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040c72:	e7fe      	b.n	8040c72 <BusFault_Handler+0x4>

08040c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040c74:	b480      	push	{r7}
 8040c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040c78:	e7fe      	b.n	8040c78 <UsageFault_Handler+0x4>

08040c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040c7a:	b480      	push	{r7}
 8040c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040c7e:	bf00      	nop
 8040c80:	46bd      	mov	sp, r7
 8040c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c86:	4770      	bx	lr

08040c88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8040c88:	b580      	push	{r7, lr}
 8040c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8040c8c:	2008      	movs	r0, #8
 8040c8e:	f001 f8c9 	bl	8041e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8040c92:	bf00      	nop
 8040c94:	bd80      	pop	{r7, pc}
	...

08040c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8040c98:	b580      	push	{r7, lr}
 8040c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8040c9c:	4802      	ldr	r0, [pc, #8]	; (8040ca8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8040c9e:	f002 fb01 	bl	80432a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8040ca2:	bf00      	nop
 8040ca4:	bd80      	pop	{r7, pc}
 8040ca6:	bf00      	nop
 8040ca8:	20002134 	.word	0x20002134

08040cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8040cac:	b580      	push	{r7, lr}
 8040cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8040cb0:	4802      	ldr	r0, [pc, #8]	; (8040cbc <USART1_IRQHandler+0x10>)
 8040cb2:	f002 fdc7 	bl	8043844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8040cb6:	bf00      	nop
 8040cb8:	bd80      	pop	{r7, pc}
 8040cba:	bf00      	nop
 8040cbc:	20002184 	.word	0x20002184

08040cc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8040cc0:	b580      	push	{r7, lr}
 8040cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8040cc4:	4802      	ldr	r0, [pc, #8]	; (8040cd0 <DMA2_Stream2_IRQHandler+0x10>)
 8040cc6:	f000 fc7d 	bl	80415c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8040cca:	bf00      	nop
 8040ccc:	bd80      	pop	{r7, pc}
 8040cce:	bf00      	nop
 8040cd0:	2000226c 	.word	0x2000226c

08040cd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8040cd4:	b580      	push	{r7, lr}
 8040cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8040cd8:	4802      	ldr	r0, [pc, #8]	; (8040ce4 <DMA2_Stream7_IRQHandler+0x10>)
 8040cda:	f000 fc73 	bl	80415c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8040cde:	bf00      	nop
 8040ce0:	bd80      	pop	{r7, pc}
 8040ce2:	bf00      	nop
 8040ce4:	2000220c 	.word	0x2000220c

08040ce8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040ce8:	b580      	push	{r7, lr}
 8040cea:	b086      	sub	sp, #24
 8040cec:	af00      	add	r7, sp, #0
 8040cee:	60f8      	str	r0, [r7, #12]
 8040cf0:	60b9      	str	r1, [r7, #8]
 8040cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040cf4:	2300      	movs	r3, #0
 8040cf6:	617b      	str	r3, [r7, #20]
 8040cf8:	e00a      	b.n	8040d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040cfa:	f3af 8000 	nop.w
 8040cfe:	4601      	mov	r1, r0
 8040d00:	68bb      	ldr	r3, [r7, #8]
 8040d02:	1c5a      	adds	r2, r3, #1
 8040d04:	60ba      	str	r2, [r7, #8]
 8040d06:	b2ca      	uxtb	r2, r1
 8040d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040d0a:	697b      	ldr	r3, [r7, #20]
 8040d0c:	3301      	adds	r3, #1
 8040d0e:	617b      	str	r3, [r7, #20]
 8040d10:	697a      	ldr	r2, [r7, #20]
 8040d12:	687b      	ldr	r3, [r7, #4]
 8040d14:	429a      	cmp	r2, r3
 8040d16:	dbf0      	blt.n	8040cfa <_read+0x12>
  }

  return len;
 8040d18:	687b      	ldr	r3, [r7, #4]
}
 8040d1a:	4618      	mov	r0, r3
 8040d1c:	3718      	adds	r7, #24
 8040d1e:	46bd      	mov	sp, r7
 8040d20:	bd80      	pop	{r7, pc}

08040d22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8040d22:	b480      	push	{r7}
 8040d24:	b083      	sub	sp, #12
 8040d26:	af00      	add	r7, sp, #0
 8040d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040d2e:	4618      	mov	r0, r3
 8040d30:	370c      	adds	r7, #12
 8040d32:	46bd      	mov	sp, r7
 8040d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d38:	4770      	bx	lr

08040d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040d3a:	b480      	push	{r7}
 8040d3c:	b083      	sub	sp, #12
 8040d3e:	af00      	add	r7, sp, #0
 8040d40:	6078      	str	r0, [r7, #4]
 8040d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040d44:	683b      	ldr	r3, [r7, #0]
 8040d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8040d4c:	2300      	movs	r3, #0
}
 8040d4e:	4618      	mov	r0, r3
 8040d50:	370c      	adds	r7, #12
 8040d52:	46bd      	mov	sp, r7
 8040d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d58:	4770      	bx	lr

08040d5a <_isatty>:

int _isatty(int file)
{
 8040d5a:	b480      	push	{r7}
 8040d5c:	b083      	sub	sp, #12
 8040d5e:	af00      	add	r7, sp, #0
 8040d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040d62:	2301      	movs	r3, #1
}
 8040d64:	4618      	mov	r0, r3
 8040d66:	370c      	adds	r7, #12
 8040d68:	46bd      	mov	sp, r7
 8040d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d6e:	4770      	bx	lr

08040d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040d70:	b480      	push	{r7}
 8040d72:	b085      	sub	sp, #20
 8040d74:	af00      	add	r7, sp, #0
 8040d76:	60f8      	str	r0, [r7, #12]
 8040d78:	60b9      	str	r1, [r7, #8]
 8040d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040d7c:	2300      	movs	r3, #0
}
 8040d7e:	4618      	mov	r0, r3
 8040d80:	3714      	adds	r7, #20
 8040d82:	46bd      	mov	sp, r7
 8040d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d88:	4770      	bx	lr
	...

08040d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040d8c:	b580      	push	{r7, lr}
 8040d8e:	b086      	sub	sp, #24
 8040d90:	af00      	add	r7, sp, #0
 8040d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040d94:	4a14      	ldr	r2, [pc, #80]	; (8040de8 <_sbrk+0x5c>)
 8040d96:	4b15      	ldr	r3, [pc, #84]	; (8040dec <_sbrk+0x60>)
 8040d98:	1ad3      	subs	r3, r2, r3
 8040d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040d9c:	697b      	ldr	r3, [r7, #20]
 8040d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040da0:	4b13      	ldr	r3, [pc, #76]	; (8040df0 <_sbrk+0x64>)
 8040da2:	681b      	ldr	r3, [r3, #0]
 8040da4:	2b00      	cmp	r3, #0
 8040da6:	d102      	bne.n	8040dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040da8:	4b11      	ldr	r3, [pc, #68]	; (8040df0 <_sbrk+0x64>)
 8040daa:	4a12      	ldr	r2, [pc, #72]	; (8040df4 <_sbrk+0x68>)
 8040dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040dae:	4b10      	ldr	r3, [pc, #64]	; (8040df0 <_sbrk+0x64>)
 8040db0:	681a      	ldr	r2, [r3, #0]
 8040db2:	687b      	ldr	r3, [r7, #4]
 8040db4:	4413      	add	r3, r2
 8040db6:	693a      	ldr	r2, [r7, #16]
 8040db8:	429a      	cmp	r2, r3
 8040dba:	d207      	bcs.n	8040dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040dbc:	f005 fae4 	bl	8046388 <__errno>
 8040dc0:	4603      	mov	r3, r0
 8040dc2:	220c      	movs	r2, #12
 8040dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8040dca:	e009      	b.n	8040de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040dcc:	4b08      	ldr	r3, [pc, #32]	; (8040df0 <_sbrk+0x64>)
 8040dce:	681b      	ldr	r3, [r3, #0]
 8040dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040dd2:	4b07      	ldr	r3, [pc, #28]	; (8040df0 <_sbrk+0x64>)
 8040dd4:	681a      	ldr	r2, [r3, #0]
 8040dd6:	687b      	ldr	r3, [r7, #4]
 8040dd8:	4413      	add	r3, r2
 8040dda:	4a05      	ldr	r2, [pc, #20]	; (8040df0 <_sbrk+0x64>)
 8040ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040dde:	68fb      	ldr	r3, [r7, #12]
}
 8040de0:	4618      	mov	r0, r3
 8040de2:	3718      	adds	r7, #24
 8040de4:	46bd      	mov	sp, r7
 8040de6:	bd80      	pop	{r7, pc}
 8040de8:	20080000 	.word	0x20080000
 8040dec:	00002000 	.word	0x00002000
 8040df0:	20002180 	.word	0x20002180
 8040df4:	2001b568 	.word	0x2001b568

08040df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040df8:	b480      	push	{r7}
 8040dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040dfc:	4b06      	ldr	r3, [pc, #24]	; (8040e18 <SystemInit+0x20>)
 8040dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040e02:	4a05      	ldr	r2, [pc, #20]	; (8040e18 <SystemInit+0x20>)
 8040e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040e0c:	bf00      	nop
 8040e0e:	46bd      	mov	sp, r7
 8040e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e14:	4770      	bx	lr
 8040e16:	bf00      	nop
 8040e18:	e000ed00 	.word	0xe000ed00

08040e1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8040e1c:	b580      	push	{r7, lr}
 8040e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040e20:	4b14      	ldr	r3, [pc, #80]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e22:	4a15      	ldr	r2, [pc, #84]	; (8040e78 <MX_USART1_UART_Init+0x5c>)
 8040e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040e26:	4b13      	ldr	r3, [pc, #76]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040e2e:	4b11      	ldr	r3, [pc, #68]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e30:	2200      	movs	r2, #0
 8040e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040e34:	4b0f      	ldr	r3, [pc, #60]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e36:	2200      	movs	r2, #0
 8040e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040e3a:	4b0e      	ldr	r3, [pc, #56]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e3c:	2200      	movs	r2, #0
 8040e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040e40:	4b0c      	ldr	r3, [pc, #48]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e42:	220c      	movs	r2, #12
 8040e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040e46:	4b0b      	ldr	r3, [pc, #44]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e48:	2200      	movs	r2, #0
 8040e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040e4c:	4b09      	ldr	r3, [pc, #36]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e4e:	2200      	movs	r2, #0
 8040e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040e52:	4b08      	ldr	r3, [pc, #32]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e54:	2200      	movs	r2, #0
 8040e56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040e58:	4b06      	ldr	r3, [pc, #24]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e5a:	2200      	movs	r2, #0
 8040e5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040e5e:	4805      	ldr	r0, [pc, #20]	; (8040e74 <MX_USART1_UART_Init+0x58>)
 8040e60:	f002 fc26 	bl	80436b0 <HAL_UART_Init>
 8040e64:	4603      	mov	r3, r0
 8040e66:	2b00      	cmp	r3, #0
 8040e68:	d001      	beq.n	8040e6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8040e6a:	f7ff fe2d 	bl	8040ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040e6e:	bf00      	nop
 8040e70:	bd80      	pop	{r7, pc}
 8040e72:	bf00      	nop
 8040e74:	20002184 	.word	0x20002184
 8040e78:	40011000 	.word	0x40011000

08040e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8040e7c:	b580      	push	{r7, lr}
 8040e7e:	b0ae      	sub	sp, #184	; 0xb8
 8040e80:	af00      	add	r7, sp, #0
 8040e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040e88:	2200      	movs	r2, #0
 8040e8a:	601a      	str	r2, [r3, #0]
 8040e8c:	605a      	str	r2, [r3, #4]
 8040e8e:	609a      	str	r2, [r3, #8]
 8040e90:	60da      	str	r2, [r3, #12]
 8040e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040e94:	f107 0314 	add.w	r3, r7, #20
 8040e98:	2290      	movs	r2, #144	; 0x90
 8040e9a:	2100      	movs	r1, #0
 8040e9c:	4618      	mov	r0, r3
 8040e9e:	f005 f9cf 	bl	8046240 <memset>
  if(uartHandle->Instance==USART1)
 8040ea2:	687b      	ldr	r3, [r7, #4]
 8040ea4:	681b      	ldr	r3, [r3, #0]
 8040ea6:	4a54      	ldr	r2, [pc, #336]	; (8040ff8 <HAL_UART_MspInit+0x17c>)
 8040ea8:	4293      	cmp	r3, r2
 8040eaa:	f040 80a0 	bne.w	8040fee <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040eae:	2340      	movs	r3, #64	; 0x40
 8040eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8040eb2:	2301      	movs	r3, #1
 8040eb4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040eb6:	f107 0314 	add.w	r3, r7, #20
 8040eba:	4618      	mov	r0, r3
 8040ebc:	f001 fcf0 	bl	80428a0 <HAL_RCCEx_PeriphCLKConfig>
 8040ec0:	4603      	mov	r3, r0
 8040ec2:	2b00      	cmp	r3, #0
 8040ec4:	d001      	beq.n	8040eca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8040ec6:	f7ff fdff 	bl	8040ac8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040eca:	4b4c      	ldr	r3, [pc, #304]	; (8040ffc <HAL_UART_MspInit+0x180>)
 8040ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040ece:	4a4b      	ldr	r2, [pc, #300]	; (8040ffc <HAL_UART_MspInit+0x180>)
 8040ed0:	f043 0310 	orr.w	r3, r3, #16
 8040ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8040ed6:	4b49      	ldr	r3, [pc, #292]	; (8040ffc <HAL_UART_MspInit+0x180>)
 8040ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040eda:	f003 0310 	and.w	r3, r3, #16
 8040ede:	613b      	str	r3, [r7, #16]
 8040ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040ee2:	4b46      	ldr	r3, [pc, #280]	; (8040ffc <HAL_UART_MspInit+0x180>)
 8040ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ee6:	4a45      	ldr	r2, [pc, #276]	; (8040ffc <HAL_UART_MspInit+0x180>)
 8040ee8:	f043 0301 	orr.w	r3, r3, #1
 8040eec:	6313      	str	r3, [r2, #48]	; 0x30
 8040eee:	4b43      	ldr	r3, [pc, #268]	; (8040ffc <HAL_UART_MspInit+0x180>)
 8040ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ef2:	f003 0301 	and.w	r3, r3, #1
 8040ef6:	60fb      	str	r3, [r7, #12]
 8040ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8040efa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040f02:	2302      	movs	r3, #2
 8040f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040f08:	2300      	movs	r3, #0
 8040f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040f0e:	2303      	movs	r3, #3
 8040f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040f14:	2307      	movs	r3, #7
 8040f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040f1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040f1e:	4619      	mov	r1, r3
 8040f20:	4837      	ldr	r0, [pc, #220]	; (8041000 <HAL_UART_MspInit+0x184>)
 8040f22:	f000 fdb9 	bl	8041a98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8040f26:	4b37      	ldr	r3, [pc, #220]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f28:	4a37      	ldr	r2, [pc, #220]	; (8041008 <HAL_UART_MspInit+0x18c>)
 8040f2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8040f2c:	4b35      	ldr	r3, [pc, #212]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8040f32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8040f34:	4b33      	ldr	r3, [pc, #204]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f36:	2240      	movs	r2, #64	; 0x40
 8040f38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8040f3a:	4b32      	ldr	r3, [pc, #200]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f3c:	2200      	movs	r2, #0
 8040f3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8040f40:	4b30      	ldr	r3, [pc, #192]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8040f46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8040f48:	4b2e      	ldr	r3, [pc, #184]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f4a:	2200      	movs	r2, #0
 8040f4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8040f4e:	4b2d      	ldr	r3, [pc, #180]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f50:	2200      	movs	r2, #0
 8040f52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8040f54:	4b2b      	ldr	r3, [pc, #172]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f56:	2200      	movs	r2, #0
 8040f58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8040f5a:	4b2a      	ldr	r3, [pc, #168]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f5c:	2200      	movs	r2, #0
 8040f5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8040f60:	4b28      	ldr	r3, [pc, #160]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f62:	2200      	movs	r2, #0
 8040f64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8040f66:	4827      	ldr	r0, [pc, #156]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f68:	f000 f98c 	bl	8041284 <HAL_DMA_Init>
 8040f6c:	4603      	mov	r3, r0
 8040f6e:	2b00      	cmp	r3, #0
 8040f70:	d001      	beq.n	8040f76 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8040f72:	f7ff fda9 	bl	8040ac8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8040f76:	687b      	ldr	r3, [r7, #4]
 8040f78:	4a22      	ldr	r2, [pc, #136]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f7a:	671a      	str	r2, [r3, #112]	; 0x70
 8040f7c:	4a21      	ldr	r2, [pc, #132]	; (8041004 <HAL_UART_MspInit+0x188>)
 8040f7e:	687b      	ldr	r3, [r7, #4]
 8040f80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8040f82:	4b22      	ldr	r3, [pc, #136]	; (804100c <HAL_UART_MspInit+0x190>)
 8040f84:	4a22      	ldr	r2, [pc, #136]	; (8041010 <HAL_UART_MspInit+0x194>)
 8040f86:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8040f88:	4b20      	ldr	r3, [pc, #128]	; (804100c <HAL_UART_MspInit+0x190>)
 8040f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8040f8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8040f90:	4b1e      	ldr	r3, [pc, #120]	; (804100c <HAL_UART_MspInit+0x190>)
 8040f92:	2200      	movs	r2, #0
 8040f94:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8040f96:	4b1d      	ldr	r3, [pc, #116]	; (804100c <HAL_UART_MspInit+0x190>)
 8040f98:	2200      	movs	r2, #0
 8040f9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8040f9c:	4b1b      	ldr	r3, [pc, #108]	; (804100c <HAL_UART_MspInit+0x190>)
 8040f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8040fa2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8040fa4:	4b19      	ldr	r3, [pc, #100]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fa6:	2200      	movs	r2, #0
 8040fa8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8040faa:	4b18      	ldr	r3, [pc, #96]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fac:	2200      	movs	r2, #0
 8040fae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8040fb0:	4b16      	ldr	r3, [pc, #88]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fb2:	2200      	movs	r2, #0
 8040fb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8040fb6:	4b15      	ldr	r3, [pc, #84]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fb8:	2200      	movs	r2, #0
 8040fba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8040fbc:	4b13      	ldr	r3, [pc, #76]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fbe:	2200      	movs	r2, #0
 8040fc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8040fc2:	4812      	ldr	r0, [pc, #72]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fc4:	f000 f95e 	bl	8041284 <HAL_DMA_Init>
 8040fc8:	4603      	mov	r3, r0
 8040fca:	2b00      	cmp	r3, #0
 8040fcc:	d001      	beq.n	8040fd2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8040fce:	f7ff fd7b 	bl	8040ac8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8040fd2:	687b      	ldr	r3, [r7, #4]
 8040fd4:	4a0d      	ldr	r2, [pc, #52]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fd6:	675a      	str	r2, [r3, #116]	; 0x74
 8040fd8:	4a0c      	ldr	r2, [pc, #48]	; (804100c <HAL_UART_MspInit+0x190>)
 8040fda:	687b      	ldr	r3, [r7, #4]
 8040fdc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8040fde:	2200      	movs	r2, #0
 8040fe0:	2105      	movs	r1, #5
 8040fe2:	2025      	movs	r0, #37	; 0x25
 8040fe4:	f000 f924 	bl	8041230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8040fe8:	2025      	movs	r0, #37	; 0x25
 8040fea:	f000 f93d 	bl	8041268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    // hdma_usart1_tx.XferCpltCallback = usart_transfer_complete_callback;
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8040fee:	bf00      	nop
 8040ff0:	37b8      	adds	r7, #184	; 0xb8
 8040ff2:	46bd      	mov	sp, r7
 8040ff4:	bd80      	pop	{r7, pc}
 8040ff6:	bf00      	nop
 8040ff8:	40011000 	.word	0x40011000
 8040ffc:	40023800 	.word	0x40023800
 8041000:	40020000 	.word	0x40020000
 8041004:	2000220c 	.word	0x2000220c
 8041008:	400264b8 	.word	0x400264b8
 804100c:	2000226c 	.word	0x2000226c
 8041010:	40026440 	.word	0x40026440

08041014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8041014:	f8df d034 	ldr.w	sp, [pc, #52]	; 804104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041018:	480d      	ldr	r0, [pc, #52]	; (8041050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 804101a:	490e      	ldr	r1, [pc, #56]	; (8041054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 804101c:	4a0e      	ldr	r2, [pc, #56]	; (8041058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 804101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041020:	e002      	b.n	8041028 <LoopCopyDataInit>

08041022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041026:	3304      	adds	r3, #4

08041028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 804102c:	d3f9      	bcc.n	8041022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804102e:	4a0b      	ldr	r2, [pc, #44]	; (804105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041030:	4c0b      	ldr	r4, [pc, #44]	; (8041060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8041032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041034:	e001      	b.n	804103a <LoopFillZerobss>

08041036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041038:	3204      	adds	r2, #4

0804103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 804103c:	d3fb      	bcc.n	8041036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 804103e:	f7ff fedb 	bl	8040df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8041042:	f005 f9a7 	bl	8046394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8041046:	f7ff fc97 	bl	8040978 <main>
  bx  lr    
 804104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 804104c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8041050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8041054:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8041058:	08046910 	.word	0x08046910
  ldr r2, =_sbss
 804105c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8041060:	2001b568 	.word	0x2001b568

08041064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8041064:	e7fe      	b.n	8041064 <ADC_IRQHandler>

08041066 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8041066:	b580      	push	{r7, lr}
 8041068:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 804106a:	2003      	movs	r0, #3
 804106c:	f000 f8d5 	bl	804121a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8041070:	200f      	movs	r0, #15
 8041072:	f7ff fd81 	bl	8040b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8041076:	f7ff fd57 	bl	8040b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804107a:	2300      	movs	r3, #0
}
 804107c:	4618      	mov	r0, r3
 804107e:	bd80      	pop	{r7, pc}

08041080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041080:	b480      	push	{r7}
 8041082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8041084:	4b06      	ldr	r3, [pc, #24]	; (80410a0 <HAL_IncTick+0x20>)
 8041086:	781b      	ldrb	r3, [r3, #0]
 8041088:	461a      	mov	r2, r3
 804108a:	4b06      	ldr	r3, [pc, #24]	; (80410a4 <HAL_IncTick+0x24>)
 804108c:	681b      	ldr	r3, [r3, #0]
 804108e:	4413      	add	r3, r2
 8041090:	4a04      	ldr	r2, [pc, #16]	; (80410a4 <HAL_IncTick+0x24>)
 8041092:	6013      	str	r3, [r2, #0]
}
 8041094:	bf00      	nop
 8041096:	46bd      	mov	sp, r7
 8041098:	f85d 7b04 	ldr.w	r7, [sp], #4
 804109c:	4770      	bx	lr
 804109e:	bf00      	nop
 80410a0:	20000008 	.word	0x20000008
 80410a4:	200022cc 	.word	0x200022cc

080410a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80410a8:	b480      	push	{r7}
 80410aa:	af00      	add	r7, sp, #0
  return uwTick;
 80410ac:	4b03      	ldr	r3, [pc, #12]	; (80410bc <HAL_GetTick+0x14>)
 80410ae:	681b      	ldr	r3, [r3, #0]
}
 80410b0:	4618      	mov	r0, r3
 80410b2:	46bd      	mov	sp, r7
 80410b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410b8:	4770      	bx	lr
 80410ba:	bf00      	nop
 80410bc:	200022cc 	.word	0x200022cc

080410c0 <__NVIC_SetPriorityGrouping>:
{
 80410c0:	b480      	push	{r7}
 80410c2:	b085      	sub	sp, #20
 80410c4:	af00      	add	r7, sp, #0
 80410c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80410c8:	687b      	ldr	r3, [r7, #4]
 80410ca:	f003 0307 	and.w	r3, r3, #7
 80410ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80410d0:	4b0b      	ldr	r3, [pc, #44]	; (8041100 <__NVIC_SetPriorityGrouping+0x40>)
 80410d2:	68db      	ldr	r3, [r3, #12]
 80410d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80410d6:	68ba      	ldr	r2, [r7, #8]
 80410d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80410dc:	4013      	ands	r3, r2
 80410de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80410e0:	68fb      	ldr	r3, [r7, #12]
 80410e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80410e4:	68bb      	ldr	r3, [r7, #8]
 80410e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80410e8:	4b06      	ldr	r3, [pc, #24]	; (8041104 <__NVIC_SetPriorityGrouping+0x44>)
 80410ea:	4313      	orrs	r3, r2
 80410ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80410ee:	4a04      	ldr	r2, [pc, #16]	; (8041100 <__NVIC_SetPriorityGrouping+0x40>)
 80410f0:	68bb      	ldr	r3, [r7, #8]
 80410f2:	60d3      	str	r3, [r2, #12]
}
 80410f4:	bf00      	nop
 80410f6:	3714      	adds	r7, #20
 80410f8:	46bd      	mov	sp, r7
 80410fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410fe:	4770      	bx	lr
 8041100:	e000ed00 	.word	0xe000ed00
 8041104:	05fa0000 	.word	0x05fa0000

08041108 <__NVIC_GetPriorityGrouping>:
{
 8041108:	b480      	push	{r7}
 804110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804110c:	4b04      	ldr	r3, [pc, #16]	; (8041120 <__NVIC_GetPriorityGrouping+0x18>)
 804110e:	68db      	ldr	r3, [r3, #12]
 8041110:	0a1b      	lsrs	r3, r3, #8
 8041112:	f003 0307 	and.w	r3, r3, #7
}
 8041116:	4618      	mov	r0, r3
 8041118:	46bd      	mov	sp, r7
 804111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804111e:	4770      	bx	lr
 8041120:	e000ed00 	.word	0xe000ed00

08041124 <__NVIC_EnableIRQ>:
{
 8041124:	b480      	push	{r7}
 8041126:	b083      	sub	sp, #12
 8041128:	af00      	add	r7, sp, #0
 804112a:	4603      	mov	r3, r0
 804112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041132:	2b00      	cmp	r3, #0
 8041134:	db0b      	blt.n	804114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8041136:	79fb      	ldrb	r3, [r7, #7]
 8041138:	f003 021f 	and.w	r2, r3, #31
 804113c:	4907      	ldr	r1, [pc, #28]	; (804115c <__NVIC_EnableIRQ+0x38>)
 804113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041142:	095b      	lsrs	r3, r3, #5
 8041144:	2001      	movs	r0, #1
 8041146:	fa00 f202 	lsl.w	r2, r0, r2
 804114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 804114e:	bf00      	nop
 8041150:	370c      	adds	r7, #12
 8041152:	46bd      	mov	sp, r7
 8041154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041158:	4770      	bx	lr
 804115a:	bf00      	nop
 804115c:	e000e100 	.word	0xe000e100

08041160 <__NVIC_SetPriority>:
{
 8041160:	b480      	push	{r7}
 8041162:	b083      	sub	sp, #12
 8041164:	af00      	add	r7, sp, #0
 8041166:	4603      	mov	r3, r0
 8041168:	6039      	str	r1, [r7, #0]
 804116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041170:	2b00      	cmp	r3, #0
 8041172:	db0a      	blt.n	804118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041174:	683b      	ldr	r3, [r7, #0]
 8041176:	b2da      	uxtb	r2, r3
 8041178:	490c      	ldr	r1, [pc, #48]	; (80411ac <__NVIC_SetPriority+0x4c>)
 804117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804117e:	0112      	lsls	r2, r2, #4
 8041180:	b2d2      	uxtb	r2, r2
 8041182:	440b      	add	r3, r1
 8041184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8041188:	e00a      	b.n	80411a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804118a:	683b      	ldr	r3, [r7, #0]
 804118c:	b2da      	uxtb	r2, r3
 804118e:	4908      	ldr	r1, [pc, #32]	; (80411b0 <__NVIC_SetPriority+0x50>)
 8041190:	79fb      	ldrb	r3, [r7, #7]
 8041192:	f003 030f 	and.w	r3, r3, #15
 8041196:	3b04      	subs	r3, #4
 8041198:	0112      	lsls	r2, r2, #4
 804119a:	b2d2      	uxtb	r2, r2
 804119c:	440b      	add	r3, r1
 804119e:	761a      	strb	r2, [r3, #24]
}
 80411a0:	bf00      	nop
 80411a2:	370c      	adds	r7, #12
 80411a4:	46bd      	mov	sp, r7
 80411a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411aa:	4770      	bx	lr
 80411ac:	e000e100 	.word	0xe000e100
 80411b0:	e000ed00 	.word	0xe000ed00

080411b4 <NVIC_EncodePriority>:
{
 80411b4:	b480      	push	{r7}
 80411b6:	b089      	sub	sp, #36	; 0x24
 80411b8:	af00      	add	r7, sp, #0
 80411ba:	60f8      	str	r0, [r7, #12]
 80411bc:	60b9      	str	r1, [r7, #8]
 80411be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80411c0:	68fb      	ldr	r3, [r7, #12]
 80411c2:	f003 0307 	and.w	r3, r3, #7
 80411c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80411c8:	69fb      	ldr	r3, [r7, #28]
 80411ca:	f1c3 0307 	rsb	r3, r3, #7
 80411ce:	2b04      	cmp	r3, #4
 80411d0:	bf28      	it	cs
 80411d2:	2304      	movcs	r3, #4
 80411d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80411d6:	69fb      	ldr	r3, [r7, #28]
 80411d8:	3304      	adds	r3, #4
 80411da:	2b06      	cmp	r3, #6
 80411dc:	d902      	bls.n	80411e4 <NVIC_EncodePriority+0x30>
 80411de:	69fb      	ldr	r3, [r7, #28]
 80411e0:	3b03      	subs	r3, #3
 80411e2:	e000      	b.n	80411e6 <NVIC_EncodePriority+0x32>
 80411e4:	2300      	movs	r3, #0
 80411e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80411e8:	f04f 32ff 	mov.w	r2, #4294967295
 80411ec:	69bb      	ldr	r3, [r7, #24]
 80411ee:	fa02 f303 	lsl.w	r3, r2, r3
 80411f2:	43da      	mvns	r2, r3
 80411f4:	68bb      	ldr	r3, [r7, #8]
 80411f6:	401a      	ands	r2, r3
 80411f8:	697b      	ldr	r3, [r7, #20]
 80411fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80411fc:	f04f 31ff 	mov.w	r1, #4294967295
 8041200:	697b      	ldr	r3, [r7, #20]
 8041202:	fa01 f303 	lsl.w	r3, r1, r3
 8041206:	43d9      	mvns	r1, r3
 8041208:	687b      	ldr	r3, [r7, #4]
 804120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804120c:	4313      	orrs	r3, r2
}
 804120e:	4618      	mov	r0, r3
 8041210:	3724      	adds	r7, #36	; 0x24
 8041212:	46bd      	mov	sp, r7
 8041214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041218:	4770      	bx	lr

0804121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804121a:	b580      	push	{r7, lr}
 804121c:	b082      	sub	sp, #8
 804121e:	af00      	add	r7, sp, #0
 8041220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041222:	6878      	ldr	r0, [r7, #4]
 8041224:	f7ff ff4c 	bl	80410c0 <__NVIC_SetPriorityGrouping>
}
 8041228:	bf00      	nop
 804122a:	3708      	adds	r7, #8
 804122c:	46bd      	mov	sp, r7
 804122e:	bd80      	pop	{r7, pc}

08041230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8041230:	b580      	push	{r7, lr}
 8041232:	b086      	sub	sp, #24
 8041234:	af00      	add	r7, sp, #0
 8041236:	4603      	mov	r3, r0
 8041238:	60b9      	str	r1, [r7, #8]
 804123a:	607a      	str	r2, [r7, #4]
 804123c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 804123e:	2300      	movs	r3, #0
 8041240:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8041242:	f7ff ff61 	bl	8041108 <__NVIC_GetPriorityGrouping>
 8041246:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041248:	687a      	ldr	r2, [r7, #4]
 804124a:	68b9      	ldr	r1, [r7, #8]
 804124c:	6978      	ldr	r0, [r7, #20]
 804124e:	f7ff ffb1 	bl	80411b4 <NVIC_EncodePriority>
 8041252:	4602      	mov	r2, r0
 8041254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041258:	4611      	mov	r1, r2
 804125a:	4618      	mov	r0, r3
 804125c:	f7ff ff80 	bl	8041160 <__NVIC_SetPriority>
}
 8041260:	bf00      	nop
 8041262:	3718      	adds	r7, #24
 8041264:	46bd      	mov	sp, r7
 8041266:	bd80      	pop	{r7, pc}

08041268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041268:	b580      	push	{r7, lr}
 804126a:	b082      	sub	sp, #8
 804126c:	af00      	add	r7, sp, #0
 804126e:	4603      	mov	r3, r0
 8041270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041276:	4618      	mov	r0, r3
 8041278:	f7ff ff54 	bl	8041124 <__NVIC_EnableIRQ>
}
 804127c:	bf00      	nop
 804127e:	3708      	adds	r7, #8
 8041280:	46bd      	mov	sp, r7
 8041282:	bd80      	pop	{r7, pc}

08041284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8041284:	b580      	push	{r7, lr}
 8041286:	b086      	sub	sp, #24
 8041288:	af00      	add	r7, sp, #0
 804128a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 804128c:	2300      	movs	r3, #0
 804128e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8041290:	f7ff ff0a 	bl	80410a8 <HAL_GetTick>
 8041294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8041296:	687b      	ldr	r3, [r7, #4]
 8041298:	2b00      	cmp	r3, #0
 804129a:	d101      	bne.n	80412a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 804129c:	2301      	movs	r3, #1
 804129e:	e099      	b.n	80413d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	2202      	movs	r2, #2
 80412a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80412a8:	687b      	ldr	r3, [r7, #4]
 80412aa:	2200      	movs	r2, #0
 80412ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80412b0:	687b      	ldr	r3, [r7, #4]
 80412b2:	681b      	ldr	r3, [r3, #0]
 80412b4:	681a      	ldr	r2, [r3, #0]
 80412b6:	687b      	ldr	r3, [r7, #4]
 80412b8:	681b      	ldr	r3, [r3, #0]
 80412ba:	f022 0201 	bic.w	r2, r2, #1
 80412be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80412c0:	e00f      	b.n	80412e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80412c2:	f7ff fef1 	bl	80410a8 <HAL_GetTick>
 80412c6:	4602      	mov	r2, r0
 80412c8:	693b      	ldr	r3, [r7, #16]
 80412ca:	1ad3      	subs	r3, r2, r3
 80412cc:	2b05      	cmp	r3, #5
 80412ce:	d908      	bls.n	80412e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80412d0:	687b      	ldr	r3, [r7, #4]
 80412d2:	2220      	movs	r2, #32
 80412d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80412d6:	687b      	ldr	r3, [r7, #4]
 80412d8:	2203      	movs	r2, #3
 80412da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80412de:	2303      	movs	r3, #3
 80412e0:	e078      	b.n	80413d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80412e2:	687b      	ldr	r3, [r7, #4]
 80412e4:	681b      	ldr	r3, [r3, #0]
 80412e6:	681b      	ldr	r3, [r3, #0]
 80412e8:	f003 0301 	and.w	r3, r3, #1
 80412ec:	2b00      	cmp	r3, #0
 80412ee:	d1e8      	bne.n	80412c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80412f0:	687b      	ldr	r3, [r7, #4]
 80412f2:	681b      	ldr	r3, [r3, #0]
 80412f4:	681b      	ldr	r3, [r3, #0]
 80412f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80412f8:	697a      	ldr	r2, [r7, #20]
 80412fa:	4b38      	ldr	r3, [pc, #224]	; (80413dc <HAL_DMA_Init+0x158>)
 80412fc:	4013      	ands	r3, r2
 80412fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8041300:	687b      	ldr	r3, [r7, #4]
 8041302:	685a      	ldr	r2, [r3, #4]
 8041304:	687b      	ldr	r3, [r7, #4]
 8041306:	689b      	ldr	r3, [r3, #8]
 8041308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804130a:	687b      	ldr	r3, [r7, #4]
 804130c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804130e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041310:	687b      	ldr	r3, [r7, #4]
 8041312:	691b      	ldr	r3, [r3, #16]
 8041314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041316:	687b      	ldr	r3, [r7, #4]
 8041318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804131c:	687b      	ldr	r3, [r7, #4]
 804131e:	699b      	ldr	r3, [r3, #24]
 8041320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8041322:	687b      	ldr	r3, [r7, #4]
 8041324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8041328:	687b      	ldr	r3, [r7, #4]
 804132a:	6a1b      	ldr	r3, [r3, #32]
 804132c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804132e:	697a      	ldr	r2, [r7, #20]
 8041330:	4313      	orrs	r3, r2
 8041332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8041334:	687b      	ldr	r3, [r7, #4]
 8041336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041338:	2b04      	cmp	r3, #4
 804133a:	d107      	bne.n	804134c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 804133c:	687b      	ldr	r3, [r7, #4]
 804133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8041340:	687b      	ldr	r3, [r7, #4]
 8041342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041344:	4313      	orrs	r3, r2
 8041346:	697a      	ldr	r2, [r7, #20]
 8041348:	4313      	orrs	r3, r2
 804134a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 804134c:	687b      	ldr	r3, [r7, #4]
 804134e:	681b      	ldr	r3, [r3, #0]
 8041350:	697a      	ldr	r2, [r7, #20]
 8041352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8041354:	687b      	ldr	r3, [r7, #4]
 8041356:	681b      	ldr	r3, [r3, #0]
 8041358:	695b      	ldr	r3, [r3, #20]
 804135a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 804135c:	697b      	ldr	r3, [r7, #20]
 804135e:	f023 0307 	bic.w	r3, r3, #7
 8041362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8041364:	687b      	ldr	r3, [r7, #4]
 8041366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041368:	697a      	ldr	r2, [r7, #20]
 804136a:	4313      	orrs	r3, r2
 804136c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804136e:	687b      	ldr	r3, [r7, #4]
 8041370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041372:	2b04      	cmp	r3, #4
 8041374:	d117      	bne.n	80413a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8041376:	687b      	ldr	r3, [r7, #4]
 8041378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804137a:	697a      	ldr	r2, [r7, #20]
 804137c:	4313      	orrs	r3, r2
 804137e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8041380:	687b      	ldr	r3, [r7, #4]
 8041382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041384:	2b00      	cmp	r3, #0
 8041386:	d00e      	beq.n	80413a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8041388:	6878      	ldr	r0, [r7, #4]
 804138a:	f000 fb09 	bl	80419a0 <DMA_CheckFifoParam>
 804138e:	4603      	mov	r3, r0
 8041390:	2b00      	cmp	r3, #0
 8041392:	d008      	beq.n	80413a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8041394:	687b      	ldr	r3, [r7, #4]
 8041396:	2240      	movs	r2, #64	; 0x40
 8041398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804139a:	687b      	ldr	r3, [r7, #4]
 804139c:	2201      	movs	r2, #1
 804139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80413a2:	2301      	movs	r3, #1
 80413a4:	e016      	b.n	80413d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	681b      	ldr	r3, [r3, #0]
 80413aa:	697a      	ldr	r2, [r7, #20]
 80413ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80413ae:	6878      	ldr	r0, [r7, #4]
 80413b0:	f000 fac0 	bl	8041934 <DMA_CalcBaseAndBitshift>
 80413b4:	4603      	mov	r3, r0
 80413b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80413b8:	687b      	ldr	r3, [r7, #4]
 80413ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80413bc:	223f      	movs	r2, #63	; 0x3f
 80413be:	409a      	lsls	r2, r3
 80413c0:	68fb      	ldr	r3, [r7, #12]
 80413c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80413c4:	687b      	ldr	r3, [r7, #4]
 80413c6:	2200      	movs	r2, #0
 80413c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80413ca:	687b      	ldr	r3, [r7, #4]
 80413cc:	2201      	movs	r2, #1
 80413ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80413d2:	2300      	movs	r3, #0
}
 80413d4:	4618      	mov	r0, r3
 80413d6:	3718      	adds	r7, #24
 80413d8:	46bd      	mov	sp, r7
 80413da:	bd80      	pop	{r7, pc}
 80413dc:	e010803f 	.word	0xe010803f

080413e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80413e0:	b580      	push	{r7, lr}
 80413e2:	b086      	sub	sp, #24
 80413e4:	af00      	add	r7, sp, #0
 80413e6:	60f8      	str	r0, [r7, #12]
 80413e8:	60b9      	str	r1, [r7, #8]
 80413ea:	607a      	str	r2, [r7, #4]
 80413ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80413ee:	2300      	movs	r3, #0
 80413f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80413f2:	68fb      	ldr	r3, [r7, #12]
 80413f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80413f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80413f8:	68fb      	ldr	r3, [r7, #12]
 80413fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80413fe:	2b01      	cmp	r3, #1
 8041400:	d101      	bne.n	8041406 <HAL_DMA_Start_IT+0x26>
 8041402:	2302      	movs	r3, #2
 8041404:	e048      	b.n	8041498 <HAL_DMA_Start_IT+0xb8>
 8041406:	68fb      	ldr	r3, [r7, #12]
 8041408:	2201      	movs	r2, #1
 804140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 804140e:	68fb      	ldr	r3, [r7, #12]
 8041410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041414:	b2db      	uxtb	r3, r3
 8041416:	2b01      	cmp	r3, #1
 8041418:	d137      	bne.n	804148a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 804141a:	68fb      	ldr	r3, [r7, #12]
 804141c:	2202      	movs	r2, #2
 804141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041422:	68fb      	ldr	r3, [r7, #12]
 8041424:	2200      	movs	r2, #0
 8041426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8041428:	683b      	ldr	r3, [r7, #0]
 804142a:	687a      	ldr	r2, [r7, #4]
 804142c:	68b9      	ldr	r1, [r7, #8]
 804142e:	68f8      	ldr	r0, [r7, #12]
 8041430:	f000 fa52 	bl	80418d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041434:	68fb      	ldr	r3, [r7, #12]
 8041436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041438:	223f      	movs	r2, #63	; 0x3f
 804143a:	409a      	lsls	r2, r3
 804143c:	693b      	ldr	r3, [r7, #16]
 804143e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8041440:	68fb      	ldr	r3, [r7, #12]
 8041442:	681b      	ldr	r3, [r3, #0]
 8041444:	681a      	ldr	r2, [r3, #0]
 8041446:	68fb      	ldr	r3, [r7, #12]
 8041448:	681b      	ldr	r3, [r3, #0]
 804144a:	f042 0216 	orr.w	r2, r2, #22
 804144e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8041450:	68fb      	ldr	r3, [r7, #12]
 8041452:	681b      	ldr	r3, [r3, #0]
 8041454:	695a      	ldr	r2, [r3, #20]
 8041456:	68fb      	ldr	r3, [r7, #12]
 8041458:	681b      	ldr	r3, [r3, #0]
 804145a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804145e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8041460:	68fb      	ldr	r3, [r7, #12]
 8041462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041464:	2b00      	cmp	r3, #0
 8041466:	d007      	beq.n	8041478 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8041468:	68fb      	ldr	r3, [r7, #12]
 804146a:	681b      	ldr	r3, [r3, #0]
 804146c:	681a      	ldr	r2, [r3, #0]
 804146e:	68fb      	ldr	r3, [r7, #12]
 8041470:	681b      	ldr	r3, [r3, #0]
 8041472:	f042 0208 	orr.w	r2, r2, #8
 8041476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8041478:	68fb      	ldr	r3, [r7, #12]
 804147a:	681b      	ldr	r3, [r3, #0]
 804147c:	681a      	ldr	r2, [r3, #0]
 804147e:	68fb      	ldr	r3, [r7, #12]
 8041480:	681b      	ldr	r3, [r3, #0]
 8041482:	f042 0201 	orr.w	r2, r2, #1
 8041486:	601a      	str	r2, [r3, #0]
 8041488:	e005      	b.n	8041496 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 804148a:	68fb      	ldr	r3, [r7, #12]
 804148c:	2200      	movs	r2, #0
 804148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8041492:	2302      	movs	r3, #2
 8041494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8041496:	7dfb      	ldrb	r3, [r7, #23]
}
 8041498:	4618      	mov	r0, r3
 804149a:	3718      	adds	r7, #24
 804149c:	46bd      	mov	sp, r7
 804149e:	bd80      	pop	{r7, pc}

080414a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80414a0:	b580      	push	{r7, lr}
 80414a2:	b084      	sub	sp, #16
 80414a4:	af00      	add	r7, sp, #0
 80414a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80414a8:	687b      	ldr	r3, [r7, #4]
 80414aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80414ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80414ae:	f7ff fdfb 	bl	80410a8 <HAL_GetTick>
 80414b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80414b4:	687b      	ldr	r3, [r7, #4]
 80414b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80414ba:	b2db      	uxtb	r3, r3
 80414bc:	2b02      	cmp	r3, #2
 80414be:	d008      	beq.n	80414d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80414c0:	687b      	ldr	r3, [r7, #4]
 80414c2:	2280      	movs	r2, #128	; 0x80
 80414c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80414c6:	687b      	ldr	r3, [r7, #4]
 80414c8:	2200      	movs	r2, #0
 80414ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80414ce:	2301      	movs	r3, #1
 80414d0:	e052      	b.n	8041578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80414d2:	687b      	ldr	r3, [r7, #4]
 80414d4:	681b      	ldr	r3, [r3, #0]
 80414d6:	681a      	ldr	r2, [r3, #0]
 80414d8:	687b      	ldr	r3, [r7, #4]
 80414da:	681b      	ldr	r3, [r3, #0]
 80414dc:	f022 0216 	bic.w	r2, r2, #22
 80414e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80414e2:	687b      	ldr	r3, [r7, #4]
 80414e4:	681b      	ldr	r3, [r3, #0]
 80414e6:	695a      	ldr	r2, [r3, #20]
 80414e8:	687b      	ldr	r3, [r7, #4]
 80414ea:	681b      	ldr	r3, [r3, #0]
 80414ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80414f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80414f2:	687b      	ldr	r3, [r7, #4]
 80414f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80414f6:	2b00      	cmp	r3, #0
 80414f8:	d103      	bne.n	8041502 <HAL_DMA_Abort+0x62>
 80414fa:	687b      	ldr	r3, [r7, #4]
 80414fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80414fe:	2b00      	cmp	r3, #0
 8041500:	d007      	beq.n	8041512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041502:	687b      	ldr	r3, [r7, #4]
 8041504:	681b      	ldr	r3, [r3, #0]
 8041506:	681a      	ldr	r2, [r3, #0]
 8041508:	687b      	ldr	r3, [r7, #4]
 804150a:	681b      	ldr	r3, [r3, #0]
 804150c:	f022 0208 	bic.w	r2, r2, #8
 8041510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8041512:	687b      	ldr	r3, [r7, #4]
 8041514:	681b      	ldr	r3, [r3, #0]
 8041516:	681a      	ldr	r2, [r3, #0]
 8041518:	687b      	ldr	r3, [r7, #4]
 804151a:	681b      	ldr	r3, [r3, #0]
 804151c:	f022 0201 	bic.w	r2, r2, #1
 8041520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8041522:	e013      	b.n	804154c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8041524:	f7ff fdc0 	bl	80410a8 <HAL_GetTick>
 8041528:	4602      	mov	r2, r0
 804152a:	68bb      	ldr	r3, [r7, #8]
 804152c:	1ad3      	subs	r3, r2, r3
 804152e:	2b05      	cmp	r3, #5
 8041530:	d90c      	bls.n	804154c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8041532:	687b      	ldr	r3, [r7, #4]
 8041534:	2220      	movs	r2, #32
 8041536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041538:	687b      	ldr	r3, [r7, #4]
 804153a:	2203      	movs	r2, #3
 804153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8041540:	687b      	ldr	r3, [r7, #4]
 8041542:	2200      	movs	r2, #0
 8041544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8041548:	2303      	movs	r3, #3
 804154a:	e015      	b.n	8041578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804154c:	687b      	ldr	r3, [r7, #4]
 804154e:	681b      	ldr	r3, [r3, #0]
 8041550:	681b      	ldr	r3, [r3, #0]
 8041552:	f003 0301 	and.w	r3, r3, #1
 8041556:	2b00      	cmp	r3, #0
 8041558:	d1e4      	bne.n	8041524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 804155a:	687b      	ldr	r3, [r7, #4]
 804155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804155e:	223f      	movs	r2, #63	; 0x3f
 8041560:	409a      	lsls	r2, r3
 8041562:	68fb      	ldr	r3, [r7, #12]
 8041564:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8041566:	687b      	ldr	r3, [r7, #4]
 8041568:	2201      	movs	r2, #1
 804156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 804156e:	687b      	ldr	r3, [r7, #4]
 8041570:	2200      	movs	r2, #0
 8041572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8041576:	2300      	movs	r3, #0
}
 8041578:	4618      	mov	r0, r3
 804157a:	3710      	adds	r7, #16
 804157c:	46bd      	mov	sp, r7
 804157e:	bd80      	pop	{r7, pc}

08041580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8041580:	b480      	push	{r7}
 8041582:	b083      	sub	sp, #12
 8041584:	af00      	add	r7, sp, #0
 8041586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8041588:	687b      	ldr	r3, [r7, #4]
 804158a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 804158e:	b2db      	uxtb	r3, r3
 8041590:	2b02      	cmp	r3, #2
 8041592:	d004      	beq.n	804159e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041594:	687b      	ldr	r3, [r7, #4]
 8041596:	2280      	movs	r2, #128	; 0x80
 8041598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 804159a:	2301      	movs	r3, #1
 804159c:	e00c      	b.n	80415b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 804159e:	687b      	ldr	r3, [r7, #4]
 80415a0:	2205      	movs	r2, #5
 80415a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80415a6:	687b      	ldr	r3, [r7, #4]
 80415a8:	681b      	ldr	r3, [r3, #0]
 80415aa:	681a      	ldr	r2, [r3, #0]
 80415ac:	687b      	ldr	r3, [r7, #4]
 80415ae:	681b      	ldr	r3, [r3, #0]
 80415b0:	f022 0201 	bic.w	r2, r2, #1
 80415b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80415b6:	2300      	movs	r3, #0
}
 80415b8:	4618      	mov	r0, r3
 80415ba:	370c      	adds	r7, #12
 80415bc:	46bd      	mov	sp, r7
 80415be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415c2:	4770      	bx	lr

080415c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80415c4:	b580      	push	{r7, lr}
 80415c6:	b086      	sub	sp, #24
 80415c8:	af00      	add	r7, sp, #0
 80415ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80415cc:	2300      	movs	r3, #0
 80415ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80415d0:	4b8e      	ldr	r3, [pc, #568]	; (804180c <HAL_DMA_IRQHandler+0x248>)
 80415d2:	681b      	ldr	r3, [r3, #0]
 80415d4:	4a8e      	ldr	r2, [pc, #568]	; (8041810 <HAL_DMA_IRQHandler+0x24c>)
 80415d6:	fba2 2303 	umull	r2, r3, r2, r3
 80415da:	0a9b      	lsrs	r3, r3, #10
 80415dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80415de:	687b      	ldr	r3, [r7, #4]
 80415e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80415e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80415e4:	693b      	ldr	r3, [r7, #16]
 80415e6:	681b      	ldr	r3, [r3, #0]
 80415e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80415ea:	687b      	ldr	r3, [r7, #4]
 80415ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80415ee:	2208      	movs	r2, #8
 80415f0:	409a      	lsls	r2, r3
 80415f2:	68fb      	ldr	r3, [r7, #12]
 80415f4:	4013      	ands	r3, r2
 80415f6:	2b00      	cmp	r3, #0
 80415f8:	d01a      	beq.n	8041630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80415fa:	687b      	ldr	r3, [r7, #4]
 80415fc:	681b      	ldr	r3, [r3, #0]
 80415fe:	681b      	ldr	r3, [r3, #0]
 8041600:	f003 0304 	and.w	r3, r3, #4
 8041604:	2b00      	cmp	r3, #0
 8041606:	d013      	beq.n	8041630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8041608:	687b      	ldr	r3, [r7, #4]
 804160a:	681b      	ldr	r3, [r3, #0]
 804160c:	681a      	ldr	r2, [r3, #0]
 804160e:	687b      	ldr	r3, [r7, #4]
 8041610:	681b      	ldr	r3, [r3, #0]
 8041612:	f022 0204 	bic.w	r2, r2, #4
 8041616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8041618:	687b      	ldr	r3, [r7, #4]
 804161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804161c:	2208      	movs	r2, #8
 804161e:	409a      	lsls	r2, r3
 8041620:	693b      	ldr	r3, [r7, #16]
 8041622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8041624:	687b      	ldr	r3, [r7, #4]
 8041626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041628:	f043 0201 	orr.w	r2, r3, #1
 804162c:	687b      	ldr	r3, [r7, #4]
 804162e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8041630:	687b      	ldr	r3, [r7, #4]
 8041632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041634:	2201      	movs	r2, #1
 8041636:	409a      	lsls	r2, r3
 8041638:	68fb      	ldr	r3, [r7, #12]
 804163a:	4013      	ands	r3, r2
 804163c:	2b00      	cmp	r3, #0
 804163e:	d012      	beq.n	8041666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8041640:	687b      	ldr	r3, [r7, #4]
 8041642:	681b      	ldr	r3, [r3, #0]
 8041644:	695b      	ldr	r3, [r3, #20]
 8041646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804164a:	2b00      	cmp	r3, #0
 804164c:	d00b      	beq.n	8041666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 804164e:	687b      	ldr	r3, [r7, #4]
 8041650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041652:	2201      	movs	r2, #1
 8041654:	409a      	lsls	r2, r3
 8041656:	693b      	ldr	r3, [r7, #16]
 8041658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 804165a:	687b      	ldr	r3, [r7, #4]
 804165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804165e:	f043 0202 	orr.w	r2, r3, #2
 8041662:	687b      	ldr	r3, [r7, #4]
 8041664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8041666:	687b      	ldr	r3, [r7, #4]
 8041668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804166a:	2204      	movs	r2, #4
 804166c:	409a      	lsls	r2, r3
 804166e:	68fb      	ldr	r3, [r7, #12]
 8041670:	4013      	ands	r3, r2
 8041672:	2b00      	cmp	r3, #0
 8041674:	d012      	beq.n	804169c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8041676:	687b      	ldr	r3, [r7, #4]
 8041678:	681b      	ldr	r3, [r3, #0]
 804167a:	681b      	ldr	r3, [r3, #0]
 804167c:	f003 0302 	and.w	r3, r3, #2
 8041680:	2b00      	cmp	r3, #0
 8041682:	d00b      	beq.n	804169c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8041684:	687b      	ldr	r3, [r7, #4]
 8041686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041688:	2204      	movs	r2, #4
 804168a:	409a      	lsls	r2, r3
 804168c:	693b      	ldr	r3, [r7, #16]
 804168e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8041690:	687b      	ldr	r3, [r7, #4]
 8041692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041694:	f043 0204 	orr.w	r2, r3, #4
 8041698:	687b      	ldr	r3, [r7, #4]
 804169a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 804169c:	687b      	ldr	r3, [r7, #4]
 804169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80416a0:	2210      	movs	r2, #16
 80416a2:	409a      	lsls	r2, r3
 80416a4:	68fb      	ldr	r3, [r7, #12]
 80416a6:	4013      	ands	r3, r2
 80416a8:	2b00      	cmp	r3, #0
 80416aa:	d043      	beq.n	8041734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80416ac:	687b      	ldr	r3, [r7, #4]
 80416ae:	681b      	ldr	r3, [r3, #0]
 80416b0:	681b      	ldr	r3, [r3, #0]
 80416b2:	f003 0308 	and.w	r3, r3, #8
 80416b6:	2b00      	cmp	r3, #0
 80416b8:	d03c      	beq.n	8041734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80416ba:	687b      	ldr	r3, [r7, #4]
 80416bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80416be:	2210      	movs	r2, #16
 80416c0:	409a      	lsls	r2, r3
 80416c2:	693b      	ldr	r3, [r7, #16]
 80416c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80416c6:	687b      	ldr	r3, [r7, #4]
 80416c8:	681b      	ldr	r3, [r3, #0]
 80416ca:	681b      	ldr	r3, [r3, #0]
 80416cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80416d0:	2b00      	cmp	r3, #0
 80416d2:	d018      	beq.n	8041706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80416d4:	687b      	ldr	r3, [r7, #4]
 80416d6:	681b      	ldr	r3, [r3, #0]
 80416d8:	681b      	ldr	r3, [r3, #0]
 80416da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80416de:	2b00      	cmp	r3, #0
 80416e0:	d108      	bne.n	80416f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80416e2:	687b      	ldr	r3, [r7, #4]
 80416e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80416e6:	2b00      	cmp	r3, #0
 80416e8:	d024      	beq.n	8041734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80416ea:	687b      	ldr	r3, [r7, #4]
 80416ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80416ee:	6878      	ldr	r0, [r7, #4]
 80416f0:	4798      	blx	r3
 80416f2:	e01f      	b.n	8041734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80416f8:	2b00      	cmp	r3, #0
 80416fa:	d01b      	beq.n	8041734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80416fc:	687b      	ldr	r3, [r7, #4]
 80416fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041700:	6878      	ldr	r0, [r7, #4]
 8041702:	4798      	blx	r3
 8041704:	e016      	b.n	8041734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8041706:	687b      	ldr	r3, [r7, #4]
 8041708:	681b      	ldr	r3, [r3, #0]
 804170a:	681b      	ldr	r3, [r3, #0]
 804170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041710:	2b00      	cmp	r3, #0
 8041712:	d107      	bne.n	8041724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8041714:	687b      	ldr	r3, [r7, #4]
 8041716:	681b      	ldr	r3, [r3, #0]
 8041718:	681a      	ldr	r2, [r3, #0]
 804171a:	687b      	ldr	r3, [r7, #4]
 804171c:	681b      	ldr	r3, [r3, #0]
 804171e:	f022 0208 	bic.w	r2, r2, #8
 8041722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8041724:	687b      	ldr	r3, [r7, #4]
 8041726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041728:	2b00      	cmp	r3, #0
 804172a:	d003      	beq.n	8041734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 804172c:	687b      	ldr	r3, [r7, #4]
 804172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041730:	6878      	ldr	r0, [r7, #4]
 8041732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8041734:	687b      	ldr	r3, [r7, #4]
 8041736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041738:	2220      	movs	r2, #32
 804173a:	409a      	lsls	r2, r3
 804173c:	68fb      	ldr	r3, [r7, #12]
 804173e:	4013      	ands	r3, r2
 8041740:	2b00      	cmp	r3, #0
 8041742:	f000 808f 	beq.w	8041864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8041746:	687b      	ldr	r3, [r7, #4]
 8041748:	681b      	ldr	r3, [r3, #0]
 804174a:	681b      	ldr	r3, [r3, #0]
 804174c:	f003 0310 	and.w	r3, r3, #16
 8041750:	2b00      	cmp	r3, #0
 8041752:	f000 8087 	beq.w	8041864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8041756:	687b      	ldr	r3, [r7, #4]
 8041758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804175a:	2220      	movs	r2, #32
 804175c:	409a      	lsls	r2, r3
 804175e:	693b      	ldr	r3, [r7, #16]
 8041760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8041762:	687b      	ldr	r3, [r7, #4]
 8041764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041768:	b2db      	uxtb	r3, r3
 804176a:	2b05      	cmp	r3, #5
 804176c:	d136      	bne.n	80417dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 804176e:	687b      	ldr	r3, [r7, #4]
 8041770:	681b      	ldr	r3, [r3, #0]
 8041772:	681a      	ldr	r2, [r3, #0]
 8041774:	687b      	ldr	r3, [r7, #4]
 8041776:	681b      	ldr	r3, [r3, #0]
 8041778:	f022 0216 	bic.w	r2, r2, #22
 804177c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 804177e:	687b      	ldr	r3, [r7, #4]
 8041780:	681b      	ldr	r3, [r3, #0]
 8041782:	695a      	ldr	r2, [r3, #20]
 8041784:	687b      	ldr	r3, [r7, #4]
 8041786:	681b      	ldr	r3, [r3, #0]
 8041788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804178c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041792:	2b00      	cmp	r3, #0
 8041794:	d103      	bne.n	804179e <HAL_DMA_IRQHandler+0x1da>
 8041796:	687b      	ldr	r3, [r7, #4]
 8041798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804179a:	2b00      	cmp	r3, #0
 804179c:	d007      	beq.n	80417ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	681b      	ldr	r3, [r3, #0]
 80417a2:	681a      	ldr	r2, [r3, #0]
 80417a4:	687b      	ldr	r3, [r7, #4]
 80417a6:	681b      	ldr	r3, [r3, #0]
 80417a8:	f022 0208 	bic.w	r2, r2, #8
 80417ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80417ae:	687b      	ldr	r3, [r7, #4]
 80417b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80417b2:	223f      	movs	r2, #63	; 0x3f
 80417b4:	409a      	lsls	r2, r3
 80417b6:	693b      	ldr	r3, [r7, #16]
 80417b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80417ba:	687b      	ldr	r3, [r7, #4]
 80417bc:	2201      	movs	r2, #1
 80417be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80417c2:	687b      	ldr	r3, [r7, #4]
 80417c4:	2200      	movs	r2, #0
 80417c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80417ca:	687b      	ldr	r3, [r7, #4]
 80417cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80417ce:	2b00      	cmp	r3, #0
 80417d0:	d07e      	beq.n	80418d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80417d2:	687b      	ldr	r3, [r7, #4]
 80417d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80417d6:	6878      	ldr	r0, [r7, #4]
 80417d8:	4798      	blx	r3
        }
        return;
 80417da:	e079      	b.n	80418d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80417dc:	687b      	ldr	r3, [r7, #4]
 80417de:	681b      	ldr	r3, [r3, #0]
 80417e0:	681b      	ldr	r3, [r3, #0]
 80417e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80417e6:	2b00      	cmp	r3, #0
 80417e8:	d01d      	beq.n	8041826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80417ea:	687b      	ldr	r3, [r7, #4]
 80417ec:	681b      	ldr	r3, [r3, #0]
 80417ee:	681b      	ldr	r3, [r3, #0]
 80417f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80417f4:	2b00      	cmp	r3, #0
 80417f6:	d10d      	bne.n	8041814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80417f8:	687b      	ldr	r3, [r7, #4]
 80417fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80417fc:	2b00      	cmp	r3, #0
 80417fe:	d031      	beq.n	8041864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8041800:	687b      	ldr	r3, [r7, #4]
 8041802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041804:	6878      	ldr	r0, [r7, #4]
 8041806:	4798      	blx	r3
 8041808:	e02c      	b.n	8041864 <HAL_DMA_IRQHandler+0x2a0>
 804180a:	bf00      	nop
 804180c:	20000000 	.word	0x20000000
 8041810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8041814:	687b      	ldr	r3, [r7, #4]
 8041816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041818:	2b00      	cmp	r3, #0
 804181a:	d023      	beq.n	8041864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 804181c:	687b      	ldr	r3, [r7, #4]
 804181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041820:	6878      	ldr	r0, [r7, #4]
 8041822:	4798      	blx	r3
 8041824:	e01e      	b.n	8041864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8041826:	687b      	ldr	r3, [r7, #4]
 8041828:	681b      	ldr	r3, [r3, #0]
 804182a:	681b      	ldr	r3, [r3, #0]
 804182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041830:	2b00      	cmp	r3, #0
 8041832:	d10f      	bne.n	8041854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8041834:	687b      	ldr	r3, [r7, #4]
 8041836:	681b      	ldr	r3, [r3, #0]
 8041838:	681a      	ldr	r2, [r3, #0]
 804183a:	687b      	ldr	r3, [r7, #4]
 804183c:	681b      	ldr	r3, [r3, #0]
 804183e:	f022 0210 	bic.w	r2, r2, #16
 8041842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8041844:	687b      	ldr	r3, [r7, #4]
 8041846:	2201      	movs	r2, #1
 8041848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 804184c:	687b      	ldr	r3, [r7, #4]
 804184e:	2200      	movs	r2, #0
 8041850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8041854:	687b      	ldr	r3, [r7, #4]
 8041856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041858:	2b00      	cmp	r3, #0
 804185a:	d003      	beq.n	8041864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 804185c:	687b      	ldr	r3, [r7, #4]
 804185e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041860:	6878      	ldr	r0, [r7, #4]
 8041862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8041864:	687b      	ldr	r3, [r7, #4]
 8041866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041868:	2b00      	cmp	r3, #0
 804186a:	d032      	beq.n	80418d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 804186c:	687b      	ldr	r3, [r7, #4]
 804186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041870:	f003 0301 	and.w	r3, r3, #1
 8041874:	2b00      	cmp	r3, #0
 8041876:	d022      	beq.n	80418be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8041878:	687b      	ldr	r3, [r7, #4]
 804187a:	2205      	movs	r2, #5
 804187c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8041880:	687b      	ldr	r3, [r7, #4]
 8041882:	681b      	ldr	r3, [r3, #0]
 8041884:	681a      	ldr	r2, [r3, #0]
 8041886:	687b      	ldr	r3, [r7, #4]
 8041888:	681b      	ldr	r3, [r3, #0]
 804188a:	f022 0201 	bic.w	r2, r2, #1
 804188e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8041890:	68bb      	ldr	r3, [r7, #8]
 8041892:	3301      	adds	r3, #1
 8041894:	60bb      	str	r3, [r7, #8]
 8041896:	697a      	ldr	r2, [r7, #20]
 8041898:	429a      	cmp	r2, r3
 804189a:	d307      	bcc.n	80418ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 804189c:	687b      	ldr	r3, [r7, #4]
 804189e:	681b      	ldr	r3, [r3, #0]
 80418a0:	681b      	ldr	r3, [r3, #0]
 80418a2:	f003 0301 	and.w	r3, r3, #1
 80418a6:	2b00      	cmp	r3, #0
 80418a8:	d1f2      	bne.n	8041890 <HAL_DMA_IRQHandler+0x2cc>
 80418aa:	e000      	b.n	80418ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80418ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80418ae:	687b      	ldr	r3, [r7, #4]
 80418b0:	2201      	movs	r2, #1
 80418b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80418b6:	687b      	ldr	r3, [r7, #4]
 80418b8:	2200      	movs	r2, #0
 80418ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80418be:	687b      	ldr	r3, [r7, #4]
 80418c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80418c2:	2b00      	cmp	r3, #0
 80418c4:	d005      	beq.n	80418d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80418c6:	687b      	ldr	r3, [r7, #4]
 80418c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80418ca:	6878      	ldr	r0, [r7, #4]
 80418cc:	4798      	blx	r3
 80418ce:	e000      	b.n	80418d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80418d0:	bf00      	nop
    }
  }
}
 80418d2:	3718      	adds	r7, #24
 80418d4:	46bd      	mov	sp, r7
 80418d6:	bd80      	pop	{r7, pc}

080418d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80418d8:	b480      	push	{r7}
 80418da:	b085      	sub	sp, #20
 80418dc:	af00      	add	r7, sp, #0
 80418de:	60f8      	str	r0, [r7, #12]
 80418e0:	60b9      	str	r1, [r7, #8]
 80418e2:	607a      	str	r2, [r7, #4]
 80418e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80418e6:	68fb      	ldr	r3, [r7, #12]
 80418e8:	681b      	ldr	r3, [r3, #0]
 80418ea:	681a      	ldr	r2, [r3, #0]
 80418ec:	68fb      	ldr	r3, [r7, #12]
 80418ee:	681b      	ldr	r3, [r3, #0]
 80418f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80418f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80418f6:	68fb      	ldr	r3, [r7, #12]
 80418f8:	681b      	ldr	r3, [r3, #0]
 80418fa:	683a      	ldr	r2, [r7, #0]
 80418fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80418fe:	68fb      	ldr	r3, [r7, #12]
 8041900:	689b      	ldr	r3, [r3, #8]
 8041902:	2b40      	cmp	r3, #64	; 0x40
 8041904:	d108      	bne.n	8041918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8041906:	68fb      	ldr	r3, [r7, #12]
 8041908:	681b      	ldr	r3, [r3, #0]
 804190a:	687a      	ldr	r2, [r7, #4]
 804190c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 804190e:	68fb      	ldr	r3, [r7, #12]
 8041910:	681b      	ldr	r3, [r3, #0]
 8041912:	68ba      	ldr	r2, [r7, #8]
 8041914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8041916:	e007      	b.n	8041928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8041918:	68fb      	ldr	r3, [r7, #12]
 804191a:	681b      	ldr	r3, [r3, #0]
 804191c:	68ba      	ldr	r2, [r7, #8]
 804191e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8041920:	68fb      	ldr	r3, [r7, #12]
 8041922:	681b      	ldr	r3, [r3, #0]
 8041924:	687a      	ldr	r2, [r7, #4]
 8041926:	60da      	str	r2, [r3, #12]
}
 8041928:	bf00      	nop
 804192a:	3714      	adds	r7, #20
 804192c:	46bd      	mov	sp, r7
 804192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041932:	4770      	bx	lr

08041934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8041934:	b480      	push	{r7}
 8041936:	b085      	sub	sp, #20
 8041938:	af00      	add	r7, sp, #0
 804193a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 804193c:	687b      	ldr	r3, [r7, #4]
 804193e:	681b      	ldr	r3, [r3, #0]
 8041940:	b2db      	uxtb	r3, r3
 8041942:	3b10      	subs	r3, #16
 8041944:	4a13      	ldr	r2, [pc, #76]	; (8041994 <DMA_CalcBaseAndBitshift+0x60>)
 8041946:	fba2 2303 	umull	r2, r3, r2, r3
 804194a:	091b      	lsrs	r3, r3, #4
 804194c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 804194e:	4a12      	ldr	r2, [pc, #72]	; (8041998 <DMA_CalcBaseAndBitshift+0x64>)
 8041950:	68fb      	ldr	r3, [r7, #12]
 8041952:	4413      	add	r3, r2
 8041954:	781b      	ldrb	r3, [r3, #0]
 8041956:	461a      	mov	r2, r3
 8041958:	687b      	ldr	r3, [r7, #4]
 804195a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 804195c:	68fb      	ldr	r3, [r7, #12]
 804195e:	2b03      	cmp	r3, #3
 8041960:	d908      	bls.n	8041974 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	681b      	ldr	r3, [r3, #0]
 8041966:	461a      	mov	r2, r3
 8041968:	4b0c      	ldr	r3, [pc, #48]	; (804199c <DMA_CalcBaseAndBitshift+0x68>)
 804196a:	4013      	ands	r3, r2
 804196c:	1d1a      	adds	r2, r3, #4
 804196e:	687b      	ldr	r3, [r7, #4]
 8041970:	659a      	str	r2, [r3, #88]	; 0x58
 8041972:	e006      	b.n	8041982 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8041974:	687b      	ldr	r3, [r7, #4]
 8041976:	681b      	ldr	r3, [r3, #0]
 8041978:	461a      	mov	r2, r3
 804197a:	4b08      	ldr	r3, [pc, #32]	; (804199c <DMA_CalcBaseAndBitshift+0x68>)
 804197c:	4013      	ands	r3, r2
 804197e:	687a      	ldr	r2, [r7, #4]
 8041980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8041982:	687b      	ldr	r3, [r7, #4]
 8041984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8041986:	4618      	mov	r0, r3
 8041988:	3714      	adds	r7, #20
 804198a:	46bd      	mov	sp, r7
 804198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041990:	4770      	bx	lr
 8041992:	bf00      	nop
 8041994:	aaaaaaab 	.word	0xaaaaaaab
 8041998:	080468f8 	.word	0x080468f8
 804199c:	fffffc00 	.word	0xfffffc00

080419a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80419a0:	b480      	push	{r7}
 80419a2:	b085      	sub	sp, #20
 80419a4:	af00      	add	r7, sp, #0
 80419a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80419a8:	2300      	movs	r3, #0
 80419aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80419ac:	687b      	ldr	r3, [r7, #4]
 80419ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80419b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80419b2:	687b      	ldr	r3, [r7, #4]
 80419b4:	699b      	ldr	r3, [r3, #24]
 80419b6:	2b00      	cmp	r3, #0
 80419b8:	d11f      	bne.n	80419fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80419ba:	68bb      	ldr	r3, [r7, #8]
 80419bc:	2b03      	cmp	r3, #3
 80419be:	d856      	bhi.n	8041a6e <DMA_CheckFifoParam+0xce>
 80419c0:	a201      	add	r2, pc, #4	; (adr r2, 80419c8 <DMA_CheckFifoParam+0x28>)
 80419c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80419c6:	bf00      	nop
 80419c8:	080419d9 	.word	0x080419d9
 80419cc:	080419eb 	.word	0x080419eb
 80419d0:	080419d9 	.word	0x080419d9
 80419d4:	08041a6f 	.word	0x08041a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80419d8:	687b      	ldr	r3, [r7, #4]
 80419da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80419dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80419e0:	2b00      	cmp	r3, #0
 80419e2:	d046      	beq.n	8041a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80419e4:	2301      	movs	r3, #1
 80419e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80419e8:	e043      	b.n	8041a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80419ea:	687b      	ldr	r3, [r7, #4]
 80419ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80419ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80419f2:	d140      	bne.n	8041a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80419f4:	2301      	movs	r3, #1
 80419f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80419f8:	e03d      	b.n	8041a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80419fa:	687b      	ldr	r3, [r7, #4]
 80419fc:	699b      	ldr	r3, [r3, #24]
 80419fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8041a02:	d121      	bne.n	8041a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8041a04:	68bb      	ldr	r3, [r7, #8]
 8041a06:	2b03      	cmp	r3, #3
 8041a08:	d837      	bhi.n	8041a7a <DMA_CheckFifoParam+0xda>
 8041a0a:	a201      	add	r2, pc, #4	; (adr r2, 8041a10 <DMA_CheckFifoParam+0x70>)
 8041a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041a10:	08041a21 	.word	0x08041a21
 8041a14:	08041a27 	.word	0x08041a27
 8041a18:	08041a21 	.word	0x08041a21
 8041a1c:	08041a39 	.word	0x08041a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8041a20:	2301      	movs	r3, #1
 8041a22:	73fb      	strb	r3, [r7, #15]
      break;
 8041a24:	e030      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8041a26:	687b      	ldr	r3, [r7, #4]
 8041a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041a2e:	2b00      	cmp	r3, #0
 8041a30:	d025      	beq.n	8041a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8041a32:	2301      	movs	r3, #1
 8041a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041a36:	e022      	b.n	8041a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8041a38:	687b      	ldr	r3, [r7, #4]
 8041a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8041a40:	d11f      	bne.n	8041a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8041a42:	2301      	movs	r3, #1
 8041a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8041a46:	e01c      	b.n	8041a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8041a48:	68bb      	ldr	r3, [r7, #8]
 8041a4a:	2b02      	cmp	r3, #2
 8041a4c:	d903      	bls.n	8041a56 <DMA_CheckFifoParam+0xb6>
 8041a4e:	68bb      	ldr	r3, [r7, #8]
 8041a50:	2b03      	cmp	r3, #3
 8041a52:	d003      	beq.n	8041a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8041a54:	e018      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8041a56:	2301      	movs	r3, #1
 8041a58:	73fb      	strb	r3, [r7, #15]
      break;
 8041a5a:	e015      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8041a5c:	687b      	ldr	r3, [r7, #4]
 8041a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041a64:	2b00      	cmp	r3, #0
 8041a66:	d00e      	beq.n	8041a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8041a68:	2301      	movs	r3, #1
 8041a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8041a6c:	e00b      	b.n	8041a86 <DMA_CheckFifoParam+0xe6>
      break;
 8041a6e:	bf00      	nop
 8041a70:	e00a      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      break;
 8041a72:	bf00      	nop
 8041a74:	e008      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      break;
 8041a76:	bf00      	nop
 8041a78:	e006      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      break;
 8041a7a:	bf00      	nop
 8041a7c:	e004      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      break;
 8041a7e:	bf00      	nop
 8041a80:	e002      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8041a82:	bf00      	nop
 8041a84:	e000      	b.n	8041a88 <DMA_CheckFifoParam+0xe8>
      break;
 8041a86:	bf00      	nop
    }
  } 
  
  return status; 
 8041a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8041a8a:	4618      	mov	r0, r3
 8041a8c:	3714      	adds	r7, #20
 8041a8e:	46bd      	mov	sp, r7
 8041a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a94:	4770      	bx	lr
 8041a96:	bf00      	nop

08041a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041a98:	b480      	push	{r7}
 8041a9a:	b089      	sub	sp, #36	; 0x24
 8041a9c:	af00      	add	r7, sp, #0
 8041a9e:	6078      	str	r0, [r7, #4]
 8041aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8041aa2:	2300      	movs	r3, #0
 8041aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8041aa6:	2300      	movs	r3, #0
 8041aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8041aaa:	2300      	movs	r3, #0
 8041aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8041aae:	2300      	movs	r3, #0
 8041ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8041ab2:	2300      	movs	r3, #0
 8041ab4:	61fb      	str	r3, [r7, #28]
 8041ab6:	e175      	b.n	8041da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8041ab8:	2201      	movs	r2, #1
 8041aba:	69fb      	ldr	r3, [r7, #28]
 8041abc:	fa02 f303 	lsl.w	r3, r2, r3
 8041ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8041ac2:	683b      	ldr	r3, [r7, #0]
 8041ac4:	681b      	ldr	r3, [r3, #0]
 8041ac6:	697a      	ldr	r2, [r7, #20]
 8041ac8:	4013      	ands	r3, r2
 8041aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8041acc:	693a      	ldr	r2, [r7, #16]
 8041ace:	697b      	ldr	r3, [r7, #20]
 8041ad0:	429a      	cmp	r2, r3
 8041ad2:	f040 8164 	bne.w	8041d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041ad6:	683b      	ldr	r3, [r7, #0]
 8041ad8:	685b      	ldr	r3, [r3, #4]
 8041ada:	f003 0303 	and.w	r3, r3, #3
 8041ade:	2b01      	cmp	r3, #1
 8041ae0:	d005      	beq.n	8041aee <HAL_GPIO_Init+0x56>
 8041ae2:	683b      	ldr	r3, [r7, #0]
 8041ae4:	685b      	ldr	r3, [r3, #4]
 8041ae6:	f003 0303 	and.w	r3, r3, #3
 8041aea:	2b02      	cmp	r3, #2
 8041aec:	d130      	bne.n	8041b50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8041aee:	687b      	ldr	r3, [r7, #4]
 8041af0:	689b      	ldr	r3, [r3, #8]
 8041af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8041af4:	69fb      	ldr	r3, [r7, #28]
 8041af6:	005b      	lsls	r3, r3, #1
 8041af8:	2203      	movs	r2, #3
 8041afa:	fa02 f303 	lsl.w	r3, r2, r3
 8041afe:	43db      	mvns	r3, r3
 8041b00:	69ba      	ldr	r2, [r7, #24]
 8041b02:	4013      	ands	r3, r2
 8041b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8041b06:	683b      	ldr	r3, [r7, #0]
 8041b08:	68da      	ldr	r2, [r3, #12]
 8041b0a:	69fb      	ldr	r3, [r7, #28]
 8041b0c:	005b      	lsls	r3, r3, #1
 8041b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8041b12:	69ba      	ldr	r2, [r7, #24]
 8041b14:	4313      	orrs	r3, r2
 8041b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041b18:	687b      	ldr	r3, [r7, #4]
 8041b1a:	69ba      	ldr	r2, [r7, #24]
 8041b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041b1e:	687b      	ldr	r3, [r7, #4]
 8041b20:	685b      	ldr	r3, [r3, #4]
 8041b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041b24:	2201      	movs	r2, #1
 8041b26:	69fb      	ldr	r3, [r7, #28]
 8041b28:	fa02 f303 	lsl.w	r3, r2, r3
 8041b2c:	43db      	mvns	r3, r3
 8041b2e:	69ba      	ldr	r2, [r7, #24]
 8041b30:	4013      	ands	r3, r2
 8041b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8041b34:	683b      	ldr	r3, [r7, #0]
 8041b36:	685b      	ldr	r3, [r3, #4]
 8041b38:	091b      	lsrs	r3, r3, #4
 8041b3a:	f003 0201 	and.w	r2, r3, #1
 8041b3e:	69fb      	ldr	r3, [r7, #28]
 8041b40:	fa02 f303 	lsl.w	r3, r2, r3
 8041b44:	69ba      	ldr	r2, [r7, #24]
 8041b46:	4313      	orrs	r3, r2
 8041b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041b4a:	687b      	ldr	r3, [r7, #4]
 8041b4c:	69ba      	ldr	r2, [r7, #24]
 8041b4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8041b50:	683b      	ldr	r3, [r7, #0]
 8041b52:	685b      	ldr	r3, [r3, #4]
 8041b54:	f003 0303 	and.w	r3, r3, #3
 8041b58:	2b03      	cmp	r3, #3
 8041b5a:	d017      	beq.n	8041b8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8041b5c:	687b      	ldr	r3, [r7, #4]
 8041b5e:	68db      	ldr	r3, [r3, #12]
 8041b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8041b62:	69fb      	ldr	r3, [r7, #28]
 8041b64:	005b      	lsls	r3, r3, #1
 8041b66:	2203      	movs	r2, #3
 8041b68:	fa02 f303 	lsl.w	r3, r2, r3
 8041b6c:	43db      	mvns	r3, r3
 8041b6e:	69ba      	ldr	r2, [r7, #24]
 8041b70:	4013      	ands	r3, r2
 8041b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8041b74:	683b      	ldr	r3, [r7, #0]
 8041b76:	689a      	ldr	r2, [r3, #8]
 8041b78:	69fb      	ldr	r3, [r7, #28]
 8041b7a:	005b      	lsls	r3, r3, #1
 8041b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8041b80:	69ba      	ldr	r2, [r7, #24]
 8041b82:	4313      	orrs	r3, r2
 8041b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8041b86:	687b      	ldr	r3, [r7, #4]
 8041b88:	69ba      	ldr	r2, [r7, #24]
 8041b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041b8c:	683b      	ldr	r3, [r7, #0]
 8041b8e:	685b      	ldr	r3, [r3, #4]
 8041b90:	f003 0303 	and.w	r3, r3, #3
 8041b94:	2b02      	cmp	r3, #2
 8041b96:	d123      	bne.n	8041be0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8041b98:	69fb      	ldr	r3, [r7, #28]
 8041b9a:	08da      	lsrs	r2, r3, #3
 8041b9c:	687b      	ldr	r3, [r7, #4]
 8041b9e:	3208      	adds	r2, #8
 8041ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8041ba6:	69fb      	ldr	r3, [r7, #28]
 8041ba8:	f003 0307 	and.w	r3, r3, #7
 8041bac:	009b      	lsls	r3, r3, #2
 8041bae:	220f      	movs	r2, #15
 8041bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8041bb4:	43db      	mvns	r3, r3
 8041bb6:	69ba      	ldr	r2, [r7, #24]
 8041bb8:	4013      	ands	r3, r2
 8041bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8041bbc:	683b      	ldr	r3, [r7, #0]
 8041bbe:	691a      	ldr	r2, [r3, #16]
 8041bc0:	69fb      	ldr	r3, [r7, #28]
 8041bc2:	f003 0307 	and.w	r3, r3, #7
 8041bc6:	009b      	lsls	r3, r3, #2
 8041bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8041bcc:	69ba      	ldr	r2, [r7, #24]
 8041bce:	4313      	orrs	r3, r2
 8041bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8041bd2:	69fb      	ldr	r3, [r7, #28]
 8041bd4:	08da      	lsrs	r2, r3, #3
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	3208      	adds	r2, #8
 8041bda:	69b9      	ldr	r1, [r7, #24]
 8041bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041be0:	687b      	ldr	r3, [r7, #4]
 8041be2:	681b      	ldr	r3, [r3, #0]
 8041be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8041be6:	69fb      	ldr	r3, [r7, #28]
 8041be8:	005b      	lsls	r3, r3, #1
 8041bea:	2203      	movs	r2, #3
 8041bec:	fa02 f303 	lsl.w	r3, r2, r3
 8041bf0:	43db      	mvns	r3, r3
 8041bf2:	69ba      	ldr	r2, [r7, #24]
 8041bf4:	4013      	ands	r3, r2
 8041bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8041bf8:	683b      	ldr	r3, [r7, #0]
 8041bfa:	685b      	ldr	r3, [r3, #4]
 8041bfc:	f003 0203 	and.w	r2, r3, #3
 8041c00:	69fb      	ldr	r3, [r7, #28]
 8041c02:	005b      	lsls	r3, r3, #1
 8041c04:	fa02 f303 	lsl.w	r3, r2, r3
 8041c08:	69ba      	ldr	r2, [r7, #24]
 8041c0a:	4313      	orrs	r3, r2
 8041c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041c0e:	687b      	ldr	r3, [r7, #4]
 8041c10:	69ba      	ldr	r2, [r7, #24]
 8041c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8041c14:	683b      	ldr	r3, [r7, #0]
 8041c16:	685b      	ldr	r3, [r3, #4]
 8041c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8041c1c:	2b00      	cmp	r3, #0
 8041c1e:	f000 80be 	beq.w	8041d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041c22:	4b66      	ldr	r3, [pc, #408]	; (8041dbc <HAL_GPIO_Init+0x324>)
 8041c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041c26:	4a65      	ldr	r2, [pc, #404]	; (8041dbc <HAL_GPIO_Init+0x324>)
 8041c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8041c2e:	4b63      	ldr	r3, [pc, #396]	; (8041dbc <HAL_GPIO_Init+0x324>)
 8041c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041c36:	60fb      	str	r3, [r7, #12]
 8041c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8041c3a:	4a61      	ldr	r2, [pc, #388]	; (8041dc0 <HAL_GPIO_Init+0x328>)
 8041c3c:	69fb      	ldr	r3, [r7, #28]
 8041c3e:	089b      	lsrs	r3, r3, #2
 8041c40:	3302      	adds	r3, #2
 8041c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8041c48:	69fb      	ldr	r3, [r7, #28]
 8041c4a:	f003 0303 	and.w	r3, r3, #3
 8041c4e:	009b      	lsls	r3, r3, #2
 8041c50:	220f      	movs	r2, #15
 8041c52:	fa02 f303 	lsl.w	r3, r2, r3
 8041c56:	43db      	mvns	r3, r3
 8041c58:	69ba      	ldr	r2, [r7, #24]
 8041c5a:	4013      	ands	r3, r2
 8041c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8041c5e:	687b      	ldr	r3, [r7, #4]
 8041c60:	4a58      	ldr	r2, [pc, #352]	; (8041dc4 <HAL_GPIO_Init+0x32c>)
 8041c62:	4293      	cmp	r3, r2
 8041c64:	d037      	beq.n	8041cd6 <HAL_GPIO_Init+0x23e>
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	4a57      	ldr	r2, [pc, #348]	; (8041dc8 <HAL_GPIO_Init+0x330>)
 8041c6a:	4293      	cmp	r3, r2
 8041c6c:	d031      	beq.n	8041cd2 <HAL_GPIO_Init+0x23a>
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	4a56      	ldr	r2, [pc, #344]	; (8041dcc <HAL_GPIO_Init+0x334>)
 8041c72:	4293      	cmp	r3, r2
 8041c74:	d02b      	beq.n	8041cce <HAL_GPIO_Init+0x236>
 8041c76:	687b      	ldr	r3, [r7, #4]
 8041c78:	4a55      	ldr	r2, [pc, #340]	; (8041dd0 <HAL_GPIO_Init+0x338>)
 8041c7a:	4293      	cmp	r3, r2
 8041c7c:	d025      	beq.n	8041cca <HAL_GPIO_Init+0x232>
 8041c7e:	687b      	ldr	r3, [r7, #4]
 8041c80:	4a54      	ldr	r2, [pc, #336]	; (8041dd4 <HAL_GPIO_Init+0x33c>)
 8041c82:	4293      	cmp	r3, r2
 8041c84:	d01f      	beq.n	8041cc6 <HAL_GPIO_Init+0x22e>
 8041c86:	687b      	ldr	r3, [r7, #4]
 8041c88:	4a53      	ldr	r2, [pc, #332]	; (8041dd8 <HAL_GPIO_Init+0x340>)
 8041c8a:	4293      	cmp	r3, r2
 8041c8c:	d019      	beq.n	8041cc2 <HAL_GPIO_Init+0x22a>
 8041c8e:	687b      	ldr	r3, [r7, #4]
 8041c90:	4a52      	ldr	r2, [pc, #328]	; (8041ddc <HAL_GPIO_Init+0x344>)
 8041c92:	4293      	cmp	r3, r2
 8041c94:	d013      	beq.n	8041cbe <HAL_GPIO_Init+0x226>
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	4a51      	ldr	r2, [pc, #324]	; (8041de0 <HAL_GPIO_Init+0x348>)
 8041c9a:	4293      	cmp	r3, r2
 8041c9c:	d00d      	beq.n	8041cba <HAL_GPIO_Init+0x222>
 8041c9e:	687b      	ldr	r3, [r7, #4]
 8041ca0:	4a50      	ldr	r2, [pc, #320]	; (8041de4 <HAL_GPIO_Init+0x34c>)
 8041ca2:	4293      	cmp	r3, r2
 8041ca4:	d007      	beq.n	8041cb6 <HAL_GPIO_Init+0x21e>
 8041ca6:	687b      	ldr	r3, [r7, #4]
 8041ca8:	4a4f      	ldr	r2, [pc, #316]	; (8041de8 <HAL_GPIO_Init+0x350>)
 8041caa:	4293      	cmp	r3, r2
 8041cac:	d101      	bne.n	8041cb2 <HAL_GPIO_Init+0x21a>
 8041cae:	2309      	movs	r3, #9
 8041cb0:	e012      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cb2:	230a      	movs	r3, #10
 8041cb4:	e010      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cb6:	2308      	movs	r3, #8
 8041cb8:	e00e      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cba:	2307      	movs	r3, #7
 8041cbc:	e00c      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cbe:	2306      	movs	r3, #6
 8041cc0:	e00a      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cc2:	2305      	movs	r3, #5
 8041cc4:	e008      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cc6:	2304      	movs	r3, #4
 8041cc8:	e006      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cca:	2303      	movs	r3, #3
 8041ccc:	e004      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cce:	2302      	movs	r3, #2
 8041cd0:	e002      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cd2:	2301      	movs	r3, #1
 8041cd4:	e000      	b.n	8041cd8 <HAL_GPIO_Init+0x240>
 8041cd6:	2300      	movs	r3, #0
 8041cd8:	69fa      	ldr	r2, [r7, #28]
 8041cda:	f002 0203 	and.w	r2, r2, #3
 8041cde:	0092      	lsls	r2, r2, #2
 8041ce0:	4093      	lsls	r3, r2
 8041ce2:	69ba      	ldr	r2, [r7, #24]
 8041ce4:	4313      	orrs	r3, r2
 8041ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8041ce8:	4935      	ldr	r1, [pc, #212]	; (8041dc0 <HAL_GPIO_Init+0x328>)
 8041cea:	69fb      	ldr	r3, [r7, #28]
 8041cec:	089b      	lsrs	r3, r3, #2
 8041cee:	3302      	adds	r3, #2
 8041cf0:	69ba      	ldr	r2, [r7, #24]
 8041cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041cf6:	4b3d      	ldr	r3, [pc, #244]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041cf8:	689b      	ldr	r3, [r3, #8]
 8041cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041cfc:	693b      	ldr	r3, [r7, #16]
 8041cfe:	43db      	mvns	r3, r3
 8041d00:	69ba      	ldr	r2, [r7, #24]
 8041d02:	4013      	ands	r3, r2
 8041d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8041d06:	683b      	ldr	r3, [r7, #0]
 8041d08:	685b      	ldr	r3, [r3, #4]
 8041d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041d0e:	2b00      	cmp	r3, #0
 8041d10:	d003      	beq.n	8041d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8041d12:	69ba      	ldr	r2, [r7, #24]
 8041d14:	693b      	ldr	r3, [r7, #16]
 8041d16:	4313      	orrs	r3, r2
 8041d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041d1a:	4a34      	ldr	r2, [pc, #208]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d1c:	69bb      	ldr	r3, [r7, #24]
 8041d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041d20:	4b32      	ldr	r3, [pc, #200]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d22:	68db      	ldr	r3, [r3, #12]
 8041d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d26:	693b      	ldr	r3, [r7, #16]
 8041d28:	43db      	mvns	r3, r3
 8041d2a:	69ba      	ldr	r2, [r7, #24]
 8041d2c:	4013      	ands	r3, r2
 8041d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8041d30:	683b      	ldr	r3, [r7, #0]
 8041d32:	685b      	ldr	r3, [r3, #4]
 8041d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041d38:	2b00      	cmp	r3, #0
 8041d3a:	d003      	beq.n	8041d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041d3c:	69ba      	ldr	r2, [r7, #24]
 8041d3e:	693b      	ldr	r3, [r7, #16]
 8041d40:	4313      	orrs	r3, r2
 8041d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8041d44:	4a29      	ldr	r2, [pc, #164]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d46:	69bb      	ldr	r3, [r7, #24]
 8041d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8041d4a:	4b28      	ldr	r3, [pc, #160]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d4c:	685b      	ldr	r3, [r3, #4]
 8041d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d50:	693b      	ldr	r3, [r7, #16]
 8041d52:	43db      	mvns	r3, r3
 8041d54:	69ba      	ldr	r2, [r7, #24]
 8041d56:	4013      	ands	r3, r2
 8041d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8041d5a:	683b      	ldr	r3, [r7, #0]
 8041d5c:	685b      	ldr	r3, [r3, #4]
 8041d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d62:	2b00      	cmp	r3, #0
 8041d64:	d003      	beq.n	8041d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8041d66:	69ba      	ldr	r2, [r7, #24]
 8041d68:	693b      	ldr	r3, [r7, #16]
 8041d6a:	4313      	orrs	r3, r2
 8041d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041d6e:	4a1f      	ldr	r2, [pc, #124]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d70:	69bb      	ldr	r3, [r7, #24]
 8041d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8041d74:	4b1d      	ldr	r3, [pc, #116]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d76:	681b      	ldr	r3, [r3, #0]
 8041d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041d7a:	693b      	ldr	r3, [r7, #16]
 8041d7c:	43db      	mvns	r3, r3
 8041d7e:	69ba      	ldr	r2, [r7, #24]
 8041d80:	4013      	ands	r3, r2
 8041d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8041d84:	683b      	ldr	r3, [r7, #0]
 8041d86:	685b      	ldr	r3, [r3, #4]
 8041d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041d8c:	2b00      	cmp	r3, #0
 8041d8e:	d003      	beq.n	8041d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8041d90:	69ba      	ldr	r2, [r7, #24]
 8041d92:	693b      	ldr	r3, [r7, #16]
 8041d94:	4313      	orrs	r3, r2
 8041d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041d98:	4a14      	ldr	r2, [pc, #80]	; (8041dec <HAL_GPIO_Init+0x354>)
 8041d9a:	69bb      	ldr	r3, [r7, #24]
 8041d9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8041d9e:	69fb      	ldr	r3, [r7, #28]
 8041da0:	3301      	adds	r3, #1
 8041da2:	61fb      	str	r3, [r7, #28]
 8041da4:	69fb      	ldr	r3, [r7, #28]
 8041da6:	2b0f      	cmp	r3, #15
 8041da8:	f67f ae86 	bls.w	8041ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8041dac:	bf00      	nop
 8041dae:	bf00      	nop
 8041db0:	3724      	adds	r7, #36	; 0x24
 8041db2:	46bd      	mov	sp, r7
 8041db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041db8:	4770      	bx	lr
 8041dba:	bf00      	nop
 8041dbc:	40023800 	.word	0x40023800
 8041dc0:	40013800 	.word	0x40013800
 8041dc4:	40020000 	.word	0x40020000
 8041dc8:	40020400 	.word	0x40020400
 8041dcc:	40020800 	.word	0x40020800
 8041dd0:	40020c00 	.word	0x40020c00
 8041dd4:	40021000 	.word	0x40021000
 8041dd8:	40021400 	.word	0x40021400
 8041ddc:	40021800 	.word	0x40021800
 8041de0:	40021c00 	.word	0x40021c00
 8041de4:	40022000 	.word	0x40022000
 8041de8:	40022400 	.word	0x40022400
 8041dec:	40013c00 	.word	0x40013c00

08041df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041df0:	b480      	push	{r7}
 8041df2:	b083      	sub	sp, #12
 8041df4:	af00      	add	r7, sp, #0
 8041df6:	6078      	str	r0, [r7, #4]
 8041df8:	460b      	mov	r3, r1
 8041dfa:	807b      	strh	r3, [r7, #2]
 8041dfc:	4613      	mov	r3, r2
 8041dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041e00:	787b      	ldrb	r3, [r7, #1]
 8041e02:	2b00      	cmp	r3, #0
 8041e04:	d003      	beq.n	8041e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041e06:	887a      	ldrh	r2, [r7, #2]
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041e0c:	e003      	b.n	8041e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8041e0e:	887b      	ldrh	r3, [r7, #2]
 8041e10:	041a      	lsls	r2, r3, #16
 8041e12:	687b      	ldr	r3, [r7, #4]
 8041e14:	619a      	str	r2, [r3, #24]
}
 8041e16:	bf00      	nop
 8041e18:	370c      	adds	r7, #12
 8041e1a:	46bd      	mov	sp, r7
 8041e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e20:	4770      	bx	lr
	...

08041e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8041e24:	b580      	push	{r7, lr}
 8041e26:	b082      	sub	sp, #8
 8041e28:	af00      	add	r7, sp, #0
 8041e2a:	4603      	mov	r3, r0
 8041e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8041e2e:	4b08      	ldr	r3, [pc, #32]	; (8041e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8041e30:	695a      	ldr	r2, [r3, #20]
 8041e32:	88fb      	ldrh	r3, [r7, #6]
 8041e34:	4013      	ands	r3, r2
 8041e36:	2b00      	cmp	r3, #0
 8041e38:	d006      	beq.n	8041e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8041e3a:	4a05      	ldr	r2, [pc, #20]	; (8041e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8041e3c:	88fb      	ldrh	r3, [r7, #6]
 8041e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8041e40:	88fb      	ldrh	r3, [r7, #6]
 8041e42:	4618      	mov	r0, r3
 8041e44:	f7fe fd18 	bl	8040878 <HAL_GPIO_EXTI_Callback>
  }
}
 8041e48:	bf00      	nop
 8041e4a:	3708      	adds	r7, #8
 8041e4c:	46bd      	mov	sp, r7
 8041e4e:	bd80      	pop	{r7, pc}
 8041e50:	40013c00 	.word	0x40013c00

08041e54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8041e54:	b480      	push	{r7}
 8041e56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041e58:	4b05      	ldr	r3, [pc, #20]	; (8041e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8041e5a:	681b      	ldr	r3, [r3, #0]
 8041e5c:	4a04      	ldr	r2, [pc, #16]	; (8041e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8041e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041e62:	6013      	str	r3, [r2, #0]
}
 8041e64:	bf00      	nop
 8041e66:	46bd      	mov	sp, r7
 8041e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e6c:	4770      	bx	lr
 8041e6e:	bf00      	nop
 8041e70:	40007000 	.word	0x40007000

08041e74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8041e74:	b580      	push	{r7, lr}
 8041e76:	b082      	sub	sp, #8
 8041e78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8041e7a:	2300      	movs	r3, #0
 8041e7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8041e7e:	4b23      	ldr	r3, [pc, #140]	; (8041f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8041e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041e82:	4a22      	ldr	r2, [pc, #136]	; (8041f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8041e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041e88:	6413      	str	r3, [r2, #64]	; 0x40
 8041e8a:	4b20      	ldr	r3, [pc, #128]	; (8041f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8041e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041e92:	603b      	str	r3, [r7, #0]
 8041e94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8041e96:	4b1e      	ldr	r3, [pc, #120]	; (8041f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8041e98:	681b      	ldr	r3, [r3, #0]
 8041e9a:	4a1d      	ldr	r2, [pc, #116]	; (8041f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8041e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041ea0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8041ea2:	f7ff f901 	bl	80410a8 <HAL_GetTick>
 8041ea6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8041ea8:	e009      	b.n	8041ebe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8041eaa:	f7ff f8fd 	bl	80410a8 <HAL_GetTick>
 8041eae:	4602      	mov	r2, r0
 8041eb0:	687b      	ldr	r3, [r7, #4]
 8041eb2:	1ad3      	subs	r3, r2, r3
 8041eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041eb8:	d901      	bls.n	8041ebe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8041eba:	2303      	movs	r3, #3
 8041ebc:	e022      	b.n	8041f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8041ebe:	4b14      	ldr	r3, [pc, #80]	; (8041f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8041ec0:	685b      	ldr	r3, [r3, #4]
 8041ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041eca:	d1ee      	bne.n	8041eaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8041ecc:	4b10      	ldr	r3, [pc, #64]	; (8041f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8041ece:	681b      	ldr	r3, [r3, #0]
 8041ed0:	4a0f      	ldr	r2, [pc, #60]	; (8041f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8041ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041ed6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8041ed8:	f7ff f8e6 	bl	80410a8 <HAL_GetTick>
 8041edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8041ede:	e009      	b.n	8041ef4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8041ee0:	f7ff f8e2 	bl	80410a8 <HAL_GetTick>
 8041ee4:	4602      	mov	r2, r0
 8041ee6:	687b      	ldr	r3, [r7, #4]
 8041ee8:	1ad3      	subs	r3, r2, r3
 8041eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041eee:	d901      	bls.n	8041ef4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8041ef0:	2303      	movs	r3, #3
 8041ef2:	e007      	b.n	8041f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8041ef4:	4b06      	ldr	r3, [pc, #24]	; (8041f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8041ef6:	685b      	ldr	r3, [r3, #4]
 8041ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8041f00:	d1ee      	bne.n	8041ee0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8041f02:	2300      	movs	r3, #0
}
 8041f04:	4618      	mov	r0, r3
 8041f06:	3708      	adds	r7, #8
 8041f08:	46bd      	mov	sp, r7
 8041f0a:	bd80      	pop	{r7, pc}
 8041f0c:	40023800 	.word	0x40023800
 8041f10:	40007000 	.word	0x40007000

08041f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041f14:	b580      	push	{r7, lr}
 8041f16:	b086      	sub	sp, #24
 8041f18:	af00      	add	r7, sp, #0
 8041f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8041f1c:	2300      	movs	r3, #0
 8041f1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041f20:	687b      	ldr	r3, [r7, #4]
 8041f22:	2b00      	cmp	r3, #0
 8041f24:	d101      	bne.n	8041f2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8041f26:	2301      	movs	r3, #1
 8041f28:	e29b      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041f2a:	687b      	ldr	r3, [r7, #4]
 8041f2c:	681b      	ldr	r3, [r3, #0]
 8041f2e:	f003 0301 	and.w	r3, r3, #1
 8041f32:	2b00      	cmp	r3, #0
 8041f34:	f000 8087 	beq.w	8042046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041f38:	4b96      	ldr	r3, [pc, #600]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f3a:	689b      	ldr	r3, [r3, #8]
 8041f3c:	f003 030c 	and.w	r3, r3, #12
 8041f40:	2b04      	cmp	r3, #4
 8041f42:	d00c      	beq.n	8041f5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041f44:	4b93      	ldr	r3, [pc, #588]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f46:	689b      	ldr	r3, [r3, #8]
 8041f48:	f003 030c 	and.w	r3, r3, #12
 8041f4c:	2b08      	cmp	r3, #8
 8041f4e:	d112      	bne.n	8041f76 <HAL_RCC_OscConfig+0x62>
 8041f50:	4b90      	ldr	r3, [pc, #576]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f52:	685b      	ldr	r3, [r3, #4]
 8041f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041f5c:	d10b      	bne.n	8041f76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041f5e:	4b8d      	ldr	r3, [pc, #564]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f60:	681b      	ldr	r3, [r3, #0]
 8041f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041f66:	2b00      	cmp	r3, #0
 8041f68:	d06c      	beq.n	8042044 <HAL_RCC_OscConfig+0x130>
 8041f6a:	687b      	ldr	r3, [r7, #4]
 8041f6c:	685b      	ldr	r3, [r3, #4]
 8041f6e:	2b00      	cmp	r3, #0
 8041f70:	d168      	bne.n	8042044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8041f72:	2301      	movs	r3, #1
 8041f74:	e275      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041f76:	687b      	ldr	r3, [r7, #4]
 8041f78:	685b      	ldr	r3, [r3, #4]
 8041f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041f7e:	d106      	bne.n	8041f8e <HAL_RCC_OscConfig+0x7a>
 8041f80:	4b84      	ldr	r3, [pc, #528]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f82:	681b      	ldr	r3, [r3, #0]
 8041f84:	4a83      	ldr	r2, [pc, #524]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041f8a:	6013      	str	r3, [r2, #0]
 8041f8c:	e02e      	b.n	8041fec <HAL_RCC_OscConfig+0xd8>
 8041f8e:	687b      	ldr	r3, [r7, #4]
 8041f90:	685b      	ldr	r3, [r3, #4]
 8041f92:	2b00      	cmp	r3, #0
 8041f94:	d10c      	bne.n	8041fb0 <HAL_RCC_OscConfig+0x9c>
 8041f96:	4b7f      	ldr	r3, [pc, #508]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f98:	681b      	ldr	r3, [r3, #0]
 8041f9a:	4a7e      	ldr	r2, [pc, #504]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041fa0:	6013      	str	r3, [r2, #0]
 8041fa2:	4b7c      	ldr	r3, [pc, #496]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fa4:	681b      	ldr	r3, [r3, #0]
 8041fa6:	4a7b      	ldr	r2, [pc, #492]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041fac:	6013      	str	r3, [r2, #0]
 8041fae:	e01d      	b.n	8041fec <HAL_RCC_OscConfig+0xd8>
 8041fb0:	687b      	ldr	r3, [r7, #4]
 8041fb2:	685b      	ldr	r3, [r3, #4]
 8041fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041fb8:	d10c      	bne.n	8041fd4 <HAL_RCC_OscConfig+0xc0>
 8041fba:	4b76      	ldr	r3, [pc, #472]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fbc:	681b      	ldr	r3, [r3, #0]
 8041fbe:	4a75      	ldr	r2, [pc, #468]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041fc4:	6013      	str	r3, [r2, #0]
 8041fc6:	4b73      	ldr	r3, [pc, #460]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fc8:	681b      	ldr	r3, [r3, #0]
 8041fca:	4a72      	ldr	r2, [pc, #456]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041fd0:	6013      	str	r3, [r2, #0]
 8041fd2:	e00b      	b.n	8041fec <HAL_RCC_OscConfig+0xd8>
 8041fd4:	4b6f      	ldr	r3, [pc, #444]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fd6:	681b      	ldr	r3, [r3, #0]
 8041fd8:	4a6e      	ldr	r2, [pc, #440]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041fde:	6013      	str	r3, [r2, #0]
 8041fe0:	4b6c      	ldr	r3, [pc, #432]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fe2:	681b      	ldr	r3, [r3, #0]
 8041fe4:	4a6b      	ldr	r2, [pc, #428]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8041fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041fec:	687b      	ldr	r3, [r7, #4]
 8041fee:	685b      	ldr	r3, [r3, #4]
 8041ff0:	2b00      	cmp	r3, #0
 8041ff2:	d013      	beq.n	804201c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041ff4:	f7ff f858 	bl	80410a8 <HAL_GetTick>
 8041ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041ffa:	e008      	b.n	804200e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041ffc:	f7ff f854 	bl	80410a8 <HAL_GetTick>
 8042000:	4602      	mov	r2, r0
 8042002:	693b      	ldr	r3, [r7, #16]
 8042004:	1ad3      	subs	r3, r2, r3
 8042006:	2b64      	cmp	r3, #100	; 0x64
 8042008:	d901      	bls.n	804200e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804200a:	2303      	movs	r3, #3
 804200c:	e229      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804200e:	4b61      	ldr	r3, [pc, #388]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042010:	681b      	ldr	r3, [r3, #0]
 8042012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042016:	2b00      	cmp	r3, #0
 8042018:	d0f0      	beq.n	8041ffc <HAL_RCC_OscConfig+0xe8>
 804201a:	e014      	b.n	8042046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804201c:	f7ff f844 	bl	80410a8 <HAL_GetTick>
 8042020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8042022:	e008      	b.n	8042036 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8042024:	f7ff f840 	bl	80410a8 <HAL_GetTick>
 8042028:	4602      	mov	r2, r0
 804202a:	693b      	ldr	r3, [r7, #16]
 804202c:	1ad3      	subs	r3, r2, r3
 804202e:	2b64      	cmp	r3, #100	; 0x64
 8042030:	d901      	bls.n	8042036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8042032:	2303      	movs	r3, #3
 8042034:	e215      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8042036:	4b57      	ldr	r3, [pc, #348]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042038:	681b      	ldr	r3, [r3, #0]
 804203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804203e:	2b00      	cmp	r3, #0
 8042040:	d1f0      	bne.n	8042024 <HAL_RCC_OscConfig+0x110>
 8042042:	e000      	b.n	8042046 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8042046:	687b      	ldr	r3, [r7, #4]
 8042048:	681b      	ldr	r3, [r3, #0]
 804204a:	f003 0302 	and.w	r3, r3, #2
 804204e:	2b00      	cmp	r3, #0
 8042050:	d069      	beq.n	8042126 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8042052:	4b50      	ldr	r3, [pc, #320]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042054:	689b      	ldr	r3, [r3, #8]
 8042056:	f003 030c 	and.w	r3, r3, #12
 804205a:	2b00      	cmp	r3, #0
 804205c:	d00b      	beq.n	8042076 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804205e:	4b4d      	ldr	r3, [pc, #308]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042060:	689b      	ldr	r3, [r3, #8]
 8042062:	f003 030c 	and.w	r3, r3, #12
 8042066:	2b08      	cmp	r3, #8
 8042068:	d11c      	bne.n	80420a4 <HAL_RCC_OscConfig+0x190>
 804206a:	4b4a      	ldr	r3, [pc, #296]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 804206c:	685b      	ldr	r3, [r3, #4]
 804206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042072:	2b00      	cmp	r3, #0
 8042074:	d116      	bne.n	80420a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8042076:	4b47      	ldr	r3, [pc, #284]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042078:	681b      	ldr	r3, [r3, #0]
 804207a:	f003 0302 	and.w	r3, r3, #2
 804207e:	2b00      	cmp	r3, #0
 8042080:	d005      	beq.n	804208e <HAL_RCC_OscConfig+0x17a>
 8042082:	687b      	ldr	r3, [r7, #4]
 8042084:	68db      	ldr	r3, [r3, #12]
 8042086:	2b01      	cmp	r3, #1
 8042088:	d001      	beq.n	804208e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 804208a:	2301      	movs	r3, #1
 804208c:	e1e9      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804208e:	4b41      	ldr	r3, [pc, #260]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042090:	681b      	ldr	r3, [r3, #0]
 8042092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8042096:	687b      	ldr	r3, [r7, #4]
 8042098:	691b      	ldr	r3, [r3, #16]
 804209a:	00db      	lsls	r3, r3, #3
 804209c:	493d      	ldr	r1, [pc, #244]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 804209e:	4313      	orrs	r3, r2
 80420a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80420a2:	e040      	b.n	8042126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80420a4:	687b      	ldr	r3, [r7, #4]
 80420a6:	68db      	ldr	r3, [r3, #12]
 80420a8:	2b00      	cmp	r3, #0
 80420aa:	d023      	beq.n	80420f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80420ac:	4b39      	ldr	r3, [pc, #228]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420ae:	681b      	ldr	r3, [r3, #0]
 80420b0:	4a38      	ldr	r2, [pc, #224]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420b2:	f043 0301 	orr.w	r3, r3, #1
 80420b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80420b8:	f7fe fff6 	bl	80410a8 <HAL_GetTick>
 80420bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80420be:	e008      	b.n	80420d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80420c0:	f7fe fff2 	bl	80410a8 <HAL_GetTick>
 80420c4:	4602      	mov	r2, r0
 80420c6:	693b      	ldr	r3, [r7, #16]
 80420c8:	1ad3      	subs	r3, r2, r3
 80420ca:	2b02      	cmp	r3, #2
 80420cc:	d901      	bls.n	80420d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80420ce:	2303      	movs	r3, #3
 80420d0:	e1c7      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80420d2:	4b30      	ldr	r3, [pc, #192]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420d4:	681b      	ldr	r3, [r3, #0]
 80420d6:	f003 0302 	and.w	r3, r3, #2
 80420da:	2b00      	cmp	r3, #0
 80420dc:	d0f0      	beq.n	80420c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80420de:	4b2d      	ldr	r3, [pc, #180]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420e0:	681b      	ldr	r3, [r3, #0]
 80420e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80420e6:	687b      	ldr	r3, [r7, #4]
 80420e8:	691b      	ldr	r3, [r3, #16]
 80420ea:	00db      	lsls	r3, r3, #3
 80420ec:	4929      	ldr	r1, [pc, #164]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420ee:	4313      	orrs	r3, r2
 80420f0:	600b      	str	r3, [r1, #0]
 80420f2:	e018      	b.n	8042126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80420f4:	4b27      	ldr	r3, [pc, #156]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420f6:	681b      	ldr	r3, [r3, #0]
 80420f8:	4a26      	ldr	r2, [pc, #152]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 80420fa:	f023 0301 	bic.w	r3, r3, #1
 80420fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042100:	f7fe ffd2 	bl	80410a8 <HAL_GetTick>
 8042104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8042106:	e008      	b.n	804211a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8042108:	f7fe ffce 	bl	80410a8 <HAL_GetTick>
 804210c:	4602      	mov	r2, r0
 804210e:	693b      	ldr	r3, [r7, #16]
 8042110:	1ad3      	subs	r3, r2, r3
 8042112:	2b02      	cmp	r3, #2
 8042114:	d901      	bls.n	804211a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8042116:	2303      	movs	r3, #3
 8042118:	e1a3      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804211a:	4b1e      	ldr	r3, [pc, #120]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 804211c:	681b      	ldr	r3, [r3, #0]
 804211e:	f003 0302 	and.w	r3, r3, #2
 8042122:	2b00      	cmp	r3, #0
 8042124:	d1f0      	bne.n	8042108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8042126:	687b      	ldr	r3, [r7, #4]
 8042128:	681b      	ldr	r3, [r3, #0]
 804212a:	f003 0308 	and.w	r3, r3, #8
 804212e:	2b00      	cmp	r3, #0
 8042130:	d038      	beq.n	80421a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8042132:	687b      	ldr	r3, [r7, #4]
 8042134:	695b      	ldr	r3, [r3, #20]
 8042136:	2b00      	cmp	r3, #0
 8042138:	d019      	beq.n	804216e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804213a:	4b16      	ldr	r3, [pc, #88]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 804213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804213e:	4a15      	ldr	r2, [pc, #84]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042140:	f043 0301 	orr.w	r3, r3, #1
 8042144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042146:	f7fe ffaf 	bl	80410a8 <HAL_GetTick>
 804214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804214c:	e008      	b.n	8042160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804214e:	f7fe ffab 	bl	80410a8 <HAL_GetTick>
 8042152:	4602      	mov	r2, r0
 8042154:	693b      	ldr	r3, [r7, #16]
 8042156:	1ad3      	subs	r3, r2, r3
 8042158:	2b02      	cmp	r3, #2
 804215a:	d901      	bls.n	8042160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 804215c:	2303      	movs	r3, #3
 804215e:	e180      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8042160:	4b0c      	ldr	r3, [pc, #48]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042164:	f003 0302 	and.w	r3, r3, #2
 8042168:	2b00      	cmp	r3, #0
 804216a:	d0f0      	beq.n	804214e <HAL_RCC_OscConfig+0x23a>
 804216c:	e01a      	b.n	80421a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804216e:	4b09      	ldr	r3, [pc, #36]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042172:	4a08      	ldr	r2, [pc, #32]	; (8042194 <HAL_RCC_OscConfig+0x280>)
 8042174:	f023 0301 	bic.w	r3, r3, #1
 8042178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804217a:	f7fe ff95 	bl	80410a8 <HAL_GetTick>
 804217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8042180:	e00a      	b.n	8042198 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8042182:	f7fe ff91 	bl	80410a8 <HAL_GetTick>
 8042186:	4602      	mov	r2, r0
 8042188:	693b      	ldr	r3, [r7, #16]
 804218a:	1ad3      	subs	r3, r2, r3
 804218c:	2b02      	cmp	r3, #2
 804218e:	d903      	bls.n	8042198 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8042190:	2303      	movs	r3, #3
 8042192:	e166      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
 8042194:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8042198:	4b92      	ldr	r3, [pc, #584]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804219a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804219c:	f003 0302 	and.w	r3, r3, #2
 80421a0:	2b00      	cmp	r3, #0
 80421a2:	d1ee      	bne.n	8042182 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80421a4:	687b      	ldr	r3, [r7, #4]
 80421a6:	681b      	ldr	r3, [r3, #0]
 80421a8:	f003 0304 	and.w	r3, r3, #4
 80421ac:	2b00      	cmp	r3, #0
 80421ae:	f000 80a4 	beq.w	80422fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80421b2:	4b8c      	ldr	r3, [pc, #560]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80421b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80421b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80421ba:	2b00      	cmp	r3, #0
 80421bc:	d10d      	bne.n	80421da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80421be:	4b89      	ldr	r3, [pc, #548]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80421c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80421c2:	4a88      	ldr	r2, [pc, #544]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80421c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80421c8:	6413      	str	r3, [r2, #64]	; 0x40
 80421ca:	4b86      	ldr	r3, [pc, #536]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80421cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80421ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80421d2:	60bb      	str	r3, [r7, #8]
 80421d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80421d6:	2301      	movs	r3, #1
 80421d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80421da:	4b83      	ldr	r3, [pc, #524]	; (80423e8 <HAL_RCC_OscConfig+0x4d4>)
 80421dc:	681b      	ldr	r3, [r3, #0]
 80421de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80421e2:	2b00      	cmp	r3, #0
 80421e4:	d118      	bne.n	8042218 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80421e6:	4b80      	ldr	r3, [pc, #512]	; (80423e8 <HAL_RCC_OscConfig+0x4d4>)
 80421e8:	681b      	ldr	r3, [r3, #0]
 80421ea:	4a7f      	ldr	r2, [pc, #508]	; (80423e8 <HAL_RCC_OscConfig+0x4d4>)
 80421ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80421f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80421f2:	f7fe ff59 	bl	80410a8 <HAL_GetTick>
 80421f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80421f8:	e008      	b.n	804220c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80421fa:	f7fe ff55 	bl	80410a8 <HAL_GetTick>
 80421fe:	4602      	mov	r2, r0
 8042200:	693b      	ldr	r3, [r7, #16]
 8042202:	1ad3      	subs	r3, r2, r3
 8042204:	2b64      	cmp	r3, #100	; 0x64
 8042206:	d901      	bls.n	804220c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8042208:	2303      	movs	r3, #3
 804220a:	e12a      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804220c:	4b76      	ldr	r3, [pc, #472]	; (80423e8 <HAL_RCC_OscConfig+0x4d4>)
 804220e:	681b      	ldr	r3, [r3, #0]
 8042210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042214:	2b00      	cmp	r3, #0
 8042216:	d0f0      	beq.n	80421fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8042218:	687b      	ldr	r3, [r7, #4]
 804221a:	689b      	ldr	r3, [r3, #8]
 804221c:	2b01      	cmp	r3, #1
 804221e:	d106      	bne.n	804222e <HAL_RCC_OscConfig+0x31a>
 8042220:	4b70      	ldr	r3, [pc, #448]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042224:	4a6f      	ldr	r2, [pc, #444]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042226:	f043 0301 	orr.w	r3, r3, #1
 804222a:	6713      	str	r3, [r2, #112]	; 0x70
 804222c:	e02d      	b.n	804228a <HAL_RCC_OscConfig+0x376>
 804222e:	687b      	ldr	r3, [r7, #4]
 8042230:	689b      	ldr	r3, [r3, #8]
 8042232:	2b00      	cmp	r3, #0
 8042234:	d10c      	bne.n	8042250 <HAL_RCC_OscConfig+0x33c>
 8042236:	4b6b      	ldr	r3, [pc, #428]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804223a:	4a6a      	ldr	r2, [pc, #424]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804223c:	f023 0301 	bic.w	r3, r3, #1
 8042240:	6713      	str	r3, [r2, #112]	; 0x70
 8042242:	4b68      	ldr	r3, [pc, #416]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042246:	4a67      	ldr	r2, [pc, #412]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042248:	f023 0304 	bic.w	r3, r3, #4
 804224c:	6713      	str	r3, [r2, #112]	; 0x70
 804224e:	e01c      	b.n	804228a <HAL_RCC_OscConfig+0x376>
 8042250:	687b      	ldr	r3, [r7, #4]
 8042252:	689b      	ldr	r3, [r3, #8]
 8042254:	2b05      	cmp	r3, #5
 8042256:	d10c      	bne.n	8042272 <HAL_RCC_OscConfig+0x35e>
 8042258:	4b62      	ldr	r3, [pc, #392]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804225c:	4a61      	ldr	r2, [pc, #388]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804225e:	f043 0304 	orr.w	r3, r3, #4
 8042262:	6713      	str	r3, [r2, #112]	; 0x70
 8042264:	4b5f      	ldr	r3, [pc, #380]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042268:	4a5e      	ldr	r2, [pc, #376]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804226a:	f043 0301 	orr.w	r3, r3, #1
 804226e:	6713      	str	r3, [r2, #112]	; 0x70
 8042270:	e00b      	b.n	804228a <HAL_RCC_OscConfig+0x376>
 8042272:	4b5c      	ldr	r3, [pc, #368]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042276:	4a5b      	ldr	r2, [pc, #364]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042278:	f023 0301 	bic.w	r3, r3, #1
 804227c:	6713      	str	r3, [r2, #112]	; 0x70
 804227e:	4b59      	ldr	r3, [pc, #356]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042282:	4a58      	ldr	r2, [pc, #352]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042284:	f023 0304 	bic.w	r3, r3, #4
 8042288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804228a:	687b      	ldr	r3, [r7, #4]
 804228c:	689b      	ldr	r3, [r3, #8]
 804228e:	2b00      	cmp	r3, #0
 8042290:	d015      	beq.n	80422be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042292:	f7fe ff09 	bl	80410a8 <HAL_GetTick>
 8042296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042298:	e00a      	b.n	80422b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804229a:	f7fe ff05 	bl	80410a8 <HAL_GetTick>
 804229e:	4602      	mov	r2, r0
 80422a0:	693b      	ldr	r3, [r7, #16]
 80422a2:	1ad3      	subs	r3, r2, r3
 80422a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80422a8:	4293      	cmp	r3, r2
 80422aa:	d901      	bls.n	80422b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80422ac:	2303      	movs	r3, #3
 80422ae:	e0d8      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80422b0:	4b4c      	ldr	r3, [pc, #304]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80422b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80422b4:	f003 0302 	and.w	r3, r3, #2
 80422b8:	2b00      	cmp	r3, #0
 80422ba:	d0ee      	beq.n	804229a <HAL_RCC_OscConfig+0x386>
 80422bc:	e014      	b.n	80422e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80422be:	f7fe fef3 	bl	80410a8 <HAL_GetTick>
 80422c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80422c4:	e00a      	b.n	80422dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80422c6:	f7fe feef 	bl	80410a8 <HAL_GetTick>
 80422ca:	4602      	mov	r2, r0
 80422cc:	693b      	ldr	r3, [r7, #16]
 80422ce:	1ad3      	subs	r3, r2, r3
 80422d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80422d4:	4293      	cmp	r3, r2
 80422d6:	d901      	bls.n	80422dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80422d8:	2303      	movs	r3, #3
 80422da:	e0c2      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80422dc:	4b41      	ldr	r3, [pc, #260]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80422de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80422e0:	f003 0302 	and.w	r3, r3, #2
 80422e4:	2b00      	cmp	r3, #0
 80422e6:	d1ee      	bne.n	80422c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80422e8:	7dfb      	ldrb	r3, [r7, #23]
 80422ea:	2b01      	cmp	r3, #1
 80422ec:	d105      	bne.n	80422fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80422ee:	4b3d      	ldr	r3, [pc, #244]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80422f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80422f2:	4a3c      	ldr	r2, [pc, #240]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80422f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80422f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80422fa:	687b      	ldr	r3, [r7, #4]
 80422fc:	699b      	ldr	r3, [r3, #24]
 80422fe:	2b00      	cmp	r3, #0
 8042300:	f000 80ae 	beq.w	8042460 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8042304:	4b37      	ldr	r3, [pc, #220]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042306:	689b      	ldr	r3, [r3, #8]
 8042308:	f003 030c 	and.w	r3, r3, #12
 804230c:	2b08      	cmp	r3, #8
 804230e:	d06d      	beq.n	80423ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8042310:	687b      	ldr	r3, [r7, #4]
 8042312:	699b      	ldr	r3, [r3, #24]
 8042314:	2b02      	cmp	r3, #2
 8042316:	d14b      	bne.n	80423b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8042318:	4b32      	ldr	r3, [pc, #200]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804231a:	681b      	ldr	r3, [r3, #0]
 804231c:	4a31      	ldr	r2, [pc, #196]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804231e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8042322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042324:	f7fe fec0 	bl	80410a8 <HAL_GetTick>
 8042328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804232a:	e008      	b.n	804233e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804232c:	f7fe febc 	bl	80410a8 <HAL_GetTick>
 8042330:	4602      	mov	r2, r0
 8042332:	693b      	ldr	r3, [r7, #16]
 8042334:	1ad3      	subs	r3, r2, r3
 8042336:	2b02      	cmp	r3, #2
 8042338:	d901      	bls.n	804233e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 804233a:	2303      	movs	r3, #3
 804233c:	e091      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804233e:	4b29      	ldr	r3, [pc, #164]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042340:	681b      	ldr	r3, [r3, #0]
 8042342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042346:	2b00      	cmp	r3, #0
 8042348:	d1f0      	bne.n	804232c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	69da      	ldr	r2, [r3, #28]
 804234e:	687b      	ldr	r3, [r7, #4]
 8042350:	6a1b      	ldr	r3, [r3, #32]
 8042352:	431a      	orrs	r2, r3
 8042354:	687b      	ldr	r3, [r7, #4]
 8042356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042358:	019b      	lsls	r3, r3, #6
 804235a:	431a      	orrs	r2, r3
 804235c:	687b      	ldr	r3, [r7, #4]
 804235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042360:	085b      	lsrs	r3, r3, #1
 8042362:	3b01      	subs	r3, #1
 8042364:	041b      	lsls	r3, r3, #16
 8042366:	431a      	orrs	r2, r3
 8042368:	687b      	ldr	r3, [r7, #4]
 804236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804236c:	061b      	lsls	r3, r3, #24
 804236e:	431a      	orrs	r2, r3
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042374:	071b      	lsls	r3, r3, #28
 8042376:	491b      	ldr	r1, [pc, #108]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042378:	4313      	orrs	r3, r2
 804237a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804237c:	4b19      	ldr	r3, [pc, #100]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 804237e:	681b      	ldr	r3, [r3, #0]
 8042380:	4a18      	ldr	r2, [pc, #96]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 8042382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8042386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042388:	f7fe fe8e 	bl	80410a8 <HAL_GetTick>
 804238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804238e:	e008      	b.n	80423a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042390:	f7fe fe8a 	bl	80410a8 <HAL_GetTick>
 8042394:	4602      	mov	r2, r0
 8042396:	693b      	ldr	r3, [r7, #16]
 8042398:	1ad3      	subs	r3, r2, r3
 804239a:	2b02      	cmp	r3, #2
 804239c:	d901      	bls.n	80423a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 804239e:	2303      	movs	r3, #3
 80423a0:	e05f      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80423a2:	4b10      	ldr	r3, [pc, #64]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80423a4:	681b      	ldr	r3, [r3, #0]
 80423a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80423aa:	2b00      	cmp	r3, #0
 80423ac:	d0f0      	beq.n	8042390 <HAL_RCC_OscConfig+0x47c>
 80423ae:	e057      	b.n	8042460 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80423b0:	4b0c      	ldr	r3, [pc, #48]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80423b2:	681b      	ldr	r3, [r3, #0]
 80423b4:	4a0b      	ldr	r2, [pc, #44]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80423b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80423ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80423bc:	f7fe fe74 	bl	80410a8 <HAL_GetTick>
 80423c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80423c2:	e008      	b.n	80423d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80423c4:	f7fe fe70 	bl	80410a8 <HAL_GetTick>
 80423c8:	4602      	mov	r2, r0
 80423ca:	693b      	ldr	r3, [r7, #16]
 80423cc:	1ad3      	subs	r3, r2, r3
 80423ce:	2b02      	cmp	r3, #2
 80423d0:	d901      	bls.n	80423d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80423d2:	2303      	movs	r3, #3
 80423d4:	e045      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80423d6:	4b03      	ldr	r3, [pc, #12]	; (80423e4 <HAL_RCC_OscConfig+0x4d0>)
 80423d8:	681b      	ldr	r3, [r3, #0]
 80423da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80423de:	2b00      	cmp	r3, #0
 80423e0:	d1f0      	bne.n	80423c4 <HAL_RCC_OscConfig+0x4b0>
 80423e2:	e03d      	b.n	8042460 <HAL_RCC_OscConfig+0x54c>
 80423e4:	40023800 	.word	0x40023800
 80423e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80423ec:	4b1f      	ldr	r3, [pc, #124]	; (804246c <HAL_RCC_OscConfig+0x558>)
 80423ee:	685b      	ldr	r3, [r3, #4]
 80423f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80423f2:	687b      	ldr	r3, [r7, #4]
 80423f4:	699b      	ldr	r3, [r3, #24]
 80423f6:	2b01      	cmp	r3, #1
 80423f8:	d030      	beq.n	804245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80423fa:	68fb      	ldr	r3, [r7, #12]
 80423fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8042400:	687b      	ldr	r3, [r7, #4]
 8042402:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8042404:	429a      	cmp	r2, r3
 8042406:	d129      	bne.n	804245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8042408:	68fb      	ldr	r3, [r7, #12]
 804240a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804240e:	687b      	ldr	r3, [r7, #4]
 8042410:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8042412:	429a      	cmp	r2, r3
 8042414:	d122      	bne.n	804245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8042416:	68fa      	ldr	r2, [r7, #12]
 8042418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 804241c:	4013      	ands	r3, r2
 804241e:	687a      	ldr	r2, [r7, #4]
 8042420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8042422:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8042424:	4293      	cmp	r3, r2
 8042426:	d119      	bne.n	804245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8042428:	68fb      	ldr	r3, [r7, #12]
 804242a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804242e:	687b      	ldr	r3, [r7, #4]
 8042430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042432:	085b      	lsrs	r3, r3, #1
 8042434:	3b01      	subs	r3, #1
 8042436:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8042438:	429a      	cmp	r2, r3
 804243a:	d10f      	bne.n	804245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 804243c:	68fb      	ldr	r3, [r7, #12]
 804243e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8042442:	687b      	ldr	r3, [r7, #4]
 8042444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042446:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8042448:	429a      	cmp	r2, r3
 804244a:	d107      	bne.n	804245c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 804244c:	68fb      	ldr	r3, [r7, #12]
 804244e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8042452:	687b      	ldr	r3, [r7, #4]
 8042454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042456:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8042458:	429a      	cmp	r2, r3
 804245a:	d001      	beq.n	8042460 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 804245c:	2301      	movs	r3, #1
 804245e:	e000      	b.n	8042462 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8042460:	2300      	movs	r3, #0
}
 8042462:	4618      	mov	r0, r3
 8042464:	3718      	adds	r7, #24
 8042466:	46bd      	mov	sp, r7
 8042468:	bd80      	pop	{r7, pc}
 804246a:	bf00      	nop
 804246c:	40023800 	.word	0x40023800

08042470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042470:	b580      	push	{r7, lr}
 8042472:	b084      	sub	sp, #16
 8042474:	af00      	add	r7, sp, #0
 8042476:	6078      	str	r0, [r7, #4]
 8042478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 804247a:	2300      	movs	r3, #0
 804247c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804247e:	687b      	ldr	r3, [r7, #4]
 8042480:	2b00      	cmp	r3, #0
 8042482:	d101      	bne.n	8042488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8042484:	2301      	movs	r3, #1
 8042486:	e0d0      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8042488:	4b6a      	ldr	r3, [pc, #424]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 804248a:	681b      	ldr	r3, [r3, #0]
 804248c:	f003 030f 	and.w	r3, r3, #15
 8042490:	683a      	ldr	r2, [r7, #0]
 8042492:	429a      	cmp	r2, r3
 8042494:	d910      	bls.n	80424b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042496:	4b67      	ldr	r3, [pc, #412]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 8042498:	681b      	ldr	r3, [r3, #0]
 804249a:	f023 020f 	bic.w	r2, r3, #15
 804249e:	4965      	ldr	r1, [pc, #404]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 80424a0:	683b      	ldr	r3, [r7, #0]
 80424a2:	4313      	orrs	r3, r2
 80424a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80424a6:	4b63      	ldr	r3, [pc, #396]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 80424a8:	681b      	ldr	r3, [r3, #0]
 80424aa:	f003 030f 	and.w	r3, r3, #15
 80424ae:	683a      	ldr	r2, [r7, #0]
 80424b0:	429a      	cmp	r2, r3
 80424b2:	d001      	beq.n	80424b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80424b4:	2301      	movs	r3, #1
 80424b6:	e0b8      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80424b8:	687b      	ldr	r3, [r7, #4]
 80424ba:	681b      	ldr	r3, [r3, #0]
 80424bc:	f003 0302 	and.w	r3, r3, #2
 80424c0:	2b00      	cmp	r3, #0
 80424c2:	d020      	beq.n	8042506 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80424c4:	687b      	ldr	r3, [r7, #4]
 80424c6:	681b      	ldr	r3, [r3, #0]
 80424c8:	f003 0304 	and.w	r3, r3, #4
 80424cc:	2b00      	cmp	r3, #0
 80424ce:	d005      	beq.n	80424dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80424d0:	4b59      	ldr	r3, [pc, #356]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80424d2:	689b      	ldr	r3, [r3, #8]
 80424d4:	4a58      	ldr	r2, [pc, #352]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80424d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80424da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80424dc:	687b      	ldr	r3, [r7, #4]
 80424de:	681b      	ldr	r3, [r3, #0]
 80424e0:	f003 0308 	and.w	r3, r3, #8
 80424e4:	2b00      	cmp	r3, #0
 80424e6:	d005      	beq.n	80424f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80424e8:	4b53      	ldr	r3, [pc, #332]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80424ea:	689b      	ldr	r3, [r3, #8]
 80424ec:	4a52      	ldr	r2, [pc, #328]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80424ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80424f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80424f4:	4b50      	ldr	r3, [pc, #320]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80424f6:	689b      	ldr	r3, [r3, #8]
 80424f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80424fc:	687b      	ldr	r3, [r7, #4]
 80424fe:	689b      	ldr	r3, [r3, #8]
 8042500:	494d      	ldr	r1, [pc, #308]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 8042502:	4313      	orrs	r3, r2
 8042504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042506:	687b      	ldr	r3, [r7, #4]
 8042508:	681b      	ldr	r3, [r3, #0]
 804250a:	f003 0301 	and.w	r3, r3, #1
 804250e:	2b00      	cmp	r3, #0
 8042510:	d040      	beq.n	8042594 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8042512:	687b      	ldr	r3, [r7, #4]
 8042514:	685b      	ldr	r3, [r3, #4]
 8042516:	2b01      	cmp	r3, #1
 8042518:	d107      	bne.n	804252a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804251a:	4b47      	ldr	r3, [pc, #284]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 804251c:	681b      	ldr	r3, [r3, #0]
 804251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042522:	2b00      	cmp	r3, #0
 8042524:	d115      	bne.n	8042552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8042526:	2301      	movs	r3, #1
 8042528:	e07f      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804252a:	687b      	ldr	r3, [r7, #4]
 804252c:	685b      	ldr	r3, [r3, #4]
 804252e:	2b02      	cmp	r3, #2
 8042530:	d107      	bne.n	8042542 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8042532:	4b41      	ldr	r3, [pc, #260]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 8042534:	681b      	ldr	r3, [r3, #0]
 8042536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804253a:	2b00      	cmp	r3, #0
 804253c:	d109      	bne.n	8042552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804253e:	2301      	movs	r3, #1
 8042540:	e073      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8042542:	4b3d      	ldr	r3, [pc, #244]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 8042544:	681b      	ldr	r3, [r3, #0]
 8042546:	f003 0302 	and.w	r3, r3, #2
 804254a:	2b00      	cmp	r3, #0
 804254c:	d101      	bne.n	8042552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804254e:	2301      	movs	r3, #1
 8042550:	e06b      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8042552:	4b39      	ldr	r3, [pc, #228]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 8042554:	689b      	ldr	r3, [r3, #8]
 8042556:	f023 0203 	bic.w	r2, r3, #3
 804255a:	687b      	ldr	r3, [r7, #4]
 804255c:	685b      	ldr	r3, [r3, #4]
 804255e:	4936      	ldr	r1, [pc, #216]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 8042560:	4313      	orrs	r3, r2
 8042562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042564:	f7fe fda0 	bl	80410a8 <HAL_GetTick>
 8042568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804256a:	e00a      	b.n	8042582 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804256c:	f7fe fd9c 	bl	80410a8 <HAL_GetTick>
 8042570:	4602      	mov	r2, r0
 8042572:	68fb      	ldr	r3, [r7, #12]
 8042574:	1ad3      	subs	r3, r2, r3
 8042576:	f241 3288 	movw	r2, #5000	; 0x1388
 804257a:	4293      	cmp	r3, r2
 804257c:	d901      	bls.n	8042582 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 804257e:	2303      	movs	r3, #3
 8042580:	e053      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042582:	4b2d      	ldr	r3, [pc, #180]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 8042584:	689b      	ldr	r3, [r3, #8]
 8042586:	f003 020c 	and.w	r2, r3, #12
 804258a:	687b      	ldr	r3, [r7, #4]
 804258c:	685b      	ldr	r3, [r3, #4]
 804258e:	009b      	lsls	r3, r3, #2
 8042590:	429a      	cmp	r2, r3
 8042592:	d1eb      	bne.n	804256c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042594:	4b27      	ldr	r3, [pc, #156]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 8042596:	681b      	ldr	r3, [r3, #0]
 8042598:	f003 030f 	and.w	r3, r3, #15
 804259c:	683a      	ldr	r2, [r7, #0]
 804259e:	429a      	cmp	r2, r3
 80425a0:	d210      	bcs.n	80425c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80425a2:	4b24      	ldr	r3, [pc, #144]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 80425a4:	681b      	ldr	r3, [r3, #0]
 80425a6:	f023 020f 	bic.w	r2, r3, #15
 80425aa:	4922      	ldr	r1, [pc, #136]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 80425ac:	683b      	ldr	r3, [r7, #0]
 80425ae:	4313      	orrs	r3, r2
 80425b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80425b2:	4b20      	ldr	r3, [pc, #128]	; (8042634 <HAL_RCC_ClockConfig+0x1c4>)
 80425b4:	681b      	ldr	r3, [r3, #0]
 80425b6:	f003 030f 	and.w	r3, r3, #15
 80425ba:	683a      	ldr	r2, [r7, #0]
 80425bc:	429a      	cmp	r2, r3
 80425be:	d001      	beq.n	80425c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80425c0:	2301      	movs	r3, #1
 80425c2:	e032      	b.n	804262a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80425c4:	687b      	ldr	r3, [r7, #4]
 80425c6:	681b      	ldr	r3, [r3, #0]
 80425c8:	f003 0304 	and.w	r3, r3, #4
 80425cc:	2b00      	cmp	r3, #0
 80425ce:	d008      	beq.n	80425e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80425d0:	4b19      	ldr	r3, [pc, #100]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80425d2:	689b      	ldr	r3, [r3, #8]
 80425d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80425d8:	687b      	ldr	r3, [r7, #4]
 80425da:	68db      	ldr	r3, [r3, #12]
 80425dc:	4916      	ldr	r1, [pc, #88]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80425de:	4313      	orrs	r3, r2
 80425e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80425e2:	687b      	ldr	r3, [r7, #4]
 80425e4:	681b      	ldr	r3, [r3, #0]
 80425e6:	f003 0308 	and.w	r3, r3, #8
 80425ea:	2b00      	cmp	r3, #0
 80425ec:	d009      	beq.n	8042602 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80425ee:	4b12      	ldr	r3, [pc, #72]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80425f0:	689b      	ldr	r3, [r3, #8]
 80425f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80425f6:	687b      	ldr	r3, [r7, #4]
 80425f8:	691b      	ldr	r3, [r3, #16]
 80425fa:	00db      	lsls	r3, r3, #3
 80425fc:	490e      	ldr	r1, [pc, #56]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 80425fe:	4313      	orrs	r3, r2
 8042600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8042602:	f000 f821 	bl	8042648 <HAL_RCC_GetSysClockFreq>
 8042606:	4602      	mov	r2, r0
 8042608:	4b0b      	ldr	r3, [pc, #44]	; (8042638 <HAL_RCC_ClockConfig+0x1c8>)
 804260a:	689b      	ldr	r3, [r3, #8]
 804260c:	091b      	lsrs	r3, r3, #4
 804260e:	f003 030f 	and.w	r3, r3, #15
 8042612:	490a      	ldr	r1, [pc, #40]	; (804263c <HAL_RCC_ClockConfig+0x1cc>)
 8042614:	5ccb      	ldrb	r3, [r1, r3]
 8042616:	fa22 f303 	lsr.w	r3, r2, r3
 804261a:	4a09      	ldr	r2, [pc, #36]	; (8042640 <HAL_RCC_ClockConfig+0x1d0>)
 804261c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 804261e:	4b09      	ldr	r3, [pc, #36]	; (8042644 <HAL_RCC_ClockConfig+0x1d4>)
 8042620:	681b      	ldr	r3, [r3, #0]
 8042622:	4618      	mov	r0, r3
 8042624:	f7fe faa8 	bl	8040b78 <HAL_InitTick>

  return HAL_OK;
 8042628:	2300      	movs	r3, #0
}
 804262a:	4618      	mov	r0, r3
 804262c:	3710      	adds	r7, #16
 804262e:	46bd      	mov	sp, r7
 8042630:	bd80      	pop	{r7, pc}
 8042632:	bf00      	nop
 8042634:	40023c00 	.word	0x40023c00
 8042638:	40023800 	.word	0x40023800
 804263c:	080468e0 	.word	0x080468e0
 8042640:	20000000 	.word	0x20000000
 8042644:	20000004 	.word	0x20000004

08042648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804264c:	b090      	sub	sp, #64	; 0x40
 804264e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8042650:	2300      	movs	r3, #0
 8042652:	637b      	str	r3, [r7, #52]	; 0x34
 8042654:	2300      	movs	r3, #0
 8042656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042658:	2300      	movs	r3, #0
 804265a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 804265c:	2300      	movs	r3, #0
 804265e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8042660:	4b59      	ldr	r3, [pc, #356]	; (80427c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8042662:	689b      	ldr	r3, [r3, #8]
 8042664:	f003 030c 	and.w	r3, r3, #12
 8042668:	2b08      	cmp	r3, #8
 804266a:	d00d      	beq.n	8042688 <HAL_RCC_GetSysClockFreq+0x40>
 804266c:	2b08      	cmp	r3, #8
 804266e:	f200 80a1 	bhi.w	80427b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8042672:	2b00      	cmp	r3, #0
 8042674:	d002      	beq.n	804267c <HAL_RCC_GetSysClockFreq+0x34>
 8042676:	2b04      	cmp	r3, #4
 8042678:	d003      	beq.n	8042682 <HAL_RCC_GetSysClockFreq+0x3a>
 804267a:	e09b      	b.n	80427b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804267c:	4b53      	ldr	r3, [pc, #332]	; (80427cc <HAL_RCC_GetSysClockFreq+0x184>)
 804267e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042680:	e09b      	b.n	80427ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8042682:	4b53      	ldr	r3, [pc, #332]	; (80427d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8042684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8042686:	e098      	b.n	80427ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8042688:	4b4f      	ldr	r3, [pc, #316]	; (80427c8 <HAL_RCC_GetSysClockFreq+0x180>)
 804268a:	685b      	ldr	r3, [r3, #4]
 804268c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8042690:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8042692:	4b4d      	ldr	r3, [pc, #308]	; (80427c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8042694:	685b      	ldr	r3, [r3, #4]
 8042696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804269a:	2b00      	cmp	r3, #0
 804269c:	d028      	beq.n	80426f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804269e:	4b4a      	ldr	r3, [pc, #296]	; (80427c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80426a0:	685b      	ldr	r3, [r3, #4]
 80426a2:	099b      	lsrs	r3, r3, #6
 80426a4:	2200      	movs	r2, #0
 80426a6:	623b      	str	r3, [r7, #32]
 80426a8:	627a      	str	r2, [r7, #36]	; 0x24
 80426aa:	6a3b      	ldr	r3, [r7, #32]
 80426ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80426b0:	2100      	movs	r1, #0
 80426b2:	4b47      	ldr	r3, [pc, #284]	; (80427d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80426b4:	fb03 f201 	mul.w	r2, r3, r1
 80426b8:	2300      	movs	r3, #0
 80426ba:	fb00 f303 	mul.w	r3, r0, r3
 80426be:	4413      	add	r3, r2
 80426c0:	4a43      	ldr	r2, [pc, #268]	; (80427d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80426c2:	fba0 1202 	umull	r1, r2, r0, r2
 80426c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80426c8:	460a      	mov	r2, r1
 80426ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80426cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80426ce:	4413      	add	r3, r2
 80426d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80426d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80426d4:	2200      	movs	r2, #0
 80426d6:	61bb      	str	r3, [r7, #24]
 80426d8:	61fa      	str	r2, [r7, #28]
 80426da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80426de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80426e2:	f7fd fdad 	bl	8040240 <__aeabi_uldivmod>
 80426e6:	4602      	mov	r2, r0
 80426e8:	460b      	mov	r3, r1
 80426ea:	4613      	mov	r3, r2
 80426ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80426ee:	e053      	b.n	8042798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80426f0:	4b35      	ldr	r3, [pc, #212]	; (80427c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80426f2:	685b      	ldr	r3, [r3, #4]
 80426f4:	099b      	lsrs	r3, r3, #6
 80426f6:	2200      	movs	r2, #0
 80426f8:	613b      	str	r3, [r7, #16]
 80426fa:	617a      	str	r2, [r7, #20]
 80426fc:	693b      	ldr	r3, [r7, #16]
 80426fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8042702:	f04f 0b00 	mov.w	fp, #0
 8042706:	4652      	mov	r2, sl
 8042708:	465b      	mov	r3, fp
 804270a:	f04f 0000 	mov.w	r0, #0
 804270e:	f04f 0100 	mov.w	r1, #0
 8042712:	0159      	lsls	r1, r3, #5
 8042714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8042718:	0150      	lsls	r0, r2, #5
 804271a:	4602      	mov	r2, r0
 804271c:	460b      	mov	r3, r1
 804271e:	ebb2 080a 	subs.w	r8, r2, sl
 8042722:	eb63 090b 	sbc.w	r9, r3, fp
 8042726:	f04f 0200 	mov.w	r2, #0
 804272a:	f04f 0300 	mov.w	r3, #0
 804272e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8042732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8042736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 804273a:	ebb2 0408 	subs.w	r4, r2, r8
 804273e:	eb63 0509 	sbc.w	r5, r3, r9
 8042742:	f04f 0200 	mov.w	r2, #0
 8042746:	f04f 0300 	mov.w	r3, #0
 804274a:	00eb      	lsls	r3, r5, #3
 804274c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8042750:	00e2      	lsls	r2, r4, #3
 8042752:	4614      	mov	r4, r2
 8042754:	461d      	mov	r5, r3
 8042756:	eb14 030a 	adds.w	r3, r4, sl
 804275a:	603b      	str	r3, [r7, #0]
 804275c:	eb45 030b 	adc.w	r3, r5, fp
 8042760:	607b      	str	r3, [r7, #4]
 8042762:	f04f 0200 	mov.w	r2, #0
 8042766:	f04f 0300 	mov.w	r3, #0
 804276a:	e9d7 4500 	ldrd	r4, r5, [r7]
 804276e:	4629      	mov	r1, r5
 8042770:	028b      	lsls	r3, r1, #10
 8042772:	4621      	mov	r1, r4
 8042774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8042778:	4621      	mov	r1, r4
 804277a:	028a      	lsls	r2, r1, #10
 804277c:	4610      	mov	r0, r2
 804277e:	4619      	mov	r1, r3
 8042780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042782:	2200      	movs	r2, #0
 8042784:	60bb      	str	r3, [r7, #8]
 8042786:	60fa      	str	r2, [r7, #12]
 8042788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 804278c:	f7fd fd58 	bl	8040240 <__aeabi_uldivmod>
 8042790:	4602      	mov	r2, r0
 8042792:	460b      	mov	r3, r1
 8042794:	4613      	mov	r3, r2
 8042796:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8042798:	4b0b      	ldr	r3, [pc, #44]	; (80427c8 <HAL_RCC_GetSysClockFreq+0x180>)
 804279a:	685b      	ldr	r3, [r3, #4]
 804279c:	0c1b      	lsrs	r3, r3, #16
 804279e:	f003 0303 	and.w	r3, r3, #3
 80427a2:	3301      	adds	r3, #1
 80427a4:	005b      	lsls	r3, r3, #1
 80427a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80427a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80427aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80427ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80427b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80427b2:	e002      	b.n	80427ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80427b4:	4b05      	ldr	r3, [pc, #20]	; (80427cc <HAL_RCC_GetSysClockFreq+0x184>)
 80427b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80427b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80427ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80427bc:	4618      	mov	r0, r3
 80427be:	3740      	adds	r7, #64	; 0x40
 80427c0:	46bd      	mov	sp, r7
 80427c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80427c6:	bf00      	nop
 80427c8:	40023800 	.word	0x40023800
 80427cc:	00f42400 	.word	0x00f42400
 80427d0:	017d7840 	.word	0x017d7840

080427d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80427d4:	b480      	push	{r7}
 80427d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80427d8:	4b03      	ldr	r3, [pc, #12]	; (80427e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80427da:	681b      	ldr	r3, [r3, #0]
}
 80427dc:	4618      	mov	r0, r3
 80427de:	46bd      	mov	sp, r7
 80427e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427e4:	4770      	bx	lr
 80427e6:	bf00      	nop
 80427e8:	20000000 	.word	0x20000000

080427ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80427ec:	b580      	push	{r7, lr}
 80427ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80427f0:	f7ff fff0 	bl	80427d4 <HAL_RCC_GetHCLKFreq>
 80427f4:	4602      	mov	r2, r0
 80427f6:	4b05      	ldr	r3, [pc, #20]	; (804280c <HAL_RCC_GetPCLK1Freq+0x20>)
 80427f8:	689b      	ldr	r3, [r3, #8]
 80427fa:	0a9b      	lsrs	r3, r3, #10
 80427fc:	f003 0307 	and.w	r3, r3, #7
 8042800:	4903      	ldr	r1, [pc, #12]	; (8042810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8042802:	5ccb      	ldrb	r3, [r1, r3]
 8042804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042808:	4618      	mov	r0, r3
 804280a:	bd80      	pop	{r7, pc}
 804280c:	40023800 	.word	0x40023800
 8042810:	080468f0 	.word	0x080468f0

08042814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042814:	b580      	push	{r7, lr}
 8042816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8042818:	f7ff ffdc 	bl	80427d4 <HAL_RCC_GetHCLKFreq>
 804281c:	4602      	mov	r2, r0
 804281e:	4b05      	ldr	r3, [pc, #20]	; (8042834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8042820:	689b      	ldr	r3, [r3, #8]
 8042822:	0b5b      	lsrs	r3, r3, #13
 8042824:	f003 0307 	and.w	r3, r3, #7
 8042828:	4903      	ldr	r1, [pc, #12]	; (8042838 <HAL_RCC_GetPCLK2Freq+0x24>)
 804282a:	5ccb      	ldrb	r3, [r1, r3]
 804282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042830:	4618      	mov	r0, r3
 8042832:	bd80      	pop	{r7, pc}
 8042834:	40023800 	.word	0x40023800
 8042838:	080468f0 	.word	0x080468f0

0804283c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 804283c:	b480      	push	{r7}
 804283e:	b083      	sub	sp, #12
 8042840:	af00      	add	r7, sp, #0
 8042842:	6078      	str	r0, [r7, #4]
 8042844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8042846:	687b      	ldr	r3, [r7, #4]
 8042848:	220f      	movs	r2, #15
 804284a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 804284c:	4b12      	ldr	r3, [pc, #72]	; (8042898 <HAL_RCC_GetClockConfig+0x5c>)
 804284e:	689b      	ldr	r3, [r3, #8]
 8042850:	f003 0203 	and.w	r2, r3, #3
 8042854:	687b      	ldr	r3, [r7, #4]
 8042856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8042858:	4b0f      	ldr	r3, [pc, #60]	; (8042898 <HAL_RCC_GetClockConfig+0x5c>)
 804285a:	689b      	ldr	r3, [r3, #8]
 804285c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8042860:	687b      	ldr	r3, [r7, #4]
 8042862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8042864:	4b0c      	ldr	r3, [pc, #48]	; (8042898 <HAL_RCC_GetClockConfig+0x5c>)
 8042866:	689b      	ldr	r3, [r3, #8]
 8042868:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 804286c:	687b      	ldr	r3, [r7, #4]
 804286e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8042870:	4b09      	ldr	r3, [pc, #36]	; (8042898 <HAL_RCC_GetClockConfig+0x5c>)
 8042872:	689b      	ldr	r3, [r3, #8]
 8042874:	08db      	lsrs	r3, r3, #3
 8042876:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 804287a:	687b      	ldr	r3, [r7, #4]
 804287c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 804287e:	4b07      	ldr	r3, [pc, #28]	; (804289c <HAL_RCC_GetClockConfig+0x60>)
 8042880:	681b      	ldr	r3, [r3, #0]
 8042882:	f003 020f 	and.w	r2, r3, #15
 8042886:	683b      	ldr	r3, [r7, #0]
 8042888:	601a      	str	r2, [r3, #0]
}
 804288a:	bf00      	nop
 804288c:	370c      	adds	r7, #12
 804288e:	46bd      	mov	sp, r7
 8042890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042894:	4770      	bx	lr
 8042896:	bf00      	nop
 8042898:	40023800 	.word	0x40023800
 804289c:	40023c00 	.word	0x40023c00

080428a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80428a0:	b580      	push	{r7, lr}
 80428a2:	b088      	sub	sp, #32
 80428a4:	af00      	add	r7, sp, #0
 80428a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80428a8:	2300      	movs	r3, #0
 80428aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80428ac:	2300      	movs	r3, #0
 80428ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80428b0:	2300      	movs	r3, #0
 80428b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80428b4:	2300      	movs	r3, #0
 80428b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80428b8:	2300      	movs	r3, #0
 80428ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80428bc:	687b      	ldr	r3, [r7, #4]
 80428be:	681b      	ldr	r3, [r3, #0]
 80428c0:	f003 0301 	and.w	r3, r3, #1
 80428c4:	2b00      	cmp	r3, #0
 80428c6:	d012      	beq.n	80428ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80428c8:	4b69      	ldr	r3, [pc, #420]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80428ca:	689b      	ldr	r3, [r3, #8]
 80428cc:	4a68      	ldr	r2, [pc, #416]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80428ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80428d2:	6093      	str	r3, [r2, #8]
 80428d4:	4b66      	ldr	r3, [pc, #408]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80428d6:	689a      	ldr	r2, [r3, #8]
 80428d8:	687b      	ldr	r3, [r7, #4]
 80428da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80428dc:	4964      	ldr	r1, [pc, #400]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80428de:	4313      	orrs	r3, r2
 80428e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80428e2:	687b      	ldr	r3, [r7, #4]
 80428e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80428e6:	2b00      	cmp	r3, #0
 80428e8:	d101      	bne.n	80428ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80428ea:	2301      	movs	r3, #1
 80428ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80428ee:	687b      	ldr	r3, [r7, #4]
 80428f0:	681b      	ldr	r3, [r3, #0]
 80428f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80428f6:	2b00      	cmp	r3, #0
 80428f8:	d017      	beq.n	804292a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80428fa:	4b5d      	ldr	r3, [pc, #372]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80428fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042904:	687b      	ldr	r3, [r7, #4]
 8042906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042908:	4959      	ldr	r1, [pc, #356]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804290a:	4313      	orrs	r3, r2
 804290c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8042910:	687b      	ldr	r3, [r7, #4]
 8042912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042918:	d101      	bne.n	804291e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 804291a:	2301      	movs	r3, #1
 804291c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 804291e:	687b      	ldr	r3, [r7, #4]
 8042920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042922:	2b00      	cmp	r3, #0
 8042924:	d101      	bne.n	804292a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8042926:	2301      	movs	r3, #1
 8042928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 804292a:	687b      	ldr	r3, [r7, #4]
 804292c:	681b      	ldr	r3, [r3, #0]
 804292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042932:	2b00      	cmp	r3, #0
 8042934:	d017      	beq.n	8042966 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8042936:	4b4e      	ldr	r3, [pc, #312]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804293c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042940:	687b      	ldr	r3, [r7, #4]
 8042942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042944:	494a      	ldr	r1, [pc, #296]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042946:	4313      	orrs	r3, r2
 8042948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 804294c:	687b      	ldr	r3, [r7, #4]
 804294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042954:	d101      	bne.n	804295a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8042956:	2301      	movs	r3, #1
 8042958:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 804295a:	687b      	ldr	r3, [r7, #4]
 804295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804295e:	2b00      	cmp	r3, #0
 8042960:	d101      	bne.n	8042966 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8042962:	2301      	movs	r3, #1
 8042964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042966:	687b      	ldr	r3, [r7, #4]
 8042968:	681b      	ldr	r3, [r3, #0]
 804296a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804296e:	2b00      	cmp	r3, #0
 8042970:	d001      	beq.n	8042976 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8042972:	2301      	movs	r3, #1
 8042974:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8042976:	687b      	ldr	r3, [r7, #4]
 8042978:	681b      	ldr	r3, [r3, #0]
 804297a:	f003 0320 	and.w	r3, r3, #32
 804297e:	2b00      	cmp	r3, #0
 8042980:	f000 808b 	beq.w	8042a9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8042984:	4b3a      	ldr	r3, [pc, #232]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042988:	4a39      	ldr	r2, [pc, #228]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804298a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804298e:	6413      	str	r3, [r2, #64]	; 0x40
 8042990:	4b37      	ldr	r3, [pc, #220]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042998:	60bb      	str	r3, [r7, #8]
 804299a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 804299c:	4b35      	ldr	r3, [pc, #212]	; (8042a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 804299e:	681b      	ldr	r3, [r3, #0]
 80429a0:	4a34      	ldr	r2, [pc, #208]	; (8042a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80429a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80429a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80429a8:	f7fe fb7e 	bl	80410a8 <HAL_GetTick>
 80429ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80429ae:	e008      	b.n	80429c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80429b0:	f7fe fb7a 	bl	80410a8 <HAL_GetTick>
 80429b4:	4602      	mov	r2, r0
 80429b6:	697b      	ldr	r3, [r7, #20]
 80429b8:	1ad3      	subs	r3, r2, r3
 80429ba:	2b64      	cmp	r3, #100	; 0x64
 80429bc:	d901      	bls.n	80429c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80429be:	2303      	movs	r3, #3
 80429c0:	e38f      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80429c2:	4b2c      	ldr	r3, [pc, #176]	; (8042a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80429c4:	681b      	ldr	r3, [r3, #0]
 80429c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80429ca:	2b00      	cmp	r3, #0
 80429cc:	d0f0      	beq.n	80429b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80429ce:	4b28      	ldr	r3, [pc, #160]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80429d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80429d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80429d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80429d8:	693b      	ldr	r3, [r7, #16]
 80429da:	2b00      	cmp	r3, #0
 80429dc:	d035      	beq.n	8042a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80429de:	687b      	ldr	r3, [r7, #4]
 80429e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80429e6:	693a      	ldr	r2, [r7, #16]
 80429e8:	429a      	cmp	r2, r3
 80429ea:	d02e      	beq.n	8042a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80429ec:	4b20      	ldr	r3, [pc, #128]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80429ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80429f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80429f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80429f6:	4b1e      	ldr	r3, [pc, #120]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80429f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80429fa:	4a1d      	ldr	r2, [pc, #116]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80429fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042a00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8042a02:	4b1b      	ldr	r3, [pc, #108]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042a06:	4a1a      	ldr	r2, [pc, #104]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042a0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8042a0e:	4a18      	ldr	r2, [pc, #96]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a10:	693b      	ldr	r3, [r7, #16]
 8042a12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8042a14:	4b16      	ldr	r3, [pc, #88]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042a18:	f003 0301 	and.w	r3, r3, #1
 8042a1c:	2b01      	cmp	r3, #1
 8042a1e:	d114      	bne.n	8042a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042a20:	f7fe fb42 	bl	80410a8 <HAL_GetTick>
 8042a24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042a26:	e00a      	b.n	8042a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8042a28:	f7fe fb3e 	bl	80410a8 <HAL_GetTick>
 8042a2c:	4602      	mov	r2, r0
 8042a2e:	697b      	ldr	r3, [r7, #20]
 8042a30:	1ad3      	subs	r3, r2, r3
 8042a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8042a36:	4293      	cmp	r3, r2
 8042a38:	d901      	bls.n	8042a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8042a3a:	2303      	movs	r3, #3
 8042a3c:	e351      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8042a3e:	4b0c      	ldr	r3, [pc, #48]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042a42:	f003 0302 	and.w	r3, r3, #2
 8042a46:	2b00      	cmp	r3, #0
 8042a48:	d0ee      	beq.n	8042a28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042a4a:	687b      	ldr	r3, [r7, #4]
 8042a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042a56:	d111      	bne.n	8042a7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8042a58:	4b05      	ldr	r3, [pc, #20]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a5a:	689b      	ldr	r3, [r3, #8]
 8042a5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8042a60:	687b      	ldr	r3, [r7, #4]
 8042a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8042a64:	4b04      	ldr	r3, [pc, #16]	; (8042a78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8042a66:	400b      	ands	r3, r1
 8042a68:	4901      	ldr	r1, [pc, #4]	; (8042a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8042a6a:	4313      	orrs	r3, r2
 8042a6c:	608b      	str	r3, [r1, #8]
 8042a6e:	e00b      	b.n	8042a88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8042a70:	40023800 	.word	0x40023800
 8042a74:	40007000 	.word	0x40007000
 8042a78:	0ffffcff 	.word	0x0ffffcff
 8042a7c:	4bac      	ldr	r3, [pc, #688]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042a7e:	689b      	ldr	r3, [r3, #8]
 8042a80:	4aab      	ldr	r2, [pc, #684]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042a82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8042a86:	6093      	str	r3, [r2, #8]
 8042a88:	4ba9      	ldr	r3, [pc, #676]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8042a8c:	687b      	ldr	r3, [r7, #4]
 8042a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042a94:	49a6      	ldr	r1, [pc, #664]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042a96:	4313      	orrs	r3, r2
 8042a98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8042a9a:	687b      	ldr	r3, [r7, #4]
 8042a9c:	681b      	ldr	r3, [r3, #0]
 8042a9e:	f003 0310 	and.w	r3, r3, #16
 8042aa2:	2b00      	cmp	r3, #0
 8042aa4:	d010      	beq.n	8042ac8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8042aa6:	4ba2      	ldr	r3, [pc, #648]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042aac:	4aa0      	ldr	r2, [pc, #640]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8042ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8042ab6:	4b9e      	ldr	r3, [pc, #632]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042ab8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8042abc:	687b      	ldr	r3, [r7, #4]
 8042abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042ac0:	499b      	ldr	r1, [pc, #620]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042ac2:	4313      	orrs	r3, r2
 8042ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8042ac8:	687b      	ldr	r3, [r7, #4]
 8042aca:	681b      	ldr	r3, [r3, #0]
 8042acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042ad0:	2b00      	cmp	r3, #0
 8042ad2:	d00a      	beq.n	8042aea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8042ad4:	4b96      	ldr	r3, [pc, #600]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042ade:	687b      	ldr	r3, [r7, #4]
 8042ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042ae2:	4993      	ldr	r1, [pc, #588]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042ae4:	4313      	orrs	r3, r2
 8042ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042aea:	687b      	ldr	r3, [r7, #4]
 8042aec:	681b      	ldr	r3, [r3, #0]
 8042aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8042af2:	2b00      	cmp	r3, #0
 8042af4:	d00a      	beq.n	8042b0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8042af6:	4b8e      	ldr	r3, [pc, #568]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042b00:	687b      	ldr	r3, [r7, #4]
 8042b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042b04:	498a      	ldr	r1, [pc, #552]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b06:	4313      	orrs	r3, r2
 8042b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042b0c:	687b      	ldr	r3, [r7, #4]
 8042b0e:	681b      	ldr	r3, [r3, #0]
 8042b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042b14:	2b00      	cmp	r3, #0
 8042b16:	d00a      	beq.n	8042b2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8042b18:	4b85      	ldr	r3, [pc, #532]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042b22:	687b      	ldr	r3, [r7, #4]
 8042b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042b26:	4982      	ldr	r1, [pc, #520]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b28:	4313      	orrs	r3, r2
 8042b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	681b      	ldr	r3, [r3, #0]
 8042b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042b36:	2b00      	cmp	r3, #0
 8042b38:	d00a      	beq.n	8042b50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8042b3a:	4b7d      	ldr	r3, [pc, #500]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042b44:	687b      	ldr	r3, [r7, #4]
 8042b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042b48:	4979      	ldr	r1, [pc, #484]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b4a:	4313      	orrs	r3, r2
 8042b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8042b50:	687b      	ldr	r3, [r7, #4]
 8042b52:	681b      	ldr	r3, [r3, #0]
 8042b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042b58:	2b00      	cmp	r3, #0
 8042b5a:	d00a      	beq.n	8042b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8042b5c:	4b74      	ldr	r3, [pc, #464]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b62:	f023 0203 	bic.w	r2, r3, #3
 8042b66:	687b      	ldr	r3, [r7, #4]
 8042b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042b6a:	4971      	ldr	r1, [pc, #452]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b6c:	4313      	orrs	r3, r2
 8042b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042b72:	687b      	ldr	r3, [r7, #4]
 8042b74:	681b      	ldr	r3, [r3, #0]
 8042b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042b7a:	2b00      	cmp	r3, #0
 8042b7c:	d00a      	beq.n	8042b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8042b7e:	4b6c      	ldr	r3, [pc, #432]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042b84:	f023 020c 	bic.w	r2, r3, #12
 8042b88:	687b      	ldr	r3, [r7, #4]
 8042b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042b8c:	4968      	ldr	r1, [pc, #416]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042b8e:	4313      	orrs	r3, r2
 8042b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042b94:	687b      	ldr	r3, [r7, #4]
 8042b96:	681b      	ldr	r3, [r3, #0]
 8042b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042b9c:	2b00      	cmp	r3, #0
 8042b9e:	d00a      	beq.n	8042bb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8042ba0:	4b63      	ldr	r3, [pc, #396]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042ba6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042baa:	687b      	ldr	r3, [r7, #4]
 8042bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042bae:	4960      	ldr	r1, [pc, #384]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042bb0:	4313      	orrs	r3, r2
 8042bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042bb6:	687b      	ldr	r3, [r7, #4]
 8042bb8:	681b      	ldr	r3, [r3, #0]
 8042bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042bbe:	2b00      	cmp	r3, #0
 8042bc0:	d00a      	beq.n	8042bd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042bc2:	4b5b      	ldr	r3, [pc, #364]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042bc8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8042bcc:	687b      	ldr	r3, [r7, #4]
 8042bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042bd0:	4957      	ldr	r1, [pc, #348]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042bd2:	4313      	orrs	r3, r2
 8042bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8042bd8:	687b      	ldr	r3, [r7, #4]
 8042bda:	681b      	ldr	r3, [r3, #0]
 8042bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042be0:	2b00      	cmp	r3, #0
 8042be2:	d00a      	beq.n	8042bfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042be4:	4b52      	ldr	r3, [pc, #328]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042bea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8042bee:	687b      	ldr	r3, [r7, #4]
 8042bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8042bf2:	494f      	ldr	r1, [pc, #316]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042bf4:	4313      	orrs	r3, r2
 8042bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8042bfa:	687b      	ldr	r3, [r7, #4]
 8042bfc:	681b      	ldr	r3, [r3, #0]
 8042bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042c02:	2b00      	cmp	r3, #0
 8042c04:	d00a      	beq.n	8042c1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8042c06:	4b4a      	ldr	r3, [pc, #296]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042c0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8042c10:	687b      	ldr	r3, [r7, #4]
 8042c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042c14:	4946      	ldr	r1, [pc, #280]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c16:	4313      	orrs	r3, r2
 8042c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8042c1c:	687b      	ldr	r3, [r7, #4]
 8042c1e:	681b      	ldr	r3, [r3, #0]
 8042c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042c24:	2b00      	cmp	r3, #0
 8042c26:	d00a      	beq.n	8042c3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8042c28:	4b41      	ldr	r3, [pc, #260]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042c2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042c32:	687b      	ldr	r3, [r7, #4]
 8042c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042c36:	493e      	ldr	r1, [pc, #248]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c38:	4313      	orrs	r3, r2
 8042c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8042c3e:	687b      	ldr	r3, [r7, #4]
 8042c40:	681b      	ldr	r3, [r3, #0]
 8042c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042c46:	2b00      	cmp	r3, #0
 8042c48:	d00a      	beq.n	8042c60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8042c4a:	4b39      	ldr	r3, [pc, #228]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042c50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8042c54:	687b      	ldr	r3, [r7, #4]
 8042c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042c58:	4935      	ldr	r1, [pc, #212]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c5a:	4313      	orrs	r3, r2
 8042c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8042c60:	687b      	ldr	r3, [r7, #4]
 8042c62:	681b      	ldr	r3, [r3, #0]
 8042c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042c68:	2b00      	cmp	r3, #0
 8042c6a:	d00a      	beq.n	8042c82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8042c6c:	4b30      	ldr	r3, [pc, #192]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042c72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8042c76:	687b      	ldr	r3, [r7, #4]
 8042c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042c7a:	492d      	ldr	r1, [pc, #180]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c7c:	4313      	orrs	r3, r2
 8042c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8042c82:	687b      	ldr	r3, [r7, #4]
 8042c84:	681b      	ldr	r3, [r3, #0]
 8042c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042c8a:	2b00      	cmp	r3, #0
 8042c8c:	d011      	beq.n	8042cb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8042c8e:	4b28      	ldr	r3, [pc, #160]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042c94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8042c98:	687b      	ldr	r3, [r7, #4]
 8042c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042c9c:	4924      	ldr	r1, [pc, #144]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042c9e:	4313      	orrs	r3, r2
 8042ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8042ca4:	687b      	ldr	r3, [r7, #4]
 8042ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042cac:	d101      	bne.n	8042cb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8042cae:	2301      	movs	r3, #1
 8042cb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8042cb2:	687b      	ldr	r3, [r7, #4]
 8042cb4:	681b      	ldr	r3, [r3, #0]
 8042cb6:	f003 0308 	and.w	r3, r3, #8
 8042cba:	2b00      	cmp	r3, #0
 8042cbc:	d001      	beq.n	8042cc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8042cbe:	2301      	movs	r3, #1
 8042cc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8042cc2:	687b      	ldr	r3, [r7, #4]
 8042cc4:	681b      	ldr	r3, [r3, #0]
 8042cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042cca:	2b00      	cmp	r3, #0
 8042ccc:	d00a      	beq.n	8042ce4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8042cce:	4b18      	ldr	r3, [pc, #96]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042cd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8042cd8:	687b      	ldr	r3, [r7, #4]
 8042cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042cdc:	4914      	ldr	r1, [pc, #80]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042cde:	4313      	orrs	r3, r2
 8042ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8042ce4:	687b      	ldr	r3, [r7, #4]
 8042ce6:	681b      	ldr	r3, [r3, #0]
 8042ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042cec:	2b00      	cmp	r3, #0
 8042cee:	d00b      	beq.n	8042d08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042cf0:	4b0f      	ldr	r3, [pc, #60]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042cf6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8042cfa:	687b      	ldr	r3, [r7, #4]
 8042cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042d00:	490b      	ldr	r1, [pc, #44]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042d02:	4313      	orrs	r3, r2
 8042d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8042d08:	687b      	ldr	r3, [r7, #4]
 8042d0a:	681b      	ldr	r3, [r3, #0]
 8042d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042d10:	2b00      	cmp	r3, #0
 8042d12:	d00f      	beq.n	8042d34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8042d14:	4b06      	ldr	r3, [pc, #24]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042d1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8042d1e:	687b      	ldr	r3, [r7, #4]
 8042d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042d24:	4902      	ldr	r1, [pc, #8]	; (8042d30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8042d26:	4313      	orrs	r3, r2
 8042d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8042d2c:	e002      	b.n	8042d34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8042d2e:	bf00      	nop
 8042d30:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8042d34:	687b      	ldr	r3, [r7, #4]
 8042d36:	681b      	ldr	r3, [r3, #0]
 8042d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042d3c:	2b00      	cmp	r3, #0
 8042d3e:	d00b      	beq.n	8042d58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8042d40:	4b8a      	ldr	r3, [pc, #552]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042d46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8042d4a:	687b      	ldr	r3, [r7, #4]
 8042d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042d50:	4986      	ldr	r1, [pc, #536]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042d52:	4313      	orrs	r3, r2
 8042d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8042d58:	687b      	ldr	r3, [r7, #4]
 8042d5a:	681b      	ldr	r3, [r3, #0]
 8042d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042d60:	2b00      	cmp	r3, #0
 8042d62:	d00b      	beq.n	8042d7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8042d64:	4b81      	ldr	r3, [pc, #516]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042d6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8042d6e:	687b      	ldr	r3, [r7, #4]
 8042d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042d74:	497d      	ldr	r1, [pc, #500]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042d76:	4313      	orrs	r3, r2
 8042d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8042d7c:	69fb      	ldr	r3, [r7, #28]
 8042d7e:	2b01      	cmp	r3, #1
 8042d80:	d006      	beq.n	8042d90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	681b      	ldr	r3, [r3, #0]
 8042d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042d8a:	2b00      	cmp	r3, #0
 8042d8c:	f000 80d6 	beq.w	8042f3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8042d90:	4b76      	ldr	r3, [pc, #472]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042d92:	681b      	ldr	r3, [r3, #0]
 8042d94:	4a75      	ldr	r2, [pc, #468]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042d96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8042d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042d9c:	f7fe f984 	bl	80410a8 <HAL_GetTick>
 8042da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8042da2:	e008      	b.n	8042db6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8042da4:	f7fe f980 	bl	80410a8 <HAL_GetTick>
 8042da8:	4602      	mov	r2, r0
 8042daa:	697b      	ldr	r3, [r7, #20]
 8042dac:	1ad3      	subs	r3, r2, r3
 8042dae:	2b64      	cmp	r3, #100	; 0x64
 8042db0:	d901      	bls.n	8042db6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042db2:	2303      	movs	r3, #3
 8042db4:	e195      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8042db6:	4b6d      	ldr	r3, [pc, #436]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042db8:	681b      	ldr	r3, [r3, #0]
 8042dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042dbe:	2b00      	cmp	r3, #0
 8042dc0:	d1f0      	bne.n	8042da4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8042dc2:	687b      	ldr	r3, [r7, #4]
 8042dc4:	681b      	ldr	r3, [r3, #0]
 8042dc6:	f003 0301 	and.w	r3, r3, #1
 8042dca:	2b00      	cmp	r3, #0
 8042dcc:	d021      	beq.n	8042e12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8042dce:	687b      	ldr	r3, [r7, #4]
 8042dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042dd2:	2b00      	cmp	r3, #0
 8042dd4:	d11d      	bne.n	8042e12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8042dd6:	4b65      	ldr	r3, [pc, #404]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042ddc:	0c1b      	lsrs	r3, r3, #16
 8042dde:	f003 0303 	and.w	r3, r3, #3
 8042de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042de4:	4b61      	ldr	r3, [pc, #388]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042dea:	0e1b      	lsrs	r3, r3, #24
 8042dec:	f003 030f 	and.w	r3, r3, #15
 8042df0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8042df2:	687b      	ldr	r3, [r7, #4]
 8042df4:	685b      	ldr	r3, [r3, #4]
 8042df6:	019a      	lsls	r2, r3, #6
 8042df8:	693b      	ldr	r3, [r7, #16]
 8042dfa:	041b      	lsls	r3, r3, #16
 8042dfc:	431a      	orrs	r2, r3
 8042dfe:	68fb      	ldr	r3, [r7, #12]
 8042e00:	061b      	lsls	r3, r3, #24
 8042e02:	431a      	orrs	r2, r3
 8042e04:	687b      	ldr	r3, [r7, #4]
 8042e06:	689b      	ldr	r3, [r3, #8]
 8042e08:	071b      	lsls	r3, r3, #28
 8042e0a:	4958      	ldr	r1, [pc, #352]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042e0c:	4313      	orrs	r3, r2
 8042e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042e12:	687b      	ldr	r3, [r7, #4]
 8042e14:	681b      	ldr	r3, [r3, #0]
 8042e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042e1a:	2b00      	cmp	r3, #0
 8042e1c:	d004      	beq.n	8042e28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8042e1e:	687b      	ldr	r3, [r7, #4]
 8042e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042e26:	d00a      	beq.n	8042e3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042e28:	687b      	ldr	r3, [r7, #4]
 8042e2a:	681b      	ldr	r3, [r3, #0]
 8042e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042e30:	2b00      	cmp	r3, #0
 8042e32:	d02e      	beq.n	8042e92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042e34:	687b      	ldr	r3, [r7, #4]
 8042e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042e3c:	d129      	bne.n	8042e92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8042e3e:	4b4b      	ldr	r3, [pc, #300]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042e44:	0c1b      	lsrs	r3, r3, #16
 8042e46:	f003 0303 	and.w	r3, r3, #3
 8042e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042e4c:	4b47      	ldr	r3, [pc, #284]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042e52:	0f1b      	lsrs	r3, r3, #28
 8042e54:	f003 0307 	and.w	r3, r3, #7
 8042e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8042e5a:	687b      	ldr	r3, [r7, #4]
 8042e5c:	685b      	ldr	r3, [r3, #4]
 8042e5e:	019a      	lsls	r2, r3, #6
 8042e60:	693b      	ldr	r3, [r7, #16]
 8042e62:	041b      	lsls	r3, r3, #16
 8042e64:	431a      	orrs	r2, r3
 8042e66:	687b      	ldr	r3, [r7, #4]
 8042e68:	68db      	ldr	r3, [r3, #12]
 8042e6a:	061b      	lsls	r3, r3, #24
 8042e6c:	431a      	orrs	r2, r3
 8042e6e:	68fb      	ldr	r3, [r7, #12]
 8042e70:	071b      	lsls	r3, r3, #28
 8042e72:	493e      	ldr	r1, [pc, #248]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042e74:	4313      	orrs	r3, r2
 8042e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8042e7a:	4b3c      	ldr	r3, [pc, #240]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042e80:	f023 021f 	bic.w	r2, r3, #31
 8042e84:	687b      	ldr	r3, [r7, #4]
 8042e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042e88:	3b01      	subs	r3, #1
 8042e8a:	4938      	ldr	r1, [pc, #224]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042e8c:	4313      	orrs	r3, r2
 8042e8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042e92:	687b      	ldr	r3, [r7, #4]
 8042e94:	681b      	ldr	r3, [r3, #0]
 8042e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042e9a:	2b00      	cmp	r3, #0
 8042e9c:	d01d      	beq.n	8042eda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8042e9e:	4b33      	ldr	r3, [pc, #204]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042ea4:	0e1b      	lsrs	r3, r3, #24
 8042ea6:	f003 030f 	and.w	r3, r3, #15
 8042eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8042eac:	4b2f      	ldr	r3, [pc, #188]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042eb2:	0f1b      	lsrs	r3, r3, #28
 8042eb4:	f003 0307 	and.w	r3, r3, #7
 8042eb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8042eba:	687b      	ldr	r3, [r7, #4]
 8042ebc:	685b      	ldr	r3, [r3, #4]
 8042ebe:	019a      	lsls	r2, r3, #6
 8042ec0:	687b      	ldr	r3, [r7, #4]
 8042ec2:	691b      	ldr	r3, [r3, #16]
 8042ec4:	041b      	lsls	r3, r3, #16
 8042ec6:	431a      	orrs	r2, r3
 8042ec8:	693b      	ldr	r3, [r7, #16]
 8042eca:	061b      	lsls	r3, r3, #24
 8042ecc:	431a      	orrs	r2, r3
 8042ece:	68fb      	ldr	r3, [r7, #12]
 8042ed0:	071b      	lsls	r3, r3, #28
 8042ed2:	4926      	ldr	r1, [pc, #152]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042ed4:	4313      	orrs	r3, r2
 8042ed6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8042eda:	687b      	ldr	r3, [r7, #4]
 8042edc:	681b      	ldr	r3, [r3, #0]
 8042ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042ee2:	2b00      	cmp	r3, #0
 8042ee4:	d011      	beq.n	8042f0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8042ee6:	687b      	ldr	r3, [r7, #4]
 8042ee8:	685b      	ldr	r3, [r3, #4]
 8042eea:	019a      	lsls	r2, r3, #6
 8042eec:	687b      	ldr	r3, [r7, #4]
 8042eee:	691b      	ldr	r3, [r3, #16]
 8042ef0:	041b      	lsls	r3, r3, #16
 8042ef2:	431a      	orrs	r2, r3
 8042ef4:	687b      	ldr	r3, [r7, #4]
 8042ef6:	68db      	ldr	r3, [r3, #12]
 8042ef8:	061b      	lsls	r3, r3, #24
 8042efa:	431a      	orrs	r2, r3
 8042efc:	687b      	ldr	r3, [r7, #4]
 8042efe:	689b      	ldr	r3, [r3, #8]
 8042f00:	071b      	lsls	r3, r3, #28
 8042f02:	491a      	ldr	r1, [pc, #104]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042f04:	4313      	orrs	r3, r2
 8042f06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8042f0a:	4b18      	ldr	r3, [pc, #96]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042f0c:	681b      	ldr	r3, [r3, #0]
 8042f0e:	4a17      	ldr	r2, [pc, #92]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042f16:	f7fe f8c7 	bl	80410a8 <HAL_GetTick>
 8042f1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042f1c:	e008      	b.n	8042f30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8042f1e:	f7fe f8c3 	bl	80410a8 <HAL_GetTick>
 8042f22:	4602      	mov	r2, r0
 8042f24:	697b      	ldr	r3, [r7, #20]
 8042f26:	1ad3      	subs	r3, r2, r3
 8042f28:	2b64      	cmp	r3, #100	; 0x64
 8042f2a:	d901      	bls.n	8042f30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042f2c:	2303      	movs	r3, #3
 8042f2e:	e0d8      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042f30:	4b0e      	ldr	r3, [pc, #56]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042f32:	681b      	ldr	r3, [r3, #0]
 8042f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042f38:	2b00      	cmp	r3, #0
 8042f3a:	d0f0      	beq.n	8042f1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8042f3c:	69bb      	ldr	r3, [r7, #24]
 8042f3e:	2b01      	cmp	r3, #1
 8042f40:	f040 80ce 	bne.w	80430e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042f44:	4b09      	ldr	r3, [pc, #36]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042f46:	681b      	ldr	r3, [r3, #0]
 8042f48:	4a08      	ldr	r2, [pc, #32]	; (8042f6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042f50:	f7fe f8aa 	bl	80410a8 <HAL_GetTick>
 8042f54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042f56:	e00b      	b.n	8042f70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042f58:	f7fe f8a6 	bl	80410a8 <HAL_GetTick>
 8042f5c:	4602      	mov	r2, r0
 8042f5e:	697b      	ldr	r3, [r7, #20]
 8042f60:	1ad3      	subs	r3, r2, r3
 8042f62:	2b64      	cmp	r3, #100	; 0x64
 8042f64:	d904      	bls.n	8042f70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042f66:	2303      	movs	r3, #3
 8042f68:	e0bb      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8042f6a:	bf00      	nop
 8042f6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042f70:	4b5e      	ldr	r3, [pc, #376]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042f72:	681b      	ldr	r3, [r3, #0]
 8042f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042f7c:	d0ec      	beq.n	8042f58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8042f7e:	687b      	ldr	r3, [r7, #4]
 8042f80:	681b      	ldr	r3, [r3, #0]
 8042f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042f86:	2b00      	cmp	r3, #0
 8042f88:	d003      	beq.n	8042f92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8042f8a:	687b      	ldr	r3, [r7, #4]
 8042f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042f8e:	2b00      	cmp	r3, #0
 8042f90:	d009      	beq.n	8042fa6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042f92:	687b      	ldr	r3, [r7, #4]
 8042f94:	681b      	ldr	r3, [r3, #0]
 8042f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8042f9a:	2b00      	cmp	r3, #0
 8042f9c:	d02e      	beq.n	8042ffc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042f9e:	687b      	ldr	r3, [r7, #4]
 8042fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042fa2:	2b00      	cmp	r3, #0
 8042fa4:	d12a      	bne.n	8042ffc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8042fa6:	4b51      	ldr	r3, [pc, #324]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042fac:	0c1b      	lsrs	r3, r3, #16
 8042fae:	f003 0303 	and.w	r3, r3, #3
 8042fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8042fb4:	4b4d      	ldr	r3, [pc, #308]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042fba:	0f1b      	lsrs	r3, r3, #28
 8042fbc:	f003 0307 	and.w	r3, r3, #7
 8042fc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8042fc2:	687b      	ldr	r3, [r7, #4]
 8042fc4:	695b      	ldr	r3, [r3, #20]
 8042fc6:	019a      	lsls	r2, r3, #6
 8042fc8:	693b      	ldr	r3, [r7, #16]
 8042fca:	041b      	lsls	r3, r3, #16
 8042fcc:	431a      	orrs	r2, r3
 8042fce:	687b      	ldr	r3, [r7, #4]
 8042fd0:	699b      	ldr	r3, [r3, #24]
 8042fd2:	061b      	lsls	r3, r3, #24
 8042fd4:	431a      	orrs	r2, r3
 8042fd6:	68fb      	ldr	r3, [r7, #12]
 8042fd8:	071b      	lsls	r3, r3, #28
 8042fda:	4944      	ldr	r1, [pc, #272]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042fdc:	4313      	orrs	r3, r2
 8042fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8042fe2:	4b42      	ldr	r3, [pc, #264]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042fe8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8042fec:	687b      	ldr	r3, [r7, #4]
 8042fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042ff0:	3b01      	subs	r3, #1
 8042ff2:	021b      	lsls	r3, r3, #8
 8042ff4:	493d      	ldr	r1, [pc, #244]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042ff6:	4313      	orrs	r3, r2
 8042ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8042ffc:	687b      	ldr	r3, [r7, #4]
 8042ffe:	681b      	ldr	r3, [r3, #0]
 8043000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043004:	2b00      	cmp	r3, #0
 8043006:	d022      	beq.n	804304e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8043008:	687b      	ldr	r3, [r7, #4]
 804300a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804300c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8043010:	d11d      	bne.n	804304e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8043012:	4b36      	ldr	r3, [pc, #216]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043018:	0e1b      	lsrs	r3, r3, #24
 804301a:	f003 030f 	and.w	r3, r3, #15
 804301e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8043020:	4b32      	ldr	r3, [pc, #200]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043026:	0f1b      	lsrs	r3, r3, #28
 8043028:	f003 0307 	and.w	r3, r3, #7
 804302c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 804302e:	687b      	ldr	r3, [r7, #4]
 8043030:	695b      	ldr	r3, [r3, #20]
 8043032:	019a      	lsls	r2, r3, #6
 8043034:	687b      	ldr	r3, [r7, #4]
 8043036:	6a1b      	ldr	r3, [r3, #32]
 8043038:	041b      	lsls	r3, r3, #16
 804303a:	431a      	orrs	r2, r3
 804303c:	693b      	ldr	r3, [r7, #16]
 804303e:	061b      	lsls	r3, r3, #24
 8043040:	431a      	orrs	r2, r3
 8043042:	68fb      	ldr	r3, [r7, #12]
 8043044:	071b      	lsls	r3, r3, #28
 8043046:	4929      	ldr	r1, [pc, #164]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043048:	4313      	orrs	r3, r2
 804304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	681b      	ldr	r3, [r3, #0]
 8043052:	f003 0308 	and.w	r3, r3, #8
 8043056:	2b00      	cmp	r3, #0
 8043058:	d028      	beq.n	80430ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804305a:	4b24      	ldr	r3, [pc, #144]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043060:	0e1b      	lsrs	r3, r3, #24
 8043062:	f003 030f 	and.w	r3, r3, #15
 8043066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8043068:	4b20      	ldr	r3, [pc, #128]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804306e:	0c1b      	lsrs	r3, r3, #16
 8043070:	f003 0303 	and.w	r3, r3, #3
 8043074:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8043076:	687b      	ldr	r3, [r7, #4]
 8043078:	695b      	ldr	r3, [r3, #20]
 804307a:	019a      	lsls	r2, r3, #6
 804307c:	68fb      	ldr	r3, [r7, #12]
 804307e:	041b      	lsls	r3, r3, #16
 8043080:	431a      	orrs	r2, r3
 8043082:	693b      	ldr	r3, [r7, #16]
 8043084:	061b      	lsls	r3, r3, #24
 8043086:	431a      	orrs	r2, r3
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	69db      	ldr	r3, [r3, #28]
 804308c:	071b      	lsls	r3, r3, #28
 804308e:	4917      	ldr	r1, [pc, #92]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043090:	4313      	orrs	r3, r2
 8043092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8043096:	4b15      	ldr	r3, [pc, #84]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8043098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804309c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80430a0:	687b      	ldr	r3, [r7, #4]
 80430a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80430a4:	4911      	ldr	r1, [pc, #68]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80430a6:	4313      	orrs	r3, r2
 80430a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80430ac:	4b0f      	ldr	r3, [pc, #60]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80430ae:	681b      	ldr	r3, [r3, #0]
 80430b0:	4a0e      	ldr	r2, [pc, #56]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80430b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80430b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80430b8:	f7fd fff6 	bl	80410a8 <HAL_GetTick>
 80430bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80430be:	e008      	b.n	80430d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80430c0:	f7fd fff2 	bl	80410a8 <HAL_GetTick>
 80430c4:	4602      	mov	r2, r0
 80430c6:	697b      	ldr	r3, [r7, #20]
 80430c8:	1ad3      	subs	r3, r2, r3
 80430ca:	2b64      	cmp	r3, #100	; 0x64
 80430cc:	d901      	bls.n	80430d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80430ce:	2303      	movs	r3, #3
 80430d0:	e007      	b.n	80430e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80430d2:	4b06      	ldr	r3, [pc, #24]	; (80430ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80430d4:	681b      	ldr	r3, [r3, #0]
 80430d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80430da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80430de:	d1ef      	bne.n	80430c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80430e0:	2300      	movs	r3, #0
}
 80430e2:	4618      	mov	r0, r3
 80430e4:	3720      	adds	r7, #32
 80430e6:	46bd      	mov	sp, r7
 80430e8:	bd80      	pop	{r7, pc}
 80430ea:	bf00      	nop
 80430ec:	40023800 	.word	0x40023800

080430f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80430f0:	b580      	push	{r7, lr}
 80430f2:	b082      	sub	sp, #8
 80430f4:	af00      	add	r7, sp, #0
 80430f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80430f8:	687b      	ldr	r3, [r7, #4]
 80430fa:	2b00      	cmp	r3, #0
 80430fc:	d101      	bne.n	8043102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80430fe:	2301      	movs	r3, #1
 8043100:	e049      	b.n	8043196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8043102:	687b      	ldr	r3, [r7, #4]
 8043104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043108:	b2db      	uxtb	r3, r3
 804310a:	2b00      	cmp	r3, #0
 804310c:	d106      	bne.n	804311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804310e:	687b      	ldr	r3, [r7, #4]
 8043110:	2200      	movs	r2, #0
 8043112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8043116:	6878      	ldr	r0, [r7, #4]
 8043118:	f000 f841 	bl	804319e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804311c:	687b      	ldr	r3, [r7, #4]
 804311e:	2202      	movs	r2, #2
 8043120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8043124:	687b      	ldr	r3, [r7, #4]
 8043126:	681a      	ldr	r2, [r3, #0]
 8043128:	687b      	ldr	r3, [r7, #4]
 804312a:	3304      	adds	r3, #4
 804312c:	4619      	mov	r1, r3
 804312e:	4610      	mov	r0, r2
 8043130:	f000 fa00 	bl	8043534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8043134:	687b      	ldr	r3, [r7, #4]
 8043136:	2201      	movs	r2, #1
 8043138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804313c:	687b      	ldr	r3, [r7, #4]
 804313e:	2201      	movs	r2, #1
 8043140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8043144:	687b      	ldr	r3, [r7, #4]
 8043146:	2201      	movs	r2, #1
 8043148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804314c:	687b      	ldr	r3, [r7, #4]
 804314e:	2201      	movs	r2, #1
 8043150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8043154:	687b      	ldr	r3, [r7, #4]
 8043156:	2201      	movs	r2, #1
 8043158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 804315c:	687b      	ldr	r3, [r7, #4]
 804315e:	2201      	movs	r2, #1
 8043160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8043164:	687b      	ldr	r3, [r7, #4]
 8043166:	2201      	movs	r2, #1
 8043168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804316c:	687b      	ldr	r3, [r7, #4]
 804316e:	2201      	movs	r2, #1
 8043170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	2201      	movs	r2, #1
 8043178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 804317c:	687b      	ldr	r3, [r7, #4]
 804317e:	2201      	movs	r2, #1
 8043180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8043184:	687b      	ldr	r3, [r7, #4]
 8043186:	2201      	movs	r2, #1
 8043188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804318c:	687b      	ldr	r3, [r7, #4]
 804318e:	2201      	movs	r2, #1
 8043190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8043194:	2300      	movs	r3, #0
}
 8043196:	4618      	mov	r0, r3
 8043198:	3708      	adds	r7, #8
 804319a:	46bd      	mov	sp, r7
 804319c:	bd80      	pop	{r7, pc}

0804319e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 804319e:	b480      	push	{r7}
 80431a0:	b083      	sub	sp, #12
 80431a2:	af00      	add	r7, sp, #0
 80431a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80431a6:	bf00      	nop
 80431a8:	370c      	adds	r7, #12
 80431aa:	46bd      	mov	sp, r7
 80431ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80431b0:	4770      	bx	lr
	...

080431b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80431b4:	b480      	push	{r7}
 80431b6:	b085      	sub	sp, #20
 80431b8:	af00      	add	r7, sp, #0
 80431ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80431bc:	687b      	ldr	r3, [r7, #4]
 80431be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80431c2:	b2db      	uxtb	r3, r3
 80431c4:	2b01      	cmp	r3, #1
 80431c6:	d001      	beq.n	80431cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80431c8:	2301      	movs	r3, #1
 80431ca:	e054      	b.n	8043276 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80431cc:	687b      	ldr	r3, [r7, #4]
 80431ce:	2202      	movs	r2, #2
 80431d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80431d4:	687b      	ldr	r3, [r7, #4]
 80431d6:	681b      	ldr	r3, [r3, #0]
 80431d8:	68da      	ldr	r2, [r3, #12]
 80431da:	687b      	ldr	r3, [r7, #4]
 80431dc:	681b      	ldr	r3, [r3, #0]
 80431de:	f042 0201 	orr.w	r2, r2, #1
 80431e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80431e4:	687b      	ldr	r3, [r7, #4]
 80431e6:	681b      	ldr	r3, [r3, #0]
 80431e8:	4a26      	ldr	r2, [pc, #152]	; (8043284 <HAL_TIM_Base_Start_IT+0xd0>)
 80431ea:	4293      	cmp	r3, r2
 80431ec:	d022      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 80431ee:	687b      	ldr	r3, [r7, #4]
 80431f0:	681b      	ldr	r3, [r3, #0]
 80431f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80431f6:	d01d      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 80431f8:	687b      	ldr	r3, [r7, #4]
 80431fa:	681b      	ldr	r3, [r3, #0]
 80431fc:	4a22      	ldr	r2, [pc, #136]	; (8043288 <HAL_TIM_Base_Start_IT+0xd4>)
 80431fe:	4293      	cmp	r3, r2
 8043200:	d018      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	681b      	ldr	r3, [r3, #0]
 8043206:	4a21      	ldr	r2, [pc, #132]	; (804328c <HAL_TIM_Base_Start_IT+0xd8>)
 8043208:	4293      	cmp	r3, r2
 804320a:	d013      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 804320c:	687b      	ldr	r3, [r7, #4]
 804320e:	681b      	ldr	r3, [r3, #0]
 8043210:	4a1f      	ldr	r2, [pc, #124]	; (8043290 <HAL_TIM_Base_Start_IT+0xdc>)
 8043212:	4293      	cmp	r3, r2
 8043214:	d00e      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 8043216:	687b      	ldr	r3, [r7, #4]
 8043218:	681b      	ldr	r3, [r3, #0]
 804321a:	4a1e      	ldr	r2, [pc, #120]	; (8043294 <HAL_TIM_Base_Start_IT+0xe0>)
 804321c:	4293      	cmp	r3, r2
 804321e:	d009      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 8043220:	687b      	ldr	r3, [r7, #4]
 8043222:	681b      	ldr	r3, [r3, #0]
 8043224:	4a1c      	ldr	r2, [pc, #112]	; (8043298 <HAL_TIM_Base_Start_IT+0xe4>)
 8043226:	4293      	cmp	r3, r2
 8043228:	d004      	beq.n	8043234 <HAL_TIM_Base_Start_IT+0x80>
 804322a:	687b      	ldr	r3, [r7, #4]
 804322c:	681b      	ldr	r3, [r3, #0]
 804322e:	4a1b      	ldr	r2, [pc, #108]	; (804329c <HAL_TIM_Base_Start_IT+0xe8>)
 8043230:	4293      	cmp	r3, r2
 8043232:	d115      	bne.n	8043260 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8043234:	687b      	ldr	r3, [r7, #4]
 8043236:	681b      	ldr	r3, [r3, #0]
 8043238:	689a      	ldr	r2, [r3, #8]
 804323a:	4b19      	ldr	r3, [pc, #100]	; (80432a0 <HAL_TIM_Base_Start_IT+0xec>)
 804323c:	4013      	ands	r3, r2
 804323e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8043240:	68fb      	ldr	r3, [r7, #12]
 8043242:	2b06      	cmp	r3, #6
 8043244:	d015      	beq.n	8043272 <HAL_TIM_Base_Start_IT+0xbe>
 8043246:	68fb      	ldr	r3, [r7, #12]
 8043248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804324c:	d011      	beq.n	8043272 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 804324e:	687b      	ldr	r3, [r7, #4]
 8043250:	681b      	ldr	r3, [r3, #0]
 8043252:	681a      	ldr	r2, [r3, #0]
 8043254:	687b      	ldr	r3, [r7, #4]
 8043256:	681b      	ldr	r3, [r3, #0]
 8043258:	f042 0201 	orr.w	r2, r2, #1
 804325c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804325e:	e008      	b.n	8043272 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8043260:	687b      	ldr	r3, [r7, #4]
 8043262:	681b      	ldr	r3, [r3, #0]
 8043264:	681a      	ldr	r2, [r3, #0]
 8043266:	687b      	ldr	r3, [r7, #4]
 8043268:	681b      	ldr	r3, [r3, #0]
 804326a:	f042 0201 	orr.w	r2, r2, #1
 804326e:	601a      	str	r2, [r3, #0]
 8043270:	e000      	b.n	8043274 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8043272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8043274:	2300      	movs	r3, #0
}
 8043276:	4618      	mov	r0, r3
 8043278:	3714      	adds	r7, #20
 804327a:	46bd      	mov	sp, r7
 804327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043280:	4770      	bx	lr
 8043282:	bf00      	nop
 8043284:	40010000 	.word	0x40010000
 8043288:	40000400 	.word	0x40000400
 804328c:	40000800 	.word	0x40000800
 8043290:	40000c00 	.word	0x40000c00
 8043294:	40010400 	.word	0x40010400
 8043298:	40014000 	.word	0x40014000
 804329c:	40001800 	.word	0x40001800
 80432a0:	00010007 	.word	0x00010007

080432a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80432a4:	b580      	push	{r7, lr}
 80432a6:	b082      	sub	sp, #8
 80432a8:	af00      	add	r7, sp, #0
 80432aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80432ac:	687b      	ldr	r3, [r7, #4]
 80432ae:	681b      	ldr	r3, [r3, #0]
 80432b0:	691b      	ldr	r3, [r3, #16]
 80432b2:	f003 0302 	and.w	r3, r3, #2
 80432b6:	2b02      	cmp	r3, #2
 80432b8:	d122      	bne.n	8043300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80432ba:	687b      	ldr	r3, [r7, #4]
 80432bc:	681b      	ldr	r3, [r3, #0]
 80432be:	68db      	ldr	r3, [r3, #12]
 80432c0:	f003 0302 	and.w	r3, r3, #2
 80432c4:	2b02      	cmp	r3, #2
 80432c6:	d11b      	bne.n	8043300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80432c8:	687b      	ldr	r3, [r7, #4]
 80432ca:	681b      	ldr	r3, [r3, #0]
 80432cc:	f06f 0202 	mvn.w	r2, #2
 80432d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80432d2:	687b      	ldr	r3, [r7, #4]
 80432d4:	2201      	movs	r2, #1
 80432d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80432d8:	687b      	ldr	r3, [r7, #4]
 80432da:	681b      	ldr	r3, [r3, #0]
 80432dc:	699b      	ldr	r3, [r3, #24]
 80432de:	f003 0303 	and.w	r3, r3, #3
 80432e2:	2b00      	cmp	r3, #0
 80432e4:	d003      	beq.n	80432ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80432e6:	6878      	ldr	r0, [r7, #4]
 80432e8:	f000 f905 	bl	80434f6 <HAL_TIM_IC_CaptureCallback>
 80432ec:	e005      	b.n	80432fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80432ee:	6878      	ldr	r0, [r7, #4]
 80432f0:	f000 f8f7 	bl	80434e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80432f4:	6878      	ldr	r0, [r7, #4]
 80432f6:	f000 f908 	bl	804350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80432fa:	687b      	ldr	r3, [r7, #4]
 80432fc:	2200      	movs	r2, #0
 80432fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8043300:	687b      	ldr	r3, [r7, #4]
 8043302:	681b      	ldr	r3, [r3, #0]
 8043304:	691b      	ldr	r3, [r3, #16]
 8043306:	f003 0304 	and.w	r3, r3, #4
 804330a:	2b04      	cmp	r3, #4
 804330c:	d122      	bne.n	8043354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804330e:	687b      	ldr	r3, [r7, #4]
 8043310:	681b      	ldr	r3, [r3, #0]
 8043312:	68db      	ldr	r3, [r3, #12]
 8043314:	f003 0304 	and.w	r3, r3, #4
 8043318:	2b04      	cmp	r3, #4
 804331a:	d11b      	bne.n	8043354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 804331c:	687b      	ldr	r3, [r7, #4]
 804331e:	681b      	ldr	r3, [r3, #0]
 8043320:	f06f 0204 	mvn.w	r2, #4
 8043324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8043326:	687b      	ldr	r3, [r7, #4]
 8043328:	2202      	movs	r2, #2
 804332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 804332c:	687b      	ldr	r3, [r7, #4]
 804332e:	681b      	ldr	r3, [r3, #0]
 8043330:	699b      	ldr	r3, [r3, #24]
 8043332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043336:	2b00      	cmp	r3, #0
 8043338:	d003      	beq.n	8043342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804333a:	6878      	ldr	r0, [r7, #4]
 804333c:	f000 f8db 	bl	80434f6 <HAL_TIM_IC_CaptureCallback>
 8043340:	e005      	b.n	804334e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8043342:	6878      	ldr	r0, [r7, #4]
 8043344:	f000 f8cd 	bl	80434e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8043348:	6878      	ldr	r0, [r7, #4]
 804334a:	f000 f8de 	bl	804350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804334e:	687b      	ldr	r3, [r7, #4]
 8043350:	2200      	movs	r2, #0
 8043352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8043354:	687b      	ldr	r3, [r7, #4]
 8043356:	681b      	ldr	r3, [r3, #0]
 8043358:	691b      	ldr	r3, [r3, #16]
 804335a:	f003 0308 	and.w	r3, r3, #8
 804335e:	2b08      	cmp	r3, #8
 8043360:	d122      	bne.n	80433a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8043362:	687b      	ldr	r3, [r7, #4]
 8043364:	681b      	ldr	r3, [r3, #0]
 8043366:	68db      	ldr	r3, [r3, #12]
 8043368:	f003 0308 	and.w	r3, r3, #8
 804336c:	2b08      	cmp	r3, #8
 804336e:	d11b      	bne.n	80433a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8043370:	687b      	ldr	r3, [r7, #4]
 8043372:	681b      	ldr	r3, [r3, #0]
 8043374:	f06f 0208 	mvn.w	r2, #8
 8043378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804337a:	687b      	ldr	r3, [r7, #4]
 804337c:	2204      	movs	r2, #4
 804337e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8043380:	687b      	ldr	r3, [r7, #4]
 8043382:	681b      	ldr	r3, [r3, #0]
 8043384:	69db      	ldr	r3, [r3, #28]
 8043386:	f003 0303 	and.w	r3, r3, #3
 804338a:	2b00      	cmp	r3, #0
 804338c:	d003      	beq.n	8043396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804338e:	6878      	ldr	r0, [r7, #4]
 8043390:	f000 f8b1 	bl	80434f6 <HAL_TIM_IC_CaptureCallback>
 8043394:	e005      	b.n	80433a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8043396:	6878      	ldr	r0, [r7, #4]
 8043398:	f000 f8a3 	bl	80434e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804339c:	6878      	ldr	r0, [r7, #4]
 804339e:	f000 f8b4 	bl	804350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80433a2:	687b      	ldr	r3, [r7, #4]
 80433a4:	2200      	movs	r2, #0
 80433a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80433a8:	687b      	ldr	r3, [r7, #4]
 80433aa:	681b      	ldr	r3, [r3, #0]
 80433ac:	691b      	ldr	r3, [r3, #16]
 80433ae:	f003 0310 	and.w	r3, r3, #16
 80433b2:	2b10      	cmp	r3, #16
 80433b4:	d122      	bne.n	80433fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80433b6:	687b      	ldr	r3, [r7, #4]
 80433b8:	681b      	ldr	r3, [r3, #0]
 80433ba:	68db      	ldr	r3, [r3, #12]
 80433bc:	f003 0310 	and.w	r3, r3, #16
 80433c0:	2b10      	cmp	r3, #16
 80433c2:	d11b      	bne.n	80433fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80433c4:	687b      	ldr	r3, [r7, #4]
 80433c6:	681b      	ldr	r3, [r3, #0]
 80433c8:	f06f 0210 	mvn.w	r2, #16
 80433cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80433ce:	687b      	ldr	r3, [r7, #4]
 80433d0:	2208      	movs	r2, #8
 80433d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80433d4:	687b      	ldr	r3, [r7, #4]
 80433d6:	681b      	ldr	r3, [r3, #0]
 80433d8:	69db      	ldr	r3, [r3, #28]
 80433da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80433de:	2b00      	cmp	r3, #0
 80433e0:	d003      	beq.n	80433ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80433e2:	6878      	ldr	r0, [r7, #4]
 80433e4:	f000 f887 	bl	80434f6 <HAL_TIM_IC_CaptureCallback>
 80433e8:	e005      	b.n	80433f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80433ea:	6878      	ldr	r0, [r7, #4]
 80433ec:	f000 f879 	bl	80434e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80433f0:	6878      	ldr	r0, [r7, #4]
 80433f2:	f000 f88a 	bl	804350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80433f6:	687b      	ldr	r3, [r7, #4]
 80433f8:	2200      	movs	r2, #0
 80433fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80433fc:	687b      	ldr	r3, [r7, #4]
 80433fe:	681b      	ldr	r3, [r3, #0]
 8043400:	691b      	ldr	r3, [r3, #16]
 8043402:	f003 0301 	and.w	r3, r3, #1
 8043406:	2b01      	cmp	r3, #1
 8043408:	d10e      	bne.n	8043428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804340a:	687b      	ldr	r3, [r7, #4]
 804340c:	681b      	ldr	r3, [r3, #0]
 804340e:	68db      	ldr	r3, [r3, #12]
 8043410:	f003 0301 	and.w	r3, r3, #1
 8043414:	2b01      	cmp	r3, #1
 8043416:	d107      	bne.n	8043428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8043418:	687b      	ldr	r3, [r7, #4]
 804341a:	681b      	ldr	r3, [r3, #0]
 804341c:	f06f 0201 	mvn.w	r2, #1
 8043420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8043422:	6878      	ldr	r0, [r7, #4]
 8043424:	f7fd fb3e 	bl	8040aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8043428:	687b      	ldr	r3, [r7, #4]
 804342a:	681b      	ldr	r3, [r3, #0]
 804342c:	691b      	ldr	r3, [r3, #16]
 804342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043432:	2b80      	cmp	r3, #128	; 0x80
 8043434:	d10e      	bne.n	8043454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8043436:	687b      	ldr	r3, [r7, #4]
 8043438:	681b      	ldr	r3, [r3, #0]
 804343a:	68db      	ldr	r3, [r3, #12]
 804343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043440:	2b80      	cmp	r3, #128	; 0x80
 8043442:	d107      	bne.n	8043454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8043444:	687b      	ldr	r3, [r7, #4]
 8043446:	681b      	ldr	r3, [r3, #0]
 8043448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 804344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 804344e:	6878      	ldr	r0, [r7, #4]
 8043450:	f000 f91a 	bl	8043688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8043454:	687b      	ldr	r3, [r7, #4]
 8043456:	681b      	ldr	r3, [r3, #0]
 8043458:	691b      	ldr	r3, [r3, #16]
 804345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043462:	d10e      	bne.n	8043482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8043464:	687b      	ldr	r3, [r7, #4]
 8043466:	681b      	ldr	r3, [r3, #0]
 8043468:	68db      	ldr	r3, [r3, #12]
 804346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804346e:	2b80      	cmp	r3, #128	; 0x80
 8043470:	d107      	bne.n	8043482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8043472:	687b      	ldr	r3, [r7, #4]
 8043474:	681b      	ldr	r3, [r3, #0]
 8043476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 804347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 804347c:	6878      	ldr	r0, [r7, #4]
 804347e:	f000 f90d 	bl	804369c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8043482:	687b      	ldr	r3, [r7, #4]
 8043484:	681b      	ldr	r3, [r3, #0]
 8043486:	691b      	ldr	r3, [r3, #16]
 8043488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804348c:	2b40      	cmp	r3, #64	; 0x40
 804348e:	d10e      	bne.n	80434ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8043490:	687b      	ldr	r3, [r7, #4]
 8043492:	681b      	ldr	r3, [r3, #0]
 8043494:	68db      	ldr	r3, [r3, #12]
 8043496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804349a:	2b40      	cmp	r3, #64	; 0x40
 804349c:	d107      	bne.n	80434ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804349e:	687b      	ldr	r3, [r7, #4]
 80434a0:	681b      	ldr	r3, [r3, #0]
 80434a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80434a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80434a8:	6878      	ldr	r0, [r7, #4]
 80434aa:	f000 f838 	bl	804351e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80434ae:	687b      	ldr	r3, [r7, #4]
 80434b0:	681b      	ldr	r3, [r3, #0]
 80434b2:	691b      	ldr	r3, [r3, #16]
 80434b4:	f003 0320 	and.w	r3, r3, #32
 80434b8:	2b20      	cmp	r3, #32
 80434ba:	d10e      	bne.n	80434da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80434bc:	687b      	ldr	r3, [r7, #4]
 80434be:	681b      	ldr	r3, [r3, #0]
 80434c0:	68db      	ldr	r3, [r3, #12]
 80434c2:	f003 0320 	and.w	r3, r3, #32
 80434c6:	2b20      	cmp	r3, #32
 80434c8:	d107      	bne.n	80434da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80434ca:	687b      	ldr	r3, [r7, #4]
 80434cc:	681b      	ldr	r3, [r3, #0]
 80434ce:	f06f 0220 	mvn.w	r2, #32
 80434d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80434d4:	6878      	ldr	r0, [r7, #4]
 80434d6:	f000 f8cd 	bl	8043674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80434da:	bf00      	nop
 80434dc:	3708      	adds	r7, #8
 80434de:	46bd      	mov	sp, r7
 80434e0:	bd80      	pop	{r7, pc}

080434e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80434e2:	b480      	push	{r7}
 80434e4:	b083      	sub	sp, #12
 80434e6:	af00      	add	r7, sp, #0
 80434e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80434ea:	bf00      	nop
 80434ec:	370c      	adds	r7, #12
 80434ee:	46bd      	mov	sp, r7
 80434f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434f4:	4770      	bx	lr

080434f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80434f6:	b480      	push	{r7}
 80434f8:	b083      	sub	sp, #12
 80434fa:	af00      	add	r7, sp, #0
 80434fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80434fe:	bf00      	nop
 8043500:	370c      	adds	r7, #12
 8043502:	46bd      	mov	sp, r7
 8043504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043508:	4770      	bx	lr

0804350a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 804350a:	b480      	push	{r7}
 804350c:	b083      	sub	sp, #12
 804350e:	af00      	add	r7, sp, #0
 8043510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8043512:	bf00      	nop
 8043514:	370c      	adds	r7, #12
 8043516:	46bd      	mov	sp, r7
 8043518:	f85d 7b04 	ldr.w	r7, [sp], #4
 804351c:	4770      	bx	lr

0804351e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804351e:	b480      	push	{r7}
 8043520:	b083      	sub	sp, #12
 8043522:	af00      	add	r7, sp, #0
 8043524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8043526:	bf00      	nop
 8043528:	370c      	adds	r7, #12
 804352a:	46bd      	mov	sp, r7
 804352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043530:	4770      	bx	lr
	...

08043534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8043534:	b480      	push	{r7}
 8043536:	b085      	sub	sp, #20
 8043538:	af00      	add	r7, sp, #0
 804353a:	6078      	str	r0, [r7, #4]
 804353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804353e:	687b      	ldr	r3, [r7, #4]
 8043540:	681b      	ldr	r3, [r3, #0]
 8043542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8043544:	687b      	ldr	r3, [r7, #4]
 8043546:	4a40      	ldr	r2, [pc, #256]	; (8043648 <TIM_Base_SetConfig+0x114>)
 8043548:	4293      	cmp	r3, r2
 804354a:	d013      	beq.n	8043574 <TIM_Base_SetConfig+0x40>
 804354c:	687b      	ldr	r3, [r7, #4]
 804354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043552:	d00f      	beq.n	8043574 <TIM_Base_SetConfig+0x40>
 8043554:	687b      	ldr	r3, [r7, #4]
 8043556:	4a3d      	ldr	r2, [pc, #244]	; (804364c <TIM_Base_SetConfig+0x118>)
 8043558:	4293      	cmp	r3, r2
 804355a:	d00b      	beq.n	8043574 <TIM_Base_SetConfig+0x40>
 804355c:	687b      	ldr	r3, [r7, #4]
 804355e:	4a3c      	ldr	r2, [pc, #240]	; (8043650 <TIM_Base_SetConfig+0x11c>)
 8043560:	4293      	cmp	r3, r2
 8043562:	d007      	beq.n	8043574 <TIM_Base_SetConfig+0x40>
 8043564:	687b      	ldr	r3, [r7, #4]
 8043566:	4a3b      	ldr	r2, [pc, #236]	; (8043654 <TIM_Base_SetConfig+0x120>)
 8043568:	4293      	cmp	r3, r2
 804356a:	d003      	beq.n	8043574 <TIM_Base_SetConfig+0x40>
 804356c:	687b      	ldr	r3, [r7, #4]
 804356e:	4a3a      	ldr	r2, [pc, #232]	; (8043658 <TIM_Base_SetConfig+0x124>)
 8043570:	4293      	cmp	r3, r2
 8043572:	d108      	bne.n	8043586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8043574:	68fb      	ldr	r3, [r7, #12]
 8043576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804357c:	683b      	ldr	r3, [r7, #0]
 804357e:	685b      	ldr	r3, [r3, #4]
 8043580:	68fa      	ldr	r2, [r7, #12]
 8043582:	4313      	orrs	r3, r2
 8043584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8043586:	687b      	ldr	r3, [r7, #4]
 8043588:	4a2f      	ldr	r2, [pc, #188]	; (8043648 <TIM_Base_SetConfig+0x114>)
 804358a:	4293      	cmp	r3, r2
 804358c:	d02b      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 804358e:	687b      	ldr	r3, [r7, #4]
 8043590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043594:	d027      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 8043596:	687b      	ldr	r3, [r7, #4]
 8043598:	4a2c      	ldr	r2, [pc, #176]	; (804364c <TIM_Base_SetConfig+0x118>)
 804359a:	4293      	cmp	r3, r2
 804359c:	d023      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 804359e:	687b      	ldr	r3, [r7, #4]
 80435a0:	4a2b      	ldr	r2, [pc, #172]	; (8043650 <TIM_Base_SetConfig+0x11c>)
 80435a2:	4293      	cmp	r3, r2
 80435a4:	d01f      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435a6:	687b      	ldr	r3, [r7, #4]
 80435a8:	4a2a      	ldr	r2, [pc, #168]	; (8043654 <TIM_Base_SetConfig+0x120>)
 80435aa:	4293      	cmp	r3, r2
 80435ac:	d01b      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435ae:	687b      	ldr	r3, [r7, #4]
 80435b0:	4a29      	ldr	r2, [pc, #164]	; (8043658 <TIM_Base_SetConfig+0x124>)
 80435b2:	4293      	cmp	r3, r2
 80435b4:	d017      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435b6:	687b      	ldr	r3, [r7, #4]
 80435b8:	4a28      	ldr	r2, [pc, #160]	; (804365c <TIM_Base_SetConfig+0x128>)
 80435ba:	4293      	cmp	r3, r2
 80435bc:	d013      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435be:	687b      	ldr	r3, [r7, #4]
 80435c0:	4a27      	ldr	r2, [pc, #156]	; (8043660 <TIM_Base_SetConfig+0x12c>)
 80435c2:	4293      	cmp	r3, r2
 80435c4:	d00f      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435c6:	687b      	ldr	r3, [r7, #4]
 80435c8:	4a26      	ldr	r2, [pc, #152]	; (8043664 <TIM_Base_SetConfig+0x130>)
 80435ca:	4293      	cmp	r3, r2
 80435cc:	d00b      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435ce:	687b      	ldr	r3, [r7, #4]
 80435d0:	4a25      	ldr	r2, [pc, #148]	; (8043668 <TIM_Base_SetConfig+0x134>)
 80435d2:	4293      	cmp	r3, r2
 80435d4:	d007      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435d6:	687b      	ldr	r3, [r7, #4]
 80435d8:	4a24      	ldr	r2, [pc, #144]	; (804366c <TIM_Base_SetConfig+0x138>)
 80435da:	4293      	cmp	r3, r2
 80435dc:	d003      	beq.n	80435e6 <TIM_Base_SetConfig+0xb2>
 80435de:	687b      	ldr	r3, [r7, #4]
 80435e0:	4a23      	ldr	r2, [pc, #140]	; (8043670 <TIM_Base_SetConfig+0x13c>)
 80435e2:	4293      	cmp	r3, r2
 80435e4:	d108      	bne.n	80435f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80435e6:	68fb      	ldr	r3, [r7, #12]
 80435e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80435ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80435ee:	683b      	ldr	r3, [r7, #0]
 80435f0:	68db      	ldr	r3, [r3, #12]
 80435f2:	68fa      	ldr	r2, [r7, #12]
 80435f4:	4313      	orrs	r3, r2
 80435f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80435f8:	68fb      	ldr	r3, [r7, #12]
 80435fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80435fe:	683b      	ldr	r3, [r7, #0]
 8043600:	695b      	ldr	r3, [r3, #20]
 8043602:	4313      	orrs	r3, r2
 8043604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8043606:	687b      	ldr	r3, [r7, #4]
 8043608:	68fa      	ldr	r2, [r7, #12]
 804360a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 804360c:	683b      	ldr	r3, [r7, #0]
 804360e:	689a      	ldr	r2, [r3, #8]
 8043610:	687b      	ldr	r3, [r7, #4]
 8043612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8043614:	683b      	ldr	r3, [r7, #0]
 8043616:	681a      	ldr	r2, [r3, #0]
 8043618:	687b      	ldr	r3, [r7, #4]
 804361a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 804361c:	687b      	ldr	r3, [r7, #4]
 804361e:	4a0a      	ldr	r2, [pc, #40]	; (8043648 <TIM_Base_SetConfig+0x114>)
 8043620:	4293      	cmp	r3, r2
 8043622:	d003      	beq.n	804362c <TIM_Base_SetConfig+0xf8>
 8043624:	687b      	ldr	r3, [r7, #4]
 8043626:	4a0c      	ldr	r2, [pc, #48]	; (8043658 <TIM_Base_SetConfig+0x124>)
 8043628:	4293      	cmp	r3, r2
 804362a:	d103      	bne.n	8043634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 804362c:	683b      	ldr	r3, [r7, #0]
 804362e:	691a      	ldr	r2, [r3, #16]
 8043630:	687b      	ldr	r3, [r7, #4]
 8043632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8043634:	687b      	ldr	r3, [r7, #4]
 8043636:	2201      	movs	r2, #1
 8043638:	615a      	str	r2, [r3, #20]
}
 804363a:	bf00      	nop
 804363c:	3714      	adds	r7, #20
 804363e:	46bd      	mov	sp, r7
 8043640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043644:	4770      	bx	lr
 8043646:	bf00      	nop
 8043648:	40010000 	.word	0x40010000
 804364c:	40000400 	.word	0x40000400
 8043650:	40000800 	.word	0x40000800
 8043654:	40000c00 	.word	0x40000c00
 8043658:	40010400 	.word	0x40010400
 804365c:	40014000 	.word	0x40014000
 8043660:	40014400 	.word	0x40014400
 8043664:	40014800 	.word	0x40014800
 8043668:	40001800 	.word	0x40001800
 804366c:	40001c00 	.word	0x40001c00
 8043670:	40002000 	.word	0x40002000

08043674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8043674:	b480      	push	{r7}
 8043676:	b083      	sub	sp, #12
 8043678:	af00      	add	r7, sp, #0
 804367a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 804367c:	bf00      	nop
 804367e:	370c      	adds	r7, #12
 8043680:	46bd      	mov	sp, r7
 8043682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043686:	4770      	bx	lr

08043688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8043688:	b480      	push	{r7}
 804368a:	b083      	sub	sp, #12
 804368c:	af00      	add	r7, sp, #0
 804368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8043690:	bf00      	nop
 8043692:	370c      	adds	r7, #12
 8043694:	46bd      	mov	sp, r7
 8043696:	f85d 7b04 	ldr.w	r7, [sp], #4
 804369a:	4770      	bx	lr

0804369c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 804369c:	b480      	push	{r7}
 804369e:	b083      	sub	sp, #12
 80436a0:	af00      	add	r7, sp, #0
 80436a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80436a4:	bf00      	nop
 80436a6:	370c      	adds	r7, #12
 80436a8:	46bd      	mov	sp, r7
 80436aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80436ae:	4770      	bx	lr

080436b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80436b0:	b580      	push	{r7, lr}
 80436b2:	b082      	sub	sp, #8
 80436b4:	af00      	add	r7, sp, #0
 80436b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80436b8:	687b      	ldr	r3, [r7, #4]
 80436ba:	2b00      	cmp	r3, #0
 80436bc:	d101      	bne.n	80436c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80436be:	2301      	movs	r3, #1
 80436c0:	e040      	b.n	8043744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80436c2:	687b      	ldr	r3, [r7, #4]
 80436c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80436c6:	2b00      	cmp	r3, #0
 80436c8:	d106      	bne.n	80436d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80436ca:	687b      	ldr	r3, [r7, #4]
 80436cc:	2200      	movs	r2, #0
 80436ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80436d2:	6878      	ldr	r0, [r7, #4]
 80436d4:	f7fd fbd2 	bl	8040e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80436d8:	687b      	ldr	r3, [r7, #4]
 80436da:	2224      	movs	r2, #36	; 0x24
 80436dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80436de:	687b      	ldr	r3, [r7, #4]
 80436e0:	681b      	ldr	r3, [r3, #0]
 80436e2:	681a      	ldr	r2, [r3, #0]
 80436e4:	687b      	ldr	r3, [r7, #4]
 80436e6:	681b      	ldr	r3, [r3, #0]
 80436e8:	f022 0201 	bic.w	r2, r2, #1
 80436ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80436ee:	6878      	ldr	r0, [r7, #4]
 80436f0:	f000 fbc4 	bl	8043e7c <UART_SetConfig>
 80436f4:	4603      	mov	r3, r0
 80436f6:	2b01      	cmp	r3, #1
 80436f8:	d101      	bne.n	80436fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80436fa:	2301      	movs	r3, #1
 80436fc:	e022      	b.n	8043744 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80436fe:	687b      	ldr	r3, [r7, #4]
 8043700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043702:	2b00      	cmp	r3, #0
 8043704:	d002      	beq.n	804370c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8043706:	6878      	ldr	r0, [r7, #4]
 8043708:	f000 fe1c 	bl	8044344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804370c:	687b      	ldr	r3, [r7, #4]
 804370e:	681b      	ldr	r3, [r3, #0]
 8043710:	685a      	ldr	r2, [r3, #4]
 8043712:	687b      	ldr	r3, [r7, #4]
 8043714:	681b      	ldr	r3, [r3, #0]
 8043716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804371a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804371c:	687b      	ldr	r3, [r7, #4]
 804371e:	681b      	ldr	r3, [r3, #0]
 8043720:	689a      	ldr	r2, [r3, #8]
 8043722:	687b      	ldr	r3, [r7, #4]
 8043724:	681b      	ldr	r3, [r3, #0]
 8043726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804372a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804372c:	687b      	ldr	r3, [r7, #4]
 804372e:	681b      	ldr	r3, [r3, #0]
 8043730:	681a      	ldr	r2, [r3, #0]
 8043732:	687b      	ldr	r3, [r7, #4]
 8043734:	681b      	ldr	r3, [r3, #0]
 8043736:	f042 0201 	orr.w	r2, r2, #1
 804373a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804373c:	6878      	ldr	r0, [r7, #4]
 804373e:	f000 fea3 	bl	8044488 <UART_CheckIdleState>
 8043742:	4603      	mov	r3, r0
}
 8043744:	4618      	mov	r0, r3
 8043746:	3708      	adds	r7, #8
 8043748:	46bd      	mov	sp, r7
 804374a:	bd80      	pop	{r7, pc}

0804374c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 804374c:	b580      	push	{r7, lr}
 804374e:	b08a      	sub	sp, #40	; 0x28
 8043750:	af00      	add	r7, sp, #0
 8043752:	60f8      	str	r0, [r7, #12]
 8043754:	60b9      	str	r1, [r7, #8]
 8043756:	4613      	mov	r3, r2
 8043758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804375a:	68fb      	ldr	r3, [r7, #12]
 804375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804375e:	2b20      	cmp	r3, #32
 8043760:	d165      	bne.n	804382e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8043762:	68bb      	ldr	r3, [r7, #8]
 8043764:	2b00      	cmp	r3, #0
 8043766:	d002      	beq.n	804376e <HAL_UART_Transmit_DMA+0x22>
 8043768:	88fb      	ldrh	r3, [r7, #6]
 804376a:	2b00      	cmp	r3, #0
 804376c:	d101      	bne.n	8043772 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 804376e:	2301      	movs	r3, #1
 8043770:	e05e      	b.n	8043830 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8043772:	68fb      	ldr	r3, [r7, #12]
 8043774:	68ba      	ldr	r2, [r7, #8]
 8043776:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8043778:	68fb      	ldr	r3, [r7, #12]
 804377a:	88fa      	ldrh	r2, [r7, #6]
 804377c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8043780:	68fb      	ldr	r3, [r7, #12]
 8043782:	88fa      	ldrh	r2, [r7, #6]
 8043784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043788:	68fb      	ldr	r3, [r7, #12]
 804378a:	2200      	movs	r2, #0
 804378c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8043790:	68fb      	ldr	r3, [r7, #12]
 8043792:	2221      	movs	r2, #33	; 0x21
 8043794:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8043796:	68fb      	ldr	r3, [r7, #12]
 8043798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804379a:	2b00      	cmp	r3, #0
 804379c:	d027      	beq.n	80437ee <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 804379e:	68fb      	ldr	r3, [r7, #12]
 80437a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80437a2:	4a25      	ldr	r2, [pc, #148]	; (8043838 <HAL_UART_Transmit_DMA+0xec>)
 80437a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80437a6:	68fb      	ldr	r3, [r7, #12]
 80437a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80437aa:	4a24      	ldr	r2, [pc, #144]	; (804383c <HAL_UART_Transmit_DMA+0xf0>)
 80437ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80437ae:	68fb      	ldr	r3, [r7, #12]
 80437b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80437b2:	4a23      	ldr	r2, [pc, #140]	; (8043840 <HAL_UART_Transmit_DMA+0xf4>)
 80437b4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80437b6:	68fb      	ldr	r3, [r7, #12]
 80437b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80437ba:	2200      	movs	r2, #0
 80437bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80437be:	68fb      	ldr	r3, [r7, #12]
 80437c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80437c2:	68fb      	ldr	r3, [r7, #12]
 80437c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80437c6:	4619      	mov	r1, r3
 80437c8:	68fb      	ldr	r3, [r7, #12]
 80437ca:	681b      	ldr	r3, [r3, #0]
 80437cc:	3328      	adds	r3, #40	; 0x28
 80437ce:	461a      	mov	r2, r3
 80437d0:	88fb      	ldrh	r3, [r7, #6]
 80437d2:	f7fd fe05 	bl	80413e0 <HAL_DMA_Start_IT>
 80437d6:	4603      	mov	r3, r0
 80437d8:	2b00      	cmp	r3, #0
 80437da:	d008      	beq.n	80437ee <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80437dc:	68fb      	ldr	r3, [r7, #12]
 80437de:	2210      	movs	r2, #16
 80437e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80437e4:	68fb      	ldr	r3, [r7, #12]
 80437e6:	2220      	movs	r2, #32
 80437e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80437ea:	2301      	movs	r3, #1
 80437ec:	e020      	b.n	8043830 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80437ee:	68fb      	ldr	r3, [r7, #12]
 80437f0:	681b      	ldr	r3, [r3, #0]
 80437f2:	2240      	movs	r2, #64	; 0x40
 80437f4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80437f6:	68fb      	ldr	r3, [r7, #12]
 80437f8:	681b      	ldr	r3, [r3, #0]
 80437fa:	3308      	adds	r3, #8
 80437fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80437fe:	697b      	ldr	r3, [r7, #20]
 8043800:	e853 3f00 	ldrex	r3, [r3]
 8043804:	613b      	str	r3, [r7, #16]
   return(result);
 8043806:	693b      	ldr	r3, [r7, #16]
 8043808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804380c:	627b      	str	r3, [r7, #36]	; 0x24
 804380e:	68fb      	ldr	r3, [r7, #12]
 8043810:	681b      	ldr	r3, [r3, #0]
 8043812:	3308      	adds	r3, #8
 8043814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8043816:	623a      	str	r2, [r7, #32]
 8043818:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804381a:	69f9      	ldr	r1, [r7, #28]
 804381c:	6a3a      	ldr	r2, [r7, #32]
 804381e:	e841 2300 	strex	r3, r2, [r1]
 8043822:	61bb      	str	r3, [r7, #24]
   return(result);
 8043824:	69bb      	ldr	r3, [r7, #24]
 8043826:	2b00      	cmp	r3, #0
 8043828:	d1e5      	bne.n	80437f6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 804382a:	2300      	movs	r3, #0
 804382c:	e000      	b.n	8043830 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 804382e:	2302      	movs	r3, #2
  }
}
 8043830:	4618      	mov	r0, r3
 8043832:	3728      	adds	r7, #40	; 0x28
 8043834:	46bd      	mov	sp, r7
 8043836:	bd80      	pop	{r7, pc}
 8043838:	080447c3 	.word	0x080447c3
 804383c:	08044859 	.word	0x08044859
 8043840:	08044875 	.word	0x08044875

08043844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8043844:	b580      	push	{r7, lr}
 8043846:	b0ba      	sub	sp, #232	; 0xe8
 8043848:	af00      	add	r7, sp, #0
 804384a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 804384c:	687b      	ldr	r3, [r7, #4]
 804384e:	681b      	ldr	r3, [r3, #0]
 8043850:	69db      	ldr	r3, [r3, #28]
 8043852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8043856:	687b      	ldr	r3, [r7, #4]
 8043858:	681b      	ldr	r3, [r3, #0]
 804385a:	681b      	ldr	r3, [r3, #0]
 804385c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8043860:	687b      	ldr	r3, [r7, #4]
 8043862:	681b      	ldr	r3, [r3, #0]
 8043864:	689b      	ldr	r3, [r3, #8]
 8043866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 804386a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 804386e:	f640 030f 	movw	r3, #2063	; 0x80f
 8043872:	4013      	ands	r3, r2
 8043874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8043878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 804387c:	2b00      	cmp	r3, #0
 804387e:	d115      	bne.n	80438ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8043880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043884:	f003 0320 	and.w	r3, r3, #32
 8043888:	2b00      	cmp	r3, #0
 804388a:	d00f      	beq.n	80438ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 804388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8043890:	f003 0320 	and.w	r3, r3, #32
 8043894:	2b00      	cmp	r3, #0
 8043896:	d009      	beq.n	80438ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8043898:	687b      	ldr	r3, [r7, #4]
 804389a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804389c:	2b00      	cmp	r3, #0
 804389e:	f000 82ac 	beq.w	8043dfa <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80438a2:	687b      	ldr	r3, [r7, #4]
 80438a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80438a6:	6878      	ldr	r0, [r7, #4]
 80438a8:	4798      	blx	r3
      }
      return;
 80438aa:	e2a6      	b.n	8043dfa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80438ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80438b0:	2b00      	cmp	r3, #0
 80438b2:	f000 8117 	beq.w	8043ae4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80438b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80438ba:	f003 0301 	and.w	r3, r3, #1
 80438be:	2b00      	cmp	r3, #0
 80438c0:	d106      	bne.n	80438d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80438c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80438c6:	4b85      	ldr	r3, [pc, #532]	; (8043adc <HAL_UART_IRQHandler+0x298>)
 80438c8:	4013      	ands	r3, r2
 80438ca:	2b00      	cmp	r3, #0
 80438cc:	f000 810a 	beq.w	8043ae4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80438d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80438d4:	f003 0301 	and.w	r3, r3, #1
 80438d8:	2b00      	cmp	r3, #0
 80438da:	d011      	beq.n	8043900 <HAL_UART_IRQHandler+0xbc>
 80438dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80438e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80438e4:	2b00      	cmp	r3, #0
 80438e6:	d00b      	beq.n	8043900 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80438e8:	687b      	ldr	r3, [r7, #4]
 80438ea:	681b      	ldr	r3, [r3, #0]
 80438ec:	2201      	movs	r2, #1
 80438ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80438f0:	687b      	ldr	r3, [r7, #4]
 80438f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80438f6:	f043 0201 	orr.w	r2, r3, #1
 80438fa:	687b      	ldr	r3, [r7, #4]
 80438fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8043900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043904:	f003 0302 	and.w	r3, r3, #2
 8043908:	2b00      	cmp	r3, #0
 804390a:	d011      	beq.n	8043930 <HAL_UART_IRQHandler+0xec>
 804390c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8043910:	f003 0301 	and.w	r3, r3, #1
 8043914:	2b00      	cmp	r3, #0
 8043916:	d00b      	beq.n	8043930 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8043918:	687b      	ldr	r3, [r7, #4]
 804391a:	681b      	ldr	r3, [r3, #0]
 804391c:	2202      	movs	r2, #2
 804391e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8043920:	687b      	ldr	r3, [r7, #4]
 8043922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043926:	f043 0204 	orr.w	r2, r3, #4
 804392a:	687b      	ldr	r3, [r7, #4]
 804392c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8043930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043934:	f003 0304 	and.w	r3, r3, #4
 8043938:	2b00      	cmp	r3, #0
 804393a:	d011      	beq.n	8043960 <HAL_UART_IRQHandler+0x11c>
 804393c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8043940:	f003 0301 	and.w	r3, r3, #1
 8043944:	2b00      	cmp	r3, #0
 8043946:	d00b      	beq.n	8043960 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8043948:	687b      	ldr	r3, [r7, #4]
 804394a:	681b      	ldr	r3, [r3, #0]
 804394c:	2204      	movs	r2, #4
 804394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8043950:	687b      	ldr	r3, [r7, #4]
 8043952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043956:	f043 0202 	orr.w	r2, r3, #2
 804395a:	687b      	ldr	r3, [r7, #4]
 804395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8043960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043964:	f003 0308 	and.w	r3, r3, #8
 8043968:	2b00      	cmp	r3, #0
 804396a:	d017      	beq.n	804399c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 804396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8043970:	f003 0320 	and.w	r3, r3, #32
 8043974:	2b00      	cmp	r3, #0
 8043976:	d105      	bne.n	8043984 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8043978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 804397c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8043980:	2b00      	cmp	r3, #0
 8043982:	d00b      	beq.n	804399c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8043984:	687b      	ldr	r3, [r7, #4]
 8043986:	681b      	ldr	r3, [r3, #0]
 8043988:	2208      	movs	r2, #8
 804398a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 804398c:	687b      	ldr	r3, [r7, #4]
 804398e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043992:	f043 0208 	orr.w	r2, r3, #8
 8043996:	687b      	ldr	r3, [r7, #4]
 8043998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 804399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80439a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80439a4:	2b00      	cmp	r3, #0
 80439a6:	d012      	beq.n	80439ce <HAL_UART_IRQHandler+0x18a>
 80439a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80439ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80439b0:	2b00      	cmp	r3, #0
 80439b2:	d00c      	beq.n	80439ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80439b4:	687b      	ldr	r3, [r7, #4]
 80439b6:	681b      	ldr	r3, [r3, #0]
 80439b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80439bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80439be:	687b      	ldr	r3, [r7, #4]
 80439c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80439c4:	f043 0220 	orr.w	r2, r3, #32
 80439c8:	687b      	ldr	r3, [r7, #4]
 80439ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80439ce:	687b      	ldr	r3, [r7, #4]
 80439d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80439d4:	2b00      	cmp	r3, #0
 80439d6:	f000 8212 	beq.w	8043dfe <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80439da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80439de:	f003 0320 	and.w	r3, r3, #32
 80439e2:	2b00      	cmp	r3, #0
 80439e4:	d00d      	beq.n	8043a02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80439e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80439ea:	f003 0320 	and.w	r3, r3, #32
 80439ee:	2b00      	cmp	r3, #0
 80439f0:	d007      	beq.n	8043a02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80439f2:	687b      	ldr	r3, [r7, #4]
 80439f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80439f6:	2b00      	cmp	r3, #0
 80439f8:	d003      	beq.n	8043a02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80439fe:	6878      	ldr	r0, [r7, #4]
 8043a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8043a02:	687b      	ldr	r3, [r7, #4]
 8043a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8043a0c:	687b      	ldr	r3, [r7, #4]
 8043a0e:	681b      	ldr	r3, [r3, #0]
 8043a10:	689b      	ldr	r3, [r3, #8]
 8043a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043a16:	2b40      	cmp	r3, #64	; 0x40
 8043a18:	d005      	beq.n	8043a26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8043a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8043a1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8043a22:	2b00      	cmp	r3, #0
 8043a24:	d04f      	beq.n	8043ac6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8043a26:	6878      	ldr	r0, [r7, #4]
 8043a28:	f000 fe67 	bl	80446fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043a2c:	687b      	ldr	r3, [r7, #4]
 8043a2e:	681b      	ldr	r3, [r3, #0]
 8043a30:	689b      	ldr	r3, [r3, #8]
 8043a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043a36:	2b40      	cmp	r3, #64	; 0x40
 8043a38:	d141      	bne.n	8043abe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8043a3a:	687b      	ldr	r3, [r7, #4]
 8043a3c:	681b      	ldr	r3, [r3, #0]
 8043a3e:	3308      	adds	r3, #8
 8043a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8043a48:	e853 3f00 	ldrex	r3, [r3]
 8043a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8043a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8043a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8043a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8043a5c:	687b      	ldr	r3, [r7, #4]
 8043a5e:	681b      	ldr	r3, [r3, #0]
 8043a60:	3308      	adds	r3, #8
 8043a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8043a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8043a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8043a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8043a76:	e841 2300 	strex	r3, r2, [r1]
 8043a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8043a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8043a82:	2b00      	cmp	r3, #0
 8043a84:	d1d9      	bne.n	8043a3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8043a86:	687b      	ldr	r3, [r7, #4]
 8043a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043a8a:	2b00      	cmp	r3, #0
 8043a8c:	d013      	beq.n	8043ab6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8043a8e:	687b      	ldr	r3, [r7, #4]
 8043a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043a92:	4a13      	ldr	r2, [pc, #76]	; (8043ae0 <HAL_UART_IRQHandler+0x29c>)
 8043a94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8043a96:	687b      	ldr	r3, [r7, #4]
 8043a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043a9a:	4618      	mov	r0, r3
 8043a9c:	f7fd fd70 	bl	8041580 <HAL_DMA_Abort_IT>
 8043aa0:	4603      	mov	r3, r0
 8043aa2:	2b00      	cmp	r3, #0
 8043aa4:	d017      	beq.n	8043ad6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8043aa6:	687b      	ldr	r3, [r7, #4]
 8043aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043aac:	687a      	ldr	r2, [r7, #4]
 8043aae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8043ab0:	4610      	mov	r0, r2
 8043ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043ab4:	e00f      	b.n	8043ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8043ab6:	6878      	ldr	r0, [r7, #4]
 8043ab8:	f000 f9c0 	bl	8043e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043abc:	e00b      	b.n	8043ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8043abe:	6878      	ldr	r0, [r7, #4]
 8043ac0:	f000 f9bc 	bl	8043e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043ac4:	e007      	b.n	8043ad6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8043ac6:	6878      	ldr	r0, [r7, #4]
 8043ac8:	f000 f9b8 	bl	8043e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043acc:	687b      	ldr	r3, [r7, #4]
 8043ace:	2200      	movs	r2, #0
 8043ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8043ad4:	e193      	b.n	8043dfe <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043ad6:	bf00      	nop
    return;
 8043ad8:	e191      	b.n	8043dfe <HAL_UART_IRQHandler+0x5ba>
 8043ada:	bf00      	nop
 8043adc:	04000120 	.word	0x04000120
 8043ae0:	080448f3 	.word	0x080448f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043ae4:	687b      	ldr	r3, [r7, #4]
 8043ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043ae8:	2b01      	cmp	r3, #1
 8043aea:	f040 814c 	bne.w	8043d86 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8043aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043af2:	f003 0310 	and.w	r3, r3, #16
 8043af6:	2b00      	cmp	r3, #0
 8043af8:	f000 8145 	beq.w	8043d86 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8043afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8043b00:	f003 0310 	and.w	r3, r3, #16
 8043b04:	2b00      	cmp	r3, #0
 8043b06:	f000 813e 	beq.w	8043d86 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8043b0a:	687b      	ldr	r3, [r7, #4]
 8043b0c:	681b      	ldr	r3, [r3, #0]
 8043b0e:	2210      	movs	r2, #16
 8043b10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8043b12:	687b      	ldr	r3, [r7, #4]
 8043b14:	681b      	ldr	r3, [r3, #0]
 8043b16:	689b      	ldr	r3, [r3, #8]
 8043b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043b1c:	2b40      	cmp	r3, #64	; 0x40
 8043b1e:	f040 80b6 	bne.w	8043c8e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8043b22:	687b      	ldr	r3, [r7, #4]
 8043b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043b26:	681b      	ldr	r3, [r3, #0]
 8043b28:	685b      	ldr	r3, [r3, #4]
 8043b2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8043b2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8043b32:	2b00      	cmp	r3, #0
 8043b34:	f000 8165 	beq.w	8043e02 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8043b38:	687b      	ldr	r3, [r7, #4]
 8043b3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8043b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8043b42:	429a      	cmp	r2, r3
 8043b44:	f080 815d 	bcs.w	8043e02 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8043b48:	687b      	ldr	r3, [r7, #4]
 8043b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8043b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8043b52:	687b      	ldr	r3, [r7, #4]
 8043b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043b56:	69db      	ldr	r3, [r3, #28]
 8043b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043b5c:	f000 8086 	beq.w	8043c6c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8043b60:	687b      	ldr	r3, [r7, #4]
 8043b62:	681b      	ldr	r3, [r3, #0]
 8043b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8043b6c:	e853 3f00 	ldrex	r3, [r3]
 8043b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8043b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8043b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8043b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8043b80:	687b      	ldr	r3, [r7, #4]
 8043b82:	681b      	ldr	r3, [r3, #0]
 8043b84:	461a      	mov	r2, r3
 8043b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8043b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8043b8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8043b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8043b9a:	e841 2300 	strex	r3, r2, [r1]
 8043b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8043ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8043ba6:	2b00      	cmp	r3, #0
 8043ba8:	d1da      	bne.n	8043b60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043baa:	687b      	ldr	r3, [r7, #4]
 8043bac:	681b      	ldr	r3, [r3, #0]
 8043bae:	3308      	adds	r3, #8
 8043bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8043bb4:	e853 3f00 	ldrex	r3, [r3]
 8043bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8043bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8043bbc:	f023 0301 	bic.w	r3, r3, #1
 8043bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8043bc4:	687b      	ldr	r3, [r7, #4]
 8043bc6:	681b      	ldr	r3, [r3, #0]
 8043bc8:	3308      	adds	r3, #8
 8043bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8043bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8043bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8043bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8043bda:	e841 2300 	strex	r3, r2, [r1]
 8043bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8043be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8043be2:	2b00      	cmp	r3, #0
 8043be4:	d1e1      	bne.n	8043baa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8043be6:	687b      	ldr	r3, [r7, #4]
 8043be8:	681b      	ldr	r3, [r3, #0]
 8043bea:	3308      	adds	r3, #8
 8043bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8043bf0:	e853 3f00 	ldrex	r3, [r3]
 8043bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8043bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8043bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8043bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8043c00:	687b      	ldr	r3, [r7, #4]
 8043c02:	681b      	ldr	r3, [r3, #0]
 8043c04:	3308      	adds	r3, #8
 8043c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8043c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8043c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8043c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8043c12:	e841 2300 	strex	r3, r2, [r1]
 8043c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8043c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8043c1a:	2b00      	cmp	r3, #0
 8043c1c:	d1e3      	bne.n	8043be6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8043c1e:	687b      	ldr	r3, [r7, #4]
 8043c20:	2220      	movs	r2, #32
 8043c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043c26:	687b      	ldr	r3, [r7, #4]
 8043c28:	2200      	movs	r2, #0
 8043c2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043c2c:	687b      	ldr	r3, [r7, #4]
 8043c2e:	681b      	ldr	r3, [r3, #0]
 8043c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8043c34:	e853 3f00 	ldrex	r3, [r3]
 8043c38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8043c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8043c3c:	f023 0310 	bic.w	r3, r3, #16
 8043c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8043c44:	687b      	ldr	r3, [r7, #4]
 8043c46:	681b      	ldr	r3, [r3, #0]
 8043c48:	461a      	mov	r2, r3
 8043c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8043c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8043c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8043c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8043c56:	e841 2300 	strex	r3, r2, [r1]
 8043c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8043c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8043c5e:	2b00      	cmp	r3, #0
 8043c60:	d1e4      	bne.n	8043c2c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8043c62:	687b      	ldr	r3, [r7, #4]
 8043c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043c66:	4618      	mov	r0, r3
 8043c68:	f7fd fc1a 	bl	80414a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	2202      	movs	r2, #2
 8043c70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8043c72:	687b      	ldr	r3, [r7, #4]
 8043c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8043c78:	687b      	ldr	r3, [r7, #4]
 8043c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043c7e:	b29b      	uxth	r3, r3
 8043c80:	1ad3      	subs	r3, r2, r3
 8043c82:	b29b      	uxth	r3, r3
 8043c84:	4619      	mov	r1, r3
 8043c86:	6878      	ldr	r0, [r7, #4]
 8043c88:	f000 f8e2 	bl	8043e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8043c8c:	e0b9      	b.n	8043e02 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8043c94:	687b      	ldr	r3, [r7, #4]
 8043c96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043c9a:	b29b      	uxth	r3, r3
 8043c9c:	1ad3      	subs	r3, r2, r3
 8043c9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8043ca2:	687b      	ldr	r3, [r7, #4]
 8043ca4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8043ca8:	b29b      	uxth	r3, r3
 8043caa:	2b00      	cmp	r3, #0
 8043cac:	f000 80ab 	beq.w	8043e06 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8043cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8043cb4:	2b00      	cmp	r3, #0
 8043cb6:	f000 80a6 	beq.w	8043e06 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8043cba:	687b      	ldr	r3, [r7, #4]
 8043cbc:	681b      	ldr	r3, [r3, #0]
 8043cbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8043cc2:	e853 3f00 	ldrex	r3, [r3]
 8043cc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8043cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8043cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8043cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8043cd2:	687b      	ldr	r3, [r7, #4]
 8043cd4:	681b      	ldr	r3, [r3, #0]
 8043cd6:	461a      	mov	r2, r3
 8043cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8043cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8043cde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043ce0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8043ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8043ce4:	e841 2300 	strex	r3, r2, [r1]
 8043ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8043cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8043cec:	2b00      	cmp	r3, #0
 8043cee:	d1e4      	bne.n	8043cba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043cf0:	687b      	ldr	r3, [r7, #4]
 8043cf2:	681b      	ldr	r3, [r3, #0]
 8043cf4:	3308      	adds	r3, #8
 8043cf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043cfa:	e853 3f00 	ldrex	r3, [r3]
 8043cfe:	623b      	str	r3, [r7, #32]
   return(result);
 8043d00:	6a3b      	ldr	r3, [r7, #32]
 8043d02:	f023 0301 	bic.w	r3, r3, #1
 8043d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8043d0a:	687b      	ldr	r3, [r7, #4]
 8043d0c:	681b      	ldr	r3, [r3, #0]
 8043d0e:	3308      	adds	r3, #8
 8043d10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8043d14:	633a      	str	r2, [r7, #48]	; 0x30
 8043d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8043d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8043d1c:	e841 2300 	strex	r3, r2, [r1]
 8043d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8043d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043d24:	2b00      	cmp	r3, #0
 8043d26:	d1e3      	bne.n	8043cf0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8043d28:	687b      	ldr	r3, [r7, #4]
 8043d2a:	2220      	movs	r2, #32
 8043d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043d30:	687b      	ldr	r3, [r7, #4]
 8043d32:	2200      	movs	r2, #0
 8043d34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8043d36:	687b      	ldr	r3, [r7, #4]
 8043d38:	2200      	movs	r2, #0
 8043d3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043d3c:	687b      	ldr	r3, [r7, #4]
 8043d3e:	681b      	ldr	r3, [r3, #0]
 8043d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043d42:	693b      	ldr	r3, [r7, #16]
 8043d44:	e853 3f00 	ldrex	r3, [r3]
 8043d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8043d4a:	68fb      	ldr	r3, [r7, #12]
 8043d4c:	f023 0310 	bic.w	r3, r3, #16
 8043d50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8043d54:	687b      	ldr	r3, [r7, #4]
 8043d56:	681b      	ldr	r3, [r3, #0]
 8043d58:	461a      	mov	r2, r3
 8043d5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8043d5e:	61fb      	str	r3, [r7, #28]
 8043d60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043d62:	69b9      	ldr	r1, [r7, #24]
 8043d64:	69fa      	ldr	r2, [r7, #28]
 8043d66:	e841 2300 	strex	r3, r2, [r1]
 8043d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8043d6c:	697b      	ldr	r3, [r7, #20]
 8043d6e:	2b00      	cmp	r3, #0
 8043d70:	d1e4      	bne.n	8043d3c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8043d72:	687b      	ldr	r3, [r7, #4]
 8043d74:	2202      	movs	r2, #2
 8043d76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8043d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8043d7c:	4619      	mov	r1, r3
 8043d7e:	6878      	ldr	r0, [r7, #4]
 8043d80:	f000 f866 	bl	8043e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8043d84:	e03f      	b.n	8043e06 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8043d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043d8e:	2b00      	cmp	r3, #0
 8043d90:	d00e      	beq.n	8043db0 <HAL_UART_IRQHandler+0x56c>
 8043d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8043d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043d9a:	2b00      	cmp	r3, #0
 8043d9c:	d008      	beq.n	8043db0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8043d9e:	687b      	ldr	r3, [r7, #4]
 8043da0:	681b      	ldr	r3, [r3, #0]
 8043da2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8043da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8043da8:	6878      	ldr	r0, [r7, #4]
 8043daa:	f000 f85d 	bl	8043e68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043dae:	e02d      	b.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8043db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043db8:	2b00      	cmp	r3, #0
 8043dba:	d00e      	beq.n	8043dda <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8043dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8043dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043dc4:	2b00      	cmp	r3, #0
 8043dc6:	d008      	beq.n	8043dda <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8043dc8:	687b      	ldr	r3, [r7, #4]
 8043dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043dcc:	2b00      	cmp	r3, #0
 8043dce:	d01c      	beq.n	8043e0a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8043dd0:	687b      	ldr	r3, [r7, #4]
 8043dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043dd4:	6878      	ldr	r0, [r7, #4]
 8043dd6:	4798      	blx	r3
    }
    return;
 8043dd8:	e017      	b.n	8043e0a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8043dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8043dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043de2:	2b00      	cmp	r3, #0
 8043de4:	d012      	beq.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
 8043de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8043dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043dee:	2b00      	cmp	r3, #0
 8043df0:	d00c      	beq.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8043df2:	6878      	ldr	r0, [r7, #4]
 8043df4:	f000 fd93 	bl	804491e <UART_EndTransmit_IT>
    return;
 8043df8:	e008      	b.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8043dfa:	bf00      	nop
 8043dfc:	e006      	b.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
    return;
 8043dfe:	bf00      	nop
 8043e00:	e004      	b.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8043e02:	bf00      	nop
 8043e04:	e002      	b.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
      return;
 8043e06:	bf00      	nop
 8043e08:	e000      	b.n	8043e0c <HAL_UART_IRQHandler+0x5c8>
    return;
 8043e0a:	bf00      	nop
  }

}
 8043e0c:	37e8      	adds	r7, #232	; 0xe8
 8043e0e:	46bd      	mov	sp, r7
 8043e10:	bd80      	pop	{r7, pc}
 8043e12:	bf00      	nop

08043e14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8043e14:	b480      	push	{r7}
 8043e16:	b083      	sub	sp, #12
 8043e18:	af00      	add	r7, sp, #0
 8043e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8043e1c:	bf00      	nop
 8043e1e:	370c      	adds	r7, #12
 8043e20:	46bd      	mov	sp, r7
 8043e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e26:	4770      	bx	lr

08043e28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8043e28:	b480      	push	{r7}
 8043e2a:	b083      	sub	sp, #12
 8043e2c:	af00      	add	r7, sp, #0
 8043e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8043e30:	bf00      	nop
 8043e32:	370c      	adds	r7, #12
 8043e34:	46bd      	mov	sp, r7
 8043e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e3a:	4770      	bx	lr

08043e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8043e3c:	b480      	push	{r7}
 8043e3e:	b083      	sub	sp, #12
 8043e40:	af00      	add	r7, sp, #0
 8043e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8043e44:	bf00      	nop
 8043e46:	370c      	adds	r7, #12
 8043e48:	46bd      	mov	sp, r7
 8043e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e4e:	4770      	bx	lr

08043e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8043e50:	b480      	push	{r7}
 8043e52:	b083      	sub	sp, #12
 8043e54:	af00      	add	r7, sp, #0
 8043e56:	6078      	str	r0, [r7, #4]
 8043e58:	460b      	mov	r3, r1
 8043e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8043e5c:	bf00      	nop
 8043e5e:	370c      	adds	r7, #12
 8043e60:	46bd      	mov	sp, r7
 8043e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e66:	4770      	bx	lr

08043e68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8043e68:	b480      	push	{r7}
 8043e6a:	b083      	sub	sp, #12
 8043e6c:	af00      	add	r7, sp, #0
 8043e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8043e70:	bf00      	nop
 8043e72:	370c      	adds	r7, #12
 8043e74:	46bd      	mov	sp, r7
 8043e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e7a:	4770      	bx	lr

08043e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8043e7c:	b580      	push	{r7, lr}
 8043e7e:	b088      	sub	sp, #32
 8043e80:	af00      	add	r7, sp, #0
 8043e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8043e84:	2300      	movs	r3, #0
 8043e86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8043e88:	687b      	ldr	r3, [r7, #4]
 8043e8a:	689a      	ldr	r2, [r3, #8]
 8043e8c:	687b      	ldr	r3, [r7, #4]
 8043e8e:	691b      	ldr	r3, [r3, #16]
 8043e90:	431a      	orrs	r2, r3
 8043e92:	687b      	ldr	r3, [r7, #4]
 8043e94:	695b      	ldr	r3, [r3, #20]
 8043e96:	431a      	orrs	r2, r3
 8043e98:	687b      	ldr	r3, [r7, #4]
 8043e9a:	69db      	ldr	r3, [r3, #28]
 8043e9c:	4313      	orrs	r3, r2
 8043e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8043ea0:	687b      	ldr	r3, [r7, #4]
 8043ea2:	681b      	ldr	r3, [r3, #0]
 8043ea4:	681a      	ldr	r2, [r3, #0]
 8043ea6:	4ba6      	ldr	r3, [pc, #664]	; (8044140 <UART_SetConfig+0x2c4>)
 8043ea8:	4013      	ands	r3, r2
 8043eaa:	687a      	ldr	r2, [r7, #4]
 8043eac:	6812      	ldr	r2, [r2, #0]
 8043eae:	6979      	ldr	r1, [r7, #20]
 8043eb0:	430b      	orrs	r3, r1
 8043eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8043eb4:	687b      	ldr	r3, [r7, #4]
 8043eb6:	681b      	ldr	r3, [r3, #0]
 8043eb8:	685b      	ldr	r3, [r3, #4]
 8043eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043ebe:	687b      	ldr	r3, [r7, #4]
 8043ec0:	68da      	ldr	r2, [r3, #12]
 8043ec2:	687b      	ldr	r3, [r7, #4]
 8043ec4:	681b      	ldr	r3, [r3, #0]
 8043ec6:	430a      	orrs	r2, r1
 8043ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043eca:	687b      	ldr	r3, [r7, #4]
 8043ecc:	699b      	ldr	r3, [r3, #24]
 8043ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8043ed0:	687b      	ldr	r3, [r7, #4]
 8043ed2:	6a1b      	ldr	r3, [r3, #32]
 8043ed4:	697a      	ldr	r2, [r7, #20]
 8043ed6:	4313      	orrs	r3, r2
 8043ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8043eda:	687b      	ldr	r3, [r7, #4]
 8043edc:	681b      	ldr	r3, [r3, #0]
 8043ede:	689b      	ldr	r3, [r3, #8]
 8043ee0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8043ee4:	687b      	ldr	r3, [r7, #4]
 8043ee6:	681b      	ldr	r3, [r3, #0]
 8043ee8:	697a      	ldr	r2, [r7, #20]
 8043eea:	430a      	orrs	r2, r1
 8043eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8043eee:	687b      	ldr	r3, [r7, #4]
 8043ef0:	681b      	ldr	r3, [r3, #0]
 8043ef2:	4a94      	ldr	r2, [pc, #592]	; (8044144 <UART_SetConfig+0x2c8>)
 8043ef4:	4293      	cmp	r3, r2
 8043ef6:	d120      	bne.n	8043f3a <UART_SetConfig+0xbe>
 8043ef8:	4b93      	ldr	r3, [pc, #588]	; (8044148 <UART_SetConfig+0x2cc>)
 8043efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043efe:	f003 0303 	and.w	r3, r3, #3
 8043f02:	2b03      	cmp	r3, #3
 8043f04:	d816      	bhi.n	8043f34 <UART_SetConfig+0xb8>
 8043f06:	a201      	add	r2, pc, #4	; (adr r2, 8043f0c <UART_SetConfig+0x90>)
 8043f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043f0c:	08043f1d 	.word	0x08043f1d
 8043f10:	08043f29 	.word	0x08043f29
 8043f14:	08043f23 	.word	0x08043f23
 8043f18:	08043f2f 	.word	0x08043f2f
 8043f1c:	2301      	movs	r3, #1
 8043f1e:	77fb      	strb	r3, [r7, #31]
 8043f20:	e150      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f22:	2302      	movs	r3, #2
 8043f24:	77fb      	strb	r3, [r7, #31]
 8043f26:	e14d      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f28:	2304      	movs	r3, #4
 8043f2a:	77fb      	strb	r3, [r7, #31]
 8043f2c:	e14a      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f2e:	2308      	movs	r3, #8
 8043f30:	77fb      	strb	r3, [r7, #31]
 8043f32:	e147      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f34:	2310      	movs	r3, #16
 8043f36:	77fb      	strb	r3, [r7, #31]
 8043f38:	e144      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f3a:	687b      	ldr	r3, [r7, #4]
 8043f3c:	681b      	ldr	r3, [r3, #0]
 8043f3e:	4a83      	ldr	r2, [pc, #524]	; (804414c <UART_SetConfig+0x2d0>)
 8043f40:	4293      	cmp	r3, r2
 8043f42:	d132      	bne.n	8043faa <UART_SetConfig+0x12e>
 8043f44:	4b80      	ldr	r3, [pc, #512]	; (8044148 <UART_SetConfig+0x2cc>)
 8043f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043f4a:	f003 030c 	and.w	r3, r3, #12
 8043f4e:	2b0c      	cmp	r3, #12
 8043f50:	d828      	bhi.n	8043fa4 <UART_SetConfig+0x128>
 8043f52:	a201      	add	r2, pc, #4	; (adr r2, 8043f58 <UART_SetConfig+0xdc>)
 8043f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043f58:	08043f8d 	.word	0x08043f8d
 8043f5c:	08043fa5 	.word	0x08043fa5
 8043f60:	08043fa5 	.word	0x08043fa5
 8043f64:	08043fa5 	.word	0x08043fa5
 8043f68:	08043f99 	.word	0x08043f99
 8043f6c:	08043fa5 	.word	0x08043fa5
 8043f70:	08043fa5 	.word	0x08043fa5
 8043f74:	08043fa5 	.word	0x08043fa5
 8043f78:	08043f93 	.word	0x08043f93
 8043f7c:	08043fa5 	.word	0x08043fa5
 8043f80:	08043fa5 	.word	0x08043fa5
 8043f84:	08043fa5 	.word	0x08043fa5
 8043f88:	08043f9f 	.word	0x08043f9f
 8043f8c:	2300      	movs	r3, #0
 8043f8e:	77fb      	strb	r3, [r7, #31]
 8043f90:	e118      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f92:	2302      	movs	r3, #2
 8043f94:	77fb      	strb	r3, [r7, #31]
 8043f96:	e115      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f98:	2304      	movs	r3, #4
 8043f9a:	77fb      	strb	r3, [r7, #31]
 8043f9c:	e112      	b.n	80441c4 <UART_SetConfig+0x348>
 8043f9e:	2308      	movs	r3, #8
 8043fa0:	77fb      	strb	r3, [r7, #31]
 8043fa2:	e10f      	b.n	80441c4 <UART_SetConfig+0x348>
 8043fa4:	2310      	movs	r3, #16
 8043fa6:	77fb      	strb	r3, [r7, #31]
 8043fa8:	e10c      	b.n	80441c4 <UART_SetConfig+0x348>
 8043faa:	687b      	ldr	r3, [r7, #4]
 8043fac:	681b      	ldr	r3, [r3, #0]
 8043fae:	4a68      	ldr	r2, [pc, #416]	; (8044150 <UART_SetConfig+0x2d4>)
 8043fb0:	4293      	cmp	r3, r2
 8043fb2:	d120      	bne.n	8043ff6 <UART_SetConfig+0x17a>
 8043fb4:	4b64      	ldr	r3, [pc, #400]	; (8044148 <UART_SetConfig+0x2cc>)
 8043fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043fba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8043fbe:	2b30      	cmp	r3, #48	; 0x30
 8043fc0:	d013      	beq.n	8043fea <UART_SetConfig+0x16e>
 8043fc2:	2b30      	cmp	r3, #48	; 0x30
 8043fc4:	d814      	bhi.n	8043ff0 <UART_SetConfig+0x174>
 8043fc6:	2b20      	cmp	r3, #32
 8043fc8:	d009      	beq.n	8043fde <UART_SetConfig+0x162>
 8043fca:	2b20      	cmp	r3, #32
 8043fcc:	d810      	bhi.n	8043ff0 <UART_SetConfig+0x174>
 8043fce:	2b00      	cmp	r3, #0
 8043fd0:	d002      	beq.n	8043fd8 <UART_SetConfig+0x15c>
 8043fd2:	2b10      	cmp	r3, #16
 8043fd4:	d006      	beq.n	8043fe4 <UART_SetConfig+0x168>
 8043fd6:	e00b      	b.n	8043ff0 <UART_SetConfig+0x174>
 8043fd8:	2300      	movs	r3, #0
 8043fda:	77fb      	strb	r3, [r7, #31]
 8043fdc:	e0f2      	b.n	80441c4 <UART_SetConfig+0x348>
 8043fde:	2302      	movs	r3, #2
 8043fe0:	77fb      	strb	r3, [r7, #31]
 8043fe2:	e0ef      	b.n	80441c4 <UART_SetConfig+0x348>
 8043fe4:	2304      	movs	r3, #4
 8043fe6:	77fb      	strb	r3, [r7, #31]
 8043fe8:	e0ec      	b.n	80441c4 <UART_SetConfig+0x348>
 8043fea:	2308      	movs	r3, #8
 8043fec:	77fb      	strb	r3, [r7, #31]
 8043fee:	e0e9      	b.n	80441c4 <UART_SetConfig+0x348>
 8043ff0:	2310      	movs	r3, #16
 8043ff2:	77fb      	strb	r3, [r7, #31]
 8043ff4:	e0e6      	b.n	80441c4 <UART_SetConfig+0x348>
 8043ff6:	687b      	ldr	r3, [r7, #4]
 8043ff8:	681b      	ldr	r3, [r3, #0]
 8043ffa:	4a56      	ldr	r2, [pc, #344]	; (8044154 <UART_SetConfig+0x2d8>)
 8043ffc:	4293      	cmp	r3, r2
 8043ffe:	d120      	bne.n	8044042 <UART_SetConfig+0x1c6>
 8044000:	4b51      	ldr	r3, [pc, #324]	; (8044148 <UART_SetConfig+0x2cc>)
 8044002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044006:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804400a:	2bc0      	cmp	r3, #192	; 0xc0
 804400c:	d013      	beq.n	8044036 <UART_SetConfig+0x1ba>
 804400e:	2bc0      	cmp	r3, #192	; 0xc0
 8044010:	d814      	bhi.n	804403c <UART_SetConfig+0x1c0>
 8044012:	2b80      	cmp	r3, #128	; 0x80
 8044014:	d009      	beq.n	804402a <UART_SetConfig+0x1ae>
 8044016:	2b80      	cmp	r3, #128	; 0x80
 8044018:	d810      	bhi.n	804403c <UART_SetConfig+0x1c0>
 804401a:	2b00      	cmp	r3, #0
 804401c:	d002      	beq.n	8044024 <UART_SetConfig+0x1a8>
 804401e:	2b40      	cmp	r3, #64	; 0x40
 8044020:	d006      	beq.n	8044030 <UART_SetConfig+0x1b4>
 8044022:	e00b      	b.n	804403c <UART_SetConfig+0x1c0>
 8044024:	2300      	movs	r3, #0
 8044026:	77fb      	strb	r3, [r7, #31]
 8044028:	e0cc      	b.n	80441c4 <UART_SetConfig+0x348>
 804402a:	2302      	movs	r3, #2
 804402c:	77fb      	strb	r3, [r7, #31]
 804402e:	e0c9      	b.n	80441c4 <UART_SetConfig+0x348>
 8044030:	2304      	movs	r3, #4
 8044032:	77fb      	strb	r3, [r7, #31]
 8044034:	e0c6      	b.n	80441c4 <UART_SetConfig+0x348>
 8044036:	2308      	movs	r3, #8
 8044038:	77fb      	strb	r3, [r7, #31]
 804403a:	e0c3      	b.n	80441c4 <UART_SetConfig+0x348>
 804403c:	2310      	movs	r3, #16
 804403e:	77fb      	strb	r3, [r7, #31]
 8044040:	e0c0      	b.n	80441c4 <UART_SetConfig+0x348>
 8044042:	687b      	ldr	r3, [r7, #4]
 8044044:	681b      	ldr	r3, [r3, #0]
 8044046:	4a44      	ldr	r2, [pc, #272]	; (8044158 <UART_SetConfig+0x2dc>)
 8044048:	4293      	cmp	r3, r2
 804404a:	d125      	bne.n	8044098 <UART_SetConfig+0x21c>
 804404c:	4b3e      	ldr	r3, [pc, #248]	; (8044148 <UART_SetConfig+0x2cc>)
 804404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804405a:	d017      	beq.n	804408c <UART_SetConfig+0x210>
 804405c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044060:	d817      	bhi.n	8044092 <UART_SetConfig+0x216>
 8044062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044066:	d00b      	beq.n	8044080 <UART_SetConfig+0x204>
 8044068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804406c:	d811      	bhi.n	8044092 <UART_SetConfig+0x216>
 804406e:	2b00      	cmp	r3, #0
 8044070:	d003      	beq.n	804407a <UART_SetConfig+0x1fe>
 8044072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044076:	d006      	beq.n	8044086 <UART_SetConfig+0x20a>
 8044078:	e00b      	b.n	8044092 <UART_SetConfig+0x216>
 804407a:	2300      	movs	r3, #0
 804407c:	77fb      	strb	r3, [r7, #31]
 804407e:	e0a1      	b.n	80441c4 <UART_SetConfig+0x348>
 8044080:	2302      	movs	r3, #2
 8044082:	77fb      	strb	r3, [r7, #31]
 8044084:	e09e      	b.n	80441c4 <UART_SetConfig+0x348>
 8044086:	2304      	movs	r3, #4
 8044088:	77fb      	strb	r3, [r7, #31]
 804408a:	e09b      	b.n	80441c4 <UART_SetConfig+0x348>
 804408c:	2308      	movs	r3, #8
 804408e:	77fb      	strb	r3, [r7, #31]
 8044090:	e098      	b.n	80441c4 <UART_SetConfig+0x348>
 8044092:	2310      	movs	r3, #16
 8044094:	77fb      	strb	r3, [r7, #31]
 8044096:	e095      	b.n	80441c4 <UART_SetConfig+0x348>
 8044098:	687b      	ldr	r3, [r7, #4]
 804409a:	681b      	ldr	r3, [r3, #0]
 804409c:	4a2f      	ldr	r2, [pc, #188]	; (804415c <UART_SetConfig+0x2e0>)
 804409e:	4293      	cmp	r3, r2
 80440a0:	d125      	bne.n	80440ee <UART_SetConfig+0x272>
 80440a2:	4b29      	ldr	r3, [pc, #164]	; (8044148 <UART_SetConfig+0x2cc>)
 80440a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80440a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80440ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80440b0:	d017      	beq.n	80440e2 <UART_SetConfig+0x266>
 80440b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80440b6:	d817      	bhi.n	80440e8 <UART_SetConfig+0x26c>
 80440b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80440bc:	d00b      	beq.n	80440d6 <UART_SetConfig+0x25a>
 80440be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80440c2:	d811      	bhi.n	80440e8 <UART_SetConfig+0x26c>
 80440c4:	2b00      	cmp	r3, #0
 80440c6:	d003      	beq.n	80440d0 <UART_SetConfig+0x254>
 80440c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80440cc:	d006      	beq.n	80440dc <UART_SetConfig+0x260>
 80440ce:	e00b      	b.n	80440e8 <UART_SetConfig+0x26c>
 80440d0:	2301      	movs	r3, #1
 80440d2:	77fb      	strb	r3, [r7, #31]
 80440d4:	e076      	b.n	80441c4 <UART_SetConfig+0x348>
 80440d6:	2302      	movs	r3, #2
 80440d8:	77fb      	strb	r3, [r7, #31]
 80440da:	e073      	b.n	80441c4 <UART_SetConfig+0x348>
 80440dc:	2304      	movs	r3, #4
 80440de:	77fb      	strb	r3, [r7, #31]
 80440e0:	e070      	b.n	80441c4 <UART_SetConfig+0x348>
 80440e2:	2308      	movs	r3, #8
 80440e4:	77fb      	strb	r3, [r7, #31]
 80440e6:	e06d      	b.n	80441c4 <UART_SetConfig+0x348>
 80440e8:	2310      	movs	r3, #16
 80440ea:	77fb      	strb	r3, [r7, #31]
 80440ec:	e06a      	b.n	80441c4 <UART_SetConfig+0x348>
 80440ee:	687b      	ldr	r3, [r7, #4]
 80440f0:	681b      	ldr	r3, [r3, #0]
 80440f2:	4a1b      	ldr	r2, [pc, #108]	; (8044160 <UART_SetConfig+0x2e4>)
 80440f4:	4293      	cmp	r3, r2
 80440f6:	d138      	bne.n	804416a <UART_SetConfig+0x2ee>
 80440f8:	4b13      	ldr	r3, [pc, #76]	; (8044148 <UART_SetConfig+0x2cc>)
 80440fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80440fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8044102:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8044106:	d017      	beq.n	8044138 <UART_SetConfig+0x2bc>
 8044108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 804410c:	d82a      	bhi.n	8044164 <UART_SetConfig+0x2e8>
 804410e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044112:	d00b      	beq.n	804412c <UART_SetConfig+0x2b0>
 8044114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044118:	d824      	bhi.n	8044164 <UART_SetConfig+0x2e8>
 804411a:	2b00      	cmp	r3, #0
 804411c:	d003      	beq.n	8044126 <UART_SetConfig+0x2aa>
 804411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8044122:	d006      	beq.n	8044132 <UART_SetConfig+0x2b6>
 8044124:	e01e      	b.n	8044164 <UART_SetConfig+0x2e8>
 8044126:	2300      	movs	r3, #0
 8044128:	77fb      	strb	r3, [r7, #31]
 804412a:	e04b      	b.n	80441c4 <UART_SetConfig+0x348>
 804412c:	2302      	movs	r3, #2
 804412e:	77fb      	strb	r3, [r7, #31]
 8044130:	e048      	b.n	80441c4 <UART_SetConfig+0x348>
 8044132:	2304      	movs	r3, #4
 8044134:	77fb      	strb	r3, [r7, #31]
 8044136:	e045      	b.n	80441c4 <UART_SetConfig+0x348>
 8044138:	2308      	movs	r3, #8
 804413a:	77fb      	strb	r3, [r7, #31]
 804413c:	e042      	b.n	80441c4 <UART_SetConfig+0x348>
 804413e:	bf00      	nop
 8044140:	efff69f3 	.word	0xefff69f3
 8044144:	40011000 	.word	0x40011000
 8044148:	40023800 	.word	0x40023800
 804414c:	40004400 	.word	0x40004400
 8044150:	40004800 	.word	0x40004800
 8044154:	40004c00 	.word	0x40004c00
 8044158:	40005000 	.word	0x40005000
 804415c:	40011400 	.word	0x40011400
 8044160:	40007800 	.word	0x40007800
 8044164:	2310      	movs	r3, #16
 8044166:	77fb      	strb	r3, [r7, #31]
 8044168:	e02c      	b.n	80441c4 <UART_SetConfig+0x348>
 804416a:	687b      	ldr	r3, [r7, #4]
 804416c:	681b      	ldr	r3, [r3, #0]
 804416e:	4a72      	ldr	r2, [pc, #456]	; (8044338 <UART_SetConfig+0x4bc>)
 8044170:	4293      	cmp	r3, r2
 8044172:	d125      	bne.n	80441c0 <UART_SetConfig+0x344>
 8044174:	4b71      	ldr	r3, [pc, #452]	; (804433c <UART_SetConfig+0x4c0>)
 8044176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804417a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 804417e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8044182:	d017      	beq.n	80441b4 <UART_SetConfig+0x338>
 8044184:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8044188:	d817      	bhi.n	80441ba <UART_SetConfig+0x33e>
 804418a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804418e:	d00b      	beq.n	80441a8 <UART_SetConfig+0x32c>
 8044190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044194:	d811      	bhi.n	80441ba <UART_SetConfig+0x33e>
 8044196:	2b00      	cmp	r3, #0
 8044198:	d003      	beq.n	80441a2 <UART_SetConfig+0x326>
 804419a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804419e:	d006      	beq.n	80441ae <UART_SetConfig+0x332>
 80441a0:	e00b      	b.n	80441ba <UART_SetConfig+0x33e>
 80441a2:	2300      	movs	r3, #0
 80441a4:	77fb      	strb	r3, [r7, #31]
 80441a6:	e00d      	b.n	80441c4 <UART_SetConfig+0x348>
 80441a8:	2302      	movs	r3, #2
 80441aa:	77fb      	strb	r3, [r7, #31]
 80441ac:	e00a      	b.n	80441c4 <UART_SetConfig+0x348>
 80441ae:	2304      	movs	r3, #4
 80441b0:	77fb      	strb	r3, [r7, #31]
 80441b2:	e007      	b.n	80441c4 <UART_SetConfig+0x348>
 80441b4:	2308      	movs	r3, #8
 80441b6:	77fb      	strb	r3, [r7, #31]
 80441b8:	e004      	b.n	80441c4 <UART_SetConfig+0x348>
 80441ba:	2310      	movs	r3, #16
 80441bc:	77fb      	strb	r3, [r7, #31]
 80441be:	e001      	b.n	80441c4 <UART_SetConfig+0x348>
 80441c0:	2310      	movs	r3, #16
 80441c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80441c4:	687b      	ldr	r3, [r7, #4]
 80441c6:	69db      	ldr	r3, [r3, #28]
 80441c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80441cc:	d15b      	bne.n	8044286 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80441ce:	7ffb      	ldrb	r3, [r7, #31]
 80441d0:	2b08      	cmp	r3, #8
 80441d2:	d828      	bhi.n	8044226 <UART_SetConfig+0x3aa>
 80441d4:	a201      	add	r2, pc, #4	; (adr r2, 80441dc <UART_SetConfig+0x360>)
 80441d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80441da:	bf00      	nop
 80441dc:	08044201 	.word	0x08044201
 80441e0:	08044209 	.word	0x08044209
 80441e4:	08044211 	.word	0x08044211
 80441e8:	08044227 	.word	0x08044227
 80441ec:	08044217 	.word	0x08044217
 80441f0:	08044227 	.word	0x08044227
 80441f4:	08044227 	.word	0x08044227
 80441f8:	08044227 	.word	0x08044227
 80441fc:	0804421f 	.word	0x0804421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044200:	f7fe faf4 	bl	80427ec <HAL_RCC_GetPCLK1Freq>
 8044204:	61b8      	str	r0, [r7, #24]
        break;
 8044206:	e013      	b.n	8044230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044208:	f7fe fb04 	bl	8042814 <HAL_RCC_GetPCLK2Freq>
 804420c:	61b8      	str	r0, [r7, #24]
        break;
 804420e:	e00f      	b.n	8044230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8044210:	4b4b      	ldr	r3, [pc, #300]	; (8044340 <UART_SetConfig+0x4c4>)
 8044212:	61bb      	str	r3, [r7, #24]
        break;
 8044214:	e00c      	b.n	8044230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8044216:	f7fe fa17 	bl	8042648 <HAL_RCC_GetSysClockFreq>
 804421a:	61b8      	str	r0, [r7, #24]
        break;
 804421c:	e008      	b.n	8044230 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044222:	61bb      	str	r3, [r7, #24]
        break;
 8044224:	e004      	b.n	8044230 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8044226:	2300      	movs	r3, #0
 8044228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804422a:	2301      	movs	r3, #1
 804422c:	77bb      	strb	r3, [r7, #30]
        break;
 804422e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8044230:	69bb      	ldr	r3, [r7, #24]
 8044232:	2b00      	cmp	r3, #0
 8044234:	d074      	beq.n	8044320 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8044236:	69bb      	ldr	r3, [r7, #24]
 8044238:	005a      	lsls	r2, r3, #1
 804423a:	687b      	ldr	r3, [r7, #4]
 804423c:	685b      	ldr	r3, [r3, #4]
 804423e:	085b      	lsrs	r3, r3, #1
 8044240:	441a      	add	r2, r3
 8044242:	687b      	ldr	r3, [r7, #4]
 8044244:	685b      	ldr	r3, [r3, #4]
 8044246:	fbb2 f3f3 	udiv	r3, r2, r3
 804424a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804424c:	693b      	ldr	r3, [r7, #16]
 804424e:	2b0f      	cmp	r3, #15
 8044250:	d916      	bls.n	8044280 <UART_SetConfig+0x404>
 8044252:	693b      	ldr	r3, [r7, #16]
 8044254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044258:	d212      	bcs.n	8044280 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804425a:	693b      	ldr	r3, [r7, #16]
 804425c:	b29b      	uxth	r3, r3
 804425e:	f023 030f 	bic.w	r3, r3, #15
 8044262:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8044264:	693b      	ldr	r3, [r7, #16]
 8044266:	085b      	lsrs	r3, r3, #1
 8044268:	b29b      	uxth	r3, r3
 804426a:	f003 0307 	and.w	r3, r3, #7
 804426e:	b29a      	uxth	r2, r3
 8044270:	89fb      	ldrh	r3, [r7, #14]
 8044272:	4313      	orrs	r3, r2
 8044274:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8044276:	687b      	ldr	r3, [r7, #4]
 8044278:	681b      	ldr	r3, [r3, #0]
 804427a:	89fa      	ldrh	r2, [r7, #14]
 804427c:	60da      	str	r2, [r3, #12]
 804427e:	e04f      	b.n	8044320 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8044280:	2301      	movs	r3, #1
 8044282:	77bb      	strb	r3, [r7, #30]
 8044284:	e04c      	b.n	8044320 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8044286:	7ffb      	ldrb	r3, [r7, #31]
 8044288:	2b08      	cmp	r3, #8
 804428a:	d828      	bhi.n	80442de <UART_SetConfig+0x462>
 804428c:	a201      	add	r2, pc, #4	; (adr r2, 8044294 <UART_SetConfig+0x418>)
 804428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044292:	bf00      	nop
 8044294:	080442b9 	.word	0x080442b9
 8044298:	080442c1 	.word	0x080442c1
 804429c:	080442c9 	.word	0x080442c9
 80442a0:	080442df 	.word	0x080442df
 80442a4:	080442cf 	.word	0x080442cf
 80442a8:	080442df 	.word	0x080442df
 80442ac:	080442df 	.word	0x080442df
 80442b0:	080442df 	.word	0x080442df
 80442b4:	080442d7 	.word	0x080442d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80442b8:	f7fe fa98 	bl	80427ec <HAL_RCC_GetPCLK1Freq>
 80442bc:	61b8      	str	r0, [r7, #24]
        break;
 80442be:	e013      	b.n	80442e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80442c0:	f7fe faa8 	bl	8042814 <HAL_RCC_GetPCLK2Freq>
 80442c4:	61b8      	str	r0, [r7, #24]
        break;
 80442c6:	e00f      	b.n	80442e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80442c8:	4b1d      	ldr	r3, [pc, #116]	; (8044340 <UART_SetConfig+0x4c4>)
 80442ca:	61bb      	str	r3, [r7, #24]
        break;
 80442cc:	e00c      	b.n	80442e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80442ce:	f7fe f9bb 	bl	8042648 <HAL_RCC_GetSysClockFreq>
 80442d2:	61b8      	str	r0, [r7, #24]
        break;
 80442d4:	e008      	b.n	80442e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80442d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80442da:	61bb      	str	r3, [r7, #24]
        break;
 80442dc:	e004      	b.n	80442e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80442de:	2300      	movs	r3, #0
 80442e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80442e2:	2301      	movs	r3, #1
 80442e4:	77bb      	strb	r3, [r7, #30]
        break;
 80442e6:	bf00      	nop
    }

    if (pclk != 0U)
 80442e8:	69bb      	ldr	r3, [r7, #24]
 80442ea:	2b00      	cmp	r3, #0
 80442ec:	d018      	beq.n	8044320 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80442ee:	687b      	ldr	r3, [r7, #4]
 80442f0:	685b      	ldr	r3, [r3, #4]
 80442f2:	085a      	lsrs	r2, r3, #1
 80442f4:	69bb      	ldr	r3, [r7, #24]
 80442f6:	441a      	add	r2, r3
 80442f8:	687b      	ldr	r3, [r7, #4]
 80442fa:	685b      	ldr	r3, [r3, #4]
 80442fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8044300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8044302:	693b      	ldr	r3, [r7, #16]
 8044304:	2b0f      	cmp	r3, #15
 8044306:	d909      	bls.n	804431c <UART_SetConfig+0x4a0>
 8044308:	693b      	ldr	r3, [r7, #16]
 804430a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804430e:	d205      	bcs.n	804431c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8044310:	693b      	ldr	r3, [r7, #16]
 8044312:	b29a      	uxth	r2, r3
 8044314:	687b      	ldr	r3, [r7, #4]
 8044316:	681b      	ldr	r3, [r3, #0]
 8044318:	60da      	str	r2, [r3, #12]
 804431a:	e001      	b.n	8044320 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 804431c:	2301      	movs	r3, #1
 804431e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8044320:	687b      	ldr	r3, [r7, #4]
 8044322:	2200      	movs	r2, #0
 8044324:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8044326:	687b      	ldr	r3, [r7, #4]
 8044328:	2200      	movs	r2, #0
 804432a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 804432c:	7fbb      	ldrb	r3, [r7, #30]
}
 804432e:	4618      	mov	r0, r3
 8044330:	3720      	adds	r7, #32
 8044332:	46bd      	mov	sp, r7
 8044334:	bd80      	pop	{r7, pc}
 8044336:	bf00      	nop
 8044338:	40007c00 	.word	0x40007c00
 804433c:	40023800 	.word	0x40023800
 8044340:	00f42400 	.word	0x00f42400

08044344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8044344:	b480      	push	{r7}
 8044346:	b083      	sub	sp, #12
 8044348:	af00      	add	r7, sp, #0
 804434a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 804434c:	687b      	ldr	r3, [r7, #4]
 804434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044350:	f003 0301 	and.w	r3, r3, #1
 8044354:	2b00      	cmp	r3, #0
 8044356:	d00a      	beq.n	804436e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8044358:	687b      	ldr	r3, [r7, #4]
 804435a:	681b      	ldr	r3, [r3, #0]
 804435c:	685b      	ldr	r3, [r3, #4]
 804435e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8044362:	687b      	ldr	r3, [r7, #4]
 8044364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8044366:	687b      	ldr	r3, [r7, #4]
 8044368:	681b      	ldr	r3, [r3, #0]
 804436a:	430a      	orrs	r2, r1
 804436c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804436e:	687b      	ldr	r3, [r7, #4]
 8044370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044372:	f003 0302 	and.w	r3, r3, #2
 8044376:	2b00      	cmp	r3, #0
 8044378:	d00a      	beq.n	8044390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804437a:	687b      	ldr	r3, [r7, #4]
 804437c:	681b      	ldr	r3, [r3, #0]
 804437e:	685b      	ldr	r3, [r3, #4]
 8044380:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8044384:	687b      	ldr	r3, [r7, #4]
 8044386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044388:	687b      	ldr	r3, [r7, #4]
 804438a:	681b      	ldr	r3, [r3, #0]
 804438c:	430a      	orrs	r2, r1
 804438e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8044390:	687b      	ldr	r3, [r7, #4]
 8044392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044394:	f003 0304 	and.w	r3, r3, #4
 8044398:	2b00      	cmp	r3, #0
 804439a:	d00a      	beq.n	80443b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804439c:	687b      	ldr	r3, [r7, #4]
 804439e:	681b      	ldr	r3, [r3, #0]
 80443a0:	685b      	ldr	r3, [r3, #4]
 80443a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80443a6:	687b      	ldr	r3, [r7, #4]
 80443a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80443aa:	687b      	ldr	r3, [r7, #4]
 80443ac:	681b      	ldr	r3, [r3, #0]
 80443ae:	430a      	orrs	r2, r1
 80443b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80443b2:	687b      	ldr	r3, [r7, #4]
 80443b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80443b6:	f003 0308 	and.w	r3, r3, #8
 80443ba:	2b00      	cmp	r3, #0
 80443bc:	d00a      	beq.n	80443d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80443be:	687b      	ldr	r3, [r7, #4]
 80443c0:	681b      	ldr	r3, [r3, #0]
 80443c2:	685b      	ldr	r3, [r3, #4]
 80443c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80443c8:	687b      	ldr	r3, [r7, #4]
 80443ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80443cc:	687b      	ldr	r3, [r7, #4]
 80443ce:	681b      	ldr	r3, [r3, #0]
 80443d0:	430a      	orrs	r2, r1
 80443d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80443d4:	687b      	ldr	r3, [r7, #4]
 80443d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80443d8:	f003 0310 	and.w	r3, r3, #16
 80443dc:	2b00      	cmp	r3, #0
 80443de:	d00a      	beq.n	80443f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80443e0:	687b      	ldr	r3, [r7, #4]
 80443e2:	681b      	ldr	r3, [r3, #0]
 80443e4:	689b      	ldr	r3, [r3, #8]
 80443e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80443ea:	687b      	ldr	r3, [r7, #4]
 80443ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80443ee:	687b      	ldr	r3, [r7, #4]
 80443f0:	681b      	ldr	r3, [r3, #0]
 80443f2:	430a      	orrs	r2, r1
 80443f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80443f6:	687b      	ldr	r3, [r7, #4]
 80443f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80443fa:	f003 0320 	and.w	r3, r3, #32
 80443fe:	2b00      	cmp	r3, #0
 8044400:	d00a      	beq.n	8044418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8044402:	687b      	ldr	r3, [r7, #4]
 8044404:	681b      	ldr	r3, [r3, #0]
 8044406:	689b      	ldr	r3, [r3, #8]
 8044408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 804440c:	687b      	ldr	r3, [r7, #4]
 804440e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8044410:	687b      	ldr	r3, [r7, #4]
 8044412:	681b      	ldr	r3, [r3, #0]
 8044414:	430a      	orrs	r2, r1
 8044416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8044418:	687b      	ldr	r3, [r7, #4]
 804441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044420:	2b00      	cmp	r3, #0
 8044422:	d01a      	beq.n	804445a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8044424:	687b      	ldr	r3, [r7, #4]
 8044426:	681b      	ldr	r3, [r3, #0]
 8044428:	685b      	ldr	r3, [r3, #4]
 804442a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804442e:	687b      	ldr	r3, [r7, #4]
 8044430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8044432:	687b      	ldr	r3, [r7, #4]
 8044434:	681b      	ldr	r3, [r3, #0]
 8044436:	430a      	orrs	r2, r1
 8044438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804443a:	687b      	ldr	r3, [r7, #4]
 804443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804443e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044442:	d10a      	bne.n	804445a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8044444:	687b      	ldr	r3, [r7, #4]
 8044446:	681b      	ldr	r3, [r3, #0]
 8044448:	685b      	ldr	r3, [r3, #4]
 804444a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804444e:	687b      	ldr	r3, [r7, #4]
 8044450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8044452:	687b      	ldr	r3, [r7, #4]
 8044454:	681b      	ldr	r3, [r3, #0]
 8044456:	430a      	orrs	r2, r1
 8044458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804445a:	687b      	ldr	r3, [r7, #4]
 804445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044462:	2b00      	cmp	r3, #0
 8044464:	d00a      	beq.n	804447c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8044466:	687b      	ldr	r3, [r7, #4]
 8044468:	681b      	ldr	r3, [r3, #0]
 804446a:	685b      	ldr	r3, [r3, #4]
 804446c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8044470:	687b      	ldr	r3, [r7, #4]
 8044472:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8044474:	687b      	ldr	r3, [r7, #4]
 8044476:	681b      	ldr	r3, [r3, #0]
 8044478:	430a      	orrs	r2, r1
 804447a:	605a      	str	r2, [r3, #4]
  }
}
 804447c:	bf00      	nop
 804447e:	370c      	adds	r7, #12
 8044480:	46bd      	mov	sp, r7
 8044482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044486:	4770      	bx	lr

08044488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8044488:	b580      	push	{r7, lr}
 804448a:	b086      	sub	sp, #24
 804448c:	af02      	add	r7, sp, #8
 804448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8044490:	687b      	ldr	r3, [r7, #4]
 8044492:	2200      	movs	r2, #0
 8044494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8044498:	f7fc fe06 	bl	80410a8 <HAL_GetTick>
 804449c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804449e:	687b      	ldr	r3, [r7, #4]
 80444a0:	681b      	ldr	r3, [r3, #0]
 80444a2:	681b      	ldr	r3, [r3, #0]
 80444a4:	f003 0308 	and.w	r3, r3, #8
 80444a8:	2b08      	cmp	r3, #8
 80444aa:	d10e      	bne.n	80444ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80444ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80444b0:	9300      	str	r3, [sp, #0]
 80444b2:	68fb      	ldr	r3, [r7, #12]
 80444b4:	2200      	movs	r2, #0
 80444b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80444ba:	6878      	ldr	r0, [r7, #4]
 80444bc:	f000 f831 	bl	8044522 <UART_WaitOnFlagUntilTimeout>
 80444c0:	4603      	mov	r3, r0
 80444c2:	2b00      	cmp	r3, #0
 80444c4:	d001      	beq.n	80444ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80444c6:	2303      	movs	r3, #3
 80444c8:	e027      	b.n	804451a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80444ca:	687b      	ldr	r3, [r7, #4]
 80444cc:	681b      	ldr	r3, [r3, #0]
 80444ce:	681b      	ldr	r3, [r3, #0]
 80444d0:	f003 0304 	and.w	r3, r3, #4
 80444d4:	2b04      	cmp	r3, #4
 80444d6:	d10e      	bne.n	80444f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80444d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80444dc:	9300      	str	r3, [sp, #0]
 80444de:	68fb      	ldr	r3, [r7, #12]
 80444e0:	2200      	movs	r2, #0
 80444e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80444e6:	6878      	ldr	r0, [r7, #4]
 80444e8:	f000 f81b 	bl	8044522 <UART_WaitOnFlagUntilTimeout>
 80444ec:	4603      	mov	r3, r0
 80444ee:	2b00      	cmp	r3, #0
 80444f0:	d001      	beq.n	80444f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80444f2:	2303      	movs	r3, #3
 80444f4:	e011      	b.n	804451a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80444f6:	687b      	ldr	r3, [r7, #4]
 80444f8:	2220      	movs	r2, #32
 80444fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80444fc:	687b      	ldr	r3, [r7, #4]
 80444fe:	2220      	movs	r2, #32
 8044500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8044504:	687b      	ldr	r3, [r7, #4]
 8044506:	2200      	movs	r2, #0
 8044508:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 804450a:	687b      	ldr	r3, [r7, #4]
 804450c:	2200      	movs	r2, #0
 804450e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8044510:	687b      	ldr	r3, [r7, #4]
 8044512:	2200      	movs	r2, #0
 8044514:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8044518:	2300      	movs	r3, #0
}
 804451a:	4618      	mov	r0, r3
 804451c:	3710      	adds	r7, #16
 804451e:	46bd      	mov	sp, r7
 8044520:	bd80      	pop	{r7, pc}

08044522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8044522:	b580      	push	{r7, lr}
 8044524:	b09c      	sub	sp, #112	; 0x70
 8044526:	af00      	add	r7, sp, #0
 8044528:	60f8      	str	r0, [r7, #12]
 804452a:	60b9      	str	r1, [r7, #8]
 804452c:	603b      	str	r3, [r7, #0]
 804452e:	4613      	mov	r3, r2
 8044530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044532:	e0a7      	b.n	8044684 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8044534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8044536:	f1b3 3fff 	cmp.w	r3, #4294967295
 804453a:	f000 80a3 	beq.w	8044684 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804453e:	f7fc fdb3 	bl	80410a8 <HAL_GetTick>
 8044542:	4602      	mov	r2, r0
 8044544:	683b      	ldr	r3, [r7, #0]
 8044546:	1ad3      	subs	r3, r2, r3
 8044548:	6fba      	ldr	r2, [r7, #120]	; 0x78
 804454a:	429a      	cmp	r2, r3
 804454c:	d302      	bcc.n	8044554 <UART_WaitOnFlagUntilTimeout+0x32>
 804454e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8044550:	2b00      	cmp	r3, #0
 8044552:	d13f      	bne.n	80445d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8044554:	68fb      	ldr	r3, [r7, #12]
 8044556:	681b      	ldr	r3, [r3, #0]
 8044558:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804455a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804455c:	e853 3f00 	ldrex	r3, [r3]
 8044560:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8044562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8044564:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8044568:	667b      	str	r3, [r7, #100]	; 0x64
 804456a:	68fb      	ldr	r3, [r7, #12]
 804456c:	681b      	ldr	r3, [r3, #0]
 804456e:	461a      	mov	r2, r3
 8044570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8044572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8044574:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8044578:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 804457a:	e841 2300 	strex	r3, r2, [r1]
 804457e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8044580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8044582:	2b00      	cmp	r3, #0
 8044584:	d1e6      	bne.n	8044554 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8044586:	68fb      	ldr	r3, [r7, #12]
 8044588:	681b      	ldr	r3, [r3, #0]
 804458a:	3308      	adds	r3, #8
 804458c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804458e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044590:	e853 3f00 	ldrex	r3, [r3]
 8044594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8044596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044598:	f023 0301 	bic.w	r3, r3, #1
 804459c:	663b      	str	r3, [r7, #96]	; 0x60
 804459e:	68fb      	ldr	r3, [r7, #12]
 80445a0:	681b      	ldr	r3, [r3, #0]
 80445a2:	3308      	adds	r3, #8
 80445a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80445a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80445a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80445aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80445ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80445ae:	e841 2300 	strex	r3, r2, [r1]
 80445b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80445b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80445b6:	2b00      	cmp	r3, #0
 80445b8:	d1e5      	bne.n	8044586 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80445ba:	68fb      	ldr	r3, [r7, #12]
 80445bc:	2220      	movs	r2, #32
 80445be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80445c0:	68fb      	ldr	r3, [r7, #12]
 80445c2:	2220      	movs	r2, #32
 80445c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80445c8:	68fb      	ldr	r3, [r7, #12]
 80445ca:	2200      	movs	r2, #0
 80445cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80445d0:	2303      	movs	r3, #3
 80445d2:	e068      	b.n	80446a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80445d4:	68fb      	ldr	r3, [r7, #12]
 80445d6:	681b      	ldr	r3, [r3, #0]
 80445d8:	681b      	ldr	r3, [r3, #0]
 80445da:	f003 0304 	and.w	r3, r3, #4
 80445de:	2b00      	cmp	r3, #0
 80445e0:	d050      	beq.n	8044684 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80445e2:	68fb      	ldr	r3, [r7, #12]
 80445e4:	681b      	ldr	r3, [r3, #0]
 80445e6:	69db      	ldr	r3, [r3, #28]
 80445e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80445ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80445f0:	d148      	bne.n	8044684 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80445f2:	68fb      	ldr	r3, [r7, #12]
 80445f4:	681b      	ldr	r3, [r3, #0]
 80445f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80445fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80445fc:	68fb      	ldr	r3, [r7, #12]
 80445fe:	681b      	ldr	r3, [r3, #0]
 8044600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044604:	e853 3f00 	ldrex	r3, [r3]
 8044608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 804460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804460c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8044610:	66fb      	str	r3, [r7, #108]	; 0x6c
 8044612:	68fb      	ldr	r3, [r7, #12]
 8044614:	681b      	ldr	r3, [r3, #0]
 8044616:	461a      	mov	r2, r3
 8044618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 804461a:	637b      	str	r3, [r7, #52]	; 0x34
 804461c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804461e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8044620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8044622:	e841 2300 	strex	r3, r2, [r1]
 8044626:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8044628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804462a:	2b00      	cmp	r3, #0
 804462c:	d1e6      	bne.n	80445fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804462e:	68fb      	ldr	r3, [r7, #12]
 8044630:	681b      	ldr	r3, [r3, #0]
 8044632:	3308      	adds	r3, #8
 8044634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044636:	697b      	ldr	r3, [r7, #20]
 8044638:	e853 3f00 	ldrex	r3, [r3]
 804463c:	613b      	str	r3, [r7, #16]
   return(result);
 804463e:	693b      	ldr	r3, [r7, #16]
 8044640:	f023 0301 	bic.w	r3, r3, #1
 8044644:	66bb      	str	r3, [r7, #104]	; 0x68
 8044646:	68fb      	ldr	r3, [r7, #12]
 8044648:	681b      	ldr	r3, [r3, #0]
 804464a:	3308      	adds	r3, #8
 804464c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 804464e:	623a      	str	r2, [r7, #32]
 8044650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044652:	69f9      	ldr	r1, [r7, #28]
 8044654:	6a3a      	ldr	r2, [r7, #32]
 8044656:	e841 2300 	strex	r3, r2, [r1]
 804465a:	61bb      	str	r3, [r7, #24]
   return(result);
 804465c:	69bb      	ldr	r3, [r7, #24]
 804465e:	2b00      	cmp	r3, #0
 8044660:	d1e5      	bne.n	804462e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8044662:	68fb      	ldr	r3, [r7, #12]
 8044664:	2220      	movs	r2, #32
 8044666:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8044668:	68fb      	ldr	r3, [r7, #12]
 804466a:	2220      	movs	r2, #32
 804466c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8044670:	68fb      	ldr	r3, [r7, #12]
 8044672:	2220      	movs	r2, #32
 8044674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8044678:	68fb      	ldr	r3, [r7, #12]
 804467a:	2200      	movs	r2, #0
 804467c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8044680:	2303      	movs	r3, #3
 8044682:	e010      	b.n	80446a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044684:	68fb      	ldr	r3, [r7, #12]
 8044686:	681b      	ldr	r3, [r3, #0]
 8044688:	69da      	ldr	r2, [r3, #28]
 804468a:	68bb      	ldr	r3, [r7, #8]
 804468c:	4013      	ands	r3, r2
 804468e:	68ba      	ldr	r2, [r7, #8]
 8044690:	429a      	cmp	r2, r3
 8044692:	bf0c      	ite	eq
 8044694:	2301      	moveq	r3, #1
 8044696:	2300      	movne	r3, #0
 8044698:	b2db      	uxtb	r3, r3
 804469a:	461a      	mov	r2, r3
 804469c:	79fb      	ldrb	r3, [r7, #7]
 804469e:	429a      	cmp	r2, r3
 80446a0:	f43f af48 	beq.w	8044534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80446a4:	2300      	movs	r3, #0
}
 80446a6:	4618      	mov	r0, r3
 80446a8:	3770      	adds	r7, #112	; 0x70
 80446aa:	46bd      	mov	sp, r7
 80446ac:	bd80      	pop	{r7, pc}

080446ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80446ae:	b480      	push	{r7}
 80446b0:	b089      	sub	sp, #36	; 0x24
 80446b2:	af00      	add	r7, sp, #0
 80446b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80446b6:	687b      	ldr	r3, [r7, #4]
 80446b8:	681b      	ldr	r3, [r3, #0]
 80446ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80446bc:	68fb      	ldr	r3, [r7, #12]
 80446be:	e853 3f00 	ldrex	r3, [r3]
 80446c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80446c4:	68bb      	ldr	r3, [r7, #8]
 80446c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80446ca:	61fb      	str	r3, [r7, #28]
 80446cc:	687b      	ldr	r3, [r7, #4]
 80446ce:	681b      	ldr	r3, [r3, #0]
 80446d0:	461a      	mov	r2, r3
 80446d2:	69fb      	ldr	r3, [r7, #28]
 80446d4:	61bb      	str	r3, [r7, #24]
 80446d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80446d8:	6979      	ldr	r1, [r7, #20]
 80446da:	69ba      	ldr	r2, [r7, #24]
 80446dc:	e841 2300 	strex	r3, r2, [r1]
 80446e0:	613b      	str	r3, [r7, #16]
   return(result);
 80446e2:	693b      	ldr	r3, [r7, #16]
 80446e4:	2b00      	cmp	r3, #0
 80446e6:	d1e6      	bne.n	80446b6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80446e8:	687b      	ldr	r3, [r7, #4]
 80446ea:	2220      	movs	r2, #32
 80446ec:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80446ee:	bf00      	nop
 80446f0:	3724      	adds	r7, #36	; 0x24
 80446f2:	46bd      	mov	sp, r7
 80446f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446f8:	4770      	bx	lr

080446fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80446fa:	b480      	push	{r7}
 80446fc:	b095      	sub	sp, #84	; 0x54
 80446fe:	af00      	add	r7, sp, #0
 8044700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8044702:	687b      	ldr	r3, [r7, #4]
 8044704:	681b      	ldr	r3, [r3, #0]
 8044706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804470a:	e853 3f00 	ldrex	r3, [r3]
 804470e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8044710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8044716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8044718:	687b      	ldr	r3, [r7, #4]
 804471a:	681b      	ldr	r3, [r3, #0]
 804471c:	461a      	mov	r2, r3
 804471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8044720:	643b      	str	r3, [r7, #64]	; 0x40
 8044722:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8044726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8044728:	e841 2300 	strex	r3, r2, [r1]
 804472c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044730:	2b00      	cmp	r3, #0
 8044732:	d1e6      	bne.n	8044702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8044734:	687b      	ldr	r3, [r7, #4]
 8044736:	681b      	ldr	r3, [r3, #0]
 8044738:	3308      	adds	r3, #8
 804473a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804473c:	6a3b      	ldr	r3, [r7, #32]
 804473e:	e853 3f00 	ldrex	r3, [r3]
 8044742:	61fb      	str	r3, [r7, #28]
   return(result);
 8044744:	69fb      	ldr	r3, [r7, #28]
 8044746:	f023 0301 	bic.w	r3, r3, #1
 804474a:	64bb      	str	r3, [r7, #72]	; 0x48
 804474c:	687b      	ldr	r3, [r7, #4]
 804474e:	681b      	ldr	r3, [r3, #0]
 8044750:	3308      	adds	r3, #8
 8044752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8044754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8044756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804475a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804475c:	e841 2300 	strex	r3, r2, [r1]
 8044760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8044762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044764:	2b00      	cmp	r3, #0
 8044766:	d1e5      	bne.n	8044734 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8044768:	687b      	ldr	r3, [r7, #4]
 804476a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804476c:	2b01      	cmp	r3, #1
 804476e:	d118      	bne.n	80447a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8044770:	687b      	ldr	r3, [r7, #4]
 8044772:	681b      	ldr	r3, [r3, #0]
 8044774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8044776:	68fb      	ldr	r3, [r7, #12]
 8044778:	e853 3f00 	ldrex	r3, [r3]
 804477c:	60bb      	str	r3, [r7, #8]
   return(result);
 804477e:	68bb      	ldr	r3, [r7, #8]
 8044780:	f023 0310 	bic.w	r3, r3, #16
 8044784:	647b      	str	r3, [r7, #68]	; 0x44
 8044786:	687b      	ldr	r3, [r7, #4]
 8044788:	681b      	ldr	r3, [r3, #0]
 804478a:	461a      	mov	r2, r3
 804478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804478e:	61bb      	str	r3, [r7, #24]
 8044790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044792:	6979      	ldr	r1, [r7, #20]
 8044794:	69ba      	ldr	r2, [r7, #24]
 8044796:	e841 2300 	strex	r3, r2, [r1]
 804479a:	613b      	str	r3, [r7, #16]
   return(result);
 804479c:	693b      	ldr	r3, [r7, #16]
 804479e:	2b00      	cmp	r3, #0
 80447a0:	d1e6      	bne.n	8044770 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80447a2:	687b      	ldr	r3, [r7, #4]
 80447a4:	2220      	movs	r2, #32
 80447a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80447aa:	687b      	ldr	r3, [r7, #4]
 80447ac:	2200      	movs	r2, #0
 80447ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80447b0:	687b      	ldr	r3, [r7, #4]
 80447b2:	2200      	movs	r2, #0
 80447b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80447b6:	bf00      	nop
 80447b8:	3754      	adds	r7, #84	; 0x54
 80447ba:	46bd      	mov	sp, r7
 80447bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80447c0:	4770      	bx	lr

080447c2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80447c2:	b580      	push	{r7, lr}
 80447c4:	b090      	sub	sp, #64	; 0x40
 80447c6:	af00      	add	r7, sp, #0
 80447c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80447ca:	687b      	ldr	r3, [r7, #4]
 80447cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80447ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80447d0:	687b      	ldr	r3, [r7, #4]
 80447d2:	69db      	ldr	r3, [r3, #28]
 80447d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80447d8:	d037      	beq.n	804484a <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80447da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80447dc:	2200      	movs	r2, #0
 80447de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80447e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80447e4:	681b      	ldr	r3, [r3, #0]
 80447e6:	3308      	adds	r3, #8
 80447e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80447ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80447ec:	e853 3f00 	ldrex	r3, [r3]
 80447f0:	623b      	str	r3, [r7, #32]
   return(result);
 80447f2:	6a3b      	ldr	r3, [r7, #32]
 80447f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80447f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80447fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80447fc:	681b      	ldr	r3, [r3, #0]
 80447fe:	3308      	adds	r3, #8
 8044800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8044802:	633a      	str	r2, [r7, #48]	; 0x30
 8044804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8044808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804480a:	e841 2300 	strex	r3, r2, [r1]
 804480e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8044810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044812:	2b00      	cmp	r3, #0
 8044814:	d1e5      	bne.n	80447e2 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8044816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044818:	681b      	ldr	r3, [r3, #0]
 804481a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804481c:	693b      	ldr	r3, [r7, #16]
 804481e:	e853 3f00 	ldrex	r3, [r3]
 8044822:	60fb      	str	r3, [r7, #12]
   return(result);
 8044824:	68fb      	ldr	r3, [r7, #12]
 8044826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804482a:	637b      	str	r3, [r7, #52]	; 0x34
 804482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804482e:	681b      	ldr	r3, [r3, #0]
 8044830:	461a      	mov	r2, r3
 8044832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044834:	61fb      	str	r3, [r7, #28]
 8044836:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044838:	69b9      	ldr	r1, [r7, #24]
 804483a:	69fa      	ldr	r2, [r7, #28]
 804483c:	e841 2300 	strex	r3, r2, [r1]
 8044840:	617b      	str	r3, [r7, #20]
   return(result);
 8044842:	697b      	ldr	r3, [r7, #20]
 8044844:	2b00      	cmp	r3, #0
 8044846:	d1e6      	bne.n	8044816 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8044848:	e002      	b.n	8044850 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 804484a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 804484c:	f7ff fae2 	bl	8043e14 <HAL_UART_TxCpltCallback>
}
 8044850:	bf00      	nop
 8044852:	3740      	adds	r7, #64	; 0x40
 8044854:	46bd      	mov	sp, r7
 8044856:	bd80      	pop	{r7, pc}

08044858 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8044858:	b580      	push	{r7, lr}
 804485a:	b084      	sub	sp, #16
 804485c:	af00      	add	r7, sp, #0
 804485e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8044860:	687b      	ldr	r3, [r7, #4]
 8044862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8044864:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8044866:	68f8      	ldr	r0, [r7, #12]
 8044868:	f7ff fade 	bl	8043e28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804486c:	bf00      	nop
 804486e:	3710      	adds	r7, #16
 8044870:	46bd      	mov	sp, r7
 8044872:	bd80      	pop	{r7, pc}

08044874 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8044874:	b580      	push	{r7, lr}
 8044876:	b086      	sub	sp, #24
 8044878:	af00      	add	r7, sp, #0
 804487a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804487c:	687b      	ldr	r3, [r7, #4]
 804487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8044880:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8044882:	697b      	ldr	r3, [r7, #20]
 8044884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044886:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8044888:	697b      	ldr	r3, [r7, #20]
 804488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804488e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8044890:	697b      	ldr	r3, [r7, #20]
 8044892:	681b      	ldr	r3, [r3, #0]
 8044894:	689b      	ldr	r3, [r3, #8]
 8044896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804489a:	2b80      	cmp	r3, #128	; 0x80
 804489c:	d109      	bne.n	80448b2 <UART_DMAError+0x3e>
 804489e:	693b      	ldr	r3, [r7, #16]
 80448a0:	2b21      	cmp	r3, #33	; 0x21
 80448a2:	d106      	bne.n	80448b2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80448a4:	697b      	ldr	r3, [r7, #20]
 80448a6:	2200      	movs	r2, #0
 80448a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80448ac:	6978      	ldr	r0, [r7, #20]
 80448ae:	f7ff fefe 	bl	80446ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80448b2:	697b      	ldr	r3, [r7, #20]
 80448b4:	681b      	ldr	r3, [r3, #0]
 80448b6:	689b      	ldr	r3, [r3, #8]
 80448b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80448bc:	2b40      	cmp	r3, #64	; 0x40
 80448be:	d109      	bne.n	80448d4 <UART_DMAError+0x60>
 80448c0:	68fb      	ldr	r3, [r7, #12]
 80448c2:	2b22      	cmp	r3, #34	; 0x22
 80448c4:	d106      	bne.n	80448d4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80448c6:	697b      	ldr	r3, [r7, #20]
 80448c8:	2200      	movs	r2, #0
 80448ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80448ce:	6978      	ldr	r0, [r7, #20]
 80448d0:	f7ff ff13 	bl	80446fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80448d4:	697b      	ldr	r3, [r7, #20]
 80448d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80448da:	f043 0210 	orr.w	r2, r3, #16
 80448de:	697b      	ldr	r3, [r7, #20]
 80448e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80448e4:	6978      	ldr	r0, [r7, #20]
 80448e6:	f7ff faa9 	bl	8043e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80448ea:	bf00      	nop
 80448ec:	3718      	adds	r7, #24
 80448ee:	46bd      	mov	sp, r7
 80448f0:	bd80      	pop	{r7, pc}

080448f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80448f2:	b580      	push	{r7, lr}
 80448f4:	b084      	sub	sp, #16
 80448f6:	af00      	add	r7, sp, #0
 80448f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80448fa:	687b      	ldr	r3, [r7, #4]
 80448fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80448fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8044900:	68fb      	ldr	r3, [r7, #12]
 8044902:	2200      	movs	r2, #0
 8044904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8044908:	68fb      	ldr	r3, [r7, #12]
 804490a:	2200      	movs	r2, #0
 804490c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8044910:	68f8      	ldr	r0, [r7, #12]
 8044912:	f7ff fa93 	bl	8043e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8044916:	bf00      	nop
 8044918:	3710      	adds	r7, #16
 804491a:	46bd      	mov	sp, r7
 804491c:	bd80      	pop	{r7, pc}

0804491e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 804491e:	b580      	push	{r7, lr}
 8044920:	b088      	sub	sp, #32
 8044922:	af00      	add	r7, sp, #0
 8044924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8044926:	687b      	ldr	r3, [r7, #4]
 8044928:	681b      	ldr	r3, [r3, #0]
 804492a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804492c:	68fb      	ldr	r3, [r7, #12]
 804492e:	e853 3f00 	ldrex	r3, [r3]
 8044932:	60bb      	str	r3, [r7, #8]
   return(result);
 8044934:	68bb      	ldr	r3, [r7, #8]
 8044936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804493a:	61fb      	str	r3, [r7, #28]
 804493c:	687b      	ldr	r3, [r7, #4]
 804493e:	681b      	ldr	r3, [r3, #0]
 8044940:	461a      	mov	r2, r3
 8044942:	69fb      	ldr	r3, [r7, #28]
 8044944:	61bb      	str	r3, [r7, #24]
 8044946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8044948:	6979      	ldr	r1, [r7, #20]
 804494a:	69ba      	ldr	r2, [r7, #24]
 804494c:	e841 2300 	strex	r3, r2, [r1]
 8044950:	613b      	str	r3, [r7, #16]
   return(result);
 8044952:	693b      	ldr	r3, [r7, #16]
 8044954:	2b00      	cmp	r3, #0
 8044956:	d1e6      	bne.n	8044926 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8044958:	687b      	ldr	r3, [r7, #4]
 804495a:	2220      	movs	r2, #32
 804495c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 804495e:	687b      	ldr	r3, [r7, #4]
 8044960:	2200      	movs	r2, #0
 8044962:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8044964:	6878      	ldr	r0, [r7, #4]
 8044966:	f7ff fa55 	bl	8043e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804496a:	bf00      	nop
 804496c:	3720      	adds	r7, #32
 804496e:	46bd      	mov	sp, r7
 8044970:	bd80      	pop	{r7, pc}

08044972 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8044972:	b480      	push	{r7}
 8044974:	b085      	sub	sp, #20
 8044976:	af00      	add	r7, sp, #0
 8044978:	4603      	mov	r3, r0
 804497a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 804497c:	2300      	movs	r3, #0
 804497e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8044980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8044984:	2b84      	cmp	r3, #132	; 0x84
 8044986:	d005      	beq.n	8044994 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8044988:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 804498c:	68fb      	ldr	r3, [r7, #12]
 804498e:	4413      	add	r3, r2
 8044990:	3303      	adds	r3, #3
 8044992:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8044994:	68fb      	ldr	r3, [r7, #12]
}
 8044996:	4618      	mov	r0, r3
 8044998:	3714      	adds	r7, #20
 804499a:	46bd      	mov	sp, r7
 804499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449a0:	4770      	bx	lr

080449a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80449a2:	b580      	push	{r7, lr}
 80449a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80449a6:	f000 faff 	bl	8044fa8 <vTaskStartScheduler>
  
  return osOK;
 80449aa:	2300      	movs	r3, #0
}
 80449ac:	4618      	mov	r0, r3
 80449ae:	bd80      	pop	{r7, pc}

080449b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80449b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80449b2:	b089      	sub	sp, #36	; 0x24
 80449b4:	af04      	add	r7, sp, #16
 80449b6:	6078      	str	r0, [r7, #4]
 80449b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80449ba:	687b      	ldr	r3, [r7, #4]
 80449bc:	695b      	ldr	r3, [r3, #20]
 80449be:	2b00      	cmp	r3, #0
 80449c0:	d020      	beq.n	8044a04 <osThreadCreate+0x54>
 80449c2:	687b      	ldr	r3, [r7, #4]
 80449c4:	699b      	ldr	r3, [r3, #24]
 80449c6:	2b00      	cmp	r3, #0
 80449c8:	d01c      	beq.n	8044a04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80449ca:	687b      	ldr	r3, [r7, #4]
 80449cc:	685c      	ldr	r4, [r3, #4]
 80449ce:	687b      	ldr	r3, [r7, #4]
 80449d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80449d2:	687b      	ldr	r3, [r7, #4]
 80449d4:	691e      	ldr	r6, [r3, #16]
 80449d6:	687b      	ldr	r3, [r7, #4]
 80449d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80449dc:	4618      	mov	r0, r3
 80449de:	f7ff ffc8 	bl	8044972 <makeFreeRtosPriority>
 80449e2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80449e4:	687b      	ldr	r3, [r7, #4]
 80449e6:	695b      	ldr	r3, [r3, #20]
 80449e8:	687a      	ldr	r2, [r7, #4]
 80449ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80449ec:	9202      	str	r2, [sp, #8]
 80449ee:	9301      	str	r3, [sp, #4]
 80449f0:	9100      	str	r1, [sp, #0]
 80449f2:	683b      	ldr	r3, [r7, #0]
 80449f4:	4632      	mov	r2, r6
 80449f6:	4629      	mov	r1, r5
 80449f8:	4620      	mov	r0, r4
 80449fa:	f000 f8ed 	bl	8044bd8 <xTaskCreateStatic>
 80449fe:	4603      	mov	r3, r0
 8044a00:	60fb      	str	r3, [r7, #12]
 8044a02:	e01c      	b.n	8044a3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8044a04:	687b      	ldr	r3, [r7, #4]
 8044a06:	685c      	ldr	r4, [r3, #4]
 8044a08:	687b      	ldr	r3, [r7, #4]
 8044a0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8044a0c:	687b      	ldr	r3, [r7, #4]
 8044a0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8044a10:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8044a12:	687b      	ldr	r3, [r7, #4]
 8044a14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8044a18:	4618      	mov	r0, r3
 8044a1a:	f7ff ffaa 	bl	8044972 <makeFreeRtosPriority>
 8044a1e:	4602      	mov	r2, r0
 8044a20:	f107 030c 	add.w	r3, r7, #12
 8044a24:	9301      	str	r3, [sp, #4]
 8044a26:	9200      	str	r2, [sp, #0]
 8044a28:	683b      	ldr	r3, [r7, #0]
 8044a2a:	4632      	mov	r2, r6
 8044a2c:	4629      	mov	r1, r5
 8044a2e:	4620      	mov	r0, r4
 8044a30:	f000 f935 	bl	8044c9e <xTaskCreate>
 8044a34:	4603      	mov	r3, r0
 8044a36:	2b01      	cmp	r3, #1
 8044a38:	d001      	beq.n	8044a3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8044a3a:	2300      	movs	r3, #0
 8044a3c:	e000      	b.n	8044a40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8044a3e:	68fb      	ldr	r3, [r7, #12]
}
 8044a40:	4618      	mov	r0, r3
 8044a42:	3714      	adds	r7, #20
 8044a44:	46bd      	mov	sp, r7
 8044a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08044a48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8044a48:	b580      	push	{r7, lr}
 8044a4a:	b084      	sub	sp, #16
 8044a4c:	af00      	add	r7, sp, #0
 8044a4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8044a50:	687b      	ldr	r3, [r7, #4]
 8044a52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8044a54:	68fb      	ldr	r3, [r7, #12]
 8044a56:	2b00      	cmp	r3, #0
 8044a58:	d001      	beq.n	8044a5e <osDelay+0x16>
 8044a5a:	68fb      	ldr	r3, [r7, #12]
 8044a5c:	e000      	b.n	8044a60 <osDelay+0x18>
 8044a5e:	2301      	movs	r3, #1
 8044a60:	4618      	mov	r0, r3
 8044a62:	f000 fa6b 	bl	8044f3c <vTaskDelay>
  
  return osOK;
 8044a66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8044a68:	4618      	mov	r0, r3
 8044a6a:	3710      	adds	r7, #16
 8044a6c:	46bd      	mov	sp, r7
 8044a6e:	bd80      	pop	{r7, pc}

08044a70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8044a70:	b480      	push	{r7}
 8044a72:	b083      	sub	sp, #12
 8044a74:	af00      	add	r7, sp, #0
 8044a76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8044a78:	687b      	ldr	r3, [r7, #4]
 8044a7a:	f103 0208 	add.w	r2, r3, #8
 8044a7e:	687b      	ldr	r3, [r7, #4]
 8044a80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8044a82:	687b      	ldr	r3, [r7, #4]
 8044a84:	f04f 32ff 	mov.w	r2, #4294967295
 8044a88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8044a8a:	687b      	ldr	r3, [r7, #4]
 8044a8c:	f103 0208 	add.w	r2, r3, #8
 8044a90:	687b      	ldr	r3, [r7, #4]
 8044a92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8044a94:	687b      	ldr	r3, [r7, #4]
 8044a96:	f103 0208 	add.w	r2, r3, #8
 8044a9a:	687b      	ldr	r3, [r7, #4]
 8044a9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8044a9e:	687b      	ldr	r3, [r7, #4]
 8044aa0:	2200      	movs	r2, #0
 8044aa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8044aa4:	bf00      	nop
 8044aa6:	370c      	adds	r7, #12
 8044aa8:	46bd      	mov	sp, r7
 8044aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044aae:	4770      	bx	lr

08044ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8044ab0:	b480      	push	{r7}
 8044ab2:	b083      	sub	sp, #12
 8044ab4:	af00      	add	r7, sp, #0
 8044ab6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8044ab8:	687b      	ldr	r3, [r7, #4]
 8044aba:	2200      	movs	r2, #0
 8044abc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8044abe:	bf00      	nop
 8044ac0:	370c      	adds	r7, #12
 8044ac2:	46bd      	mov	sp, r7
 8044ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ac8:	4770      	bx	lr

08044aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8044aca:	b480      	push	{r7}
 8044acc:	b085      	sub	sp, #20
 8044ace:	af00      	add	r7, sp, #0
 8044ad0:	6078      	str	r0, [r7, #4]
 8044ad2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8044ad4:	687b      	ldr	r3, [r7, #4]
 8044ad6:	685b      	ldr	r3, [r3, #4]
 8044ad8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8044ada:	683b      	ldr	r3, [r7, #0]
 8044adc:	68fa      	ldr	r2, [r7, #12]
 8044ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8044ae0:	68fb      	ldr	r3, [r7, #12]
 8044ae2:	689a      	ldr	r2, [r3, #8]
 8044ae4:	683b      	ldr	r3, [r7, #0]
 8044ae6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8044ae8:	68fb      	ldr	r3, [r7, #12]
 8044aea:	689b      	ldr	r3, [r3, #8]
 8044aec:	683a      	ldr	r2, [r7, #0]
 8044aee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8044af0:	68fb      	ldr	r3, [r7, #12]
 8044af2:	683a      	ldr	r2, [r7, #0]
 8044af4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8044af6:	683b      	ldr	r3, [r7, #0]
 8044af8:	687a      	ldr	r2, [r7, #4]
 8044afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8044afc:	687b      	ldr	r3, [r7, #4]
 8044afe:	681b      	ldr	r3, [r3, #0]
 8044b00:	1c5a      	adds	r2, r3, #1
 8044b02:	687b      	ldr	r3, [r7, #4]
 8044b04:	601a      	str	r2, [r3, #0]
}
 8044b06:	bf00      	nop
 8044b08:	3714      	adds	r7, #20
 8044b0a:	46bd      	mov	sp, r7
 8044b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b10:	4770      	bx	lr

08044b12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8044b12:	b480      	push	{r7}
 8044b14:	b085      	sub	sp, #20
 8044b16:	af00      	add	r7, sp, #0
 8044b18:	6078      	str	r0, [r7, #4]
 8044b1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8044b1c:	683b      	ldr	r3, [r7, #0]
 8044b1e:	681b      	ldr	r3, [r3, #0]
 8044b20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8044b22:	68bb      	ldr	r3, [r7, #8]
 8044b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044b28:	d103      	bne.n	8044b32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8044b2a:	687b      	ldr	r3, [r7, #4]
 8044b2c:	691b      	ldr	r3, [r3, #16]
 8044b2e:	60fb      	str	r3, [r7, #12]
 8044b30:	e00c      	b.n	8044b4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8044b32:	687b      	ldr	r3, [r7, #4]
 8044b34:	3308      	adds	r3, #8
 8044b36:	60fb      	str	r3, [r7, #12]
 8044b38:	e002      	b.n	8044b40 <vListInsert+0x2e>
 8044b3a:	68fb      	ldr	r3, [r7, #12]
 8044b3c:	685b      	ldr	r3, [r3, #4]
 8044b3e:	60fb      	str	r3, [r7, #12]
 8044b40:	68fb      	ldr	r3, [r7, #12]
 8044b42:	685b      	ldr	r3, [r3, #4]
 8044b44:	681b      	ldr	r3, [r3, #0]
 8044b46:	68ba      	ldr	r2, [r7, #8]
 8044b48:	429a      	cmp	r2, r3
 8044b4a:	d2f6      	bcs.n	8044b3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8044b4c:	68fb      	ldr	r3, [r7, #12]
 8044b4e:	685a      	ldr	r2, [r3, #4]
 8044b50:	683b      	ldr	r3, [r7, #0]
 8044b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8044b54:	683b      	ldr	r3, [r7, #0]
 8044b56:	685b      	ldr	r3, [r3, #4]
 8044b58:	683a      	ldr	r2, [r7, #0]
 8044b5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8044b5c:	683b      	ldr	r3, [r7, #0]
 8044b5e:	68fa      	ldr	r2, [r7, #12]
 8044b60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8044b62:	68fb      	ldr	r3, [r7, #12]
 8044b64:	683a      	ldr	r2, [r7, #0]
 8044b66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8044b68:	683b      	ldr	r3, [r7, #0]
 8044b6a:	687a      	ldr	r2, [r7, #4]
 8044b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8044b6e:	687b      	ldr	r3, [r7, #4]
 8044b70:	681b      	ldr	r3, [r3, #0]
 8044b72:	1c5a      	adds	r2, r3, #1
 8044b74:	687b      	ldr	r3, [r7, #4]
 8044b76:	601a      	str	r2, [r3, #0]
}
 8044b78:	bf00      	nop
 8044b7a:	3714      	adds	r7, #20
 8044b7c:	46bd      	mov	sp, r7
 8044b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b82:	4770      	bx	lr

08044b84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8044b84:	b480      	push	{r7}
 8044b86:	b085      	sub	sp, #20
 8044b88:	af00      	add	r7, sp, #0
 8044b8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8044b8c:	687b      	ldr	r3, [r7, #4]
 8044b8e:	691b      	ldr	r3, [r3, #16]
 8044b90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8044b92:	687b      	ldr	r3, [r7, #4]
 8044b94:	685b      	ldr	r3, [r3, #4]
 8044b96:	687a      	ldr	r2, [r7, #4]
 8044b98:	6892      	ldr	r2, [r2, #8]
 8044b9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8044b9c:	687b      	ldr	r3, [r7, #4]
 8044b9e:	689b      	ldr	r3, [r3, #8]
 8044ba0:	687a      	ldr	r2, [r7, #4]
 8044ba2:	6852      	ldr	r2, [r2, #4]
 8044ba4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8044ba6:	68fb      	ldr	r3, [r7, #12]
 8044ba8:	685b      	ldr	r3, [r3, #4]
 8044baa:	687a      	ldr	r2, [r7, #4]
 8044bac:	429a      	cmp	r2, r3
 8044bae:	d103      	bne.n	8044bb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8044bb0:	687b      	ldr	r3, [r7, #4]
 8044bb2:	689a      	ldr	r2, [r3, #8]
 8044bb4:	68fb      	ldr	r3, [r7, #12]
 8044bb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8044bb8:	687b      	ldr	r3, [r7, #4]
 8044bba:	2200      	movs	r2, #0
 8044bbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8044bbe:	68fb      	ldr	r3, [r7, #12]
 8044bc0:	681b      	ldr	r3, [r3, #0]
 8044bc2:	1e5a      	subs	r2, r3, #1
 8044bc4:	68fb      	ldr	r3, [r7, #12]
 8044bc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8044bc8:	68fb      	ldr	r3, [r7, #12]
 8044bca:	681b      	ldr	r3, [r3, #0]
}
 8044bcc:	4618      	mov	r0, r3
 8044bce:	3714      	adds	r7, #20
 8044bd0:	46bd      	mov	sp, r7
 8044bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044bd6:	4770      	bx	lr

08044bd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8044bd8:	b580      	push	{r7, lr}
 8044bda:	b08e      	sub	sp, #56	; 0x38
 8044bdc:	af04      	add	r7, sp, #16
 8044bde:	60f8      	str	r0, [r7, #12]
 8044be0:	60b9      	str	r1, [r7, #8]
 8044be2:	607a      	str	r2, [r7, #4]
 8044be4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8044be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044be8:	2b00      	cmp	r3, #0
 8044bea:	d10c      	bne.n	8044c06 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8044bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8044bf0:	b672      	cpsid	i
 8044bf2:	f383 8811 	msr	BASEPRI, r3
 8044bf6:	f3bf 8f6f 	isb	sy
 8044bfa:	f3bf 8f4f 	dsb	sy
 8044bfe:	b662      	cpsie	i
 8044c00:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8044c02:	bf00      	nop
 8044c04:	e7fe      	b.n	8044c04 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8044c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044c08:	2b00      	cmp	r3, #0
 8044c0a:	d10c      	bne.n	8044c26 <xTaskCreateStatic+0x4e>
	__asm volatile
 8044c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8044c10:	b672      	cpsid	i
 8044c12:	f383 8811 	msr	BASEPRI, r3
 8044c16:	f3bf 8f6f 	isb	sy
 8044c1a:	f3bf 8f4f 	dsb	sy
 8044c1e:	b662      	cpsie	i
 8044c20:	61fb      	str	r3, [r7, #28]
}
 8044c22:	bf00      	nop
 8044c24:	e7fe      	b.n	8044c24 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8044c26:	23a0      	movs	r3, #160	; 0xa0
 8044c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8044c2a:	693b      	ldr	r3, [r7, #16]
 8044c2c:	2ba0      	cmp	r3, #160	; 0xa0
 8044c2e:	d00c      	beq.n	8044c4a <xTaskCreateStatic+0x72>
	__asm volatile
 8044c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8044c34:	b672      	cpsid	i
 8044c36:	f383 8811 	msr	BASEPRI, r3
 8044c3a:	f3bf 8f6f 	isb	sy
 8044c3e:	f3bf 8f4f 	dsb	sy
 8044c42:	b662      	cpsie	i
 8044c44:	61bb      	str	r3, [r7, #24]
}
 8044c46:	bf00      	nop
 8044c48:	e7fe      	b.n	8044c48 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8044c4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8044c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044c4e:	2b00      	cmp	r3, #0
 8044c50:	d01e      	beq.n	8044c90 <xTaskCreateStatic+0xb8>
 8044c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044c54:	2b00      	cmp	r3, #0
 8044c56:	d01b      	beq.n	8044c90 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8044c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044c5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8044c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8044c60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8044c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044c64:	2202      	movs	r2, #2
 8044c66:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8044c6a:	2300      	movs	r3, #0
 8044c6c:	9303      	str	r3, [sp, #12]
 8044c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044c70:	9302      	str	r3, [sp, #8]
 8044c72:	f107 0314 	add.w	r3, r7, #20
 8044c76:	9301      	str	r3, [sp, #4]
 8044c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044c7a:	9300      	str	r3, [sp, #0]
 8044c7c:	683b      	ldr	r3, [r7, #0]
 8044c7e:	687a      	ldr	r2, [r7, #4]
 8044c80:	68b9      	ldr	r1, [r7, #8]
 8044c82:	68f8      	ldr	r0, [r7, #12]
 8044c84:	f000 f850 	bl	8044d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8044c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8044c8a:	f000 f8ed 	bl	8044e68 <prvAddNewTaskToReadyList>
 8044c8e:	e001      	b.n	8044c94 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8044c90:	2300      	movs	r3, #0
 8044c92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8044c94:	697b      	ldr	r3, [r7, #20]
	}
 8044c96:	4618      	mov	r0, r3
 8044c98:	3728      	adds	r7, #40	; 0x28
 8044c9a:	46bd      	mov	sp, r7
 8044c9c:	bd80      	pop	{r7, pc}

08044c9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8044c9e:	b580      	push	{r7, lr}
 8044ca0:	b08c      	sub	sp, #48	; 0x30
 8044ca2:	af04      	add	r7, sp, #16
 8044ca4:	60f8      	str	r0, [r7, #12]
 8044ca6:	60b9      	str	r1, [r7, #8]
 8044ca8:	603b      	str	r3, [r7, #0]
 8044caa:	4613      	mov	r3, r2
 8044cac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8044cae:	88fb      	ldrh	r3, [r7, #6]
 8044cb0:	009b      	lsls	r3, r3, #2
 8044cb2:	4618      	mov	r0, r3
 8044cb4:	f000 feea 	bl	8045a8c <pvPortMalloc>
 8044cb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8044cba:	697b      	ldr	r3, [r7, #20]
 8044cbc:	2b00      	cmp	r3, #0
 8044cbe:	d00e      	beq.n	8044cde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8044cc0:	20a0      	movs	r0, #160	; 0xa0
 8044cc2:	f000 fee3 	bl	8045a8c <pvPortMalloc>
 8044cc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8044cc8:	69fb      	ldr	r3, [r7, #28]
 8044cca:	2b00      	cmp	r3, #0
 8044ccc:	d003      	beq.n	8044cd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8044cce:	69fb      	ldr	r3, [r7, #28]
 8044cd0:	697a      	ldr	r2, [r7, #20]
 8044cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8044cd4:	e005      	b.n	8044ce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8044cd6:	6978      	ldr	r0, [r7, #20]
 8044cd8:	f000 ffa2 	bl	8045c20 <vPortFree>
 8044cdc:	e001      	b.n	8044ce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8044cde:	2300      	movs	r3, #0
 8044ce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8044ce2:	69fb      	ldr	r3, [r7, #28]
 8044ce4:	2b00      	cmp	r3, #0
 8044ce6:	d017      	beq.n	8044d18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8044ce8:	69fb      	ldr	r3, [r7, #28]
 8044cea:	2200      	movs	r2, #0
 8044cec:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8044cf0:	88fa      	ldrh	r2, [r7, #6]
 8044cf2:	2300      	movs	r3, #0
 8044cf4:	9303      	str	r3, [sp, #12]
 8044cf6:	69fb      	ldr	r3, [r7, #28]
 8044cf8:	9302      	str	r3, [sp, #8]
 8044cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044cfc:	9301      	str	r3, [sp, #4]
 8044cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044d00:	9300      	str	r3, [sp, #0]
 8044d02:	683b      	ldr	r3, [r7, #0]
 8044d04:	68b9      	ldr	r1, [r7, #8]
 8044d06:	68f8      	ldr	r0, [r7, #12]
 8044d08:	f000 f80e 	bl	8044d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8044d0c:	69f8      	ldr	r0, [r7, #28]
 8044d0e:	f000 f8ab 	bl	8044e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8044d12:	2301      	movs	r3, #1
 8044d14:	61bb      	str	r3, [r7, #24]
 8044d16:	e002      	b.n	8044d1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8044d18:	f04f 33ff 	mov.w	r3, #4294967295
 8044d1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8044d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8044d20:	4618      	mov	r0, r3
 8044d22:	3720      	adds	r7, #32
 8044d24:	46bd      	mov	sp, r7
 8044d26:	bd80      	pop	{r7, pc}

08044d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8044d28:	b580      	push	{r7, lr}
 8044d2a:	b088      	sub	sp, #32
 8044d2c:	af00      	add	r7, sp, #0
 8044d2e:	60f8      	str	r0, [r7, #12]
 8044d30:	60b9      	str	r1, [r7, #8]
 8044d32:	607a      	str	r2, [r7, #4]
 8044d34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8044d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8044d3a:	6879      	ldr	r1, [r7, #4]
 8044d3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8044d40:	440b      	add	r3, r1
 8044d42:	009b      	lsls	r3, r3, #2
 8044d44:	4413      	add	r3, r2
 8044d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8044d48:	69bb      	ldr	r3, [r7, #24]
 8044d4a:	f023 0307 	bic.w	r3, r3, #7
 8044d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8044d50:	69bb      	ldr	r3, [r7, #24]
 8044d52:	f003 0307 	and.w	r3, r3, #7
 8044d56:	2b00      	cmp	r3, #0
 8044d58:	d00c      	beq.n	8044d74 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8044d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8044d5e:	b672      	cpsid	i
 8044d60:	f383 8811 	msr	BASEPRI, r3
 8044d64:	f3bf 8f6f 	isb	sy
 8044d68:	f3bf 8f4f 	dsb	sy
 8044d6c:	b662      	cpsie	i
 8044d6e:	617b      	str	r3, [r7, #20]
}
 8044d70:	bf00      	nop
 8044d72:	e7fe      	b.n	8044d72 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8044d74:	68bb      	ldr	r3, [r7, #8]
 8044d76:	2b00      	cmp	r3, #0
 8044d78:	d01f      	beq.n	8044dba <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8044d7a:	2300      	movs	r3, #0
 8044d7c:	61fb      	str	r3, [r7, #28]
 8044d7e:	e012      	b.n	8044da6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8044d80:	68ba      	ldr	r2, [r7, #8]
 8044d82:	69fb      	ldr	r3, [r7, #28]
 8044d84:	4413      	add	r3, r2
 8044d86:	7819      	ldrb	r1, [r3, #0]
 8044d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044d8a:	69fb      	ldr	r3, [r7, #28]
 8044d8c:	4413      	add	r3, r2
 8044d8e:	3334      	adds	r3, #52	; 0x34
 8044d90:	460a      	mov	r2, r1
 8044d92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8044d94:	68ba      	ldr	r2, [r7, #8]
 8044d96:	69fb      	ldr	r3, [r7, #28]
 8044d98:	4413      	add	r3, r2
 8044d9a:	781b      	ldrb	r3, [r3, #0]
 8044d9c:	2b00      	cmp	r3, #0
 8044d9e:	d006      	beq.n	8044dae <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8044da0:	69fb      	ldr	r3, [r7, #28]
 8044da2:	3301      	adds	r3, #1
 8044da4:	61fb      	str	r3, [r7, #28]
 8044da6:	69fb      	ldr	r3, [r7, #28]
 8044da8:	2b0f      	cmp	r3, #15
 8044daa:	d9e9      	bls.n	8044d80 <prvInitialiseNewTask+0x58>
 8044dac:	e000      	b.n	8044db0 <prvInitialiseNewTask+0x88>
			{
				break;
 8044dae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8044db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044db2:	2200      	movs	r2, #0
 8044db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8044db8:	e003      	b.n	8044dc2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8044dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044dbc:	2200      	movs	r2, #0
 8044dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8044dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044dc4:	2b06      	cmp	r3, #6
 8044dc6:	d901      	bls.n	8044dcc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8044dc8:	2306      	movs	r3, #6
 8044dca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8044dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8044dd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8044dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8044dd6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8044dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044dda:	2200      	movs	r2, #0
 8044ddc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8044dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044de0:	3304      	adds	r3, #4
 8044de2:	4618      	mov	r0, r3
 8044de4:	f7ff fe64 	bl	8044ab0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8044de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044dea:	3318      	adds	r3, #24
 8044dec:	4618      	mov	r0, r3
 8044dee:	f7ff fe5f 	bl	8044ab0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8044df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044df6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8044df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044dfa:	f1c3 0207 	rsb	r2, r3, #7
 8044dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8044e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044e06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8044e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e0a:	2200      	movs	r2, #0
 8044e0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8044e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e12:	2200      	movs	r2, #0
 8044e14:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8044e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e1a:	334c      	adds	r3, #76	; 0x4c
 8044e1c:	224c      	movs	r2, #76	; 0x4c
 8044e1e:	2100      	movs	r1, #0
 8044e20:	4618      	mov	r0, r3
 8044e22:	f001 fa0d 	bl	8046240 <memset>
 8044e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e28:	4a0c      	ldr	r2, [pc, #48]	; (8044e5c <prvInitialiseNewTask+0x134>)
 8044e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8044e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e2e:	4a0c      	ldr	r2, [pc, #48]	; (8044e60 <prvInitialiseNewTask+0x138>)
 8044e30:	655a      	str	r2, [r3, #84]	; 0x54
 8044e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e34:	4a0b      	ldr	r2, [pc, #44]	; (8044e64 <prvInitialiseNewTask+0x13c>)
 8044e36:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8044e38:	683a      	ldr	r2, [r7, #0]
 8044e3a:	68f9      	ldr	r1, [r7, #12]
 8044e3c:	69b8      	ldr	r0, [r7, #24]
 8044e3e:	f000 fc2d 	bl	804569c <pxPortInitialiseStack>
 8044e42:	4602      	mov	r2, r0
 8044e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044e46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8044e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044e4a:	2b00      	cmp	r3, #0
 8044e4c:	d002      	beq.n	8044e54 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8044e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044e52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8044e54:	bf00      	nop
 8044e56:	3720      	adds	r7, #32
 8044e58:	46bd      	mov	sp, r7
 8044e5a:	bd80      	pop	{r7, pc}
 8044e5c:	2001b41c 	.word	0x2001b41c
 8044e60:	2001b484 	.word	0x2001b484
 8044e64:	2001b4ec 	.word	0x2001b4ec

08044e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8044e68:	b580      	push	{r7, lr}
 8044e6a:	b082      	sub	sp, #8
 8044e6c:	af00      	add	r7, sp, #0
 8044e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8044e70:	f000 fd24 	bl	80458bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8044e74:	4b2a      	ldr	r3, [pc, #168]	; (8044f20 <prvAddNewTaskToReadyList+0xb8>)
 8044e76:	681b      	ldr	r3, [r3, #0]
 8044e78:	3301      	adds	r3, #1
 8044e7a:	4a29      	ldr	r2, [pc, #164]	; (8044f20 <prvAddNewTaskToReadyList+0xb8>)
 8044e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8044e7e:	4b29      	ldr	r3, [pc, #164]	; (8044f24 <prvAddNewTaskToReadyList+0xbc>)
 8044e80:	681b      	ldr	r3, [r3, #0]
 8044e82:	2b00      	cmp	r3, #0
 8044e84:	d109      	bne.n	8044e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8044e86:	4a27      	ldr	r2, [pc, #156]	; (8044f24 <prvAddNewTaskToReadyList+0xbc>)
 8044e88:	687b      	ldr	r3, [r7, #4]
 8044e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8044e8c:	4b24      	ldr	r3, [pc, #144]	; (8044f20 <prvAddNewTaskToReadyList+0xb8>)
 8044e8e:	681b      	ldr	r3, [r3, #0]
 8044e90:	2b01      	cmp	r3, #1
 8044e92:	d110      	bne.n	8044eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8044e94:	f000 fad8 	bl	8045448 <prvInitialiseTaskLists>
 8044e98:	e00d      	b.n	8044eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8044e9a:	4b23      	ldr	r3, [pc, #140]	; (8044f28 <prvAddNewTaskToReadyList+0xc0>)
 8044e9c:	681b      	ldr	r3, [r3, #0]
 8044e9e:	2b00      	cmp	r3, #0
 8044ea0:	d109      	bne.n	8044eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8044ea2:	4b20      	ldr	r3, [pc, #128]	; (8044f24 <prvAddNewTaskToReadyList+0xbc>)
 8044ea4:	681b      	ldr	r3, [r3, #0]
 8044ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044ea8:	687b      	ldr	r3, [r7, #4]
 8044eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044eac:	429a      	cmp	r2, r3
 8044eae:	d802      	bhi.n	8044eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8044eb0:	4a1c      	ldr	r2, [pc, #112]	; (8044f24 <prvAddNewTaskToReadyList+0xbc>)
 8044eb2:	687b      	ldr	r3, [r7, #4]
 8044eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8044eb6:	4b1d      	ldr	r3, [pc, #116]	; (8044f2c <prvAddNewTaskToReadyList+0xc4>)
 8044eb8:	681b      	ldr	r3, [r3, #0]
 8044eba:	3301      	adds	r3, #1
 8044ebc:	4a1b      	ldr	r2, [pc, #108]	; (8044f2c <prvAddNewTaskToReadyList+0xc4>)
 8044ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8044ec0:	687b      	ldr	r3, [r7, #4]
 8044ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044ec4:	2201      	movs	r2, #1
 8044ec6:	409a      	lsls	r2, r3
 8044ec8:	4b19      	ldr	r3, [pc, #100]	; (8044f30 <prvAddNewTaskToReadyList+0xc8>)
 8044eca:	681b      	ldr	r3, [r3, #0]
 8044ecc:	4313      	orrs	r3, r2
 8044ece:	4a18      	ldr	r2, [pc, #96]	; (8044f30 <prvAddNewTaskToReadyList+0xc8>)
 8044ed0:	6013      	str	r3, [r2, #0]
 8044ed2:	687b      	ldr	r3, [r7, #4]
 8044ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044ed6:	4613      	mov	r3, r2
 8044ed8:	009b      	lsls	r3, r3, #2
 8044eda:	4413      	add	r3, r2
 8044edc:	009b      	lsls	r3, r3, #2
 8044ede:	4a15      	ldr	r2, [pc, #84]	; (8044f34 <prvAddNewTaskToReadyList+0xcc>)
 8044ee0:	441a      	add	r2, r3
 8044ee2:	687b      	ldr	r3, [r7, #4]
 8044ee4:	3304      	adds	r3, #4
 8044ee6:	4619      	mov	r1, r3
 8044ee8:	4610      	mov	r0, r2
 8044eea:	f7ff fdee 	bl	8044aca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8044eee:	f000 fd19 	bl	8045924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8044ef2:	4b0d      	ldr	r3, [pc, #52]	; (8044f28 <prvAddNewTaskToReadyList+0xc0>)
 8044ef4:	681b      	ldr	r3, [r3, #0]
 8044ef6:	2b00      	cmp	r3, #0
 8044ef8:	d00e      	beq.n	8044f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8044efa:	4b0a      	ldr	r3, [pc, #40]	; (8044f24 <prvAddNewTaskToReadyList+0xbc>)
 8044efc:	681b      	ldr	r3, [r3, #0]
 8044efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8044f00:	687b      	ldr	r3, [r7, #4]
 8044f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044f04:	429a      	cmp	r2, r3
 8044f06:	d207      	bcs.n	8044f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8044f08:	4b0b      	ldr	r3, [pc, #44]	; (8044f38 <prvAddNewTaskToReadyList+0xd0>)
 8044f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8044f0e:	601a      	str	r2, [r3, #0]
 8044f10:	f3bf 8f4f 	dsb	sy
 8044f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8044f18:	bf00      	nop
 8044f1a:	3708      	adds	r7, #8
 8044f1c:	46bd      	mov	sp, r7
 8044f1e:	bd80      	pop	{r7, pc}
 8044f20:	200023d0 	.word	0x200023d0
 8044f24:	200022d0 	.word	0x200022d0
 8044f28:	200023dc 	.word	0x200023dc
 8044f2c:	200023ec 	.word	0x200023ec
 8044f30:	200023d8 	.word	0x200023d8
 8044f34:	200022d4 	.word	0x200022d4
 8044f38:	e000ed04 	.word	0xe000ed04

08044f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8044f3c:	b580      	push	{r7, lr}
 8044f3e:	b084      	sub	sp, #16
 8044f40:	af00      	add	r7, sp, #0
 8044f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8044f44:	2300      	movs	r3, #0
 8044f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8044f48:	687b      	ldr	r3, [r7, #4]
 8044f4a:	2b00      	cmp	r3, #0
 8044f4c:	d019      	beq.n	8044f82 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8044f4e:	4b14      	ldr	r3, [pc, #80]	; (8044fa0 <vTaskDelay+0x64>)
 8044f50:	681b      	ldr	r3, [r3, #0]
 8044f52:	2b00      	cmp	r3, #0
 8044f54:	d00c      	beq.n	8044f70 <vTaskDelay+0x34>
	__asm volatile
 8044f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8044f5a:	b672      	cpsid	i
 8044f5c:	f383 8811 	msr	BASEPRI, r3
 8044f60:	f3bf 8f6f 	isb	sy
 8044f64:	f3bf 8f4f 	dsb	sy
 8044f68:	b662      	cpsie	i
 8044f6a:	60bb      	str	r3, [r7, #8]
}
 8044f6c:	bf00      	nop
 8044f6e:	e7fe      	b.n	8044f6e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8044f70:	f000 f888 	bl	8045084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8044f74:	2100      	movs	r1, #0
 8044f76:	6878      	ldr	r0, [r7, #4]
 8044f78:	f000 fb2a 	bl	80455d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8044f7c:	f000 f890 	bl	80450a0 <xTaskResumeAll>
 8044f80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8044f82:	68fb      	ldr	r3, [r7, #12]
 8044f84:	2b00      	cmp	r3, #0
 8044f86:	d107      	bne.n	8044f98 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8044f88:	4b06      	ldr	r3, [pc, #24]	; (8044fa4 <vTaskDelay+0x68>)
 8044f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8044f8e:	601a      	str	r2, [r3, #0]
 8044f90:	f3bf 8f4f 	dsb	sy
 8044f94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8044f98:	bf00      	nop
 8044f9a:	3710      	adds	r7, #16
 8044f9c:	46bd      	mov	sp, r7
 8044f9e:	bd80      	pop	{r7, pc}
 8044fa0:	200023f8 	.word	0x200023f8
 8044fa4:	e000ed04 	.word	0xe000ed04

08044fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8044fa8:	b580      	push	{r7, lr}
 8044faa:	b08a      	sub	sp, #40	; 0x28
 8044fac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8044fae:	2300      	movs	r3, #0
 8044fb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8044fb2:	2300      	movs	r3, #0
 8044fb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8044fb6:	463a      	mov	r2, r7
 8044fb8:	1d39      	adds	r1, r7, #4
 8044fba:	f107 0308 	add.w	r3, r7, #8
 8044fbe:	4618      	mov	r0, r3
 8044fc0:	f7fb fb48 	bl	8040654 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8044fc4:	6839      	ldr	r1, [r7, #0]
 8044fc6:	687b      	ldr	r3, [r7, #4]
 8044fc8:	68ba      	ldr	r2, [r7, #8]
 8044fca:	9202      	str	r2, [sp, #8]
 8044fcc:	9301      	str	r3, [sp, #4]
 8044fce:	2300      	movs	r3, #0
 8044fd0:	9300      	str	r3, [sp, #0]
 8044fd2:	2300      	movs	r3, #0
 8044fd4:	460a      	mov	r2, r1
 8044fd6:	4923      	ldr	r1, [pc, #140]	; (8045064 <vTaskStartScheduler+0xbc>)
 8044fd8:	4823      	ldr	r0, [pc, #140]	; (8045068 <vTaskStartScheduler+0xc0>)
 8044fda:	f7ff fdfd 	bl	8044bd8 <xTaskCreateStatic>
 8044fde:	4603      	mov	r3, r0
 8044fe0:	4a22      	ldr	r2, [pc, #136]	; (804506c <vTaskStartScheduler+0xc4>)
 8044fe2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8044fe4:	4b21      	ldr	r3, [pc, #132]	; (804506c <vTaskStartScheduler+0xc4>)
 8044fe6:	681b      	ldr	r3, [r3, #0]
 8044fe8:	2b00      	cmp	r3, #0
 8044fea:	d002      	beq.n	8044ff2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8044fec:	2301      	movs	r3, #1
 8044fee:	617b      	str	r3, [r7, #20]
 8044ff0:	e001      	b.n	8044ff6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8044ff2:	2300      	movs	r3, #0
 8044ff4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8044ff6:	697b      	ldr	r3, [r7, #20]
 8044ff8:	2b01      	cmp	r3, #1
 8044ffa:	d11d      	bne.n	8045038 <vTaskStartScheduler+0x90>
	__asm volatile
 8044ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045000:	b672      	cpsid	i
 8045002:	f383 8811 	msr	BASEPRI, r3
 8045006:	f3bf 8f6f 	isb	sy
 804500a:	f3bf 8f4f 	dsb	sy
 804500e:	b662      	cpsie	i
 8045010:	613b      	str	r3, [r7, #16]
}
 8045012:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8045014:	4b16      	ldr	r3, [pc, #88]	; (8045070 <vTaskStartScheduler+0xc8>)
 8045016:	681b      	ldr	r3, [r3, #0]
 8045018:	334c      	adds	r3, #76	; 0x4c
 804501a:	4a16      	ldr	r2, [pc, #88]	; (8045074 <vTaskStartScheduler+0xcc>)
 804501c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 804501e:	4b16      	ldr	r3, [pc, #88]	; (8045078 <vTaskStartScheduler+0xd0>)
 8045020:	f04f 32ff 	mov.w	r2, #4294967295
 8045024:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8045026:	4b15      	ldr	r3, [pc, #84]	; (804507c <vTaskStartScheduler+0xd4>)
 8045028:	2201      	movs	r2, #1
 804502a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 804502c:	4b14      	ldr	r3, [pc, #80]	; (8045080 <vTaskStartScheduler+0xd8>)
 804502e:	2200      	movs	r2, #0
 8045030:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8045032:	f000 fbc5 	bl	80457c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8045036:	e010      	b.n	804505a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8045038:	697b      	ldr	r3, [r7, #20]
 804503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804503e:	d10c      	bne.n	804505a <vTaskStartScheduler+0xb2>
	__asm volatile
 8045040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045044:	b672      	cpsid	i
 8045046:	f383 8811 	msr	BASEPRI, r3
 804504a:	f3bf 8f6f 	isb	sy
 804504e:	f3bf 8f4f 	dsb	sy
 8045052:	b662      	cpsie	i
 8045054:	60fb      	str	r3, [r7, #12]
}
 8045056:	bf00      	nop
 8045058:	e7fe      	b.n	8045058 <vTaskStartScheduler+0xb0>
}
 804505a:	bf00      	nop
 804505c:	3718      	adds	r7, #24
 804505e:	46bd      	mov	sp, r7
 8045060:	bd80      	pop	{r7, pc}
 8045062:	bf00      	nop
 8045064:	080468d8 	.word	0x080468d8
 8045068:	08045419 	.word	0x08045419
 804506c:	200023f4 	.word	0x200023f4
 8045070:	200022d0 	.word	0x200022d0
 8045074:	20000068 	.word	0x20000068
 8045078:	200023f0 	.word	0x200023f0
 804507c:	200023dc 	.word	0x200023dc
 8045080:	200023d4 	.word	0x200023d4

08045084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8045084:	b480      	push	{r7}
 8045086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8045088:	4b04      	ldr	r3, [pc, #16]	; (804509c <vTaskSuspendAll+0x18>)
 804508a:	681b      	ldr	r3, [r3, #0]
 804508c:	3301      	adds	r3, #1
 804508e:	4a03      	ldr	r2, [pc, #12]	; (804509c <vTaskSuspendAll+0x18>)
 8045090:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8045092:	bf00      	nop
 8045094:	46bd      	mov	sp, r7
 8045096:	f85d 7b04 	ldr.w	r7, [sp], #4
 804509a:	4770      	bx	lr
 804509c:	200023f8 	.word	0x200023f8

080450a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80450a0:	b580      	push	{r7, lr}
 80450a2:	b084      	sub	sp, #16
 80450a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80450a6:	2300      	movs	r3, #0
 80450a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80450aa:	2300      	movs	r3, #0
 80450ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80450ae:	4b42      	ldr	r3, [pc, #264]	; (80451b8 <xTaskResumeAll+0x118>)
 80450b0:	681b      	ldr	r3, [r3, #0]
 80450b2:	2b00      	cmp	r3, #0
 80450b4:	d10c      	bne.n	80450d0 <xTaskResumeAll+0x30>
	__asm volatile
 80450b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80450ba:	b672      	cpsid	i
 80450bc:	f383 8811 	msr	BASEPRI, r3
 80450c0:	f3bf 8f6f 	isb	sy
 80450c4:	f3bf 8f4f 	dsb	sy
 80450c8:	b662      	cpsie	i
 80450ca:	603b      	str	r3, [r7, #0]
}
 80450cc:	bf00      	nop
 80450ce:	e7fe      	b.n	80450ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80450d0:	f000 fbf4 	bl	80458bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80450d4:	4b38      	ldr	r3, [pc, #224]	; (80451b8 <xTaskResumeAll+0x118>)
 80450d6:	681b      	ldr	r3, [r3, #0]
 80450d8:	3b01      	subs	r3, #1
 80450da:	4a37      	ldr	r2, [pc, #220]	; (80451b8 <xTaskResumeAll+0x118>)
 80450dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80450de:	4b36      	ldr	r3, [pc, #216]	; (80451b8 <xTaskResumeAll+0x118>)
 80450e0:	681b      	ldr	r3, [r3, #0]
 80450e2:	2b00      	cmp	r3, #0
 80450e4:	d161      	bne.n	80451aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80450e6:	4b35      	ldr	r3, [pc, #212]	; (80451bc <xTaskResumeAll+0x11c>)
 80450e8:	681b      	ldr	r3, [r3, #0]
 80450ea:	2b00      	cmp	r3, #0
 80450ec:	d05d      	beq.n	80451aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80450ee:	e02e      	b.n	804514e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80450f0:	4b33      	ldr	r3, [pc, #204]	; (80451c0 <xTaskResumeAll+0x120>)
 80450f2:	68db      	ldr	r3, [r3, #12]
 80450f4:	68db      	ldr	r3, [r3, #12]
 80450f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80450f8:	68fb      	ldr	r3, [r7, #12]
 80450fa:	3318      	adds	r3, #24
 80450fc:	4618      	mov	r0, r3
 80450fe:	f7ff fd41 	bl	8044b84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8045102:	68fb      	ldr	r3, [r7, #12]
 8045104:	3304      	adds	r3, #4
 8045106:	4618      	mov	r0, r3
 8045108:	f7ff fd3c 	bl	8044b84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 804510c:	68fb      	ldr	r3, [r7, #12]
 804510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045110:	2201      	movs	r2, #1
 8045112:	409a      	lsls	r2, r3
 8045114:	4b2b      	ldr	r3, [pc, #172]	; (80451c4 <xTaskResumeAll+0x124>)
 8045116:	681b      	ldr	r3, [r3, #0]
 8045118:	4313      	orrs	r3, r2
 804511a:	4a2a      	ldr	r2, [pc, #168]	; (80451c4 <xTaskResumeAll+0x124>)
 804511c:	6013      	str	r3, [r2, #0]
 804511e:	68fb      	ldr	r3, [r7, #12]
 8045120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045122:	4613      	mov	r3, r2
 8045124:	009b      	lsls	r3, r3, #2
 8045126:	4413      	add	r3, r2
 8045128:	009b      	lsls	r3, r3, #2
 804512a:	4a27      	ldr	r2, [pc, #156]	; (80451c8 <xTaskResumeAll+0x128>)
 804512c:	441a      	add	r2, r3
 804512e:	68fb      	ldr	r3, [r7, #12]
 8045130:	3304      	adds	r3, #4
 8045132:	4619      	mov	r1, r3
 8045134:	4610      	mov	r0, r2
 8045136:	f7ff fcc8 	bl	8044aca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 804513a:	68fb      	ldr	r3, [r7, #12]
 804513c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804513e:	4b23      	ldr	r3, [pc, #140]	; (80451cc <xTaskResumeAll+0x12c>)
 8045140:	681b      	ldr	r3, [r3, #0]
 8045142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045144:	429a      	cmp	r2, r3
 8045146:	d302      	bcc.n	804514e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8045148:	4b21      	ldr	r3, [pc, #132]	; (80451d0 <xTaskResumeAll+0x130>)
 804514a:	2201      	movs	r2, #1
 804514c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 804514e:	4b1c      	ldr	r3, [pc, #112]	; (80451c0 <xTaskResumeAll+0x120>)
 8045150:	681b      	ldr	r3, [r3, #0]
 8045152:	2b00      	cmp	r3, #0
 8045154:	d1cc      	bne.n	80450f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8045156:	68fb      	ldr	r3, [r7, #12]
 8045158:	2b00      	cmp	r3, #0
 804515a:	d001      	beq.n	8045160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 804515c:	f000 fa18 	bl	8045590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8045160:	4b1c      	ldr	r3, [pc, #112]	; (80451d4 <xTaskResumeAll+0x134>)
 8045162:	681b      	ldr	r3, [r3, #0]
 8045164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8045166:	687b      	ldr	r3, [r7, #4]
 8045168:	2b00      	cmp	r3, #0
 804516a:	d010      	beq.n	804518e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 804516c:	f000 f836 	bl	80451dc <xTaskIncrementTick>
 8045170:	4603      	mov	r3, r0
 8045172:	2b00      	cmp	r3, #0
 8045174:	d002      	beq.n	804517c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8045176:	4b16      	ldr	r3, [pc, #88]	; (80451d0 <xTaskResumeAll+0x130>)
 8045178:	2201      	movs	r2, #1
 804517a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 804517c:	687b      	ldr	r3, [r7, #4]
 804517e:	3b01      	subs	r3, #1
 8045180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8045182:	687b      	ldr	r3, [r7, #4]
 8045184:	2b00      	cmp	r3, #0
 8045186:	d1f1      	bne.n	804516c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8045188:	4b12      	ldr	r3, [pc, #72]	; (80451d4 <xTaskResumeAll+0x134>)
 804518a:	2200      	movs	r2, #0
 804518c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 804518e:	4b10      	ldr	r3, [pc, #64]	; (80451d0 <xTaskResumeAll+0x130>)
 8045190:	681b      	ldr	r3, [r3, #0]
 8045192:	2b00      	cmp	r3, #0
 8045194:	d009      	beq.n	80451aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8045196:	2301      	movs	r3, #1
 8045198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 804519a:	4b0f      	ldr	r3, [pc, #60]	; (80451d8 <xTaskResumeAll+0x138>)
 804519c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80451a0:	601a      	str	r2, [r3, #0]
 80451a2:	f3bf 8f4f 	dsb	sy
 80451a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80451aa:	f000 fbbb 	bl	8045924 <vPortExitCritical>

	return xAlreadyYielded;
 80451ae:	68bb      	ldr	r3, [r7, #8]
}
 80451b0:	4618      	mov	r0, r3
 80451b2:	3710      	adds	r7, #16
 80451b4:	46bd      	mov	sp, r7
 80451b6:	bd80      	pop	{r7, pc}
 80451b8:	200023f8 	.word	0x200023f8
 80451bc:	200023d0 	.word	0x200023d0
 80451c0:	20002390 	.word	0x20002390
 80451c4:	200023d8 	.word	0x200023d8
 80451c8:	200022d4 	.word	0x200022d4
 80451cc:	200022d0 	.word	0x200022d0
 80451d0:	200023e4 	.word	0x200023e4
 80451d4:	200023e0 	.word	0x200023e0
 80451d8:	e000ed04 	.word	0xe000ed04

080451dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80451dc:	b580      	push	{r7, lr}
 80451de:	b086      	sub	sp, #24
 80451e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80451e2:	2300      	movs	r3, #0
 80451e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80451e6:	4b4f      	ldr	r3, [pc, #316]	; (8045324 <xTaskIncrementTick+0x148>)
 80451e8:	681b      	ldr	r3, [r3, #0]
 80451ea:	2b00      	cmp	r3, #0
 80451ec:	f040 808a 	bne.w	8045304 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80451f0:	4b4d      	ldr	r3, [pc, #308]	; (8045328 <xTaskIncrementTick+0x14c>)
 80451f2:	681b      	ldr	r3, [r3, #0]
 80451f4:	3301      	adds	r3, #1
 80451f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80451f8:	4a4b      	ldr	r2, [pc, #300]	; (8045328 <xTaskIncrementTick+0x14c>)
 80451fa:	693b      	ldr	r3, [r7, #16]
 80451fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80451fe:	693b      	ldr	r3, [r7, #16]
 8045200:	2b00      	cmp	r3, #0
 8045202:	d122      	bne.n	804524a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8045204:	4b49      	ldr	r3, [pc, #292]	; (804532c <xTaskIncrementTick+0x150>)
 8045206:	681b      	ldr	r3, [r3, #0]
 8045208:	681b      	ldr	r3, [r3, #0]
 804520a:	2b00      	cmp	r3, #0
 804520c:	d00c      	beq.n	8045228 <xTaskIncrementTick+0x4c>
	__asm volatile
 804520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045212:	b672      	cpsid	i
 8045214:	f383 8811 	msr	BASEPRI, r3
 8045218:	f3bf 8f6f 	isb	sy
 804521c:	f3bf 8f4f 	dsb	sy
 8045220:	b662      	cpsie	i
 8045222:	603b      	str	r3, [r7, #0]
}
 8045224:	bf00      	nop
 8045226:	e7fe      	b.n	8045226 <xTaskIncrementTick+0x4a>
 8045228:	4b40      	ldr	r3, [pc, #256]	; (804532c <xTaskIncrementTick+0x150>)
 804522a:	681b      	ldr	r3, [r3, #0]
 804522c:	60fb      	str	r3, [r7, #12]
 804522e:	4b40      	ldr	r3, [pc, #256]	; (8045330 <xTaskIncrementTick+0x154>)
 8045230:	681b      	ldr	r3, [r3, #0]
 8045232:	4a3e      	ldr	r2, [pc, #248]	; (804532c <xTaskIncrementTick+0x150>)
 8045234:	6013      	str	r3, [r2, #0]
 8045236:	4a3e      	ldr	r2, [pc, #248]	; (8045330 <xTaskIncrementTick+0x154>)
 8045238:	68fb      	ldr	r3, [r7, #12]
 804523a:	6013      	str	r3, [r2, #0]
 804523c:	4b3d      	ldr	r3, [pc, #244]	; (8045334 <xTaskIncrementTick+0x158>)
 804523e:	681b      	ldr	r3, [r3, #0]
 8045240:	3301      	adds	r3, #1
 8045242:	4a3c      	ldr	r2, [pc, #240]	; (8045334 <xTaskIncrementTick+0x158>)
 8045244:	6013      	str	r3, [r2, #0]
 8045246:	f000 f9a3 	bl	8045590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 804524a:	4b3b      	ldr	r3, [pc, #236]	; (8045338 <xTaskIncrementTick+0x15c>)
 804524c:	681b      	ldr	r3, [r3, #0]
 804524e:	693a      	ldr	r2, [r7, #16]
 8045250:	429a      	cmp	r2, r3
 8045252:	d348      	bcc.n	80452e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8045254:	4b35      	ldr	r3, [pc, #212]	; (804532c <xTaskIncrementTick+0x150>)
 8045256:	681b      	ldr	r3, [r3, #0]
 8045258:	681b      	ldr	r3, [r3, #0]
 804525a:	2b00      	cmp	r3, #0
 804525c:	d104      	bne.n	8045268 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804525e:	4b36      	ldr	r3, [pc, #216]	; (8045338 <xTaskIncrementTick+0x15c>)
 8045260:	f04f 32ff 	mov.w	r2, #4294967295
 8045264:	601a      	str	r2, [r3, #0]
					break;
 8045266:	e03e      	b.n	80452e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8045268:	4b30      	ldr	r3, [pc, #192]	; (804532c <xTaskIncrementTick+0x150>)
 804526a:	681b      	ldr	r3, [r3, #0]
 804526c:	68db      	ldr	r3, [r3, #12]
 804526e:	68db      	ldr	r3, [r3, #12]
 8045270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8045272:	68bb      	ldr	r3, [r7, #8]
 8045274:	685b      	ldr	r3, [r3, #4]
 8045276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8045278:	693a      	ldr	r2, [r7, #16]
 804527a:	687b      	ldr	r3, [r7, #4]
 804527c:	429a      	cmp	r2, r3
 804527e:	d203      	bcs.n	8045288 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8045280:	4a2d      	ldr	r2, [pc, #180]	; (8045338 <xTaskIncrementTick+0x15c>)
 8045282:	687b      	ldr	r3, [r7, #4]
 8045284:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8045286:	e02e      	b.n	80452e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8045288:	68bb      	ldr	r3, [r7, #8]
 804528a:	3304      	adds	r3, #4
 804528c:	4618      	mov	r0, r3
 804528e:	f7ff fc79 	bl	8044b84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8045292:	68bb      	ldr	r3, [r7, #8]
 8045294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045296:	2b00      	cmp	r3, #0
 8045298:	d004      	beq.n	80452a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804529a:	68bb      	ldr	r3, [r7, #8]
 804529c:	3318      	adds	r3, #24
 804529e:	4618      	mov	r0, r3
 80452a0:	f7ff fc70 	bl	8044b84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80452a4:	68bb      	ldr	r3, [r7, #8]
 80452a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80452a8:	2201      	movs	r2, #1
 80452aa:	409a      	lsls	r2, r3
 80452ac:	4b23      	ldr	r3, [pc, #140]	; (804533c <xTaskIncrementTick+0x160>)
 80452ae:	681b      	ldr	r3, [r3, #0]
 80452b0:	4313      	orrs	r3, r2
 80452b2:	4a22      	ldr	r2, [pc, #136]	; (804533c <xTaskIncrementTick+0x160>)
 80452b4:	6013      	str	r3, [r2, #0]
 80452b6:	68bb      	ldr	r3, [r7, #8]
 80452b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80452ba:	4613      	mov	r3, r2
 80452bc:	009b      	lsls	r3, r3, #2
 80452be:	4413      	add	r3, r2
 80452c0:	009b      	lsls	r3, r3, #2
 80452c2:	4a1f      	ldr	r2, [pc, #124]	; (8045340 <xTaskIncrementTick+0x164>)
 80452c4:	441a      	add	r2, r3
 80452c6:	68bb      	ldr	r3, [r7, #8]
 80452c8:	3304      	adds	r3, #4
 80452ca:	4619      	mov	r1, r3
 80452cc:	4610      	mov	r0, r2
 80452ce:	f7ff fbfc 	bl	8044aca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80452d2:	68bb      	ldr	r3, [r7, #8]
 80452d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80452d6:	4b1b      	ldr	r3, [pc, #108]	; (8045344 <xTaskIncrementTick+0x168>)
 80452d8:	681b      	ldr	r3, [r3, #0]
 80452da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80452dc:	429a      	cmp	r2, r3
 80452de:	d3b9      	bcc.n	8045254 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80452e0:	2301      	movs	r3, #1
 80452e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80452e4:	e7b6      	b.n	8045254 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80452e6:	4b17      	ldr	r3, [pc, #92]	; (8045344 <xTaskIncrementTick+0x168>)
 80452e8:	681b      	ldr	r3, [r3, #0]
 80452ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80452ec:	4914      	ldr	r1, [pc, #80]	; (8045340 <xTaskIncrementTick+0x164>)
 80452ee:	4613      	mov	r3, r2
 80452f0:	009b      	lsls	r3, r3, #2
 80452f2:	4413      	add	r3, r2
 80452f4:	009b      	lsls	r3, r3, #2
 80452f6:	440b      	add	r3, r1
 80452f8:	681b      	ldr	r3, [r3, #0]
 80452fa:	2b01      	cmp	r3, #1
 80452fc:	d907      	bls.n	804530e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80452fe:	2301      	movs	r3, #1
 8045300:	617b      	str	r3, [r7, #20]
 8045302:	e004      	b.n	804530e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8045304:	4b10      	ldr	r3, [pc, #64]	; (8045348 <xTaskIncrementTick+0x16c>)
 8045306:	681b      	ldr	r3, [r3, #0]
 8045308:	3301      	adds	r3, #1
 804530a:	4a0f      	ldr	r2, [pc, #60]	; (8045348 <xTaskIncrementTick+0x16c>)
 804530c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 804530e:	4b0f      	ldr	r3, [pc, #60]	; (804534c <xTaskIncrementTick+0x170>)
 8045310:	681b      	ldr	r3, [r3, #0]
 8045312:	2b00      	cmp	r3, #0
 8045314:	d001      	beq.n	804531a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8045316:	2301      	movs	r3, #1
 8045318:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 804531a:	697b      	ldr	r3, [r7, #20]
}
 804531c:	4618      	mov	r0, r3
 804531e:	3718      	adds	r7, #24
 8045320:	46bd      	mov	sp, r7
 8045322:	bd80      	pop	{r7, pc}
 8045324:	200023f8 	.word	0x200023f8
 8045328:	200023d4 	.word	0x200023d4
 804532c:	20002388 	.word	0x20002388
 8045330:	2000238c 	.word	0x2000238c
 8045334:	200023e8 	.word	0x200023e8
 8045338:	200023f0 	.word	0x200023f0
 804533c:	200023d8 	.word	0x200023d8
 8045340:	200022d4 	.word	0x200022d4
 8045344:	200022d0 	.word	0x200022d0
 8045348:	200023e0 	.word	0x200023e0
 804534c:	200023e4 	.word	0x200023e4

08045350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8045350:	b480      	push	{r7}
 8045352:	b087      	sub	sp, #28
 8045354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8045356:	4b2a      	ldr	r3, [pc, #168]	; (8045400 <vTaskSwitchContext+0xb0>)
 8045358:	681b      	ldr	r3, [r3, #0]
 804535a:	2b00      	cmp	r3, #0
 804535c:	d003      	beq.n	8045366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 804535e:	4b29      	ldr	r3, [pc, #164]	; (8045404 <vTaskSwitchContext+0xb4>)
 8045360:	2201      	movs	r2, #1
 8045362:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8045364:	e046      	b.n	80453f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8045366:	4b27      	ldr	r3, [pc, #156]	; (8045404 <vTaskSwitchContext+0xb4>)
 8045368:	2200      	movs	r2, #0
 804536a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804536c:	4b26      	ldr	r3, [pc, #152]	; (8045408 <vTaskSwitchContext+0xb8>)
 804536e:	681b      	ldr	r3, [r3, #0]
 8045370:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8045372:	68fb      	ldr	r3, [r7, #12]
 8045374:	fab3 f383 	clz	r3, r3
 8045378:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 804537a:	7afb      	ldrb	r3, [r7, #11]
 804537c:	f1c3 031f 	rsb	r3, r3, #31
 8045380:	617b      	str	r3, [r7, #20]
 8045382:	4922      	ldr	r1, [pc, #136]	; (804540c <vTaskSwitchContext+0xbc>)
 8045384:	697a      	ldr	r2, [r7, #20]
 8045386:	4613      	mov	r3, r2
 8045388:	009b      	lsls	r3, r3, #2
 804538a:	4413      	add	r3, r2
 804538c:	009b      	lsls	r3, r3, #2
 804538e:	440b      	add	r3, r1
 8045390:	681b      	ldr	r3, [r3, #0]
 8045392:	2b00      	cmp	r3, #0
 8045394:	d10c      	bne.n	80453b0 <vTaskSwitchContext+0x60>
	__asm volatile
 8045396:	f04f 0350 	mov.w	r3, #80	; 0x50
 804539a:	b672      	cpsid	i
 804539c:	f383 8811 	msr	BASEPRI, r3
 80453a0:	f3bf 8f6f 	isb	sy
 80453a4:	f3bf 8f4f 	dsb	sy
 80453a8:	b662      	cpsie	i
 80453aa:	607b      	str	r3, [r7, #4]
}
 80453ac:	bf00      	nop
 80453ae:	e7fe      	b.n	80453ae <vTaskSwitchContext+0x5e>
 80453b0:	697a      	ldr	r2, [r7, #20]
 80453b2:	4613      	mov	r3, r2
 80453b4:	009b      	lsls	r3, r3, #2
 80453b6:	4413      	add	r3, r2
 80453b8:	009b      	lsls	r3, r3, #2
 80453ba:	4a14      	ldr	r2, [pc, #80]	; (804540c <vTaskSwitchContext+0xbc>)
 80453bc:	4413      	add	r3, r2
 80453be:	613b      	str	r3, [r7, #16]
 80453c0:	693b      	ldr	r3, [r7, #16]
 80453c2:	685b      	ldr	r3, [r3, #4]
 80453c4:	685a      	ldr	r2, [r3, #4]
 80453c6:	693b      	ldr	r3, [r7, #16]
 80453c8:	605a      	str	r2, [r3, #4]
 80453ca:	693b      	ldr	r3, [r7, #16]
 80453cc:	685a      	ldr	r2, [r3, #4]
 80453ce:	693b      	ldr	r3, [r7, #16]
 80453d0:	3308      	adds	r3, #8
 80453d2:	429a      	cmp	r2, r3
 80453d4:	d104      	bne.n	80453e0 <vTaskSwitchContext+0x90>
 80453d6:	693b      	ldr	r3, [r7, #16]
 80453d8:	685b      	ldr	r3, [r3, #4]
 80453da:	685a      	ldr	r2, [r3, #4]
 80453dc:	693b      	ldr	r3, [r7, #16]
 80453de:	605a      	str	r2, [r3, #4]
 80453e0:	693b      	ldr	r3, [r7, #16]
 80453e2:	685b      	ldr	r3, [r3, #4]
 80453e4:	68db      	ldr	r3, [r3, #12]
 80453e6:	4a0a      	ldr	r2, [pc, #40]	; (8045410 <vTaskSwitchContext+0xc0>)
 80453e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80453ea:	4b09      	ldr	r3, [pc, #36]	; (8045410 <vTaskSwitchContext+0xc0>)
 80453ec:	681b      	ldr	r3, [r3, #0]
 80453ee:	334c      	adds	r3, #76	; 0x4c
 80453f0:	4a08      	ldr	r2, [pc, #32]	; (8045414 <vTaskSwitchContext+0xc4>)
 80453f2:	6013      	str	r3, [r2, #0]
}
 80453f4:	bf00      	nop
 80453f6:	371c      	adds	r7, #28
 80453f8:	46bd      	mov	sp, r7
 80453fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80453fe:	4770      	bx	lr
 8045400:	200023f8 	.word	0x200023f8
 8045404:	200023e4 	.word	0x200023e4
 8045408:	200023d8 	.word	0x200023d8
 804540c:	200022d4 	.word	0x200022d4
 8045410:	200022d0 	.word	0x200022d0
 8045414:	20000068 	.word	0x20000068

08045418 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8045418:	b580      	push	{r7, lr}
 804541a:	b082      	sub	sp, #8
 804541c:	af00      	add	r7, sp, #0
 804541e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8045420:	f000 f852 	bl	80454c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8045424:	4b06      	ldr	r3, [pc, #24]	; (8045440 <prvIdleTask+0x28>)
 8045426:	681b      	ldr	r3, [r3, #0]
 8045428:	2b01      	cmp	r3, #1
 804542a:	d9f9      	bls.n	8045420 <prvIdleTask+0x8>
			{
				taskYIELD();
 804542c:	4b05      	ldr	r3, [pc, #20]	; (8045444 <prvIdleTask+0x2c>)
 804542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8045432:	601a      	str	r2, [r3, #0]
 8045434:	f3bf 8f4f 	dsb	sy
 8045438:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 804543c:	e7f0      	b.n	8045420 <prvIdleTask+0x8>
 804543e:	bf00      	nop
 8045440:	200022d4 	.word	0x200022d4
 8045444:	e000ed04 	.word	0xe000ed04

08045448 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8045448:	b580      	push	{r7, lr}
 804544a:	b082      	sub	sp, #8
 804544c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 804544e:	2300      	movs	r3, #0
 8045450:	607b      	str	r3, [r7, #4]
 8045452:	e00c      	b.n	804546e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8045454:	687a      	ldr	r2, [r7, #4]
 8045456:	4613      	mov	r3, r2
 8045458:	009b      	lsls	r3, r3, #2
 804545a:	4413      	add	r3, r2
 804545c:	009b      	lsls	r3, r3, #2
 804545e:	4a12      	ldr	r2, [pc, #72]	; (80454a8 <prvInitialiseTaskLists+0x60>)
 8045460:	4413      	add	r3, r2
 8045462:	4618      	mov	r0, r3
 8045464:	f7ff fb04 	bl	8044a70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8045468:	687b      	ldr	r3, [r7, #4]
 804546a:	3301      	adds	r3, #1
 804546c:	607b      	str	r3, [r7, #4]
 804546e:	687b      	ldr	r3, [r7, #4]
 8045470:	2b06      	cmp	r3, #6
 8045472:	d9ef      	bls.n	8045454 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8045474:	480d      	ldr	r0, [pc, #52]	; (80454ac <prvInitialiseTaskLists+0x64>)
 8045476:	f7ff fafb 	bl	8044a70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 804547a:	480d      	ldr	r0, [pc, #52]	; (80454b0 <prvInitialiseTaskLists+0x68>)
 804547c:	f7ff faf8 	bl	8044a70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8045480:	480c      	ldr	r0, [pc, #48]	; (80454b4 <prvInitialiseTaskLists+0x6c>)
 8045482:	f7ff faf5 	bl	8044a70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8045486:	480c      	ldr	r0, [pc, #48]	; (80454b8 <prvInitialiseTaskLists+0x70>)
 8045488:	f7ff faf2 	bl	8044a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 804548c:	480b      	ldr	r0, [pc, #44]	; (80454bc <prvInitialiseTaskLists+0x74>)
 804548e:	f7ff faef 	bl	8044a70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8045492:	4b0b      	ldr	r3, [pc, #44]	; (80454c0 <prvInitialiseTaskLists+0x78>)
 8045494:	4a05      	ldr	r2, [pc, #20]	; (80454ac <prvInitialiseTaskLists+0x64>)
 8045496:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8045498:	4b0a      	ldr	r3, [pc, #40]	; (80454c4 <prvInitialiseTaskLists+0x7c>)
 804549a:	4a05      	ldr	r2, [pc, #20]	; (80454b0 <prvInitialiseTaskLists+0x68>)
 804549c:	601a      	str	r2, [r3, #0]
}
 804549e:	bf00      	nop
 80454a0:	3708      	adds	r7, #8
 80454a2:	46bd      	mov	sp, r7
 80454a4:	bd80      	pop	{r7, pc}
 80454a6:	bf00      	nop
 80454a8:	200022d4 	.word	0x200022d4
 80454ac:	20002360 	.word	0x20002360
 80454b0:	20002374 	.word	0x20002374
 80454b4:	20002390 	.word	0x20002390
 80454b8:	200023a4 	.word	0x200023a4
 80454bc:	200023bc 	.word	0x200023bc
 80454c0:	20002388 	.word	0x20002388
 80454c4:	2000238c 	.word	0x2000238c

080454c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80454c8:	b580      	push	{r7, lr}
 80454ca:	b082      	sub	sp, #8
 80454cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80454ce:	e019      	b.n	8045504 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80454d0:	f000 f9f4 	bl	80458bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80454d4:	4b10      	ldr	r3, [pc, #64]	; (8045518 <prvCheckTasksWaitingTermination+0x50>)
 80454d6:	68db      	ldr	r3, [r3, #12]
 80454d8:	68db      	ldr	r3, [r3, #12]
 80454da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80454dc:	687b      	ldr	r3, [r7, #4]
 80454de:	3304      	adds	r3, #4
 80454e0:	4618      	mov	r0, r3
 80454e2:	f7ff fb4f 	bl	8044b84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80454e6:	4b0d      	ldr	r3, [pc, #52]	; (804551c <prvCheckTasksWaitingTermination+0x54>)
 80454e8:	681b      	ldr	r3, [r3, #0]
 80454ea:	3b01      	subs	r3, #1
 80454ec:	4a0b      	ldr	r2, [pc, #44]	; (804551c <prvCheckTasksWaitingTermination+0x54>)
 80454ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80454f0:	4b0b      	ldr	r3, [pc, #44]	; (8045520 <prvCheckTasksWaitingTermination+0x58>)
 80454f2:	681b      	ldr	r3, [r3, #0]
 80454f4:	3b01      	subs	r3, #1
 80454f6:	4a0a      	ldr	r2, [pc, #40]	; (8045520 <prvCheckTasksWaitingTermination+0x58>)
 80454f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80454fa:	f000 fa13 	bl	8045924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80454fe:	6878      	ldr	r0, [r7, #4]
 8045500:	f000 f810 	bl	8045524 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8045504:	4b06      	ldr	r3, [pc, #24]	; (8045520 <prvCheckTasksWaitingTermination+0x58>)
 8045506:	681b      	ldr	r3, [r3, #0]
 8045508:	2b00      	cmp	r3, #0
 804550a:	d1e1      	bne.n	80454d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 804550c:	bf00      	nop
 804550e:	bf00      	nop
 8045510:	3708      	adds	r7, #8
 8045512:	46bd      	mov	sp, r7
 8045514:	bd80      	pop	{r7, pc}
 8045516:	bf00      	nop
 8045518:	200023a4 	.word	0x200023a4
 804551c:	200023d0 	.word	0x200023d0
 8045520:	200023b8 	.word	0x200023b8

08045524 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8045524:	b580      	push	{r7, lr}
 8045526:	b084      	sub	sp, #16
 8045528:	af00      	add	r7, sp, #0
 804552a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 804552c:	687b      	ldr	r3, [r7, #4]
 804552e:	334c      	adds	r3, #76	; 0x4c
 8045530:	4618      	mov	r0, r3
 8045532:	f000 fe9d 	bl	8046270 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8045536:	687b      	ldr	r3, [r7, #4]
 8045538:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 804553c:	2b00      	cmp	r3, #0
 804553e:	d108      	bne.n	8045552 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8045540:	687b      	ldr	r3, [r7, #4]
 8045542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045544:	4618      	mov	r0, r3
 8045546:	f000 fb6b 	bl	8045c20 <vPortFree>
				vPortFree( pxTCB );
 804554a:	6878      	ldr	r0, [r7, #4]
 804554c:	f000 fb68 	bl	8045c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8045550:	e01a      	b.n	8045588 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8045552:	687b      	ldr	r3, [r7, #4]
 8045554:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8045558:	2b01      	cmp	r3, #1
 804555a:	d103      	bne.n	8045564 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 804555c:	6878      	ldr	r0, [r7, #4]
 804555e:	f000 fb5f 	bl	8045c20 <vPortFree>
	}
 8045562:	e011      	b.n	8045588 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8045564:	687b      	ldr	r3, [r7, #4]
 8045566:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 804556a:	2b02      	cmp	r3, #2
 804556c:	d00c      	beq.n	8045588 <prvDeleteTCB+0x64>
	__asm volatile
 804556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045572:	b672      	cpsid	i
 8045574:	f383 8811 	msr	BASEPRI, r3
 8045578:	f3bf 8f6f 	isb	sy
 804557c:	f3bf 8f4f 	dsb	sy
 8045580:	b662      	cpsie	i
 8045582:	60fb      	str	r3, [r7, #12]
}
 8045584:	bf00      	nop
 8045586:	e7fe      	b.n	8045586 <prvDeleteTCB+0x62>
	}
 8045588:	bf00      	nop
 804558a:	3710      	adds	r7, #16
 804558c:	46bd      	mov	sp, r7
 804558e:	bd80      	pop	{r7, pc}

08045590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8045590:	b480      	push	{r7}
 8045592:	b083      	sub	sp, #12
 8045594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8045596:	4b0c      	ldr	r3, [pc, #48]	; (80455c8 <prvResetNextTaskUnblockTime+0x38>)
 8045598:	681b      	ldr	r3, [r3, #0]
 804559a:	681b      	ldr	r3, [r3, #0]
 804559c:	2b00      	cmp	r3, #0
 804559e:	d104      	bne.n	80455aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80455a0:	4b0a      	ldr	r3, [pc, #40]	; (80455cc <prvResetNextTaskUnblockTime+0x3c>)
 80455a2:	f04f 32ff 	mov.w	r2, #4294967295
 80455a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80455a8:	e008      	b.n	80455bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80455aa:	4b07      	ldr	r3, [pc, #28]	; (80455c8 <prvResetNextTaskUnblockTime+0x38>)
 80455ac:	681b      	ldr	r3, [r3, #0]
 80455ae:	68db      	ldr	r3, [r3, #12]
 80455b0:	68db      	ldr	r3, [r3, #12]
 80455b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80455b4:	687b      	ldr	r3, [r7, #4]
 80455b6:	685b      	ldr	r3, [r3, #4]
 80455b8:	4a04      	ldr	r2, [pc, #16]	; (80455cc <prvResetNextTaskUnblockTime+0x3c>)
 80455ba:	6013      	str	r3, [r2, #0]
}
 80455bc:	bf00      	nop
 80455be:	370c      	adds	r7, #12
 80455c0:	46bd      	mov	sp, r7
 80455c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80455c6:	4770      	bx	lr
 80455c8:	20002388 	.word	0x20002388
 80455cc:	200023f0 	.word	0x200023f0

080455d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80455d0:	b580      	push	{r7, lr}
 80455d2:	b084      	sub	sp, #16
 80455d4:	af00      	add	r7, sp, #0
 80455d6:	6078      	str	r0, [r7, #4]
 80455d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80455da:	4b29      	ldr	r3, [pc, #164]	; (8045680 <prvAddCurrentTaskToDelayedList+0xb0>)
 80455dc:	681b      	ldr	r3, [r3, #0]
 80455de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80455e0:	4b28      	ldr	r3, [pc, #160]	; (8045684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80455e2:	681b      	ldr	r3, [r3, #0]
 80455e4:	3304      	adds	r3, #4
 80455e6:	4618      	mov	r0, r3
 80455e8:	f7ff facc 	bl	8044b84 <uxListRemove>
 80455ec:	4603      	mov	r3, r0
 80455ee:	2b00      	cmp	r3, #0
 80455f0:	d10b      	bne.n	804560a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80455f2:	4b24      	ldr	r3, [pc, #144]	; (8045684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80455f4:	681b      	ldr	r3, [r3, #0]
 80455f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80455f8:	2201      	movs	r2, #1
 80455fa:	fa02 f303 	lsl.w	r3, r2, r3
 80455fe:	43da      	mvns	r2, r3
 8045600:	4b21      	ldr	r3, [pc, #132]	; (8045688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8045602:	681b      	ldr	r3, [r3, #0]
 8045604:	4013      	ands	r3, r2
 8045606:	4a20      	ldr	r2, [pc, #128]	; (8045688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8045608:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 804560a:	687b      	ldr	r3, [r7, #4]
 804560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045610:	d10a      	bne.n	8045628 <prvAddCurrentTaskToDelayedList+0x58>
 8045612:	683b      	ldr	r3, [r7, #0]
 8045614:	2b00      	cmp	r3, #0
 8045616:	d007      	beq.n	8045628 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8045618:	4b1a      	ldr	r3, [pc, #104]	; (8045684 <prvAddCurrentTaskToDelayedList+0xb4>)
 804561a:	681b      	ldr	r3, [r3, #0]
 804561c:	3304      	adds	r3, #4
 804561e:	4619      	mov	r1, r3
 8045620:	481a      	ldr	r0, [pc, #104]	; (804568c <prvAddCurrentTaskToDelayedList+0xbc>)
 8045622:	f7ff fa52 	bl	8044aca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8045626:	e026      	b.n	8045676 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8045628:	68fa      	ldr	r2, [r7, #12]
 804562a:	687b      	ldr	r3, [r7, #4]
 804562c:	4413      	add	r3, r2
 804562e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8045630:	4b14      	ldr	r3, [pc, #80]	; (8045684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8045632:	681b      	ldr	r3, [r3, #0]
 8045634:	68ba      	ldr	r2, [r7, #8]
 8045636:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8045638:	68ba      	ldr	r2, [r7, #8]
 804563a:	68fb      	ldr	r3, [r7, #12]
 804563c:	429a      	cmp	r2, r3
 804563e:	d209      	bcs.n	8045654 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8045640:	4b13      	ldr	r3, [pc, #76]	; (8045690 <prvAddCurrentTaskToDelayedList+0xc0>)
 8045642:	681a      	ldr	r2, [r3, #0]
 8045644:	4b0f      	ldr	r3, [pc, #60]	; (8045684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8045646:	681b      	ldr	r3, [r3, #0]
 8045648:	3304      	adds	r3, #4
 804564a:	4619      	mov	r1, r3
 804564c:	4610      	mov	r0, r2
 804564e:	f7ff fa60 	bl	8044b12 <vListInsert>
}
 8045652:	e010      	b.n	8045676 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8045654:	4b0f      	ldr	r3, [pc, #60]	; (8045694 <prvAddCurrentTaskToDelayedList+0xc4>)
 8045656:	681a      	ldr	r2, [r3, #0]
 8045658:	4b0a      	ldr	r3, [pc, #40]	; (8045684 <prvAddCurrentTaskToDelayedList+0xb4>)
 804565a:	681b      	ldr	r3, [r3, #0]
 804565c:	3304      	adds	r3, #4
 804565e:	4619      	mov	r1, r3
 8045660:	4610      	mov	r0, r2
 8045662:	f7ff fa56 	bl	8044b12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8045666:	4b0c      	ldr	r3, [pc, #48]	; (8045698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8045668:	681b      	ldr	r3, [r3, #0]
 804566a:	68ba      	ldr	r2, [r7, #8]
 804566c:	429a      	cmp	r2, r3
 804566e:	d202      	bcs.n	8045676 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8045670:	4a09      	ldr	r2, [pc, #36]	; (8045698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8045672:	68bb      	ldr	r3, [r7, #8]
 8045674:	6013      	str	r3, [r2, #0]
}
 8045676:	bf00      	nop
 8045678:	3710      	adds	r7, #16
 804567a:	46bd      	mov	sp, r7
 804567c:	bd80      	pop	{r7, pc}
 804567e:	bf00      	nop
 8045680:	200023d4 	.word	0x200023d4
 8045684:	200022d0 	.word	0x200022d0
 8045688:	200023d8 	.word	0x200023d8
 804568c:	200023bc 	.word	0x200023bc
 8045690:	2000238c 	.word	0x2000238c
 8045694:	20002388 	.word	0x20002388
 8045698:	200023f0 	.word	0x200023f0

0804569c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 804569c:	b480      	push	{r7}
 804569e:	b085      	sub	sp, #20
 80456a0:	af00      	add	r7, sp, #0
 80456a2:	60f8      	str	r0, [r7, #12]
 80456a4:	60b9      	str	r1, [r7, #8]
 80456a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80456a8:	68fb      	ldr	r3, [r7, #12]
 80456aa:	3b04      	subs	r3, #4
 80456ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80456ae:	68fb      	ldr	r3, [r7, #12]
 80456b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80456b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80456b6:	68fb      	ldr	r3, [r7, #12]
 80456b8:	3b04      	subs	r3, #4
 80456ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80456bc:	68bb      	ldr	r3, [r7, #8]
 80456be:	f023 0201 	bic.w	r2, r3, #1
 80456c2:	68fb      	ldr	r3, [r7, #12]
 80456c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80456c6:	68fb      	ldr	r3, [r7, #12]
 80456c8:	3b04      	subs	r3, #4
 80456ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80456cc:	4a0c      	ldr	r2, [pc, #48]	; (8045700 <pxPortInitialiseStack+0x64>)
 80456ce:	68fb      	ldr	r3, [r7, #12]
 80456d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80456d2:	68fb      	ldr	r3, [r7, #12]
 80456d4:	3b14      	subs	r3, #20
 80456d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80456d8:	687a      	ldr	r2, [r7, #4]
 80456da:	68fb      	ldr	r3, [r7, #12]
 80456dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80456de:	68fb      	ldr	r3, [r7, #12]
 80456e0:	3b04      	subs	r3, #4
 80456e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80456e4:	68fb      	ldr	r3, [r7, #12]
 80456e6:	f06f 0202 	mvn.w	r2, #2
 80456ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80456ec:	68fb      	ldr	r3, [r7, #12]
 80456ee:	3b20      	subs	r3, #32
 80456f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80456f2:	68fb      	ldr	r3, [r7, #12]
}
 80456f4:	4618      	mov	r0, r3
 80456f6:	3714      	adds	r7, #20
 80456f8:	46bd      	mov	sp, r7
 80456fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80456fe:	4770      	bx	lr
 8045700:	08045705 	.word	0x08045705

08045704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8045704:	b480      	push	{r7}
 8045706:	b085      	sub	sp, #20
 8045708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 804570a:	2300      	movs	r3, #0
 804570c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 804570e:	4b14      	ldr	r3, [pc, #80]	; (8045760 <prvTaskExitError+0x5c>)
 8045710:	681b      	ldr	r3, [r3, #0]
 8045712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045716:	d00c      	beq.n	8045732 <prvTaskExitError+0x2e>
	__asm volatile
 8045718:	f04f 0350 	mov.w	r3, #80	; 0x50
 804571c:	b672      	cpsid	i
 804571e:	f383 8811 	msr	BASEPRI, r3
 8045722:	f3bf 8f6f 	isb	sy
 8045726:	f3bf 8f4f 	dsb	sy
 804572a:	b662      	cpsie	i
 804572c:	60fb      	str	r3, [r7, #12]
}
 804572e:	bf00      	nop
 8045730:	e7fe      	b.n	8045730 <prvTaskExitError+0x2c>
	__asm volatile
 8045732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045736:	b672      	cpsid	i
 8045738:	f383 8811 	msr	BASEPRI, r3
 804573c:	f3bf 8f6f 	isb	sy
 8045740:	f3bf 8f4f 	dsb	sy
 8045744:	b662      	cpsie	i
 8045746:	60bb      	str	r3, [r7, #8]
}
 8045748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 804574a:	bf00      	nop
 804574c:	687b      	ldr	r3, [r7, #4]
 804574e:	2b00      	cmp	r3, #0
 8045750:	d0fc      	beq.n	804574c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8045752:	bf00      	nop
 8045754:	bf00      	nop
 8045756:	3714      	adds	r7, #20
 8045758:	46bd      	mov	sp, r7
 804575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804575e:	4770      	bx	lr
 8045760:	2000000c 	.word	0x2000000c
	...

08045770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8045770:	4b07      	ldr	r3, [pc, #28]	; (8045790 <pxCurrentTCBConst2>)
 8045772:	6819      	ldr	r1, [r3, #0]
 8045774:	6808      	ldr	r0, [r1, #0]
 8045776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804577a:	f380 8809 	msr	PSP, r0
 804577e:	f3bf 8f6f 	isb	sy
 8045782:	f04f 0000 	mov.w	r0, #0
 8045786:	f380 8811 	msr	BASEPRI, r0
 804578a:	4770      	bx	lr
 804578c:	f3af 8000 	nop.w

08045790 <pxCurrentTCBConst2>:
 8045790:	200022d0 	.word	0x200022d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8045794:	bf00      	nop
 8045796:	bf00      	nop

08045798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8045798:	4808      	ldr	r0, [pc, #32]	; (80457bc <prvPortStartFirstTask+0x24>)
 804579a:	6800      	ldr	r0, [r0, #0]
 804579c:	6800      	ldr	r0, [r0, #0]
 804579e:	f380 8808 	msr	MSP, r0
 80457a2:	f04f 0000 	mov.w	r0, #0
 80457a6:	f380 8814 	msr	CONTROL, r0
 80457aa:	b662      	cpsie	i
 80457ac:	b661      	cpsie	f
 80457ae:	f3bf 8f4f 	dsb	sy
 80457b2:	f3bf 8f6f 	isb	sy
 80457b6:	df00      	svc	0
 80457b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80457ba:	bf00      	nop
 80457bc:	e000ed08 	.word	0xe000ed08

080457c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80457c0:	b580      	push	{r7, lr}
 80457c2:	b084      	sub	sp, #16
 80457c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80457c6:	4b37      	ldr	r3, [pc, #220]	; (80458a4 <xPortStartScheduler+0xe4>)
 80457c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80457ca:	68fb      	ldr	r3, [r7, #12]
 80457cc:	781b      	ldrb	r3, [r3, #0]
 80457ce:	b2db      	uxtb	r3, r3
 80457d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80457d2:	68fb      	ldr	r3, [r7, #12]
 80457d4:	22ff      	movs	r2, #255	; 0xff
 80457d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80457d8:	68fb      	ldr	r3, [r7, #12]
 80457da:	781b      	ldrb	r3, [r3, #0]
 80457dc:	b2db      	uxtb	r3, r3
 80457de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80457e0:	78fb      	ldrb	r3, [r7, #3]
 80457e2:	b2db      	uxtb	r3, r3
 80457e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80457e8:	b2da      	uxtb	r2, r3
 80457ea:	4b2f      	ldr	r3, [pc, #188]	; (80458a8 <xPortStartScheduler+0xe8>)
 80457ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80457ee:	4b2f      	ldr	r3, [pc, #188]	; (80458ac <xPortStartScheduler+0xec>)
 80457f0:	2207      	movs	r2, #7
 80457f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80457f4:	e009      	b.n	804580a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80457f6:	4b2d      	ldr	r3, [pc, #180]	; (80458ac <xPortStartScheduler+0xec>)
 80457f8:	681b      	ldr	r3, [r3, #0]
 80457fa:	3b01      	subs	r3, #1
 80457fc:	4a2b      	ldr	r2, [pc, #172]	; (80458ac <xPortStartScheduler+0xec>)
 80457fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8045800:	78fb      	ldrb	r3, [r7, #3]
 8045802:	b2db      	uxtb	r3, r3
 8045804:	005b      	lsls	r3, r3, #1
 8045806:	b2db      	uxtb	r3, r3
 8045808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 804580a:	78fb      	ldrb	r3, [r7, #3]
 804580c:	b2db      	uxtb	r3, r3
 804580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045812:	2b80      	cmp	r3, #128	; 0x80
 8045814:	d0ef      	beq.n	80457f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8045816:	4b25      	ldr	r3, [pc, #148]	; (80458ac <xPortStartScheduler+0xec>)
 8045818:	681b      	ldr	r3, [r3, #0]
 804581a:	f1c3 0307 	rsb	r3, r3, #7
 804581e:	2b04      	cmp	r3, #4
 8045820:	d00c      	beq.n	804583c <xPortStartScheduler+0x7c>
	__asm volatile
 8045822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045826:	b672      	cpsid	i
 8045828:	f383 8811 	msr	BASEPRI, r3
 804582c:	f3bf 8f6f 	isb	sy
 8045830:	f3bf 8f4f 	dsb	sy
 8045834:	b662      	cpsie	i
 8045836:	60bb      	str	r3, [r7, #8]
}
 8045838:	bf00      	nop
 804583a:	e7fe      	b.n	804583a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 804583c:	4b1b      	ldr	r3, [pc, #108]	; (80458ac <xPortStartScheduler+0xec>)
 804583e:	681b      	ldr	r3, [r3, #0]
 8045840:	021b      	lsls	r3, r3, #8
 8045842:	4a1a      	ldr	r2, [pc, #104]	; (80458ac <xPortStartScheduler+0xec>)
 8045844:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8045846:	4b19      	ldr	r3, [pc, #100]	; (80458ac <xPortStartScheduler+0xec>)
 8045848:	681b      	ldr	r3, [r3, #0]
 804584a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 804584e:	4a17      	ldr	r2, [pc, #92]	; (80458ac <xPortStartScheduler+0xec>)
 8045850:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8045852:	687b      	ldr	r3, [r7, #4]
 8045854:	b2da      	uxtb	r2, r3
 8045856:	68fb      	ldr	r3, [r7, #12]
 8045858:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 804585a:	4b15      	ldr	r3, [pc, #84]	; (80458b0 <xPortStartScheduler+0xf0>)
 804585c:	681b      	ldr	r3, [r3, #0]
 804585e:	4a14      	ldr	r2, [pc, #80]	; (80458b0 <xPortStartScheduler+0xf0>)
 8045860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8045864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8045866:	4b12      	ldr	r3, [pc, #72]	; (80458b0 <xPortStartScheduler+0xf0>)
 8045868:	681b      	ldr	r3, [r3, #0]
 804586a:	4a11      	ldr	r2, [pc, #68]	; (80458b0 <xPortStartScheduler+0xf0>)
 804586c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8045870:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8045872:	f000 f8dd 	bl	8045a30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8045876:	4b0f      	ldr	r3, [pc, #60]	; (80458b4 <xPortStartScheduler+0xf4>)
 8045878:	2200      	movs	r2, #0
 804587a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 804587c:	f000 f8fc 	bl	8045a78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8045880:	4b0d      	ldr	r3, [pc, #52]	; (80458b8 <xPortStartScheduler+0xf8>)
 8045882:	681b      	ldr	r3, [r3, #0]
 8045884:	4a0c      	ldr	r2, [pc, #48]	; (80458b8 <xPortStartScheduler+0xf8>)
 8045886:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 804588a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 804588c:	f7ff ff84 	bl	8045798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8045890:	f7ff fd5e 	bl	8045350 <vTaskSwitchContext>
	prvTaskExitError();
 8045894:	f7ff ff36 	bl	8045704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8045898:	2300      	movs	r3, #0
}
 804589a:	4618      	mov	r0, r3
 804589c:	3710      	adds	r7, #16
 804589e:	46bd      	mov	sp, r7
 80458a0:	bd80      	pop	{r7, pc}
 80458a2:	bf00      	nop
 80458a4:	e000e400 	.word	0xe000e400
 80458a8:	200023fc 	.word	0x200023fc
 80458ac:	20002400 	.word	0x20002400
 80458b0:	e000ed20 	.word	0xe000ed20
 80458b4:	2000000c 	.word	0x2000000c
 80458b8:	e000ef34 	.word	0xe000ef34

080458bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80458bc:	b480      	push	{r7}
 80458be:	b083      	sub	sp, #12
 80458c0:	af00      	add	r7, sp, #0
	__asm volatile
 80458c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80458c6:	b672      	cpsid	i
 80458c8:	f383 8811 	msr	BASEPRI, r3
 80458cc:	f3bf 8f6f 	isb	sy
 80458d0:	f3bf 8f4f 	dsb	sy
 80458d4:	b662      	cpsie	i
 80458d6:	607b      	str	r3, [r7, #4]
}
 80458d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80458da:	4b10      	ldr	r3, [pc, #64]	; (804591c <vPortEnterCritical+0x60>)
 80458dc:	681b      	ldr	r3, [r3, #0]
 80458de:	3301      	adds	r3, #1
 80458e0:	4a0e      	ldr	r2, [pc, #56]	; (804591c <vPortEnterCritical+0x60>)
 80458e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80458e4:	4b0d      	ldr	r3, [pc, #52]	; (804591c <vPortEnterCritical+0x60>)
 80458e6:	681b      	ldr	r3, [r3, #0]
 80458e8:	2b01      	cmp	r3, #1
 80458ea:	d111      	bne.n	8045910 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80458ec:	4b0c      	ldr	r3, [pc, #48]	; (8045920 <vPortEnterCritical+0x64>)
 80458ee:	681b      	ldr	r3, [r3, #0]
 80458f0:	b2db      	uxtb	r3, r3
 80458f2:	2b00      	cmp	r3, #0
 80458f4:	d00c      	beq.n	8045910 <vPortEnterCritical+0x54>
	__asm volatile
 80458f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80458fa:	b672      	cpsid	i
 80458fc:	f383 8811 	msr	BASEPRI, r3
 8045900:	f3bf 8f6f 	isb	sy
 8045904:	f3bf 8f4f 	dsb	sy
 8045908:	b662      	cpsie	i
 804590a:	603b      	str	r3, [r7, #0]
}
 804590c:	bf00      	nop
 804590e:	e7fe      	b.n	804590e <vPortEnterCritical+0x52>
	}
}
 8045910:	bf00      	nop
 8045912:	370c      	adds	r7, #12
 8045914:	46bd      	mov	sp, r7
 8045916:	f85d 7b04 	ldr.w	r7, [sp], #4
 804591a:	4770      	bx	lr
 804591c:	2000000c 	.word	0x2000000c
 8045920:	e000ed04 	.word	0xe000ed04

08045924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8045924:	b480      	push	{r7}
 8045926:	b083      	sub	sp, #12
 8045928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 804592a:	4b13      	ldr	r3, [pc, #76]	; (8045978 <vPortExitCritical+0x54>)
 804592c:	681b      	ldr	r3, [r3, #0]
 804592e:	2b00      	cmp	r3, #0
 8045930:	d10c      	bne.n	804594c <vPortExitCritical+0x28>
	__asm volatile
 8045932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045936:	b672      	cpsid	i
 8045938:	f383 8811 	msr	BASEPRI, r3
 804593c:	f3bf 8f6f 	isb	sy
 8045940:	f3bf 8f4f 	dsb	sy
 8045944:	b662      	cpsie	i
 8045946:	607b      	str	r3, [r7, #4]
}
 8045948:	bf00      	nop
 804594a:	e7fe      	b.n	804594a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 804594c:	4b0a      	ldr	r3, [pc, #40]	; (8045978 <vPortExitCritical+0x54>)
 804594e:	681b      	ldr	r3, [r3, #0]
 8045950:	3b01      	subs	r3, #1
 8045952:	4a09      	ldr	r2, [pc, #36]	; (8045978 <vPortExitCritical+0x54>)
 8045954:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8045956:	4b08      	ldr	r3, [pc, #32]	; (8045978 <vPortExitCritical+0x54>)
 8045958:	681b      	ldr	r3, [r3, #0]
 804595a:	2b00      	cmp	r3, #0
 804595c:	d105      	bne.n	804596a <vPortExitCritical+0x46>
 804595e:	2300      	movs	r3, #0
 8045960:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8045962:	683b      	ldr	r3, [r7, #0]
 8045964:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8045968:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 804596a:	bf00      	nop
 804596c:	370c      	adds	r7, #12
 804596e:	46bd      	mov	sp, r7
 8045970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045974:	4770      	bx	lr
 8045976:	bf00      	nop
 8045978:	2000000c 	.word	0x2000000c
 804597c:	00000000 	.word	0x00000000

08045980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8045980:	f3ef 8009 	mrs	r0, PSP
 8045984:	f3bf 8f6f 	isb	sy
 8045988:	4b15      	ldr	r3, [pc, #84]	; (80459e0 <pxCurrentTCBConst>)
 804598a:	681a      	ldr	r2, [r3, #0]
 804598c:	f01e 0f10 	tst.w	lr, #16
 8045990:	bf08      	it	eq
 8045992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8045996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804599a:	6010      	str	r0, [r2, #0]
 804599c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80459a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80459a4:	b672      	cpsid	i
 80459a6:	f380 8811 	msr	BASEPRI, r0
 80459aa:	f3bf 8f4f 	dsb	sy
 80459ae:	f3bf 8f6f 	isb	sy
 80459b2:	b662      	cpsie	i
 80459b4:	f7ff fccc 	bl	8045350 <vTaskSwitchContext>
 80459b8:	f04f 0000 	mov.w	r0, #0
 80459bc:	f380 8811 	msr	BASEPRI, r0
 80459c0:	bc09      	pop	{r0, r3}
 80459c2:	6819      	ldr	r1, [r3, #0]
 80459c4:	6808      	ldr	r0, [r1, #0]
 80459c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80459ca:	f01e 0f10 	tst.w	lr, #16
 80459ce:	bf08      	it	eq
 80459d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80459d4:	f380 8809 	msr	PSP, r0
 80459d8:	f3bf 8f6f 	isb	sy
 80459dc:	4770      	bx	lr
 80459de:	bf00      	nop

080459e0 <pxCurrentTCBConst>:
 80459e0:	200022d0 	.word	0x200022d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80459e4:	bf00      	nop
 80459e6:	bf00      	nop

080459e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80459e8:	b580      	push	{r7, lr}
 80459ea:	b082      	sub	sp, #8
 80459ec:	af00      	add	r7, sp, #0
	__asm volatile
 80459ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80459f2:	b672      	cpsid	i
 80459f4:	f383 8811 	msr	BASEPRI, r3
 80459f8:	f3bf 8f6f 	isb	sy
 80459fc:	f3bf 8f4f 	dsb	sy
 8045a00:	b662      	cpsie	i
 8045a02:	607b      	str	r3, [r7, #4]
}
 8045a04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8045a06:	f7ff fbe9 	bl	80451dc <xTaskIncrementTick>
 8045a0a:	4603      	mov	r3, r0
 8045a0c:	2b00      	cmp	r3, #0
 8045a0e:	d003      	beq.n	8045a18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8045a10:	4b06      	ldr	r3, [pc, #24]	; (8045a2c <SysTick_Handler+0x44>)
 8045a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8045a16:	601a      	str	r2, [r3, #0]
 8045a18:	2300      	movs	r3, #0
 8045a1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8045a1c:	683b      	ldr	r3, [r7, #0]
 8045a1e:	f383 8811 	msr	BASEPRI, r3
}
 8045a22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8045a24:	bf00      	nop
 8045a26:	3708      	adds	r7, #8
 8045a28:	46bd      	mov	sp, r7
 8045a2a:	bd80      	pop	{r7, pc}
 8045a2c:	e000ed04 	.word	0xe000ed04

08045a30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8045a30:	b480      	push	{r7}
 8045a32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8045a34:	4b0b      	ldr	r3, [pc, #44]	; (8045a64 <vPortSetupTimerInterrupt+0x34>)
 8045a36:	2200      	movs	r2, #0
 8045a38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8045a3a:	4b0b      	ldr	r3, [pc, #44]	; (8045a68 <vPortSetupTimerInterrupt+0x38>)
 8045a3c:	2200      	movs	r2, #0
 8045a3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8045a40:	4b0a      	ldr	r3, [pc, #40]	; (8045a6c <vPortSetupTimerInterrupt+0x3c>)
 8045a42:	681b      	ldr	r3, [r3, #0]
 8045a44:	4a0a      	ldr	r2, [pc, #40]	; (8045a70 <vPortSetupTimerInterrupt+0x40>)
 8045a46:	fba2 2303 	umull	r2, r3, r2, r3
 8045a4a:	099b      	lsrs	r3, r3, #6
 8045a4c:	4a09      	ldr	r2, [pc, #36]	; (8045a74 <vPortSetupTimerInterrupt+0x44>)
 8045a4e:	3b01      	subs	r3, #1
 8045a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8045a52:	4b04      	ldr	r3, [pc, #16]	; (8045a64 <vPortSetupTimerInterrupt+0x34>)
 8045a54:	2207      	movs	r2, #7
 8045a56:	601a      	str	r2, [r3, #0]
}
 8045a58:	bf00      	nop
 8045a5a:	46bd      	mov	sp, r7
 8045a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045a60:	4770      	bx	lr
 8045a62:	bf00      	nop
 8045a64:	e000e010 	.word	0xe000e010
 8045a68:	e000e018 	.word	0xe000e018
 8045a6c:	20000000 	.word	0x20000000
 8045a70:	10624dd3 	.word	0x10624dd3
 8045a74:	e000e014 	.word	0xe000e014

08045a78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8045a78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8045a88 <vPortEnableVFP+0x10>
 8045a7c:	6801      	ldr	r1, [r0, #0]
 8045a7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8045a82:	6001      	str	r1, [r0, #0]
 8045a84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8045a86:	bf00      	nop
 8045a88:	e000ed88 	.word	0xe000ed88

08045a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8045a8c:	b580      	push	{r7, lr}
 8045a8e:	b08a      	sub	sp, #40	; 0x28
 8045a90:	af00      	add	r7, sp, #0
 8045a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8045a94:	2300      	movs	r3, #0
 8045a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8045a98:	f7ff faf4 	bl	8045084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8045a9c:	4b5b      	ldr	r3, [pc, #364]	; (8045c0c <pvPortMalloc+0x180>)
 8045a9e:	681b      	ldr	r3, [r3, #0]
 8045aa0:	2b00      	cmp	r3, #0
 8045aa2:	d101      	bne.n	8045aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8045aa4:	f000 f91a 	bl	8045cdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8045aa8:	4b59      	ldr	r3, [pc, #356]	; (8045c10 <pvPortMalloc+0x184>)
 8045aaa:	681a      	ldr	r2, [r3, #0]
 8045aac:	687b      	ldr	r3, [r7, #4]
 8045aae:	4013      	ands	r3, r2
 8045ab0:	2b00      	cmp	r3, #0
 8045ab2:	f040 8092 	bne.w	8045bda <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8045ab6:	687b      	ldr	r3, [r7, #4]
 8045ab8:	2b00      	cmp	r3, #0
 8045aba:	d01f      	beq.n	8045afc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8045abc:	2208      	movs	r2, #8
 8045abe:	687b      	ldr	r3, [r7, #4]
 8045ac0:	4413      	add	r3, r2
 8045ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8045ac4:	687b      	ldr	r3, [r7, #4]
 8045ac6:	f003 0307 	and.w	r3, r3, #7
 8045aca:	2b00      	cmp	r3, #0
 8045acc:	d016      	beq.n	8045afc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8045ace:	687b      	ldr	r3, [r7, #4]
 8045ad0:	f023 0307 	bic.w	r3, r3, #7
 8045ad4:	3308      	adds	r3, #8
 8045ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8045ad8:	687b      	ldr	r3, [r7, #4]
 8045ada:	f003 0307 	and.w	r3, r3, #7
 8045ade:	2b00      	cmp	r3, #0
 8045ae0:	d00c      	beq.n	8045afc <pvPortMalloc+0x70>
	__asm volatile
 8045ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045ae6:	b672      	cpsid	i
 8045ae8:	f383 8811 	msr	BASEPRI, r3
 8045aec:	f3bf 8f6f 	isb	sy
 8045af0:	f3bf 8f4f 	dsb	sy
 8045af4:	b662      	cpsie	i
 8045af6:	617b      	str	r3, [r7, #20]
}
 8045af8:	bf00      	nop
 8045afa:	e7fe      	b.n	8045afa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8045afc:	687b      	ldr	r3, [r7, #4]
 8045afe:	2b00      	cmp	r3, #0
 8045b00:	d06b      	beq.n	8045bda <pvPortMalloc+0x14e>
 8045b02:	4b44      	ldr	r3, [pc, #272]	; (8045c14 <pvPortMalloc+0x188>)
 8045b04:	681b      	ldr	r3, [r3, #0]
 8045b06:	687a      	ldr	r2, [r7, #4]
 8045b08:	429a      	cmp	r2, r3
 8045b0a:	d866      	bhi.n	8045bda <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8045b0c:	4b42      	ldr	r3, [pc, #264]	; (8045c18 <pvPortMalloc+0x18c>)
 8045b0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8045b10:	4b41      	ldr	r3, [pc, #260]	; (8045c18 <pvPortMalloc+0x18c>)
 8045b12:	681b      	ldr	r3, [r3, #0]
 8045b14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8045b16:	e004      	b.n	8045b22 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8045b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8045b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b1e:	681b      	ldr	r3, [r3, #0]
 8045b20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8045b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b24:	685b      	ldr	r3, [r3, #4]
 8045b26:	687a      	ldr	r2, [r7, #4]
 8045b28:	429a      	cmp	r2, r3
 8045b2a:	d903      	bls.n	8045b34 <pvPortMalloc+0xa8>
 8045b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b2e:	681b      	ldr	r3, [r3, #0]
 8045b30:	2b00      	cmp	r3, #0
 8045b32:	d1f1      	bne.n	8045b18 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8045b34:	4b35      	ldr	r3, [pc, #212]	; (8045c0c <pvPortMalloc+0x180>)
 8045b36:	681b      	ldr	r3, [r3, #0]
 8045b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8045b3a:	429a      	cmp	r2, r3
 8045b3c:	d04d      	beq.n	8045bda <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8045b3e:	6a3b      	ldr	r3, [r7, #32]
 8045b40:	681b      	ldr	r3, [r3, #0]
 8045b42:	2208      	movs	r2, #8
 8045b44:	4413      	add	r3, r2
 8045b46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8045b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b4a:	681a      	ldr	r2, [r3, #0]
 8045b4c:	6a3b      	ldr	r3, [r7, #32]
 8045b4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8045b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b52:	685a      	ldr	r2, [r3, #4]
 8045b54:	687b      	ldr	r3, [r7, #4]
 8045b56:	1ad2      	subs	r2, r2, r3
 8045b58:	2308      	movs	r3, #8
 8045b5a:	005b      	lsls	r3, r3, #1
 8045b5c:	429a      	cmp	r2, r3
 8045b5e:	d921      	bls.n	8045ba4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8045b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8045b62:	687b      	ldr	r3, [r7, #4]
 8045b64:	4413      	add	r3, r2
 8045b66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8045b68:	69bb      	ldr	r3, [r7, #24]
 8045b6a:	f003 0307 	and.w	r3, r3, #7
 8045b6e:	2b00      	cmp	r3, #0
 8045b70:	d00c      	beq.n	8045b8c <pvPortMalloc+0x100>
	__asm volatile
 8045b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045b76:	b672      	cpsid	i
 8045b78:	f383 8811 	msr	BASEPRI, r3
 8045b7c:	f3bf 8f6f 	isb	sy
 8045b80:	f3bf 8f4f 	dsb	sy
 8045b84:	b662      	cpsie	i
 8045b86:	613b      	str	r3, [r7, #16]
}
 8045b88:	bf00      	nop
 8045b8a:	e7fe      	b.n	8045b8a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8045b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b8e:	685a      	ldr	r2, [r3, #4]
 8045b90:	687b      	ldr	r3, [r7, #4]
 8045b92:	1ad2      	subs	r2, r2, r3
 8045b94:	69bb      	ldr	r3, [r7, #24]
 8045b96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8045b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b9a:	687a      	ldr	r2, [r7, #4]
 8045b9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8045b9e:	69b8      	ldr	r0, [r7, #24]
 8045ba0:	f000 f8fe 	bl	8045da0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8045ba4:	4b1b      	ldr	r3, [pc, #108]	; (8045c14 <pvPortMalloc+0x188>)
 8045ba6:	681a      	ldr	r2, [r3, #0]
 8045ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045baa:	685b      	ldr	r3, [r3, #4]
 8045bac:	1ad3      	subs	r3, r2, r3
 8045bae:	4a19      	ldr	r2, [pc, #100]	; (8045c14 <pvPortMalloc+0x188>)
 8045bb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8045bb2:	4b18      	ldr	r3, [pc, #96]	; (8045c14 <pvPortMalloc+0x188>)
 8045bb4:	681a      	ldr	r2, [r3, #0]
 8045bb6:	4b19      	ldr	r3, [pc, #100]	; (8045c1c <pvPortMalloc+0x190>)
 8045bb8:	681b      	ldr	r3, [r3, #0]
 8045bba:	429a      	cmp	r2, r3
 8045bbc:	d203      	bcs.n	8045bc6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8045bbe:	4b15      	ldr	r3, [pc, #84]	; (8045c14 <pvPortMalloc+0x188>)
 8045bc0:	681b      	ldr	r3, [r3, #0]
 8045bc2:	4a16      	ldr	r2, [pc, #88]	; (8045c1c <pvPortMalloc+0x190>)
 8045bc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8045bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045bc8:	685a      	ldr	r2, [r3, #4]
 8045bca:	4b11      	ldr	r3, [pc, #68]	; (8045c10 <pvPortMalloc+0x184>)
 8045bcc:	681b      	ldr	r3, [r3, #0]
 8045bce:	431a      	orrs	r2, r3
 8045bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045bd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8045bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045bd6:	2200      	movs	r2, #0
 8045bd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8045bda:	f7ff fa61 	bl	80450a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8045bde:	69fb      	ldr	r3, [r7, #28]
 8045be0:	f003 0307 	and.w	r3, r3, #7
 8045be4:	2b00      	cmp	r3, #0
 8045be6:	d00c      	beq.n	8045c02 <pvPortMalloc+0x176>
	__asm volatile
 8045be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045bec:	b672      	cpsid	i
 8045bee:	f383 8811 	msr	BASEPRI, r3
 8045bf2:	f3bf 8f6f 	isb	sy
 8045bf6:	f3bf 8f4f 	dsb	sy
 8045bfa:	b662      	cpsie	i
 8045bfc:	60fb      	str	r3, [r7, #12]
}
 8045bfe:	bf00      	nop
 8045c00:	e7fe      	b.n	8045c00 <pvPortMalloc+0x174>
	return pvReturn;
 8045c02:	69fb      	ldr	r3, [r7, #28]
}
 8045c04:	4618      	mov	r0, r3
 8045c06:	3728      	adds	r7, #40	; 0x28
 8045c08:	46bd      	mov	sp, r7
 8045c0a:	bd80      	pop	{r7, pc}
 8045c0c:	2001b40c 	.word	0x2001b40c
 8045c10:	2001b418 	.word	0x2001b418
 8045c14:	2001b410 	.word	0x2001b410
 8045c18:	2001b404 	.word	0x2001b404
 8045c1c:	2001b414 	.word	0x2001b414

08045c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8045c20:	b580      	push	{r7, lr}
 8045c22:	b086      	sub	sp, #24
 8045c24:	af00      	add	r7, sp, #0
 8045c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8045c28:	687b      	ldr	r3, [r7, #4]
 8045c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8045c2c:	687b      	ldr	r3, [r7, #4]
 8045c2e:	2b00      	cmp	r3, #0
 8045c30:	d04c      	beq.n	8045ccc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8045c32:	2308      	movs	r3, #8
 8045c34:	425b      	negs	r3, r3
 8045c36:	697a      	ldr	r2, [r7, #20]
 8045c38:	4413      	add	r3, r2
 8045c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8045c3c:	697b      	ldr	r3, [r7, #20]
 8045c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8045c40:	693b      	ldr	r3, [r7, #16]
 8045c42:	685a      	ldr	r2, [r3, #4]
 8045c44:	4b23      	ldr	r3, [pc, #140]	; (8045cd4 <vPortFree+0xb4>)
 8045c46:	681b      	ldr	r3, [r3, #0]
 8045c48:	4013      	ands	r3, r2
 8045c4a:	2b00      	cmp	r3, #0
 8045c4c:	d10c      	bne.n	8045c68 <vPortFree+0x48>
	__asm volatile
 8045c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045c52:	b672      	cpsid	i
 8045c54:	f383 8811 	msr	BASEPRI, r3
 8045c58:	f3bf 8f6f 	isb	sy
 8045c5c:	f3bf 8f4f 	dsb	sy
 8045c60:	b662      	cpsie	i
 8045c62:	60fb      	str	r3, [r7, #12]
}
 8045c64:	bf00      	nop
 8045c66:	e7fe      	b.n	8045c66 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8045c68:	693b      	ldr	r3, [r7, #16]
 8045c6a:	681b      	ldr	r3, [r3, #0]
 8045c6c:	2b00      	cmp	r3, #0
 8045c6e:	d00c      	beq.n	8045c8a <vPortFree+0x6a>
	__asm volatile
 8045c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8045c74:	b672      	cpsid	i
 8045c76:	f383 8811 	msr	BASEPRI, r3
 8045c7a:	f3bf 8f6f 	isb	sy
 8045c7e:	f3bf 8f4f 	dsb	sy
 8045c82:	b662      	cpsie	i
 8045c84:	60bb      	str	r3, [r7, #8]
}
 8045c86:	bf00      	nop
 8045c88:	e7fe      	b.n	8045c88 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8045c8a:	693b      	ldr	r3, [r7, #16]
 8045c8c:	685a      	ldr	r2, [r3, #4]
 8045c8e:	4b11      	ldr	r3, [pc, #68]	; (8045cd4 <vPortFree+0xb4>)
 8045c90:	681b      	ldr	r3, [r3, #0]
 8045c92:	4013      	ands	r3, r2
 8045c94:	2b00      	cmp	r3, #0
 8045c96:	d019      	beq.n	8045ccc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8045c98:	693b      	ldr	r3, [r7, #16]
 8045c9a:	681b      	ldr	r3, [r3, #0]
 8045c9c:	2b00      	cmp	r3, #0
 8045c9e:	d115      	bne.n	8045ccc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8045ca0:	693b      	ldr	r3, [r7, #16]
 8045ca2:	685a      	ldr	r2, [r3, #4]
 8045ca4:	4b0b      	ldr	r3, [pc, #44]	; (8045cd4 <vPortFree+0xb4>)
 8045ca6:	681b      	ldr	r3, [r3, #0]
 8045ca8:	43db      	mvns	r3, r3
 8045caa:	401a      	ands	r2, r3
 8045cac:	693b      	ldr	r3, [r7, #16]
 8045cae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8045cb0:	f7ff f9e8 	bl	8045084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8045cb4:	693b      	ldr	r3, [r7, #16]
 8045cb6:	685a      	ldr	r2, [r3, #4]
 8045cb8:	4b07      	ldr	r3, [pc, #28]	; (8045cd8 <vPortFree+0xb8>)
 8045cba:	681b      	ldr	r3, [r3, #0]
 8045cbc:	4413      	add	r3, r2
 8045cbe:	4a06      	ldr	r2, [pc, #24]	; (8045cd8 <vPortFree+0xb8>)
 8045cc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8045cc2:	6938      	ldr	r0, [r7, #16]
 8045cc4:	f000 f86c 	bl	8045da0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8045cc8:	f7ff f9ea 	bl	80450a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8045ccc:	bf00      	nop
 8045cce:	3718      	adds	r7, #24
 8045cd0:	46bd      	mov	sp, r7
 8045cd2:	bd80      	pop	{r7, pc}
 8045cd4:	2001b418 	.word	0x2001b418
 8045cd8:	2001b410 	.word	0x2001b410

08045cdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8045cdc:	b480      	push	{r7}
 8045cde:	b085      	sub	sp, #20
 8045ce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8045ce2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8045ce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8045ce8:	4b27      	ldr	r3, [pc, #156]	; (8045d88 <prvHeapInit+0xac>)
 8045cea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8045cec:	68fb      	ldr	r3, [r7, #12]
 8045cee:	f003 0307 	and.w	r3, r3, #7
 8045cf2:	2b00      	cmp	r3, #0
 8045cf4:	d00c      	beq.n	8045d10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8045cf6:	68fb      	ldr	r3, [r7, #12]
 8045cf8:	3307      	adds	r3, #7
 8045cfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8045cfc:	68fb      	ldr	r3, [r7, #12]
 8045cfe:	f023 0307 	bic.w	r3, r3, #7
 8045d02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8045d04:	68ba      	ldr	r2, [r7, #8]
 8045d06:	68fb      	ldr	r3, [r7, #12]
 8045d08:	1ad3      	subs	r3, r2, r3
 8045d0a:	4a1f      	ldr	r2, [pc, #124]	; (8045d88 <prvHeapInit+0xac>)
 8045d0c:	4413      	add	r3, r2
 8045d0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8045d10:	68fb      	ldr	r3, [r7, #12]
 8045d12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8045d14:	4a1d      	ldr	r2, [pc, #116]	; (8045d8c <prvHeapInit+0xb0>)
 8045d16:	687b      	ldr	r3, [r7, #4]
 8045d18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8045d1a:	4b1c      	ldr	r3, [pc, #112]	; (8045d8c <prvHeapInit+0xb0>)
 8045d1c:	2200      	movs	r2, #0
 8045d1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8045d20:	687b      	ldr	r3, [r7, #4]
 8045d22:	68ba      	ldr	r2, [r7, #8]
 8045d24:	4413      	add	r3, r2
 8045d26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8045d28:	2208      	movs	r2, #8
 8045d2a:	68fb      	ldr	r3, [r7, #12]
 8045d2c:	1a9b      	subs	r3, r3, r2
 8045d2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8045d30:	68fb      	ldr	r3, [r7, #12]
 8045d32:	f023 0307 	bic.w	r3, r3, #7
 8045d36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8045d38:	68fb      	ldr	r3, [r7, #12]
 8045d3a:	4a15      	ldr	r2, [pc, #84]	; (8045d90 <prvHeapInit+0xb4>)
 8045d3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8045d3e:	4b14      	ldr	r3, [pc, #80]	; (8045d90 <prvHeapInit+0xb4>)
 8045d40:	681b      	ldr	r3, [r3, #0]
 8045d42:	2200      	movs	r2, #0
 8045d44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8045d46:	4b12      	ldr	r3, [pc, #72]	; (8045d90 <prvHeapInit+0xb4>)
 8045d48:	681b      	ldr	r3, [r3, #0]
 8045d4a:	2200      	movs	r2, #0
 8045d4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8045d4e:	687b      	ldr	r3, [r7, #4]
 8045d50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8045d52:	683b      	ldr	r3, [r7, #0]
 8045d54:	68fa      	ldr	r2, [r7, #12]
 8045d56:	1ad2      	subs	r2, r2, r3
 8045d58:	683b      	ldr	r3, [r7, #0]
 8045d5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8045d5c:	4b0c      	ldr	r3, [pc, #48]	; (8045d90 <prvHeapInit+0xb4>)
 8045d5e:	681a      	ldr	r2, [r3, #0]
 8045d60:	683b      	ldr	r3, [r7, #0]
 8045d62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8045d64:	683b      	ldr	r3, [r7, #0]
 8045d66:	685b      	ldr	r3, [r3, #4]
 8045d68:	4a0a      	ldr	r2, [pc, #40]	; (8045d94 <prvHeapInit+0xb8>)
 8045d6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8045d6c:	683b      	ldr	r3, [r7, #0]
 8045d6e:	685b      	ldr	r3, [r3, #4]
 8045d70:	4a09      	ldr	r2, [pc, #36]	; (8045d98 <prvHeapInit+0xbc>)
 8045d72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8045d74:	4b09      	ldr	r3, [pc, #36]	; (8045d9c <prvHeapInit+0xc0>)
 8045d76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8045d7a:	601a      	str	r2, [r3, #0]
}
 8045d7c:	bf00      	nop
 8045d7e:	3714      	adds	r7, #20
 8045d80:	46bd      	mov	sp, r7
 8045d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d86:	4770      	bx	lr
 8045d88:	20002404 	.word	0x20002404
 8045d8c:	2001b404 	.word	0x2001b404
 8045d90:	2001b40c 	.word	0x2001b40c
 8045d94:	2001b414 	.word	0x2001b414
 8045d98:	2001b410 	.word	0x2001b410
 8045d9c:	2001b418 	.word	0x2001b418

08045da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8045da0:	b480      	push	{r7}
 8045da2:	b085      	sub	sp, #20
 8045da4:	af00      	add	r7, sp, #0
 8045da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8045da8:	4b28      	ldr	r3, [pc, #160]	; (8045e4c <prvInsertBlockIntoFreeList+0xac>)
 8045daa:	60fb      	str	r3, [r7, #12]
 8045dac:	e002      	b.n	8045db4 <prvInsertBlockIntoFreeList+0x14>
 8045dae:	68fb      	ldr	r3, [r7, #12]
 8045db0:	681b      	ldr	r3, [r3, #0]
 8045db2:	60fb      	str	r3, [r7, #12]
 8045db4:	68fb      	ldr	r3, [r7, #12]
 8045db6:	681b      	ldr	r3, [r3, #0]
 8045db8:	687a      	ldr	r2, [r7, #4]
 8045dba:	429a      	cmp	r2, r3
 8045dbc:	d8f7      	bhi.n	8045dae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8045dbe:	68fb      	ldr	r3, [r7, #12]
 8045dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8045dc2:	68fb      	ldr	r3, [r7, #12]
 8045dc4:	685b      	ldr	r3, [r3, #4]
 8045dc6:	68ba      	ldr	r2, [r7, #8]
 8045dc8:	4413      	add	r3, r2
 8045dca:	687a      	ldr	r2, [r7, #4]
 8045dcc:	429a      	cmp	r2, r3
 8045dce:	d108      	bne.n	8045de2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8045dd0:	68fb      	ldr	r3, [r7, #12]
 8045dd2:	685a      	ldr	r2, [r3, #4]
 8045dd4:	687b      	ldr	r3, [r7, #4]
 8045dd6:	685b      	ldr	r3, [r3, #4]
 8045dd8:	441a      	add	r2, r3
 8045dda:	68fb      	ldr	r3, [r7, #12]
 8045ddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8045dde:	68fb      	ldr	r3, [r7, #12]
 8045de0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8045de2:	687b      	ldr	r3, [r7, #4]
 8045de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8045de6:	687b      	ldr	r3, [r7, #4]
 8045de8:	685b      	ldr	r3, [r3, #4]
 8045dea:	68ba      	ldr	r2, [r7, #8]
 8045dec:	441a      	add	r2, r3
 8045dee:	68fb      	ldr	r3, [r7, #12]
 8045df0:	681b      	ldr	r3, [r3, #0]
 8045df2:	429a      	cmp	r2, r3
 8045df4:	d118      	bne.n	8045e28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8045df6:	68fb      	ldr	r3, [r7, #12]
 8045df8:	681a      	ldr	r2, [r3, #0]
 8045dfa:	4b15      	ldr	r3, [pc, #84]	; (8045e50 <prvInsertBlockIntoFreeList+0xb0>)
 8045dfc:	681b      	ldr	r3, [r3, #0]
 8045dfe:	429a      	cmp	r2, r3
 8045e00:	d00d      	beq.n	8045e1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8045e02:	687b      	ldr	r3, [r7, #4]
 8045e04:	685a      	ldr	r2, [r3, #4]
 8045e06:	68fb      	ldr	r3, [r7, #12]
 8045e08:	681b      	ldr	r3, [r3, #0]
 8045e0a:	685b      	ldr	r3, [r3, #4]
 8045e0c:	441a      	add	r2, r3
 8045e0e:	687b      	ldr	r3, [r7, #4]
 8045e10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8045e12:	68fb      	ldr	r3, [r7, #12]
 8045e14:	681b      	ldr	r3, [r3, #0]
 8045e16:	681a      	ldr	r2, [r3, #0]
 8045e18:	687b      	ldr	r3, [r7, #4]
 8045e1a:	601a      	str	r2, [r3, #0]
 8045e1c:	e008      	b.n	8045e30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8045e1e:	4b0c      	ldr	r3, [pc, #48]	; (8045e50 <prvInsertBlockIntoFreeList+0xb0>)
 8045e20:	681a      	ldr	r2, [r3, #0]
 8045e22:	687b      	ldr	r3, [r7, #4]
 8045e24:	601a      	str	r2, [r3, #0]
 8045e26:	e003      	b.n	8045e30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8045e28:	68fb      	ldr	r3, [r7, #12]
 8045e2a:	681a      	ldr	r2, [r3, #0]
 8045e2c:	687b      	ldr	r3, [r7, #4]
 8045e2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8045e30:	68fa      	ldr	r2, [r7, #12]
 8045e32:	687b      	ldr	r3, [r7, #4]
 8045e34:	429a      	cmp	r2, r3
 8045e36:	d002      	beq.n	8045e3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8045e38:	68fb      	ldr	r3, [r7, #12]
 8045e3a:	687a      	ldr	r2, [r7, #4]
 8045e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8045e3e:	bf00      	nop
 8045e40:	3714      	adds	r7, #20
 8045e42:	46bd      	mov	sp, r7
 8045e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e48:	4770      	bx	lr
 8045e4a:	bf00      	nop
 8045e4c:	2001b404 	.word	0x2001b404
 8045e50:	2001b40c 	.word	0x2001b40c

08045e54 <std>:
 8045e54:	2300      	movs	r3, #0
 8045e56:	b510      	push	{r4, lr}
 8045e58:	4604      	mov	r4, r0
 8045e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8045e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8045e62:	6083      	str	r3, [r0, #8]
 8045e64:	8181      	strh	r1, [r0, #12]
 8045e66:	6643      	str	r3, [r0, #100]	; 0x64
 8045e68:	81c2      	strh	r2, [r0, #14]
 8045e6a:	6183      	str	r3, [r0, #24]
 8045e6c:	4619      	mov	r1, r3
 8045e6e:	2208      	movs	r2, #8
 8045e70:	305c      	adds	r0, #92	; 0x5c
 8045e72:	f000 f9e5 	bl	8046240 <memset>
 8045e76:	4b0d      	ldr	r3, [pc, #52]	; (8045eac <std+0x58>)
 8045e78:	6263      	str	r3, [r4, #36]	; 0x24
 8045e7a:	4b0d      	ldr	r3, [pc, #52]	; (8045eb0 <std+0x5c>)
 8045e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8045e7e:	4b0d      	ldr	r3, [pc, #52]	; (8045eb4 <std+0x60>)
 8045e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8045e82:	4b0d      	ldr	r3, [pc, #52]	; (8045eb8 <std+0x64>)
 8045e84:	6323      	str	r3, [r4, #48]	; 0x30
 8045e86:	4b0d      	ldr	r3, [pc, #52]	; (8045ebc <std+0x68>)
 8045e88:	6224      	str	r4, [r4, #32]
 8045e8a:	429c      	cmp	r4, r3
 8045e8c:	d006      	beq.n	8045e9c <std+0x48>
 8045e8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8045e92:	4294      	cmp	r4, r2
 8045e94:	d002      	beq.n	8045e9c <std+0x48>
 8045e96:	33d0      	adds	r3, #208	; 0xd0
 8045e98:	429c      	cmp	r4, r3
 8045e9a:	d105      	bne.n	8045ea8 <std+0x54>
 8045e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8045ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045ea4:	f000 ba9a 	b.w	80463dc <__retarget_lock_init_recursive>
 8045ea8:	bd10      	pop	{r4, pc}
 8045eaa:	bf00      	nop
 8045eac:	08046091 	.word	0x08046091
 8045eb0:	080460b3 	.word	0x080460b3
 8045eb4:	080460eb 	.word	0x080460eb
 8045eb8:	0804610f 	.word	0x0804610f
 8045ebc:	2001b41c 	.word	0x2001b41c

08045ec0 <stdio_exit_handler>:
 8045ec0:	4a02      	ldr	r2, [pc, #8]	; (8045ecc <stdio_exit_handler+0xc>)
 8045ec2:	4903      	ldr	r1, [pc, #12]	; (8045ed0 <stdio_exit_handler+0x10>)
 8045ec4:	4803      	ldr	r0, [pc, #12]	; (8045ed4 <stdio_exit_handler+0x14>)
 8045ec6:	f000 b869 	b.w	8045f9c <_fwalk_sglue>
 8045eca:	bf00      	nop
 8045ecc:	20000010 	.word	0x20000010
 8045ed0:	080466e1 	.word	0x080466e1
 8045ed4:	2000001c 	.word	0x2000001c

08045ed8 <cleanup_stdio>:
 8045ed8:	6841      	ldr	r1, [r0, #4]
 8045eda:	4b0c      	ldr	r3, [pc, #48]	; (8045f0c <cleanup_stdio+0x34>)
 8045edc:	4299      	cmp	r1, r3
 8045ede:	b510      	push	{r4, lr}
 8045ee0:	4604      	mov	r4, r0
 8045ee2:	d001      	beq.n	8045ee8 <cleanup_stdio+0x10>
 8045ee4:	f000 fbfc 	bl	80466e0 <_fflush_r>
 8045ee8:	68a1      	ldr	r1, [r4, #8]
 8045eea:	4b09      	ldr	r3, [pc, #36]	; (8045f10 <cleanup_stdio+0x38>)
 8045eec:	4299      	cmp	r1, r3
 8045eee:	d002      	beq.n	8045ef6 <cleanup_stdio+0x1e>
 8045ef0:	4620      	mov	r0, r4
 8045ef2:	f000 fbf5 	bl	80466e0 <_fflush_r>
 8045ef6:	68e1      	ldr	r1, [r4, #12]
 8045ef8:	4b06      	ldr	r3, [pc, #24]	; (8045f14 <cleanup_stdio+0x3c>)
 8045efa:	4299      	cmp	r1, r3
 8045efc:	d004      	beq.n	8045f08 <cleanup_stdio+0x30>
 8045efe:	4620      	mov	r0, r4
 8045f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045f04:	f000 bbec 	b.w	80466e0 <_fflush_r>
 8045f08:	bd10      	pop	{r4, pc}
 8045f0a:	bf00      	nop
 8045f0c:	2001b41c 	.word	0x2001b41c
 8045f10:	2001b484 	.word	0x2001b484
 8045f14:	2001b4ec 	.word	0x2001b4ec

08045f18 <global_stdio_init.part.0>:
 8045f18:	b510      	push	{r4, lr}
 8045f1a:	4b0b      	ldr	r3, [pc, #44]	; (8045f48 <global_stdio_init.part.0+0x30>)
 8045f1c:	4c0b      	ldr	r4, [pc, #44]	; (8045f4c <global_stdio_init.part.0+0x34>)
 8045f1e:	4a0c      	ldr	r2, [pc, #48]	; (8045f50 <global_stdio_init.part.0+0x38>)
 8045f20:	601a      	str	r2, [r3, #0]
 8045f22:	4620      	mov	r0, r4
 8045f24:	2200      	movs	r2, #0
 8045f26:	2104      	movs	r1, #4
 8045f28:	f7ff ff94 	bl	8045e54 <std>
 8045f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8045f30:	2201      	movs	r2, #1
 8045f32:	2109      	movs	r1, #9
 8045f34:	f7ff ff8e 	bl	8045e54 <std>
 8045f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8045f3c:	2202      	movs	r2, #2
 8045f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045f42:	2112      	movs	r1, #18
 8045f44:	f7ff bf86 	b.w	8045e54 <std>
 8045f48:	2001b554 	.word	0x2001b554
 8045f4c:	2001b41c 	.word	0x2001b41c
 8045f50:	08045ec1 	.word	0x08045ec1

08045f54 <__sfp_lock_acquire>:
 8045f54:	4801      	ldr	r0, [pc, #4]	; (8045f5c <__sfp_lock_acquire+0x8>)
 8045f56:	f000 ba42 	b.w	80463de <__retarget_lock_acquire_recursive>
 8045f5a:	bf00      	nop
 8045f5c:	2001b55d 	.word	0x2001b55d

08045f60 <__sfp_lock_release>:
 8045f60:	4801      	ldr	r0, [pc, #4]	; (8045f68 <__sfp_lock_release+0x8>)
 8045f62:	f000 ba3d 	b.w	80463e0 <__retarget_lock_release_recursive>
 8045f66:	bf00      	nop
 8045f68:	2001b55d 	.word	0x2001b55d

08045f6c <__sinit>:
 8045f6c:	b510      	push	{r4, lr}
 8045f6e:	4604      	mov	r4, r0
 8045f70:	f7ff fff0 	bl	8045f54 <__sfp_lock_acquire>
 8045f74:	6a23      	ldr	r3, [r4, #32]
 8045f76:	b11b      	cbz	r3, 8045f80 <__sinit+0x14>
 8045f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045f7c:	f7ff bff0 	b.w	8045f60 <__sfp_lock_release>
 8045f80:	4b04      	ldr	r3, [pc, #16]	; (8045f94 <__sinit+0x28>)
 8045f82:	6223      	str	r3, [r4, #32]
 8045f84:	4b04      	ldr	r3, [pc, #16]	; (8045f98 <__sinit+0x2c>)
 8045f86:	681b      	ldr	r3, [r3, #0]
 8045f88:	2b00      	cmp	r3, #0
 8045f8a:	d1f5      	bne.n	8045f78 <__sinit+0xc>
 8045f8c:	f7ff ffc4 	bl	8045f18 <global_stdio_init.part.0>
 8045f90:	e7f2      	b.n	8045f78 <__sinit+0xc>
 8045f92:	bf00      	nop
 8045f94:	08045ed9 	.word	0x08045ed9
 8045f98:	2001b554 	.word	0x2001b554

08045f9c <_fwalk_sglue>:
 8045f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045fa0:	4607      	mov	r7, r0
 8045fa2:	4688      	mov	r8, r1
 8045fa4:	4614      	mov	r4, r2
 8045fa6:	2600      	movs	r6, #0
 8045fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8045fac:	f1b9 0901 	subs.w	r9, r9, #1
 8045fb0:	d505      	bpl.n	8045fbe <_fwalk_sglue+0x22>
 8045fb2:	6824      	ldr	r4, [r4, #0]
 8045fb4:	2c00      	cmp	r4, #0
 8045fb6:	d1f7      	bne.n	8045fa8 <_fwalk_sglue+0xc>
 8045fb8:	4630      	mov	r0, r6
 8045fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8045fbe:	89ab      	ldrh	r3, [r5, #12]
 8045fc0:	2b01      	cmp	r3, #1
 8045fc2:	d907      	bls.n	8045fd4 <_fwalk_sglue+0x38>
 8045fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8045fc8:	3301      	adds	r3, #1
 8045fca:	d003      	beq.n	8045fd4 <_fwalk_sglue+0x38>
 8045fcc:	4629      	mov	r1, r5
 8045fce:	4638      	mov	r0, r7
 8045fd0:	47c0      	blx	r8
 8045fd2:	4306      	orrs	r6, r0
 8045fd4:	3568      	adds	r5, #104	; 0x68
 8045fd6:	e7e9      	b.n	8045fac <_fwalk_sglue+0x10>

08045fd8 <_puts_r>:
 8045fd8:	6a03      	ldr	r3, [r0, #32]
 8045fda:	b570      	push	{r4, r5, r6, lr}
 8045fdc:	6884      	ldr	r4, [r0, #8]
 8045fde:	4605      	mov	r5, r0
 8045fe0:	460e      	mov	r6, r1
 8045fe2:	b90b      	cbnz	r3, 8045fe8 <_puts_r+0x10>
 8045fe4:	f7ff ffc2 	bl	8045f6c <__sinit>
 8045fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8045fea:	07db      	lsls	r3, r3, #31
 8045fec:	d405      	bmi.n	8045ffa <_puts_r+0x22>
 8045fee:	89a3      	ldrh	r3, [r4, #12]
 8045ff0:	0598      	lsls	r0, r3, #22
 8045ff2:	d402      	bmi.n	8045ffa <_puts_r+0x22>
 8045ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8045ff6:	f000 f9f2 	bl	80463de <__retarget_lock_acquire_recursive>
 8045ffa:	89a3      	ldrh	r3, [r4, #12]
 8045ffc:	0719      	lsls	r1, r3, #28
 8045ffe:	d513      	bpl.n	8046028 <_puts_r+0x50>
 8046000:	6923      	ldr	r3, [r4, #16]
 8046002:	b18b      	cbz	r3, 8046028 <_puts_r+0x50>
 8046004:	3e01      	subs	r6, #1
 8046006:	68a3      	ldr	r3, [r4, #8]
 8046008:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804600c:	3b01      	subs	r3, #1
 804600e:	60a3      	str	r3, [r4, #8]
 8046010:	b9e9      	cbnz	r1, 804604e <_puts_r+0x76>
 8046012:	2b00      	cmp	r3, #0
 8046014:	da2e      	bge.n	8046074 <_puts_r+0x9c>
 8046016:	4622      	mov	r2, r4
 8046018:	210a      	movs	r1, #10
 804601a:	4628      	mov	r0, r5
 804601c:	f000 f87b 	bl	8046116 <__swbuf_r>
 8046020:	3001      	adds	r0, #1
 8046022:	d007      	beq.n	8046034 <_puts_r+0x5c>
 8046024:	250a      	movs	r5, #10
 8046026:	e007      	b.n	8046038 <_puts_r+0x60>
 8046028:	4621      	mov	r1, r4
 804602a:	4628      	mov	r0, r5
 804602c:	f000 f8b0 	bl	8046190 <__swsetup_r>
 8046030:	2800      	cmp	r0, #0
 8046032:	d0e7      	beq.n	8046004 <_puts_r+0x2c>
 8046034:	f04f 35ff 	mov.w	r5, #4294967295
 8046038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804603a:	07da      	lsls	r2, r3, #31
 804603c:	d405      	bmi.n	804604a <_puts_r+0x72>
 804603e:	89a3      	ldrh	r3, [r4, #12]
 8046040:	059b      	lsls	r3, r3, #22
 8046042:	d402      	bmi.n	804604a <_puts_r+0x72>
 8046044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8046046:	f000 f9cb 	bl	80463e0 <__retarget_lock_release_recursive>
 804604a:	4628      	mov	r0, r5
 804604c:	bd70      	pop	{r4, r5, r6, pc}
 804604e:	2b00      	cmp	r3, #0
 8046050:	da04      	bge.n	804605c <_puts_r+0x84>
 8046052:	69a2      	ldr	r2, [r4, #24]
 8046054:	429a      	cmp	r2, r3
 8046056:	dc06      	bgt.n	8046066 <_puts_r+0x8e>
 8046058:	290a      	cmp	r1, #10
 804605a:	d004      	beq.n	8046066 <_puts_r+0x8e>
 804605c:	6823      	ldr	r3, [r4, #0]
 804605e:	1c5a      	adds	r2, r3, #1
 8046060:	6022      	str	r2, [r4, #0]
 8046062:	7019      	strb	r1, [r3, #0]
 8046064:	e7cf      	b.n	8046006 <_puts_r+0x2e>
 8046066:	4622      	mov	r2, r4
 8046068:	4628      	mov	r0, r5
 804606a:	f000 f854 	bl	8046116 <__swbuf_r>
 804606e:	3001      	adds	r0, #1
 8046070:	d1c9      	bne.n	8046006 <_puts_r+0x2e>
 8046072:	e7df      	b.n	8046034 <_puts_r+0x5c>
 8046074:	6823      	ldr	r3, [r4, #0]
 8046076:	250a      	movs	r5, #10
 8046078:	1c5a      	adds	r2, r3, #1
 804607a:	6022      	str	r2, [r4, #0]
 804607c:	701d      	strb	r5, [r3, #0]
 804607e:	e7db      	b.n	8046038 <_puts_r+0x60>

08046080 <puts>:
 8046080:	4b02      	ldr	r3, [pc, #8]	; (804608c <puts+0xc>)
 8046082:	4601      	mov	r1, r0
 8046084:	6818      	ldr	r0, [r3, #0]
 8046086:	f7ff bfa7 	b.w	8045fd8 <_puts_r>
 804608a:	bf00      	nop
 804608c:	20000068 	.word	0x20000068

08046090 <__sread>:
 8046090:	b510      	push	{r4, lr}
 8046092:	460c      	mov	r4, r1
 8046094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046098:	f000 f952 	bl	8046340 <_read_r>
 804609c:	2800      	cmp	r0, #0
 804609e:	bfab      	itete	ge
 80460a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80460a2:	89a3      	ldrhlt	r3, [r4, #12]
 80460a4:	181b      	addge	r3, r3, r0
 80460a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80460aa:	bfac      	ite	ge
 80460ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80460ae:	81a3      	strhlt	r3, [r4, #12]
 80460b0:	bd10      	pop	{r4, pc}

080460b2 <__swrite>:
 80460b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80460b6:	461f      	mov	r7, r3
 80460b8:	898b      	ldrh	r3, [r1, #12]
 80460ba:	05db      	lsls	r3, r3, #23
 80460bc:	4605      	mov	r5, r0
 80460be:	460c      	mov	r4, r1
 80460c0:	4616      	mov	r6, r2
 80460c2:	d505      	bpl.n	80460d0 <__swrite+0x1e>
 80460c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80460c8:	2302      	movs	r3, #2
 80460ca:	2200      	movs	r2, #0
 80460cc:	f000 f926 	bl	804631c <_lseek_r>
 80460d0:	89a3      	ldrh	r3, [r4, #12]
 80460d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80460d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80460da:	81a3      	strh	r3, [r4, #12]
 80460dc:	4632      	mov	r2, r6
 80460de:	463b      	mov	r3, r7
 80460e0:	4628      	mov	r0, r5
 80460e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80460e6:	f000 b93d 	b.w	8046364 <_write_r>

080460ea <__sseek>:
 80460ea:	b510      	push	{r4, lr}
 80460ec:	460c      	mov	r4, r1
 80460ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80460f2:	f000 f913 	bl	804631c <_lseek_r>
 80460f6:	1c43      	adds	r3, r0, #1
 80460f8:	89a3      	ldrh	r3, [r4, #12]
 80460fa:	bf15      	itete	ne
 80460fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80460fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8046102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8046106:	81a3      	strheq	r3, [r4, #12]
 8046108:	bf18      	it	ne
 804610a:	81a3      	strhne	r3, [r4, #12]
 804610c:	bd10      	pop	{r4, pc}

0804610e <__sclose>:
 804610e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046112:	f000 b89d 	b.w	8046250 <_close_r>

08046116 <__swbuf_r>:
 8046116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046118:	460e      	mov	r6, r1
 804611a:	4614      	mov	r4, r2
 804611c:	4605      	mov	r5, r0
 804611e:	b118      	cbz	r0, 8046128 <__swbuf_r+0x12>
 8046120:	6a03      	ldr	r3, [r0, #32]
 8046122:	b90b      	cbnz	r3, 8046128 <__swbuf_r+0x12>
 8046124:	f7ff ff22 	bl	8045f6c <__sinit>
 8046128:	69a3      	ldr	r3, [r4, #24]
 804612a:	60a3      	str	r3, [r4, #8]
 804612c:	89a3      	ldrh	r3, [r4, #12]
 804612e:	071a      	lsls	r2, r3, #28
 8046130:	d525      	bpl.n	804617e <__swbuf_r+0x68>
 8046132:	6923      	ldr	r3, [r4, #16]
 8046134:	b31b      	cbz	r3, 804617e <__swbuf_r+0x68>
 8046136:	6823      	ldr	r3, [r4, #0]
 8046138:	6922      	ldr	r2, [r4, #16]
 804613a:	1a98      	subs	r0, r3, r2
 804613c:	6963      	ldr	r3, [r4, #20]
 804613e:	b2f6      	uxtb	r6, r6
 8046140:	4283      	cmp	r3, r0
 8046142:	4637      	mov	r7, r6
 8046144:	dc04      	bgt.n	8046150 <__swbuf_r+0x3a>
 8046146:	4621      	mov	r1, r4
 8046148:	4628      	mov	r0, r5
 804614a:	f000 fac9 	bl	80466e0 <_fflush_r>
 804614e:	b9e0      	cbnz	r0, 804618a <__swbuf_r+0x74>
 8046150:	68a3      	ldr	r3, [r4, #8]
 8046152:	3b01      	subs	r3, #1
 8046154:	60a3      	str	r3, [r4, #8]
 8046156:	6823      	ldr	r3, [r4, #0]
 8046158:	1c5a      	adds	r2, r3, #1
 804615a:	6022      	str	r2, [r4, #0]
 804615c:	701e      	strb	r6, [r3, #0]
 804615e:	6962      	ldr	r2, [r4, #20]
 8046160:	1c43      	adds	r3, r0, #1
 8046162:	429a      	cmp	r2, r3
 8046164:	d004      	beq.n	8046170 <__swbuf_r+0x5a>
 8046166:	89a3      	ldrh	r3, [r4, #12]
 8046168:	07db      	lsls	r3, r3, #31
 804616a:	d506      	bpl.n	804617a <__swbuf_r+0x64>
 804616c:	2e0a      	cmp	r6, #10
 804616e:	d104      	bne.n	804617a <__swbuf_r+0x64>
 8046170:	4621      	mov	r1, r4
 8046172:	4628      	mov	r0, r5
 8046174:	f000 fab4 	bl	80466e0 <_fflush_r>
 8046178:	b938      	cbnz	r0, 804618a <__swbuf_r+0x74>
 804617a:	4638      	mov	r0, r7
 804617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804617e:	4621      	mov	r1, r4
 8046180:	4628      	mov	r0, r5
 8046182:	f000 f805 	bl	8046190 <__swsetup_r>
 8046186:	2800      	cmp	r0, #0
 8046188:	d0d5      	beq.n	8046136 <__swbuf_r+0x20>
 804618a:	f04f 37ff 	mov.w	r7, #4294967295
 804618e:	e7f4      	b.n	804617a <__swbuf_r+0x64>

08046190 <__swsetup_r>:
 8046190:	b538      	push	{r3, r4, r5, lr}
 8046192:	4b2a      	ldr	r3, [pc, #168]	; (804623c <__swsetup_r+0xac>)
 8046194:	4605      	mov	r5, r0
 8046196:	6818      	ldr	r0, [r3, #0]
 8046198:	460c      	mov	r4, r1
 804619a:	b118      	cbz	r0, 80461a4 <__swsetup_r+0x14>
 804619c:	6a03      	ldr	r3, [r0, #32]
 804619e:	b90b      	cbnz	r3, 80461a4 <__swsetup_r+0x14>
 80461a0:	f7ff fee4 	bl	8045f6c <__sinit>
 80461a4:	89a3      	ldrh	r3, [r4, #12]
 80461a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80461aa:	0718      	lsls	r0, r3, #28
 80461ac:	d422      	bmi.n	80461f4 <__swsetup_r+0x64>
 80461ae:	06d9      	lsls	r1, r3, #27
 80461b0:	d407      	bmi.n	80461c2 <__swsetup_r+0x32>
 80461b2:	2309      	movs	r3, #9
 80461b4:	602b      	str	r3, [r5, #0]
 80461b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80461ba:	81a3      	strh	r3, [r4, #12]
 80461bc:	f04f 30ff 	mov.w	r0, #4294967295
 80461c0:	e034      	b.n	804622c <__swsetup_r+0x9c>
 80461c2:	0758      	lsls	r0, r3, #29
 80461c4:	d512      	bpl.n	80461ec <__swsetup_r+0x5c>
 80461c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80461c8:	b141      	cbz	r1, 80461dc <__swsetup_r+0x4c>
 80461ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80461ce:	4299      	cmp	r1, r3
 80461d0:	d002      	beq.n	80461d8 <__swsetup_r+0x48>
 80461d2:	4628      	mov	r0, r5
 80461d4:	f000 f906 	bl	80463e4 <_free_r>
 80461d8:	2300      	movs	r3, #0
 80461da:	6363      	str	r3, [r4, #52]	; 0x34
 80461dc:	89a3      	ldrh	r3, [r4, #12]
 80461de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80461e2:	81a3      	strh	r3, [r4, #12]
 80461e4:	2300      	movs	r3, #0
 80461e6:	6063      	str	r3, [r4, #4]
 80461e8:	6923      	ldr	r3, [r4, #16]
 80461ea:	6023      	str	r3, [r4, #0]
 80461ec:	89a3      	ldrh	r3, [r4, #12]
 80461ee:	f043 0308 	orr.w	r3, r3, #8
 80461f2:	81a3      	strh	r3, [r4, #12]
 80461f4:	6923      	ldr	r3, [r4, #16]
 80461f6:	b94b      	cbnz	r3, 804620c <__swsetup_r+0x7c>
 80461f8:	89a3      	ldrh	r3, [r4, #12]
 80461fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80461fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046202:	d003      	beq.n	804620c <__swsetup_r+0x7c>
 8046204:	4621      	mov	r1, r4
 8046206:	4628      	mov	r0, r5
 8046208:	f000 fab8 	bl	804677c <__smakebuf_r>
 804620c:	89a0      	ldrh	r0, [r4, #12]
 804620e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8046212:	f010 0301 	ands.w	r3, r0, #1
 8046216:	d00a      	beq.n	804622e <__swsetup_r+0x9e>
 8046218:	2300      	movs	r3, #0
 804621a:	60a3      	str	r3, [r4, #8]
 804621c:	6963      	ldr	r3, [r4, #20]
 804621e:	425b      	negs	r3, r3
 8046220:	61a3      	str	r3, [r4, #24]
 8046222:	6923      	ldr	r3, [r4, #16]
 8046224:	b943      	cbnz	r3, 8046238 <__swsetup_r+0xa8>
 8046226:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804622a:	d1c4      	bne.n	80461b6 <__swsetup_r+0x26>
 804622c:	bd38      	pop	{r3, r4, r5, pc}
 804622e:	0781      	lsls	r1, r0, #30
 8046230:	bf58      	it	pl
 8046232:	6963      	ldrpl	r3, [r4, #20]
 8046234:	60a3      	str	r3, [r4, #8]
 8046236:	e7f4      	b.n	8046222 <__swsetup_r+0x92>
 8046238:	2000      	movs	r0, #0
 804623a:	e7f7      	b.n	804622c <__swsetup_r+0x9c>
 804623c:	20000068 	.word	0x20000068

08046240 <memset>:
 8046240:	4402      	add	r2, r0
 8046242:	4603      	mov	r3, r0
 8046244:	4293      	cmp	r3, r2
 8046246:	d100      	bne.n	804624a <memset+0xa>
 8046248:	4770      	bx	lr
 804624a:	f803 1b01 	strb.w	r1, [r3], #1
 804624e:	e7f9      	b.n	8046244 <memset+0x4>

08046250 <_close_r>:
 8046250:	b538      	push	{r3, r4, r5, lr}
 8046252:	4d06      	ldr	r5, [pc, #24]	; (804626c <_close_r+0x1c>)
 8046254:	2300      	movs	r3, #0
 8046256:	4604      	mov	r4, r0
 8046258:	4608      	mov	r0, r1
 804625a:	602b      	str	r3, [r5, #0]
 804625c:	f7fa fd61 	bl	8040d22 <_close>
 8046260:	1c43      	adds	r3, r0, #1
 8046262:	d102      	bne.n	804626a <_close_r+0x1a>
 8046264:	682b      	ldr	r3, [r5, #0]
 8046266:	b103      	cbz	r3, 804626a <_close_r+0x1a>
 8046268:	6023      	str	r3, [r4, #0]
 804626a:	bd38      	pop	{r3, r4, r5, pc}
 804626c:	2001b558 	.word	0x2001b558

08046270 <_reclaim_reent>:
 8046270:	4b29      	ldr	r3, [pc, #164]	; (8046318 <_reclaim_reent+0xa8>)
 8046272:	681b      	ldr	r3, [r3, #0]
 8046274:	4283      	cmp	r3, r0
 8046276:	b570      	push	{r4, r5, r6, lr}
 8046278:	4604      	mov	r4, r0
 804627a:	d04b      	beq.n	8046314 <_reclaim_reent+0xa4>
 804627c:	69c3      	ldr	r3, [r0, #28]
 804627e:	b143      	cbz	r3, 8046292 <_reclaim_reent+0x22>
 8046280:	68db      	ldr	r3, [r3, #12]
 8046282:	2b00      	cmp	r3, #0
 8046284:	d144      	bne.n	8046310 <_reclaim_reent+0xa0>
 8046286:	69e3      	ldr	r3, [r4, #28]
 8046288:	6819      	ldr	r1, [r3, #0]
 804628a:	b111      	cbz	r1, 8046292 <_reclaim_reent+0x22>
 804628c:	4620      	mov	r0, r4
 804628e:	f000 f8a9 	bl	80463e4 <_free_r>
 8046292:	6961      	ldr	r1, [r4, #20]
 8046294:	b111      	cbz	r1, 804629c <_reclaim_reent+0x2c>
 8046296:	4620      	mov	r0, r4
 8046298:	f000 f8a4 	bl	80463e4 <_free_r>
 804629c:	69e1      	ldr	r1, [r4, #28]
 804629e:	b111      	cbz	r1, 80462a6 <_reclaim_reent+0x36>
 80462a0:	4620      	mov	r0, r4
 80462a2:	f000 f89f 	bl	80463e4 <_free_r>
 80462a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80462a8:	b111      	cbz	r1, 80462b0 <_reclaim_reent+0x40>
 80462aa:	4620      	mov	r0, r4
 80462ac:	f000 f89a 	bl	80463e4 <_free_r>
 80462b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80462b2:	b111      	cbz	r1, 80462ba <_reclaim_reent+0x4a>
 80462b4:	4620      	mov	r0, r4
 80462b6:	f000 f895 	bl	80463e4 <_free_r>
 80462ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80462bc:	b111      	cbz	r1, 80462c4 <_reclaim_reent+0x54>
 80462be:	4620      	mov	r0, r4
 80462c0:	f000 f890 	bl	80463e4 <_free_r>
 80462c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80462c6:	b111      	cbz	r1, 80462ce <_reclaim_reent+0x5e>
 80462c8:	4620      	mov	r0, r4
 80462ca:	f000 f88b 	bl	80463e4 <_free_r>
 80462ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80462d0:	b111      	cbz	r1, 80462d8 <_reclaim_reent+0x68>
 80462d2:	4620      	mov	r0, r4
 80462d4:	f000 f886 	bl	80463e4 <_free_r>
 80462d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80462da:	b111      	cbz	r1, 80462e2 <_reclaim_reent+0x72>
 80462dc:	4620      	mov	r0, r4
 80462de:	f000 f881 	bl	80463e4 <_free_r>
 80462e2:	6a23      	ldr	r3, [r4, #32]
 80462e4:	b1b3      	cbz	r3, 8046314 <_reclaim_reent+0xa4>
 80462e6:	4620      	mov	r0, r4
 80462e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80462ec:	4718      	bx	r3
 80462ee:	5949      	ldr	r1, [r1, r5]
 80462f0:	b941      	cbnz	r1, 8046304 <_reclaim_reent+0x94>
 80462f2:	3504      	adds	r5, #4
 80462f4:	69e3      	ldr	r3, [r4, #28]
 80462f6:	2d80      	cmp	r5, #128	; 0x80
 80462f8:	68d9      	ldr	r1, [r3, #12]
 80462fa:	d1f8      	bne.n	80462ee <_reclaim_reent+0x7e>
 80462fc:	4620      	mov	r0, r4
 80462fe:	f000 f871 	bl	80463e4 <_free_r>
 8046302:	e7c0      	b.n	8046286 <_reclaim_reent+0x16>
 8046304:	680e      	ldr	r6, [r1, #0]
 8046306:	4620      	mov	r0, r4
 8046308:	f000 f86c 	bl	80463e4 <_free_r>
 804630c:	4631      	mov	r1, r6
 804630e:	e7ef      	b.n	80462f0 <_reclaim_reent+0x80>
 8046310:	2500      	movs	r5, #0
 8046312:	e7ef      	b.n	80462f4 <_reclaim_reent+0x84>
 8046314:	bd70      	pop	{r4, r5, r6, pc}
 8046316:	bf00      	nop
 8046318:	20000068 	.word	0x20000068

0804631c <_lseek_r>:
 804631c:	b538      	push	{r3, r4, r5, lr}
 804631e:	4d07      	ldr	r5, [pc, #28]	; (804633c <_lseek_r+0x20>)
 8046320:	4604      	mov	r4, r0
 8046322:	4608      	mov	r0, r1
 8046324:	4611      	mov	r1, r2
 8046326:	2200      	movs	r2, #0
 8046328:	602a      	str	r2, [r5, #0]
 804632a:	461a      	mov	r2, r3
 804632c:	f7fa fd20 	bl	8040d70 <_lseek>
 8046330:	1c43      	adds	r3, r0, #1
 8046332:	d102      	bne.n	804633a <_lseek_r+0x1e>
 8046334:	682b      	ldr	r3, [r5, #0]
 8046336:	b103      	cbz	r3, 804633a <_lseek_r+0x1e>
 8046338:	6023      	str	r3, [r4, #0]
 804633a:	bd38      	pop	{r3, r4, r5, pc}
 804633c:	2001b558 	.word	0x2001b558

08046340 <_read_r>:
 8046340:	b538      	push	{r3, r4, r5, lr}
 8046342:	4d07      	ldr	r5, [pc, #28]	; (8046360 <_read_r+0x20>)
 8046344:	4604      	mov	r4, r0
 8046346:	4608      	mov	r0, r1
 8046348:	4611      	mov	r1, r2
 804634a:	2200      	movs	r2, #0
 804634c:	602a      	str	r2, [r5, #0]
 804634e:	461a      	mov	r2, r3
 8046350:	f7fa fcca 	bl	8040ce8 <_read>
 8046354:	1c43      	adds	r3, r0, #1
 8046356:	d102      	bne.n	804635e <_read_r+0x1e>
 8046358:	682b      	ldr	r3, [r5, #0]
 804635a:	b103      	cbz	r3, 804635e <_read_r+0x1e>
 804635c:	6023      	str	r3, [r4, #0]
 804635e:	bd38      	pop	{r3, r4, r5, pc}
 8046360:	2001b558 	.word	0x2001b558

08046364 <_write_r>:
 8046364:	b538      	push	{r3, r4, r5, lr}
 8046366:	4d07      	ldr	r5, [pc, #28]	; (8046384 <_write_r+0x20>)
 8046368:	4604      	mov	r4, r0
 804636a:	4608      	mov	r0, r1
 804636c:	4611      	mov	r1, r2
 804636e:	2200      	movs	r2, #0
 8046370:	602a      	str	r2, [r5, #0]
 8046372:	461a      	mov	r2, r3
 8046374:	f7fa fbbc 	bl	8040af0 <_write>
 8046378:	1c43      	adds	r3, r0, #1
 804637a:	d102      	bne.n	8046382 <_write_r+0x1e>
 804637c:	682b      	ldr	r3, [r5, #0]
 804637e:	b103      	cbz	r3, 8046382 <_write_r+0x1e>
 8046380:	6023      	str	r3, [r4, #0]
 8046382:	bd38      	pop	{r3, r4, r5, pc}
 8046384:	2001b558 	.word	0x2001b558

08046388 <__errno>:
 8046388:	4b01      	ldr	r3, [pc, #4]	; (8046390 <__errno+0x8>)
 804638a:	6818      	ldr	r0, [r3, #0]
 804638c:	4770      	bx	lr
 804638e:	bf00      	nop
 8046390:	20000068 	.word	0x20000068

08046394 <__libc_init_array>:
 8046394:	b570      	push	{r4, r5, r6, lr}
 8046396:	4d0d      	ldr	r5, [pc, #52]	; (80463cc <__libc_init_array+0x38>)
 8046398:	4c0d      	ldr	r4, [pc, #52]	; (80463d0 <__libc_init_array+0x3c>)
 804639a:	1b64      	subs	r4, r4, r5
 804639c:	10a4      	asrs	r4, r4, #2
 804639e:	2600      	movs	r6, #0
 80463a0:	42a6      	cmp	r6, r4
 80463a2:	d109      	bne.n	80463b8 <__libc_init_array+0x24>
 80463a4:	4d0b      	ldr	r5, [pc, #44]	; (80463d4 <__libc_init_array+0x40>)
 80463a6:	4c0c      	ldr	r4, [pc, #48]	; (80463d8 <__libc_init_array+0x44>)
 80463a8:	f000 fa56 	bl	8046858 <_init>
 80463ac:	1b64      	subs	r4, r4, r5
 80463ae:	10a4      	asrs	r4, r4, #2
 80463b0:	2600      	movs	r6, #0
 80463b2:	42a6      	cmp	r6, r4
 80463b4:	d105      	bne.n	80463c2 <__libc_init_array+0x2e>
 80463b6:	bd70      	pop	{r4, r5, r6, pc}
 80463b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80463bc:	4798      	blx	r3
 80463be:	3601      	adds	r6, #1
 80463c0:	e7ee      	b.n	80463a0 <__libc_init_array+0xc>
 80463c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80463c6:	4798      	blx	r3
 80463c8:	3601      	adds	r6, #1
 80463ca:	e7f2      	b.n	80463b2 <__libc_init_array+0x1e>
 80463cc:	08046908 	.word	0x08046908
 80463d0:	08046908 	.word	0x08046908
 80463d4:	08046908 	.word	0x08046908
 80463d8:	0804690c 	.word	0x0804690c

080463dc <__retarget_lock_init_recursive>:
 80463dc:	4770      	bx	lr

080463de <__retarget_lock_acquire_recursive>:
 80463de:	4770      	bx	lr

080463e0 <__retarget_lock_release_recursive>:
 80463e0:	4770      	bx	lr
	...

080463e4 <_free_r>:
 80463e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80463e6:	2900      	cmp	r1, #0
 80463e8:	d044      	beq.n	8046474 <_free_r+0x90>
 80463ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80463ee:	9001      	str	r0, [sp, #4]
 80463f0:	2b00      	cmp	r3, #0
 80463f2:	f1a1 0404 	sub.w	r4, r1, #4
 80463f6:	bfb8      	it	lt
 80463f8:	18e4      	addlt	r4, r4, r3
 80463fa:	f000 f8df 	bl	80465bc <__malloc_lock>
 80463fe:	4a1e      	ldr	r2, [pc, #120]	; (8046478 <_free_r+0x94>)
 8046400:	9801      	ldr	r0, [sp, #4]
 8046402:	6813      	ldr	r3, [r2, #0]
 8046404:	b933      	cbnz	r3, 8046414 <_free_r+0x30>
 8046406:	6063      	str	r3, [r4, #4]
 8046408:	6014      	str	r4, [r2, #0]
 804640a:	b003      	add	sp, #12
 804640c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8046410:	f000 b8da 	b.w	80465c8 <__malloc_unlock>
 8046414:	42a3      	cmp	r3, r4
 8046416:	d908      	bls.n	804642a <_free_r+0x46>
 8046418:	6825      	ldr	r5, [r4, #0]
 804641a:	1961      	adds	r1, r4, r5
 804641c:	428b      	cmp	r3, r1
 804641e:	bf01      	itttt	eq
 8046420:	6819      	ldreq	r1, [r3, #0]
 8046422:	685b      	ldreq	r3, [r3, #4]
 8046424:	1949      	addeq	r1, r1, r5
 8046426:	6021      	streq	r1, [r4, #0]
 8046428:	e7ed      	b.n	8046406 <_free_r+0x22>
 804642a:	461a      	mov	r2, r3
 804642c:	685b      	ldr	r3, [r3, #4]
 804642e:	b10b      	cbz	r3, 8046434 <_free_r+0x50>
 8046430:	42a3      	cmp	r3, r4
 8046432:	d9fa      	bls.n	804642a <_free_r+0x46>
 8046434:	6811      	ldr	r1, [r2, #0]
 8046436:	1855      	adds	r5, r2, r1
 8046438:	42a5      	cmp	r5, r4
 804643a:	d10b      	bne.n	8046454 <_free_r+0x70>
 804643c:	6824      	ldr	r4, [r4, #0]
 804643e:	4421      	add	r1, r4
 8046440:	1854      	adds	r4, r2, r1
 8046442:	42a3      	cmp	r3, r4
 8046444:	6011      	str	r1, [r2, #0]
 8046446:	d1e0      	bne.n	804640a <_free_r+0x26>
 8046448:	681c      	ldr	r4, [r3, #0]
 804644a:	685b      	ldr	r3, [r3, #4]
 804644c:	6053      	str	r3, [r2, #4]
 804644e:	440c      	add	r4, r1
 8046450:	6014      	str	r4, [r2, #0]
 8046452:	e7da      	b.n	804640a <_free_r+0x26>
 8046454:	d902      	bls.n	804645c <_free_r+0x78>
 8046456:	230c      	movs	r3, #12
 8046458:	6003      	str	r3, [r0, #0]
 804645a:	e7d6      	b.n	804640a <_free_r+0x26>
 804645c:	6825      	ldr	r5, [r4, #0]
 804645e:	1961      	adds	r1, r4, r5
 8046460:	428b      	cmp	r3, r1
 8046462:	bf04      	itt	eq
 8046464:	6819      	ldreq	r1, [r3, #0]
 8046466:	685b      	ldreq	r3, [r3, #4]
 8046468:	6063      	str	r3, [r4, #4]
 804646a:	bf04      	itt	eq
 804646c:	1949      	addeq	r1, r1, r5
 804646e:	6021      	streq	r1, [r4, #0]
 8046470:	6054      	str	r4, [r2, #4]
 8046472:	e7ca      	b.n	804640a <_free_r+0x26>
 8046474:	b003      	add	sp, #12
 8046476:	bd30      	pop	{r4, r5, pc}
 8046478:	2001b560 	.word	0x2001b560

0804647c <sbrk_aligned>:
 804647c:	b570      	push	{r4, r5, r6, lr}
 804647e:	4e0e      	ldr	r6, [pc, #56]	; (80464b8 <sbrk_aligned+0x3c>)
 8046480:	460c      	mov	r4, r1
 8046482:	6831      	ldr	r1, [r6, #0]
 8046484:	4605      	mov	r5, r0
 8046486:	b911      	cbnz	r1, 804648e <sbrk_aligned+0x12>
 8046488:	f000 f9d6 	bl	8046838 <_sbrk_r>
 804648c:	6030      	str	r0, [r6, #0]
 804648e:	4621      	mov	r1, r4
 8046490:	4628      	mov	r0, r5
 8046492:	f000 f9d1 	bl	8046838 <_sbrk_r>
 8046496:	1c43      	adds	r3, r0, #1
 8046498:	d00a      	beq.n	80464b0 <sbrk_aligned+0x34>
 804649a:	1cc4      	adds	r4, r0, #3
 804649c:	f024 0403 	bic.w	r4, r4, #3
 80464a0:	42a0      	cmp	r0, r4
 80464a2:	d007      	beq.n	80464b4 <sbrk_aligned+0x38>
 80464a4:	1a21      	subs	r1, r4, r0
 80464a6:	4628      	mov	r0, r5
 80464a8:	f000 f9c6 	bl	8046838 <_sbrk_r>
 80464ac:	3001      	adds	r0, #1
 80464ae:	d101      	bne.n	80464b4 <sbrk_aligned+0x38>
 80464b0:	f04f 34ff 	mov.w	r4, #4294967295
 80464b4:	4620      	mov	r0, r4
 80464b6:	bd70      	pop	{r4, r5, r6, pc}
 80464b8:	2001b564 	.word	0x2001b564

080464bc <_malloc_r>:
 80464bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80464c0:	1ccd      	adds	r5, r1, #3
 80464c2:	f025 0503 	bic.w	r5, r5, #3
 80464c6:	3508      	adds	r5, #8
 80464c8:	2d0c      	cmp	r5, #12
 80464ca:	bf38      	it	cc
 80464cc:	250c      	movcc	r5, #12
 80464ce:	2d00      	cmp	r5, #0
 80464d0:	4607      	mov	r7, r0
 80464d2:	db01      	blt.n	80464d8 <_malloc_r+0x1c>
 80464d4:	42a9      	cmp	r1, r5
 80464d6:	d905      	bls.n	80464e4 <_malloc_r+0x28>
 80464d8:	230c      	movs	r3, #12
 80464da:	603b      	str	r3, [r7, #0]
 80464dc:	2600      	movs	r6, #0
 80464de:	4630      	mov	r0, r6
 80464e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80464e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80465b8 <_malloc_r+0xfc>
 80464e8:	f000 f868 	bl	80465bc <__malloc_lock>
 80464ec:	f8d8 3000 	ldr.w	r3, [r8]
 80464f0:	461c      	mov	r4, r3
 80464f2:	bb5c      	cbnz	r4, 804654c <_malloc_r+0x90>
 80464f4:	4629      	mov	r1, r5
 80464f6:	4638      	mov	r0, r7
 80464f8:	f7ff ffc0 	bl	804647c <sbrk_aligned>
 80464fc:	1c43      	adds	r3, r0, #1
 80464fe:	4604      	mov	r4, r0
 8046500:	d155      	bne.n	80465ae <_malloc_r+0xf2>
 8046502:	f8d8 4000 	ldr.w	r4, [r8]
 8046506:	4626      	mov	r6, r4
 8046508:	2e00      	cmp	r6, #0
 804650a:	d145      	bne.n	8046598 <_malloc_r+0xdc>
 804650c:	2c00      	cmp	r4, #0
 804650e:	d048      	beq.n	80465a2 <_malloc_r+0xe6>
 8046510:	6823      	ldr	r3, [r4, #0]
 8046512:	4631      	mov	r1, r6
 8046514:	4638      	mov	r0, r7
 8046516:	eb04 0903 	add.w	r9, r4, r3
 804651a:	f000 f98d 	bl	8046838 <_sbrk_r>
 804651e:	4581      	cmp	r9, r0
 8046520:	d13f      	bne.n	80465a2 <_malloc_r+0xe6>
 8046522:	6821      	ldr	r1, [r4, #0]
 8046524:	1a6d      	subs	r5, r5, r1
 8046526:	4629      	mov	r1, r5
 8046528:	4638      	mov	r0, r7
 804652a:	f7ff ffa7 	bl	804647c <sbrk_aligned>
 804652e:	3001      	adds	r0, #1
 8046530:	d037      	beq.n	80465a2 <_malloc_r+0xe6>
 8046532:	6823      	ldr	r3, [r4, #0]
 8046534:	442b      	add	r3, r5
 8046536:	6023      	str	r3, [r4, #0]
 8046538:	f8d8 3000 	ldr.w	r3, [r8]
 804653c:	2b00      	cmp	r3, #0
 804653e:	d038      	beq.n	80465b2 <_malloc_r+0xf6>
 8046540:	685a      	ldr	r2, [r3, #4]
 8046542:	42a2      	cmp	r2, r4
 8046544:	d12b      	bne.n	804659e <_malloc_r+0xe2>
 8046546:	2200      	movs	r2, #0
 8046548:	605a      	str	r2, [r3, #4]
 804654a:	e00f      	b.n	804656c <_malloc_r+0xb0>
 804654c:	6822      	ldr	r2, [r4, #0]
 804654e:	1b52      	subs	r2, r2, r5
 8046550:	d41f      	bmi.n	8046592 <_malloc_r+0xd6>
 8046552:	2a0b      	cmp	r2, #11
 8046554:	d917      	bls.n	8046586 <_malloc_r+0xca>
 8046556:	1961      	adds	r1, r4, r5
 8046558:	42a3      	cmp	r3, r4
 804655a:	6025      	str	r5, [r4, #0]
 804655c:	bf18      	it	ne
 804655e:	6059      	strne	r1, [r3, #4]
 8046560:	6863      	ldr	r3, [r4, #4]
 8046562:	bf08      	it	eq
 8046564:	f8c8 1000 	streq.w	r1, [r8]
 8046568:	5162      	str	r2, [r4, r5]
 804656a:	604b      	str	r3, [r1, #4]
 804656c:	4638      	mov	r0, r7
 804656e:	f104 060b 	add.w	r6, r4, #11
 8046572:	f000 f829 	bl	80465c8 <__malloc_unlock>
 8046576:	f026 0607 	bic.w	r6, r6, #7
 804657a:	1d23      	adds	r3, r4, #4
 804657c:	1af2      	subs	r2, r6, r3
 804657e:	d0ae      	beq.n	80464de <_malloc_r+0x22>
 8046580:	1b9b      	subs	r3, r3, r6
 8046582:	50a3      	str	r3, [r4, r2]
 8046584:	e7ab      	b.n	80464de <_malloc_r+0x22>
 8046586:	42a3      	cmp	r3, r4
 8046588:	6862      	ldr	r2, [r4, #4]
 804658a:	d1dd      	bne.n	8046548 <_malloc_r+0x8c>
 804658c:	f8c8 2000 	str.w	r2, [r8]
 8046590:	e7ec      	b.n	804656c <_malloc_r+0xb0>
 8046592:	4623      	mov	r3, r4
 8046594:	6864      	ldr	r4, [r4, #4]
 8046596:	e7ac      	b.n	80464f2 <_malloc_r+0x36>
 8046598:	4634      	mov	r4, r6
 804659a:	6876      	ldr	r6, [r6, #4]
 804659c:	e7b4      	b.n	8046508 <_malloc_r+0x4c>
 804659e:	4613      	mov	r3, r2
 80465a0:	e7cc      	b.n	804653c <_malloc_r+0x80>
 80465a2:	230c      	movs	r3, #12
 80465a4:	603b      	str	r3, [r7, #0]
 80465a6:	4638      	mov	r0, r7
 80465a8:	f000 f80e 	bl	80465c8 <__malloc_unlock>
 80465ac:	e797      	b.n	80464de <_malloc_r+0x22>
 80465ae:	6025      	str	r5, [r4, #0]
 80465b0:	e7dc      	b.n	804656c <_malloc_r+0xb0>
 80465b2:	605b      	str	r3, [r3, #4]
 80465b4:	deff      	udf	#255	; 0xff
 80465b6:	bf00      	nop
 80465b8:	2001b560 	.word	0x2001b560

080465bc <__malloc_lock>:
 80465bc:	4801      	ldr	r0, [pc, #4]	; (80465c4 <__malloc_lock+0x8>)
 80465be:	f7ff bf0e 	b.w	80463de <__retarget_lock_acquire_recursive>
 80465c2:	bf00      	nop
 80465c4:	2001b55c 	.word	0x2001b55c

080465c8 <__malloc_unlock>:
 80465c8:	4801      	ldr	r0, [pc, #4]	; (80465d0 <__malloc_unlock+0x8>)
 80465ca:	f7ff bf09 	b.w	80463e0 <__retarget_lock_release_recursive>
 80465ce:	bf00      	nop
 80465d0:	2001b55c 	.word	0x2001b55c

080465d4 <__sflush_r>:
 80465d4:	898a      	ldrh	r2, [r1, #12]
 80465d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80465da:	4605      	mov	r5, r0
 80465dc:	0710      	lsls	r0, r2, #28
 80465de:	460c      	mov	r4, r1
 80465e0:	d458      	bmi.n	8046694 <__sflush_r+0xc0>
 80465e2:	684b      	ldr	r3, [r1, #4]
 80465e4:	2b00      	cmp	r3, #0
 80465e6:	dc05      	bgt.n	80465f4 <__sflush_r+0x20>
 80465e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80465ea:	2b00      	cmp	r3, #0
 80465ec:	dc02      	bgt.n	80465f4 <__sflush_r+0x20>
 80465ee:	2000      	movs	r0, #0
 80465f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80465f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80465f6:	2e00      	cmp	r6, #0
 80465f8:	d0f9      	beq.n	80465ee <__sflush_r+0x1a>
 80465fa:	2300      	movs	r3, #0
 80465fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8046600:	682f      	ldr	r7, [r5, #0]
 8046602:	6a21      	ldr	r1, [r4, #32]
 8046604:	602b      	str	r3, [r5, #0]
 8046606:	d032      	beq.n	804666e <__sflush_r+0x9a>
 8046608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804660a:	89a3      	ldrh	r3, [r4, #12]
 804660c:	075a      	lsls	r2, r3, #29
 804660e:	d505      	bpl.n	804661c <__sflush_r+0x48>
 8046610:	6863      	ldr	r3, [r4, #4]
 8046612:	1ac0      	subs	r0, r0, r3
 8046614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8046616:	b10b      	cbz	r3, 804661c <__sflush_r+0x48>
 8046618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804661a:	1ac0      	subs	r0, r0, r3
 804661c:	2300      	movs	r3, #0
 804661e:	4602      	mov	r2, r0
 8046620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8046622:	6a21      	ldr	r1, [r4, #32]
 8046624:	4628      	mov	r0, r5
 8046626:	47b0      	blx	r6
 8046628:	1c43      	adds	r3, r0, #1
 804662a:	89a3      	ldrh	r3, [r4, #12]
 804662c:	d106      	bne.n	804663c <__sflush_r+0x68>
 804662e:	6829      	ldr	r1, [r5, #0]
 8046630:	291d      	cmp	r1, #29
 8046632:	d82b      	bhi.n	804668c <__sflush_r+0xb8>
 8046634:	4a29      	ldr	r2, [pc, #164]	; (80466dc <__sflush_r+0x108>)
 8046636:	410a      	asrs	r2, r1
 8046638:	07d6      	lsls	r6, r2, #31
 804663a:	d427      	bmi.n	804668c <__sflush_r+0xb8>
 804663c:	2200      	movs	r2, #0
 804663e:	6062      	str	r2, [r4, #4]
 8046640:	04d9      	lsls	r1, r3, #19
 8046642:	6922      	ldr	r2, [r4, #16]
 8046644:	6022      	str	r2, [r4, #0]
 8046646:	d504      	bpl.n	8046652 <__sflush_r+0x7e>
 8046648:	1c42      	adds	r2, r0, #1
 804664a:	d101      	bne.n	8046650 <__sflush_r+0x7c>
 804664c:	682b      	ldr	r3, [r5, #0]
 804664e:	b903      	cbnz	r3, 8046652 <__sflush_r+0x7e>
 8046650:	6560      	str	r0, [r4, #84]	; 0x54
 8046652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8046654:	602f      	str	r7, [r5, #0]
 8046656:	2900      	cmp	r1, #0
 8046658:	d0c9      	beq.n	80465ee <__sflush_r+0x1a>
 804665a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804665e:	4299      	cmp	r1, r3
 8046660:	d002      	beq.n	8046668 <__sflush_r+0x94>
 8046662:	4628      	mov	r0, r5
 8046664:	f7ff febe 	bl	80463e4 <_free_r>
 8046668:	2000      	movs	r0, #0
 804666a:	6360      	str	r0, [r4, #52]	; 0x34
 804666c:	e7c0      	b.n	80465f0 <__sflush_r+0x1c>
 804666e:	2301      	movs	r3, #1
 8046670:	4628      	mov	r0, r5
 8046672:	47b0      	blx	r6
 8046674:	1c41      	adds	r1, r0, #1
 8046676:	d1c8      	bne.n	804660a <__sflush_r+0x36>
 8046678:	682b      	ldr	r3, [r5, #0]
 804667a:	2b00      	cmp	r3, #0
 804667c:	d0c5      	beq.n	804660a <__sflush_r+0x36>
 804667e:	2b1d      	cmp	r3, #29
 8046680:	d001      	beq.n	8046686 <__sflush_r+0xb2>
 8046682:	2b16      	cmp	r3, #22
 8046684:	d101      	bne.n	804668a <__sflush_r+0xb6>
 8046686:	602f      	str	r7, [r5, #0]
 8046688:	e7b1      	b.n	80465ee <__sflush_r+0x1a>
 804668a:	89a3      	ldrh	r3, [r4, #12]
 804668c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046690:	81a3      	strh	r3, [r4, #12]
 8046692:	e7ad      	b.n	80465f0 <__sflush_r+0x1c>
 8046694:	690f      	ldr	r7, [r1, #16]
 8046696:	2f00      	cmp	r7, #0
 8046698:	d0a9      	beq.n	80465ee <__sflush_r+0x1a>
 804669a:	0793      	lsls	r3, r2, #30
 804669c:	680e      	ldr	r6, [r1, #0]
 804669e:	bf08      	it	eq
 80466a0:	694b      	ldreq	r3, [r1, #20]
 80466a2:	600f      	str	r7, [r1, #0]
 80466a4:	bf18      	it	ne
 80466a6:	2300      	movne	r3, #0
 80466a8:	eba6 0807 	sub.w	r8, r6, r7
 80466ac:	608b      	str	r3, [r1, #8]
 80466ae:	f1b8 0f00 	cmp.w	r8, #0
 80466b2:	dd9c      	ble.n	80465ee <__sflush_r+0x1a>
 80466b4:	6a21      	ldr	r1, [r4, #32]
 80466b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80466b8:	4643      	mov	r3, r8
 80466ba:	463a      	mov	r2, r7
 80466bc:	4628      	mov	r0, r5
 80466be:	47b0      	blx	r6
 80466c0:	2800      	cmp	r0, #0
 80466c2:	dc06      	bgt.n	80466d2 <__sflush_r+0xfe>
 80466c4:	89a3      	ldrh	r3, [r4, #12]
 80466c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80466ca:	81a3      	strh	r3, [r4, #12]
 80466cc:	f04f 30ff 	mov.w	r0, #4294967295
 80466d0:	e78e      	b.n	80465f0 <__sflush_r+0x1c>
 80466d2:	4407      	add	r7, r0
 80466d4:	eba8 0800 	sub.w	r8, r8, r0
 80466d8:	e7e9      	b.n	80466ae <__sflush_r+0xda>
 80466da:	bf00      	nop
 80466dc:	dfbffffe 	.word	0xdfbffffe

080466e0 <_fflush_r>:
 80466e0:	b538      	push	{r3, r4, r5, lr}
 80466e2:	690b      	ldr	r3, [r1, #16]
 80466e4:	4605      	mov	r5, r0
 80466e6:	460c      	mov	r4, r1
 80466e8:	b913      	cbnz	r3, 80466f0 <_fflush_r+0x10>
 80466ea:	2500      	movs	r5, #0
 80466ec:	4628      	mov	r0, r5
 80466ee:	bd38      	pop	{r3, r4, r5, pc}
 80466f0:	b118      	cbz	r0, 80466fa <_fflush_r+0x1a>
 80466f2:	6a03      	ldr	r3, [r0, #32]
 80466f4:	b90b      	cbnz	r3, 80466fa <_fflush_r+0x1a>
 80466f6:	f7ff fc39 	bl	8045f6c <__sinit>
 80466fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80466fe:	2b00      	cmp	r3, #0
 8046700:	d0f3      	beq.n	80466ea <_fflush_r+0xa>
 8046702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8046704:	07d0      	lsls	r0, r2, #31
 8046706:	d404      	bmi.n	8046712 <_fflush_r+0x32>
 8046708:	0599      	lsls	r1, r3, #22
 804670a:	d402      	bmi.n	8046712 <_fflush_r+0x32>
 804670c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804670e:	f7ff fe66 	bl	80463de <__retarget_lock_acquire_recursive>
 8046712:	4628      	mov	r0, r5
 8046714:	4621      	mov	r1, r4
 8046716:	f7ff ff5d 	bl	80465d4 <__sflush_r>
 804671a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804671c:	07da      	lsls	r2, r3, #31
 804671e:	4605      	mov	r5, r0
 8046720:	d4e4      	bmi.n	80466ec <_fflush_r+0xc>
 8046722:	89a3      	ldrh	r3, [r4, #12]
 8046724:	059b      	lsls	r3, r3, #22
 8046726:	d4e1      	bmi.n	80466ec <_fflush_r+0xc>
 8046728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804672a:	f7ff fe59 	bl	80463e0 <__retarget_lock_release_recursive>
 804672e:	e7dd      	b.n	80466ec <_fflush_r+0xc>

08046730 <__swhatbuf_r>:
 8046730:	b570      	push	{r4, r5, r6, lr}
 8046732:	460c      	mov	r4, r1
 8046734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046738:	2900      	cmp	r1, #0
 804673a:	b096      	sub	sp, #88	; 0x58
 804673c:	4615      	mov	r5, r2
 804673e:	461e      	mov	r6, r3
 8046740:	da0d      	bge.n	804675e <__swhatbuf_r+0x2e>
 8046742:	89a3      	ldrh	r3, [r4, #12]
 8046744:	f013 0f80 	tst.w	r3, #128	; 0x80
 8046748:	f04f 0100 	mov.w	r1, #0
 804674c:	bf0c      	ite	eq
 804674e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8046752:	2340      	movne	r3, #64	; 0x40
 8046754:	2000      	movs	r0, #0
 8046756:	6031      	str	r1, [r6, #0]
 8046758:	602b      	str	r3, [r5, #0]
 804675a:	b016      	add	sp, #88	; 0x58
 804675c:	bd70      	pop	{r4, r5, r6, pc}
 804675e:	466a      	mov	r2, sp
 8046760:	f000 f848 	bl	80467f4 <_fstat_r>
 8046764:	2800      	cmp	r0, #0
 8046766:	dbec      	blt.n	8046742 <__swhatbuf_r+0x12>
 8046768:	9901      	ldr	r1, [sp, #4]
 804676a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 804676e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8046772:	4259      	negs	r1, r3
 8046774:	4159      	adcs	r1, r3
 8046776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804677a:	e7eb      	b.n	8046754 <__swhatbuf_r+0x24>

0804677c <__smakebuf_r>:
 804677c:	898b      	ldrh	r3, [r1, #12]
 804677e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8046780:	079d      	lsls	r5, r3, #30
 8046782:	4606      	mov	r6, r0
 8046784:	460c      	mov	r4, r1
 8046786:	d507      	bpl.n	8046798 <__smakebuf_r+0x1c>
 8046788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804678c:	6023      	str	r3, [r4, #0]
 804678e:	6123      	str	r3, [r4, #16]
 8046790:	2301      	movs	r3, #1
 8046792:	6163      	str	r3, [r4, #20]
 8046794:	b002      	add	sp, #8
 8046796:	bd70      	pop	{r4, r5, r6, pc}
 8046798:	ab01      	add	r3, sp, #4
 804679a:	466a      	mov	r2, sp
 804679c:	f7ff ffc8 	bl	8046730 <__swhatbuf_r>
 80467a0:	9900      	ldr	r1, [sp, #0]
 80467a2:	4605      	mov	r5, r0
 80467a4:	4630      	mov	r0, r6
 80467a6:	f7ff fe89 	bl	80464bc <_malloc_r>
 80467aa:	b948      	cbnz	r0, 80467c0 <__smakebuf_r+0x44>
 80467ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80467b0:	059a      	lsls	r2, r3, #22
 80467b2:	d4ef      	bmi.n	8046794 <__smakebuf_r+0x18>
 80467b4:	f023 0303 	bic.w	r3, r3, #3
 80467b8:	f043 0302 	orr.w	r3, r3, #2
 80467bc:	81a3      	strh	r3, [r4, #12]
 80467be:	e7e3      	b.n	8046788 <__smakebuf_r+0xc>
 80467c0:	89a3      	ldrh	r3, [r4, #12]
 80467c2:	6020      	str	r0, [r4, #0]
 80467c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80467c8:	81a3      	strh	r3, [r4, #12]
 80467ca:	9b00      	ldr	r3, [sp, #0]
 80467cc:	6163      	str	r3, [r4, #20]
 80467ce:	9b01      	ldr	r3, [sp, #4]
 80467d0:	6120      	str	r0, [r4, #16]
 80467d2:	b15b      	cbz	r3, 80467ec <__smakebuf_r+0x70>
 80467d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80467d8:	4630      	mov	r0, r6
 80467da:	f000 f81d 	bl	8046818 <_isatty_r>
 80467de:	b128      	cbz	r0, 80467ec <__smakebuf_r+0x70>
 80467e0:	89a3      	ldrh	r3, [r4, #12]
 80467e2:	f023 0303 	bic.w	r3, r3, #3
 80467e6:	f043 0301 	orr.w	r3, r3, #1
 80467ea:	81a3      	strh	r3, [r4, #12]
 80467ec:	89a3      	ldrh	r3, [r4, #12]
 80467ee:	431d      	orrs	r5, r3
 80467f0:	81a5      	strh	r5, [r4, #12]
 80467f2:	e7cf      	b.n	8046794 <__smakebuf_r+0x18>

080467f4 <_fstat_r>:
 80467f4:	b538      	push	{r3, r4, r5, lr}
 80467f6:	4d07      	ldr	r5, [pc, #28]	; (8046814 <_fstat_r+0x20>)
 80467f8:	2300      	movs	r3, #0
 80467fa:	4604      	mov	r4, r0
 80467fc:	4608      	mov	r0, r1
 80467fe:	4611      	mov	r1, r2
 8046800:	602b      	str	r3, [r5, #0]
 8046802:	f7fa fa9a 	bl	8040d3a <_fstat>
 8046806:	1c43      	adds	r3, r0, #1
 8046808:	d102      	bne.n	8046810 <_fstat_r+0x1c>
 804680a:	682b      	ldr	r3, [r5, #0]
 804680c:	b103      	cbz	r3, 8046810 <_fstat_r+0x1c>
 804680e:	6023      	str	r3, [r4, #0]
 8046810:	bd38      	pop	{r3, r4, r5, pc}
 8046812:	bf00      	nop
 8046814:	2001b558 	.word	0x2001b558

08046818 <_isatty_r>:
 8046818:	b538      	push	{r3, r4, r5, lr}
 804681a:	4d06      	ldr	r5, [pc, #24]	; (8046834 <_isatty_r+0x1c>)
 804681c:	2300      	movs	r3, #0
 804681e:	4604      	mov	r4, r0
 8046820:	4608      	mov	r0, r1
 8046822:	602b      	str	r3, [r5, #0]
 8046824:	f7fa fa99 	bl	8040d5a <_isatty>
 8046828:	1c43      	adds	r3, r0, #1
 804682a:	d102      	bne.n	8046832 <_isatty_r+0x1a>
 804682c:	682b      	ldr	r3, [r5, #0]
 804682e:	b103      	cbz	r3, 8046832 <_isatty_r+0x1a>
 8046830:	6023      	str	r3, [r4, #0]
 8046832:	bd38      	pop	{r3, r4, r5, pc}
 8046834:	2001b558 	.word	0x2001b558

08046838 <_sbrk_r>:
 8046838:	b538      	push	{r3, r4, r5, lr}
 804683a:	4d06      	ldr	r5, [pc, #24]	; (8046854 <_sbrk_r+0x1c>)
 804683c:	2300      	movs	r3, #0
 804683e:	4604      	mov	r4, r0
 8046840:	4608      	mov	r0, r1
 8046842:	602b      	str	r3, [r5, #0]
 8046844:	f7fa faa2 	bl	8040d8c <_sbrk>
 8046848:	1c43      	adds	r3, r0, #1
 804684a:	d102      	bne.n	8046852 <_sbrk_r+0x1a>
 804684c:	682b      	ldr	r3, [r5, #0]
 804684e:	b103      	cbz	r3, 8046852 <_sbrk_r+0x1a>
 8046850:	6023      	str	r3, [r4, #0]
 8046852:	bd38      	pop	{r3, r4, r5, pc}
 8046854:	2001b558 	.word	0x2001b558

08046858 <_init>:
 8046858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804685a:	bf00      	nop
 804685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804685e:	bc08      	pop	{r3}
 8046860:	469e      	mov	lr, r3
 8046862:	4770      	bx	lr

08046864 <_fini>:
 8046864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046866:	bf00      	nop
 8046868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804686a:	bc08      	pop	{r3}
 804686c:	469e      	mov	lr, r3
 804686e:	4770      	bx	lr
