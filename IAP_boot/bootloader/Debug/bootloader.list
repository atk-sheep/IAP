
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000168b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003088  08016ab0  08016ab0  00026ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019b38  08019b38  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08019b38  08019b38  00029b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019b40  08019b40  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019b40  08019b40  00029b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019b44  08019b44  00029b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08019b48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08019bd8  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08019c78  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0004513c  200001d0  08019d18  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00004004  2004530c  08019d18  0003530c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   000361ca  00000000  00000000  00030241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000907a  00000000  00000000  0006640b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000027a8  00000000  00000000  0006f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f0f  00000000  00000000  00071c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003b6b4  00000000  00000000  00073b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00041d31  00000000  00000000  000af1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001242cc  00000000  00000000  000f0f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000aa2c  00000000  00000000  002151f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  0021fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d0 	.word	0x200001d0
 800021c:	00000000 	.word	0x00000000
 8000220:	08016a98 	.word	0x08016a98

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d4 	.word	0x200001d4
 800023c:	08016a98 	.word	0x08016a98

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <delay_init>:
static uint16_t fac_us = 0;
static uint32_t fac_ms = 0;

/*初始化*/
void delay_init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
#if	(!Timebase_Source_is_SysTick)
	fac_ms = 1000000;				//作为时基的计数器时钟频率在HAL_InitTick()中被设为了1MHz
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <delay_init+0x28>)
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <delay_init+0x2c>)
 80005e4:	601a      	str	r2, [r3, #0]
	fac_us = fac_ms / 1000;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <delay_init+0x28>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <delay_init+0x30>)
 80005ec:	fba2 2303 	umull	r2, r3, r2, r3
 80005f0:	099b      	lsrs	r3, r3, #6
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <delay_init+0x34>)
 80005f6:	801a      	strh	r2, [r3, #0]
#else
	fac_ms = SystemCoreClock / 1000;
	fac_us = fac_ms / 1000;
#endif
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200001f0 	.word	0x200001f0
 8000608:	000f4240 	.word	0x000f4240
 800060c:	10624dd3 	.word	0x10624dd3
 8000610:	200001ec 	.word	0x200001ec

08000614 <delay_us>:

/*微秒级延时*/
void delay_us(uint32_t nus)
{
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <delay_us+0x8c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	60fb      	str	r3, [r7, #12]

	ticks = nus * fac_us;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <delay_us+0x90>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <delay_us+0x8c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <delay_us+0x8c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	429a      	cmp	r2, r3
 800065c:	d0f7      	beq.n	800064e <delay_us+0x3a>
		{
			if (tnow < told)
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	429a      	cmp	r2, r3
 8000664:	d206      	bcs.n	8000674 <delay_us+0x60>
			{
				tcnt += told - tnow;
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	4413      	add	r3, r2
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	e007      	b.n	8000684 <delay_us+0x70>
			}
			else
			{
				tcnt += reload - tnow + told;
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	1ad2      	subs	r2, r2, r3
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	4413      	add	r3, r2
 800067e:	69ba      	ldr	r2, [r7, #24]
 8000680:	4413      	add	r3, r2
 8000682:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	429a      	cmp	r2, r3
 800068e:	d200      	bcs.n	8000692 <delay_us+0x7e>
		tnow = Delay_GetCounter();
 8000690:	e7dd      	b.n	800064e <delay_us+0x3a>
			{
				break;
 8000692:	bf00      	nop
			}
		}
	}
}
 8000694:	bf00      	nop
 8000696:	3724      	adds	r7, #36	; 0x24
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	2000ab10 	.word	0x2000ab10
 80006a4:	200001ec 	.word	0x200001ec

080006a8 <delay_ms>:

/*毫秒级延时*/
void delay_ms(uint32_t nms)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uint32_t ticks = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
	uint32_t told = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
	uint32_t tnow = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
	uint32_t tcnt = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
	uint32_t reload = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]

	reload = Delay_GetAutoreload();
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <delay_ms+0x8c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	60fb      	str	r3, [r7, #12]

	ticks = nms * fac_ms;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <delay_ms+0x90>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]

	told = Delay_GetCounter();
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <delay_ms+0x8c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	61fb      	str	r3, [r7, #28]

	while (1)
	{
		tnow = Delay_GetCounter();
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <delay_ms+0x8c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e6:	613b      	str	r3, [r7, #16]

		if (tnow != told)
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d0f7      	beq.n	80006e0 <delay_ms+0x38>
		{
			if (tnow < told)
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d206      	bcs.n	8000706 <delay_ms+0x5e>
			{
				tcnt += told - tnow;
 80006f8:	69fa      	ldr	r2, [r7, #28]
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	69ba      	ldr	r2, [r7, #24]
 8000700:	4413      	add	r3, r2
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	e007      	b.n	8000716 <delay_ms+0x6e>
			}
			else
			{
				tcnt += reload - tnow + told;
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	4413      	add	r3, r2
 8000710:	69ba      	ldr	r2, [r7, #24]
 8000712:	4413      	add	r3, r2
 8000714:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	429a      	cmp	r2, r3
 8000720:	d200      	bcs.n	8000724 <delay_ms+0x7c>
		tnow = Delay_GetCounter();
 8000722:	e7dd      	b.n	80006e0 <delay_ms+0x38>
			{
				break;
 8000724:	bf00      	nop
			}
		}
	}
}
 8000726:	bf00      	nop
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2000ab10 	.word	0x2000ab10
 8000738:	200001f0 	.word	0x200001f0

0800073c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_DMA_Init+0x48>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <MX_DMA_Init+0x48>)
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_DMA_Init+0x48>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2105      	movs	r1, #5
 800075e:	203a      	movs	r0, #58	; 0x3a
 8000760:	f001 fdca 	bl	80022f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000764:	203a      	movs	r0, #58	; 0x3a
 8000766:	f001 fde3 	bl	8002330 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	2046      	movs	r0, #70	; 0x46
 8000770:	f001 fdc2 	bl	80022f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000774:	2046      	movs	r0, #70	; 0x46
 8000776:	f001 fddb 	bl	8002330 <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4a06      	ldr	r2, [pc, #24]	; (80007b8 <vApplicationGetIdleTaskMemory+0x30>)
 800079e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007a6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	20008220 	.word	0x20008220
 80007b8:	200082c0 	.word	0x200082c0

080007bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007bc:	b5b0      	push	{r4, r5, r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_FREERTOS_Init+0x7c>)
 80007c4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007c8:	461d      	mov	r5, r3
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 ff80 	bl	80086e2 <osThreadCreate>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_FREERTOS_Init+0x80>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of feedDogTask */
  osThreadDef(feedDogTask, StartTask02, osPriorityIdle, 0, 2048);
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_FREERTOS_Init+0x84>)
 80007ea:	f107 0420 	add.w	r4, r7, #32
 80007ee:	461d      	mov	r5, r3
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  feedDogTaskHandle = osThreadCreate(osThread(feedDogTask), NULL);
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f007 ff6d 	bl	80086e2 <osThreadCreate>
 8000808:	4603      	mov	r3, r0
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <MX_FREERTOS_Init+0x88>)
 800080c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
    osThreadDef(dmaReceiveTask, StartTask03, osPriorityIdle, 0, 2048);
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_FREERTOS_Init+0x8c>)
 8000810:	1d3c      	adds	r4, r7, #4
 8000812:	461d      	mov	r5, r3
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000818:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    dmaReceiveTaskHandle = osThreadCreate(osThread(dmaReceiveTask), NULL);
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f007 ff5c 	bl	80086e2 <osThreadCreate>
 800082a:	4603      	mov	r3, r0
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <MX_FREERTOS_Init+0x90>)
 800082e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 8000830:	bf00      	nop
 8000832:	3758      	adds	r7, #88	; 0x58
 8000834:	46bd      	mov	sp, r7
 8000836:	bdb0      	pop	{r4, r5, r7, pc}
 8000838:	08016b34 	.word	0x08016b34
 800083c:	20008218 	.word	0x20008218
 8000840:	08016b5c 	.word	0x08016b5c
 8000844:	2000821c 	.word	0x2000821c
 8000848:	08016b88 	.word	0x08016b88
 800084c:	20008214 	.word	0x20008214

08000850 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000858:	f007 f876 	bl	8007948 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  printf("bootloader defult task started!!!\r\n");
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <StartDefaultTask+0x40>)
 800085e:	f015 f9b9 	bl	8015bd4 <puts>

  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2101      	movs	r1, #1
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <StartDefaultTask+0x44>)
 8000868:	f004 f848 	bl	80048fc <HAL_GPIO_WritePin>
	  osDelay(500);
 800086c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000870:	f007 ff8f 	bl	8008792 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2101      	movs	r1, #1
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <StartDefaultTask+0x44>)
 800087a:	f004 f83f 	bl	80048fc <HAL_GPIO_WritePin>
	  osDelay(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f007 ff86 	bl	8008792 <osDelay>

	  printf("hello bootloader\r\n");
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <StartDefaultTask+0x48>)
 8000888:	f015 f9a4 	bl	8015bd4 <puts>
	  HAL_GPIO_WritePin(GPIOB, LED0_Pin, GPIO_PIN_SET);
 800088c:	e7e9      	b.n	8000862 <StartDefaultTask+0x12>
 800088e:	bf00      	nop
 8000890:	08016ba4 	.word	0x08016ba4
 8000894:	40020400 	.word	0x40020400
 8000898:	08016bc8 	.word	0x08016bc8

0800089c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  osDelay(2000);
 80008a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008a8:	f007 ff73 	bl	8008792 <osDelay>

  for(;;)
  {
    if(done)
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <StartTask02+0x20>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0fb      	beq.n	80008ac <StartTask02+0x10>
      iap_load_app(FLASH_APP_ADDR);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <StartTask02+0x24>)
 80008b6:	f000 f9fb 	bl	8000cb0 <iap_load_app>
    if(done)
 80008ba:	e7f7      	b.n	80008ac <StartTask02+0x10>
 80008bc:	20008210 	.word	0x20008210
 80008c0:	08040000 	.word	0x08040000

080008c4 <print_func>:
  /* USER CODE END StartTask02 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void print_func(uint8_t* pstr, int buflen){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  pstr[buflen] = '\0';
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
  printf("reveive string: %s\r\n", pstr);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <print_func+0x24>)
 80008dc:	f015 f914 	bl	8015b08 <iprintf>
  return;
 80008e0:	bf00      	nop
}
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	08016bdc 	.word	0x08016bdc

080008ec <hextodec>:

bool hextodec(uint8_t hex_string[], int *decimal){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
    char *ptr;

    // printf("hex string: %s", hex_string);

    // 将16进制字符串转�?�为长整型
    (*decimal) = strtol(hex_string, &ptr, 16);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2210      	movs	r2, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f015 f836 	bl	8015970 <strtol>
 8000904:	4602      	mov	r2, r0
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	601a      	str	r2, [r3, #0]

    // 检查转换是否成功
    if (ptr == hex_string) {
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d104      	bne.n	800091c <hextodec+0x30>
        printf("Transform failed!!!\r\n");
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <hextodec+0x48>)
 8000914:	f015 f95e 	bl	8015bd4 <puts>
        return false;
 8000918:	2300      	movs	r3, #0
 800091a:	e006      	b.n	800092a <hextodec+0x3e>
    } else {
        printf("Transform successfully: %d\r\n", *decimal);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <hextodec+0x4c>)
 8000924:	f015 f8f0 	bl	8015b08 <iprintf>
        return true;
 8000928:	2301      	movs	r3, #1
    }
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08016bf4 	.word	0x08016bf4
 8000938:	08016c0c 	.word	0x08016c0c

0800093c <alycmd>:

void alycmd(uint8_t *ptr){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(ptr[0]==0 && ptr[1]==0){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d108      	bne.n	800095e <alycmd+0x22>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3301      	adds	r3, #1
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <alycmd+0x22>
    cmd = NOCMD;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <alycmd+0x6c>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e01d      	b.n	800099a <alycmd+0x5e>
  }
  else if(ptr[0]=='3' && ptr[1]=='4'){
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b33      	cmp	r3, #51	; 0x33
 8000964:	d108      	bne.n	8000978 <alycmd+0x3c>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3301      	adds	r3, #1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b34      	cmp	r3, #52	; 0x34
 800096e:	d103      	bne.n	8000978 <alycmd+0x3c>
    cmd = CMD_34;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <alycmd+0x6c>)
 8000972:	2202      	movs	r2, #2
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e010      	b.n	800099a <alycmd+0x5e>
  }
  else if(ptr[0]=='3' && ptr[1]=='6'){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b33      	cmp	r3, #51	; 0x33
 800097e:	d108      	bne.n	8000992 <alycmd+0x56>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3301      	adds	r3, #1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b36      	cmp	r3, #54	; 0x36
 8000988:	d103      	bne.n	8000992 <alycmd+0x56>
    cmd = CMD_36;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <alycmd+0x6c>)
 800098c:	2203      	movs	r2, #3
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e003      	b.n	800099a <alycmd+0x5e>
  }
  else{
    cmd = CMDERR;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <alycmd+0x6c>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
  }
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000

080009ac <StartTask03>:

void StartTask03(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  cmdbuf[11] = '\0';
 80009b4:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <StartTask03+0x11c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	72da      	strb	r2, [r3, #11]
  int applength = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  /**
   * @brief DMA接收
   * 
   */
  HAL_UART_Receive_DMA(&huart1, cmdbuf, sizeof(cmdbuf)-1);
 80009be:	220d      	movs	r2, #13
 80009c0:	4941      	ldr	r1, [pc, #260]	; (8000ac8 <StartTask03+0x11c>)
 80009c2:	4842      	ldr	r0, [pc, #264]	; (8000acc <StartTask03+0x120>)
 80009c4:	f005 fd86 	bl	80064d4 <HAL_UART_Receive_DMA>

  osDelay(50);
 80009c8:	2032      	movs	r0, #50	; 0x32
 80009ca:	f007 fee2 	bl	8008792 <osDelay>

  printf("reveive dma state: %d\r\n", hdma_usart1_rx.State);
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <StartTask03+0x124>)
 80009d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	483e      	ldr	r0, [pc, #248]	; (8000ad4 <StartTask03+0x128>)
 80009da:	f015 f895 	bl	8015b08 <iprintf>

  while(1){
    if(hdma_usart1_rx.State == HAL_DMA_STATE_READY)
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <StartTask03+0x124>)
 80009e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d1f9      	bne.n	80009de <StartTask03+0x32>
		{
      // cmd
      if(cmdflag){
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <StartTask03+0x12c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d04b      	beq.n	8000a8a <StartTask03+0xde>
        print_func(cmdbuf, sizeof(cmdbuf));
 80009f2:	210e      	movs	r1, #14
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <StartTask03+0x11c>)
 80009f6:	f7ff ff65 	bl	80008c4 <print_func>
        cmdflag = false;
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <StartTask03+0x12c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
        alycmd(cmdbuf);
 8000a00:	4831      	ldr	r0, [pc, #196]	; (8000ac8 <StartTask03+0x11c>)
 8000a02:	f7ff ff9b 	bl	800093c <alycmd>

        switch (cmd)
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <StartTask03+0x130>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d002      	beq.n	8000a14 <StartTask03+0x68>
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d023      	beq.n	8000a5a <StartTask03+0xae>
          //开启APP文件接收
          HAL_UART_Receive_DMA(&huart1, USART_RX_BUF, applength);
          break;
        
        default:
          break;
 8000a12:	e057      	b.n	8000ac4 <StartTask03+0x118>
          memcpy(lenbuf, cmdbuf+3, sizeof(lenbuf)-1);
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <StartTask03+0x134>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4832      	ldr	r0, [pc, #200]	; (8000ae4 <StartTask03+0x138>)
 8000a1c:	f015 fa9b 	bl	8015f56 <memcpy>
          lenbuf[8] = '\0';
 8000a20:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <StartTask03+0x138>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	721a      	strb	r2, [r3, #8]
          if(hextodec(lenbuf, &applength)){
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	482d      	ldr	r0, [pc, #180]	; (8000ae4 <StartTask03+0x138>)
 8000a2e:	f7ff ff5d 	bl	80008ec <hextodec>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d00a      	beq.n	8000a4e <StartTask03+0xa2>
            memset(cmdbuf, 0, sizeof(cmdbuf));
 8000a38:	220e      	movs	r2, #14
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <StartTask03+0x11c>)
 8000a3e:	f015 f9b9 	bl	8015db4 <memset>
            HAL_UART_Receive_DMA(&huart1, cmdbuf, 4);
 8000a42:	2204      	movs	r2, #4
 8000a44:	4920      	ldr	r1, [pc, #128]	; (8000ac8 <StartTask03+0x11c>)
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <StartTask03+0x120>)
 8000a48:	f005 fd44 	bl	80064d4 <HAL_UART_Receive_DMA>
          break;
 8000a4c:	e03a      	b.n	8000ac4 <StartTask03+0x118>
            memset(cmdbuf, 0, sizeof(cmdbuf));
 8000a4e:	220e      	movs	r2, #14
 8000a50:	2100      	movs	r1, #0
 8000a52:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <StartTask03+0x11c>)
 8000a54:	f015 f9ae 	bl	8015db4 <memset>
          break;
 8000a58:	e034      	b.n	8000ac4 <StartTask03+0x118>
          printf("Prepare receiving APP!!!\r\n");
 8000a5a:	4823      	ldr	r0, [pc, #140]	; (8000ae8 <StartTask03+0x13c>)
 8000a5c:	f015 f8ba 	bl	8015bd4 <puts>
          memset(cmdbuf, 0, sizeof(cmdbuf));
 8000a60:	220e      	movs	r2, #14
 8000a62:	2100      	movs	r1, #0
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <StartTask03+0x11c>)
 8000a66:	f015 f9a5 	bl	8015db4 <memset>
          flag_36 = true;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <StartTask03+0x140>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
          printf("applength: %d", applength);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4619      	mov	r1, r3
 8000a74:	481e      	ldr	r0, [pc, #120]	; (8000af0 <StartTask03+0x144>)
 8000a76:	f015 f847 	bl	8015b08 <iprintf>
          HAL_UART_Receive_DMA(&huart1, USART_RX_BUF, applength);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	491c      	ldr	r1, [pc, #112]	; (8000af4 <StartTask03+0x148>)
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <StartTask03+0x120>)
 8000a84:	f005 fd26 	bl	80064d4 <HAL_UART_Receive_DMA>
          break;
 8000a88:	e01c      	b.n	8000ac4 <StartTask03+0x118>
        }
      }
      //not cmd
      else{
        if(flag_36 & (!done)){
 8000a8a:	4b18      	ldr	r3, [pc, #96]	; (8000aec <StartTask03+0x140>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <StartTask03+0x14c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d09e      	beq.n	80009de <StartTask03+0x32>
          printf("Writing into flash!!!\r\n");
 8000aa0:	4816      	ldr	r0, [pc, #88]	; (8000afc <StartTask03+0x150>)
 8000aa2:	f015 f897 	bl	8015bd4 <puts>
          iap_write_appbin(FLASH_APP_ADDR,USART_RX_BUF,applength);//更新FLASH代码
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4912      	ldr	r1, [pc, #72]	; (8000af4 <StartTask03+0x148>)
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <StartTask03+0x154>)
 8000aae:	f000 f92d 	bl	8000d0c <iap_write_appbin>
          printf("Writing done!!!\r\n");
 8000ab2:	4814      	ldr	r0, [pc, #80]	; (8000b04 <StartTask03+0x158>)
 8000ab4:	f015 f88e 	bl	8015bd4 <puts>
          done = true;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <StartTask03+0x14c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
          osDelay(50);
 8000abe:	2032      	movs	r0, #50	; 0x32
 8000ac0:	f007 fe67 	bl	8008792 <osDelay>
    if(hdma_usart1_rx.State == HAL_DMA_STATE_READY)
 8000ac4:	e78b      	b.n	80009de <StartTask03+0x32>
 8000ac6:	bf00      	nop
 8000ac8:	20008200 	.word	0x20008200
 8000acc:	2000ab60 	.word	0x2000ab60
 8000ad0:	2000ac48 	.word	0x2000ac48
 8000ad4:	08016c2c 	.word	0x08016c2c
 8000ad8:	2000820e 	.word	0x2000820e
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20008203 	.word	0x20008203
 8000ae4:	200081f4 	.word	0x200081f4
 8000ae8:	08016c44 	.word	0x08016c44
 8000aec:	2000820f 	.word	0x2000820f
 8000af0:	08016c60 	.word	0x08016c60
 8000af4:	200001f4 	.word	0x200001f4
 8000af8:	20008210 	.word	0x20008210
 8000afc:	08016c70 	.word	0x08016c70
 8000b00:	08040000 	.word	0x08040000
 8000b04:	08016c88 	.word	0x08016c88

08000b08 <HAL_UART_RxCpltCallback>:
/**
 * @brief DMA receive cpl interrupt callback
 * 
 * @param huart 
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    //cmd可处理
    if(cmdbuf[0]!=0 && cmdbuf[1]!=0){
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_UART_RxCpltCallback+0x34>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d007      	beq.n	8000b28 <HAL_UART_RxCpltCallback+0x20>
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_UART_RxCpltCallback+0x34>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_UART_RxCpltCallback+0x20>
      cmdflag = true;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <HAL_UART_RxCpltCallback+0x38>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	e002      	b.n	8000b2e <HAL_UART_RxCpltCallback+0x26>
    }
    else{
      cmdflag = false;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_UART_RxCpltCallback+0x38>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    }
    return;
 8000b2e:	bf00      	nop
}
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20008200 	.word	0x20008200
 8000b40:	2000820e 	.word	0x2000820e

08000b44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	4b40      	ldr	r3, [pc, #256]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a3f      	ldr	r2, [pc, #252]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b3d      	ldr	r3, [pc, #244]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a39      	ldr	r2, [pc, #228]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b90:	f043 0320 	orr.w	r3, r3, #32
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0320 	and.w	r3, r3, #32
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_GPIO_Init+0x118>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2103      	movs	r1, #3
 8000c06:	4816      	ldr	r0, [pc, #88]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000c08:	f003 fe78 	bl	80048fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4810      	ldr	r0, [pc, #64]	; (8000c64 <MX_GPIO_Init+0x120>)
 8000c22:	f003 fca7 	bl	8004574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000c3e:	f003 fc99 	bl	8004574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2105      	movs	r1, #5
 8000c46:	2009      	movs	r0, #9
 8000c48:	f001 fb56 	bl	80022f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c4c:	2009      	movs	r0, #9
 8000c4e:	f001 fb6f 	bl	8002330 <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	; 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40021c00 	.word	0x40021c00

08000c68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
    delay_ms(200);  //延时消抖
 8000c72:	20c8      	movs	r0, #200	; 0xc8
 8000c74:	f7ff fd18 	bl	80006a8 <delay_ms>

    switch (GPIO_Pin)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d103      	bne.n	8000c86 <HAL_GPIO_EXTI_Callback+0x1e>
    {
    case KEY0_Pin:
      printf("key0 press\r\n");
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x28>)
 8000c80:	f014 ffa8 	bl	8015bd4 <puts>
      
      break;
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_EXTI_Callback+0x20>
    
    default:
      break;
 8000c86:	bf00      	nop
    }
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	08016c9c 	.word	0x08016c9c

08000c94 <MSR_MSP>:

u32 iapbuf[512]; 	//2K字节缓存  

//设置栈顶地址
//addr:栈顶地址
void MSR_MSP(uint32_t addr){
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    asm("MSR MSP, r0");			//set Main Stack value
 8000c9c:	f380 8808 	msr	MSP, r0
    asm("BX r14");
 8000ca0:	4770      	bx	lr
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <iap_load_app>:

void iap_load_app(u32 appxaddr){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	if(((*(u32*)appxaddr)&0x2FF00000)==0x20000000)	//检查主堆栈指针指向位置是否合法
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <iap_load_app+0x54>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cc4:	d119      	bne.n	8000cfa <iap_load_app+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	b672      	cpsid	i
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	b662      	cpsie	i
 8000cda:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000cdc:	bf00      	nop

		//__disable_irq();

		portDISABLE_INTERRUPTS();	//如果开启rtos

		jump2app=(iapfun)*(__IO u32*)(appxaddr+4);		//�û��������ڶ�����Ϊ����ʼ��ַ(��λ��ַ)		
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <iap_load_app+0x58>)
 8000ce8:	601a      	str	r2, [r3, #0]

		MSR_MSP(*(u32*)appxaddr);					//��ʼ��APP��ջָ��(�û��������ĵ�һ�������ڴ��ջ����ַ)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffd0 	bl	8000c94 <MSR_MSP>

		//__set_MSP(*(__IO uint32_t*) appxaddr);
		jump2app();									//��ת��APP.
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <iap_load_app+0x58>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4798      	blx	r3

	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2ff00000 	.word	0x2ff00000
 8000d08:	2000a2c0 	.word	0x2000a2c0

08000d0c <iap_write_appbin>:

void iap_write_appbin(u32 appxaddr,u8 *appbuf,u32 appsize)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]

	u32 t;

	u16 i=0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	847b      	strh	r3, [r7, #34]	; 0x22

	u32 temp;

	u32 fwaddr=appxaddr;//当前写入地址
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	61fb      	str	r3, [r7, #28]

	u8 *dfu=appbuf;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	61bb      	str	r3, [r7, #24]

	for(t=0;t<appsize;t+=4)
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	e036      	b.n	8000d98 <iap_write_appbin+0x8c>

	{						   

		temp=(u32)dfu[3]<<24;   
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	3303      	adds	r3, #3
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	061b      	lsls	r3, r3, #24
 8000d32:	617b      	str	r3, [r7, #20]

		temp|=(u32)dfu[2]<<16;    
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	3302      	adds	r3, #2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	041b      	lsls	r3, r3, #16
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	617b      	str	r3, [r7, #20]

		temp|=(u32)dfu[1]<<8;
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	3301      	adds	r3, #1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]

		temp|=(u32)dfu[0];	  
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	617b      	str	r3, [r7, #20]

		dfu+=4;//偏移四个字节
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]

		iapbuf[i++]=temp;	    
 8000d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	847a      	strh	r2, [r7, #34]	; 0x22
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <iap_write_appbin+0xb0>)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		if(i==512)
 8000d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d78:	d10b      	bne.n	8000d92 <iap_write_appbin+0x86>

		{

			i=0; 
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	847b      	strh	r3, [r7, #34]	; 0x22

			STMFLASH_Write(fwaddr,iapbuf,512);
 8000d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <iap_write_appbin+0xb0>)
 8000d84:	69f8      	ldr	r0, [r7, #28]
 8000d86:	f000 fdd9 	bl	800193c <STMFLASH_Write>

			fwaddr+=2048;//偏移2048  512*4=2048 一页为2048字节，2k
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d90:	61fb      	str	r3, [r7, #28]
	for(t=0;t<appsize;t+=4)
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	3304      	adds	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
 8000d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3c4      	bcc.n	8000d2a <iap_write_appbin+0x1e>

		}

	} 

	if(i)STMFLASH_Write(fwaddr,iapbuf,i);//将剩余字节写入 
 8000da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <iap_write_appbin+0xa6>
 8000da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000da8:	461a      	mov	r2, r3
 8000daa:	4904      	ldr	r1, [pc, #16]	; (8000dbc <iap_write_appbin+0xb0>)
 8000dac:	69f8      	ldr	r0, [r7, #28]
 8000dae:	f000 fdc5 	bl	800193c <STMFLASH_Write>

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000a2c4 	.word	0x2000a2c4

08000dc0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc4:	f3bf 8f4f 	dsb	sy
}
 8000dc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy
}
 8000dce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd8:	f3bf 8f4f 	dsb	sy
}
 8000ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dde:	f3bf 8f6f 	isb	sy
}
 8000de2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SCB_EnableICache+0x48>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SCB_EnableICache+0x48>)
 8000dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000df0:	f3bf 8f4f 	dsb	sy
}
 8000df4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000df6:	f3bf 8f6f 	isb	sy
}
 8000dfa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e1a:	f3bf 8f4f 	dsb	sy
}
 8000e1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0b5b      	lsrs	r3, r3, #13
 8000e2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	015a      	lsls	r2, r3, #5
 8000e40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ef      	bne.n	8000e3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1e5a      	subs	r2, r3, #1
 8000e60:	60fa      	str	r2, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1e5      	bne.n	8000e32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e66:	f3bf 8f4f 	dsb	sy
}
 8000e6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <SCB_EnableDCache+0x84>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7e:	f3bf 8f6f 	isb	sy
}
 8000e82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000e98:	f7ff ff92 	bl	8000dc0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000e9c:	f7ff ffb6 	bl	8000e0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f001 f914 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f82a 	bl	8000efc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->CACR|=1<<2;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <main+0x64>)
 8000eaa:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <main+0x64>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
  delay_init();
 8000eb8:	f7ff fb90 	bl	80005dc <delay_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f7ff fe42 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f7ff fc3c 	bl	800073c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ec4:	f000 fe7c 	bl	8001bc0 <MX_USART1_UART_Init>
  MX_QUADSPI_Init();
 8000ec8:	f000 faea 	bl	80014a0 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  PCF8574_Init();
 8000ecc:	f000 fa4c 	bl	8001368 <PCF8574_Init>
	PCF8574_WriteBit(ETH_RESET_IO,1);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f000 fab5 	bl	8001442 <PCF8574_WriteBit>
	delay_ms(100);
 8000ed8:	2064      	movs	r0, #100	; 0x64
 8000eda:	f7ff fbe5 	bl	80006a8 <delay_ms>
	PCF8574_WriteBit(ETH_RESET_IO,0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2007      	movs	r0, #7
 8000ee2:	f000 faae 	bl	8001442 <PCF8574_WriteBit>
	delay_ms(100);
 8000ee6:	2064      	movs	r0, #100	; 0x64
 8000ee8:	f7ff fbde 	bl	80006a8 <delay_ms>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000eec:	f7ff fc66 	bl	80007bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ef0:	f007 fbe0 	bl	80086b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <main+0x60>
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f014 ff52 	bl	8015db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f20:	f003 fd1e 	bl	8004960 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <SystemClock_Config+0xdc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <SystemClock_Config+0xdc>)
 8000f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <SystemClock_Config+0xdc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f6c:	23d8      	movs	r3, #216	; 0xd8
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 fe0f 	bl	8004ba4 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f8c:	f000 f838 	bl	8001000 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f90:	f003 fcf6 	bl	8004980 <HAL_PWREx_EnableOverDrive>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f9a:	f000 f831 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9e:	230f      	movs	r3, #15
 8000fa0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000faa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2107      	movs	r1, #7
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 f89f 	bl	8005100 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fc8:	f000 f81a 	bl	8001000 <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	; 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fee:	f001 f87b 	bl	80020e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40014400 	.word	0x40014400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <IIC_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//IIC初始化
void IIC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    
    __HAL_RCC_GPIOH_CLK_ENABLE();   //使能GPIOH时钟
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <IIC_Init+0x54>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <IIC_Init+0x54>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <IIC_Init+0x54>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
    
    //PH4,5初始化设置
    GPIO_Initure.Pin=GPIO_PIN_4|GPIO_PIN_5;
 800102a:	2330      	movs	r3, #48	; 0x30
 800102c:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 800102e:	2301      	movs	r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed=GPIO_SPEED_FAST;     //快速
 8001036:	2302      	movs	r3, #2
 8001038:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOH,&GPIO_Initure);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <IIC_Init+0x58>)
 8001040:	f003 fa98 	bl	8004574 <HAL_GPIO_Init>
    
    IIC_SDA(1);
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <IIC_Init+0x58>)
 800104a:	f003 fc57 	bl	80048fc <HAL_GPIO_WritePin>
    IIC_SCL(1);  
 800104e:	2201      	movs	r2, #1
 8001050:	2110      	movs	r1, #16
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <IIC_Init+0x58>)
 8001054:	f003 fc52 	bl	80048fc <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40021c00 	.word	0x40021c00

08001068 <IIC_Start>:

//产生IIC起始信号
void IIC_Start(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <IIC_Start+0x54>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <IIC_Start+0x54>)
 8001072:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <IIC_Start+0x54>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <IIC_Start+0x54>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);	  	  
 8001084:	2201      	movs	r2, #1
 8001086:	2120      	movs	r1, #32
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <IIC_Start+0x54>)
 800108a:	f003 fc37 	bl	80048fc <HAL_GPIO_WritePin>
	IIC_SCL(1);
 800108e:	2201      	movs	r2, #1
 8001090:	2110      	movs	r1, #16
 8001092:	480a      	ldr	r0, [pc, #40]	; (80010bc <IIC_Start+0x54>)
 8001094:	f003 fc32 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(4);
 8001098:	2004      	movs	r0, #4
 800109a:	f7ff fabb 	bl	8000614 <delay_us>
 	IIC_SDA(0);//START:when CLK is high,DATA change form high to low 
 800109e:	2200      	movs	r2, #0
 80010a0:	2120      	movs	r1, #32
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <IIC_Start+0x54>)
 80010a4:	f003 fc2a 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(4);
 80010a8:	2004      	movs	r0, #4
 80010aa:	f7ff fab3 	bl	8000614 <delay_us>
	IIC_SCL(0);//钳住I2C总线，准备发送或接收数据 
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	4802      	ldr	r0, [pc, #8]	; (80010bc <IIC_Start+0x54>)
 80010b4:	f003 fc22 	bl	80048fc <HAL_GPIO_WritePin>
}	  
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021c00 	.word	0x40021c00

080010c0 <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <IIC_Stop+0x54>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <IIC_Stop+0x54>)
 80010ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <IIC_Stop+0x54>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <IIC_Stop+0x54>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
	IIC_SCL(0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <IIC_Stop+0x54>)
 80010e2:	f003 fc0b 	bl	80048fc <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <IIC_Stop+0x54>)
 80010ec:	f003 fc06 	bl	80048fc <HAL_GPIO_WritePin>
 	delay_us(4);
 80010f0:	2004      	movs	r0, #4
 80010f2:	f7ff fa8f 	bl	8000614 <delay_us>
	IIC_SCL(1); 
 80010f6:	2201      	movs	r2, #1
 80010f8:	2110      	movs	r1, #16
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <IIC_Stop+0x54>)
 80010fc:	f003 fbfe 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(4);			
 8001100:	2004      	movs	r0, #4
 8001102:	f7ff fa87 	bl	8000614 <delay_us>
	IIC_SDA(1);//发送I2C总线结束信号				   	
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4802      	ldr	r0, [pc, #8]	; (8001114 <IIC_Stop+0x54>)
 800110c:	f003 fbf6 	bl	80048fc <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021c00 	.word	0x40021c00

08001118 <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入  
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <IIC_Wait_Ack+0x78>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <IIC_Wait_Ack+0x78>)
 8001128:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <IIC_Wait_Ack+0x78>)
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <IIC_Wait_Ack+0x78>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);delay_us(1);	   
 8001136:	2201      	movs	r2, #1
 8001138:	2120      	movs	r1, #32
 800113a:	4815      	ldr	r0, [pc, #84]	; (8001190 <IIC_Wait_Ack+0x78>)
 800113c:	f003 fbde 	bl	80048fc <HAL_GPIO_WritePin>
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff fa67 	bl	8000614 <delay_us>
	IIC_SCL(1);delay_us(1);	 
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <IIC_Wait_Ack+0x78>)
 800114c:	f003 fbd6 	bl	80048fc <HAL_GPIO_WritePin>
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff fa5f 	bl	8000614 <delay_us>
	while(READ_SDA)
 8001156:	e009      	b.n	800116c <IIC_Wait_Ack+0x54>
	{
		ucErrTime++;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	3301      	adds	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2bfa      	cmp	r3, #250	; 0xfa
 8001162:	d903      	bls.n	800116c <IIC_Wait_Ack+0x54>
		{
			IIC_Stop();
 8001164:	f7ff ffac 	bl	80010c0 <IIC_Stop>
			return 1;
 8001168:	2301      	movs	r3, #1
 800116a:	e00c      	b.n	8001186 <IIC_Wait_Ack+0x6e>
	while(READ_SDA)
 800116c:	2120      	movs	r1, #32
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <IIC_Wait_Ack+0x78>)
 8001170:	f003 fbac 	bl	80048cc <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ee      	bne.n	8001158 <IIC_Wait_Ack+0x40>
		}
	}
	IIC_SCL(0);//时钟输出0 	   
 800117a:	2200      	movs	r2, #0
 800117c:	2110      	movs	r1, #16
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <IIC_Wait_Ack+0x78>)
 8001180:	f003 fbbc 	bl	80048fc <HAL_GPIO_WritePin>
	return 0;  
 8001184:	2300      	movs	r3, #0
} 
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021c00 	.word	0x40021c00

08001194 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 8001198:	2200      	movs	r2, #0
 800119a:	2110      	movs	r1, #16
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <IIC_Ack+0x54>)
 800119e:	f003 fbad 	bl	80048fc <HAL_GPIO_WritePin>
	SDA_OUT();
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <IIC_Ack+0x54>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <IIC_Ack+0x54>)
 80011a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <IIC_Ack+0x54>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <IIC_Ack+0x54>)
 80011b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b8:	6013      	str	r3, [r2, #0]
	IIC_SDA(0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	480a      	ldr	r0, [pc, #40]	; (80011e8 <IIC_Ack+0x54>)
 80011c0:	f003 fb9c 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(2);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f7ff fa25 	bl	8000614 <delay_us>
	IIC_SCL(1);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2110      	movs	r1, #16
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <IIC_Ack+0x54>)
 80011d0:	f003 fb94 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f7ff fa1d 	bl	8000614 <delay_us>
	IIC_SCL(0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	4802      	ldr	r0, [pc, #8]	; (80011e8 <IIC_Ack+0x54>)
 80011e0:	f003 fb8c 	bl	80048fc <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021c00 	.word	0x40021c00

080011ec <IIC_NAck>:
//不产生ACK应答		    
void IIC_NAck(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	IIC_SCL(0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2110      	movs	r1, #16
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <IIC_NAck+0x54>)
 80011f6:	f003 fb81 	bl	80048fc <HAL_GPIO_WritePin>
	SDA_OUT();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <IIC_NAck+0x54>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <IIC_NAck+0x54>)
 8001200:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <IIC_NAck+0x54>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <IIC_NAck+0x54>)
 800120c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001210:	6013      	str	r3, [r2, #0]
	IIC_SDA(1);
 8001212:	2201      	movs	r2, #1
 8001214:	2120      	movs	r1, #32
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <IIC_NAck+0x54>)
 8001218:	f003 fb70 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(2);
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff f9f9 	bl	8000614 <delay_us>
	IIC_SCL(1);
 8001222:	2201      	movs	r2, #1
 8001224:	2110      	movs	r1, #16
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <IIC_NAck+0x54>)
 8001228:	f003 fb68 	bl	80048fc <HAL_GPIO_WritePin>
	delay_us(2);
 800122c:	2002      	movs	r0, #2
 800122e:	f7ff f9f1 	bl	8000614 <delay_us>
	IIC_SCL(0);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	4802      	ldr	r0, [pc, #8]	; (8001240 <IIC_NAck+0x54>)
 8001238:	f003 fb60 	bl	80048fc <HAL_GPIO_WritePin>
}					 				     
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021c00 	.word	0x40021c00

08001244 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答			  
void IIC_Send_Byte(u8 txd)
{                        
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    u8 t;   
	SDA_OUT(); 	    
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <IIC_Send_Byte+0x94>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <IIC_Send_Byte+0x94>)
 8001254:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <IIC_Send_Byte+0x94>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <IIC_Send_Byte+0x94>)
 8001260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001264:	6013      	str	r3, [r2, #0]
    IIC_SCL(0);//拉低时钟开始数据传输
 8001266:	2200      	movs	r2, #0
 8001268:	2110      	movs	r1, #16
 800126a:	481b      	ldr	r0, [pc, #108]	; (80012d8 <IIC_Send_Byte+0x94>)
 800126c:	f003 fb46 	bl	80048fc <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e027      	b.n	80012c6 <IIC_Send_Byte+0x82>
    {              
        IIC_SDA((txd&0x80)>>7);
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	da05      	bge.n	800128a <IIC_Send_Byte+0x46>
 800127e:	2201      	movs	r2, #1
 8001280:	2120      	movs	r1, #32
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <IIC_Send_Byte+0x94>)
 8001284:	f003 fb3a 	bl	80048fc <HAL_GPIO_WritePin>
 8001288:	e004      	b.n	8001294 <IIC_Send_Byte+0x50>
 800128a:	2200      	movs	r2, #0
 800128c:	2120      	movs	r1, #32
 800128e:	4812      	ldr	r0, [pc, #72]	; (80012d8 <IIC_Send_Byte+0x94>)
 8001290:	f003 fb34 	bl	80048fc <HAL_GPIO_WritePin>
        txd<<=1; 	  
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff f9ba 	bl	8000614 <delay_us>
		IIC_SCL(1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2110      	movs	r1, #16
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <IIC_Send_Byte+0x94>)
 80012a6:	f003 fb29 	bl	80048fc <HAL_GPIO_WritePin>
		delay_us(2); 
 80012aa:	2002      	movs	r0, #2
 80012ac:	f7ff f9b2 	bl	8000614 <delay_us>
		IIC_SCL(0);	
 80012b0:	2200      	movs	r2, #0
 80012b2:	2110      	movs	r1, #16
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <IIC_Send_Byte+0x94>)
 80012b6:	f003 fb21 	bl	80048fc <HAL_GPIO_WritePin>
		delay_us(2);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f7ff f9aa 	bl	8000614 <delay_us>
    for(t=0;t<8;t++)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	3301      	adds	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	d9d4      	bls.n	8001276 <IIC_Send_Byte+0x32>
    }	 
} 	    
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40021c00 	.word	0x40021c00

080012dc <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK   
u8 IIC_Read_Byte(unsigned char ack)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <IIC_Read_Byte+0x88>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <IIC_Read_Byte+0x88>)
 80012f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <IIC_Read_Byte+0x88>)
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <IIC_Read_Byte+0x88>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e01f      	b.n	8001344 <IIC_Read_Byte+0x68>
	{
        IIC_SCL(0); 
 8001304:	2200      	movs	r2, #0
 8001306:	2110      	movs	r1, #16
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <IIC_Read_Byte+0x88>)
 800130a:	f003 faf7 	bl	80048fc <HAL_GPIO_WritePin>
        delay_us(2);
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff f980 	bl	8000614 <delay_us>
		IIC_SCL(1);
 8001314:	2201      	movs	r2, #1
 8001316:	2110      	movs	r1, #16
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <IIC_Read_Byte+0x88>)
 800131a:	f003 faef 	bl	80048fc <HAL_GPIO_WritePin>
        receive<<=1;
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;   
 8001324:	2120      	movs	r1, #32
 8001326:	480f      	ldr	r0, [pc, #60]	; (8001364 <IIC_Read_Byte+0x88>)
 8001328:	f003 fad0 	bl	80048cc <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <IIC_Read_Byte+0x5c>
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	3301      	adds	r3, #1
 8001336:	73bb      	strb	r3, [r7, #14]
		delay_us(1); 
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff f96b 	bl	8000614 <delay_us>
    for(i=0;i<8;i++ )
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3301      	adds	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d9dc      	bls.n	8001304 <IIC_Read_Byte+0x28>
    }					 
    if (!ack)
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <IIC_Read_Byte+0x7a>
        IIC_NAck();//发送nACK
 8001350:	f7ff ff4c 	bl	80011ec <IIC_NAck>
 8001354:	e001      	b.n	800135a <IIC_Read_Byte+0x7e>
    else
        IIC_Ack(); //发送ACK   
 8001356:	f7ff ff1d 	bl	8001194 <IIC_Ack>
    return receive;
 800135a:	7bbb      	ldrb	r3, [r7, #14]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021c00 	.word	0x40021c00

08001368 <PCF8574_Init>:
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 	

//初始化PCF8574
u8 PCF8574_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
    u8 temp=0;
 800136e:	2300      	movs	r3, #0
 8001370:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef GPIO_Initure;
    __HAL_RCC_GPIOB_CLK_ENABLE();           //使能GPIOB时钟
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <PCF8574_Init+0x6c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <PCF8574_Init+0x6c>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <PCF8574_Init+0x6c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
	
    GPIO_Initure.Pin=GPIO_PIN_12;           //PB12
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_INPUT;      //输入
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_HIGH;     //高速
 8001398:	2303      	movs	r3, #3
 800139a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <PCF8574_Init+0x70>)
 80013a4:	f003 f8e6 	bl	8004574 <HAL_GPIO_Init>
    IIC_Init();					            //IIC初始化 	
 80013a8:	f7ff fe30 	bl	800100c <IIC_Init>
	//检查PCF8574是否在位
    IIC_Start();    	 	   
 80013ac:	f7ff fe5c 	bl	8001068 <IIC_Start>
	IIC_Send_Byte(PCF8574_ADDR);            //写地址			   
 80013b0:	2040      	movs	r0, #64	; 0x40
 80013b2:	f7ff ff47 	bl	8001244 <IIC_Send_Byte>
	temp=IIC_Wait_Ack();		            //等待应答,通过判断是否有ACK应答,来判断PCF8574的状态
 80013b6:	f7ff feaf 	bl	8001118 <IIC_Wait_Ack>
 80013ba:	4603      	mov	r3, r0
 80013bc:	77fb      	strb	r3, [r7, #31]
    IIC_Stop();					            //产生一个停止条件
 80013be:	f7ff fe7f 	bl	80010c0 <IIC_Stop>
    PCF8574_WriteOneByte(0XFF);	            //默认情况下所有IO输出高电平
 80013c2:	20ff      	movs	r0, #255	; 0xff
 80013c4:	f000 f822 	bl	800140c <PCF8574_WriteOneByte>
	return temp;
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <PCF8574_ReadOneByte>:

//读取PCF8574的8位IO值
//返回值:读到的数据
u8 PCF8574_ReadOneByte(void)
{				  
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
	u8 temp=0;		  	    																 
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
    IIC_Start();    	 	   
 80013e6:	f7ff fe3f 	bl	8001068 <IIC_Start>
	IIC_Send_Byte(PCF8574_ADDR|0X01);   //进入接收模式			   
 80013ea:	2041      	movs	r0, #65	; 0x41
 80013ec:	f7ff ff2a 	bl	8001244 <IIC_Send_Byte>
	IIC_Wait_Ack();	 
 80013f0:	f7ff fe92 	bl	8001118 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);		   
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff71 	bl	80012dc <IIC_Read_Byte>
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
    IIC_Stop();							//产生一个停止条件	    
 80013fe:	f7ff fe5f 	bl	80010c0 <IIC_Stop>
	return temp;
 8001402:	79fb      	ldrb	r3, [r7, #7]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <PCF8574_WriteOneByte>:
//向PCF8574写入8位IO值  
//DataToWrite:要写入的数据
void PCF8574_WriteOneByte(u8 DataToWrite)
{				   	  	    																 
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
    IIC_Start();  
 8001416:	f7ff fe27 	bl	8001068 <IIC_Start>
    IIC_Send_Byte(PCF8574_ADDR|0X00);   //发送器件地址0X40,写数据 	 
 800141a:	2040      	movs	r0, #64	; 0x40
 800141c:	f7ff ff12 	bl	8001244 <IIC_Send_Byte>
	IIC_Wait_Ack();	    										  		   
 8001420:	f7ff fe7a 	bl	8001118 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);    	 	//发送字节							   
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff0c 	bl	8001244 <IIC_Send_Byte>
	IIC_Wait_Ack();      
 800142c:	f7ff fe74 	bl	8001118 <IIC_Wait_Ack>
    IIC_Stop();							//产生一个停止条件 
 8001430:	f7ff fe46 	bl	80010c0 <IIC_Stop>
	delay_ms(10);	 
 8001434:	200a      	movs	r0, #10
 8001436:	f7ff f937 	bl	80006a8 <delay_ms>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <PCF8574_WriteBit>:

//设置PCF8574某个IO的高低电平
//bit:要设置的IO编号,0~7
//sta:IO的状态;0或1
void PCF8574_WriteBit(u8 bit,u8 sta)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	460a      	mov	r2, r1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	4613      	mov	r3, r2
 8001450:	71bb      	strb	r3, [r7, #6]
    u8 data;
    data=PCF8574_ReadOneByte(); //先读出原来的设置
 8001452:	f7ff ffc3 	bl	80013dc <PCF8574_ReadOneByte>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
    if(sta==0)data&=~(1<<bit);     
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10c      	bne.n	800147a <PCF8574_WriteBit+0x38>
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2201      	movs	r2, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	b25a      	sxtb	r2, r3
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4013      	ands	r3, r2
 8001474:	b25b      	sxtb	r3, r3
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e009      	b.n	800148e <PCF8574_WriteBit+0x4c>
    else data|=1<<bit;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2201      	movs	r2, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	b25a      	sxtb	r2, r3
 8001484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001488:	4313      	orrs	r3, r2
 800148a:	b25b      	sxtb	r3, r3
 800148c:	73fb      	strb	r3, [r7, #15]
    PCF8574_WriteOneByte(data); //写入新的数据
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffbb 	bl	800140c <PCF8574_WriteOneByte>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <MX_QUADSPI_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014b2:	2220      	movs	r2, #32
 80014b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014b8:	2210      	movs	r2, #16
 80014ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014be:	2218      	movs	r2, #24
 80014c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	; (80014f0 <MX_QUADSPI_Init+0x50>)
 80014de:	f003 fa9f 	bl	8004a20 <HAL_QSPI_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f7ff fd8a 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000aac4 	.word	0x2000aac4
 80014f4:	a0001000 	.word	0xa0001000

080014f8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a35      	ldr	r2, [pc, #212]	; (80015ec <HAL_QSPI_MspInit+0xf4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d164      	bne.n	80015e4 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800151a:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	4a34      	ldr	r2, [pc, #208]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6393      	str	r3, [r2, #56]	; 0x38
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001538:	f043 0320 	orr.w	r3, r3, #32
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_QSPI_MspInit+0xf8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001562:	23c0      	movs	r3, #192	; 0xc0
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001572:	2309      	movs	r3, #9
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <HAL_QSPI_MspInit+0xfc>)
 800157e:	f002 fff9 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001594:	230a      	movs	r3, #10
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <HAL_QSPI_MspInit+0xfc>)
 80015a0:	f002 ffe8 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a4:	2304      	movs	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015b4:	2309      	movs	r3, #9
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <HAL_QSPI_MspInit+0x100>)
 80015c0:	f002 ffd8 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c4:	2340      	movs	r3, #64	; 0x40
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015d4:	230a      	movs	r3, #10
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <HAL_QSPI_MspInit+0x100>)
 80015e0:	f002 ffc8 	bl	8004574 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	a0001000 	.word	0xa0001000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40020400 	.word	0x40020400

080015fc <UART_GetTXState>:
 * 
 * @param huart 
 * @return HAL_UART_StateTypeDef 
 */
HAL_UART_StateTypeDef UART_GetTXState(const UART_HandleTypeDef *huart)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  temp1 = huart->gState;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001608:	60fb      	str	r3, [r7, #12]

  return (HAL_UART_StateTypeDef)(temp1);
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_write>:

int _write(int file, char *ptr, int len){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	//阻塞发送
	//HAL_UART_Transmit(&huart1,(uint8_t*)ptr, len, 0xFFFF);

	//DMA发送
	//SCB_CleanDCache_by_Addr(ptr, len);	//更新cache到内存（如果未开启透写）
	HAL_UART_Transmit_DMA(&huart1, ptr, len);	//DMA发送
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <_write+0x34>)
 800162e:	f004 fed5 	bl	80063dc <HAL_UART_Transmit_DMA>
	
	while (UART_GetTXState(&huart1) != HAL_UART_STATE_READY)
 8001632:	bf00      	nop
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <_write+0x34>)
 8001636:	f7ff ffe1 	bl	80015fc <UART_GetTXState>
 800163a:	4603      	mov	r3, r0
 800163c:	2b20      	cmp	r3, #32
 800163e:	d1f9      	bne.n	8001634 <_write+0x1c>

	//not work
	// while (HAL_DMA_GetState(&hdma_usart1_tx) != HAL_DMA_STATE_READY)
	// {
	// }
	return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000ab60 	.word	0x2000ab60

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_MspInit+0x4c>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	f06f 0001 	mvn.w	r0, #1
 800168e:	f000 fe33 	bl	80022f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80016b0:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <HAL_InitTick+0xd0>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	4a2e      	ldr	r2, [pc, #184]	; (8001770 <HAL_InitTick+0xd0>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	6453      	str	r3, [r2, #68]	; 0x44
 80016bc:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <HAL_InitTick+0xd0>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c8:	f107 020c 	add.w	r2, r7, #12
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fefa 	bl	80054cc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016d8:	f003 fee4 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 80016dc:	4603      	mov	r3, r0
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	4a23      	ldr	r2, [pc, #140]	; (8001774 <HAL_InitTick+0xd4>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	3b01      	subs	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_InitTick+0xd8>)
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_InitTick+0xdc>)
 80016f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_InitTick+0xd8>)
 80016f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016fc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_InitTick+0xd8>)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_InitTick+0xd8>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_InitTick+0xd8>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_InitTick+0xd8>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <HAL_InitTick+0xd8>)
 8001718:	f004 fb32 	bl	8005d80 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001726:	2b00      	cmp	r3, #0
 8001728:	d11b      	bne.n	8001762 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800172a:	4813      	ldr	r0, [pc, #76]	; (8001778 <HAL_InitTick+0xd8>)
 800172c:	f004 fb8a 	bl	8005e44 <HAL_TIM_Base_Start_IT>
 8001730:	4603      	mov	r3, r0
 8001732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800173a:	2b00      	cmp	r3, #0
 800173c:	d111      	bne.n	8001762 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800173e:	2019      	movs	r0, #25
 8001740:	f000 fdf6 	bl	8002330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	d808      	bhi.n	800175c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800174a:	2200      	movs	r2, #0
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	2019      	movs	r0, #25
 8001750:	f000 fdd2 	bl	80022f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0xe0>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e002      	b.n	8001762 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001766:	4618      	mov	r0, r3
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	431bde83 	.word	0x431bde83
 8001778:	2000ab10 	.word	0x2000ab10
 800177c:	40014400 	.word	0x40014400
 8001780:	20000008 	.word	0x20000008

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 80017b4:	2008      	movs	r0, #8
 80017b6:	f003 f8bb 	bl	8004930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017c6:	f004 fbb5 	bl	8005f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000ab10 	.word	0x2000ab10

080017d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USART1_IRQHandler+0x10>)
 80017da:	f004 febf 	bl	800655c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000ab60 	.word	0x2000ab60

080017e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA2_Stream2_IRQHandler+0x10>)
 80017ee:	f000 ff4d 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000ac48 	.word	0x2000ac48

080017fc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <ETH_IRQHandler+0x10>)
 8001802:	f001 fd27 	bl	8003254 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000f6a8 	.word	0x2000f6a8

08001810 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <DMA2_Stream7_IRQHandler+0x10>)
 8001816:	f000 ff39 	bl	800268c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000abe8 	.word	0x2000abe8

08001824 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <SCB_CleanInvalidateDCache+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001832:	f3bf 8f4f 	dsb	sy
}
 8001836:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <SCB_CleanInvalidateDCache+0x74>)
 800183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183e:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0b5b      	lsrs	r3, r3, #13
 8001844:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001848:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001852:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800185c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <SCB_CleanInvalidateDCache+0x74>)
 8001864:	4313      	orrs	r3, r2
 8001866:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	60ba      	str	r2, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ef      	bne.n	8001854 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	60fa      	str	r2, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e5      	bne.n	800184a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800187e:	f3bf 8f4f 	dsb	sy
}
 8001882:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001884:	f3bf 8f6f 	isb	sy
}
 8001888:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <STMFLASH_ReadWord>:

//返回值:对应数据.

u32 STMFLASH_ReadWord(u32 faddr)

{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t *)faddr;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <STMFLASH_GetFlashSector>:

//返回值:0~11,即addr所在的扇区

uint16_t STMFLASH_GetFlashSector(u32 addr)

{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

	if(addr<ADDR_FLASH_SECTOR_1)return FLASH_SECTOR_0;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <STMFLASH_GetFlashSector+0x6c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d201      	bcs.n	80018c8 <STMFLASH_GetFlashSector+0x14>
 80018c4:	2300      	movs	r3, #0
 80018c6:	e024      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_SECTOR_1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <STMFLASH_GetFlashSector+0x70>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d801      	bhi.n	80018d4 <STMFLASH_GetFlashSector+0x20>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e01e      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_SECTOR_2;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <STMFLASH_GetFlashSector+0x74>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d201      	bcs.n	80018e0 <STMFLASH_GetFlashSector+0x2c>
 80018dc:	2302      	movs	r3, #2
 80018de:	e018      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_SECTOR_3;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <STMFLASH_GetFlashSector+0x78>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d801      	bhi.n	80018ec <STMFLASH_GetFlashSector+0x38>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e012      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_SECTOR_4;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <STMFLASH_GetFlashSector+0x7c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d801      	bhi.n	80018f8 <STMFLASH_GetFlashSector+0x44>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e00c      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_SECTOR_5;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <STMFLASH_GetFlashSector+0x80>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d801      	bhi.n	8001904 <STMFLASH_GetFlashSector+0x50>
 8001900:	2305      	movs	r3, #5
 8001902:	e006      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_SECTOR_6;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <STMFLASH_GetFlashSector+0x84>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d801      	bhi.n	8001910 <STMFLASH_GetFlashSector+0x5c>
 800190c:	2306      	movs	r3, #6
 800190e:	e000      	b.n	8001912 <STMFLASH_GetFlashSector+0x5e>

	return FLASH_SECTOR_7;
 8001910:	2307      	movs	r3, #7

}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	08008000 	.word	0x08008000
 8001924:	0800ffff 	.word	0x0800ffff
 8001928:	08018000 	.word	0x08018000
 800192c:	0801ffff 	.word	0x0801ffff
 8001930:	0803ffff 	.word	0x0803ffff
 8001934:	0807ffff 	.word	0x0807ffff
 8001938:	080bffff 	.word	0x080bffff

0800193c <STMFLASH_Write>:

//NumToWrite:字(32位)数(就是要写入的32位数据的个数.)

void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)

{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]

    FLASH_EraseInitTypeDef FlashEraseInit;

    HAL_StatusTypeDef FlashStatus=HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    u32 SectorError=0;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]

	u32 addrx=0;
 8001952:	2300      	movs	r3, #0
 8001954:	637b      	str	r3, [r7, #52]	; 0x34

	u32 endaddr=0;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001960:	d368      	bcc.n	8001a34 <STMFLASH_Write+0xf8>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d163      	bne.n	8001a34 <STMFLASH_Write+0xf8>



 	HAL_FLASH_Unlock();             //解锁
 800196c:	f002 fba2 	bl	80040b4 <HAL_FLASH_Unlock>

	addrx=WriteAddr;				//写入的起始地址
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	637b      	str	r3, [r7, #52]	; 0x34

	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c



    if(addrx<0X1FF00000)
 800197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001980:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <STMFLASH_Write+0x100>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d82d      	bhi.n	80019e2 <STMFLASH_Write+0xa6>

    {

        while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
 8001986:	e026      	b.n	80019d6 <STMFLASH_Write+0x9a>

		{

			if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
 8001988:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800198a:	f7ff ff87 	bl	800189c <STMFLASH_ReadWord>
 800198e:	4603      	mov	r3, r0
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d018      	beq.n	80019c8 <STMFLASH_Write+0x8c>

			{

                FlashEraseInit.TypeErase=FLASH_TYPEERASE_SECTORS;       //擦除类型，扇区擦除
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]

                FlashEraseInit.Sector=STMFLASH_GetFlashSector(addrx);   //要擦除的扇区
 800199a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800199c:	f7ff ff8a 	bl	80018b4 <STMFLASH_GetFlashSector>
 80019a0:	4603      	mov	r3, r0
 80019a2:	623b      	str	r3, [r7, #32]

                FlashEraseInit.NbSectors=1;                             //一次只擦除一个扇区
 80019a4:	2301      	movs	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24

                FlashEraseInit.VoltageRange=FLASH_VOLTAGE_RANGE_3;      //电压范围，VCC=2.7~3.6V之间!!
 80019a8:	2302      	movs	r3, #2
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28

                if(HAL_FLASHEx_Erase(&FlashEraseInit,&SectorError)!=HAL_OK)
 80019ac:	f107 0214 	add.w	r2, r7, #20
 80019b0:	f107 0318 	add.w	r3, r7, #24
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fcde 	bl	8004378 <HAL_FLASHEx_Erase>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10e      	bne.n	80019e0 <STMFLASH_Write+0xa4>

                    break;//发生错误了

                }

                SCB_CleanInvalidateDCache();                            //清除无效的D-Cache
 80019c2:	f7ff ff2f 	bl	8001824 <SCB_CleanInvalidateDCache>
 80019c6:	e002      	b.n	80019ce <STMFLASH_Write+0x92>

			}else addrx+=4;
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	3304      	adds	r3, #4
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34

            FLASH_WaitForLastOperation(FLASH_WAITETIME);                //等待上次操作完成
 80019ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d2:	f002 fba1 	bl	8004118 <FLASH_WaitForLastOperation>
        while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
 80019d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3d4      	bcc.n	8001988 <STMFLASH_Write+0x4c>
 80019de:	e000      	b.n	80019e2 <STMFLASH_Write+0xa6>
                    break;//发生错误了
 80019e0:	bf00      	nop

        }

    }

    FlashStatus=FLASH_WaitForLastOperation(FLASH_WAITETIME);            //等待上次操作完成
 80019e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019e6:	f002 fb97 	bl	8004118 <FLASH_WaitForLastOperation>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if(FlashStatus==HAL_OK)
 80019f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11a      	bne.n	8001a2e <STMFLASH_Write+0xf2>

	{

		while(WriteAddr<endaddr)//写数据
 80019f8:	e013      	b.n	8001a22 <STMFLASH_Write+0xe6>

		{

            if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,WriteAddr,*pBuffer)!=HAL_OK)//写入数据
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	461c      	mov	r4, r3
 8001a02:	4615      	mov	r5, r2
 8001a04:	4622      	mov	r2, r4
 8001a06:	462b      	mov	r3, r5
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f002 faf6 	bl	8003ffc <HAL_FLASH_Program>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10a      	bne.n	8001a2c <STMFLASH_Write+0xf0>

				break;	//写入异常

			}

			WriteAddr+=4;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]

			pBuffer++;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	60bb      	str	r3, [r7, #8]
		while(WriteAddr<endaddr)//写数据
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3e7      	bcc.n	80019fa <STMFLASH_Write+0xbe>
 8001a2a:	e000      	b.n	8001a2e <STMFLASH_Write+0xf2>
				break;	//写入异常
 8001a2c:	bf00      	nop

		}

	}

	HAL_FLASH_Lock();           //上锁
 8001a2e:	f002 fb63 	bl	80040f8 <HAL_FLASH_Lock>
 8001a32:	e000      	b.n	8001a36 <STMFLASH_Write+0xfa>
    if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
 8001a34:	bf00      	nop

}
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3c:	1fefffff 	.word	0x1fefffff

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <_kill+0x20>)
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	200452fc 	.word	0x200452fc

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe5 	bl	8001a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a86:	e7fe      	b.n	8001a86 <_exit+0x12>

08001a88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9a:	f3af 8000 	nop.w
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	60ba      	str	r2, [r7, #8]
 8001aa6:	b2ca      	uxtb	r2, r1
 8001aa8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dbf0      	blt.n	8001a9a <_read+0x12>
  }

  return len;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aea:	605a      	str	r2, [r3, #4]
  return 0;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_isatty>:

int _isatty(int file)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d205      	bcs.n	8001b68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <_sbrk+0x6c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20080000 	.word	0x20080000
 8001b8c:	00002000 	.word	0x00002000
 8001b90:	2000ab5c 	.word	0x2000ab5c
 8001b94:	20045310 	.word	0x20045310
 8001b98:	200452fc 	.word	0x200452fc

08001b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <SystemInit+0x20>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <SystemInit+0x20>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <MX_USART1_UART_Init+0x5c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_USART1_UART_Init+0x58>)
 8001c04:	f004 fb9c 	bl	8006340 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f7ff f9f7 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000ab60 	.word	0x2000ab60
 8001c1c:	40011000 	.word	0x40011000

08001c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	; 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2290      	movs	r2, #144	; 0x90
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f014 f8b7 	bl	8015db4 <memset>
  if(uartHandle->Instance==USART1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a54      	ldr	r2, [pc, #336]	; (8001d9c <HAL_UART_MspInit+0x17c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	f040 80a0 	bne.w	8001d92 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c52:	2340      	movs	r3, #64	; 0x40
 8001c54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001c56:	2301      	movs	r3, #1
 8001c58:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 fc66 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff f9c9 	bl	8001000 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_UART_MspInit+0x180>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_UART_MspInit+0x180>)
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_UART_MspInit+0x180>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_UART_MspInit+0x180>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <HAL_UART_MspInit+0x180>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_UART_MspInit+0x180>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4837      	ldr	r0, [pc, #220]	; (8001da4 <HAL_UART_MspInit+0x184>)
 8001cc6:	f002 fc55 	bl	8004574 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001cca:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001ccc:	4a37      	ldr	r2, [pc, #220]	; (8001dac <HAL_UART_MspInit+0x18c>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001cd0:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce4:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d0a:	4827      	ldr	r0, [pc, #156]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001d0c:	f000 fb1e 	bl	800234c <HAL_DMA_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001d16:	f7ff f973 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001d1e:	671a      	str	r2, [r3, #112]	; 0x70
 8001d20:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_UART_MspInit+0x188>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d28:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <HAL_UART_MspInit+0x194>)
 8001d2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d66:	4812      	ldr	r0, [pc, #72]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d68:	f000 faf0 	bl	800234c <HAL_DMA_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8001d72:	f7ff f945 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d7a:	675a      	str	r2, [r3, #116]	; 0x74
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <HAL_UART_MspInit+0x190>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2105      	movs	r1, #5
 8001d86:	2025      	movs	r0, #37	; 0x25
 8001d88:	f000 fab6 	bl	80022f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d8c:	2025      	movs	r0, #37	; 0x25
 8001d8e:	f000 facf 	bl	8002330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    // hdma_usart1_tx.XferCpltCallback = usart_transfer_complete_callback;
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d92:	bf00      	nop
 8001d94:	37b8      	adds	r7, #184	; 0xb8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	2000abe8 	.word	0x2000abe8
 8001dac:	400264b8 	.word	0x400264b8
 8001db0:	2000ac48 	.word	0x2000ac48
 8001db4:	40026440 	.word	0x40026440

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff fedb 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f014 f88f 	bl	8015f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff f853 	bl	8000e94 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001dfc:	08019b48 	.word	0x08019b48
  ldr r2, =_sbss
 8001e00:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001e04:	2004530c 	.word	0x2004530c

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>

08001e0a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <LAN8742_RegisterBusIO+0x28>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <LAN8742_RegisterBusIO+0x28>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <LAN8742_RegisterBusIO+0x28>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e014      	b.n	8001e62 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d17c      	bne.n	8001f88 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e01c      	b.n	8001ee2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f107 0208 	add.w	r2, r7, #8
 8001eb0:	2112      	movs	r1, #18
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	4798      	blx	r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da03      	bge.n	8001ec4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001ebc:	f06f 0304 	mvn.w	r3, #4
 8001ec0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001ec2:	e00b      	b.n	8001edc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d105      	bne.n	8001edc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
         break;
 8001eda:	e005      	b.n	8001ee8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b1f      	cmp	r3, #31
 8001ee6:	d9df      	bls.n	8001ea8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b1f      	cmp	r3, #31
 8001eee:	d902      	bls.n	8001ef6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ef0:	f06f 0302 	mvn.w	r3, #2
 8001ef4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d145      	bne.n	8001f88 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6810      	ldr	r0, [r2, #0]
 8001f04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4798      	blx	r3
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db37      	blt.n	8001f82 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6810      	ldr	r0, [r2, #0]
 8001f1a:	f107 0208 	add.w	r2, r7, #8
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4798      	blx	r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db28      	blt.n	8001f7a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4798      	blx	r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f32:	e01c      	b.n	8001f6e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4798      	blx	r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f46:	d80e      	bhi.n	8001f66 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6810      	ldr	r0, [r2, #0]
 8001f50:	f107 0208 	add.w	r2, r7, #8
 8001f54:	2100      	movs	r1, #0
 8001f56:	4798      	blx	r3
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da07      	bge.n	8001f6e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001f5e:	f06f 0304 	mvn.w	r3, #4
 8001f62:	613b      	str	r3, [r7, #16]
                 break;
 8001f64:	e010      	b.n	8001f88 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001f66:	f06f 0301 	mvn.w	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
               break;
 8001f6c:	e00c      	b.n	8001f88 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1dd      	bne.n	8001f34 <LAN8742_Init+0xc6>
 8001f78:	e006      	b.n	8001f88 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001f7a:	f06f 0304 	mvn.w	r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	e002      	b.n	8001f88 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001f82:	f06f 0303 	mvn.w	r3, #3
 8001f86:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d112      	bne.n	8001fb4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	4798      	blx	r3
 8001f94:	4603      	mov	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001f98:	bf00      	nop
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4798      	blx	r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001fac:	d9f5      	bls.n	8001f9a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 }
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6810      	ldr	r0, [r2, #0]
 8001fd2:	f107 020c 	add.w	r2, r7, #12
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4798      	blx	r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da02      	bge.n	8001fe6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001fe0:	f06f 0304 	mvn.w	r3, #4
 8001fe4:	e06e      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6810      	ldr	r0, [r2, #0]
 8001fee:	f107 020c 	add.w	r2, r7, #12
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4798      	blx	r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da02      	bge.n	8002002 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ffc:	f06f 0304 	mvn.w	r3, #4
 8002000:	e060      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800200c:	2301      	movs	r3, #1
 800200e:	e059      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6810      	ldr	r0, [r2, #0]
 8002018:	f107 020c 	add.w	r2, r7, #12
 800201c:	2100      	movs	r1, #0
 800201e:	4798      	blx	r3
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	da02      	bge.n	800202c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002026:	f06f 0304 	mvn.w	r3, #4
 800202a:	e04b      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11b      	bne.n	800206e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <LAN8742_GetLinkState+0x90>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800204a:	2302      	movs	r3, #2
 800204c:	e03a      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002058:	2303      	movs	r3, #3
 800205a:	e033      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002066:	2304      	movs	r3, #4
 8002068:	e02c      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800206a:	2305      	movs	r3, #5
 800206c:	e02a      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6810      	ldr	r0, [r2, #0]
 8002076:	f107 020c 	add.w	r2, r7, #12
 800207a:	211f      	movs	r1, #31
 800207c:	4798      	blx	r3
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	da02      	bge.n	800208a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002084:	f06f 0304 	mvn.w	r3, #4
 8002088:	e01c      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002094:	2306      	movs	r3, #6
 8002096:	e015      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 031c 	and.w	r3, r3, #28
 800209e:	2b18      	cmp	r3, #24
 80020a0:	d101      	bne.n	80020a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80020a2:	2302      	movs	r3, #2
 80020a4:	e00e      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 031c 	and.w	r3, r3, #28
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d101      	bne.n	80020b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e007      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 031c 	and.w	r3, r3, #28
 80020ba:	2b14      	cmp	r3, #20
 80020bc:	d101      	bne.n	80020c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80020be:	2304      	movs	r3, #4
 80020c0:	e000      	b.n	80020c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80020c2:	2305      	movs	r3, #5
    }				
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 f906 	bl	80022e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f7ff fae2 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fab8 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000000c 	.word	0x2000000c
 800210c:	2000aca8 	.word	0x2000aca8

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	2000aca8 	.word	0x2000aca8

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetREVID+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0c1b      	lsrs	r3, r3, #16
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e0042000 	.word	0xe0042000

08002188 <__NVIC_SetPriorityGrouping>:
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <__NVIC_SetPriorityGrouping+0x40>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x40>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	05fa0000 	.word	0x05fa0000

080021d0 <__NVIC_GetPriorityGrouping>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <__NVIC_EnableIRQ+0x38>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff4c 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230a:	f7ff ff61 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 800230e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7ff ffb1 	bl	800227c <NVIC_EncodePriority>
 800231a:	4602      	mov	r2, r0
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff80 	bl	8002228 <__NVIC_SetPriority>
}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff54 	bl	80021ec <__NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff feda 	bl	8002110 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e099      	b.n	800249c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002388:	e00f      	b.n	80023aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238a:	f7ff fec1 	bl	8002110 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b05      	cmp	r3, #5
 8002396:	d908      	bls.n	80023aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e078      	b.n	800249c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e8      	bne.n	800238a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_DMA_Init+0x158>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4313      	orrs	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b04      	cmp	r3, #4
 800243c:	d117      	bne.n	800246e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 fb09 	bl	8002a68 <DMA_CheckFifoParam>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fac0 	bl	80029fc <DMA_CalcBaseAndBitshift>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	e010803f 	.word	0xe010803f

080024a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Start_IT+0x26>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e048      	b.n	8002560 <HAL_DMA_Start_IT+0xb8>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d137      	bne.n	8002552 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fa52 	bl	80029a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0216 	orr.w	r2, r2, #22
 8002516:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002526:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e005      	b.n	800255e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800255e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002576:	f7ff fdcb 	bl	8002110 <HAL_GetTick>
 800257a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d008      	beq.n	800259a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e052      	b.n	8002640 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0216 	bic.w	r2, r2, #22
 80025a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_DMA_Abort+0x62>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d007      	beq.n	80025da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0208 	bic.w	r2, r2, #8
 80025d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ea:	e013      	b.n	8002614 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ec:	f7ff fd90 	bl	8002110 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d90c      	bls.n	8002614 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2203      	movs	r2, #3
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e015      	b.n	8002640 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e4      	bne.n	80025ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	223f      	movs	r2, #63	; 0x3f
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e00c      	b.n	8002680 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2205      	movs	r2, #5
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002698:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <HAL_DMA_IRQHandler+0x248>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a8e      	ldr	r2, [pc, #568]	; (80028d8 <HAL_DMA_IRQHandler+0x24c>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a9b      	lsrs	r3, r3, #10
 80026a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01a      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2208      	movs	r2, #8
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2201      	movs	r2, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2201      	movs	r2, #1
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0202 	orr.w	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2204      	movs	r2, #4
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0204 	orr.w	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2210      	movs	r2, #16
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d043      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d03c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2210      	movs	r2, #16
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d024      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e01f      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e016      	b.n	80027fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0208 	bic.w	r2, r2, #8
 80027ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2220      	movs	r2, #32
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 808f 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8087 	beq.w	800292c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2220      	movs	r2, #32
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b05      	cmp	r3, #5
 8002834:	d136      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_IRQHandler+0x1da>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d07e      	beq.n	8002998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
        }
        return;
 80028a2:	e079      	b.n	8002998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01d      	beq.n	80028ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d031      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
 80028d0:	e02c      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
 80028d2:	bf00      	nop
 80028d4:	20000004 	.word	0x20000004
 80028d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d023      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e01e      	b.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002930:	2b00      	cmp	r3, #0
 8002932:	d032      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d022      	beq.n	8002986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2205      	movs	r2, #5
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d307      	bcc.n	8002974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f2      	bne.n	8002958 <HAL_DMA_IRQHandler+0x2cc>
 8002972:	e000      	b.n	8002976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002998:	bf00      	nop
    }
  }
}
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d108      	bne.n	80029e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029de:	e007      	b.n	80029f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3b10      	subs	r3, #16
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <DMA_CalcBaseAndBitshift+0x60>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <DMA_CalcBaseAndBitshift+0x64>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d908      	bls.n	8002a3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <DMA_CalcBaseAndBitshift+0x68>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	1d1a      	adds	r2, r3, #4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	659a      	str	r2, [r3, #88]	; 0x58
 8002a3a:	e006      	b.n	8002a4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <DMA_CalcBaseAndBitshift+0x68>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	aaaaaaab 	.word	0xaaaaaaab
 8002a60:	08019818 	.word	0x08019818
 8002a64:	fffffc00 	.word	0xfffffc00

08002a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11f      	bne.n	8002ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d856      	bhi.n	8002b36 <DMA_CheckFifoParam+0xce>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <DMA_CheckFifoParam+0x28>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002ab3 	.word	0x08002ab3
 8002a98:	08002aa1 	.word	0x08002aa1
 8002a9c:	08002b37 	.word	0x08002b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d046      	beq.n	8002b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab0:	e043      	b.n	8002b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aba:	d140      	bne.n	8002b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e03d      	b.n	8002b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aca:	d121      	bne.n	8002b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d837      	bhi.n	8002b42 <DMA_CheckFifoParam+0xda>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <DMA_CheckFifoParam+0x70>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002aef 	.word	0x08002aef
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b01 	.word	0x08002b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e030      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d025      	beq.n	8002b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e022      	b.n	8002b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b08:	d11f      	bne.n	8002b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b0e:	e01c      	b.n	8002b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d903      	bls.n	8002b1e <DMA_CheckFifoParam+0xb6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b1c:	e018      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      break;
 8002b22:	e015      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00e      	beq.n	8002b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e00b      	b.n	8002b4e <DMA_CheckFifoParam+0xe6>
      break;
 8002b36:	bf00      	nop
 8002b38:	e00a      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e008      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e006      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e004      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e06a      	b.n	8002c48 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2223      	movs	r2, #35	; 0x23
 8002b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f005 fb1d 	bl	80081c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_ETH_Init+0xf0>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_ETH_Init+0xf0>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_ETH_Init+0xf0>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <HAL_ETH_Init+0xf4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a2b      	ldr	r2, [pc, #172]	; (8002c54 <HAL_ETH_Init+0xf4>)
 8002ba8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <HAL_ETH_Init+0xf4>)
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4927      	ldr	r1, [pc, #156]	; (8002c54 <HAL_ETH_Init+0xf4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_ETH_Init+0xf4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd8:	f7ff fa9a 	bl	8002110 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bde:	e011      	b.n	8002c04 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002be0:	f7ff fa96 	bl	8002110 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bee:	d909      	bls.n	8002c04 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	22e0      	movs	r2, #224	; 0xe0
 8002bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e021      	b.n	8002c48 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e4      	bne.n	8002be0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 ff4c 	bl	8003ab4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fff3 	bl	8003c08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f001 f849 	bl	8003cba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 ffb1 	bl	8003b98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2210      	movs	r2, #16
 8002c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40013800 	.word	0x40013800

08002c58 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d17b      	bne.n	8002d62 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2223      	movs	r2, #35	; 0x23
 8002c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_ETH_Start_IT+0x114>)
 8002c96:	430b      	orrs	r3, r1
 8002c98:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002cac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9fc 	bl	80030b4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7ff fa27 	bl	8002128 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0204 	orr.w	r2, r2, #4
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f7ff fa14 	bl	8002128 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fd74 	bl	80037f6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d24:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d3c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_ETH_Start_IT+0x118>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d54:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2223      	movs	r2, #35	; 0x23
 8002d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	00020060 	.word	0x00020060
 8002d70:	0001a0c1 	.word	0x0001a0c1

08002d74 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	2b23      	cmp	r3, #35	; 0x23
 8002d84:	d16e      	bne.n	8002e64 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2223      	movs	r2, #35	; 0x23
 8002d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d96:	69d9      	ldr	r1, [r3, #28]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_ETH_Stop_IT+0xfc>)
 8002d9e:	400b      	ands	r3, r1
 8002da0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002da4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dbc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f023 0302 	bic.w	r3, r3, #2
 8002dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dd4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0204 	bic.w	r2, r2, #4
 8002de4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f7ff f99a 	bl	8002128 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fcfa 	bl	80037f6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0208 	bic.w	r2, r2, #8
 8002e10:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7ff f984 	bl	8002128 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e00e      	b.n	8002e4c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	3212      	adds	r2, #18
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d9ed      	bls.n	8002e2e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	fffe5f3e 	.word	0xfffe5f3e

08002e74 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e045      	b.n	8002f24 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9e:	2b23      	cmp	r3, #35	; 0x23
 8002ea0:	d13f      	bne.n	8002f22 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 ff70 	bl	8003d94 <ETH_Prepare_Tx_Descriptors>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f043 0202 	orr.w	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e02a      	b.n	8002f24 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002ece:	f3bf 8f4f 	dsb	sy
}
 8002ed2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d904      	bls.n	8002ef0 <HAL_ETH_Transmit_IT+0x7c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	1f1a      	subs	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e000      	b.n	8002f24 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
  }
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0a8      	b.n	80030aa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	2b23      	cmp	r3, #35	; 0x23
 8002f60:	d001      	beq.n	8002f66 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0a1      	b.n	80030aa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	3212      	adds	r2, #18
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7c:	f1c3 0304 	rsb	r3, r3, #4
 8002f80:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f82:	e06a      	b.n	800305a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <HAL_ETH_ReadData+0x88>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d040      	beq.n	8003036 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002fe8:	3b04      	subs	r3, #4
 8002fea:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003010:	461a      	mov	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	b29b      	uxth	r3, r3
 8003016:	f005 faa1 	bl	800855c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	441a      	add	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d902      	bls.n	8003048 <HAL_ETH_ReadData+0x11c>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b04      	subs	r3, #4
 8003046:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	3212      	adds	r2, #18
 800304e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003052:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800305e:	2b00      	cmp	r3, #0
 8003060:	db06      	blt.n	8003070 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	429a      	cmp	r2, r3
 8003068:	d202      	bcs.n	8003070 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d089      	beq.n	8002f84 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	441a      	add	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f815 	bl	80030b4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	3212      	adds	r2, #18
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80030dc:	e040      	b.n	8003160 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d112      	bne.n	800310c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	4618      	mov	r0, r3
 80030ec:	f005 fa06 	bl	80084fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	74fb      	strb	r3, [r7, #19]
 80030fa:	e007      	b.n	800310c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d026      	beq.n	8003160 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <ETH_UpdateDescriptor+0xe4>)
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	e003      	b.n	800312a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003128:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800312a:	f3bf 8f5f 	dmb	sy
}
 800312e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	3301      	adds	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d902      	bls.n	800314e <ETH_UpdateDescriptor+0x9a>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3b04      	subs	r3, #4
 800314c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	3212      	adds	r2, #18
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	617b      	str	r3, [r7, #20]
      desccount--;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3b01      	subs	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <ETH_UpdateDescriptor+0xb8>
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1b8      	bne.n	80030de <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	429a      	cmp	r2, r3
 8003174:	d00c      	beq.n	8003190 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003190:	bf00      	nop
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	80004600 	.word	0x80004600

0800319c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3318      	adds	r3, #24
 80031a8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80031ba:	e03f      	b.n	800323c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80031bc:	2301      	movs	r3, #1
 80031be:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	3304      	adds	r3, #4
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3301      	adds	r3, #1
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80031e4:	7bbb      	ldrb	r3, [r7, #14]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d028      	beq.n	800323c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db1b      	blt.n	8003238 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	3304      	adds	r3, #4
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f005 f9e7 	bl	80085e0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3304      	adds	r3, #4
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	2200      	movs	r2, #0
 800321e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3301      	adds	r3, #1
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
 8003236:	e001      	b.n	800323c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_ETH_ReleaseTxPacket+0xac>
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1b9      	bne.n	80031bc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d112      	bne.n	8003294 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d109      	bne.n	8003294 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003288:	461a      	mov	r2, r3
 800328a:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_ETH_IRQHandler+0x178>)
 800328c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f004 fcc8 	bl	8007c24 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d113      	bne.n	80032ce <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10a      	bne.n	80032ce <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c0:	461a      	mov	r2, r3
 80032c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80032c6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f004 fcbb 	bl	8007c44 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e0:	d14c      	bne.n	800337c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	d142      	bne.n	800337c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f043 0208 	orr.w	r2, r3, #8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d11a      	bne.n	8003350 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_ETH_IRQHandler+0x17c>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003340:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003344:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	22e0      	movs	r2, #224	; 0xe0
 800334a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800334e:	e012      	b.n	8003376 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	f248 6380 	movw	r3, #34432	; 0x8680
 800335e:	4013      	ands	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336e:	461a      	mov	r2, r3
 8003370:	f248 6380 	movw	r3, #34432	; 0x8680
 8003374:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f004 fc74 	bl	8007c64 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b08      	cmp	r3, #8
 8003388:	d10e      	bne.n	80033a8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f81c 	bl	80033d8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_ETH_IRQHandler+0x180>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_ETH_IRQHandler+0x180>)
 80033b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033ba:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f815 	bl	80033ec <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	00010040 	.word	0x00010040
 80033d0:	007e2000 	.word	0x007e2000
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 031c 	and.w	r3, r3, #28
 800341c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	02db      	lsls	r3, r3, #11
 8003422:	b29b      	uxth	r3, r3
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0302 	bic.w	r3, r3, #2
 800343e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003450:	f7fe fe5e 	bl	8002110 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003456:	e00d      	b.n	8003474 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003458:	f7fe fe5a 	bl	8002110 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003466:	d301      	bcc.n	800346c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e010      	b.n	800348e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ec      	bne.n	8003458 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	b29b      	uxth	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 031c 	and.w	r3, r3, #28
 80034b2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	02db      	lsls	r3, r3, #11
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f0:	f7fe fe0e 	bl	8002110 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034f6:	e00d      	b.n	8003514 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80034f8:	f7fe fe0a 	bl	8002110 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003506:	d301      	bcc.n	800350c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e009      	b.n	8003520 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ec      	bne.n	80034f8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0d9      	b.n	80036f0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e00b      	b.n	8003728 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003716:	2b10      	cmp	r3, #16
 8003718:	d105      	bne.n	8003726 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f88f 	bl	8003840 <ETH_SetMACConfig>

    return HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	e000      	b.n	8003728 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
  }
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 031c 	bic.w	r3, r3, #28
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003748:	f001 fe8c 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 800374c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d908      	bls.n	8003768 <HAL_ETH_SetMDIOClockRange+0x38>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d804      	bhi.n	8003768 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f043 0308 	orr.w	r3, r3, #8
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e027      	b.n	80037b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a18      	ldr	r2, [pc, #96]	; (80037cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d908      	bls.n	8003782 <HAL_ETH_SetMDIOClockRange+0x52>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d204      	bcs.n	8003782 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f043 030c 	orr.w	r3, r3, #12
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e01a      	b.n	80037b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d303      	bcc.n	8003792 <HAL_ETH_SetMDIOClockRange+0x62>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a11      	ldr	r2, [pc, #68]	; (80037d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d911      	bls.n	80037b6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a0f      	ldr	r2, [pc, #60]	; (80037d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d908      	bls.n	80037ac <HAL_ETH_SetMDIOClockRange+0x7c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d804      	bhi.n	80037ac <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e005      	b.n	80037b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f043 0310 	orr.w	r3, r3, #16
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e000      	b.n	80037b8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80037b6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	611a      	str	r2, [r3, #16]
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	01312cff 	.word	0x01312cff
 80037cc:	02160ebf 	.word	0x02160ebf
 80037d0:	03938700 	.word	0x03938700
 80037d4:	05f5e0ff 	.word	0x05f5e0ff
 80037d8:	08f0d17f 	.word	0x08f0d17f

080037dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003814:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003818:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003826:	2001      	movs	r0, #1
 8003828:	f7fe fc7e 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003836:	6193      	str	r3, [r2, #24]
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <ETH_SetMACConfig+0x15c>)
 8003856:	4013      	ands	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	7c1b      	ldrb	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <ETH_SetMACConfig+0x28>
 8003862:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003866:	e000      	b.n	800386a <ETH_SetMACConfig+0x2a>
 8003868:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	7c5b      	ldrb	r3, [r3, #17]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <ETH_SetMACConfig+0x38>
 8003872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003876:	e000      	b.n	800387a <ETH_SetMACConfig+0x3a>
 8003878:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800387a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003880:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	7fdb      	ldrb	r3, [r3, #31]
 8003886:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003888:	431a      	orrs	r2, r3
                        macconf->Speed |
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800388e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	7f92      	ldrb	r2, [r2, #30]
 8003894:	2a00      	cmp	r2, #0
 8003896:	d102      	bne.n	800389e <ETH_SetMACConfig+0x5e>
 8003898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800389c:	e000      	b.n	80038a0 <ETH_SetMACConfig+0x60>
 800389e:	2200      	movs	r2, #0
                        macconf->Speed |
 80038a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	7f1b      	ldrb	r3, [r3, #28]
 80038a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	791b      	ldrb	r3, [r3, #4]
 80038b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80038b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038be:	2a00      	cmp	r2, #0
 80038c0:	d102      	bne.n	80038c8 <ETH_SetMACConfig+0x88>
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	e000      	b.n	80038ca <ETH_SetMACConfig+0x8a>
 80038c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	7bdb      	ldrb	r3, [r3, #15]
 80038d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80038d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038e2:	4313      	orrs	r3, r2
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f7fe fc14 	bl	8002128 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003916:	4013      	ands	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003926:	2a00      	cmp	r2, #0
 8003928:	d101      	bne.n	800392e <ETH_SetMACConfig+0xee>
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	e000      	b.n	8003930 <ETH_SetMACConfig+0xf0>
 800392e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003930:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800393e:	2a01      	cmp	r2, #1
 8003940:	d101      	bne.n	8003946 <ETH_SetMACConfig+0x106>
 8003942:	2208      	movs	r2, #8
 8003944:	e000      	b.n	8003948 <ETH_SetMACConfig+0x108>
 8003946:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003948:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003950:	2a01      	cmp	r2, #1
 8003952:	d101      	bne.n	8003958 <ETH_SetMACConfig+0x118>
 8003954:	2204      	movs	r2, #4
 8003956:	e000      	b.n	800395a <ETH_SetMACConfig+0x11a>
 8003958:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800395a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003962:	2a01      	cmp	r2, #1
 8003964:	d101      	bne.n	800396a <ETH_SetMACConfig+0x12a>
 8003966:	2202      	movs	r2, #2
 8003968:	e000      	b.n	800396c <ETH_SetMACConfig+0x12c>
 800396a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800396c:	4313      	orrs	r3, r2
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003984:	2001      	movs	r0, #1
 8003986:	f7fe fbcf 	bl	8002128 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	619a      	str	r2, [r3, #24]
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	ff20810f 	.word	0xff20810f

080039a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <ETH_SetDMAConfig+0x110>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7b1b      	ldrb	r3, [r3, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <ETH_SetDMAConfig+0x2c>
 80039c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039ca:	e000      	b.n	80039ce <ETH_SetDMAConfig+0x2e>
 80039cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	7b5b      	ldrb	r3, [r3, #13]
 80039d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	7f52      	ldrb	r2, [r2, #29]
 80039da:	2a00      	cmp	r2, #0
 80039dc:	d102      	bne.n	80039e4 <ETH_SetDMAConfig+0x44>
 80039de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039e2:	e000      	b.n	80039e6 <ETH_SetDMAConfig+0x46>
 80039e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80039e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	7b9b      	ldrb	r3, [r3, #14]
 80039ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80039ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80039f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	7f1b      	ldrb	r3, [r3, #28]
 80039fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80039fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	7f9b      	ldrb	r3, [r3, #30]
 8003a02:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a04:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a12:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a14:	4313      	orrs	r3, r2
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a24:	461a      	mov	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a36:	2001      	movs	r0, #1
 8003a38:	f7fe fb76 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a44:	461a      	mov	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	791b      	ldrb	r3, [r3, #4]
 8003a4e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a54:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003a5a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a60:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a68:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003a6a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a72:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a78:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a86:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7fe fb47 	bl	8002128 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	f8de3f23 	.word	0xf8de3f23

08003ab4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b0a6      	sub	sp, #152	; 0x98
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003af0:	2300      	movs	r3, #0
 8003af2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fe86 	bl	8003840 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b34:	2301      	movs	r3, #1
 8003b36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff08 	bl	80039a0 <ETH_SetDMAConfig>
}
 8003b90:	bf00      	nop
 8003b92:	3798      	adds	r7, #152	; 0x98
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3305      	adds	r3, #5
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	3204      	adds	r2, #4
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <ETH_MACAddressConfig+0x68>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3303      	adds	r3, #3
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	061a      	lsls	r2, r3, #24
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <ETH_MACAddressConfig+0x6c>)
 8003bea:	4413      	add	r3, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40028040 	.word	0x40028040
 8003c04:	40028044 	.word	0x40028044

08003c08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e03e      	b.n	8003c94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68d9      	ldr	r1, [r3, #12]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2200      	movs	r2, #0
 8003c32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	3206      	adds	r2, #6
 8003c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d80c      	bhi.n	8003c78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68d9      	ldr	r1, [r3, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	e004      	b.n	8003c82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d9bd      	bls.n	8003c16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cac:	611a      	str	r2, [r3, #16]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e046      	b.n	8003d56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6919      	ldr	r1, [r3, #16]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003d0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	3212      	adds	r2, #18
 8003d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d80c      	bhi.n	8003d46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6919      	ldr	r1, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	440b      	add	r3, r1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e004      	b.n	8003d50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d9b5      	bls.n	8003cc8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	60da      	str	r2, [r3, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b08d      	sub	sp, #52	; 0x34
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3318      	adds	r3, #24
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dbe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd6:	d007      	beq.n	8003de8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	3304      	adds	r3, #4
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003de8:	2302      	movs	r3, #2
 8003dea:	e0ff      	b.n	8003fec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	3301      	adds	r3, #1
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4b7d      	ldr	r3, [pc, #500]	; (8003ff8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	6852      	ldr	r2, [r2, #4]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003e6e:	f3bf 8f5f 	dmb	sy
}
 8003e72:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003e80:	e082      	b.n	8003f88 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d006      	beq.n	8003ea2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e005      	b.n	8003eae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d902      	bls.n	8003ec0 <ETH_Prepare_Tx_Descriptors+0x12c>
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	3b04      	subs	r3, #4
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee2:	d007      	beq.n	8003ef4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	3304      	adds	r3, #4
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d029      	beq.n	8003f48 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f06:	e019      	b.n	8003f3c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003f08:	f3bf 8f5f 	dmb	sy
}
 8003f0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d902      	bls.n	8003f2c <ETH_Prepare_Tx_Descriptors+0x198>
 8003f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f28:	3b04      	subs	r3, #4
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	3301      	adds	r3, #1
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d3e1      	bcc.n	8003f08 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003f44:	2302      	movs	r3, #2
 8003f46:	e051      	b.n	8003fec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	6852      	ldr	r2, [r2, #4]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003f76:	f3bf 8f5f 	dmb	sy
}
 8003f7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f47f af78 	bne.w	8003e82 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e005      	b.n	8003fb2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc2:	6979      	ldr	r1, [r7, #20]
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd4:	b672      	cpsid	i
}
 8003fd6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	4413      	add	r3, r2
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe6:	b662      	cpsie	i
}
 8003fe8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3734      	adds	r7, #52	; 0x34
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	ffffe000 	.word	0xffffe000

08003ffc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800400e:	4b27      	ldr	r3, [pc, #156]	; (80040ac <HAL_FLASH_Program+0xb0>)
 8004010:	7d1b      	ldrb	r3, [r3, #20]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_FLASH_Program+0x1e>
 8004016:	2302      	movs	r3, #2
 8004018:	e043      	b.n	80040a2 <HAL_FLASH_Program+0xa6>
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_FLASH_Program+0xb0>)
 800401c:	2201      	movs	r2, #1
 800401e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004024:	f000 f878 	bl	8004118 <FLASH_WaitForLastOperation>
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d133      	bne.n	800409a <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d823      	bhi.n	8004080 <HAL_FLASH_Program+0x84>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_FLASH_Program+0x44>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	0800405d 	.word	0x0800405d
 8004048:	08004069 	.word	0x08004069
 800404c:	08004075 	.word	0x08004075
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8004050:	783b      	ldrb	r3, [r7, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	68b8      	ldr	r0, [r7, #8]
 8004056:	f000 f921 	bl	800429c <FLASH_Program_Byte>
        break;
 800405a:	e012      	b.n	8004082 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800405c:	883b      	ldrh	r3, [r7, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f000 f8f5 	bl	8004250 <FLASH_Program_HalfWord>
        break;
 8004066:	e00c      	b.n	8004082 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4619      	mov	r1, r3
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f000 f8c9 	bl	8004204 <FLASH_Program_Word>
        break;
 8004072:	e006      	b.n	8004082 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8004074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004078:	68b8      	ldr	r0, [r7, #8]
 800407a:	f000 f88d 	bl	8004198 <FLASH_Program_DoubleWord>
        break;
 800407e:	e000      	b.n	8004082 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8004080:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004082:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004086:	f000 f847 	bl	8004118 <FLASH_WaitForLastOperation>
 800408a:	4603      	mov	r3, r0
 800408c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_FLASH_Program+0xb4>)
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <HAL_FLASH_Program+0xb4>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800409a:	4b04      	ldr	r3, [pc, #16]	; (80040ac <HAL_FLASH_Program+0xb0>)
 800409c:	2200      	movs	r2, #0
 800409e:	751a      	strb	r2, [r3, #20]

  return status;
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000acac 	.word	0x2000acac
 80040b0:	40023c00 	.word	0x40023c00

080040b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_FLASH_Unlock+0x38>)
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da0b      	bge.n	80040de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_FLASH_Unlock+0x38>)
 80040c8:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <HAL_FLASH_Unlock+0x3c>)
 80040ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_FLASH_Unlock+0x38>)
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_FLASH_Unlock+0x40>)
 80040d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_FLASH_Unlock+0x38>)
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da01      	bge.n	80040de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040de:	79fb      	ldrb	r3, [r7, #7]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40023c00 	.word	0x40023c00
 80040f0:	45670123 	.word	0x45670123
 80040f4:	cdef89ab 	.word	0xcdef89ab

080040f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_FLASH_Lock+0x1c>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <HAL_FLASH_Lock+0x1c>)
 8004102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004106:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40023c00 	.word	0x40023c00

08004118 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <FLASH_WaitForLastOperation+0x78>)
 8004126:	2200      	movs	r2, #0
 8004128:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800412a:	f7fd fff1 	bl	8002110 <HAL_GetTick>
 800412e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004130:	e010      	b.n	8004154 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d00c      	beq.n	8004154 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <FLASH_WaitForLastOperation+0x38>
 8004140:	f7fd ffe6 	bl	8002110 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d201      	bcs.n	8004154 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e019      	b.n	8004188 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <FLASH_WaitForLastOperation+0x7c>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e8      	bne.n	8004132 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <FLASH_WaitForLastOperation+0x7c>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800416c:	f000 f8ba 	bl	80042e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e009      	b.n	8004188 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <FLASH_WaitForLastOperation+0x7c>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <FLASH_WaitForLastOperation+0x7c>)
 8004182:	2201      	movs	r2, #1
 8004184:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
  
}  
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	2000acac 	.word	0x2000acac
 8004194:	40023c00 	.word	0x40023c00

08004198 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80041a4:	4b16      	ldr	r3, [pc, #88]	; (8004200 <FLASH_Program_DoubleWord+0x68>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <FLASH_Program_DoubleWord+0x68>)
 80041aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <FLASH_Program_DoubleWord+0x68>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <FLASH_Program_DoubleWord+0x68>)
 80041b6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80041ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <FLASH_Program_DoubleWord+0x68>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <FLASH_Program_DoubleWord+0x68>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80041ce:	f3bf 8f6f 	isb	sy
}
 80041d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80041d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	000a      	movs	r2, r1
 80041e2:	2300      	movs	r3, #0
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	3104      	adds	r1, #4
 80041e8:	4613      	mov	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80041ec:	f3bf 8f4f 	dsb	sy
}
 80041f0:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40023c00 	.word	0x40023c00

08004204 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <FLASH_Program_Word+0x48>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <FLASH_Program_Word+0x48>)
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004218:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <FLASH_Program_Word+0x48>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <FLASH_Program_Word+0x48>)
 8004220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004224:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <FLASH_Program_Word+0x48>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <FLASH_Program_Word+0x48>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004238:	f3bf 8f4f 	dsb	sy
}
 800423c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40023c00 	.word	0x40023c00

08004250 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <FLASH_Program_HalfWord+0x48>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <FLASH_Program_HalfWord+0x48>)
 8004262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004266:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <FLASH_Program_HalfWord+0x48>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <FLASH_Program_HalfWord+0x48>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <FLASH_Program_HalfWord+0x48>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <FLASH_Program_HalfWord+0x48>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004286:	f3bf 8f4f 	dsb	sy
}
 800428a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40023c00 	.word	0x40023c00

0800429c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <FLASH_Program_Byte+0x44>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <FLASH_Program_Byte+0x44>)
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <FLASH_Program_Byte+0x44>)
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <FLASH_Program_Byte+0x44>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <FLASH_Program_Byte+0x44>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <FLASH_Program_Byte+0x44>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80042ce:	f3bf 8f4f 	dsb	sy
}
 80042d2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40023c00 	.word	0x40023c00

080042e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <FLASH_SetErrorCode+0x8c>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80042f4:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <FLASH_SetErrorCode+0x90>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f043 0320 	orr.w	r3, r3, #32
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <FLASH_SetErrorCode+0x90>)
 80042fe:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <FLASH_SetErrorCode+0x8c>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <FLASH_SetErrorCode+0x90>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f043 0310 	orr.w	r3, r3, #16
 8004314:	4a17      	ldr	r2, [pc, #92]	; (8004374 <FLASH_SetErrorCode+0x90>)
 8004316:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <FLASH_SetErrorCode+0x8c>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <FLASH_SetErrorCode+0x90>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	f043 0308 	orr.w	r3, r3, #8
 800432c:	4a11      	ldr	r2, [pc, #68]	; (8004374 <FLASH_SetErrorCode+0x90>)
 800432e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <FLASH_SetErrorCode+0x8c>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <FLASH_SetErrorCode+0x90>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	4a0b      	ldr	r2, [pc, #44]	; (8004374 <FLASH_SetErrorCode+0x90>)
 8004346:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <FLASH_SetErrorCode+0x8c>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <FLASH_SetErrorCode+0x90>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	4a05      	ldr	r2, [pc, #20]	; (8004374 <FLASH_SetErrorCode+0x90>)
 800435e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <FLASH_SetErrorCode+0x8c>)
 8004362:	22f2      	movs	r2, #242	; 0xf2
 8004364:	60da      	str	r2, [r3, #12]
}
 8004366:	bf00      	nop
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40023c00 	.word	0x40023c00
 8004374:	2000acac 	.word	0x2000acac

08004378 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_FLASHEx_Erase+0xd4>)
 800438c:	7d1b      	ldrb	r3, [r3, #20]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_FLASHEx_Erase+0x1e>
 8004392:	2302      	movs	r3, #2
 8004394:	e056      	b.n	8004444 <HAL_FLASHEx_Erase+0xcc>
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_FLASHEx_Erase+0xd4>)
 8004398:	2201      	movs	r2, #1
 800439a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800439c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043a0:	f7ff feba 	bl	8004118 <FLASH_WaitForLastOperation>
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d146      	bne.n	800443c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d115      	bne.n	80043ea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 f844 	bl	8004458 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043d4:	f7ff fea0 	bl	8004118 <FLASH_WaitForLastOperation>
 80043d8:	4603      	mov	r3, r0
 80043da:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80043dc:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_FLASHEx_Erase+0xd8>)
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	491b      	ldr	r1, [pc, #108]	; (8004450 <HAL_FLASHEx_Erase+0xd8>)
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_FLASHEx_Erase+0xdc>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	610b      	str	r3, [r1, #16]
 80043e8:	e028      	b.n	800443c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	e01c      	b.n	800442c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f000 f868 	bl	80044d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004404:	f7ff fe88 	bl	8004118 <FLASH_WaitForLastOperation>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_FLASHEx_Erase+0xd8>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <HAL_FLASHEx_Erase+0xd8>)
 8004412:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004416:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	601a      	str	r2, [r3, #0]
          break;
 8004424:	e00a      	b.n	800443c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	3301      	adds	r3, #1
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4413      	add	r3, r2
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	429a      	cmp	r2, r3
 800443a:	d3da      	bcc.n	80043f2 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_FLASHEx_Erase+0xd4>)
 800443e:	2200      	movs	r2, #0
 8004440:	751a      	strb	r2, [r3, #20]

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	2000acac 	.word	0x2000acac
 8004450:	40023c00 	.word	0x40023c00
 8004454:	ffff7ffb 	.word	0xffff7ffb

08004458 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <FLASH_MassErase+0x74>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4a18      	ldr	r2, [pc, #96]	; (80044cc <FLASH_MassErase+0x74>)
 800446a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b03      	cmp	r3, #3
 8004474:	d107      	bne.n	8004486 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004476:	4b15      	ldr	r3, [pc, #84]	; (80044cc <FLASH_MassErase+0x74>)
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	4914      	ldr	r1, [pc, #80]	; (80044cc <FLASH_MassErase+0x74>)
 800447c:	f248 0304 	movw	r3, #32772	; 0x8004
 8004480:	4313      	orrs	r3, r2
 8004482:	610b      	str	r3, [r1, #16]
 8004484:	e00f      	b.n	80044a6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d106      	bne.n	800449a <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <FLASH_MassErase+0x74>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	4a0e      	ldr	r2, [pc, #56]	; (80044cc <FLASH_MassErase+0x74>)
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	6113      	str	r3, [r2, #16]
 8004498:	e005      	b.n	80044a6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <FLASH_MassErase+0x74>)
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <FLASH_MassErase+0x74>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <FLASH_MassErase+0x74>)
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	4313      	orrs	r3, r2
 80044b0:	4a06      	ldr	r2, [pc, #24]	; (80044cc <FLASH_MassErase+0x74>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80044b8:	f3bf 8f4f 	dsb	sy
}
 80044bc:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023c00 	.word	0x40023c00

080044d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e010      	b.n	800450e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d103      	bne.n	80044fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80044f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e009      	b.n	800450e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d103      	bne.n	8004508 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e002      	b.n	800450e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004508:	f44f 7340 	mov.w	r3, #768	; 0x300
 800450c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b0b      	cmp	r3, #11
 8004512:	d902      	bls.n	800451a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	4a14      	ldr	r2, [pc, #80]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	4911      	ldr	r1, [pc, #68]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004538:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800453c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4313      	orrs	r3, r2
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4a06      	ldr	r2, [pc, #24]	; (8004570 <FLASH_Erase_Sector+0xa0>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800455c:	f3bf 8f4f 	dsb	sy
}
 8004560:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00

08004574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004574:	b480      	push	{r7}
 8004576:	b089      	sub	sp, #36	; 0x24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e175      	b.n	8004880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004594:	2201      	movs	r2, #1
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	f040 8164 	bne.w	800487a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d005      	beq.n	80045ca <HAL_GPIO_Init+0x56>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d130      	bne.n	800462c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004600:	2201      	movs	r2, #1
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 0201 	and.w	r2, r3, #1
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b03      	cmp	r3, #3
 8004636:	d017      	beq.n	8004668 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	2203      	movs	r2, #3
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d123      	bne.n	80046bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	08da      	lsrs	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3208      	adds	r2, #8
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	220f      	movs	r2, #15
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	08da      	lsrs	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3208      	adds	r2, #8
 80046b6:	69b9      	ldr	r1, [r7, #24]
 80046b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0203 	and.w	r2, r3, #3
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80be 	beq.w	800487a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fe:	4b66      	ldr	r3, [pc, #408]	; (8004898 <HAL_GPIO_Init+0x324>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4a65      	ldr	r2, [pc, #404]	; (8004898 <HAL_GPIO_Init+0x324>)
 8004704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004708:	6453      	str	r3, [r2, #68]	; 0x44
 800470a:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_GPIO_Init+0x324>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004716:	4a61      	ldr	r2, [pc, #388]	; (800489c <HAL_GPIO_Init+0x328>)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	089b      	lsrs	r3, r3, #2
 800471c:	3302      	adds	r3, #2
 800471e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	220f      	movs	r2, #15
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_GPIO_Init+0x32c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d037      	beq.n	80047b2 <HAL_GPIO_Init+0x23e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a57      	ldr	r2, [pc, #348]	; (80048a4 <HAL_GPIO_Init+0x330>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d031      	beq.n	80047ae <HAL_GPIO_Init+0x23a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a56      	ldr	r2, [pc, #344]	; (80048a8 <HAL_GPIO_Init+0x334>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d02b      	beq.n	80047aa <HAL_GPIO_Init+0x236>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a55      	ldr	r2, [pc, #340]	; (80048ac <HAL_GPIO_Init+0x338>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d025      	beq.n	80047a6 <HAL_GPIO_Init+0x232>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a54      	ldr	r2, [pc, #336]	; (80048b0 <HAL_GPIO_Init+0x33c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01f      	beq.n	80047a2 <HAL_GPIO_Init+0x22e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a53      	ldr	r2, [pc, #332]	; (80048b4 <HAL_GPIO_Init+0x340>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d019      	beq.n	800479e <HAL_GPIO_Init+0x22a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_GPIO_Init+0x344>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_GPIO_Init+0x226>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a51      	ldr	r2, [pc, #324]	; (80048bc <HAL_GPIO_Init+0x348>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00d      	beq.n	8004796 <HAL_GPIO_Init+0x222>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a50      	ldr	r2, [pc, #320]	; (80048c0 <HAL_GPIO_Init+0x34c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <HAL_GPIO_Init+0x21e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a4f      	ldr	r2, [pc, #316]	; (80048c4 <HAL_GPIO_Init+0x350>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_GPIO_Init+0x21a>
 800478a:	2309      	movs	r3, #9
 800478c:	e012      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 800478e:	230a      	movs	r3, #10
 8004790:	e010      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 8004792:	2308      	movs	r3, #8
 8004794:	e00e      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 8004796:	2307      	movs	r3, #7
 8004798:	e00c      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 800479a:	2306      	movs	r3, #6
 800479c:	e00a      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 800479e:	2305      	movs	r3, #5
 80047a0:	e008      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 80047a2:	2304      	movs	r3, #4
 80047a4:	e006      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 80047a6:	2303      	movs	r3, #3
 80047a8:	e004      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e002      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_GPIO_Init+0x240>
 80047b2:	2300      	movs	r3, #0
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	f002 0203 	and.w	r2, r2, #3
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	4093      	lsls	r3, r2
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047c4:	4935      	ldr	r1, [pc, #212]	; (800489c <HAL_GPIO_Init+0x328>)
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	3302      	adds	r3, #2
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <HAL_GPIO_Init+0x354>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047f6:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <HAL_GPIO_Init+0x354>)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047fc:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <HAL_GPIO_Init+0x354>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004820:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <HAL_GPIO_Init+0x354>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_GPIO_Init+0x354>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800484a:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <HAL_GPIO_Init+0x354>)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_GPIO_Init+0x354>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <HAL_GPIO_Init+0x354>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	f67f ae86 	bls.w	8004594 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	40013800 	.word	0x40013800
 80048a0:	40020000 	.word	0x40020000
 80048a4:	40020400 	.word	0x40020400
 80048a8:	40020800 	.word	0x40020800
 80048ac:	40020c00 	.word	0x40020c00
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40021400 	.word	0x40021400
 80048b8:	40021800 	.word	0x40021800
 80048bc:	40021c00 	.word	0x40021c00
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40022400 	.word	0x40022400
 80048c8:	40013c00 	.word	0x40013c00

080048cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
 80048e8:	e001      	b.n	80048ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
 8004908:	4613      	mov	r3, r2
 800490a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800490c:	787b      	ldrb	r3, [r7, #1]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004918:	e003      	b.n	8004922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	041a      	lsls	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	619a      	str	r2, [r3, #24]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d006      	beq.n	8004954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004946:	4a05      	ldr	r2, [pc, #20]	; (800495c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc f98a 	bl	8000c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40013c00 	.word	0x40013c00

08004960 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a04      	ldr	r2, [pc, #16]	; (800497c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40007000 	.word	0x40007000

08004980 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <HAL_PWREx_EnableOverDrive+0x98>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049a2:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ae:	f7fd fbaf 	bl	8002110 <HAL_GetTick>
 80049b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049b4:	e009      	b.n	80049ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049b6:	f7fd fbab 	bl	8002110 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049c4:	d901      	bls.n	80049ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e022      	b.n	8004a10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d6:	d1ee      	bne.n	80049b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049e4:	f7fd fb94 	bl	8002110 <HAL_GetTick>
 80049e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049ea:	e009      	b.n	8004a00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049ec:	f7fd fb90 	bl	8002110 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049fa:	d901      	bls.n	8004a00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e007      	b.n	8004a10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a0c:	d1ee      	bne.n	80049ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40007000 	.word	0x40007000

08004a20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004a28:	f7fd fb72 	bl	8002110 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e067      	b.n	8004b08 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fc fd53 	bl	80014f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004a52:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f85e 	bl	8004b18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	021a      	lsls	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2120      	movs	r1, #32
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f856 	bl	8004b34 <QSPI_WaitFlagStateUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d135      	bne.n	8004afe <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_QSPI_Init+0xf0>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6852      	ldr	r2, [r2, #4]
 8004aa0:	0611      	lsls	r1, r2, #24
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68d2      	ldr	r2, [r2, #12]
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	69d2      	ldr	r2, [r2, #28]
 8004aac:	4311      	orrs	r1, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a12      	ldr	r2, [r2, #32]
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <HAL_QSPI_Init+0xf4>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6912      	ldr	r2, [r2, #16]
 8004aca:	0411      	lsls	r1, r2, #16
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6952      	ldr	r2, [r2, #20]
 8004ad0:	4311      	orrs	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6992      	ldr	r2, [r2, #24]
 8004ad6:	4311      	orrs	r1, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004b06:	7afb      	ldrb	r3, [r7, #11]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	00ffff2f 	.word	0x00ffff2f
 8004b14:	ffe0f8fe 	.word	0xffe0f8fe

08004b18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b44:	e01a      	b.n	8004b7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d016      	beq.n	8004b7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fd fadf 	bl	8002110 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2204      	movs	r2, #4
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e00e      	b.n	8004b9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bf14      	ite	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	2300      	moveq	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1d6      	bne.n	8004b46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bac:	2300      	movs	r3, #0
 8004bae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e29b      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8087 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bc8:	4b96      	ldr	r3, [pc, #600]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d00c      	beq.n	8004bee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd4:	4b93      	ldr	r3, [pc, #588]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d112      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62>
 8004be0:	4b90      	ldr	r3, [pc, #576]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bee:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d06c      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x130>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d168      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e275      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x7a>
 8004c10:	4b84      	ldr	r3, [pc, #528]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a83      	ldr	r2, [pc, #524]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e02e      	b.n	8004c7c <HAL_RCC_OscConfig+0xd8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x9c>
 8004c26:	4b7f      	ldr	r3, [pc, #508]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b7c      	ldr	r3, [pc, #496]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a7b      	ldr	r2, [pc, #492]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e01d      	b.n	8004c7c <HAL_RCC_OscConfig+0xd8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0xc0>
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a75      	ldr	r2, [pc, #468]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b73      	ldr	r3, [pc, #460]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a72      	ldr	r2, [pc, #456]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0xd8>
 8004c64:	4b6f      	ldr	r3, [pc, #444]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a6e      	ldr	r2, [pc, #440]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b6c      	ldr	r3, [pc, #432]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6b      	ldr	r2, [pc, #428]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fd fa44 	bl	8002110 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fd fa40 	bl	8002110 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	; 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e229      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe8>
 8004caa:	e014      	b.n	8004cd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd fa30 	bl	8002110 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fd fa2c 	bl	8002110 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e215      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x110>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d069      	beq.n	8004db6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ce2:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cee:	4b4d      	ldr	r3, [pc, #308]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d11c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x190>
 8004cfa:	4b4a      	ldr	r3, [pc, #296]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d116      	bne.n	8004d34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e1e9      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1e:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	493d      	ldr	r1, [pc, #244]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	e040      	b.n	8004db6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d023      	beq.n	8004d84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fd f9e2 	bl	8002110 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fd f9de 	bl	8002110 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e1c7      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4929      	ldr	r1, [pc, #164]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]
 8004d82:	e018      	b.n	8004db6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d84:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fd f9be 	bl	8002110 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d98:	f7fd f9ba 	bl	8002110 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e1a3      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004daa:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d038      	beq.n	8004e34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d019      	beq.n	8004dfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fd f99b 	bl	8002110 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dde:	f7fd f997 	bl	8002110 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e180      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x23a>
 8004dfc:	e01a      	b.n	8004e34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dfe:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <HAL_RCC_OscConfig+0x280>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0a:	f7fd f981 	bl	8002110 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e12:	f7fd f97d 	bl	8002110 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d903      	bls.n	8004e28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e166      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
 8004e24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	4b92      	ldr	r3, [pc, #584]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ee      	bne.n	8004e12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a4 	beq.w	8004f8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e42:	4b8c      	ldr	r3, [pc, #560]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10d      	bne.n	8004e6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4e:	4b89      	ldr	r3, [pc, #548]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	4a88      	ldr	r2, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e58:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5a:	4b86      	ldr	r3, [pc, #536]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6a:	4b83      	ldr	r3, [pc, #524]	; (8005078 <HAL_RCC_OscConfig+0x4d4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d118      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e76:	4b80      	ldr	r3, [pc, #512]	; (8005078 <HAL_RCC_OscConfig+0x4d4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a7f      	ldr	r2, [pc, #508]	; (8005078 <HAL_RCC_OscConfig+0x4d4>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e82:	f7fd f945 	bl	8002110 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8a:	f7fd f941 	bl	8002110 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b64      	cmp	r3, #100	; 0x64
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e12a      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e9c:	4b76      	ldr	r3, [pc, #472]	; (8005078 <HAL_RCC_OscConfig+0x4d4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d106      	bne.n	8004ebe <HAL_RCC_OscConfig+0x31a>
 8004eb0:	4b70      	ldr	r3, [pc, #448]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a6f      	ldr	r2, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebc:	e02d      	b.n	8004f1a <HAL_RCC_OscConfig+0x376>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x33c>
 8004ec6:	4b6b      	ldr	r3, [pc, #428]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4a6a      	ldr	r2, [pc, #424]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed2:	4b68      	ldr	r3, [pc, #416]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a67      	ldr	r2, [pc, #412]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ede:	e01c      	b.n	8004f1a <HAL_RCC_OscConfig+0x376>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b05      	cmp	r3, #5
 8004ee6:	d10c      	bne.n	8004f02 <HAL_RCC_OscConfig+0x35e>
 8004ee8:	4b62      	ldr	r3, [pc, #392]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	4a61      	ldr	r2, [pc, #388]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004eee:	f043 0304 	orr.w	r3, r3, #4
 8004ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef4:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	4a5e      	ldr	r2, [pc, #376]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6713      	str	r3, [r2, #112]	; 0x70
 8004f00:	e00b      	b.n	8004f1a <HAL_RCC_OscConfig+0x376>
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a5b      	ldr	r2, [pc, #364]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0e:	4b59      	ldr	r3, [pc, #356]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a58      	ldr	r2, [pc, #352]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f14:	f023 0304 	bic.w	r3, r3, #4
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d015      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f22:	f7fd f8f5 	bl	8002110 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f28:	e00a      	b.n	8004f40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fd f8f1 	bl	8002110 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0d8      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f40:	4b4c      	ldr	r3, [pc, #304]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ee      	beq.n	8004f2a <HAL_RCC_OscConfig+0x386>
 8004f4c:	e014      	b.n	8004f78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd f8df 	bl	8002110 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fd f8db 	bl	8002110 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0c2      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f6c:	4b41      	ldr	r3, [pc, #260]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ee      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d105      	bne.n	8004f8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f7e:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	4a3c      	ldr	r2, [pc, #240]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80ae 	beq.w	80050f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f94:	4b37      	ldr	r3, [pc, #220]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d06d      	beq.n	800507c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d14b      	bne.n	8005040 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa8:	4b32      	ldr	r3, [pc, #200]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a31      	ldr	r2, [pc, #196]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fd f8ac 	bl	8002110 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fd f8a8 	bl	8002110 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e091      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	4b29      	ldr	r3, [pc, #164]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	071b      	lsls	r3, r3, #28
 8005006:	491b      	ldr	r1, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a18      	ldr	r2, [pc, #96]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8005012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fd f87a 	bl	8002110 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fd f876 	bl	8002110 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e05f      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x47c>
 800503e:	e057      	b.n	80050f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0b      	ldr	r2, [pc, #44]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd f860 	bl	8002110 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7fd f85c 	bl	8002110 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e045      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_RCC_OscConfig+0x4d0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x4b0>
 8005072:	e03d      	b.n	80050f0 <HAL_RCC_OscConfig+0x54c>
 8005074:	40023800 	.word	0x40023800
 8005078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800507c:	4b1f      	ldr	r3, [pc, #124]	; (80050fc <HAL_RCC_OscConfig+0x558>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d030      	beq.n	80050ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d129      	bne.n	80050ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d122      	bne.n	80050ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050ac:	4013      	ands	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d119      	bne.n	80050ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	3b01      	subs	r3, #1
 80050c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d10f      	bne.n	80050ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d107      	bne.n	80050ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40023800 	.word	0x40023800

08005100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0d0      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005118:	4b6a      	ldr	r3, [pc, #424]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d910      	bls.n	8005148 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b67      	ldr	r3, [pc, #412]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 020f 	bic.w	r2, r3, #15
 800512e:	4965      	ldr	r1, [pc, #404]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b8      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005160:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a58      	ldr	r2, [pc, #352]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800516a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 800517e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	494d      	ldr	r1, [pc, #308]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d040      	beq.n	8005224 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d115      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d107      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e073      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06b      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 0203 	bic.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4936      	ldr	r1, [pc, #216]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc ff8c 	bl	8002110 <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7fc ff88 	bl	8002110 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	; 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e053      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	4b2d      	ldr	r3, [pc, #180]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 020c 	and.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	429a      	cmp	r2, r3
 8005222:	d1eb      	bne.n	80051fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d210      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 020f 	bic.w	r2, r3, #15
 800523a:	4922      	ldr	r1, [pc, #136]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e032      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4916      	ldr	r1, [pc, #88]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	490e      	ldr	r1, [pc, #56]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005292:	f000 f821 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8005296:	4602      	mov	r2, r0
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_ClockConfig+0x1c8>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	490a      	ldr	r1, [pc, #40]	; (80052cc <HAL_RCC_ClockConfig+0x1cc>)
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <HAL_RCC_ClockConfig+0x1d0>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_ClockConfig+0x1d4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fc f9f4 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00
 80052c8:	40023800 	.word	0x40023800
 80052cc:	08019800 	.word	0x08019800
 80052d0:	20000004 	.word	0x20000004
 80052d4:	20000008 	.word	0x20000008

080052d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052dc:	b090      	sub	sp, #64	; 0x40
 80052de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
 80052e4:	2300      	movs	r3, #0
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e8:	2300      	movs	r3, #0
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052f0:	4b59      	ldr	r3, [pc, #356]	; (8005458 <HAL_RCC_GetSysClockFreq+0x180>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d00d      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x40>
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	f200 80a1 	bhi.w	8005444 <HAL_RCC_GetSysClockFreq+0x16c>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x34>
 8005306:	2b04      	cmp	r3, #4
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x3a>
 800530a:	e09b      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800530c:	4b53      	ldr	r3, [pc, #332]	; (800545c <HAL_RCC_GetSysClockFreq+0x184>)
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005310:	e09b      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005312:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_GetSysClockFreq+0x188>)
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005316:	e098      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005318:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <HAL_RCC_GetSysClockFreq+0x180>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005322:	4b4d      	ldr	r3, [pc, #308]	; (8005458 <HAL_RCC_GetSysClockFreq+0x180>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d028      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532e:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_RCC_GetSysClockFreq+0x180>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	099b      	lsrs	r3, r3, #6
 8005334:	2200      	movs	r2, #0
 8005336:	623b      	str	r3, [r7, #32]
 8005338:	627a      	str	r2, [r7, #36]	; 0x24
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005340:	2100      	movs	r1, #0
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_GetSysClockFreq+0x188>)
 8005344:	fb03 f201 	mul.w	r2, r3, r1
 8005348:	2300      	movs	r3, #0
 800534a:	fb00 f303 	mul.w	r3, r0, r3
 800534e:	4413      	add	r3, r2
 8005350:	4a43      	ldr	r2, [pc, #268]	; (8005460 <HAL_RCC_GetSysClockFreq+0x188>)
 8005352:	fba0 1202 	umull	r1, r2, r0, r2
 8005356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005358:	460a      	mov	r2, r1
 800535a:	62ba      	str	r2, [r7, #40]	; 0x28
 800535c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535e:	4413      	add	r3, r2
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	2200      	movs	r2, #0
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	61fa      	str	r2, [r7, #28]
 800536a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005372:	f7fa ffb5 	bl	80002e0 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4613      	mov	r3, r2
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537e:	e053      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005380:	4b35      	ldr	r3, [pc, #212]	; (8005458 <HAL_RCC_GetSysClockFreq+0x180>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	099b      	lsrs	r3, r3, #6
 8005386:	2200      	movs	r2, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	617a      	str	r2, [r7, #20]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005392:	f04f 0b00 	mov.w	fp, #0
 8005396:	4652      	mov	r2, sl
 8005398:	465b      	mov	r3, fp
 800539a:	f04f 0000 	mov.w	r0, #0
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	0159      	lsls	r1, r3, #5
 80053a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a8:	0150      	lsls	r0, r2, #5
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	ebb2 080a 	subs.w	r8, r2, sl
 80053b2:	eb63 090b 	sbc.w	r9, r3, fp
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053ca:	ebb2 0408 	subs.w	r4, r2, r8
 80053ce:	eb63 0509 	sbc.w	r5, r3, r9
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	00eb      	lsls	r3, r5, #3
 80053dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e0:	00e2      	lsls	r2, r4, #3
 80053e2:	4614      	mov	r4, r2
 80053e4:	461d      	mov	r5, r3
 80053e6:	eb14 030a 	adds.w	r3, r4, sl
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	eb45 030b 	adc.w	r3, r5, fp
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053fe:	4629      	mov	r1, r5
 8005400:	028b      	lsls	r3, r1, #10
 8005402:	4621      	mov	r1, r4
 8005404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005408:	4621      	mov	r1, r4
 800540a:	028a      	lsls	r2, r1, #10
 800540c:	4610      	mov	r0, r2
 800540e:	4619      	mov	r1, r3
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	2200      	movs	r2, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	60fa      	str	r2, [r7, #12]
 8005418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800541c:	f7fa ff60 	bl	80002e0 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4613      	mov	r3, r2
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCC_GetSysClockFreq+0x180>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	3301      	adds	r3, #1
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005442:	e002      	b.n	800544a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <HAL_RCC_GetSysClockFreq+0x184>)
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800544c:	4618      	mov	r0, r3
 800544e:	3740      	adds	r7, #64	; 0x40
 8005450:	46bd      	mov	sp, r7
 8005452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800
 800545c:	00f42400 	.word	0x00f42400
 8005460:	017d7840 	.word	0x017d7840

08005464 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_RCC_GetHCLKFreq+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000004 	.word	0x20000004

0800547c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005480:	f7ff fff0 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0a9b      	lsrs	r3, r3, #10
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4903      	ldr	r1, [pc, #12]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40023800 	.word	0x40023800
 80054a0:	08019810 	.word	0x08019810

080054a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054a8:	f7ff ffdc 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0b5b      	lsrs	r3, r3, #13
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	08019810 	.word	0x08019810

080054cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	220f      	movs	r2, #15
 80054da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_RCC_GetClockConfig+0x5c>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0203 	and.w	r2, r3, #3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054e8:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <HAL_RCC_GetClockConfig+0x5c>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_RCC_GetClockConfig+0x5c>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <HAL_RCC_GetClockConfig+0x5c>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	08db      	lsrs	r3, r3, #3
 8005506:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <HAL_RCC_GetClockConfig+0x60>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	601a      	str	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800
 800552c:	40023c00 	.word	0x40023c00

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d012      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005558:	4b69      	ldr	r3, [pc, #420]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a68      	ldr	r2, [pc, #416]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005562:	6093      	str	r3, [r2, #8]
 8005564:	4b66      	ldr	r3, [pc, #408]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	4964      	ldr	r1, [pc, #400]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800557a:	2301      	movs	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d017      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800558a:	4b5d      	ldr	r3, [pc, #372]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	4959      	ldr	r1, [pc, #356]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a8:	d101      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055aa:	2301      	movs	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055b6:	2301      	movs	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d017      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055c6:	4b4e      	ldr	r3, [pc, #312]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	494a      	ldr	r1, [pc, #296]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e4:	d101      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055e6:	2301      	movs	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005602:	2301      	movs	r3, #1
 8005604:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 808b 	beq.w	800572a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005614:	4b3a      	ldr	r3, [pc, #232]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	4a39      	ldr	r2, [pc, #228]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561e:	6413      	str	r3, [r2, #64]	; 0x40
 8005620:	4b37      	ldr	r3, [pc, #220]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800562c:	4b35      	ldr	r3, [pc, #212]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a34      	ldr	r2, [pc, #208]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005638:	f7fc fd6a 	bl	8002110 <HAL_GetTick>
 800563c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005640:	f7fc fd66 	bl	8002110 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e38f      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005652:	4b2c      	ldr	r3, [pc, #176]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005666:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d035      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d02e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800567c:	4b20      	ldr	r3, [pc, #128]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005686:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005692:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a1a      	ldr	r2, [pc, #104]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800569e:	4a18      	ldr	r2, [pc, #96]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056a4:	4b16      	ldr	r3, [pc, #88]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d114      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc fd2e 	bl	8002110 <HAL_GetTick>
 80056b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b6:	e00a      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b8:	f7fc fd2a 	bl	8002110 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e351      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0ee      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e6:	d111      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056f6:	400b      	ands	r3, r1
 80056f8:	4901      	ldr	r1, [pc, #4]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
 80056fe:	e00b      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005700:	40023800 	.word	0x40023800
 8005704:	40007000 	.word	0x40007000
 8005708:	0ffffcff 	.word	0x0ffffcff
 800570c:	4bac      	ldr	r3, [pc, #688]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4aab      	ldr	r2, [pc, #684]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005712:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005716:	6093      	str	r3, [r2, #8]
 8005718:	4ba9      	ldr	r3, [pc, #676]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800571a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005724:	49a6      	ldr	r1, [pc, #664]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005726:	4313      	orrs	r3, r2
 8005728:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005736:	4ba2      	ldr	r3, [pc, #648]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573c:	4aa0      	ldr	r2, [pc, #640]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005742:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005746:	4b9e      	ldr	r3, [pc, #632]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005748:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	499b      	ldr	r1, [pc, #620]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005764:	4b96      	ldr	r3, [pc, #600]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005772:	4993      	ldr	r1, [pc, #588]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005786:	4b8e      	ldr	r3, [pc, #568]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005794:	498a      	ldr	r1, [pc, #552]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057a8:	4b85      	ldr	r3, [pc, #532]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b6:	4982      	ldr	r1, [pc, #520]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ca:	4b7d      	ldr	r3, [pc, #500]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4979      	ldr	r1, [pc, #484]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ec:	4b74      	ldr	r3, [pc, #464]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f023 0203 	bic.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	4971      	ldr	r1, [pc, #452]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800580e:	4b6c      	ldr	r3, [pc, #432]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005814:	f023 020c 	bic.w	r2, r3, #12
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581c:	4968      	ldr	r1, [pc, #416]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005830:	4b63      	ldr	r3, [pc, #396]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583e:	4960      	ldr	r1, [pc, #384]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005852:	4b5b      	ldr	r3, [pc, #364]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005860:	4957      	ldr	r1, [pc, #348]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005874:	4b52      	ldr	r3, [pc, #328]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	494f      	ldr	r1, [pc, #316]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005896:	4b4a      	ldr	r3, [pc, #296]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	4946      	ldr	r1, [pc, #280]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058b8:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	493e      	ldr	r1, [pc, #248]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058da:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e8:	4935      	ldr	r1, [pc, #212]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590a:	492d      	ldr	r1, [pc, #180]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d011      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800591e:	4b28      	ldr	r3, [pc, #160]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592c:	4924      	ldr	r1, [pc, #144]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593c:	d101      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800593e:	2301      	movs	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800594e:	2301      	movs	r3, #1
 8005950:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800595e:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596c:	4914      	ldr	r1, [pc, #80]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	490b      	ldr	r1, [pc, #44]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00f      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b4:	4902      	ldr	r1, [pc, #8]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059d0:	4b8a      	ldr	r3, [pc, #552]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	4986      	ldr	r1, [pc, #536]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059f4:	4b81      	ldr	r3, [pc, #516]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	497d      	ldr	r1, [pc, #500]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d006      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80d6 	beq.w	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a20:	4b76      	ldr	r3, [pc, #472]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a75      	ldr	r2, [pc, #468]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a2c:	f7fc fb70 	bl	8002110 <HAL_GetTick>
 8005a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a34:	f7fc fb6c 	bl	8002110 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b64      	cmp	r3, #100	; 0x64
 8005a40:	d901      	bls.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e195      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a46:	4b6d      	ldr	r3, [pc, #436]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d021      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11d      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a66:	4b65      	ldr	r3, [pc, #404]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a6c:	0c1b      	lsrs	r3, r3, #16
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a74:	4b61      	ldr	r3, [pc, #388]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7a:	0e1b      	lsrs	r3, r3, #24
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	019a      	lsls	r2, r3, #6
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	061b      	lsls	r3, r3, #24
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	071b      	lsls	r3, r3, #28
 8005a9a:	4958      	ldr	r1, [pc, #352]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d02e      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005acc:	d129      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ace:	4b4b      	ldr	r3, [pc, #300]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005adc:	4b47      	ldr	r3, [pc, #284]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae2:	0f1b      	lsrs	r3, r3, #28
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	019a      	lsls	r2, r3, #6
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	061b      	lsls	r3, r3, #24
 8005afc:	431a      	orrs	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	071b      	lsls	r3, r3, #28
 8005b02:	493e      	ldr	r1, [pc, #248]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b0a:	4b3c      	ldr	r3, [pc, #240]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b10:	f023 021f 	bic.w	r2, r3, #31
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	4938      	ldr	r1, [pc, #224]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01d      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b2e:	4b33      	ldr	r3, [pc, #204]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b34:	0e1b      	lsrs	r3, r3, #24
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b42:	0f1b      	lsrs	r3, r3, #28
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	019a      	lsls	r2, r3, #6
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	431a      	orrs	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	061b      	lsls	r3, r3, #24
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	071b      	lsls	r3, r3, #28
 8005b62:	4926      	ldr	r1, [pc, #152]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d011      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	019a      	lsls	r2, r3, #6
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	071b      	lsls	r3, r3, #28
 8005b92:	491a      	ldr	r1, [pc, #104]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b9a:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba6:	f7fc fab3 	bl	8002110 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bae:	f7fc faaf 	bl	8002110 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b64      	cmp	r3, #100	; 0x64
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0d8      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bc0:	4b0e      	ldr	r3, [pc, #56]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	f040 80ce 	bne.w	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be0:	f7fc fa96 	bl	8002110 <HAL_GetTick>
 8005be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005be6:	e00b      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be8:	f7fc fa92 	bl	8002110 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	; 0x64
 8005bf4:	d904      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0bb      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c00:	4b5e      	ldr	r3, [pc, #376]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0c:	d0ec      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02e      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d12a      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c36:	4b51      	ldr	r3, [pc, #324]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c44:	4b4d      	ldr	r3, [pc, #308]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	0f1b      	lsrs	r3, r3, #28
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	019a      	lsls	r2, r3, #6
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	061b      	lsls	r3, r3, #24
 8005c64:	431a      	orrs	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	071b      	lsls	r3, r3, #28
 8005c6a:	4944      	ldr	r1, [pc, #272]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c72:	4b42      	ldr	r3, [pc, #264]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	3b01      	subs	r3, #1
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	493d      	ldr	r1, [pc, #244]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d022      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca0:	d11d      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ca2:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	0e1b      	lsrs	r3, r3, #24
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cb0:	4b32      	ldr	r3, [pc, #200]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb6:	0f1b      	lsrs	r3, r3, #28
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	019a      	lsls	r2, r3, #6
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	061b      	lsls	r3, r3, #24
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	071b      	lsls	r3, r3, #28
 8005cd6:	4929      	ldr	r1, [pc, #164]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d028      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	0e1b      	lsrs	r3, r3, #24
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cf8:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	019a      	lsls	r2, r3, #6
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	431a      	orrs	r2, r3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	071b      	lsls	r3, r3, #28
 8005d1e:	4917      	ldr	r1, [pc, #92]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	4911      	ldr	r1, [pc, #68]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d48:	f7fc f9e2 	bl	8002110 <HAL_GetTick>
 8005d4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d50:	f7fc f9de 	bl	8002110 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e007      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6e:	d1ef      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40023800 	.word	0x40023800

08005d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e049      	b.n	8005e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f841 	bl	8005e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fa00 	bl	80061c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e054      	b.n	8005f06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d01d      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a21      	ldr	r2, [pc, #132]	; (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_TIM_Base_Start_IT+0xe0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <HAL_TIM_Base_Start_IT+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d115      	bne.n	8005ef0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <HAL_TIM_Base_Start_IT+0xec>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d015      	beq.n	8005f02 <HAL_TIM_Base_Start_IT+0xbe>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d011      	beq.n	8005f02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	e008      	b.n	8005f02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e000      	b.n	8005f04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40001800 	.word	0x40001800
 8005f30:	00010007 	.word	0x00010007

08005f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d122      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d11b      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0202 	mvn.w	r2, #2
 8005f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f905 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8f7 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f908 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d122      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d11b      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0204 	mvn.w	r2, #4
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8db 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8005fd0:	e005      	b.n	8005fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8cd 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8de 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0208 	mvn.w	r2, #8
 8006008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2204      	movs	r2, #4
 800600e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8b1 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8a3 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8b4 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b10      	cmp	r3, #16
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b10      	cmp	r3, #16
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0210 	mvn.w	r2, #16
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2208      	movs	r2, #8
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f887 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f879 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f88a 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0201 	mvn.w	r2, #1
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fa ff92 	bl	8000fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d10e      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d0:	2b80      	cmp	r3, #128	; 0x80
 80060d2:	d107      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f91a 	bl	8006318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f2:	d10e      	bne.n	8006112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d107      	bne.n	8006112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f90d 	bl	800632c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d10e      	bne.n	800613e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d107      	bne.n	800613e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f838 	bl	80061ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d10e      	bne.n	800616a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	d107      	bne.n	800616a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f06f 0220 	mvn.w	r2, #32
 8006162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8cd 	bl	8006304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a40      	ldr	r2, [pc, #256]	; (80062d8 <TIM_Base_SetConfig+0x114>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e2:	d00f      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3d      	ldr	r2, [pc, #244]	; (80062dc <TIM_Base_SetConfig+0x118>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00b      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a3c      	ldr	r2, [pc, #240]	; (80062e0 <TIM_Base_SetConfig+0x11c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d007      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a3b      	ldr	r2, [pc, #236]	; (80062e4 <TIM_Base_SetConfig+0x120>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a3a      	ldr	r2, [pc, #232]	; (80062e8 <TIM_Base_SetConfig+0x124>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d108      	bne.n	8006216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2f      	ldr	r2, [pc, #188]	; (80062d8 <TIM_Base_SetConfig+0x114>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d02b      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d027      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2c      	ldr	r2, [pc, #176]	; (80062dc <TIM_Base_SetConfig+0x118>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d023      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <TIM_Base_SetConfig+0x11c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d01f      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <TIM_Base_SetConfig+0x120>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01b      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a29      	ldr	r2, [pc, #164]	; (80062e8 <TIM_Base_SetConfig+0x124>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d017      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a28      	ldr	r2, [pc, #160]	; (80062ec <TIM_Base_SetConfig+0x128>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <TIM_Base_SetConfig+0x12c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00f      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a26      	ldr	r2, [pc, #152]	; (80062f4 <TIM_Base_SetConfig+0x130>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a25      	ldr	r2, [pc, #148]	; (80062f8 <TIM_Base_SetConfig+0x134>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a24      	ldr	r2, [pc, #144]	; (80062fc <TIM_Base_SetConfig+0x138>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a23      	ldr	r2, [pc, #140]	; (8006300 <TIM_Base_SetConfig+0x13c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800627c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <TIM_Base_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0xf8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a0c      	ldr	r2, [pc, #48]	; (80062e8 <TIM_Base_SetConfig+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d103      	bne.n	80062c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	615a      	str	r2, [r3, #20]
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40010400 	.word	0x40010400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800
 80062f8:	40001800 	.word	0x40001800
 80062fc:	40001c00 	.word	0x40001c00
 8006300:	40002000 	.word	0x40002000

08006304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e040      	b.n	80063d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb fc5c 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fc12 	bl	8006ba8 <UART_SetConfig>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e022      	b.n	80063d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fe6a 	bl	8007070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fef1 	bl	80071b4 <UART_CheckIdleState>
 80063d2:	4603      	mov	r3, r0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4613      	mov	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d165      	bne.n	80064be <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_UART_Transmit_DMA+0x22>
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e05e      	b.n	80064c0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2221      	movs	r2, #33	; 0x21
 8006424:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642a:	2b00      	cmp	r3, #0
 800642c:	d027      	beq.n	800647e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	4a25      	ldr	r2, [pc, #148]	; (80064c8 <HAL_UART_Transmit_DMA+0xec>)
 8006434:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	4a24      	ldr	r2, [pc, #144]	; (80064cc <HAL_UART_Transmit_DMA+0xf0>)
 800643c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <HAL_UART_Transmit_DMA+0xf4>)
 8006444:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644a:	2200      	movs	r2, #0
 800644c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	4619      	mov	r1, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3328      	adds	r3, #40	; 0x28
 800645e:	461a      	mov	r2, r3
 8006460:	88fb      	ldrh	r3, [r7, #6]
 8006462:	f7fc f821 	bl	80024a8 <HAL_DMA_Start_IT>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2210      	movs	r2, #16
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e020      	b.n	80064c0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2240      	movs	r2, #64	; 0x40
 8006484:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	613b      	str	r3, [r7, #16]
   return(result);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3308      	adds	r3, #8
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	623a      	str	r2, [r7, #32]
 80064a8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	69f9      	ldr	r1, [r7, #28]
 80064ac:	6a3a      	ldr	r2, [r7, #32]
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e5      	bne.n	8006486 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3728      	adds	r7, #40	; 0x28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	08007631 	.word	0x08007631
 80064cc:	080076c7 	.word	0x080076c7
 80064d0:	08007849 	.word	0x08007849

080064d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d132      	bne.n	8006552 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_UART_Receive_DMA+0x24>
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e02b      	b.n	8006554 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d018      	beq.n	8006542 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	623b      	str	r3, [r7, #32]
 8006530:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	69f9      	ldr	r1, [r7, #28]
 8006534:	6a3a      	ldr	r2, [r7, #32]
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	61bb      	str	r3, [r7, #24]
   return(result);
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e6      	bne.n	8006510 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	461a      	mov	r2, r3
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 ff47 	bl	80073dc <UART_Start_Receive_DMA>
 800654e:	4603      	mov	r3, r0
 8006550:	e000      	b.n	8006554 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
  }
}
 8006554:	4618      	mov	r0, r3
 8006556:	3728      	adds	r7, #40	; 0x28
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b0ba      	sub	sp, #232	; 0xe8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006586:	f640 030f 	movw	r3, #2063	; 0x80f
 800658a:	4013      	ands	r3, r2
 800658c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d115      	bne.n	80065c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00f      	beq.n	80065c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 82ac 	beq.w	8006b12 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
      }
      return;
 80065c2:	e2a6      	b.n	8006b12 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8117 	beq.w	80067fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065de:	4b85      	ldr	r3, [pc, #532]	; (80067f4 <HAL_UART_IRQHandler+0x298>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 810a 	beq.w	80067fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d011      	beq.n	8006618 <HAL_UART_IRQHandler+0xbc>
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2201      	movs	r2, #1
 8006606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660e:	f043 0201 	orr.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d011      	beq.n	8006648 <HAL_UART_IRQHandler+0xec>
 8006624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2202      	movs	r2, #2
 8006636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663e:	f043 0204 	orr.w	r2, r3, #4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d011      	beq.n	8006678 <HAL_UART_IRQHandler+0x11c>
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2204      	movs	r2, #4
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666e:	f043 0202 	orr.w	r2, r3, #2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006694:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2208      	movs	r2, #8
 80066a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066aa:	f043 0208 	orr.w	r2, r3, #8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d012      	beq.n	80066e6 <HAL_UART_IRQHandler+0x18a>
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00c      	beq.n	80066e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066dc:	f043 0220 	orr.w	r2, r3, #32
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8212 	beq.w	8006b16 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d005      	beq.n	800673e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800673a:	2b00      	cmp	r3, #0
 800673c:	d04f      	beq.n	80067de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 ff12 	bl	8007568 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d141      	bne.n	80067d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800676c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800677e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800678a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1d9      	bne.n	8006752 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067aa:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <HAL_UART_IRQHandler+0x29c>)
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fb ff48 	bl	8002648 <HAL_DMA_Abort_IT>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d017      	beq.n	80067ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	e00f      	b.n	80067ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f9ca 	bl	8006b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	e00b      	b.n	80067ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f9c6 	bl	8006b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	e007      	b.n	80067ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9c2 	bl	8006b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80067ec:	e193      	b.n	8006b16 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	bf00      	nop
    return;
 80067f0:	e191      	b.n	8006b16 <HAL_UART_IRQHandler+0x5ba>
 80067f2:	bf00      	nop
 80067f4:	04000120 	.word	0x04000120
 80067f8:	080078c7 	.word	0x080078c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 814c 	bne.w	8006a9e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8145 	beq.w	8006a9e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 813e 	beq.w	8006a9e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	f040 80b6 	bne.w	80069a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8165 	beq.w	8006b1a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800685a:	429a      	cmp	r2, r3
 800685c:	f080 815d 	bcs.w	8006b1a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006866:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006874:	f000 8086 	beq.w	8006984 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800688c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1da      	bne.n	8006878 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e1      	bne.n	80068c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800690e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006922:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006924:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e3      	bne.n	80068fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006954:	f023 0310 	bic.w	r3, r3, #16
 8006958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006966:	65bb      	str	r3, [r7, #88]	; 0x58
 8006968:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800696c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e4      	bne.n	8006944 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697e:	4618      	mov	r0, r3
 8006980:	f7fb fdf2 	bl	8002568 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006996:	b29b      	uxth	r3, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	b29b      	uxth	r3, r3
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8ec 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069a4:	e0b9      	b.n	8006b1a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80ab 	beq.w	8006b1e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80069c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80a6 	beq.w	8006b1e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069f4:	647b      	str	r3, [r7, #68]	; 0x44
 80069f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e4      	bne.n	80069d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	623b      	str	r3, [r7, #32]
   return(result);
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a2c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e3      	bne.n	8006a08 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	617b      	str	r3, [r7, #20]
   return(result);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e4      	bne.n	8006a54 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f870 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a9c:	e03f      	b.n	8006b1e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x56c>
 8006aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006abe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f867 	bl	8006b94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac6:	e02d      	b.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00e      	beq.n	8006af2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01c      	beq.n	8006b22 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
    }
    return;
 8006af0:	e017      	b.n	8006b22 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d012      	beq.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
 8006afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00c      	beq.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fef1 	bl	80078f2 <UART_EndTransmit_IT>
    return;
 8006b10:	e008      	b.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006b12:	bf00      	nop
 8006b14:	e006      	b.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006b22:	bf00      	nop
  }

}
 8006b24:	37e8      	adds	r7, #232	; 0xe8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4ba6      	ldr	r3, [pc, #664]	; (8006e6c <UART_SetConfig+0x2c4>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	6979      	ldr	r1, [r7, #20]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a94      	ldr	r2, [pc, #592]	; (8006e70 <UART_SetConfig+0x2c8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d120      	bne.n	8006c66 <UART_SetConfig+0xbe>
 8006c24:	4b93      	ldr	r3, [pc, #588]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d816      	bhi.n	8006c60 <UART_SetConfig+0xb8>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x90>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c55 	.word	0x08006c55
 8006c40:	08006c4f 	.word	0x08006c4f
 8006c44:	08006c5b 	.word	0x08006c5b
 8006c48:	2301      	movs	r3, #1
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e150      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e14d      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006c54:	2304      	movs	r3, #4
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e14a      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e147      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006c60:	2310      	movs	r3, #16
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e144      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a83      	ldr	r2, [pc, #524]	; (8006e78 <UART_SetConfig+0x2d0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d132      	bne.n	8006cd6 <UART_SetConfig+0x12e>
 8006c70:	4b80      	ldr	r3, [pc, #512]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c76:	f003 030c 	and.w	r3, r3, #12
 8006c7a:	2b0c      	cmp	r3, #12
 8006c7c:	d828      	bhi.n	8006cd0 <UART_SetConfig+0x128>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0xdc>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006cd1 	.word	0x08006cd1
 8006c8c:	08006cd1 	.word	0x08006cd1
 8006c90:	08006cd1 	.word	0x08006cd1
 8006c94:	08006cc5 	.word	0x08006cc5
 8006c98:	08006cd1 	.word	0x08006cd1
 8006c9c:	08006cd1 	.word	0x08006cd1
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cbf 	.word	0x08006cbf
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd1 	.word	0x08006cd1
 8006cb4:	08006ccb 	.word	0x08006ccb
 8006cb8:	2300      	movs	r3, #0
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e118      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e115      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e112      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e10f      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e10c      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a68      	ldr	r2, [pc, #416]	; (8006e7c <UART_SetConfig+0x2d4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d120      	bne.n	8006d22 <UART_SetConfig+0x17a>
 8006ce0:	4b64      	ldr	r3, [pc, #400]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cea:	2b30      	cmp	r3, #48	; 0x30
 8006cec:	d013      	beq.n	8006d16 <UART_SetConfig+0x16e>
 8006cee:	2b30      	cmp	r3, #48	; 0x30
 8006cf0:	d814      	bhi.n	8006d1c <UART_SetConfig+0x174>
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d009      	beq.n	8006d0a <UART_SetConfig+0x162>
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d810      	bhi.n	8006d1c <UART_SetConfig+0x174>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <UART_SetConfig+0x15c>
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d006      	beq.n	8006d10 <UART_SetConfig+0x168>
 8006d02:	e00b      	b.n	8006d1c <UART_SetConfig+0x174>
 8006d04:	2300      	movs	r3, #0
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e0f2      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	77fb      	strb	r3, [r7, #31]
 8006d0e:	e0ef      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d10:	2304      	movs	r3, #4
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e0ec      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d16:	2308      	movs	r3, #8
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e0e9      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e0e6      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a56      	ldr	r2, [pc, #344]	; (8006e80 <UART_SetConfig+0x2d8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d120      	bne.n	8006d6e <UART_SetConfig+0x1c6>
 8006d2c:	4b51      	ldr	r3, [pc, #324]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d36:	2bc0      	cmp	r3, #192	; 0xc0
 8006d38:	d013      	beq.n	8006d62 <UART_SetConfig+0x1ba>
 8006d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d3c:	d814      	bhi.n	8006d68 <UART_SetConfig+0x1c0>
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d009      	beq.n	8006d56 <UART_SetConfig+0x1ae>
 8006d42:	2b80      	cmp	r3, #128	; 0x80
 8006d44:	d810      	bhi.n	8006d68 <UART_SetConfig+0x1c0>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <UART_SetConfig+0x1a8>
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d006      	beq.n	8006d5c <UART_SetConfig+0x1b4>
 8006d4e:	e00b      	b.n	8006d68 <UART_SetConfig+0x1c0>
 8006d50:	2300      	movs	r3, #0
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e0cc      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d56:	2302      	movs	r3, #2
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e0c9      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e0c6      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d62:	2308      	movs	r3, #8
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e0c3      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e0c0      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a44      	ldr	r2, [pc, #272]	; (8006e84 <UART_SetConfig+0x2dc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d125      	bne.n	8006dc4 <UART_SetConfig+0x21c>
 8006d78:	4b3e      	ldr	r3, [pc, #248]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d86:	d017      	beq.n	8006db8 <UART_SetConfig+0x210>
 8006d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d8c:	d817      	bhi.n	8006dbe <UART_SetConfig+0x216>
 8006d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d92:	d00b      	beq.n	8006dac <UART_SetConfig+0x204>
 8006d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d98:	d811      	bhi.n	8006dbe <UART_SetConfig+0x216>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <UART_SetConfig+0x1fe>
 8006d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da2:	d006      	beq.n	8006db2 <UART_SetConfig+0x20a>
 8006da4:	e00b      	b.n	8006dbe <UART_SetConfig+0x216>
 8006da6:	2300      	movs	r3, #0
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e0a1      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006dac:	2302      	movs	r3, #2
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	e09e      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006db2:	2304      	movs	r3, #4
 8006db4:	77fb      	strb	r3, [r7, #31]
 8006db6:	e09b      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006db8:	2308      	movs	r3, #8
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e098      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006dbe:	2310      	movs	r3, #16
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e095      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a2f      	ldr	r2, [pc, #188]	; (8006e88 <UART_SetConfig+0x2e0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d125      	bne.n	8006e1a <UART_SetConfig+0x272>
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ddc:	d017      	beq.n	8006e0e <UART_SetConfig+0x266>
 8006dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006de2:	d817      	bhi.n	8006e14 <UART_SetConfig+0x26c>
 8006de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de8:	d00b      	beq.n	8006e02 <UART_SetConfig+0x25a>
 8006dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dee:	d811      	bhi.n	8006e14 <UART_SetConfig+0x26c>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <UART_SetConfig+0x254>
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df8:	d006      	beq.n	8006e08 <UART_SetConfig+0x260>
 8006dfa:	e00b      	b.n	8006e14 <UART_SetConfig+0x26c>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e076      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e02:	2302      	movs	r3, #2
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e073      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e070      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e06d      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e06a      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1b      	ldr	r2, [pc, #108]	; (8006e8c <UART_SetConfig+0x2e4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d138      	bne.n	8006e96 <UART_SetConfig+0x2ee>
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <UART_SetConfig+0x2cc>)
 8006e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e32:	d017      	beq.n	8006e64 <UART_SetConfig+0x2bc>
 8006e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e38:	d82a      	bhi.n	8006e90 <UART_SetConfig+0x2e8>
 8006e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3e:	d00b      	beq.n	8006e58 <UART_SetConfig+0x2b0>
 8006e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e44:	d824      	bhi.n	8006e90 <UART_SetConfig+0x2e8>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <UART_SetConfig+0x2aa>
 8006e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4e:	d006      	beq.n	8006e5e <UART_SetConfig+0x2b6>
 8006e50:	e01e      	b.n	8006e90 <UART_SetConfig+0x2e8>
 8006e52:	2300      	movs	r3, #0
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e04b      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	e048      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e5e:	2304      	movs	r3, #4
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e045      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e64:	2308      	movs	r3, #8
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e042      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e6a:	bf00      	nop
 8006e6c:	efff69f3 	.word	0xefff69f3
 8006e70:	40011000 	.word	0x40011000
 8006e74:	40023800 	.word	0x40023800
 8006e78:	40004400 	.word	0x40004400
 8006e7c:	40004800 	.word	0x40004800
 8006e80:	40004c00 	.word	0x40004c00
 8006e84:	40005000 	.word	0x40005000
 8006e88:	40011400 	.word	0x40011400
 8006e8c:	40007800 	.word	0x40007800
 8006e90:	2310      	movs	r3, #16
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e02c      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a72      	ldr	r2, [pc, #456]	; (8007064 <UART_SetConfig+0x4bc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d125      	bne.n	8006eec <UART_SetConfig+0x344>
 8006ea0:	4b71      	ldr	r3, [pc, #452]	; (8007068 <UART_SetConfig+0x4c0>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006eaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eae:	d017      	beq.n	8006ee0 <UART_SetConfig+0x338>
 8006eb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eb4:	d817      	bhi.n	8006ee6 <UART_SetConfig+0x33e>
 8006eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eba:	d00b      	beq.n	8006ed4 <UART_SetConfig+0x32c>
 8006ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec0:	d811      	bhi.n	8006ee6 <UART_SetConfig+0x33e>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <UART_SetConfig+0x326>
 8006ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eca:	d006      	beq.n	8006eda <UART_SetConfig+0x332>
 8006ecc:	e00b      	b.n	8006ee6 <UART_SetConfig+0x33e>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e00d      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e00a      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006eda:	2304      	movs	r3, #4
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e007      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e004      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006ee6:	2310      	movs	r3, #16
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e001      	b.n	8006ef0 <UART_SetConfig+0x348>
 8006eec:	2310      	movs	r3, #16
 8006eee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef8:	d15b      	bne.n	8006fb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d828      	bhi.n	8006f52 <UART_SetConfig+0x3aa>
 8006f00:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <UART_SetConfig+0x360>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f2d 	.word	0x08006f2d
 8006f0c:	08006f35 	.word	0x08006f35
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	08006f53 	.word	0x08006f53
 8006f18:	08006f43 	.word	0x08006f43
 8006f1c:	08006f53 	.word	0x08006f53
 8006f20:	08006f53 	.word	0x08006f53
 8006f24:	08006f53 	.word	0x08006f53
 8006f28:	08006f4b 	.word	0x08006f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f2c:	f7fe faa6 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8006f30:	61b8      	str	r0, [r7, #24]
        break;
 8006f32:	e013      	b.n	8006f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f34:	f7fe fab6 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8006f38:	61b8      	str	r0, [r7, #24]
        break;
 8006f3a:	e00f      	b.n	8006f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f3c:	4b4b      	ldr	r3, [pc, #300]	; (800706c <UART_SetConfig+0x4c4>)
 8006f3e:	61bb      	str	r3, [r7, #24]
        break;
 8006f40:	e00c      	b.n	8006f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f42:	f7fe f9c9 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8006f46:	61b8      	str	r0, [r7, #24]
        break;
 8006f48:	e008      	b.n	8006f5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f4e:	61bb      	str	r3, [r7, #24]
        break;
 8006f50:	e004      	b.n	8006f5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	77bb      	strb	r3, [r7, #30]
        break;
 8006f5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d074      	beq.n	800704c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	005a      	lsls	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	441a      	add	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	d916      	bls.n	8006fac <UART_SetConfig+0x404>
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f84:	d212      	bcs.n	8006fac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f023 030f 	bic.w	r3, r3, #15
 8006f8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	89fb      	ldrh	r3, [r7, #14]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	89fa      	ldrh	r2, [r7, #14]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	e04f      	b.n	800704c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	77bb      	strb	r3, [r7, #30]
 8006fb0:	e04c      	b.n	800704c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb2:	7ffb      	ldrb	r3, [r7, #31]
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d828      	bhi.n	800700a <UART_SetConfig+0x462>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0x418>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006fe5 	.word	0x08006fe5
 8006fc4:	08006fed 	.word	0x08006fed
 8006fc8:	08006ff5 	.word	0x08006ff5
 8006fcc:	0800700b 	.word	0x0800700b
 8006fd0:	08006ffb 	.word	0x08006ffb
 8006fd4:	0800700b 	.word	0x0800700b
 8006fd8:	0800700b 	.word	0x0800700b
 8006fdc:	0800700b 	.word	0x0800700b
 8006fe0:	08007003 	.word	0x08007003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe4:	f7fe fa4a 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8006fe8:	61b8      	str	r0, [r7, #24]
        break;
 8006fea:	e013      	b.n	8007014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fec:	f7fe fa5a 	bl	80054a4 <HAL_RCC_GetPCLK2Freq>
 8006ff0:	61b8      	str	r0, [r7, #24]
        break;
 8006ff2:	e00f      	b.n	8007014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff4:	4b1d      	ldr	r3, [pc, #116]	; (800706c <UART_SetConfig+0x4c4>)
 8006ff6:	61bb      	str	r3, [r7, #24]
        break;
 8006ff8:	e00c      	b.n	8007014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffa:	f7fe f96d 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8006ffe:	61b8      	str	r0, [r7, #24]
        break;
 8007000:	e008      	b.n	8007014 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007006:	61bb      	str	r3, [r7, #24]
        break;
 8007008:	e004      	b.n	8007014 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	77bb      	strb	r3, [r7, #30]
        break;
 8007012:	bf00      	nop
    }

    if (pclk != 0U)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d018      	beq.n	800704c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	085a      	lsrs	r2, r3, #1
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	441a      	add	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b0f      	cmp	r3, #15
 8007032:	d909      	bls.n	8007048 <UART_SetConfig+0x4a0>
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703a:	d205      	bcs.n	8007048 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	b29a      	uxth	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60da      	str	r2, [r3, #12]
 8007046:	e001      	b.n	800704c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007058:	7fbb      	ldrb	r3, [r7, #30]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40007c00 	.word	0x40007c00
 8007068:	40023800 	.word	0x40023800
 800706c:	00f42400 	.word	0x00f42400

08007070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01a      	beq.n	8007186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716e:	d10a      	bne.n	8007186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]
  }
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c4:	f7fa ffa4 	bl	8002110 <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d10e      	bne.n	80071f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f831 	bl	800724e <UART_WaitOnFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e027      	b.n	8007246 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b04      	cmp	r3, #4
 8007202:	d10e      	bne.n	8007222 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f81b 	bl	800724e <UART_WaitOnFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e011      	b.n	8007246 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b09c      	sub	sp, #112	; 0x70
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	603b      	str	r3, [r7, #0]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725e:	e0a7      	b.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	f000 80a3 	beq.w	80073b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7fa ff51 	bl	8002110 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <UART_WaitOnFlagUntilTimeout+0x32>
 800727a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727c:	2b00      	cmp	r3, #0
 800727e:	d13f      	bne.n	8007300 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800728e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007294:	667b      	str	r3, [r7, #100]	; 0x64
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e6      	bne.n	8007280 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	663b      	str	r3, [r7, #96]	; 0x60
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3308      	adds	r3, #8
 80072d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80072d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e5      	bne.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e068      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d050      	beq.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800731c:	d148      	bne.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007326:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800733c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
 8007348:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e6      	bne.n	8007328 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	66bb      	str	r3, [r7, #104]	; 0x68
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3308      	adds	r3, #8
 8007378:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800737a:	623a      	str	r2, [r7, #32]
 800737c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	69f9      	ldr	r1, [r7, #28]
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	61bb      	str	r3, [r7, #24]
   return(result);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e5      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e010      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4013      	ands	r3, r2
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	bf0c      	ite	eq
 80073c0:	2301      	moveq	r3, #1
 80073c2:	2300      	movne	r3, #0
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	461a      	mov	r2, r3
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	f43f af48 	beq.w	8007260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3770      	adds	r7, #112	; 0x70
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b096      	sub	sp, #88	; 0x58
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2222      	movs	r2, #34	; 0x22
 8007404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740c:	2b00      	cmp	r3, #0
 800740e:	d028      	beq.n	8007462 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007414:	4a3e      	ldr	r2, [pc, #248]	; (8007510 <UART_Start_Receive_DMA+0x134>)
 8007416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741c:	4a3d      	ldr	r2, [pc, #244]	; (8007514 <UART_Start_Receive_DMA+0x138>)
 800741e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007424:	4a3c      	ldr	r2, [pc, #240]	; (8007518 <UART_Start_Receive_DMA+0x13c>)
 8007426:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742c:	2200      	movs	r2, #0
 800742e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	4619      	mov	r1, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007440:	461a      	mov	r2, r3
 8007442:	88fb      	ldrh	r3, [r7, #6]
 8007444:	f7fb f830 	bl	80024a8 <HAL_DMA_Start_IT>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2210      	movs	r2, #16
 8007452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e051      	b.n	8007506 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d018      	beq.n	800749c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747e:	657b      	str	r3, [r7, #84]	; 0x54
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007488:	64bb      	str	r3, [r7, #72]	; 0x48
 800748a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800748e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3308      	adds	r3, #8
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	653b      	str	r3, [r7, #80]	; 0x50
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80074bc:	637a      	str	r2, [r7, #52]	; 0x34
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e5      	bne.n	800749c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	613b      	str	r3, [r7, #16]
   return(result);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074f0:	623a      	str	r2, [r7, #32]
 80074f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e5      	bne.n	80074d0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3758      	adds	r7, #88	; 0x58
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	080076e3 	.word	0x080076e3
 8007514:	0800780b 	.word	0x0800780b
 8007518:	08007849 	.word	0x08007849

0800751c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b089      	sub	sp, #36	; 0x24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	60bb      	str	r3, [r7, #8]
   return(result);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6979      	ldr	r1, [r7, #20]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	613b      	str	r3, [r7, #16]
   return(result);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e6      	bne.n	8007524 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800755c:	bf00      	nop
 800755e:	3724      	adds	r7, #36	; 0x24
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b095      	sub	sp, #84	; 0x54
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758e:	643b      	str	r3, [r7, #64]	; 0x40
 8007590:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007594:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e6      	bne.n	8007570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d118      	bne.n	8007610 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	647b      	str	r3, [r7, #68]	; 0x44
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6979      	ldr	r1, [r7, #20]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	613b      	str	r3, [r7, #16]
   return(result);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007624:	bf00      	nop
 8007626:	3754      	adds	r7, #84	; 0x54
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b090      	sub	sp, #64	; 0x40
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007646:	d037      	beq.n	80076b8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	2200      	movs	r2, #0
 800764c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	623b      	str	r3, [r7, #32]
   return(result);
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007666:	63bb      	str	r3, [r7, #56]	; 0x38
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007670:	633a      	str	r2, [r7, #48]	; 0x30
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	60fb      	str	r3, [r7, #12]
   return(result);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	69b9      	ldr	r1, [r7, #24]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	617b      	str	r3, [r7, #20]
   return(result);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076b6:	e002      	b.n	80076be <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80076b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076ba:	f7ff fa37 	bl	8006b2c <HAL_UART_TxCpltCallback>
}
 80076be:	bf00      	nop
 80076c0:	3740      	adds	r7, #64	; 0x40
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fa33 	bl	8006b40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b09c      	sub	sp, #112	; 0x70
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f8:	d071      	beq.n	80077de <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80076fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007716:	66bb      	str	r3, [r7, #104]	; 0x68
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007720:	65bb      	str	r3, [r7, #88]	; 0x58
 8007722:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800772e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e6      	bne.n	8007702 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007746:	f023 0301 	bic.w	r3, r3, #1
 800774a:	667b      	str	r3, [r7, #100]	; 0x64
 800774c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007754:	647a      	str	r2, [r7, #68]	; 0x44
 8007756:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800775a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e5      	bne.n	8007734 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	623b      	str	r3, [r7, #32]
   return(result);
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777e:	663b      	str	r3, [r7, #96]	; 0x60
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007788:	633a      	str	r2, [r7, #48]	; 0x30
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800778e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800779c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d118      	bne.n	80077de <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f023 0310 	bic.w	r3, r3, #16
 80077c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	69b9      	ldr	r1, [r7, #24]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	617b      	str	r3, [r7, #20]
   return(result);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e6      	bne.n	80077ac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e0:	2200      	movs	r2, #0
 80077e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d107      	bne.n	80077fc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077f2:	4619      	mov	r1, r3
 80077f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077f6:	f7ff f9c1 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077fa:	e002      	b.n	8007802 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80077fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077fe:	f7f9 f983 	bl	8000b08 <HAL_UART_RxCpltCallback>
}
 8007802:	bf00      	nop
 8007804:	3770      	adds	r7, #112	; 0x70
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007822:	2b01      	cmp	r3, #1
 8007824:	d109      	bne.n	800783a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	b29b      	uxth	r3, r3
 8007830:	4619      	mov	r1, r3
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff f9a2 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007838:	e002      	b.n	8007840 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff f98a 	bl	8006b54 <HAL_UART_RxHalfCpltCallback>
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007862:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786e:	2b80      	cmp	r3, #128	; 0x80
 8007870:	d109      	bne.n	8007886 <UART_DMAError+0x3e>
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b21      	cmp	r3, #33	; 0x21
 8007876:	d106      	bne.n	8007886 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2200      	movs	r2, #0
 800787c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007880:	6978      	ldr	r0, [r7, #20]
 8007882:	f7ff fe4b 	bl	800751c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b40      	cmp	r3, #64	; 0x40
 8007892:	d109      	bne.n	80078a8 <UART_DMAError+0x60>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b22      	cmp	r3, #34	; 0x22
 8007898:	d106      	bne.n	80078a8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2200      	movs	r2, #0
 800789e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80078a2:	6978      	ldr	r0, [r7, #20]
 80078a4:	f7ff fe60 	bl	8007568 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ae:	f043 0210 	orr.w	r2, r3, #16
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f7ff f955 	bl	8006b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078be:	bf00      	nop
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff f93f 	bl	8006b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b088      	sub	sp, #32
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	60bb      	str	r3, [r7, #8]
   return(result);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6979      	ldr	r1, [r7, #20]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	613b      	str	r3, [r7, #16]
   return(result);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff f8f7 	bl	8006b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800793e:	bf00      	nop
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007948:	b5b0      	push	{r4, r5, r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800794e:	4b8f      	ldr	r3, [pc, #572]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007950:	22c0      	movs	r2, #192	; 0xc0
 8007952:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007954:	4b8d      	ldr	r3, [pc, #564]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007956:	22a8      	movs	r2, #168	; 0xa8
 8007958:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800795a:	4b8c      	ldr	r3, [pc, #560]	; (8007b8c <MX_LWIP_Init+0x244>)
 800795c:	2201      	movs	r2, #1
 800795e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8007960:	4b8a      	ldr	r3, [pc, #552]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007962:	220a      	movs	r2, #10
 8007964:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007966:	4b8a      	ldr	r3, [pc, #552]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007968:	22ff      	movs	r2, #255	; 0xff
 800796a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800796c:	4b88      	ldr	r3, [pc, #544]	; (8007b90 <MX_LWIP_Init+0x248>)
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007972:	4b87      	ldr	r3, [pc, #540]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007974:	22ff      	movs	r2, #255	; 0xff
 8007976:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007978:	4b85      	ldr	r3, [pc, #532]	; (8007b90 <MX_LWIP_Init+0x248>)
 800797a:	2200      	movs	r2, #0
 800797c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800797e:	4b85      	ldr	r3, [pc, #532]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007980:	22c0      	movs	r2, #192	; 0xc0
 8007982:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007984:	4b83      	ldr	r3, [pc, #524]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007986:	22a8      	movs	r2, #168	; 0xa8
 8007988:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800798a:	4b82      	ldr	r3, [pc, #520]	; (8007b94 <MX_LWIP_Init+0x24c>)
 800798c:	2201      	movs	r2, #1
 800798e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007990:	4b80      	ldr	r3, [pc, #512]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007992:	2201      	movs	r2, #1
 8007994:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007996:	2100      	movs	r1, #0
 8007998:	2000      	movs	r0, #0
 800799a:	f003 ffe7 	bl	800b96c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800799e:	4b7b      	ldr	r3, [pc, #492]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	061a      	lsls	r2, r3, #24
 80079a4:	4b79      	ldr	r3, [pc, #484]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	041b      	lsls	r3, r3, #16
 80079aa:	431a      	orrs	r2, r3
 80079ac:	4b77      	ldr	r3, [pc, #476]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079ae:	789b      	ldrb	r3, [r3, #2]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	4313      	orrs	r3, r2
 80079b4:	4a75      	ldr	r2, [pc, #468]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079b6:	78d2      	ldrb	r2, [r2, #3]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	061a      	lsls	r2, r3, #24
 80079bc:	4b73      	ldr	r3, [pc, #460]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	0619      	lsls	r1, r3, #24
 80079c2:	4b72      	ldr	r3, [pc, #456]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	041b      	lsls	r3, r3, #16
 80079c8:	4319      	orrs	r1, r3
 80079ca:	4b70      	ldr	r3, [pc, #448]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	430b      	orrs	r3, r1
 80079d2:	496e      	ldr	r1, [pc, #440]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079d4:	78c9      	ldrb	r1, [r1, #3]
 80079d6:	430b      	orrs	r3, r1
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079de:	431a      	orrs	r2, r3
 80079e0:	4b6a      	ldr	r3, [pc, #424]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	0619      	lsls	r1, r3, #24
 80079e6:	4b69      	ldr	r3, [pc, #420]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	041b      	lsls	r3, r3, #16
 80079ec:	4319      	orrs	r1, r3
 80079ee:	4b67      	ldr	r3, [pc, #412]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079f0:	789b      	ldrb	r3, [r3, #2]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	430b      	orrs	r3, r1
 80079f6:	4965      	ldr	r1, [pc, #404]	; (8007b8c <MX_LWIP_Init+0x244>)
 80079f8:	78c9      	ldrb	r1, [r1, #3]
 80079fa:	430b      	orrs	r3, r1
 80079fc:	0a1b      	lsrs	r3, r3, #8
 80079fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a02:	431a      	orrs	r2, r3
 8007a04:	4b61      	ldr	r3, [pc, #388]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	0619      	lsls	r1, r3, #24
 8007a0a:	4b60      	ldr	r3, [pc, #384]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	4319      	orrs	r1, r3
 8007a12:	4b5e      	ldr	r3, [pc, #376]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	495c      	ldr	r1, [pc, #368]	; (8007b8c <MX_LWIP_Init+0x244>)
 8007a1c:	78c9      	ldrb	r1, [r1, #3]
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	4313      	orrs	r3, r2
 8007a24:	4a5c      	ldr	r2, [pc, #368]	; (8007b98 <MX_LWIP_Init+0x250>)
 8007a26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007a28:	4b59      	ldr	r3, [pc, #356]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	061a      	lsls	r2, r3, #24
 8007a2e:	4b58      	ldr	r3, [pc, #352]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	041b      	lsls	r3, r3, #16
 8007a34:	431a      	orrs	r2, r3
 8007a36:	4b56      	ldr	r3, [pc, #344]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	4a54      	ldr	r2, [pc, #336]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a40:	78d2      	ldrb	r2, [r2, #3]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	061a      	lsls	r2, r3, #24
 8007a46:	4b52      	ldr	r3, [pc, #328]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	0619      	lsls	r1, r3, #24
 8007a4c:	4b50      	ldr	r3, [pc, #320]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	041b      	lsls	r3, r3, #16
 8007a52:	4319      	orrs	r1, r3
 8007a54:	4b4e      	ldr	r3, [pc, #312]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a56:	789b      	ldrb	r3, [r3, #2]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	494c      	ldr	r1, [pc, #304]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a5e:	78c9      	ldrb	r1, [r1, #3]
 8007a60:	430b      	orrs	r3, r1
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	4b49      	ldr	r3, [pc, #292]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	0619      	lsls	r1, r3, #24
 8007a70:	4b47      	ldr	r3, [pc, #284]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	4319      	orrs	r1, r3
 8007a78:	4b45      	ldr	r3, [pc, #276]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a7a:	789b      	ldrb	r3, [r3, #2]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	4943      	ldr	r1, [pc, #268]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a82:	78c9      	ldrb	r1, [r1, #3]
 8007a84:	430b      	orrs	r3, r1
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	0619      	lsls	r1, r3, #24
 8007a94:	4b3e      	ldr	r3, [pc, #248]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	041b      	lsls	r3, r3, #16
 8007a9a:	4319      	orrs	r1, r3
 8007a9c:	4b3c      	ldr	r3, [pc, #240]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007a9e:	789b      	ldrb	r3, [r3, #2]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	493a      	ldr	r1, [pc, #232]	; (8007b90 <MX_LWIP_Init+0x248>)
 8007aa6:	78c9      	ldrb	r1, [r1, #3]
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	0e1b      	lsrs	r3, r3, #24
 8007aac:	4313      	orrs	r3, r2
 8007aae:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <MX_LWIP_Init+0x254>)
 8007ab0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007ab2:	4b38      	ldr	r3, [pc, #224]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	061a      	lsls	r2, r3, #24
 8007ab8:	4b36      	ldr	r3, [pc, #216]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	041b      	lsls	r3, r3, #16
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	4b34      	ldr	r3, [pc, #208]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007ac2:	789b      	ldrb	r3, [r3, #2]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	4a32      	ldr	r2, [pc, #200]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007aca:	78d2      	ldrb	r2, [r2, #3]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	061a      	lsls	r2, r3, #24
 8007ad0:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	0619      	lsls	r1, r3, #24
 8007ad6:	4b2f      	ldr	r3, [pc, #188]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	041b      	lsls	r3, r3, #16
 8007adc:	4319      	orrs	r1, r3
 8007ade:	4b2d      	ldr	r3, [pc, #180]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007ae0:	789b      	ldrb	r3, [r3, #2]
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	492b      	ldr	r1, [pc, #172]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007ae8:	78c9      	ldrb	r1, [r1, #3]
 8007aea:	430b      	orrs	r3, r1
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007af2:	431a      	orrs	r2, r3
 8007af4:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	0619      	lsls	r1, r3, #24
 8007afa:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	4319      	orrs	r1, r3
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007b04:	789b      	ldrb	r3, [r3, #2]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	4922      	ldr	r1, [pc, #136]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007b0c:	78c9      	ldrb	r1, [r1, #3]
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b16:	431a      	orrs	r2, r3
 8007b18:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	0619      	lsls	r1, r3, #24
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	4319      	orrs	r1, r3
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007b28:	789b      	ldrb	r3, [r3, #2]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	4919      	ldr	r1, [pc, #100]	; (8007b94 <MX_LWIP_Init+0x24c>)
 8007b30:	78c9      	ldrb	r1, [r1, #3]
 8007b32:	430b      	orrs	r3, r1
 8007b34:	0e1b      	lsrs	r3, r3, #24
 8007b36:	4313      	orrs	r3, r2
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <MX_LWIP_Init+0x258>)
 8007b3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007b3c:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <MX_LWIP_Init+0x25c>)
 8007b3e:	9302      	str	r3, [sp, #8]
 8007b40:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <MX_LWIP_Init+0x260>)
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	2300      	movs	r3, #0
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <MX_LWIP_Init+0x258>)
 8007b4a:	4a14      	ldr	r2, [pc, #80]	; (8007b9c <MX_LWIP_Init+0x254>)
 8007b4c:	4912      	ldr	r1, [pc, #72]	; (8007b98 <MX_LWIP_Init+0x250>)
 8007b4e:	4817      	ldr	r0, [pc, #92]	; (8007bac <MX_LWIP_Init+0x264>)
 8007b50:	f004 fcd6 	bl	800c500 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007b54:	4815      	ldr	r0, [pc, #84]	; (8007bac <MX_LWIP_Init+0x264>)
 8007b56:	f004 fe85 	bl	800c864 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007b5a:	4814      	ldr	r0, [pc, #80]	; (8007bac <MX_LWIP_Init+0x264>)
 8007b5c:	f004 fe92 	bl	800c884 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007b60:	4913      	ldr	r1, [pc, #76]	; (8007bb0 <MX_LWIP_Init+0x268>)
 8007b62:	4812      	ldr	r0, [pc, #72]	; (8007bac <MX_LWIP_Init+0x264>)
 8007b64:	f004 ff90 	bl	800ca88 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <MX_LWIP_Init+0x26c>)
 8007b6a:	1d3c      	adds	r4, r7, #4
 8007b6c:	461d      	mov	r5, r3
 8007b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	490b      	ldr	r1, [pc, #44]	; (8007bac <MX_LWIP_Init+0x264>)
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fdaf 	bl	80086e2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007b84:	bf00      	nop
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b8c:	2000ad08 	.word	0x2000ad08
 8007b90:	2000ad0c 	.word	0x2000ad0c
 8007b94:	2000ad10 	.word	0x2000ad10
 8007b98:	2000acfc 	.word	0x2000acfc
 8007b9c:	2000ad00 	.word	0x2000ad00
 8007ba0:	2000ad04 	.word	0x2000ad04
 8007ba4:	0800b8a9 	.word	0x0800b8a9
 8007ba8:	08008119 	.word	0x08008119
 8007bac:	2000acc8 	.word	0x2000acc8
 8007bb0:	08007bb9 	.word	0x08007bb9
 8007bb4:	08016cb0 	.word	0x08016cb0

08007bb8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007bde:	2320      	movs	r3, #32
 8007be0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007be2:	f3bf 8f4f 	dsb	sy
}
 8007be6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007be8:	e00b      	b.n	8007c02 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007bea:	4a0d      	ldr	r2, [pc, #52]	; (8007c20 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dcf0      	bgt.n	8007bea <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007c08:	f3bf 8f4f 	dsb	sy
}
 8007c0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007c0e:	f3bf 8f6f 	isb	sy
}
 8007c12:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	e000ed00 	.word	0xe000ed00

08007c24 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <HAL_ETH_RxCpltCallback+0x1c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fedf 	bl	80089f4 <osSemaphoreRelease>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000f6a0 	.word	0x2000f6a0

08007c44 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <HAL_ETH_TxCpltCallback+0x1c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fecf 	bl	80089f4 <osSemaphoreRelease>
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000f6a4 	.word	0x2000f6a4

08007c64 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fb fdb5 	bl	80037dc <HAL_ETH_GetDMAError>
 8007c72:	4603      	mov	r3, r0
 8007c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c78:	2b80      	cmp	r3, #128	; 0x80
 8007c7a:	d104      	bne.n	8007c86 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <HAL_ETH_ErrorCallback+0x2c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 feb7 	bl	80089f4 <osSemaphoreRelease>
  }
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	2000f6a0 	.word	0x2000f6a0

08007c94 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007c94:	b5b0      	push	{r4, r5, r7, lr}
 8007c96:	b0b4      	sub	sp, #208	; 0xd0
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t duplex, speed = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int32_t PHYLinkState = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8007cae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007cb2:	2264      	movs	r2, #100	; 0x64
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f00e f87c 	bl	8015db4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007cbc:	4b9b      	ldr	r3, [pc, #620]	; (8007f2c <low_level_init+0x298>)
 8007cbe:	4a9c      	ldr	r2, [pc, #624]	; (8007f30 <low_level_init+0x29c>)
 8007cc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  MACAddr[1] = 0x80;
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  MACAddr[2] = 0xE1;
 8007cce:	23e1      	movs	r3, #225	; 0xe1
 8007cd0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  MACAddr[3] = 0x00;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  MACAddr[4] = 0x00;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  MACAddr[5] = 0x00;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8007ce6:	4a91      	ldr	r2, [pc, #580]	; (8007f2c <low_level_init+0x298>)
 8007ce8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007cec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007cee:	4b8f      	ldr	r3, [pc, #572]	; (8007f2c <low_level_init+0x298>)
 8007cf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007cf4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007cf6:	4b8d      	ldr	r3, [pc, #564]	; (8007f2c <low_level_init+0x298>)
 8007cf8:	4a8e      	ldr	r2, [pc, #568]	; (8007f34 <low_level_init+0x2a0>)
 8007cfa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007cfc:	4b8b      	ldr	r3, [pc, #556]	; (8007f2c <low_level_init+0x298>)
 8007cfe:	4a8e      	ldr	r2, [pc, #568]	; (8007f38 <low_level_init+0x2a4>)
 8007d00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007d02:	4b8a      	ldr	r3, [pc, #552]	; (8007f2c <low_level_init+0x298>)
 8007d04:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007d08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007d0a:	4888      	ldr	r0, [pc, #544]	; (8007f2c <low_level_init+0x298>)
 8007d0c:	f7fa ff28 	bl	8002b60 <HAL_ETH_Init>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007d16:	2238      	movs	r2, #56	; 0x38
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4888      	ldr	r0, [pc, #544]	; (8007f3c <low_level_init+0x2a8>)
 8007d1c:	f00e f84a 	bl	8015db4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007d20:	4b86      	ldr	r3, [pc, #536]	; (8007f3c <low_level_init+0x2a8>)
 8007d22:	2221      	movs	r2, #33	; 0x21
 8007d24:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007d26:	4b85      	ldr	r3, [pc, #532]	; (8007f3c <low_level_init+0x2a8>)
 8007d28:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007d2c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007d2e:	4b83      	ldr	r3, [pc, #524]	; (8007f3c <low_level_init+0x2a8>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007d34:	4882      	ldr	r0, [pc, #520]	; (8007f40 <low_level_init+0x2ac>)
 8007d36:	f004 fa9d 	bl	800c274 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007d42:	4b7a      	ldr	r3, [pc, #488]	; (8007f2c <low_level_init+0x298>)
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	781a      	ldrb	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007d4e:	4b77      	ldr	r3, [pc, #476]	; (8007f2c <low_level_init+0x298>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	785a      	ldrb	r2, [r3, #1]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007d5a:	4b74      	ldr	r3, [pc, #464]	; (8007f2c <low_level_init+0x298>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	789a      	ldrb	r2, [r3, #2]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007d66:	4b71      	ldr	r3, [pc, #452]	; (8007f2c <low_level_init+0x298>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	78da      	ldrb	r2, [r3, #3]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007d72:	4b6e      	ldr	r3, [pc, #440]	; (8007f2c <low_level_init+0x298>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	791a      	ldrb	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007d7e:	4b6b      	ldr	r3, [pc, #428]	; (8007f2c <low_level_init+0x298>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	795a      	ldrb	r2, [r3, #5]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007d90:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d98:	f043 030a 	orr.w	r3, r3, #10
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8007da4:	2300      	movs	r3, #0
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da8:	2300      	movs	r3, #0
 8007daa:	653b      	str	r3, [r7, #80]	; 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8007dac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fd9e 	bl	80088f4 <osSemaphoreCreate>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4a62      	ldr	r2, [pc, #392]	; (8007f44 <low_level_init+0x2b0>)
 8007dbc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8007dc6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fd91 	bl	80088f4 <osSemaphoreCreate>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4a5c      	ldr	r2, [pc, #368]	; (8007f48 <low_level_init+0x2b4>)
 8007dd6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8007dd8:	4b5a      	ldr	r3, [pc, #360]	; (8007f44 <low_level_init+0x2b0>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fdba 	bl	8008958 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8007de4:	4b58      	ldr	r3, [pc, #352]	; (8007f48 <low_level_init+0x2b4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fdb4 	bl	8008958 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007df0:	4b56      	ldr	r3, [pc, #344]	; (8007f4c <low_level_init+0x2b8>)
 8007df2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007df6:	461d      	mov	r5, r3
 8007df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007e04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fc69 	bl	80086e2 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007e10:	494f      	ldr	r1, [pc, #316]	; (8007f50 <low_level_init+0x2bc>)
 8007e12:	4850      	ldr	r0, [pc, #320]	; (8007f54 <low_level_init+0x2c0>)
 8007e14:	f7f9 fff9 	bl	8001e0a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007e18:	484e      	ldr	r0, [pc, #312]	; (8007f54 <low_level_init+0x2c0>)
 8007e1a:	f7fa f828 	bl	8001e6e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007e1e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d165      	bne.n	8007ef2 <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007e26:	484b      	ldr	r0, [pc, #300]	; (8007f54 <low_level_init+0x2c0>)
 8007e28:	f7fa f8c9 	bl	8001fbe <LAN8742_GetLinkState>
 8007e2c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007e30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	dc06      	bgt.n	8007e46 <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f004 fdf5 	bl	800ca28 <netif_set_link_down>
      netif_set_down(netif);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f004 fd8c 	bl	800c95c <netif_set_down>
 8007e44:	e057      	b.n	8007ef6 <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 8007e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e4a:	3b02      	subs	r3, #2
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d82b      	bhi.n	8007ea8 <low_level_init+0x214>
 8007e50:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <low_level_init+0x1c4>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e69 	.word	0x08007e69
 8007e5c:	08007e7b 	.word	0x08007e7b
 8007e60:	08007e8b 	.word	0x08007e8b
 8007e64:	08007e9b 	.word	0x08007e9b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8007e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8007e78:	e01f      	b.n	8007eba <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8007e80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8007e88:	e017      	b.n	8007eba <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007e8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8007e98:	e00f      	b.n	8007eba <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8007ea6:	e008      	b.n	8007eba <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8007ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 8007eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 8007eb8:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007eba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	481a      	ldr	r0, [pc, #104]	; (8007f2c <low_level_init+0x298>)
 8007ec2:	f7fb fb31 	bl	8003528 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eca:	677b      	str	r3, [r7, #116]	; 0x74
    MACConf.Speed = speed;
 8007ecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ed0:	673b      	str	r3, [r7, #112]	; 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4814      	ldr	r0, [pc, #80]	; (8007f2c <low_level_init+0x298>)
 8007eda:	f7fb fc0f 	bl	80036fc <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8007ede:	4813      	ldr	r0, [pc, #76]	; (8007f2c <low_level_init+0x298>)
 8007ee0:	f7fa feba 	bl	8002c58 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f004 fccd 	bl	800c884 <netif_set_up>
    netif_set_link_up(netif);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f004 fd68 	bl	800c9c0 <netif_set_link_up>
 8007ef0:	e001      	b.n	8007ef6 <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 8007ef2:	f7f9 f885 	bl	8001000 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8007ef6:	f7fa f93b 	bl	8002170 <HAL_GetREVID>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f00:	d10f      	bne.n	8007f22 <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <low_level_init+0x2c4>)
 8007f04:	f107 040c 	add.w	r4, r7, #12
 8007f08:	461d      	mov	r5, r3
 8007f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fbe0 	bl	80086e2 <osThreadCreate>
  }
}
 8007f22:	bf00      	nop
 8007f24:	37d0      	adds	r7, #208	; 0xd0
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bdb0      	pop	{r4, r5, r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	2000f6a8 	.word	0x2000f6a8
 8007f30:	40028000 	.word	0x40028000
 8007f34:	20000130 	.word	0x20000130
 8007f38:	20000090 	.word	0x20000090
 8007f3c:	2000f758 	.word	0x2000f758
 8007f40:	08019820 	.word	0x08019820
 8007f44:	2000f6a0 	.word	0x2000f6a0
 8007f48:	2000f6a4 	.word	0x2000f6a4
 8007f4c:	08016cd4 	.word	0x08016cd4
 8007f50:	20000010 	.word	0x20000010
 8007f54:	2000f790 	.word	0x2000f790
 8007f58:	08016d00 	.word	0x08016d00

08007f5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b092      	sub	sp, #72	; 0x48
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007f74:	f107 030c 	add.w	r3, r7, #12
 8007f78:	2230      	movs	r2, #48	; 0x30
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f00d ff19 	bl	8015db4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007f82:	f107 030c 	add.w	r3, r7, #12
 8007f86:	2230      	movs	r2, #48	; 0x30
 8007f88:	2100      	movs	r1, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f00d ff12 	bl	8015db4 <memset>

  for(q = p; q != NULL; q = q->next)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	643b      	str	r3, [r7, #64]	; 0x40
 8007f94:	e045      	b.n	8008022 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d902      	bls.n	8007fa2 <low_level_output+0x46>
      return ERR_IF;
 8007f9c:	f06f 030b 	mvn.w	r3, #11
 8007fa0:	e06c      	b.n	800807c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8007fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa4:	6859      	ldr	r1, [r3, #4]
 8007fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fa8:	4613      	mov	r3, r2
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	3348      	adds	r3, #72	; 0x48
 8007fb2:	443b      	add	r3, r7
 8007fb4:	3b3c      	subs	r3, #60	; 0x3c
 8007fb6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fba:	895b      	ldrh	r3, [r3, #10]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	3348      	adds	r3, #72	; 0x48
 8007fca:	443b      	add	r3, r7
 8007fcc:	3b38      	subs	r3, #56	; 0x38
 8007fce:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d011      	beq.n	8007ffa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd8:	1e5a      	subs	r2, r3, #1
 8007fda:	f107 000c 	add.w	r0, r7, #12
 8007fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	440b      	add	r3, r1
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	18c1      	adds	r1, r0, r3
 8007fea:	4613      	mov	r3, r2
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	3348      	adds	r3, #72	; 0x48
 8007ff4:	443b      	add	r3, r7
 8007ff6:	3b34      	subs	r3, #52	; 0x34
 8007ff8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008004:	4613      	mov	r3, r2
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	3348      	adds	r3, #72	; 0x48
 800800e:	443b      	add	r3, r7
 8008010:	3b34      	subs	r3, #52	; 0x34
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008018:	3301      	adds	r3, #1
 800801a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800801c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	643b      	str	r3, [r7, #64]	; 0x40
 8008022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1b6      	bne.n	8007f96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	891b      	ldrh	r3, [r3, #8]
 800802c:	461a      	mov	r2, r3
 800802e:	4b15      	ldr	r3, [pc, #84]	; (8008084 <low_level_output+0x128>)
 8008030:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008032:	4a14      	ldr	r2, [pc, #80]	; (8008084 <low_level_output+0x128>)
 8008034:	f107 030c 	add.w	r3, r7, #12
 8008038:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800803a:	4a12      	ldr	r2, [pc, #72]	; (8008084 <low_level_output+0x128>)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008040:	6838      	ldr	r0, [r7, #0]
 8008042:	f005 f975 	bl	800d330 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8008046:	490f      	ldr	r1, [pc, #60]	; (8008084 <low_level_output+0x128>)
 8008048:	480f      	ldr	r0, [pc, #60]	; (8008088 <low_level_output+0x12c>)
 800804a:	f7fa ff13 	bl	8002e74 <HAL_ETH_Transmit_IT>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10e      	bne.n	8008072 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008054:	bf00      	nop
 8008056:	4b0d      	ldr	r3, [pc, #52]	; (800808c <low_level_output+0x130>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f04f 31ff 	mov.w	r1, #4294967295
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fc7a 	bl	8008958 <osSemaphoreWait>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f5      	bne.n	8008056 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800806a:	4807      	ldr	r0, [pc, #28]	; (8008088 <low_level_output+0x12c>)
 800806c:	f7fb f896 	bl	800319c <HAL_ETH_ReleaseTxPacket>
 8008070:	e002      	b.n	8008078 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8008072:	6838      	ldr	r0, [r7, #0]
 8008074:	f005 f8b6 	bl	800d1e4 <pbuf_free>
  }

  return errval;
 8008078:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800807c:	4618      	mov	r0, r3
 800807e:	3748      	adds	r7, #72	; 0x48
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	2000f758 	.word	0x2000f758
 8008088:	2000f6a8 	.word	0x2000f6a8
 800808c:	2000f6a4 	.word	0x2000f6a4

08008090 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <low_level_input+0x2c>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d105      	bne.n	80080b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80080a4:	f107 030c 	add.w	r3, r7, #12
 80080a8:	4619      	mov	r1, r3
 80080aa:	4805      	ldr	r0, [pc, #20]	; (80080c0 <low_level_input+0x30>)
 80080ac:	f7fa ff3e 	bl	8002f2c <HAL_ETH_ReadData>
  }

  return p;
 80080b0:	68fb      	ldr	r3, [r7, #12]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	2000f69c 	.word	0x2000f69c
 80080c0:	2000f6a8 	.word	0x2000f6a8

080080c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80080d4:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <ethernetif_input+0x50>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f04f 31ff 	mov.w	r1, #4294967295
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc3b 	bl	8008958 <osSemaphoreWait>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f5      	bne.n	80080d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80080e8:	68b8      	ldr	r0, [r7, #8]
 80080ea:	f7ff ffd1 	bl	8008090 <low_level_input>
 80080ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	4798      	blx	r3
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f005 f86c 	bl	800d1e4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1ea      	bne.n	80080e8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008112:	e7df      	b.n	80080d4 <ethernetif_input+0x10>
 8008114:	2000f6a0 	.word	0x2000f6a0

08008118 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <ethernetif_init+0x1c>
 8008126:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <ethernetif_init+0x48>)
 8008128:	f240 2202 	movw	r2, #514	; 0x202
 800812c:	490d      	ldr	r1, [pc, #52]	; (8008164 <ethernetif_init+0x4c>)
 800812e:	480e      	ldr	r0, [pc, #56]	; (8008168 <ethernetif_init+0x50>)
 8008130:	f00d fcea 	bl	8015b08 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2273      	movs	r2, #115	; 0x73
 8008138:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2274      	movs	r2, #116	; 0x74
 8008140:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <ethernetif_init+0x54>)
 8008148:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a08      	ldr	r2, [pc, #32]	; (8008170 <ethernetif_init+0x58>)
 800814e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fd9f 	bl	8007c94 <low_level_init>

  return ERR_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	08016d1c 	.word	0x08016d1c
 8008164:	08016d38 	.word	0x08016d38
 8008168:	08016d48 	.word	0x08016d48
 800816c:	080138d1 	.word	0x080138d1
 8008170:	08007f5d 	.word	0x08007f5d

08008174 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008180:	68f9      	ldr	r1, [r7, #12]
 8008182:	4809      	ldr	r0, [pc, #36]	; (80081a8 <pbuf_free_custom+0x34>)
 8008184:	f004 f966 	bl	800c454 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008188:	4b08      	ldr	r3, [pc, #32]	; (80081ac <pbuf_free_custom+0x38>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d107      	bne.n	80081a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <pbuf_free_custom+0x38>)
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008196:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <pbuf_free_custom+0x3c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fc2a 	bl	80089f4 <osSemaphoreRelease>
  }
}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	08019820 	.word	0x08019820
 80081ac:	2000f69c 	.word	0x2000f69c
 80081b0:	2000f6a0 	.word	0x2000f6a0

080081b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
uint32_t sys_now(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081b8:	f7f9 ffaa 	bl	8002110 <HAL_GetTick>
 80081bc:	4603      	mov	r3, r0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	; 0x38
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a52      	ldr	r2, [pc, #328]	; (800832c <HAL_ETH_MspInit+0x168>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	f040 809e 	bne.w	8008324 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80081e8:	4b51      	ldr	r3, [pc, #324]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	4a50      	ldr	r2, [pc, #320]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 80081ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081f2:	6313      	str	r3, [r2, #48]	; 0x30
 80081f4:	4b4e      	ldr	r3, [pc, #312]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 80081f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fc:	623b      	str	r3, [r7, #32]
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	4b4b      	ldr	r3, [pc, #300]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008204:	4a4a      	ldr	r2, [pc, #296]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800820a:	6313      	str	r3, [r2, #48]	; 0x30
 800820c:	4b48      	ldr	r3, [pc, #288]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	4b45      	ldr	r3, [pc, #276]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	4a44      	ldr	r2, [pc, #272]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800821e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008222:	6313      	str	r3, [r2, #48]	; 0x30
 8008224:	4b42      	ldr	r3, [pc, #264]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008230:	4b3f      	ldr	r3, [pc, #252]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	4a3e      	ldr	r2, [pc, #248]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6313      	str	r3, [r2, #48]	; 0x30
 800823c:	4b3c      	ldr	r3, [pc, #240]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008248:	4b39      	ldr	r3, [pc, #228]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	4a38      	ldr	r2, [pc, #224]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	6313      	str	r3, [r2, #48]	; 0x30
 8008254:	4b36      	ldr	r3, [pc, #216]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	613b      	str	r3, [r7, #16]
 800825e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008260:	4b33      	ldr	r3, [pc, #204]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	4a32      	ldr	r2, [pc, #200]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	6313      	str	r3, [r2, #48]	; 0x30
 800826c:	4b30      	ldr	r3, [pc, #192]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008278:	4b2d      	ldr	r3, [pc, #180]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	4a2c      	ldr	r2, [pc, #176]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 800827e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008282:	6313      	str	r3, [r2, #48]	; 0x30
 8008284:	4b2a      	ldr	r3, [pc, #168]	; (8008330 <HAL_ETH_MspInit+0x16c>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828c:	60bb      	str	r3, [r7, #8]
 800828e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008290:	2332      	movs	r3, #50	; 0x32
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008294:	2302      	movs	r3, #2
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008298:	2300      	movs	r3, #0
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800829c:	2303      	movs	r3, #3
 800829e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082a0:	230b      	movs	r3, #11
 80082a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082a8:	4619      	mov	r1, r3
 80082aa:	4822      	ldr	r0, [pc, #136]	; (8008334 <HAL_ETH_MspInit+0x170>)
 80082ac:	f7fc f962 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80082b0:	2386      	movs	r3, #134	; 0x86
 80082b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082b4:	2302      	movs	r3, #2
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082bc:	2303      	movs	r3, #3
 80082be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082c0:	230b      	movs	r3, #11
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c8:	4619      	mov	r1, r3
 80082ca:	481b      	ldr	r0, [pc, #108]	; (8008338 <HAL_ETH_MspInit+0x174>)
 80082cc:	f7fc f952 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80082d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d6:	2302      	movs	r3, #2
 80082d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082de:	2303      	movs	r3, #3
 80082e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082e2:	230b      	movs	r3, #11
 80082e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ea:	4619      	mov	r1, r3
 80082ec:	4813      	ldr	r0, [pc, #76]	; (800833c <HAL_ETH_MspInit+0x178>)
 80082ee:	f7fc f941 	bl	8004574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80082f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80082f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f8:	2302      	movs	r3, #2
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fc:	2300      	movs	r3, #0
 80082fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008300:	2303      	movs	r3, #3
 8008302:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008304:	230b      	movs	r3, #11
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800830c:	4619      	mov	r1, r3
 800830e:	480c      	ldr	r0, [pc, #48]	; (8008340 <HAL_ETH_MspInit+0x17c>)
 8008310:	f7fc f930 	bl	8004574 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	2105      	movs	r1, #5
 8008318:	203d      	movs	r0, #61	; 0x3d
 800831a:	f7f9 ffed 	bl	80022f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800831e:	203d      	movs	r0, #61	; 0x3d
 8008320:	f7fa f806 	bl	8002330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008324:	bf00      	nop
 8008326:	3738      	adds	r7, #56	; 0x38
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40028000 	.word	0x40028000
 8008330:	40023800 	.word	0x40023800
 8008334:	40020800 	.word	0x40020800
 8008338:	40020000 	.word	0x40020000
 800833c:	40020400 	.word	0x40020400
 8008340:	40021800 	.word	0x40021800

08008344 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008348:	4802      	ldr	r0, [pc, #8]	; (8008354 <ETH_PHY_IO_Init+0x10>)
 800834a:	f7fb f9f1 	bl	8003730 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	bd80      	pop	{r7, pc}
 8008354:	2000f6a8 	.word	0x2000f6a8

08008358 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  return 0;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	68f9      	ldr	r1, [r7, #12]
 800837a:	4807      	ldr	r0, [pc, #28]	; (8008398 <ETH_PHY_IO_ReadReg+0x30>)
 800837c:	f7fb f840 	bl	8003400 <HAL_ETH_ReadPHYRegister>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	e000      	b.n	800838e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	2000f6a8 	.word	0x2000f6a8

0800839c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	68f9      	ldr	r1, [r7, #12]
 80083ae:	4807      	ldr	r0, [pc, #28]	; (80083cc <ETH_PHY_IO_WriteReg+0x30>)
 80083b0:	f7fb f871 	bl	8003496 <HAL_ETH_WritePHYRegister>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	e000      	b.n	80083c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	2000f6a8 	.word	0x2000f6a8

080083d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083d4:	f7f9 fe9c 	bl	8002110 <HAL_GetTick>
 80083d8:	4603      	mov	r3, r0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b0a0      	sub	sp, #128	; 0x80
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80083e8:	f107 0308 	add.w	r3, r7, #8
 80083ec:	2264      	movs	r2, #100	; 0x64
 80083ee:	2100      	movs	r1, #0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f00d fcdf 	bl	8015db4 <memset>
  int32_t PHYLinkState = 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083fe:	2300      	movs	r3, #0
 8008400:	67bb      	str	r3, [r7, #120]	; 0x78
 8008402:	2300      	movs	r3, #0
 8008404:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800840a:	483a      	ldr	r0, [pc, #232]	; (80084f4 <ethernet_link_thread+0x114>)
 800840c:	f7f9 fdd7 	bl	8001fbe <LAN8742_GetLinkState>
 8008410:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008414:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008418:	089b      	lsrs	r3, r3, #2
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <ethernet_link_thread+0x5e>
 8008424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008426:	2b01      	cmp	r3, #1
 8008428:	dc09      	bgt.n	800843e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800842a:	4833      	ldr	r0, [pc, #204]	; (80084f8 <ethernet_link_thread+0x118>)
 800842c:	f7fa fca2 	bl	8002d74 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008430:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008432:	f004 fa93 	bl	800c95c <netif_set_down>
    netif_set_link_down(netif);
 8008436:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008438:	f004 faf6 	bl	800ca28 <netif_set_link_down>
 800843c:	e055      	b.n	80084ea <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800843e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008440:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d14e      	bne.n	80084ea <ethernet_link_thread+0x10a>
 800844c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800844e:	2b01      	cmp	r3, #1
 8008450:	dd4b      	ble.n	80084ea <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008454:	3b02      	subs	r3, #2
 8008456:	2b03      	cmp	r3, #3
 8008458:	d82a      	bhi.n	80084b0 <ethernet_link_thread+0xd0>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <ethernet_link_thread+0x80>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008471 	.word	0x08008471
 8008464:	08008483 	.word	0x08008483
 8008468:	08008493 	.word	0x08008493
 800846c:	080084a3 	.word	0x080084a3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008474:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800847a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800847c:	2301      	movs	r3, #1
 800847e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008480:	e017      	b.n	80084b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008482:	2300      	movs	r3, #0
 8008484:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800848a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800848c:	2301      	movs	r3, #1
 800848e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008490:	e00f      	b.n	80084b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008496:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008498:	2300      	movs	r3, #0
 800849a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800849c:	2301      	movs	r3, #1
 800849e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80084a0:	e007      	b.n	80084b2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80084a6:	2300      	movs	r3, #0
 80084a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80084aa:	2301      	movs	r3, #1
 80084ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80084ae:	e000      	b.n	80084b2 <ethernet_link_thread+0xd2>
    default:
      break;
 80084b0:	bf00      	nop
    }

    if(linkchanged)
 80084b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d018      	beq.n	80084ea <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4619      	mov	r1, r3
 80084be:	480e      	ldr	r0, [pc, #56]	; (80084f8 <ethernet_link_thread+0x118>)
 80084c0:	f7fb f832 	bl	8003528 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80084c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80084c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ca:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	4619      	mov	r1, r3
 80084d2:	4809      	ldr	r0, [pc, #36]	; (80084f8 <ethernet_link_thread+0x118>)
 80084d4:	f7fb f912 	bl	80036fc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80084d8:	4807      	ldr	r0, [pc, #28]	; (80084f8 <ethernet_link_thread+0x118>)
 80084da:	f7fa fbbd 	bl	8002c58 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80084de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084e0:	f004 f9d0 	bl	800c884 <netif_set_up>
      netif_set_link_up(netif);
 80084e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084e6:	f004 fa6b 	bl	800c9c0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80084ea:	2064      	movs	r0, #100	; 0x64
 80084ec:	f000 f951 	bl	8008792 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80084f0:	e78b      	b.n	800840a <ethernet_link_thread+0x2a>
 80084f2:	bf00      	nop
 80084f4:	2000f790 	.word	0x2000f790
 80084f8:	2000f6a8 	.word	0x2000f6a8

080084fc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af02      	add	r7, sp, #8
 8008502:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008504:	4812      	ldr	r0, [pc, #72]	; (8008550 <HAL_ETH_RxAllocateCallback+0x54>)
 8008506:	f003 ff31 	bl	800c36c <memp_malloc_pool>
 800850a:	60f8      	str	r0, [r7, #12]
  if (p)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d014      	beq.n	800853c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f103 0220 	add.w	r2, r3, #32
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a0d      	ldr	r2, [pc, #52]	; (8008554 <HAL_ETH_RxAllocateCallback+0x58>)
 8008520:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800852a:	9201      	str	r2, [sp, #4]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2241      	movs	r2, #65	; 0x41
 8008532:	2100      	movs	r1, #0
 8008534:	2000      	movs	r0, #0
 8008536:	f004 fc9b 	bl	800ce70 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800853a:	e005      	b.n	8008548 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <HAL_ETH_RxAllocateCallback+0x5c>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	08019820 	.word	0x08019820
 8008554:	08008175 	.word	0x08008175
 8008558:	2000f69c 	.word	0x2000f69c

0800855c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3b20      	subs	r3, #32
 800857a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	2200      	movs	r2, #0
 8008586:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	887a      	ldrh	r2, [r7, #2]
 800858c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e003      	b.n	80085a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	e009      	b.n	80085c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	891a      	ldrh	r2, [r3, #8]
 80085b8:	887b      	ldrh	r3, [r7, #2]
 80085ba:	4413      	add	r3, r2
 80085bc:	b29a      	uxth	r2, r3
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f2      	bne.n	80085b4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fafa 	bl	8007bcc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80085d8:	bf00      	nop
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f004 fdfb 	bl	800d1e4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8008600:	4b15      	ldr	r3, [pc, #84]	; (8008658 <RMII_Thread+0x60>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800860c:	2000      	movs	r0, #0
 800860e:	f000 f8b4 	bl	800877a <osThreadTerminate>
 8008612:	e7f5      	b.n	8008600 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8008614:	4b10      	ldr	r3, [pc, #64]	; (8008658 <RMII_Thread+0x60>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800861c:	2b0a      	cmp	r3, #10
 800861e:	d916      	bls.n	800864e <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 8008620:	4b0e      	ldr	r3, [pc, #56]	; (800865c <RMII_Thread+0x64>)
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	4a0d      	ldr	r2, [pc, #52]	; (800865c <RMII_Thread+0x64>)
 8008626:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800862a:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <RMII_Thread+0x64>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <RMII_Thread+0x64>)
 8008632:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008636:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <RMII_Thread+0x60>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <RMII_Thread+0x60>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0201 	orr.w	r2, r2, #1
 8008648:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800864c:	e7d8      	b.n	8008600 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800864e:	20c8      	movs	r0, #200	; 0xc8
 8008650:	f000 f89f 	bl	8008792 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8008654:	e7d4      	b.n	8008600 <RMII_Thread+0x8>
 8008656:	bf00      	nop
 8008658:	2000f6a8 	.word	0x2000f6a8
 800865c:	40013800 	.word	0x40013800

08008660 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800866e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008672:	2b84      	cmp	r3, #132	; 0x84
 8008674:	d005      	beq.n	8008682 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008676:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	3303      	adds	r3, #3
 8008680:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008682:	68fb      	ldr	r3, [r7, #12]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008696:	f3ef 8305 	mrs	r3, IPSR
 800869a:	607b      	str	r3, [r7, #4]
  return(result);
 800869c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80086b8:	f001 fd5a 	bl	800a170 <vTaskStartScheduler>
  
  return osOK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80086c6:	f7ff ffe3 	bl	8008690 <inHandlerMode>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80086d0:	f001 fe78 	bl	800a3c4 <xTaskGetTickCountFromISR>
 80086d4:	4603      	mov	r3, r0
 80086d6:	e002      	b.n	80086de <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80086d8:	f001 fe64 	bl	800a3a4 <xTaskGetTickCount>
 80086dc:	4603      	mov	r3, r0
  }
}
 80086de:	4618      	mov	r0, r3
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80086e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e4:	b089      	sub	sp, #36	; 0x24
 80086e6:	af04      	add	r7, sp, #16
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d020      	beq.n	8008736 <osThreadCreate+0x54>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01c      	beq.n	8008736 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685c      	ldr	r4, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691e      	ldr	r6, [r3, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff ffa6 	bl	8008660 <makeFreeRtosPriority>
 8008714:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800871e:	9202      	str	r2, [sp, #8]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	9100      	str	r1, [sp, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	4632      	mov	r2, r6
 8008728:	4629      	mov	r1, r5
 800872a:	4620      	mov	r0, r4
 800872c:	f001 faa6 	bl	8009c7c <xTaskCreateStatic>
 8008730:	4603      	mov	r3, r0
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e01c      	b.n	8008770 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685c      	ldr	r4, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008742:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff ff88 	bl	8008660 <makeFreeRtosPriority>
 8008750:	4602      	mov	r2, r0
 8008752:	f107 030c 	add.w	r3, r7, #12
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	9200      	str	r2, [sp, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	4632      	mov	r2, r6
 800875e:	4629      	mov	r1, r5
 8008760:	4620      	mov	r0, r4
 8008762:	f001 faee 	bl	8009d42 <xTaskCreate>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d001      	beq.n	8008770 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	e000      	b.n	8008772 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008770:	68fb      	ldr	r3, [r7, #12]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800877a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fc2c 	bl	8009fe0 <vTaskDelete>
  return osOK;
 8008788:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <osDelay+0x16>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e000      	b.n	80087aa <osDelay+0x18>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fcaa 	bl	800a104 <vTaskDelay>
  
  return osOK;
 80087b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4619      	mov	r1, r3
 80087d0:	2001      	movs	r0, #1
 80087d2:	f000 fc54 	bl	800907e <xQueueCreateMutexStatic>
 80087d6:	4603      	mov	r3, r0
 80087d8:	e003      	b.n	80087e2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80087da:	2001      	movs	r0, #1
 80087dc:	f000 fc37 	bl	800904e <xQueueCreateMutex>
 80087e0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <osMutexWait+0x18>
    return osErrorParameter;
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	e03a      	b.n	800887a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d103      	bne.n	8008818 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008810:	f04f 33ff 	mov.w	r3, #4294967295
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	e009      	b.n	800882c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d006      	beq.n	800882c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <osMutexWait+0x40>
      ticks = 1;
 8008828:	2301      	movs	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800882c:	f7ff ff30 	bl	8008690 <inHandlerMode>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d017      	beq.n	8008866 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	461a      	mov	r2, r3
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 f86e 	bl	8009920 <xQueueReceiveFromISR>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d001      	beq.n	800884e <osMutexWait+0x62>
      return osErrorOS;
 800884a:	23ff      	movs	r3, #255	; 0xff
 800884c:	e015      	b.n	800887a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d011      	beq.n	8008878 <osMutexWait+0x8c>
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <osMutexWait+0x98>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	e008      	b.n	8008878 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 ff45 	bl	80096f8 <xQueueSemaphoreTake>
 800886e:	4603      	mov	r3, r0
 8008870:	2b01      	cmp	r3, #1
 8008872:	d001      	beq.n	8008878 <osMutexWait+0x8c>
    return osErrorOS;
 8008874:	23ff      	movs	r3, #255	; 0xff
 8008876:	e000      	b.n	800887a <osMutexWait+0x8e>
  }
  
  return osOK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	e000ed04 	.word	0xe000ed04

08008888 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008898:	f7ff fefa 	bl	8008690 <inHandlerMode>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d016      	beq.n	80088d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fda9 	bl	8009400 <xQueueGiveFromISR>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d001      	beq.n	80088b8 <osMutexRelease+0x30>
      return osErrorOS;
 80088b4:	23ff      	movs	r3, #255	; 0xff
 80088b6:	e017      	b.n	80088e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d013      	beq.n	80088e6 <osMutexRelease+0x5e>
 80088be:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <osMutexRelease+0x68>)
 80088c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	e00a      	b.n	80088e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80088d0:	2300      	movs	r3, #0
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fbec 	bl	80090b4 <xQueueGenericSend>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d001      	beq.n	80088e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80088e2:	23ff      	movs	r3, #255	; 0xff
 80088e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80088e6:	68fb      	ldr	r3, [r7, #12]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	e000ed04 	.word	0xe000ed04

080088f4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00f      	beq.n	8008926 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d10a      	bne.n	8008922 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2203      	movs	r2, #3
 8008912:	9200      	str	r2, [sp, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	2001      	movs	r0, #1
 800891a:	f000 fa9b 	bl	8008e54 <xQueueGenericCreateStatic>
 800891e:	4603      	mov	r3, r0
 8008920:	e016      	b.n	8008950 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	e014      	b.n	8008950 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d110      	bne.n	800894e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800892c:	2203      	movs	r2, #3
 800892e:	2100      	movs	r1, #0
 8008930:	2001      	movs	r0, #1
 8008932:	f000 fb11 	bl	8008f58 <xQueueGenericCreate>
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <osSemaphoreCreate+0x56>
 800893e:	2300      	movs	r3, #0
 8008940:	2200      	movs	r2, #0
 8008942:	2100      	movs	r1, #0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f000 fbb5 	bl	80090b4 <xQueueGenericSend>
      return sema;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e000      	b.n	8008950 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800894e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008962:	2300      	movs	r3, #0
 8008964:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	e03a      	b.n	80089e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d103      	bne.n	8008984 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800897c:	f04f 33ff 	mov.w	r3, #4294967295
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e009      	b.n	8008998 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d006      	beq.n	8008998 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <osSemaphoreWait+0x40>
      ticks = 1;
 8008994:	2301      	movs	r3, #1
 8008996:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008998:	f7ff fe7a 	bl	8008690 <inHandlerMode>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d017      	beq.n	80089d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	461a      	mov	r2, r3
 80089a8:	2100      	movs	r1, #0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 ffb8 	bl	8009920 <xQueueReceiveFromISR>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d001      	beq.n	80089ba <osSemaphoreWait+0x62>
      return osErrorOS;
 80089b6:	23ff      	movs	r3, #255	; 0xff
 80089b8:	e015      	b.n	80089e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d011      	beq.n	80089e4 <osSemaphoreWait+0x8c>
 80089c0:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <osSemaphoreWait+0x98>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e008      	b.n	80089e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80089d2:	68f9      	ldr	r1, [r7, #12]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fe8f 	bl	80096f8 <xQueueSemaphoreTake>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d001      	beq.n	80089e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80089e0:	23ff      	movs	r3, #255	; 0xff
 80089e2:	e000      	b.n	80089e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008a04:	f7ff fe44 	bl	8008690 <inHandlerMode>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d016      	beq.n	8008a3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008a0e:	f107 0308 	add.w	r3, r7, #8
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fcf3 	bl	8009400 <xQueueGiveFromISR>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d001      	beq.n	8008a24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008a20:	23ff      	movs	r3, #255	; 0xff
 8008a22:	e017      	b.n	8008a54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d013      	beq.n	8008a52 <osSemaphoreRelease+0x5e>
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <osSemaphoreRelease+0x68>)
 8008a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	e00a      	b.n	8008a52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2100      	movs	r1, #0
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fb36 	bl	80090b4 <xQueueGenericSend>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d001      	beq.n	8008a52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008a4e:	23ff      	movs	r3, #255	; 0xff
 8008a50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008a52:	68fb      	ldr	r3, [r7, #12]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	e000ed04 	.word	0xe000ed04

08008a60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d011      	beq.n	8008a96 <osMessageCreate+0x36>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00d      	beq.n	8008a96 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6859      	ldr	r1, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	9400      	str	r4, [sp, #0]
 8008a8e:	f000 f9e1 	bl	8008e54 <xQueueGenericCreateStatic>
 8008a92:	4603      	mov	r3, r0
 8008a94:	e008      	b.n	8008aa8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	f000 fa59 	bl	8008f58 <xQueueGenericCreate>
 8008aa6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd90      	pop	{r4, r7, pc}

08008ab0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <osMessagePut+0x1e>
    ticks = 1;
 8008aca:	2301      	movs	r3, #1
 8008acc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ace:	f7ff fddf 	bl	8008690 <inHandlerMode>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d018      	beq.n	8008b0a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008ad8:	f107 0210 	add.w	r2, r7, #16
 8008adc:	f107 0108 	add.w	r1, r7, #8
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fbec 	bl	80092c0 <xQueueGenericSendFromISR>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d001      	beq.n	8008af2 <osMessagePut+0x42>
      return osErrorOS;
 8008aee:	23ff      	movs	r3, #255	; 0xff
 8008af0:	e018      	b.n	8008b24 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d014      	beq.n	8008b22 <osMessagePut+0x72>
 8008af8:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <osMessagePut+0x7c>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	e00b      	b.n	8008b22 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008b0a:	f107 0108 	add.w	r1, r7, #8
 8008b0e:	2300      	movs	r3, #0
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 face 	bl	80090b4 <xQueueGenericSend>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d001      	beq.n	8008b22 <osMessagePut+0x72>
      return osErrorOS;
 8008b1e:	23ff      	movs	r3, #255	; 0xff
 8008b20:	e000      	b.n	8008b24 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b08b      	sub	sp, #44	; 0x2c
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	617b      	str	r3, [r7, #20]
    return event;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	461c      	mov	r4, r3
 8008b52:	f107 0314 	add.w	r3, r7, #20
 8008b56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b5e:	e054      	b.n	8008c0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008b60:	2300      	movs	r3, #0
 8008b62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d103      	bne.n	8008b78 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008b70:	f04f 33ff 	mov.w	r3, #4294967295
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
 8008b76:	e009      	b.n	8008b8c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d006      	beq.n	8008b8c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <osMessageGet+0x5c>
      ticks = 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008b8c:	f7ff fd80 	bl	8008690 <inHandlerMode>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d01c      	beq.n	8008bd0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008b96:	f107 0220 	add.w	r2, r7, #32
 8008b9a:	f107 0314 	add.w	r3, r7, #20
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	68b8      	ldr	r0, [r7, #8]
 8008ba4:	f000 febc 	bl	8009920 <xQueueReceiveFromISR>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d102      	bne.n	8008bb4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008bae:	2310      	movs	r3, #16
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e001      	b.n	8008bb8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d01d      	beq.n	8008bfa <osMessageGet+0xca>
 8008bbe:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <osMessageGet+0xe4>)
 8008bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	e014      	b.n	8008bfa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008bd0:	f107 0314 	add.w	r3, r7, #20
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd8:	4619      	mov	r1, r3
 8008bda:	68b8      	ldr	r0, [r7, #8]
 8008bdc:	f000 fca6 	bl	800952c <xQueueReceive>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d102      	bne.n	8008bec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008be6:	2310      	movs	r3, #16
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e006      	b.n	8008bfa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <osMessageGet+0xc6>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e000      	b.n	8008bf8 <osMessageGet+0xc8>
 8008bf6:	2340      	movs	r3, #64	; 0x40
 8008bf8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	461c      	mov	r4, r3
 8008bfe:	f107 0314 	add.w	r3, r7, #20
 8008c02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	372c      	adds	r7, #44	; 0x2c
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd90      	pop	{r4, r7, pc}
 8008c12:	bf00      	nop
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f103 0208 	add.w	r2, r3, #8
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 0208 	add.w	r2, r3, #8
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f103 0208 	add.w	r2, r3, #8
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d103      	bne.n	8008cda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e00c      	b.n	8008cf4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e002      	b.n	8008ce8 <vListInsert+0x2e>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d2f6      	bcs.n	8008ce2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6892      	ldr	r2, [r2, #8]
 8008d42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6852      	ldr	r2, [r2, #4]
 8008d4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d103      	bne.n	8008d60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	1e5a      	subs	r2, r3, #1
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10c      	bne.n	8008dae <xQueueGenericReset+0x2e>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	b672      	cpsid	i
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	b662      	cpsie	i
 8008da8:	60bb      	str	r3, [r7, #8]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008dae:	f002 f975 	bl	800b09c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	441a      	add	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	3b01      	subs	r3, #1
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	441a      	add	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	22ff      	movs	r2, #255	; 0xff
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d114      	bne.n	8008e2e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01a      	beq.n	8008e42 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3310      	adds	r3, #16
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 fc2d 	bl	800a670 <xTaskRemoveFromEventList>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d012      	beq.n	8008e42 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	; (8008e50 <xQueueGenericReset+0xd0>)
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	e009      	b.n	8008e42 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3310      	adds	r3, #16
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fef0 	bl	8008c18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3324      	adds	r3, #36	; 0x24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff feeb 	bl	8008c18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e42:	f002 f95f 	bl	800b104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08e      	sub	sp, #56	; 0x38
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10c      	bne.n	8008e82 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	b672      	cpsid	i
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	b662      	cpsie	i
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10c      	bne.n	8008ea2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	b672      	cpsid	i
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	b662      	cpsie	i
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <xQueueGenericCreateStatic+0x5a>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <xQueueGenericCreateStatic+0x5e>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <xQueueGenericCreateStatic+0x60>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	623b      	str	r3, [r7, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <xQueueGenericCreateStatic+0x8a>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <xQueueGenericCreateStatic+0x8e>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericCreateStatic+0x90>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10c      	bne.n	8008f02 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	b672      	cpsid	i
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	b662      	cpsie	i
 8008efc:	61fb      	str	r3, [r7, #28]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f02:	2348      	movs	r3, #72	; 0x48
 8008f04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b48      	cmp	r3, #72	; 0x48
 8008f0a:	d00c      	beq.n	8008f26 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	b672      	cpsid	i
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	b662      	cpsie	i
 8008f20:	61bb      	str	r3, [r7, #24]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00d      	beq.n	8008f4e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f847 	bl	8008fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3730      	adds	r7, #48	; 0x30
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	; 0x28
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10c      	bne.n	8008f86 <xQueueGenericCreate+0x2e>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f70:	b672      	cpsid	i
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	b662      	cpsie	i
 8008f80:	613b      	str	r3, [r7, #16]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d102      	bne.n	8008f92 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	61fb      	str	r3, [r7, #28]
 8008f90:	e004      	b.n	8008f9c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	fb02 f303 	mul.w	r3, r2, r3
 8008f9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	3348      	adds	r3, #72	; 0x48
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 f9a7 	bl	800b2f4 <pvPortMalloc>
 8008fa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d011      	beq.n	8008fd2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	3348      	adds	r3, #72	; 0x48
 8008fb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fc0:	79fa      	ldrb	r2, [r7, #7]
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	68b9      	ldr	r1, [r7, #8]
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f805 	bl	8008fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3720      	adds	r7, #32
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	e002      	b.n	8008ffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800900a:	2101      	movs	r1, #1
 800900c:	69b8      	ldr	r0, [r7, #24]
 800900e:	f7ff feb7 	bl	8008d80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00e      	beq.n	8009046 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800903a:	2300      	movs	r3, #0
 800903c:	2200      	movs	r2, #0
 800903e:	2100      	movs	r1, #0
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f837 	bl	80090b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800904e:	b580      	push	{r7, lr}
 8009050:	b086      	sub	sp, #24
 8009052:	af00      	add	r7, sp, #0
 8009054:	4603      	mov	r3, r0
 8009056:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009058:	2301      	movs	r3, #1
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	461a      	mov	r2, r3
 8009064:	6939      	ldr	r1, [r7, #16]
 8009066:	6978      	ldr	r0, [r7, #20]
 8009068:	f7ff ff76 	bl	8008f58 <xQueueGenericCreate>
 800906c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f7ff ffd3 	bl	800901a <prvInitialiseMutex>

		return xNewQueue;
 8009074:	68fb      	ldr	r3, [r7, #12]
	}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800907e:	b580      	push	{r7, lr}
 8009080:	b088      	sub	sp, #32
 8009082:	af02      	add	r7, sp, #8
 8009084:	4603      	mov	r3, r0
 8009086:	6039      	str	r1, [r7, #0]
 8009088:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800908a:	2301      	movs	r3, #1
 800908c:	617b      	str	r3, [r7, #20]
 800908e:	2300      	movs	r3, #0
 8009090:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	6939      	ldr	r1, [r7, #16]
 800909c:	6978      	ldr	r0, [r7, #20]
 800909e:	f7ff fed9 	bl	8008e54 <xQueueGenericCreateStatic>
 80090a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff ffb8 	bl	800901a <prvInitialiseMutex>

		return xNewQueue;
 80090aa:	68fb      	ldr	r3, [r7, #12]
	}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08e      	sub	sp, #56	; 0x38
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090c2:	2300      	movs	r3, #0
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10c      	bne.n	80090ea <xQueueGenericSend+0x36>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	b672      	cpsid	i
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	b662      	cpsie	i
 80090e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <xQueueGenericSend+0x44>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <xQueueGenericSend+0x48>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <xQueueGenericSend+0x4a>
 80090fc:	2300      	movs	r3, #0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10c      	bne.n	800911c <xQueueGenericSend+0x68>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009106:	b672      	cpsid	i
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	b662      	cpsie	i
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d103      	bne.n	800912a <xQueueGenericSend+0x76>
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <xQueueGenericSend+0x7a>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueGenericSend+0x7c>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10c      	bne.n	800914e <xQueueGenericSend+0x9a>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	b672      	cpsid	i
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	b662      	cpsie	i
 8009148:	623b      	str	r3, [r7, #32]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800914e:	f001 fc57 	bl	800aa00 <xTaskGetSchedulerState>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <xQueueGenericSend+0xaa>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <xQueueGenericSend+0xae>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <xQueueGenericSend+0xb0>
 8009162:	2300      	movs	r3, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <xQueueGenericSend+0xce>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	b672      	cpsid	i
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	b662      	cpsie	i
 800917c:	61fb      	str	r3, [r7, #28]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009182:	f001 ff8b 	bl	800b09c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918e:	429a      	cmp	r2, r3
 8009190:	d302      	bcc.n	8009198 <xQueueGenericSend+0xe4>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d129      	bne.n	80091ec <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800919e:	f000 fc5d 	bl	8009a5c <prvCopyDataToQueue>
 80091a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d010      	beq.n	80091ce <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	3324      	adds	r3, #36	; 0x24
 80091b0:	4618      	mov	r0, r3
 80091b2:	f001 fa5d 	bl	800a670 <xTaskRemoveFromEventList>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d013      	beq.n	80091e4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091bc:	4b3f      	ldr	r3, [pc, #252]	; (80092bc <xQueueGenericSend+0x208>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	e00a      	b.n	80091e4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d007      	beq.n	80091e4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091d4:	4b39      	ldr	r3, [pc, #228]	; (80092bc <xQueueGenericSend+0x208>)
 80091d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091e4:	f001 ff8e 	bl	800b104 <vPortExitCritical>
				return pdPASS;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e063      	b.n	80092b4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091f2:	f001 ff87 	bl	800b104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	e05c      	b.n	80092b4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d106      	bne.n	800920e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009200:	f107 0314 	add.w	r3, r7, #20
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fa97 	bl	800a738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800920a:	2301      	movs	r3, #1
 800920c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800920e:	f001 ff79 	bl	800b104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009212:	f001 f81b 	bl	800a24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009216:	f001 ff41 	bl	800b09c <vPortEnterCritical>
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009220:	b25b      	sxtb	r3, r3
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d103      	bne.n	8009230 <xQueueGenericSend+0x17c>
 8009228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009236:	b25b      	sxtb	r3, r3
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d103      	bne.n	8009246 <xQueueGenericSend+0x192>
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009246:	f001 ff5d 	bl	800b104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800924a:	1d3a      	adds	r2, r7, #4
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	4611      	mov	r1, r2
 8009252:	4618      	mov	r0, r3
 8009254:	f001 fa86 	bl	800a764 <xTaskCheckForTimeOut>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d124      	bne.n	80092a8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800925e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009260:	f000 fcf4 	bl	8009c4c <prvIsQueueFull>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d018      	beq.n	800929c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	3310      	adds	r3, #16
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f001 f9d6 	bl	800a624 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800927a:	f000 fc7f 	bl	8009b7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800927e:	f000 fff3 	bl	800a268 <xTaskResumeAll>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	f47f af7c 	bne.w	8009182 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800928a:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <xQueueGenericSend+0x208>)
 800928c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	e772      	b.n	8009182 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800929c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800929e:	f000 fc6d 	bl	8009b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092a2:	f000 ffe1 	bl	800a268 <xTaskResumeAll>
 80092a6:	e76c      	b.n	8009182 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092aa:	f000 fc67 	bl	8009b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092ae:	f000 ffdb 	bl	800a268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3738      	adds	r7, #56	; 0x38
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	e000ed04 	.word	0xe000ed04

080092c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08e      	sub	sp, #56	; 0x38
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10c      	bne.n	80092f2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d103      	bne.n	8009300 <xQueueGenericSendFromISR+0x40>
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <xQueueGenericSendFromISR+0x44>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <xQueueGenericSendFromISR+0x46>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10c      	bne.n	8009324 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	b672      	cpsid	i
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	b662      	cpsie	i
 800931e:	623b      	str	r3, [r7, #32]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b02      	cmp	r3, #2
 8009328:	d103      	bne.n	8009332 <xQueueGenericSendFromISR+0x72>
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <xQueueGenericSendFromISR+0x76>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueGenericSendFromISR+0x78>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10c      	bne.n	8009356 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	b672      	cpsid	i
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	b662      	cpsie	i
 8009350:	61fb      	str	r3, [r7, #28]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009356:	f001 ff89 	bl	800b26c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800935a:	f3ef 8211 	mrs	r2, BASEPRI
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	b672      	cpsid	i
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	b662      	cpsie	i
 8009372:	61ba      	str	r2, [r7, #24]
 8009374:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009376:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009378:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009382:	429a      	cmp	r2, r3
 8009384:	d302      	bcc.n	800938c <xQueueGenericSendFromISR+0xcc>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d12c      	bne.n	80093e6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800939c:	f000 fb5e 	bl	8009a5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d112      	bne.n	80093d0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d016      	beq.n	80093e0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	3324      	adds	r3, #36	; 0x24
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 f95a 	bl	800a670 <xTaskRemoveFromEventList>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e007      	b.n	80093e0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093d4:	3301      	adds	r3, #1
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	b25a      	sxtb	r2, r3
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093e0:	2301      	movs	r3, #1
 80093e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80093e4:	e001      	b.n	80093ea <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3738      	adds	r7, #56	; 0x38
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08e      	sub	sp, #56	; 0x38
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10c      	bne.n	800942e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	b672      	cpsid	i
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	b662      	cpsie	i
 8009428:	623b      	str	r3, [r7, #32]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00c      	beq.n	8009450 <xQueueGiveFromISR+0x50>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	b672      	cpsid	i
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	b662      	cpsie	i
 800944a:	61fb      	str	r3, [r7, #28]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <xQueueGiveFromISR+0x60>
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <xQueueGiveFromISR+0x64>
 8009460:	2301      	movs	r3, #1
 8009462:	e000      	b.n	8009466 <xQueueGiveFromISR+0x66>
 8009464:	2300      	movs	r3, #0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10c      	bne.n	8009484 <xQueueGiveFromISR+0x84>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	b672      	cpsid	i
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	b662      	cpsie	i
 800947e:	61bb      	str	r3, [r7, #24]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009484:	f001 fef2 	bl	800b26c <vPortValidateInterruptPriority>
	__asm volatile
 8009488:	f3ef 8211 	mrs	r2, BASEPRI
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	b672      	cpsid	i
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	b662      	cpsie	i
 80094a0:	617a      	str	r2, [r7, #20]
 80094a2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80094a4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d22b      	bcs.n	8009510 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d112      	bne.n	80094fa <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d016      	beq.n	800950a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	3324      	adds	r3, #36	; 0x24
 80094e0:	4618      	mov	r0, r3
 80094e2:	f001 f8c5 	bl	800a670 <xTaskRemoveFromEventList>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00e      	beq.n	800950a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00b      	beq.n	800950a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	e007      	b.n	800950a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094fe:	3301      	adds	r3, #1
 8009500:	b2db      	uxtb	r3, r3
 8009502:	b25a      	sxtb	r2, r3
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800950a:	2301      	movs	r3, #1
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
 800950e:	e001      	b.n	8009514 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009510:	2300      	movs	r3, #0
 8009512:	637b      	str	r3, [r7, #52]	; 0x34
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f383 8811 	msr	BASEPRI, r3
}
 800951e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009522:	4618      	mov	r0, r3
 8009524:	3738      	adds	r7, #56	; 0x38
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08c      	sub	sp, #48	; 0x30
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009538:	2300      	movs	r3, #0
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10c      	bne.n	8009560 <xQueueReceive+0x34>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	b672      	cpsid	i
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	b662      	cpsie	i
 800955a:	623b      	str	r3, [r7, #32]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d103      	bne.n	800956e <xQueueReceive+0x42>
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <xQueueReceive+0x46>
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <xQueueReceive+0x48>
 8009572:	2300      	movs	r3, #0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10c      	bne.n	8009592 <xQueueReceive+0x66>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	b672      	cpsid	i
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	b662      	cpsie	i
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009592:	f001 fa35 	bl	800aa00 <xTaskGetSchedulerState>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d102      	bne.n	80095a2 <xQueueReceive+0x76>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <xQueueReceive+0x7a>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <xQueueReceive+0x7c>
 80095a6:	2300      	movs	r3, #0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10c      	bne.n	80095c6 <xQueueReceive+0x9a>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	b672      	cpsid	i
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	b662      	cpsie	i
 80095c0:	61bb      	str	r3, [r7, #24]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095c6:	f001 fd69 	bl	800b09c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01f      	beq.n	8009616 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095da:	f000 faa9 	bl	8009b30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	1e5a      	subs	r2, r3, #1
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00f      	beq.n	800960e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	3310      	adds	r3, #16
 80095f2:	4618      	mov	r0, r3
 80095f4:	f001 f83c 	bl	800a670 <xTaskRemoveFromEventList>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095fe:	4b3d      	ldr	r3, [pc, #244]	; (80096f4 <xQueueReceive+0x1c8>)
 8009600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800960e:	f001 fd79 	bl	800b104 <vPortExitCritical>
				return pdPASS;
 8009612:	2301      	movs	r3, #1
 8009614:	e069      	b.n	80096ea <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800961c:	f001 fd72 	bl	800b104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009620:	2300      	movs	r3, #0
 8009622:	e062      	b.n	80096ea <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800962a:	f107 0310 	add.w	r3, r7, #16
 800962e:	4618      	mov	r0, r3
 8009630:	f001 f882 	bl	800a738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009638:	f001 fd64 	bl	800b104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800963c:	f000 fe06 	bl	800a24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009640:	f001 fd2c 	bl	800b09c <vPortEnterCritical>
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800964a:	b25b      	sxtb	r3, r3
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d103      	bne.n	800965a <xQueueReceive+0x12e>
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009660:	b25b      	sxtb	r3, r3
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d103      	bne.n	8009670 <xQueueReceive+0x144>
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009670:	f001 fd48 	bl	800b104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009674:	1d3a      	adds	r2, r7, #4
 8009676:	f107 0310 	add.w	r3, r7, #16
 800967a:	4611      	mov	r1, r2
 800967c:	4618      	mov	r0, r3
 800967e:	f001 f871 	bl	800a764 <xTaskCheckForTimeOut>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d123      	bne.n	80096d0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968a:	f000 fac9 	bl	8009c20 <prvIsQueueEmpty>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d017      	beq.n	80096c4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	3324      	adds	r3, #36	; 0x24
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f000 ffc1 	bl	800a624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a4:	f000 fa6a 	bl	8009b7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096a8:	f000 fdde 	bl	800a268 <xTaskResumeAll>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d189      	bne.n	80095c6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80096b2:	4b10      	ldr	r3, [pc, #64]	; (80096f4 <xQueueReceive+0x1c8>)
 80096b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	e780      	b.n	80095c6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c6:	f000 fa59 	bl	8009b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096ca:	f000 fdcd 	bl	800a268 <xTaskResumeAll>
 80096ce:	e77a      	b.n	80095c6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d2:	f000 fa53 	bl	8009b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096d6:	f000 fdc7 	bl	800a268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096dc:	f000 faa0 	bl	8009c20 <prvIsQueueEmpty>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f43f af6f 	beq.w	80095c6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3730      	adds	r7, #48	; 0x30
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08e      	sub	sp, #56	; 0x38
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800970a:	2300      	movs	r3, #0
 800970c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10c      	bne.n	800972e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	b672      	cpsid	i
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	b662      	cpsie	i
 8009728:	623b      	str	r3, [r7, #32]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00c      	beq.n	8009750 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	b672      	cpsid	i
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	b662      	cpsie	i
 800974a:	61fb      	str	r3, [r7, #28]
}
 800974c:	bf00      	nop
 800974e:	e7fe      	b.n	800974e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009750:	f001 f956 	bl	800aa00 <xTaskGetSchedulerState>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d102      	bne.n	8009760 <xQueueSemaphoreTake+0x68>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <xQueueSemaphoreTake+0x6c>
 8009760:	2301      	movs	r3, #1
 8009762:	e000      	b.n	8009766 <xQueueSemaphoreTake+0x6e>
 8009764:	2300      	movs	r3, #0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10c      	bne.n	8009784 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	b672      	cpsid	i
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	b662      	cpsie	i
 800977e:	61bb      	str	r3, [r7, #24]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009784:	f001 fc8a 	bl	800b09c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	2b00      	cmp	r3, #0
 8009792:	d024      	beq.n	80097de <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	1e5a      	subs	r2, r3, #1
 8009798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800979c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d104      	bne.n	80097ae <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80097a4:	f001 faf2 	bl	800ad8c <pvTaskIncrementMutexHeldCount>
 80097a8:	4602      	mov	r2, r0
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	3310      	adds	r3, #16
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 ff58 	bl	800a670 <xTaskRemoveFromEventList>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097c6:	4b55      	ldr	r3, [pc, #340]	; (800991c <xQueueSemaphoreTake+0x224>)
 80097c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097d6:	f001 fc95 	bl	800b104 <vPortExitCritical>
				return pdPASS;
 80097da:	2301      	movs	r3, #1
 80097dc:	e099      	b.n	8009912 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d113      	bne.n	800980c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	b672      	cpsid	i
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	b662      	cpsie	i
 80097fe:	617b      	str	r3, [r7, #20]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009804:	f001 fc7e 	bl	800b104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009808:	2300      	movs	r3, #0
 800980a:	e082      	b.n	8009912 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800980c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980e:	2b00      	cmp	r3, #0
 8009810:	d106      	bne.n	8009820 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	4618      	mov	r0, r3
 8009818:	f000 ff8e 	bl	800a738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800981c:	2301      	movs	r3, #1
 800981e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009820:	f001 fc70 	bl	800b104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009824:	f000 fd12 	bl	800a24c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009828:	f001 fc38 	bl	800b09c <vPortEnterCritical>
 800982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009832:	b25b      	sxtb	r3, r3
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d103      	bne.n	8009842 <xQueueSemaphoreTake+0x14a>
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009848:	b25b      	sxtb	r3, r3
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d103      	bne.n	8009858 <xQueueSemaphoreTake+0x160>
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009858:	f001 fc54 	bl	800b104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800985c:	463a      	mov	r2, r7
 800985e:	f107 030c 	add.w	r3, r7, #12
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f000 ff7d 	bl	800a764 <xTaskCheckForTimeOut>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d132      	bne.n	80098d6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009872:	f000 f9d5 	bl	8009c20 <prvIsQueueEmpty>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d026      	beq.n	80098ca <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d109      	bne.n	8009898 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009884:	f001 fc0a 	bl	800b09c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	4618      	mov	r0, r3
 800988e:	f001 f8d5 	bl	800aa3c <xTaskPriorityInherit>
 8009892:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009894:	f001 fc36 	bl	800b104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	3324      	adds	r3, #36	; 0x24
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	4611      	mov	r1, r2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 febf 	bl	800a624 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098a8:	f000 f968 	bl	8009b7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098ac:	f000 fcdc 	bl	800a268 <xTaskResumeAll>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f47f af66 	bne.w	8009784 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80098b8:	4b18      	ldr	r3, [pc, #96]	; (800991c <xQueueSemaphoreTake+0x224>)
 80098ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	e75c      	b.n	8009784 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098cc:	f000 f956 	bl	8009b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098d0:	f000 fcca 	bl	800a268 <xTaskResumeAll>
 80098d4:	e756      	b.n	8009784 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098d8:	f000 f950 	bl	8009b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098dc:	f000 fcc4 	bl	800a268 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e2:	f000 f99d 	bl	8009c20 <prvIsQueueEmpty>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f43f af4b 	beq.w	8009784 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00d      	beq.n	8009910 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80098f4:	f001 fbd2 	bl	800b09c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80098f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098fa:	f000 f897 	bl	8009a2c <prvGetDisinheritPriorityAfterTimeout>
 80098fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009906:	4618      	mov	r0, r3
 8009908:	f001 f9a2 	bl	800ac50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800990c:	f001 fbfa 	bl	800b104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009910:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009912:	4618      	mov	r0, r3
 8009914:	3738      	adds	r7, #56	; 0x38
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08e      	sub	sp, #56	; 0x38
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10c      	bne.n	8009950 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993a:	b672      	cpsid	i
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	b662      	cpsie	i
 800994a:	623b      	str	r3, [r7, #32]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d103      	bne.n	800995e <xQueueReceiveFromISR+0x3e>
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <xQueueReceiveFromISR+0x42>
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <xQueueReceiveFromISR+0x44>
 8009962:	2300      	movs	r3, #0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10c      	bne.n	8009982 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996c:	b672      	cpsid	i
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	b662      	cpsie	i
 800997c:	61fb      	str	r3, [r7, #28]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009982:	f001 fc73 	bl	800b26c <vPortValidateInterruptPriority>
	__asm volatile
 8009986:	f3ef 8211 	mrs	r2, BASEPRI
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	b672      	cpsid	i
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	b662      	cpsie	i
 800999e:	61ba      	str	r2, [r7, #24]
 80099a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80099a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d02f      	beq.n	8009a12 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099bc:	68b9      	ldr	r1, [r7, #8]
 80099be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099c0:	f000 f8b6 	bl	8009b30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	1e5a      	subs	r2, r3, #1
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80099cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d4:	d112      	bne.n	80099fc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d016      	beq.n	8009a0c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	3310      	adds	r3, #16
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fe44 	bl	800a670 <xTaskRemoveFromEventList>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00e      	beq.n	8009a0c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	e007      	b.n	8009a0c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a00:	3301      	adds	r3, #1
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	b25a      	sxtb	r2, r3
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a10:	e001      	b.n	8009a16 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	637b      	str	r3, [r7, #52]	; 0x34
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f383 8811 	msr	BASEPRI, r3
}
 8009a20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3738      	adds	r7, #56	; 0x38
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d006      	beq.n	8009a4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f1c3 0307 	rsb	r3, r3, #7
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	e001      	b.n	8009a4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
	}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10d      	bne.n	8009a96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d14d      	bne.n	8009b1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f001 f858 	bl	800ab3c <xTaskPriorityDisinherit>
 8009a8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	609a      	str	r2, [r3, #8]
 8009a94:	e043      	b.n	8009b1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d119      	bne.n	8009ad0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6858      	ldr	r0, [r3, #4]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	f00c fa55 	bl	8015f56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d32b      	bcc.n	8009b1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	605a      	str	r2, [r3, #4]
 8009ace:	e026      	b.n	8009b1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	68d8      	ldr	r0, [r3, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	f00c fa3b 	bl	8015f56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	425b      	negs	r3, r3
 8009aea:	441a      	add	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d207      	bcs.n	8009b0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b04:	425b      	negs	r3, r3
 8009b06:	441a      	add	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d105      	bne.n	8009b1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b26:	697b      	ldr	r3, [r7, #20]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d018      	beq.n	8009b74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	441a      	add	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d303      	bcc.n	8009b64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68d9      	ldr	r1, [r3, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	6838      	ldr	r0, [r7, #0]
 8009b70:	f00c f9f1 	bl	8015f56 <memcpy>
	}
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b84:	f001 fa8a 	bl	800b09c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b90:	e011      	b.n	8009bb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d012      	beq.n	8009bc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3324      	adds	r3, #36	; 0x24
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fd66 	bl	800a670 <xTaskRemoveFromEventList>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009baa:	f000 fe41 	bl	800a830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dce9      	bgt.n	8009b92 <prvUnlockQueue+0x16>
 8009bbe:	e000      	b.n	8009bc2 <prvUnlockQueue+0x46>
					break;
 8009bc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	22ff      	movs	r2, #255	; 0xff
 8009bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bca:	f001 fa9b 	bl	800b104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bce:	f001 fa65 	bl	800b09c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bda:	e011      	b.n	8009c00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d012      	beq.n	8009c0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3310      	adds	r3, #16
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fd41 	bl	800a670 <xTaskRemoveFromEventList>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bf4:	f000 fe1c 	bl	800a830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dce9      	bgt.n	8009bdc <prvUnlockQueue+0x60>
 8009c08:	e000      	b.n	8009c0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	22ff      	movs	r2, #255	; 0xff
 8009c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c14:	f001 fa76 	bl	800b104 <vPortExitCritical>
}
 8009c18:	bf00      	nop
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c28:	f001 fa38 	bl	800b09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c34:	2301      	movs	r3, #1
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	e001      	b.n	8009c3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c3e:	f001 fa61 	bl	800b104 <vPortExitCritical>

	return xReturn;
 8009c42:	68fb      	ldr	r3, [r7, #12]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c54:	f001 fa22 	bl	800b09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d102      	bne.n	8009c6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c64:	2301      	movs	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	e001      	b.n	8009c6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c6e:	f001 fa49 	bl	800b104 <vPortExitCritical>

	return xReturn;
 8009c72:	68fb      	ldr	r3, [r7, #12]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af04      	add	r7, sp, #16
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10c      	bne.n	8009caa <xTaskCreateStatic+0x2e>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	b672      	cpsid	i
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	b662      	cpsie	i
 8009ca4:	623b      	str	r3, [r7, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10c      	bne.n	8009cca <xTaskCreateStatic+0x4e>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	b672      	cpsid	i
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	b662      	cpsie	i
 8009cc4:	61fb      	str	r3, [r7, #28]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cca:	23a0      	movs	r3, #160	; 0xa0
 8009ccc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2ba0      	cmp	r3, #160	; 0xa0
 8009cd2:	d00c      	beq.n	8009cee <xTaskCreateStatic+0x72>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	b672      	cpsid	i
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	b662      	cpsie	i
 8009ce8:	61bb      	str	r3, [r7, #24]
}
 8009cea:	bf00      	nop
 8009cec:	e7fe      	b.n	8009cec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d01e      	beq.n	8009d34 <xTaskCreateStatic+0xb8>
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01b      	beq.n	8009d34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	2202      	movs	r2, #2
 8009d0a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	9302      	str	r3, [sp, #8]
 8009d16:	f107 0314 	add.w	r3, r7, #20
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f850 	bl	8009dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d2e:	f000 f8ed 	bl	8009f0c <prvAddNewTaskToReadyList>
 8009d32:	e001      	b.n	8009d38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d38:	697b      	ldr	r3, [r7, #20]
	}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3728      	adds	r7, #40	; 0x28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b08c      	sub	sp, #48	; 0x30
 8009d46:	af04      	add	r7, sp, #16
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 facc 	bl	800b2f4 <pvPortMalloc>
 8009d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00e      	beq.n	8009d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d64:	20a0      	movs	r0, #160	; 0xa0
 8009d66:	f001 fac5 	bl	800b2f4 <pvPortMalloc>
 8009d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30
 8009d78:	e005      	b.n	8009d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d7a:	6978      	ldr	r0, [r7, #20]
 8009d7c:	f001 fb84 	bl	800b488 <vPortFree>
 8009d80:	e001      	b.n	8009d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d017      	beq.n	8009dbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d94:	88fa      	ldrh	r2, [r7, #6]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 f80e 	bl	8009dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009db0:	69f8      	ldr	r0, [r7, #28]
 8009db2:	f000 f8ab 	bl	8009f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009db6:	2301      	movs	r3, #1
 8009db8:	61bb      	str	r3, [r7, #24]
 8009dba:	e002      	b.n	8009dc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009de4:	440b      	add	r3, r1
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f023 0307 	bic.w	r3, r3, #7
 8009df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00c      	beq.n	8009e18 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	b672      	cpsid	i
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	b662      	cpsie	i
 8009e12:	617b      	str	r3, [r7, #20]
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01f      	beq.n	8009e5e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	e012      	b.n	8009e4a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	7819      	ldrb	r1, [r3, #0]
 8009e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	4413      	add	r3, r2
 8009e32:	3334      	adds	r3, #52	; 0x34
 8009e34:	460a      	mov	r2, r1
 8009e36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	3301      	adds	r3, #1
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	2b0f      	cmp	r3, #15
 8009e4e:	d9e9      	bls.n	8009e24 <prvInitialiseNewTask+0x58>
 8009e50:	e000      	b.n	8009e54 <prvInitialiseNewTask+0x88>
			{
				break;
 8009e52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e5c:	e003      	b.n	8009e66 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	2b06      	cmp	r3, #6
 8009e6a:	d901      	bls.n	8009e70 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e6c:	2306      	movs	r3, #6
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	2200      	movs	r2, #0
 8009e80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	3304      	adds	r3, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fee6 	bl	8008c58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	3318      	adds	r3, #24
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fe fee1 	bl	8008c58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	f1c3 0207 	rsb	r2, r3, #7
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	334c      	adds	r3, #76	; 0x4c
 8009ec0:	224c      	movs	r2, #76	; 0x4c
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f00b ff75 	bl	8015db4 <memset>
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	4a0c      	ldr	r2, [pc, #48]	; (8009f00 <prvInitialiseNewTask+0x134>)
 8009ece:	651a      	str	r2, [r3, #80]	; 0x50
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	4a0c      	ldr	r2, [pc, #48]	; (8009f04 <prvInitialiseNewTask+0x138>)
 8009ed4:	655a      	str	r2, [r3, #84]	; 0x54
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	4a0b      	ldr	r2, [pc, #44]	; (8009f08 <prvInitialiseNewTask+0x13c>)
 8009eda:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	68f9      	ldr	r1, [r7, #12]
 8009ee0:	69b8      	ldr	r0, [r7, #24]
 8009ee2:	f000 ffcd 	bl	800ae80 <pxPortInitialiseStack>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef8:	bf00      	nop
 8009efa:	3720      	adds	r7, #32
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	200451c0 	.word	0x200451c0
 8009f04:	20045228 	.word	0x20045228
 8009f08:	20045290 	.word	0x20045290

08009f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f14:	f001 f8c2 	bl	800b09c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f18:	4b2a      	ldr	r3, [pc, #168]	; (8009fc4 <prvAddNewTaskToReadyList+0xb8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	4a29      	ldr	r2, [pc, #164]	; (8009fc4 <prvAddNewTaskToReadyList+0xb8>)
 8009f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f22:	4b29      	ldr	r3, [pc, #164]	; (8009fc8 <prvAddNewTaskToReadyList+0xbc>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f2a:	4a27      	ldr	r2, [pc, #156]	; (8009fc8 <prvAddNewTaskToReadyList+0xbc>)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f30:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <prvAddNewTaskToReadyList+0xb8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d110      	bne.n	8009f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f38:	f000 fc9e 	bl	800a878 <prvInitialiseTaskLists>
 8009f3c:	e00d      	b.n	8009f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f3e:	4b23      	ldr	r3, [pc, #140]	; (8009fcc <prvAddNewTaskToReadyList+0xc0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d109      	bne.n	8009f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f46:	4b20      	ldr	r3, [pc, #128]	; (8009fc8 <prvAddNewTaskToReadyList+0xbc>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d802      	bhi.n	8009f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f54:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <prvAddNewTaskToReadyList+0xbc>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	; (8009fd0 <prvAddNewTaskToReadyList+0xc4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	4a1b      	ldr	r2, [pc, #108]	; (8009fd0 <prvAddNewTaskToReadyList+0xc4>)
 8009f62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	2201      	movs	r2, #1
 8009f6a:	409a      	lsls	r2, r3
 8009f6c:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <prvAddNewTaskToReadyList+0xc8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	4a18      	ldr	r2, [pc, #96]	; (8009fd4 <prvAddNewTaskToReadyList+0xc8>)
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4a15      	ldr	r2, [pc, #84]	; (8009fd8 <prvAddNewTaskToReadyList+0xcc>)
 8009f84:	441a      	add	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fe fe70 	bl	8008c72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f92:	f001 f8b7 	bl	800b104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f96:	4b0d      	ldr	r3, [pc, #52]	; (8009fcc <prvAddNewTaskToReadyList+0xc0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00e      	beq.n	8009fbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f9e:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <prvAddNewTaskToReadyList+0xbc>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d207      	bcs.n	8009fbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fac:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <prvAddNewTaskToReadyList+0xd0>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fbc:	bf00      	nop
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	2000f8b0 	.word	0x2000f8b0
 8009fc8:	2000f7b0 	.word	0x2000f7b0
 8009fcc:	2000f8bc 	.word	0x2000f8bc
 8009fd0:	2000f8cc 	.word	0x2000f8cc
 8009fd4:	2000f8b8 	.word	0x2000f8b8
 8009fd8:	2000f7b4 	.word	0x2000f7b4
 8009fdc:	e000ed04 	.word	0xe000ed04

08009fe0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009fe8:	f001 f858 	bl	800b09c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <vTaskDelete+0x18>
 8009ff2:	4b3a      	ldr	r3, [pc, #232]	; (800a0dc <vTaskDelete+0xfc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	e000      	b.n	8009ffa <vTaskDelete+0x1a>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe fe93 	bl	8008d2c <uxListRemove>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d115      	bne.n	800a038 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a010:	4933      	ldr	r1, [pc, #204]	; (800a0e0 <vTaskDelete+0x100>)
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <vTaskDelete+0x58>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	2201      	movs	r2, #1
 800a028:	fa02 f303 	lsl.w	r3, r2, r3
 800a02c:	43da      	mvns	r2, r3
 800a02e:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <vTaskDelete+0x104>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4013      	ands	r3, r2
 800a034:	4a2b      	ldr	r2, [pc, #172]	; (800a0e4 <vTaskDelete+0x104>)
 800a036:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3318      	adds	r3, #24
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fe71 	bl	8008d2c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a04a:	4b27      	ldr	r3, [pc, #156]	; (800a0e8 <vTaskDelete+0x108>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3301      	adds	r3, #1
 800a050:	4a25      	ldr	r2, [pc, #148]	; (800a0e8 <vTaskDelete+0x108>)
 800a052:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a054:	4b21      	ldr	r3, [pc, #132]	; (800a0dc <vTaskDelete+0xfc>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d10b      	bne.n	800a076 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3304      	adds	r3, #4
 800a062:	4619      	mov	r1, r3
 800a064:	4821      	ldr	r0, [pc, #132]	; (800a0ec <vTaskDelete+0x10c>)
 800a066:	f7fe fe04 	bl	8008c72 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a06a:	4b21      	ldr	r3, [pc, #132]	; (800a0f0 <vTaskDelete+0x110>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3301      	adds	r3, #1
 800a070:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <vTaskDelete+0x110>)
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	e009      	b.n	800a08a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a076:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <vTaskDelete+0x114>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	4a1d      	ldr	r2, [pc, #116]	; (800a0f4 <vTaskDelete+0x114>)
 800a07e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fc67 	bl	800a954 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a086:	f000 fc9b 	bl	800a9c0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800a08a:	f001 f83b 	bl	800b104 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a08e:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <vTaskDelete+0x118>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d01d      	beq.n	800a0d2 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800a096:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <vTaskDelete+0xfc>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d118      	bne.n	800a0d2 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a0a0:	4b16      	ldr	r3, [pc, #88]	; (800a0fc <vTaskDelete+0x11c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00c      	beq.n	800a0c2 <vTaskDelete+0xe2>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	b672      	cpsid	i
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	b662      	cpsie	i
 800a0bc:	60bb      	str	r3, [r7, #8]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	; (800a100 <vTaskDelete+0x120>)
 800a0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	2000f7b0 	.word	0x2000f7b0
 800a0e0:	2000f7b4 	.word	0x2000f7b4
 800a0e4:	2000f8b8 	.word	0x2000f8b8
 800a0e8:	2000f8cc 	.word	0x2000f8cc
 800a0ec:	2000f884 	.word	0x2000f884
 800a0f0:	2000f898 	.word	0x2000f898
 800a0f4:	2000f8b0 	.word	0x2000f8b0
 800a0f8:	2000f8bc 	.word	0x2000f8bc
 800a0fc:	2000f8d8 	.word	0x2000f8d8
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d019      	beq.n	800a14a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a116:	4b14      	ldr	r3, [pc, #80]	; (800a168 <vTaskDelay+0x64>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00c      	beq.n	800a138 <vTaskDelay+0x34>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	b672      	cpsid	i
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	b662      	cpsie	i
 800a132:	60bb      	str	r3, [r7, #8]
}
 800a134:	bf00      	nop
 800a136:	e7fe      	b.n	800a136 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a138:	f000 f888 	bl	800a24c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fe38 	bl	800adb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a144:	f000 f890 	bl	800a268 <xTaskResumeAll>
 800a148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d107      	bne.n	800a160 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <vTaskDelay+0x68>)
 800a152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a160:	bf00      	nop
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	2000f8d8 	.word	0x2000f8d8
 800a16c:	e000ed04 	.word	0xe000ed04

0800a170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	; 0x28
 800a174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a17e:	463a      	mov	r2, r7
 800a180:	1d39      	adds	r1, r7, #4
 800a182:	f107 0308 	add.w	r3, r7, #8
 800a186:	4618      	mov	r0, r3
 800a188:	f7f6 fafe 	bl	8000788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	9202      	str	r2, [sp, #8]
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	2300      	movs	r3, #0
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	2300      	movs	r3, #0
 800a19c:	460a      	mov	r2, r1
 800a19e:	4923      	ldr	r1, [pc, #140]	; (800a22c <vTaskStartScheduler+0xbc>)
 800a1a0:	4823      	ldr	r0, [pc, #140]	; (800a230 <vTaskStartScheduler+0xc0>)
 800a1a2:	f7ff fd6b 	bl	8009c7c <xTaskCreateStatic>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4a22      	ldr	r2, [pc, #136]	; (800a234 <vTaskStartScheduler+0xc4>)
 800a1aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1ac:	4b21      	ldr	r3, [pc, #132]	; (800a234 <vTaskStartScheduler+0xc4>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	e001      	b.n	800a1be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d11d      	bne.n	800a200 <vTaskStartScheduler+0x90>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	b672      	cpsid	i
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	b662      	cpsie	i
 800a1d8:	613b      	str	r3, [r7, #16]
}
 800a1da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1dc:	4b16      	ldr	r3, [pc, #88]	; (800a238 <vTaskStartScheduler+0xc8>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	334c      	adds	r3, #76	; 0x4c
 800a1e2:	4a16      	ldr	r2, [pc, #88]	; (800a23c <vTaskStartScheduler+0xcc>)
 800a1e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1e6:	4b16      	ldr	r3, [pc, #88]	; (800a240 <vTaskStartScheduler+0xd0>)
 800a1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1ee:	4b15      	ldr	r3, [pc, #84]	; (800a244 <vTaskStartScheduler+0xd4>)
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1f4:	4b14      	ldr	r3, [pc, #80]	; (800a248 <vTaskStartScheduler+0xd8>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1fa:	f000 fed1 	bl	800afa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1fe:	e010      	b.n	800a222 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a206:	d10c      	bne.n	800a222 <vTaskStartScheduler+0xb2>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	b672      	cpsid	i
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	b662      	cpsie	i
 800a21c:	60fb      	str	r3, [r7, #12]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <vTaskStartScheduler+0xb0>
}
 800a222:	bf00      	nop
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	08016d70 	.word	0x08016d70
 800a230:	0800a849 	.word	0x0800a849
 800a234:	2000f8d4 	.word	0x2000f8d4
 800a238:	2000f7b0 	.word	0x2000f7b0
 800a23c:	2000008c 	.word	0x2000008c
 800a240:	2000f8d0 	.word	0x2000f8d0
 800a244:	2000f8bc 	.word	0x2000f8bc
 800a248:	2000f8b4 	.word	0x2000f8b4

0800a24c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a250:	4b04      	ldr	r3, [pc, #16]	; (800a264 <vTaskSuspendAll+0x18>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3301      	adds	r3, #1
 800a256:	4a03      	ldr	r2, [pc, #12]	; (800a264 <vTaskSuspendAll+0x18>)
 800a258:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a25a:	bf00      	nop
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	2000f8d8 	.word	0x2000f8d8

0800a268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a272:	2300      	movs	r3, #0
 800a274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a276:	4b42      	ldr	r3, [pc, #264]	; (800a380 <xTaskResumeAll+0x118>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10c      	bne.n	800a298 <xTaskResumeAll+0x30>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	b672      	cpsid	i
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	b662      	cpsie	i
 800a292:	603b      	str	r3, [r7, #0]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a298:	f000 ff00 	bl	800b09c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a29c:	4b38      	ldr	r3, [pc, #224]	; (800a380 <xTaskResumeAll+0x118>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	4a37      	ldr	r2, [pc, #220]	; (800a380 <xTaskResumeAll+0x118>)
 800a2a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2a6:	4b36      	ldr	r3, [pc, #216]	; (800a380 <xTaskResumeAll+0x118>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d161      	bne.n	800a372 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2ae:	4b35      	ldr	r3, [pc, #212]	; (800a384 <xTaskResumeAll+0x11c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d05d      	beq.n	800a372 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2b6:	e02e      	b.n	800a316 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b8:	4b33      	ldr	r3, [pc, #204]	; (800a388 <xTaskResumeAll+0x120>)
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3318      	adds	r3, #24
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe fd31 	bl	8008d2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fd2c 	bl	8008d2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	2201      	movs	r2, #1
 800a2da:	409a      	lsls	r2, r3
 800a2dc:	4b2b      	ldr	r3, [pc, #172]	; (800a38c <xTaskResumeAll+0x124>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	4a2a      	ldr	r2, [pc, #168]	; (800a38c <xTaskResumeAll+0x124>)
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4a27      	ldr	r2, [pc, #156]	; (800a390 <xTaskResumeAll+0x128>)
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	f7fe fcb8 	bl	8008c72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a306:	4b23      	ldr	r3, [pc, #140]	; (800a394 <xTaskResumeAll+0x12c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a310:	4b21      	ldr	r3, [pc, #132]	; (800a398 <xTaskResumeAll+0x130>)
 800a312:	2201      	movs	r2, #1
 800a314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a316:	4b1c      	ldr	r3, [pc, #112]	; (800a388 <xTaskResumeAll+0x120>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1cc      	bne.n	800a2b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a324:	f000 fb4c 	bl	800a9c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a328:	4b1c      	ldr	r3, [pc, #112]	; (800a39c <xTaskResumeAll+0x134>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d010      	beq.n	800a356 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a334:	f000 f858 	bl	800a3e8 <xTaskIncrementTick>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a33e:	4b16      	ldr	r3, [pc, #88]	; (800a398 <xTaskResumeAll+0x130>)
 800a340:	2201      	movs	r2, #1
 800a342:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3b01      	subs	r3, #1
 800a348:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1f1      	bne.n	800a334 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a350:	4b12      	ldr	r3, [pc, #72]	; (800a39c <xTaskResumeAll+0x134>)
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <xTaskResumeAll+0x130>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d009      	beq.n	800a372 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a35e:	2301      	movs	r3, #1
 800a360:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a362:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <xTaskResumeAll+0x138>)
 800a364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a372:	f000 fec7 	bl	800b104 <vPortExitCritical>

	return xAlreadyYielded;
 800a376:	68bb      	ldr	r3, [r7, #8]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	2000f8d8 	.word	0x2000f8d8
 800a384:	2000f8b0 	.word	0x2000f8b0
 800a388:	2000f870 	.word	0x2000f870
 800a38c:	2000f8b8 	.word	0x2000f8b8
 800a390:	2000f7b4 	.word	0x2000f7b4
 800a394:	2000f7b0 	.word	0x2000f7b0
 800a398:	2000f8c4 	.word	0x2000f8c4
 800a39c:	2000f8c0 	.word	0x2000f8c0
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <xTaskGetTickCount+0x1c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3b0:	687b      	ldr	r3, [r7, #4]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	2000f8b4 	.word	0x2000f8b4

0800a3c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ca:	f000 ff4f 	bl	800b26c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <xTaskGetTickCountFromISR+0x20>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3d8:	683b      	ldr	r3, [r7, #0]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000f8b4 	.word	0x2000f8b4

0800a3e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3f2:	4b4f      	ldr	r3, [pc, #316]	; (800a530 <xTaskIncrementTick+0x148>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f040 808a 	bne.w	800a510 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3fc:	4b4d      	ldr	r3, [pc, #308]	; (800a534 <xTaskIncrementTick+0x14c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3301      	adds	r3, #1
 800a402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a404:	4a4b      	ldr	r2, [pc, #300]	; (800a534 <xTaskIncrementTick+0x14c>)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d122      	bne.n	800a456 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a410:	4b49      	ldr	r3, [pc, #292]	; (800a538 <xTaskIncrementTick+0x150>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00c      	beq.n	800a434 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	b672      	cpsid	i
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	b662      	cpsie	i
 800a42e:	603b      	str	r3, [r7, #0]
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <xTaskIncrementTick+0x4a>
 800a434:	4b40      	ldr	r3, [pc, #256]	; (800a538 <xTaskIncrementTick+0x150>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	4b40      	ldr	r3, [pc, #256]	; (800a53c <xTaskIncrementTick+0x154>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a3e      	ldr	r2, [pc, #248]	; (800a538 <xTaskIncrementTick+0x150>)
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4a3e      	ldr	r2, [pc, #248]	; (800a53c <xTaskIncrementTick+0x154>)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	4b3d      	ldr	r3, [pc, #244]	; (800a540 <xTaskIncrementTick+0x158>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3301      	adds	r3, #1
 800a44e:	4a3c      	ldr	r2, [pc, #240]	; (800a540 <xTaskIncrementTick+0x158>)
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	f000 fab5 	bl	800a9c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a456:	4b3b      	ldr	r3, [pc, #236]	; (800a544 <xTaskIncrementTick+0x15c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d348      	bcc.n	800a4f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a460:	4b35      	ldr	r3, [pc, #212]	; (800a538 <xTaskIncrementTick+0x150>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d104      	bne.n	800a474 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a46a:	4b36      	ldr	r3, [pc, #216]	; (800a544 <xTaskIncrementTick+0x15c>)
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295
 800a470:	601a      	str	r2, [r3, #0]
					break;
 800a472:	e03e      	b.n	800a4f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a474:	4b30      	ldr	r3, [pc, #192]	; (800a538 <xTaskIncrementTick+0x150>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d203      	bcs.n	800a494 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a48c:	4a2d      	ldr	r2, [pc, #180]	; (800a544 <xTaskIncrementTick+0x15c>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a492:	e02e      	b.n	800a4f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	3304      	adds	r3, #4
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fc47 	bl	8008d2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d004      	beq.n	800a4b0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3318      	adds	r3, #24
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fc3e 	bl	8008d2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	409a      	lsls	r2, r3
 800a4b8:	4b23      	ldr	r3, [pc, #140]	; (800a548 <xTaskIncrementTick+0x160>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	4a22      	ldr	r2, [pc, #136]	; (800a548 <xTaskIncrementTick+0x160>)
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4a1f      	ldr	r2, [pc, #124]	; (800a54c <xTaskIncrementTick+0x164>)
 800a4d0:	441a      	add	r2, r3
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	4610      	mov	r0, r2
 800a4da:	f7fe fbca 	bl	8008c72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e2:	4b1b      	ldr	r3, [pc, #108]	; (800a550 <xTaskIncrementTick+0x168>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d3b9      	bcc.n	800a460 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4f0:	e7b6      	b.n	800a460 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4f2:	4b17      	ldr	r3, [pc, #92]	; (800a550 <xTaskIncrementTick+0x168>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	4914      	ldr	r1, [pc, #80]	; (800a54c <xTaskIncrementTick+0x164>)
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	440b      	add	r3, r1
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d907      	bls.n	800a51a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e004      	b.n	800a51a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a510:	4b10      	ldr	r3, [pc, #64]	; (800a554 <xTaskIncrementTick+0x16c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3301      	adds	r3, #1
 800a516:	4a0f      	ldr	r2, [pc, #60]	; (800a554 <xTaskIncrementTick+0x16c>)
 800a518:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a51a:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <xTaskIncrementTick+0x170>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800a522:	2301      	movs	r3, #1
 800a524:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a526:	697b      	ldr	r3, [r7, #20]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2000f8d8 	.word	0x2000f8d8
 800a534:	2000f8b4 	.word	0x2000f8b4
 800a538:	2000f868 	.word	0x2000f868
 800a53c:	2000f86c 	.word	0x2000f86c
 800a540:	2000f8c8 	.word	0x2000f8c8
 800a544:	2000f8d0 	.word	0x2000f8d0
 800a548:	2000f8b8 	.word	0x2000f8b8
 800a54c:	2000f7b4 	.word	0x2000f7b4
 800a550:	2000f7b0 	.word	0x2000f7b0
 800a554:	2000f8c0 	.word	0x2000f8c0
 800a558:	2000f8c4 	.word	0x2000f8c4

0800a55c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a562:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <vTaskSwitchContext+0xb0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a56a:	4b29      	ldr	r3, [pc, #164]	; (800a610 <vTaskSwitchContext+0xb4>)
 800a56c:	2201      	movs	r2, #1
 800a56e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a570:	e046      	b.n	800a600 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a572:	4b27      	ldr	r3, [pc, #156]	; (800a610 <vTaskSwitchContext+0xb4>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a578:	4b26      	ldr	r3, [pc, #152]	; (800a614 <vTaskSwitchContext+0xb8>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	fab3 f383 	clz	r3, r3
 800a584:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	f1c3 031f 	rsb	r3, r3, #31
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	4922      	ldr	r1, [pc, #136]	; (800a618 <vTaskSwitchContext+0xbc>)
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	4613      	mov	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	440b      	add	r3, r1
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10c      	bne.n	800a5bc <vTaskSwitchContext+0x60>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	b672      	cpsid	i
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	b662      	cpsie	i
 800a5b6:	607b      	str	r3, [r7, #4]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vTaskSwitchContext+0x5e>
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4a14      	ldr	r2, [pc, #80]	; (800a618 <vTaskSwitchContext+0xbc>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	605a      	str	r2, [r3, #4]
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3308      	adds	r3, #8
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d104      	bne.n	800a5ec <vTaskSwitchContext+0x90>
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	605a      	str	r2, [r3, #4]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <vTaskSwitchContext+0xc0>)
 800a5f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5f6:	4b09      	ldr	r3, [pc, #36]	; (800a61c <vTaskSwitchContext+0xc0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	334c      	adds	r3, #76	; 0x4c
 800a5fc:	4a08      	ldr	r2, [pc, #32]	; (800a620 <vTaskSwitchContext+0xc4>)
 800a5fe:	6013      	str	r3, [r2, #0]
}
 800a600:	bf00      	nop
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	2000f8d8 	.word	0x2000f8d8
 800a610:	2000f8c4 	.word	0x2000f8c4
 800a614:	2000f8b8 	.word	0x2000f8b8
 800a618:	2000f7b4 	.word	0x2000f7b4
 800a61c:	2000f7b0 	.word	0x2000f7b0
 800a620:	2000008c 	.word	0x2000008c

0800a624 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10c      	bne.n	800a64e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	b672      	cpsid	i
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	b662      	cpsie	i
 800a648:	60fb      	str	r3, [r7, #12]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a64e:	4b07      	ldr	r3, [pc, #28]	; (800a66c <vTaskPlaceOnEventList+0x48>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3318      	adds	r3, #24
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7fe fb2f 	bl	8008cba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a65c:	2101      	movs	r1, #1
 800a65e:	6838      	ldr	r0, [r7, #0]
 800a660:	f000 fba8 	bl	800adb4 <prvAddCurrentTaskToDelayedList>
}
 800a664:	bf00      	nop
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	2000f7b0 	.word	0x2000f7b0

0800a670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b086      	sub	sp, #24
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10c      	bne.n	800a6a0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	b672      	cpsid	i
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	b662      	cpsie	i
 800a69a:	60fb      	str	r3, [r7, #12]
}
 800a69c:	bf00      	nop
 800a69e:	e7fe      	b.n	800a69e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	3318      	adds	r3, #24
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fb41 	bl	8008d2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6aa:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <xTaskRemoveFromEventList+0xb0>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d11c      	bne.n	800a6ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe fb38 	bl	8008d2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	409a      	lsls	r2, r3
 800a6c4:	4b17      	ldr	r3, [pc, #92]	; (800a724 <xTaskRemoveFromEventList+0xb4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	4a16      	ldr	r2, [pc, #88]	; (800a724 <xTaskRemoveFromEventList+0xb4>)
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4a13      	ldr	r2, [pc, #76]	; (800a728 <xTaskRemoveFromEventList+0xb8>)
 800a6dc:	441a      	add	r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7fe fac4 	bl	8008c72 <vListInsertEnd>
 800a6ea:	e005      	b.n	800a6f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	3318      	adds	r3, #24
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	480e      	ldr	r0, [pc, #56]	; (800a72c <xTaskRemoveFromEventList+0xbc>)
 800a6f4:	f7fe fabd 	bl	8008c72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <xTaskRemoveFromEventList+0xc0>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	429a      	cmp	r2, r3
 800a704:	d905      	bls.n	800a712 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a706:	2301      	movs	r3, #1
 800a708:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a70a:	4b0a      	ldr	r3, [pc, #40]	; (800a734 <xTaskRemoveFromEventList+0xc4>)
 800a70c:	2201      	movs	r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e001      	b.n	800a716 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a716:	697b      	ldr	r3, [r7, #20]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	2000f8d8 	.word	0x2000f8d8
 800a724:	2000f8b8 	.word	0x2000f8b8
 800a728:	2000f7b4 	.word	0x2000f7b4
 800a72c:	2000f870 	.word	0x2000f870
 800a730:	2000f7b0 	.word	0x2000f7b0
 800a734:	2000f8c4 	.word	0x2000f8c4

0800a738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a740:	4b06      	ldr	r3, [pc, #24]	; (800a75c <vTaskInternalSetTimeOutState+0x24>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <vTaskInternalSetTimeOutState+0x28>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	605a      	str	r2, [r3, #4]
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	2000f8c8 	.word	0x2000f8c8
 800a760:	2000f8b4 	.word	0x2000f8b4

0800a764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10c      	bne.n	800a78e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	b672      	cpsid	i
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	b662      	cpsie	i
 800a788:	613b      	str	r3, [r7, #16]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10c      	bne.n	800a7ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	b672      	cpsid	i
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	b662      	cpsie	i
 800a7a8:	60fb      	str	r3, [r7, #12]
}
 800a7aa:	bf00      	nop
 800a7ac:	e7fe      	b.n	800a7ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a7ae:	f000 fc75 	bl	800b09c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7b2:	4b1d      	ldr	r3, [pc, #116]	; (800a828 <xTaskCheckForTimeOut+0xc4>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ca:	d102      	bne.n	800a7d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	61fb      	str	r3, [r7, #28]
 800a7d0:	e023      	b.n	800a81a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	4b15      	ldr	r3, [pc, #84]	; (800a82c <xTaskCheckForTimeOut+0xc8>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d007      	beq.n	800a7ee <xTaskCheckForTimeOut+0x8a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	69ba      	ldr	r2, [r7, #24]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d302      	bcc.n	800a7ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	61fb      	str	r3, [r7, #28]
 800a7ec:	e015      	b.n	800a81a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d20b      	bcs.n	800a810 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	1ad2      	subs	r2, r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff ff97 	bl	800a738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]
 800a80e:	e004      	b.n	800a81a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a816:	2301      	movs	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a81a:	f000 fc73 	bl	800b104 <vPortExitCritical>

	return xReturn;
 800a81e:	69fb      	ldr	r3, [r7, #28]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	2000f8b4 	.word	0x2000f8b4
 800a82c:	2000f8c8 	.word	0x2000f8c8

0800a830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a830:	b480      	push	{r7}
 800a832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a834:	4b03      	ldr	r3, [pc, #12]	; (800a844 <vTaskMissedYield+0x14>)
 800a836:	2201      	movs	r2, #1
 800a838:	601a      	str	r2, [r3, #0]
}
 800a83a:	bf00      	nop
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	2000f8c4 	.word	0x2000f8c4

0800a848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a850:	f000 f852 	bl	800a8f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a854:	4b06      	ldr	r3, [pc, #24]	; (800a870 <prvIdleTask+0x28>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d9f9      	bls.n	800a850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <prvIdleTask+0x2c>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a86c:	e7f0      	b.n	800a850 <prvIdleTask+0x8>
 800a86e:	bf00      	nop
 800a870:	2000f7b4 	.word	0x2000f7b4
 800a874:	e000ed04 	.word	0xe000ed04

0800a878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a87e:	2300      	movs	r3, #0
 800a880:	607b      	str	r3, [r7, #4]
 800a882:	e00c      	b.n	800a89e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	4613      	mov	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4a12      	ldr	r2, [pc, #72]	; (800a8d8 <prvInitialiseTaskLists+0x60>)
 800a890:	4413      	add	r3, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe f9c0 	bl	8008c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3301      	adds	r3, #1
 800a89c:	607b      	str	r3, [r7, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b06      	cmp	r3, #6
 800a8a2:	d9ef      	bls.n	800a884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8a4:	480d      	ldr	r0, [pc, #52]	; (800a8dc <prvInitialiseTaskLists+0x64>)
 800a8a6:	f7fe f9b7 	bl	8008c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8aa:	480d      	ldr	r0, [pc, #52]	; (800a8e0 <prvInitialiseTaskLists+0x68>)
 800a8ac:	f7fe f9b4 	bl	8008c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8b0:	480c      	ldr	r0, [pc, #48]	; (800a8e4 <prvInitialiseTaskLists+0x6c>)
 800a8b2:	f7fe f9b1 	bl	8008c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8b6:	480c      	ldr	r0, [pc, #48]	; (800a8e8 <prvInitialiseTaskLists+0x70>)
 800a8b8:	f7fe f9ae 	bl	8008c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8bc:	480b      	ldr	r0, [pc, #44]	; (800a8ec <prvInitialiseTaskLists+0x74>)
 800a8be:	f7fe f9ab 	bl	8008c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8c2:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <prvInitialiseTaskLists+0x78>)
 800a8c4:	4a05      	ldr	r2, [pc, #20]	; (800a8dc <prvInitialiseTaskLists+0x64>)
 800a8c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <prvInitialiseTaskLists+0x7c>)
 800a8ca:	4a05      	ldr	r2, [pc, #20]	; (800a8e0 <prvInitialiseTaskLists+0x68>)
 800a8cc:	601a      	str	r2, [r3, #0]
}
 800a8ce:	bf00      	nop
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	2000f7b4 	.word	0x2000f7b4
 800a8dc:	2000f840 	.word	0x2000f840
 800a8e0:	2000f854 	.word	0x2000f854
 800a8e4:	2000f870 	.word	0x2000f870
 800a8e8:	2000f884 	.word	0x2000f884
 800a8ec:	2000f89c 	.word	0x2000f89c
 800a8f0:	2000f868 	.word	0x2000f868
 800a8f4:	2000f86c 	.word	0x2000f86c

0800a8f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8fe:	e019      	b.n	800a934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a900:	f000 fbcc 	bl	800b09c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a904:	4b10      	ldr	r3, [pc, #64]	; (800a948 <prvCheckTasksWaitingTermination+0x50>)
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3304      	adds	r3, #4
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe fa0b 	bl	8008d2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a916:	4b0d      	ldr	r3, [pc, #52]	; (800a94c <prvCheckTasksWaitingTermination+0x54>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	4a0b      	ldr	r2, [pc, #44]	; (800a94c <prvCheckTasksWaitingTermination+0x54>)
 800a91e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a920:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <prvCheckTasksWaitingTermination+0x58>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3b01      	subs	r3, #1
 800a926:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <prvCheckTasksWaitingTermination+0x58>)
 800a928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a92a:	f000 fbeb 	bl	800b104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f810 	bl	800a954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <prvCheckTasksWaitingTermination+0x58>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1e1      	bne.n	800a900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	2000f884 	.word	0x2000f884
 800a94c:	2000f8b0 	.word	0x2000f8b0
 800a950:	2000f898 	.word	0x2000f898

0800a954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	334c      	adds	r3, #76	; 0x4c
 800a960:	4618      	mov	r0, r3
 800a962:	f00b fa3f 	bl	8015de4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d108      	bne.n	800a982 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fd87 	bl	800b488 <vPortFree>
				vPortFree( pxTCB );
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 fd84 	bl	800b488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a980:	e01a      	b.n	800a9b8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d103      	bne.n	800a994 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fd7b 	bl	800b488 <vPortFree>
	}
 800a992:	e011      	b.n	800a9b8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d00c      	beq.n	800a9b8 <prvDeleteTCB+0x64>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	b672      	cpsid	i
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	b662      	cpsie	i
 800a9b2:	60fb      	str	r3, [r7, #12]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <prvDeleteTCB+0x62>
	}
 800a9b8:	bf00      	nop
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <prvResetNextTaskUnblockTime+0x38>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d104      	bne.n	800a9da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <prvResetNextTaskUnblockTime+0x3c>)
 800a9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9d8:	e008      	b.n	800a9ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9da:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <prvResetNextTaskUnblockTime+0x38>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	4a04      	ldr	r2, [pc, #16]	; (800a9fc <prvResetNextTaskUnblockTime+0x3c>)
 800a9ea:	6013      	str	r3, [r2, #0]
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	2000f868 	.word	0x2000f868
 800a9fc:	2000f8d0 	.word	0x2000f8d0

0800aa00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa06:	4b0b      	ldr	r3, [pc, #44]	; (800aa34 <xTaskGetSchedulerState+0x34>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	e008      	b.n	800aa26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa14:	4b08      	ldr	r3, [pc, #32]	; (800aa38 <xTaskGetSchedulerState+0x38>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	e001      	b.n	800aa26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa22:	2300      	movs	r3, #0
 800aa24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa26:	687b      	ldr	r3, [r7, #4]
	}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	2000f8bc 	.word	0x2000f8bc
 800aa38:	2000f8d8 	.word	0x2000f8d8

0800aa3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d069      	beq.n	800ab26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa56:	4b36      	ldr	r3, [pc, #216]	; (800ab30 <xTaskPriorityInherit+0xf4>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d259      	bcs.n	800ab14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	db06      	blt.n	800aa76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa68:	4b31      	ldr	r3, [pc, #196]	; (800ab30 <xTaskPriorityInherit+0xf4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6e:	f1c3 0207 	rsb	r2, r3, #7
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	6959      	ldr	r1, [r3, #20]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4a2b      	ldr	r2, [pc, #172]	; (800ab34 <xTaskPriorityInherit+0xf8>)
 800aa88:	4413      	add	r3, r2
 800aa8a:	4299      	cmp	r1, r3
 800aa8c:	d13a      	bne.n	800ab04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	3304      	adds	r3, #4
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe f94a 	bl	8008d2c <uxListRemove>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d115      	bne.n	800aaca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	4924      	ldr	r1, [pc, #144]	; (800ab34 <xTaskPriorityInherit+0xf8>)
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xTaskPriorityInherit+0x8e>
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	2201      	movs	r2, #1
 800aaba:	fa02 f303 	lsl.w	r3, r2, r3
 800aabe:	43da      	mvns	r2, r3
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <xTaskPriorityInherit+0xfc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4013      	ands	r3, r2
 800aac6:	4a1c      	ldr	r2, [pc, #112]	; (800ab38 <xTaskPriorityInherit+0xfc>)
 800aac8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aaca:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <xTaskPriorityInherit+0xf4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	2201      	movs	r2, #1
 800aada:	409a      	lsls	r2, r3
 800aadc:	4b16      	ldr	r3, [pc, #88]	; (800ab38 <xTaskPriorityInherit+0xfc>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	4a15      	ldr	r2, [pc, #84]	; (800ab38 <xTaskPriorityInherit+0xfc>)
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaea:	4613      	mov	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4a10      	ldr	r2, [pc, #64]	; (800ab34 <xTaskPriorityInherit+0xf8>)
 800aaf4:	441a      	add	r2, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	3304      	adds	r3, #4
 800aafa:	4619      	mov	r1, r3
 800aafc:	4610      	mov	r0, r2
 800aafe:	f7fe f8b8 	bl	8008c72 <vListInsertEnd>
 800ab02:	e004      	b.n	800ab0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab04:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <xTaskPriorityInherit+0xf4>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	e008      	b.n	800ab26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <xTaskPriorityInherit+0xf4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d201      	bcs.n	800ab26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab22:	2301      	movs	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab26:	68fb      	ldr	r3, [r7, #12]
	}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	2000f7b0 	.word	0x2000f7b0
 800ab34:	2000f7b4 	.word	0x2000f7b4
 800ab38:	2000f8b8 	.word	0x2000f8b8

0800ab3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d072      	beq.n	800ac38 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab52:	4b3c      	ldr	r3, [pc, #240]	; (800ac44 <xTaskPriorityDisinherit+0x108>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d00c      	beq.n	800ab76 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	b672      	cpsid	i
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	b662      	cpsie	i
 800ab70:	60fb      	str	r3, [r7, #12]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10c      	bne.n	800ab98 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	b672      	cpsid	i
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	b662      	cpsie	i
 800ab92:	60bb      	str	r3, [r7, #8]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abaa:	429a      	cmp	r2, r3
 800abac:	d044      	beq.n	800ac38 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d140      	bne.n	800ac38 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3304      	adds	r3, #4
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe f8b6 	bl	8008d2c <uxListRemove>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d115      	bne.n	800abf2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abca:	491f      	ldr	r1, [pc, #124]	; (800ac48 <xTaskPriorityDisinherit+0x10c>)
 800abcc:	4613      	mov	r3, r2
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	440b      	add	r3, r1
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xTaskPriorityDisinherit+0xb6>
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	2201      	movs	r2, #1
 800abe2:	fa02 f303 	lsl.w	r3, r2, r3
 800abe6:	43da      	mvns	r2, r3
 800abe8:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <xTaskPriorityDisinherit+0x110>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4013      	ands	r3, r2
 800abee:	4a17      	ldr	r2, [pc, #92]	; (800ac4c <xTaskPriorityDisinherit+0x110>)
 800abf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfe:	f1c3 0207 	rsb	r2, r3, #7
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	409a      	lsls	r2, r3
 800ac0e:	4b0f      	ldr	r3, [pc, #60]	; (800ac4c <xTaskPriorityDisinherit+0x110>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	4a0d      	ldr	r2, [pc, #52]	; (800ac4c <xTaskPriorityDisinherit+0x110>)
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <xTaskPriorityDisinherit+0x10c>)
 800ac26:	441a      	add	r2, r3
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7fe f81f 	bl	8008c72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac34:	2301      	movs	r3, #1
 800ac36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac38:	697b      	ldr	r3, [r7, #20]
	}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	2000f7b0 	.word	0x2000f7b0
 800ac48:	2000f7b4 	.word	0x2000f7b4
 800ac4c:	2000f8b8 	.word	0x2000f8b8

0800ac50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8087 	beq.w	800ad78 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10c      	bne.n	800ac8c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	b672      	cpsid	i
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	b662      	cpsie	i
 800ac86:	60fb      	str	r3, [r7, #12]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d902      	bls.n	800ac9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	61fb      	str	r3, [r7, #28]
 800ac9a:	e002      	b.n	800aca2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d065      	beq.n	800ad78 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d160      	bne.n	800ad78 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acb6:	4b32      	ldr	r3, [pc, #200]	; (800ad80 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69ba      	ldr	r2, [r7, #24]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d10c      	bne.n	800acda <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	b672      	cpsid	i
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	b662      	cpsie	i
 800acd4:	60bb      	str	r3, [r7, #8]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	69fa      	ldr	r2, [r7, #28]
 800ace4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	db04      	blt.n	800acf8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	f1c3 0207 	rsb	r2, r3, #7
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	6959      	ldr	r1, [r3, #20]
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4a1f      	ldr	r2, [pc, #124]	; (800ad84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ad08:	4413      	add	r3, r2
 800ad0a:	4299      	cmp	r1, r3
 800ad0c:	d134      	bne.n	800ad78 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	3304      	adds	r3, #4
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe f80a 	bl	8008d2c <uxListRemove>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d115      	bne.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad22:	4918      	ldr	r1, [pc, #96]	; (800ad84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	440b      	add	r3, r1
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10a      	bne.n	800ad4a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	2201      	movs	r2, #1
 800ad3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3e:	43da      	mvns	r2, r3
 800ad40:	4b11      	ldr	r3, [pc, #68]	; (800ad88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4013      	ands	r3, r2
 800ad46:	4a10      	ldr	r2, [pc, #64]	; (800ad88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ad48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4e:	2201      	movs	r2, #1
 800ad50:	409a      	lsls	r2, r3
 800ad52:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	4a0b      	ldr	r2, [pc, #44]	; (800ad88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad60:	4613      	mov	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4a06      	ldr	r2, [pc, #24]	; (800ad84 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ad6a:	441a      	add	r2, r3
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f7fd ff7d 	bl	8008c72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad78:	bf00      	nop
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	2000f7b0 	.word	0x2000f7b0
 800ad84:	2000f7b4 	.word	0x2000f7b4
 800ad88:	2000f8b8 	.word	0x2000f8b8

0800ad8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad98:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad9e:	3201      	adds	r2, #1
 800ada0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ada2:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ada4:	681b      	ldr	r3, [r3, #0]
	}
 800ada6:	4618      	mov	r0, r3
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	2000f7b0 	.word	0x2000f7b0

0800adb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adbe:	4b29      	ldr	r3, [pc, #164]	; (800ae64 <prvAddCurrentTaskToDelayedList+0xb0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adc4:	4b28      	ldr	r3, [pc, #160]	; (800ae68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	3304      	adds	r3, #4
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fd ffae 	bl	8008d2c <uxListRemove>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10b      	bne.n	800adee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800add6:	4b24      	ldr	r3, [pc, #144]	; (800ae68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	2201      	movs	r2, #1
 800adde:	fa02 f303 	lsl.w	r3, r2, r3
 800ade2:	43da      	mvns	r2, r3
 800ade4:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4013      	ands	r3, r2
 800adea:	4a20      	ldr	r2, [pc, #128]	; (800ae6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800adec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d10a      	bne.n	800ae0c <prvAddCurrentTaskToDelayedList+0x58>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d007      	beq.n	800ae0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adfc:	4b1a      	ldr	r3, [pc, #104]	; (800ae68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3304      	adds	r3, #4
 800ae02:	4619      	mov	r1, r3
 800ae04:	481a      	ldr	r0, [pc, #104]	; (800ae70 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae06:	f7fd ff34 	bl	8008c72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae0a:	e026      	b.n	800ae5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4413      	add	r3, r2
 800ae12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae14:	4b14      	ldr	r3, [pc, #80]	; (800ae68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d209      	bcs.n	800ae38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b0f      	ldr	r3, [pc, #60]	; (800ae68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f7fd ff42 	bl	8008cba <vListInsert>
}
 800ae36:	e010      	b.n	800ae5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae38:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3304      	adds	r3, #4
 800ae42:	4619      	mov	r1, r3
 800ae44:	4610      	mov	r0, r2
 800ae46:	f7fd ff38 	bl	8008cba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae4a:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d202      	bcs.n	800ae5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae54:	4a09      	ldr	r2, [pc, #36]	; (800ae7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	6013      	str	r3, [r2, #0]
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	2000f8b4 	.word	0x2000f8b4
 800ae68:	2000f7b0 	.word	0x2000f7b0
 800ae6c:	2000f8b8 	.word	0x2000f8b8
 800ae70:	2000f89c 	.word	0x2000f89c
 800ae74:	2000f86c 	.word	0x2000f86c
 800ae78:	2000f868 	.word	0x2000f868
 800ae7c:	2000f8d0 	.word	0x2000f8d0

0800ae80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3b04      	subs	r3, #4
 800ae90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3b04      	subs	r3, #4
 800ae9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f023 0201 	bic.w	r2, r3, #1
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3b04      	subs	r3, #4
 800aeae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aeb0:	4a0c      	ldr	r2, [pc, #48]	; (800aee4 <pxPortInitialiseStack+0x64>)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b14      	subs	r3, #20
 800aeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3b04      	subs	r3, #4
 800aec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f06f 0202 	mvn.w	r2, #2
 800aece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3b20      	subs	r3, #32
 800aed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aed6:	68fb      	ldr	r3, [r7, #12]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr
 800aee4:	0800aee9 	.word	0x0800aee9

0800aee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aef2:	4b14      	ldr	r3, [pc, #80]	; (800af44 <prvTaskExitError+0x5c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d00c      	beq.n	800af16 <prvTaskExitError+0x2e>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	b672      	cpsid	i
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	b662      	cpsie	i
 800af10:	60fb      	str	r3, [r7, #12]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <prvTaskExitError+0x2c>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	b672      	cpsid	i
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	b662      	cpsie	i
 800af2a:	60bb      	str	r3, [r7, #8]
}
 800af2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af2e:	bf00      	nop
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0fc      	beq.n	800af30 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000024 	.word	0x20000024
	...

0800af50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <pxCurrentTCBConst2>)
 800af52:	6819      	ldr	r1, [r3, #0]
 800af54:	6808      	ldr	r0, [r1, #0]
 800af56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	f380 8809 	msr	PSP, r0
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8811 	msr	BASEPRI, r0
 800af6a:	4770      	bx	lr
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst2>:
 800af70:	2000f7b0 	.word	0x2000f7b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop

0800af78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <prvPortStartFirstTask+0x24>)
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	6800      	ldr	r0, [r0, #0]
 800af7e:	f380 8808 	msr	MSP, r0
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8814 	msr	CONTROL, r0
 800af8a:	b662      	cpsie	i
 800af8c:	b661      	cpsie	f
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	df00      	svc	0
 800af98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af9a:	bf00      	nop
 800af9c:	e000ed08 	.word	0xe000ed08

0800afa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afa6:	4b37      	ldr	r3, [pc, #220]	; (800b084 <xPortStartScheduler+0xe4>)
 800afa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	22ff      	movs	r2, #255	; 0xff
 800afb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afc0:	78fb      	ldrb	r3, [r7, #3]
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b2f      	ldr	r3, [pc, #188]	; (800b088 <xPortStartScheduler+0xe8>)
 800afcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afce:	4b2f      	ldr	r3, [pc, #188]	; (800b08c <xPortStartScheduler+0xec>)
 800afd0:	2207      	movs	r2, #7
 800afd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afd4:	e009      	b.n	800afea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800afd6:	4b2d      	ldr	r3, [pc, #180]	; (800b08c <xPortStartScheduler+0xec>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3b01      	subs	r3, #1
 800afdc:	4a2b      	ldr	r2, [pc, #172]	; (800b08c <xPortStartScheduler+0xec>)
 800afde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff2:	2b80      	cmp	r3, #128	; 0x80
 800aff4:	d0ef      	beq.n	800afd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aff6:	4b25      	ldr	r3, [pc, #148]	; (800b08c <xPortStartScheduler+0xec>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f1c3 0307 	rsb	r3, r3, #7
 800affe:	2b04      	cmp	r3, #4
 800b000:	d00c      	beq.n	800b01c <xPortStartScheduler+0x7c>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	b672      	cpsid	i
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	b662      	cpsie	i
 800b016:	60bb      	str	r3, [r7, #8]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b01c:	4b1b      	ldr	r3, [pc, #108]	; (800b08c <xPortStartScheduler+0xec>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	4a1a      	ldr	r2, [pc, #104]	; (800b08c <xPortStartScheduler+0xec>)
 800b024:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b026:	4b19      	ldr	r3, [pc, #100]	; (800b08c <xPortStartScheduler+0xec>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b02e:	4a17      	ldr	r2, [pc, #92]	; (800b08c <xPortStartScheduler+0xec>)
 800b030:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	b2da      	uxtb	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b03a:	4b15      	ldr	r3, [pc, #84]	; (800b090 <xPortStartScheduler+0xf0>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a14      	ldr	r2, [pc, #80]	; (800b090 <xPortStartScheduler+0xf0>)
 800b040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b044:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b046:	4b12      	ldr	r3, [pc, #72]	; (800b090 <xPortStartScheduler+0xf0>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a11      	ldr	r2, [pc, #68]	; (800b090 <xPortStartScheduler+0xf0>)
 800b04c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b050:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b052:	f000 f8dd 	bl	800b210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b056:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <xPortStartScheduler+0xf4>)
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b05c:	f000 f8fc 	bl	800b258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b060:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <xPortStartScheduler+0xf8>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a0c      	ldr	r2, [pc, #48]	; (800b098 <xPortStartScheduler+0xf8>)
 800b066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b06a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b06c:	f7ff ff84 	bl	800af78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b070:	f7ff fa74 	bl	800a55c <vTaskSwitchContext>
	prvTaskExitError();
 800b074:	f7ff ff38 	bl	800aee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	e000e400 	.word	0xe000e400
 800b088:	2000f8dc 	.word	0x2000f8dc
 800b08c:	2000f8e0 	.word	0x2000f8e0
 800b090:	e000ed20 	.word	0xe000ed20
 800b094:	20000024 	.word	0x20000024
 800b098:	e000ef34 	.word	0xe000ef34

0800b09c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	b672      	cpsid	i
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	b662      	cpsie	i
 800b0b6:	607b      	str	r3, [r7, #4]
}
 800b0b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0ba:	4b10      	ldr	r3, [pc, #64]	; (800b0fc <vPortEnterCritical+0x60>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	4a0e      	ldr	r2, [pc, #56]	; (800b0fc <vPortEnterCritical+0x60>)
 800b0c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0c4:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <vPortEnterCritical+0x60>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d111      	bne.n	800b0f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <vPortEnterCritical+0x64>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00c      	beq.n	800b0f0 <vPortEnterCritical+0x54>
	__asm volatile
 800b0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0da:	b672      	cpsid	i
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	b662      	cpsie	i
 800b0ea:	603b      	str	r3, [r7, #0]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <vPortEnterCritical+0x52>
	}
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	20000024 	.word	0x20000024
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b10a:	4b13      	ldr	r3, [pc, #76]	; (800b158 <vPortExitCritical+0x54>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10c      	bne.n	800b12c <vPortExitCritical+0x28>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	b672      	cpsid	i
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	b662      	cpsie	i
 800b126:	607b      	str	r3, [r7, #4]
}
 800b128:	bf00      	nop
 800b12a:	e7fe      	b.n	800b12a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b12c:	4b0a      	ldr	r3, [pc, #40]	; (800b158 <vPortExitCritical+0x54>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3b01      	subs	r3, #1
 800b132:	4a09      	ldr	r2, [pc, #36]	; (800b158 <vPortExitCritical+0x54>)
 800b134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b136:	4b08      	ldr	r3, [pc, #32]	; (800b158 <vPortExitCritical+0x54>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d105      	bne.n	800b14a <vPortExitCritical+0x46>
 800b13e:	2300      	movs	r3, #0
 800b140:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	f383 8811 	msr	BASEPRI, r3
}
 800b148:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b14a:	bf00      	nop
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000024 	.word	0x20000024
 800b15c:	00000000 	.word	0x00000000

0800b160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b160:	f3ef 8009 	mrs	r0, PSP
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	4b15      	ldr	r3, [pc, #84]	; (800b1c0 <pxCurrentTCBConst>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	f01e 0f10 	tst.w	lr, #16
 800b170:	bf08      	it	eq
 800b172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17a:	6010      	str	r0, [r2, #0]
 800b17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b184:	b672      	cpsid	i
 800b186:	f380 8811 	msr	BASEPRI, r0
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	b662      	cpsie	i
 800b194:	f7ff f9e2 	bl	800a55c <vTaskSwitchContext>
 800b198:	f04f 0000 	mov.w	r0, #0
 800b19c:	f380 8811 	msr	BASEPRI, r0
 800b1a0:	bc09      	pop	{r0, r3}
 800b1a2:	6819      	ldr	r1, [r3, #0]
 800b1a4:	6808      	ldr	r0, [r1, #0]
 800b1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1aa:	f01e 0f10 	tst.w	lr, #16
 800b1ae:	bf08      	it	eq
 800b1b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1b4:	f380 8809 	msr	PSP, r0
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop

0800b1c0 <pxCurrentTCBConst>:
 800b1c0:	2000f7b0 	.word	0x2000f7b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop

0800b1c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	b672      	cpsid	i
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	b662      	cpsie	i
 800b1e2:	607b      	str	r3, [r7, #4]
}
 800b1e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1e6:	f7ff f8ff 	bl	800a3e8 <xTaskIncrementTick>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <SysTick_Handler+0x44>)
 800b1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	f383 8811 	msr	BASEPRI, r3
}
 800b202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b210:	b480      	push	{r7}
 800b212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b214:	4b0b      	ldr	r3, [pc, #44]	; (800b244 <vPortSetupTimerInterrupt+0x34>)
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b21a:	4b0b      	ldr	r3, [pc, #44]	; (800b248 <vPortSetupTimerInterrupt+0x38>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <vPortSetupTimerInterrupt+0x3c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a0a      	ldr	r2, [pc, #40]	; (800b250 <vPortSetupTimerInterrupt+0x40>)
 800b226:	fba2 2303 	umull	r2, r3, r2, r3
 800b22a:	099b      	lsrs	r3, r3, #6
 800b22c:	4a09      	ldr	r2, [pc, #36]	; (800b254 <vPortSetupTimerInterrupt+0x44>)
 800b22e:	3b01      	subs	r3, #1
 800b230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b232:	4b04      	ldr	r3, [pc, #16]	; (800b244 <vPortSetupTimerInterrupt+0x34>)
 800b234:	2207      	movs	r2, #7
 800b236:	601a      	str	r2, [r3, #0]
}
 800b238:	bf00      	nop
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	e000e010 	.word	0xe000e010
 800b248:	e000e018 	.word	0xe000e018
 800b24c:	20000004 	.word	0x20000004
 800b250:	10624dd3 	.word	0x10624dd3
 800b254:	e000e014 	.word	0xe000e014

0800b258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b258:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b268 <vPortEnableVFP+0x10>
 800b25c:	6801      	ldr	r1, [r0, #0]
 800b25e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b262:	6001      	str	r1, [r0, #0]
 800b264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b266:	bf00      	nop
 800b268:	e000ed88 	.word	0xe000ed88

0800b26c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b272:	f3ef 8305 	mrs	r3, IPSR
 800b276:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b0f      	cmp	r3, #15
 800b27c:	d916      	bls.n	800b2ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b27e:	4a19      	ldr	r2, [pc, #100]	; (800b2e4 <vPortValidateInterruptPriority+0x78>)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <vPortValidateInterruptPriority+0x7c>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	7afa      	ldrb	r2, [r7, #11]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d20c      	bcs.n	800b2ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	b672      	cpsid	i
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	b662      	cpsie	i
 800b2a6:	607b      	str	r3, [r7, #4]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2ac:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <vPortValidateInterruptPriority+0x80>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2b4:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <vPortValidateInterruptPriority+0x84>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d90c      	bls.n	800b2d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	b672      	cpsid	i
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	b662      	cpsie	i
 800b2d0:	603b      	str	r3, [r7, #0]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <vPortValidateInterruptPriority+0x68>
	}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	e000e3f0 	.word	0xe000e3f0
 800b2e8:	2000f8dc 	.word	0x2000f8dc
 800b2ec:	e000ed0c 	.word	0xe000ed0c
 800b2f0:	2000f8e0 	.word	0x2000f8e0

0800b2f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08a      	sub	sp, #40	; 0x28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b300:	f7fe ffa4 	bl	800a24c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b304:	4b5b      	ldr	r3, [pc, #364]	; (800b474 <pvPortMalloc+0x180>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b30c:	f000 f91a 	bl	800b544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b310:	4b59      	ldr	r3, [pc, #356]	; (800b478 <pvPortMalloc+0x184>)
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4013      	ands	r3, r2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f040 8092 	bne.w	800b442 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01f      	beq.n	800b364 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b324:	2208      	movs	r2, #8
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4413      	add	r3, r2
 800b32a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f003 0307 	and.w	r3, r3, #7
 800b332:	2b00      	cmp	r3, #0
 800b334:	d016      	beq.n	800b364 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f023 0307 	bic.w	r3, r3, #7
 800b33c:	3308      	adds	r3, #8
 800b33e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f003 0307 	and.w	r3, r3, #7
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00c      	beq.n	800b364 <pvPortMalloc+0x70>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	b672      	cpsid	i
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	b662      	cpsie	i
 800b35e:	617b      	str	r3, [r7, #20]
}
 800b360:	bf00      	nop
 800b362:	e7fe      	b.n	800b362 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d06b      	beq.n	800b442 <pvPortMalloc+0x14e>
 800b36a:	4b44      	ldr	r3, [pc, #272]	; (800b47c <pvPortMalloc+0x188>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d866      	bhi.n	800b442 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b374:	4b42      	ldr	r3, [pc, #264]	; (800b480 <pvPortMalloc+0x18c>)
 800b376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b378:	4b41      	ldr	r3, [pc, #260]	; (800b480 <pvPortMalloc+0x18c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b37e:	e004      	b.n	800b38a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	429a      	cmp	r2, r3
 800b392:	d903      	bls.n	800b39c <pvPortMalloc+0xa8>
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1f1      	bne.n	800b380 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b39c:	4b35      	ldr	r3, [pc, #212]	; (800b474 <pvPortMalloc+0x180>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d04d      	beq.n	800b442 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2208      	movs	r2, #8
 800b3ac:	4413      	add	r3, r2
 800b3ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	1ad2      	subs	r2, r2, r3
 800b3c0:	2308      	movs	r3, #8
 800b3c2:	005b      	lsls	r3, r3, #1
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d921      	bls.n	800b40c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00c      	beq.n	800b3f4 <pvPortMalloc+0x100>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	b672      	cpsid	i
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	b662      	cpsie	i
 800b3ee:	613b      	str	r3, [r7, #16]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	685a      	ldr	r2, [r3, #4]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	1ad2      	subs	r2, r2, r3
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b406:	69b8      	ldr	r0, [r7, #24]
 800b408:	f000 f8fe 	bl	800b608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b40c:	4b1b      	ldr	r3, [pc, #108]	; (800b47c <pvPortMalloc+0x188>)
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	4a19      	ldr	r2, [pc, #100]	; (800b47c <pvPortMalloc+0x188>)
 800b418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b41a:	4b18      	ldr	r3, [pc, #96]	; (800b47c <pvPortMalloc+0x188>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	4b19      	ldr	r3, [pc, #100]	; (800b484 <pvPortMalloc+0x190>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	429a      	cmp	r2, r3
 800b424:	d203      	bcs.n	800b42e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b426:	4b15      	ldr	r3, [pc, #84]	; (800b47c <pvPortMalloc+0x188>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a16      	ldr	r2, [pc, #88]	; (800b484 <pvPortMalloc+0x190>)
 800b42c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	4b11      	ldr	r3, [pc, #68]	; (800b478 <pvPortMalloc+0x184>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	431a      	orrs	r2, r3
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	2200      	movs	r2, #0
 800b440:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b442:	f7fe ff11 	bl	800a268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	f003 0307 	and.w	r3, r3, #7
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00c      	beq.n	800b46a <pvPortMalloc+0x176>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	b672      	cpsid	i
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	b662      	cpsie	i
 800b464:	60fb      	str	r3, [r7, #12]
}
 800b466:	bf00      	nop
 800b468:	e7fe      	b.n	800b468 <pvPortMalloc+0x174>
	return pvReturn;
 800b46a:	69fb      	ldr	r3, [r7, #28]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3728      	adds	r7, #40	; 0x28
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	200418ec 	.word	0x200418ec
 800b478:	200418f8 	.word	0x200418f8
 800b47c:	200418f0 	.word	0x200418f0
 800b480:	200418e4 	.word	0x200418e4
 800b484:	200418f4 	.word	0x200418f4

0800b488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d04c      	beq.n	800b534 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b49a:	2308      	movs	r3, #8
 800b49c:	425b      	negs	r3, r3
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	4b23      	ldr	r3, [pc, #140]	; (800b53c <vPortFree+0xb4>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10c      	bne.n	800b4d0 <vPortFree+0x48>
	__asm volatile
 800b4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ba:	b672      	cpsid	i
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	b662      	cpsie	i
 800b4ca:	60fb      	str	r3, [r7, #12]
}
 800b4cc:	bf00      	nop
 800b4ce:	e7fe      	b.n	800b4ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00c      	beq.n	800b4f2 <vPortFree+0x6a>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	b672      	cpsid	i
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	b662      	cpsie	i
 800b4ec:	60bb      	str	r3, [r7, #8]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	4b11      	ldr	r3, [pc, #68]	; (800b53c <vPortFree+0xb4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d019      	beq.n	800b534 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d115      	bne.n	800b534 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	4b0b      	ldr	r3, [pc, #44]	; (800b53c <vPortFree+0xb4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	43db      	mvns	r3, r3
 800b512:	401a      	ands	r2, r3
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b518:	f7fe fe98 	bl	800a24c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <vPortFree+0xb8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4413      	add	r3, r2
 800b526:	4a06      	ldr	r2, [pc, #24]	; (800b540 <vPortFree+0xb8>)
 800b528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b52a:	6938      	ldr	r0, [r7, #16]
 800b52c:	f000 f86c 	bl	800b608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b530:	f7fe fe9a 	bl	800a268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b534:	bf00      	nop
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	200418f8 	.word	0x200418f8
 800b540:	200418f0 	.word	0x200418f0

0800b544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b54a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800b54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b550:	4b27      	ldr	r3, [pc, #156]	; (800b5f0 <prvHeapInit+0xac>)
 800b552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00c      	beq.n	800b578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3307      	adds	r3, #7
 800b562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 0307 	bic.w	r3, r3, #7
 800b56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	4a1f      	ldr	r2, [pc, #124]	; (800b5f0 <prvHeapInit+0xac>)
 800b574:	4413      	add	r3, r2
 800b576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b57c:	4a1d      	ldr	r2, [pc, #116]	; (800b5f4 <prvHeapInit+0xb0>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b582:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <prvHeapInit+0xb0>)
 800b584:	2200      	movs	r2, #0
 800b586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	4413      	add	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b590:	2208      	movs	r2, #8
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4a15      	ldr	r2, [pc, #84]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5a6:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ae:	4b12      	ldr	r3, [pc, #72]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4a0a      	ldr	r2, [pc, #40]	; (800b5fc <prvHeapInit+0xb8>)
 800b5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	4a09      	ldr	r2, [pc, #36]	; (800b600 <prvHeapInit+0xbc>)
 800b5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <prvHeapInit+0xc0>)
 800b5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5e2:	601a      	str	r2, [r3, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	2000f8e4 	.word	0x2000f8e4
 800b5f4:	200418e4 	.word	0x200418e4
 800b5f8:	200418ec 	.word	0x200418ec
 800b5fc:	200418f4 	.word	0x200418f4
 800b600:	200418f0 	.word	0x200418f0
 800b604:	200418f8 	.word	0x200418f8

0800b608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b610:	4b28      	ldr	r3, [pc, #160]	; (800b6b4 <prvInsertBlockIntoFreeList+0xac>)
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	e002      	b.n	800b61c <prvInsertBlockIntoFreeList+0x14>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	429a      	cmp	r2, r3
 800b624:	d8f7      	bhi.n	800b616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	4413      	add	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	429a      	cmp	r2, r3
 800b636:	d108      	bne.n	800b64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	441a      	add	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d118      	bne.n	800b690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d00d      	beq.n	800b686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	441a      	add	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	e008      	b.n	800b698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b686:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e003      	b.n	800b698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d002      	beq.n	800b6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	200418e4 	.word	0x200418e4
 800b6b8:	200418ec 	.word	0x200418ec

0800b6bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b6c6:	f007 fac5 	bl	8012c54 <sys_timeouts_sleeptime>
 800b6ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d2:	d10b      	bne.n	800b6ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b6d4:	4813      	ldr	r0, [pc, #76]	; (800b724 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6d6:	f00a f83a 	bl	801574e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b6da:	2200      	movs	r2, #0
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f009 ffac 	bl	801563c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b6e4:	480f      	ldr	r0, [pc, #60]	; (800b724 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6e6:	f00a f823 	bl	8015730 <sys_mutex_lock>
    return;
 800b6ea:	e018      	b.n	800b71e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b6f2:	f007 fa75 	bl	8012be0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b6f6:	e7e6      	b.n	800b6c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b6f8:	480a      	ldr	r0, [pc, #40]	; (800b724 <tcpip_timeouts_mbox_fetch+0x68>)
 800b6fa:	f00a f828 	bl	801574e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f009 ff9a 	bl	801563c <sys_arch_mbox_fetch>
 800b708:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b70a:	4806      	ldr	r0, [pc, #24]	; (800b724 <tcpip_timeouts_mbox_fetch+0x68>)
 800b70c:	f00a f810 	bl	8015730 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d102      	bne.n	800b71e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b718:	f007 fa62 	bl	8012be0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b71c:	e7d3      	b.n	800b6c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20041908 	.word	0x20041908

0800b728 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b730:	4810      	ldr	r0, [pc, #64]	; (800b774 <tcpip_thread+0x4c>)
 800b732:	f009 fffd 	bl	8015730 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b736:	4b10      	ldr	r3, [pc, #64]	; (800b778 <tcpip_thread+0x50>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b73e:	4b0e      	ldr	r3, [pc, #56]	; (800b778 <tcpip_thread+0x50>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a0e      	ldr	r2, [pc, #56]	; (800b77c <tcpip_thread+0x54>)
 800b744:	6812      	ldr	r2, [r2, #0]
 800b746:	4610      	mov	r0, r2
 800b748:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b74a:	f107 030c 	add.w	r3, r7, #12
 800b74e:	4619      	mov	r1, r3
 800b750:	480b      	ldr	r0, [pc, #44]	; (800b780 <tcpip_thread+0x58>)
 800b752:	f7ff ffb3 	bl	800b6bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b75c:	4b09      	ldr	r3, [pc, #36]	; (800b784 <tcpip_thread+0x5c>)
 800b75e:	2291      	movs	r2, #145	; 0x91
 800b760:	4909      	ldr	r1, [pc, #36]	; (800b788 <tcpip_thread+0x60>)
 800b762:	480a      	ldr	r0, [pc, #40]	; (800b78c <tcpip_thread+0x64>)
 800b764:	f00a f9d0 	bl	8015b08 <iprintf>
      continue;
 800b768:	e003      	b.n	800b772 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 f80f 	bl	800b790 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b772:	e7ea      	b.n	800b74a <tcpip_thread+0x22>
 800b774:	20041908 	.word	0x20041908
 800b778:	200418fc 	.word	0x200418fc
 800b77c:	20041900 	.word	0x20041900
 800b780:	20041904 	.word	0x20041904
 800b784:	08016d78 	.word	0x08016d78
 800b788:	08016da8 	.word	0x08016da8
 800b78c:	08016dc8 	.word	0x08016dc8

0800b790 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d026      	beq.n	800b7ee <tcpip_thread_handle_msg+0x5e>
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	dc2b      	bgt.n	800b7fc <tcpip_thread_handle_msg+0x6c>
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <tcpip_thread_handle_msg+0x1e>
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d015      	beq.n	800b7d8 <tcpip_thread_handle_msg+0x48>
 800b7ac:	e026      	b.n	800b7fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	6850      	ldr	r0, [r2, #4]
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	6892      	ldr	r2, [r2, #8]
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	4798      	blx	r3
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d004      	beq.n	800b7ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f001 fd0b 	bl	800d1e4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	2009      	movs	r0, #9
 800b7d2:	f000 fe63 	bl	800c49c <memp_free>
      break;
 800b7d6:	e018      	b.n	800b80a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	6892      	ldr	r2, [r2, #8]
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	2008      	movs	r0, #8
 800b7e8:	f000 fe58 	bl	800c49c <memp_free>
      break;
 800b7ec:	e00d      	b.n	800b80a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	6892      	ldr	r2, [r2, #8]
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
      break;
 800b7fa:	e006      	b.n	800b80a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b7fc:	4b05      	ldr	r3, [pc, #20]	; (800b814 <tcpip_thread_handle_msg+0x84>)
 800b7fe:	22cf      	movs	r2, #207	; 0xcf
 800b800:	4905      	ldr	r1, [pc, #20]	; (800b818 <tcpip_thread_handle_msg+0x88>)
 800b802:	4806      	ldr	r0, [pc, #24]	; (800b81c <tcpip_thread_handle_msg+0x8c>)
 800b804:	f00a f980 	bl	8015b08 <iprintf>
      break;
 800b808:	bf00      	nop
  }
}
 800b80a:	bf00      	nop
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	08016d78 	.word	0x08016d78
 800b818:	08016da8 	.word	0x08016da8
 800b81c:	08016dc8 	.word	0x08016dc8

0800b820 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b82c:	481a      	ldr	r0, [pc, #104]	; (800b898 <tcpip_inpkt+0x78>)
 800b82e:	f009 ff44 	bl	80156ba <sys_mbox_valid>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d105      	bne.n	800b844 <tcpip_inpkt+0x24>
 800b838:	4b18      	ldr	r3, [pc, #96]	; (800b89c <tcpip_inpkt+0x7c>)
 800b83a:	22fc      	movs	r2, #252	; 0xfc
 800b83c:	4918      	ldr	r1, [pc, #96]	; (800b8a0 <tcpip_inpkt+0x80>)
 800b83e:	4819      	ldr	r0, [pc, #100]	; (800b8a4 <tcpip_inpkt+0x84>)
 800b840:	f00a f962 	bl	8015b08 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b844:	2009      	movs	r0, #9
 800b846:	f000 fdb3 	bl	800c3b0 <memp_malloc>
 800b84a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b852:	f04f 33ff 	mov.w	r3, #4294967295
 800b856:	e01a      	b.n	800b88e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2200      	movs	r2, #0
 800b85c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	68ba      	ldr	r2, [r7, #8]
 800b868:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b870:	6979      	ldr	r1, [r7, #20]
 800b872:	4809      	ldr	r0, [pc, #36]	; (800b898 <tcpip_inpkt+0x78>)
 800b874:	f009 fec8 	bl	8015608 <sys_mbox_trypost>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b87e:	6979      	ldr	r1, [r7, #20]
 800b880:	2009      	movs	r0, #9
 800b882:	f000 fe0b 	bl	800c49c <memp_free>
    return ERR_MEM;
 800b886:	f04f 33ff 	mov.w	r3, #4294967295
 800b88a:	e000      	b.n	800b88e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b88c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20041904 	.word	0x20041904
 800b89c:	08016d78 	.word	0x08016d78
 800b8a0:	08016df0 	.word	0x08016df0
 800b8a4:	08016dc8 	.word	0x08016dc8

0800b8a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8b8:	f003 0318 	and.w	r3, r3, #24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d006      	beq.n	800b8ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b8c0:	4a08      	ldr	r2, [pc, #32]	; (800b8e4 <tcpip_input+0x3c>)
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ffab 	bl	800b820 <tcpip_inpkt>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	e005      	b.n	800b8da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b8ce:	4a06      	ldr	r2, [pc, #24]	; (800b8e8 <tcpip_input+0x40>)
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff ffa4 	bl	800b820 <tcpip_inpkt>
 800b8d8:	4603      	mov	r3, r0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	08015419 	.word	0x08015419
 800b8e8:	08014321 	.word	0x08014321

0800b8ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b8f6:	4819      	ldr	r0, [pc, #100]	; (800b95c <tcpip_try_callback+0x70>)
 800b8f8:	f009 fedf 	bl	80156ba <sys_mbox_valid>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <tcpip_try_callback+0x24>
 800b902:	4b17      	ldr	r3, [pc, #92]	; (800b960 <tcpip_try_callback+0x74>)
 800b904:	f240 125d 	movw	r2, #349	; 0x15d
 800b908:	4916      	ldr	r1, [pc, #88]	; (800b964 <tcpip_try_callback+0x78>)
 800b90a:	4817      	ldr	r0, [pc, #92]	; (800b968 <tcpip_try_callback+0x7c>)
 800b90c:	f00a f8fc 	bl	8015b08 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b910:	2008      	movs	r0, #8
 800b912:	f000 fd4d 	bl	800c3b0 <memp_malloc>
 800b916:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d102      	bne.n	800b924 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b91e:	f04f 33ff 	mov.w	r3, #4294967295
 800b922:	e017      	b.n	800b954 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b936:	68f9      	ldr	r1, [r7, #12]
 800b938:	4808      	ldr	r0, [pc, #32]	; (800b95c <tcpip_try_callback+0x70>)
 800b93a:	f009 fe65 	bl	8015608 <sys_mbox_trypost>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d006      	beq.n	800b952 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b944:	68f9      	ldr	r1, [r7, #12]
 800b946:	2008      	movs	r0, #8
 800b948:	f000 fda8 	bl	800c49c <memp_free>
    return ERR_MEM;
 800b94c:	f04f 33ff 	mov.w	r3, #4294967295
 800b950:	e000      	b.n	800b954 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	20041904 	.word	0x20041904
 800b960:	08016d78 	.word	0x08016d78
 800b964:	08016df0 	.word	0x08016df0
 800b968:	08016dc8 	.word	0x08016dc8

0800b96c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af02      	add	r7, sp, #8
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b976:	f000 f871 	bl	800ba5c <lwip_init>

  tcpip_init_done = initfunc;
 800b97a:	4a17      	ldr	r2, [pc, #92]	; (800b9d8 <tcpip_init+0x6c>)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b980:	4a16      	ldr	r2, [pc, #88]	; (800b9dc <tcpip_init+0x70>)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b986:	2106      	movs	r1, #6
 800b988:	4815      	ldr	r0, [pc, #84]	; (800b9e0 <tcpip_init+0x74>)
 800b98a:	f009 fe1b 	bl	80155c4 <sys_mbox_new>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d006      	beq.n	800b9a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b994:	4b13      	ldr	r3, [pc, #76]	; (800b9e4 <tcpip_init+0x78>)
 800b996:	f240 2261 	movw	r2, #609	; 0x261
 800b99a:	4913      	ldr	r1, [pc, #76]	; (800b9e8 <tcpip_init+0x7c>)
 800b99c:	4813      	ldr	r0, [pc, #76]	; (800b9ec <tcpip_init+0x80>)
 800b99e:	f00a f8b3 	bl	8015b08 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b9a2:	4813      	ldr	r0, [pc, #76]	; (800b9f0 <tcpip_init+0x84>)
 800b9a4:	f009 fea8 	bl	80156f8 <sys_mutex_new>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b9ae:	4b0d      	ldr	r3, [pc, #52]	; (800b9e4 <tcpip_init+0x78>)
 800b9b0:	f240 2265 	movw	r2, #613	; 0x265
 800b9b4:	490f      	ldr	r1, [pc, #60]	; (800b9f4 <tcpip_init+0x88>)
 800b9b6:	480d      	ldr	r0, [pc, #52]	; (800b9ec <tcpip_init+0x80>)
 800b9b8:	f00a f8a6 	bl	8015b08 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	490c      	ldr	r1, [pc, #48]	; (800b9f8 <tcpip_init+0x8c>)
 800b9c8:	480c      	ldr	r0, [pc, #48]	; (800b9fc <tcpip_init+0x90>)
 800b9ca:	f009 fecd 	bl	8015768 <sys_thread_new>
}
 800b9ce:	bf00      	nop
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	200418fc 	.word	0x200418fc
 800b9dc:	20041900 	.word	0x20041900
 800b9e0:	20041904 	.word	0x20041904
 800b9e4:	08016d78 	.word	0x08016d78
 800b9e8:	08016e00 	.word	0x08016e00
 800b9ec:	08016dc8 	.word	0x08016dc8
 800b9f0:	20041908 	.word	0x20041908
 800b9f4:	08016e24 	.word	0x08016e24
 800b9f8:	0800b729 	.word	0x0800b729
 800b9fc:	08016e48 	.word	0x08016e48

0800ba00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ba0a:	88fb      	ldrh	r3, [r7, #6]
 800ba0c:	021b      	lsls	r3, r3, #8
 800ba0e:	b21a      	sxth	r2, r3
 800ba10:	88fb      	ldrh	r3, [r7, #6]
 800ba12:	0a1b      	lsrs	r3, r3, #8
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	b21b      	sxth	r3, r3
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	b29b      	uxth	r3, r3
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b083      	sub	sp, #12
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	061a      	lsls	r2, r3, #24
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	021b      	lsls	r3, r3, #8
 800ba3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	0a1b      	lsrs	r3, r3, #8
 800ba44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	0e1b      	lsrs	r3, r3, #24
 800ba4e:	4313      	orrs	r3, r2
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ba66:	f009 fe39 	bl	80156dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ba6a:	f000 f8d5 	bl	800bc18 <mem_init>
  memp_init();
 800ba6e:	f000 fc31 	bl	800c2d4 <memp_init>
  pbuf_init();
  netif_init();
 800ba72:	f000 fd3d 	bl	800c4f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ba76:	f007 f925 	bl	8012cc4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ba7a:	f001 fe4d 	bl	800d718 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ba7e:	f007 f867 	bl	8012b50 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	4603      	mov	r3, r0
 800ba94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ba96:	4b05      	ldr	r3, [pc, #20]	; (800baac <ptr_to_mem+0x20>)
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	88fb      	ldrh	r3, [r7, #6]
 800ba9c:	4413      	add	r3, r2
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	20041f78 	.word	0x20041f78

0800bab0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bab8:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <mem_to_ptr+0x20>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	b29b      	uxth	r3, r3
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	20041f78 	.word	0x20041f78

0800bad4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800badc:	4b45      	ldr	r3, [pc, #276]	; (800bbf4 <plug_holes+0x120>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d206      	bcs.n	800baf4 <plug_holes+0x20>
 800bae6:	4b44      	ldr	r3, [pc, #272]	; (800bbf8 <plug_holes+0x124>)
 800bae8:	f240 12df 	movw	r2, #479	; 0x1df
 800baec:	4943      	ldr	r1, [pc, #268]	; (800bbfc <plug_holes+0x128>)
 800baee:	4844      	ldr	r0, [pc, #272]	; (800bc00 <plug_holes+0x12c>)
 800baf0:	f00a f80a 	bl	8015b08 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800baf4:	4b43      	ldr	r3, [pc, #268]	; (800bc04 <plug_holes+0x130>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d306      	bcc.n	800bb0c <plug_holes+0x38>
 800bafe:	4b3e      	ldr	r3, [pc, #248]	; (800bbf8 <plug_holes+0x124>)
 800bb00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bb04:	4940      	ldr	r1, [pc, #256]	; (800bc08 <plug_holes+0x134>)
 800bb06:	483e      	ldr	r0, [pc, #248]	; (800bc00 <plug_holes+0x12c>)
 800bb08:	f009 fffe 	bl	8015b08 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	791b      	ldrb	r3, [r3, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d006      	beq.n	800bb22 <plug_holes+0x4e>
 800bb14:	4b38      	ldr	r3, [pc, #224]	; (800bbf8 <plug_holes+0x124>)
 800bb16:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bb1a:	493c      	ldr	r1, [pc, #240]	; (800bc0c <plug_holes+0x138>)
 800bb1c:	4838      	ldr	r0, [pc, #224]	; (800bc00 <plug_holes+0x12c>)
 800bb1e:	f009 fff3 	bl	8015b08 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb2a:	d906      	bls.n	800bb3a <plug_holes+0x66>
 800bb2c:	4b32      	ldr	r3, [pc, #200]	; (800bbf8 <plug_holes+0x124>)
 800bb2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bb32:	4937      	ldr	r1, [pc, #220]	; (800bc10 <plug_holes+0x13c>)
 800bb34:	4832      	ldr	r0, [pc, #200]	; (800bc00 <plug_holes+0x12c>)
 800bb36:	f009 ffe7 	bl	8015b08 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff ffa4 	bl	800ba8c <ptr_to_mem>
 800bb44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d024      	beq.n	800bb98 <plug_holes+0xc4>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	791b      	ldrb	r3, [r3, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d120      	bne.n	800bb98 <plug_holes+0xc4>
 800bb56:	4b2b      	ldr	r3, [pc, #172]	; (800bc04 <plug_holes+0x130>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d01b      	beq.n	800bb98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bb60:	4b2c      	ldr	r3, [pc, #176]	; (800bc14 <plug_holes+0x140>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d102      	bne.n	800bb70 <plug_holes+0x9c>
      lfree = mem;
 800bb6a:	4a2a      	ldr	r2, [pc, #168]	; (800bc14 <plug_holes+0x140>)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	881a      	ldrh	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb80:	d00a      	beq.n	800bb98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	881b      	ldrh	r3, [r3, #0]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff ff80 	bl	800ba8c <ptr_to_mem>
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff ff8e 	bl	800bab0 <mem_to_ptr>
 800bb94:	4603      	mov	r3, r0
 800bb96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7ff ff75 	bl	800ba8c <ptr_to_mem>
 800bba2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d01f      	beq.n	800bbec <plug_holes+0x118>
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	791b      	ldrb	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d11b      	bne.n	800bbec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bbb4:	4b17      	ldr	r3, [pc, #92]	; (800bc14 <plug_holes+0x140>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d102      	bne.n	800bbc4 <plug_holes+0xf0>
      lfree = pmem;
 800bbbe:	4a15      	ldr	r2, [pc, #84]	; (800bc14 <plug_holes+0x140>)
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	881a      	ldrh	r2, [r3, #0]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	881b      	ldrh	r3, [r3, #0]
 800bbd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbd4:	d00a      	beq.n	800bbec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff ff56 	bl	800ba8c <ptr_to_mem>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	68b8      	ldr	r0, [r7, #8]
 800bbe4:	f7ff ff64 	bl	800bab0 <mem_to_ptr>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bbec:	bf00      	nop
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd90      	pop	{r4, r7, pc}
 800bbf4:	20041f78 	.word	0x20041f78
 800bbf8:	08016e58 	.word	0x08016e58
 800bbfc:	08016e88 	.word	0x08016e88
 800bc00:	08016ea0 	.word	0x08016ea0
 800bc04:	20041f7c 	.word	0x20041f7c
 800bc08:	08016ec8 	.word	0x08016ec8
 800bc0c:	08016ee4 	.word	0x08016ee4
 800bc10:	08016f00 	.word	0x08016f00
 800bc14:	20041f84 	.word	0x20041f84

0800bc18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bc1e:	4b1f      	ldr	r3, [pc, #124]	; (800bc9c <mem_init+0x84>)
 800bc20:	3303      	adds	r3, #3
 800bc22:	f023 0303 	bic.w	r3, r3, #3
 800bc26:	461a      	mov	r2, r3
 800bc28:	4b1d      	ldr	r3, [pc, #116]	; (800bca0 <mem_init+0x88>)
 800bc2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bc2c:	4b1c      	ldr	r3, [pc, #112]	; (800bca0 <mem_init+0x88>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bc38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bc46:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bc4a:	f7ff ff1f 	bl	800ba8c <ptr_to_mem>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4a14      	ldr	r2, [pc, #80]	; (800bca4 <mem_init+0x8c>)
 800bc52:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bc54:	4b13      	ldr	r3, [pc, #76]	; (800bca4 <mem_init+0x8c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bc5c:	4b11      	ldr	r3, [pc, #68]	; (800bca4 <mem_init+0x8c>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bc64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <mem_init+0x8c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bc6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bc70:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <mem_init+0x88>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a0c      	ldr	r2, [pc, #48]	; (800bca8 <mem_init+0x90>)
 800bc76:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bc78:	480c      	ldr	r0, [pc, #48]	; (800bcac <mem_init+0x94>)
 800bc7a:	f009 fd3d 	bl	80156f8 <sys_mutex_new>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d006      	beq.n	800bc92 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bc84:	4b0a      	ldr	r3, [pc, #40]	; (800bcb0 <mem_init+0x98>)
 800bc86:	f240 221f 	movw	r2, #543	; 0x21f
 800bc8a:	490a      	ldr	r1, [pc, #40]	; (800bcb4 <mem_init+0x9c>)
 800bc8c:	480a      	ldr	r0, [pc, #40]	; (800bcb8 <mem_init+0xa0>)
 800bc8e:	f009 ff3b 	bl	8015b08 <iprintf>
  }
}
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20041924 	.word	0x20041924
 800bca0:	20041f78 	.word	0x20041f78
 800bca4:	20041f7c 	.word	0x20041f7c
 800bca8:	20041f84 	.word	0x20041f84
 800bcac:	20041f80 	.word	0x20041f80
 800bcb0:	08016e58 	.word	0x08016e58
 800bcb4:	08016f2c 	.word	0x08016f2c
 800bcb8:	08016ea0 	.word	0x08016ea0

0800bcbc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff fef3 	bl	800bab0 <mem_to_ptr>
 800bcca:	4603      	mov	r3, r0
 800bccc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff feda 	bl	800ba8c <ptr_to_mem>
 800bcd8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	885b      	ldrh	r3, [r3, #2]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff fed4 	bl	800ba8c <ptr_to_mem>
 800bce4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcee:	d818      	bhi.n	800bd22 <mem_link_valid+0x66>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcf8:	d813      	bhi.n	800bd22 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcfe:	8afa      	ldrh	r2, [r7, #22]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d004      	beq.n	800bd0e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	8afa      	ldrh	r2, [r7, #22]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d109      	bne.n	800bd22 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd0e:	4b08      	ldr	r3, [pc, #32]	; (800bd30 <mem_link_valid+0x74>)
 800bd10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d006      	beq.n	800bd26 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	885b      	ldrh	r3, [r3, #2]
 800bd1c:	8afa      	ldrh	r2, [r7, #22]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d001      	beq.n	800bd26 <mem_link_valid+0x6a>
    return 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e000      	b.n	800bd28 <mem_link_valid+0x6c>
  }
  return 1;
 800bd26:	2301      	movs	r3, #1
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20041f7c 	.word	0x20041f7c

0800bd34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d070      	beq.n	800be24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f003 0303 	and.w	r3, r3, #3
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00d      	beq.n	800bd68 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bd4c:	4b37      	ldr	r3, [pc, #220]	; (800be2c <mem_free+0xf8>)
 800bd4e:	f240 2273 	movw	r2, #627	; 0x273
 800bd52:	4937      	ldr	r1, [pc, #220]	; (800be30 <mem_free+0xfc>)
 800bd54:	4837      	ldr	r0, [pc, #220]	; (800be34 <mem_free+0x100>)
 800bd56:	f009 fed7 	bl	8015b08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd5a:	f009 fd2b 	bl	80157b4 <sys_arch_protect>
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f009 fd35 	bl	80157d0 <sys_arch_unprotect>
    return;
 800bd66:	e05e      	b.n	800be26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3b08      	subs	r3, #8
 800bd6c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bd6e:	4b32      	ldr	r3, [pc, #200]	; (800be38 <mem_free+0x104>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	69fa      	ldr	r2, [r7, #28]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d306      	bcc.n	800bd86 <mem_free+0x52>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f103 020c 	add.w	r2, r3, #12
 800bd7e:	4b2f      	ldr	r3, [pc, #188]	; (800be3c <mem_free+0x108>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d90d      	bls.n	800bda2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bd86:	4b29      	ldr	r3, [pc, #164]	; (800be2c <mem_free+0xf8>)
 800bd88:	f240 227f 	movw	r2, #639	; 0x27f
 800bd8c:	492c      	ldr	r1, [pc, #176]	; (800be40 <mem_free+0x10c>)
 800bd8e:	4829      	ldr	r0, [pc, #164]	; (800be34 <mem_free+0x100>)
 800bd90:	f009 feba 	bl	8015b08 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd94:	f009 fd0e 	bl	80157b4 <sys_arch_protect>
 800bd98:	6138      	str	r0, [r7, #16]
 800bd9a:	6938      	ldr	r0, [r7, #16]
 800bd9c:	f009 fd18 	bl	80157d0 <sys_arch_unprotect>
    return;
 800bda0:	e041      	b.n	800be26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bda2:	4828      	ldr	r0, [pc, #160]	; (800be44 <mem_free+0x110>)
 800bda4:	f009 fcc4 	bl	8015730 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	791b      	ldrb	r3, [r3, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d110      	bne.n	800bdd2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bdb0:	4b1e      	ldr	r3, [pc, #120]	; (800be2c <mem_free+0xf8>)
 800bdb2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bdb6:	4924      	ldr	r1, [pc, #144]	; (800be48 <mem_free+0x114>)
 800bdb8:	481e      	ldr	r0, [pc, #120]	; (800be34 <mem_free+0x100>)
 800bdba:	f009 fea5 	bl	8015b08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bdbe:	4821      	ldr	r0, [pc, #132]	; (800be44 <mem_free+0x110>)
 800bdc0:	f009 fcc5 	bl	801574e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdc4:	f009 fcf6 	bl	80157b4 <sys_arch_protect>
 800bdc8:	6178      	str	r0, [r7, #20]
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	f009 fd00 	bl	80157d0 <sys_arch_unprotect>
    return;
 800bdd0:	e029      	b.n	800be26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bdd2:	69f8      	ldr	r0, [r7, #28]
 800bdd4:	f7ff ff72 	bl	800bcbc <mem_link_valid>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d110      	bne.n	800be00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bdde:	4b13      	ldr	r3, [pc, #76]	; (800be2c <mem_free+0xf8>)
 800bde0:	f240 2295 	movw	r2, #661	; 0x295
 800bde4:	4919      	ldr	r1, [pc, #100]	; (800be4c <mem_free+0x118>)
 800bde6:	4813      	ldr	r0, [pc, #76]	; (800be34 <mem_free+0x100>)
 800bde8:	f009 fe8e 	bl	8015b08 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bdec:	4815      	ldr	r0, [pc, #84]	; (800be44 <mem_free+0x110>)
 800bdee:	f009 fcae 	bl	801574e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdf2:	f009 fcdf 	bl	80157b4 <sys_arch_protect>
 800bdf6:	61b8      	str	r0, [r7, #24]
 800bdf8:	69b8      	ldr	r0, [r7, #24]
 800bdfa:	f009 fce9 	bl	80157d0 <sys_arch_unprotect>
    return;
 800bdfe:	e012      	b.n	800be26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	2200      	movs	r2, #0
 800be04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800be06:	4b12      	ldr	r3, [pc, #72]	; (800be50 <mem_free+0x11c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d202      	bcs.n	800be16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800be10:	4a0f      	ldr	r2, [pc, #60]	; (800be50 <mem_free+0x11c>)
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800be16:	69f8      	ldr	r0, [r7, #28]
 800be18:	f7ff fe5c 	bl	800bad4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be1c:	4809      	ldr	r0, [pc, #36]	; (800be44 <mem_free+0x110>)
 800be1e:	f009 fc96 	bl	801574e <sys_mutex_unlock>
 800be22:	e000      	b.n	800be26 <mem_free+0xf2>
    return;
 800be24:	bf00      	nop
}
 800be26:	3720      	adds	r7, #32
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08016e58 	.word	0x08016e58
 800be30:	08016f48 	.word	0x08016f48
 800be34:	08016ea0 	.word	0x08016ea0
 800be38:	20041f78 	.word	0x20041f78
 800be3c:	20041f7c 	.word	0x20041f7c
 800be40:	08016f6c 	.word	0x08016f6c
 800be44:	20041f80 	.word	0x20041f80
 800be48:	08016f88 	.word	0x08016f88
 800be4c:	08016fb0 	.word	0x08016fb0
 800be50:	20041f84 	.word	0x20041f84

0800be54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800be60:	887b      	ldrh	r3, [r7, #2]
 800be62:	3303      	adds	r3, #3
 800be64:	b29b      	uxth	r3, r3
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800be6c:	8bfb      	ldrh	r3, [r7, #30]
 800be6e:	2b0b      	cmp	r3, #11
 800be70:	d801      	bhi.n	800be76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800be72:	230c      	movs	r3, #12
 800be74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800be76:	8bfb      	ldrh	r3, [r7, #30]
 800be78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be7c:	d803      	bhi.n	800be86 <mem_trim+0x32>
 800be7e:	8bfa      	ldrh	r2, [r7, #30]
 800be80:	887b      	ldrh	r3, [r7, #2]
 800be82:	429a      	cmp	r2, r3
 800be84:	d201      	bcs.n	800be8a <mem_trim+0x36>
    return NULL;
 800be86:	2300      	movs	r3, #0
 800be88:	e0d8      	b.n	800c03c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800be8a:	4b6e      	ldr	r3, [pc, #440]	; (800c044 <mem_trim+0x1f0>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	429a      	cmp	r2, r3
 800be92:	d304      	bcc.n	800be9e <mem_trim+0x4a>
 800be94:	4b6c      	ldr	r3, [pc, #432]	; (800c048 <mem_trim+0x1f4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d306      	bcc.n	800beac <mem_trim+0x58>
 800be9e:	4b6b      	ldr	r3, [pc, #428]	; (800c04c <mem_trim+0x1f8>)
 800bea0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bea4:	496a      	ldr	r1, [pc, #424]	; (800c050 <mem_trim+0x1fc>)
 800bea6:	486b      	ldr	r0, [pc, #428]	; (800c054 <mem_trim+0x200>)
 800bea8:	f009 fe2e 	bl	8015b08 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800beac:	4b65      	ldr	r3, [pc, #404]	; (800c044 <mem_trim+0x1f0>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d304      	bcc.n	800bec0 <mem_trim+0x6c>
 800beb6:	4b64      	ldr	r3, [pc, #400]	; (800c048 <mem_trim+0x1f4>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d307      	bcc.n	800bed0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bec0:	f009 fc78 	bl	80157b4 <sys_arch_protect>
 800bec4:	60b8      	str	r0, [r7, #8]
 800bec6:	68b8      	ldr	r0, [r7, #8]
 800bec8:	f009 fc82 	bl	80157d0 <sys_arch_unprotect>
    return rmem;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	e0b5      	b.n	800c03c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	3b08      	subs	r3, #8
 800bed4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bed6:	69b8      	ldr	r0, [r7, #24]
 800bed8:	f7ff fdea 	bl	800bab0 <mem_to_ptr>
 800bedc:	4603      	mov	r3, r0
 800bede:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	881a      	ldrh	r2, [r3, #0]
 800bee4:	8afb      	ldrh	r3, [r7, #22]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	b29b      	uxth	r3, r3
 800beea:	3b08      	subs	r3, #8
 800beec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800beee:	8bfa      	ldrh	r2, [r7, #30]
 800bef0:	8abb      	ldrh	r3, [r7, #20]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d906      	bls.n	800bf04 <mem_trim+0xb0>
 800bef6:	4b55      	ldr	r3, [pc, #340]	; (800c04c <mem_trim+0x1f8>)
 800bef8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800befc:	4956      	ldr	r1, [pc, #344]	; (800c058 <mem_trim+0x204>)
 800befe:	4855      	ldr	r0, [pc, #340]	; (800c054 <mem_trim+0x200>)
 800bf00:	f009 fe02 	bl	8015b08 <iprintf>
  if (newsize > size) {
 800bf04:	8bfa      	ldrh	r2, [r7, #30]
 800bf06:	8abb      	ldrh	r3, [r7, #20]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d901      	bls.n	800bf10 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e095      	b.n	800c03c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bf10:	8bfa      	ldrh	r2, [r7, #30]
 800bf12:	8abb      	ldrh	r3, [r7, #20]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d101      	bne.n	800bf1c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	e08f      	b.n	800c03c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bf1c:	484f      	ldr	r0, [pc, #316]	; (800c05c <mem_trim+0x208>)
 800bf1e:	f009 fc07 	bl	8015730 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	881b      	ldrh	r3, [r3, #0]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff fdb0 	bl	800ba8c <ptr_to_mem>
 800bf2c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	791b      	ldrb	r3, [r3, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d13f      	bne.n	800bfb6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf3e:	d106      	bne.n	800bf4e <mem_trim+0xfa>
 800bf40:	4b42      	ldr	r3, [pc, #264]	; (800c04c <mem_trim+0x1f8>)
 800bf42:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bf46:	4946      	ldr	r1, [pc, #280]	; (800c060 <mem_trim+0x20c>)
 800bf48:	4842      	ldr	r0, [pc, #264]	; (800c054 <mem_trim+0x200>)
 800bf4a:	f009 fddd 	bl	8015b08 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf54:	8afa      	ldrh	r2, [r7, #22]
 800bf56:	8bfb      	ldrh	r3, [r7, #30]
 800bf58:	4413      	add	r3, r2
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bf60:	4b40      	ldr	r3, [pc, #256]	; (800c064 <mem_trim+0x210>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d106      	bne.n	800bf78 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bf6a:	89fb      	ldrh	r3, [r7, #14]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fd8d 	bl	800ba8c <ptr_to_mem>
 800bf72:	4603      	mov	r3, r0
 800bf74:	4a3b      	ldr	r2, [pc, #236]	; (800c064 <mem_trim+0x210>)
 800bf76:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bf78:	89fb      	ldrh	r3, [r7, #14]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fd86 	bl	800ba8c <ptr_to_mem>
 800bf80:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	2200      	movs	r2, #0
 800bf86:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	89ba      	ldrh	r2, [r7, #12]
 800bf8c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	8afa      	ldrh	r2, [r7, #22]
 800bf92:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	89fa      	ldrh	r2, [r7, #14]
 800bf98:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	881b      	ldrh	r3, [r3, #0]
 800bf9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfa2:	d047      	beq.n	800c034 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fd6f 	bl	800ba8c <ptr_to_mem>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	89fb      	ldrh	r3, [r7, #14]
 800bfb2:	8053      	strh	r3, [r2, #2]
 800bfb4:	e03e      	b.n	800c034 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bfb6:	8bfb      	ldrh	r3, [r7, #30]
 800bfb8:	f103 0214 	add.w	r2, r3, #20
 800bfbc:	8abb      	ldrh	r3, [r7, #20]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d838      	bhi.n	800c034 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bfc2:	8afa      	ldrh	r2, [r7, #22]
 800bfc4:	8bfb      	ldrh	r3, [r7, #30]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3308      	adds	r3, #8
 800bfcc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfd6:	d106      	bne.n	800bfe6 <mem_trim+0x192>
 800bfd8:	4b1c      	ldr	r3, [pc, #112]	; (800c04c <mem_trim+0x1f8>)
 800bfda:	f240 3216 	movw	r2, #790	; 0x316
 800bfde:	4920      	ldr	r1, [pc, #128]	; (800c060 <mem_trim+0x20c>)
 800bfe0:	481c      	ldr	r0, [pc, #112]	; (800c054 <mem_trim+0x200>)
 800bfe2:	f009 fd91 	bl	8015b08 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bfe6:	89fb      	ldrh	r3, [r7, #14]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff fd4f 	bl	800ba8c <ptr_to_mem>
 800bfee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bff0:	4b1c      	ldr	r3, [pc, #112]	; (800c064 <mem_trim+0x210>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d202      	bcs.n	800c000 <mem_trim+0x1ac>
      lfree = mem2;
 800bffa:	4a1a      	ldr	r2, [pc, #104]	; (800c064 <mem_trim+0x210>)
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	2200      	movs	r2, #0
 800c004:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	881a      	ldrh	r2, [r3, #0]
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	8afa      	ldrh	r2, [r7, #22]
 800c012:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	89fa      	ldrh	r2, [r7, #14]
 800c018:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c022:	d007      	beq.n	800c034 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff fd2f 	bl	800ba8c <ptr_to_mem>
 800c02e:	4602      	mov	r2, r0
 800c030:	89fb      	ldrh	r3, [r7, #14]
 800c032:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c034:	4809      	ldr	r0, [pc, #36]	; (800c05c <mem_trim+0x208>)
 800c036:	f009 fb8a 	bl	801574e <sys_mutex_unlock>
  return rmem;
 800c03a:	687b      	ldr	r3, [r7, #4]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3720      	adds	r7, #32
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20041f78 	.word	0x20041f78
 800c048:	20041f7c 	.word	0x20041f7c
 800c04c:	08016e58 	.word	0x08016e58
 800c050:	08016fe4 	.word	0x08016fe4
 800c054:	08016ea0 	.word	0x08016ea0
 800c058:	08016ffc 	.word	0x08016ffc
 800c05c:	20041f80 	.word	0x20041f80
 800c060:	0801701c 	.word	0x0801701c
 800c064:	20041f84 	.word	0x20041f84

0800c068 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c072:	88fb      	ldrh	r3, [r7, #6]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <mem_malloc+0x14>
    return NULL;
 800c078:	2300      	movs	r3, #0
 800c07a:	e0e2      	b.n	800c242 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c07c:	88fb      	ldrh	r3, [r7, #6]
 800c07e:	3303      	adds	r3, #3
 800c080:	b29b      	uxth	r3, r3
 800c082:	f023 0303 	bic.w	r3, r3, #3
 800c086:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c088:	8bbb      	ldrh	r3, [r7, #28]
 800c08a:	2b0b      	cmp	r3, #11
 800c08c:	d801      	bhi.n	800c092 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c08e:	230c      	movs	r3, #12
 800c090:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c092:	8bbb      	ldrh	r3, [r7, #28]
 800c094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c098:	d803      	bhi.n	800c0a2 <mem_malloc+0x3a>
 800c09a:	8bba      	ldrh	r2, [r7, #28]
 800c09c:	88fb      	ldrh	r3, [r7, #6]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d201      	bcs.n	800c0a6 <mem_malloc+0x3e>
    return NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e0cd      	b.n	800c242 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c0a6:	4869      	ldr	r0, [pc, #420]	; (800c24c <mem_malloc+0x1e4>)
 800c0a8:	f009 fb42 	bl	8015730 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c0ac:	4b68      	ldr	r3, [pc, #416]	; (800c250 <mem_malloc+0x1e8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7ff fcfd 	bl	800bab0 <mem_to_ptr>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	83fb      	strh	r3, [r7, #30]
 800c0ba:	e0b7      	b.n	800c22c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c0bc:	8bfb      	ldrh	r3, [r7, #30]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7ff fce4 	bl	800ba8c <ptr_to_mem>
 800c0c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	791b      	ldrb	r3, [r3, #4]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f040 80a7 	bne.w	800c21e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	8bfb      	ldrh	r3, [r7, #30]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	f1a3 0208 	sub.w	r2, r3, #8
 800c0de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	f0c0 809c 	bcc.w	800c21e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	8bfb      	ldrh	r3, [r7, #30]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	f1a3 0208 	sub.w	r2, r3, #8
 800c0f4:	8bbb      	ldrh	r3, [r7, #28]
 800c0f6:	3314      	adds	r3, #20
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d333      	bcc.n	800c164 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c0fc:	8bfa      	ldrh	r2, [r7, #30]
 800c0fe:	8bbb      	ldrh	r3, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	b29b      	uxth	r3, r3
 800c104:	3308      	adds	r3, #8
 800c106:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c108:	8a7b      	ldrh	r3, [r7, #18]
 800c10a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c10e:	d106      	bne.n	800c11e <mem_malloc+0xb6>
 800c110:	4b50      	ldr	r3, [pc, #320]	; (800c254 <mem_malloc+0x1ec>)
 800c112:	f240 3287 	movw	r2, #903	; 0x387
 800c116:	4950      	ldr	r1, [pc, #320]	; (800c258 <mem_malloc+0x1f0>)
 800c118:	4850      	ldr	r0, [pc, #320]	; (800c25c <mem_malloc+0x1f4>)
 800c11a:	f009 fcf5 	bl	8015b08 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c11e:	8a7b      	ldrh	r3, [r7, #18]
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fcb3 	bl	800ba8c <ptr_to_mem>
 800c126:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	881a      	ldrh	r2, [r3, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	8bfa      	ldrh	r2, [r7, #30]
 800c13a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	8a7a      	ldrh	r2, [r7, #18]
 800c140:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2201      	movs	r2, #1
 800c146:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c150:	d00b      	beq.n	800c16a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	4618      	mov	r0, r3
 800c158:	f7ff fc98 	bl	800ba8c <ptr_to_mem>
 800c15c:	4602      	mov	r2, r0
 800c15e:	8a7b      	ldrh	r3, [r7, #18]
 800c160:	8053      	strh	r3, [r2, #2]
 800c162:	e002      	b.n	800c16a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2201      	movs	r2, #1
 800c168:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c16a:	4b39      	ldr	r3, [pc, #228]	; (800c250 <mem_malloc+0x1e8>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	429a      	cmp	r2, r3
 800c172:	d127      	bne.n	800c1c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c174:	4b36      	ldr	r3, [pc, #216]	; (800c250 <mem_malloc+0x1e8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c17a:	e005      	b.n	800c188 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff fc83 	bl	800ba8c <ptr_to_mem>
 800c186:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	791b      	ldrb	r3, [r3, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d004      	beq.n	800c19a <mem_malloc+0x132>
 800c190:	4b33      	ldr	r3, [pc, #204]	; (800c260 <mem_malloc+0x1f8>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	69ba      	ldr	r2, [r7, #24]
 800c196:	429a      	cmp	r2, r3
 800c198:	d1f0      	bne.n	800c17c <mem_malloc+0x114>
          }
          lfree = cur;
 800c19a:	4a2d      	ldr	r2, [pc, #180]	; (800c250 <mem_malloc+0x1e8>)
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c1a0:	4b2b      	ldr	r3, [pc, #172]	; (800c250 <mem_malloc+0x1e8>)
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	4b2e      	ldr	r3, [pc, #184]	; (800c260 <mem_malloc+0x1f8>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d00b      	beq.n	800c1c4 <mem_malloc+0x15c>
 800c1ac:	4b28      	ldr	r3, [pc, #160]	; (800c250 <mem_malloc+0x1e8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	791b      	ldrb	r3, [r3, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d006      	beq.n	800c1c4 <mem_malloc+0x15c>
 800c1b6:	4b27      	ldr	r3, [pc, #156]	; (800c254 <mem_malloc+0x1ec>)
 800c1b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c1bc:	4929      	ldr	r1, [pc, #164]	; (800c264 <mem_malloc+0x1fc>)
 800c1be:	4827      	ldr	r0, [pc, #156]	; (800c25c <mem_malloc+0x1f4>)
 800c1c0:	f009 fca2 	bl	8015b08 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c1c4:	4821      	ldr	r0, [pc, #132]	; (800c24c <mem_malloc+0x1e4>)
 800c1c6:	f009 fac2 	bl	801574e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c1ca:	8bba      	ldrh	r2, [r7, #28]
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	4a23      	ldr	r2, [pc, #140]	; (800c260 <mem_malloc+0x1f8>)
 800c1d4:	6812      	ldr	r2, [r2, #0]
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d906      	bls.n	800c1e8 <mem_malloc+0x180>
 800c1da:	4b1e      	ldr	r3, [pc, #120]	; (800c254 <mem_malloc+0x1ec>)
 800c1dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c1e0:	4921      	ldr	r1, [pc, #132]	; (800c268 <mem_malloc+0x200>)
 800c1e2:	481e      	ldr	r0, [pc, #120]	; (800c25c <mem_malloc+0x1f4>)
 800c1e4:	f009 fc90 	bl	8015b08 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d006      	beq.n	800c200 <mem_malloc+0x198>
 800c1f2:	4b18      	ldr	r3, [pc, #96]	; (800c254 <mem_malloc+0x1ec>)
 800c1f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c1f8:	491c      	ldr	r1, [pc, #112]	; (800c26c <mem_malloc+0x204>)
 800c1fa:	4818      	ldr	r0, [pc, #96]	; (800c25c <mem_malloc+0x1f4>)
 800c1fc:	f009 fc84 	bl	8015b08 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	f003 0303 	and.w	r3, r3, #3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d006      	beq.n	800c218 <mem_malloc+0x1b0>
 800c20a:	4b12      	ldr	r3, [pc, #72]	; (800c254 <mem_malloc+0x1ec>)
 800c20c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c210:	4917      	ldr	r1, [pc, #92]	; (800c270 <mem_malloc+0x208>)
 800c212:	4812      	ldr	r0, [pc, #72]	; (800c25c <mem_malloc+0x1f4>)
 800c214:	f009 fc78 	bl	8015b08 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	3308      	adds	r3, #8
 800c21c:	e011      	b.n	800c242 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c21e:	8bfb      	ldrh	r3, [r7, #30]
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fc33 	bl	800ba8c <ptr_to_mem>
 800c226:	4603      	mov	r3, r0
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c22c:	8bfa      	ldrh	r2, [r7, #30]
 800c22e:	8bbb      	ldrh	r3, [r7, #28]
 800c230:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c234:	429a      	cmp	r2, r3
 800c236:	f4ff af41 	bcc.w	800c0bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c23a:	4804      	ldr	r0, [pc, #16]	; (800c24c <mem_malloc+0x1e4>)
 800c23c:	f009 fa87 	bl	801574e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20041f80 	.word	0x20041f80
 800c250:	20041f84 	.word	0x20041f84
 800c254:	08016e58 	.word	0x08016e58
 800c258:	0801701c 	.word	0x0801701c
 800c25c:	08016ea0 	.word	0x08016ea0
 800c260:	20041f7c 	.word	0x20041f7c
 800c264:	08017030 	.word	0x08017030
 800c268:	0801704c 	.word	0x0801704c
 800c26c:	0801707c 	.word	0x0801707c
 800c270:	080170ac 	.word	0x080170ac

0800c274 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	3303      	adds	r3, #3
 800c28a:	f023 0303 	bic.w	r3, r3, #3
 800c28e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c290:	2300      	movs	r3, #0
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	e011      	b.n	800c2ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	885b      	ldrh	r3, [r3, #2]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	dbe7      	blt.n	800c296 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c2c6:	bf00      	nop
 800c2c8:	bf00      	nop
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c2da:	2300      	movs	r3, #0
 800c2dc:	80fb      	strh	r3, [r7, #6]
 800c2de:	e009      	b.n	800c2f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c2e0:	88fb      	ldrh	r3, [r7, #6]
 800c2e2:	4a08      	ldr	r2, [pc, #32]	; (800c304 <memp_init+0x30>)
 800c2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7ff ffc3 	bl	800c274 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c2ee:	88fb      	ldrh	r3, [r7, #6]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	80fb      	strh	r3, [r7, #6]
 800c2f4:	88fb      	ldrh	r3, [r7, #6]
 800c2f6:	2b0c      	cmp	r3, #12
 800c2f8:	d9f2      	bls.n	800c2e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c2fa:	bf00      	nop
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	080198c8 	.word	0x080198c8

0800c308 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c310:	f009 fa50 	bl	80157b4 <sys_arch_protect>
 800c314:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d015      	beq.n	800c350 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	f003 0303 	and.w	r3, r3, #3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d006      	beq.n	800c346 <do_memp_malloc_pool+0x3e>
 800c338:	4b09      	ldr	r3, [pc, #36]	; (800c360 <do_memp_malloc_pool+0x58>)
 800c33a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c33e:	4909      	ldr	r1, [pc, #36]	; (800c364 <do_memp_malloc_pool+0x5c>)
 800c340:	4809      	ldr	r0, [pc, #36]	; (800c368 <do_memp_malloc_pool+0x60>)
 800c342:	f009 fbe1 	bl	8015b08 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f009 fa42 	bl	80157d0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	e003      	b.n	800c358 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f009 fa3d 	bl	80157d0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	080170d0 	.word	0x080170d0
 800c364:	08017100 	.word	0x08017100
 800c368:	08017124 	.word	0x08017124

0800c36c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d106      	bne.n	800c388 <memp_malloc_pool+0x1c>
 800c37a:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <memp_malloc_pool+0x38>)
 800c37c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c380:	4909      	ldr	r1, [pc, #36]	; (800c3a8 <memp_malloc_pool+0x3c>)
 800c382:	480a      	ldr	r0, [pc, #40]	; (800c3ac <memp_malloc_pool+0x40>)
 800c384:	f009 fbc0 	bl	8015b08 <iprintf>
  if (desc == NULL) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d101      	bne.n	800c392 <memp_malloc_pool+0x26>
    return NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	e003      	b.n	800c39a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff ffb8 	bl	800c308 <do_memp_malloc_pool>
 800c398:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	080170d0 	.word	0x080170d0
 800c3a8:	0801714c 	.word	0x0801714c
 800c3ac:	08017124 	.word	0x08017124

0800c3b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c3ba:	79fb      	ldrb	r3, [r7, #7]
 800c3bc:	2b0c      	cmp	r3, #12
 800c3be:	d908      	bls.n	800c3d2 <memp_malloc+0x22>
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <memp_malloc+0x3c>)
 800c3c2:	f240 1257 	movw	r2, #343	; 0x157
 800c3c6:	490a      	ldr	r1, [pc, #40]	; (800c3f0 <memp_malloc+0x40>)
 800c3c8:	480a      	ldr	r0, [pc, #40]	; (800c3f4 <memp_malloc+0x44>)
 800c3ca:	f009 fb9d 	bl	8015b08 <iprintf>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e008      	b.n	800c3e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c3d2:	79fb      	ldrb	r3, [r7, #7]
 800c3d4:	4a08      	ldr	r2, [pc, #32]	; (800c3f8 <memp_malloc+0x48>)
 800c3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7ff ff94 	bl	800c308 <do_memp_malloc_pool>
 800c3e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	080170d0 	.word	0x080170d0
 800c3f0:	08017160 	.word	0x08017160
 800c3f4:	08017124 	.word	0x08017124
 800c3f8:	080198c8 	.word	0x080198c8

0800c3fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	f003 0303 	and.w	r3, r3, #3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d006      	beq.n	800c41e <do_memp_free_pool+0x22>
 800c410:	4b0d      	ldr	r3, [pc, #52]	; (800c448 <do_memp_free_pool+0x4c>)
 800c412:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c416:	490d      	ldr	r1, [pc, #52]	; (800c44c <do_memp_free_pool+0x50>)
 800c418:	480d      	ldr	r0, [pc, #52]	; (800c450 <do_memp_free_pool+0x54>)
 800c41a:	f009 fb75 	bl	8015b08 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c422:	f009 f9c7 	bl	80157b4 <sys_arch_protect>
 800c426:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c43a:	68b8      	ldr	r0, [r7, #8]
 800c43c:	f009 f9c8 	bl	80157d0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c440:	bf00      	nop
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	080170d0 	.word	0x080170d0
 800c44c:	08017180 	.word	0x08017180
 800c450:	08017124 	.word	0x08017124

0800c454 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d106      	bne.n	800c472 <memp_free_pool+0x1e>
 800c464:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <memp_free_pool+0x3c>)
 800c466:	f240 1295 	movw	r2, #405	; 0x195
 800c46a:	490a      	ldr	r1, [pc, #40]	; (800c494 <memp_free_pool+0x40>)
 800c46c:	480a      	ldr	r0, [pc, #40]	; (800c498 <memp_free_pool+0x44>)
 800c46e:	f009 fb4b 	bl	8015b08 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d007      	beq.n	800c488 <memp_free_pool+0x34>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d004      	beq.n	800c488 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ffbb 	bl	800c3fc <do_memp_free_pool>
 800c486:	e000      	b.n	800c48a <memp_free_pool+0x36>
    return;
 800c488:	bf00      	nop
}
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	080170d0 	.word	0x080170d0
 800c494:	0801714c 	.word	0x0801714c
 800c498:	08017124 	.word	0x08017124

0800c49c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b0c      	cmp	r3, #12
 800c4ac:	d907      	bls.n	800c4be <memp_free+0x22>
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <memp_free+0x44>)
 800c4b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c4b4:	490b      	ldr	r1, [pc, #44]	; (800c4e4 <memp_free+0x48>)
 800c4b6:	480c      	ldr	r0, [pc, #48]	; (800c4e8 <memp_free+0x4c>)
 800c4b8:	f009 fb26 	bl	8015b08 <iprintf>
 800c4bc:	e00c      	b.n	800c4d8 <memp_free+0x3c>

  if (mem == NULL) {
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d008      	beq.n	800c4d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	4a09      	ldr	r2, [pc, #36]	; (800c4ec <memp_free+0x50>)
 800c4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7ff ff94 	bl	800c3fc <do_memp_free_pool>
 800c4d4:	e000      	b.n	800c4d8 <memp_free+0x3c>
    return;
 800c4d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	080170d0 	.word	0x080170d0
 800c4e4:	080171a0 	.word	0x080171a0
 800c4e8:	08017124 	.word	0x08017124
 800c4ec:	080198c8 	.word	0x080198c8

0800c4f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c4f4:	bf00      	nop
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
	...

0800c500 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d108      	bne.n	800c526 <netif_add+0x26>
 800c514:	4b57      	ldr	r3, [pc, #348]	; (800c674 <netif_add+0x174>)
 800c516:	f240 1227 	movw	r2, #295	; 0x127
 800c51a:	4957      	ldr	r1, [pc, #348]	; (800c678 <netif_add+0x178>)
 800c51c:	4857      	ldr	r0, [pc, #348]	; (800c67c <netif_add+0x17c>)
 800c51e:	f009 faf3 	bl	8015b08 <iprintf>
 800c522:	2300      	movs	r3, #0
 800c524:	e0a2      	b.n	800c66c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d108      	bne.n	800c53e <netif_add+0x3e>
 800c52c:	4b51      	ldr	r3, [pc, #324]	; (800c674 <netif_add+0x174>)
 800c52e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c532:	4953      	ldr	r1, [pc, #332]	; (800c680 <netif_add+0x180>)
 800c534:	4851      	ldr	r0, [pc, #324]	; (800c67c <netif_add+0x17c>)
 800c536:	f009 fae7 	bl	8015b08 <iprintf>
 800c53a:	2300      	movs	r3, #0
 800c53c:	e096      	b.n	800c66c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c544:	4b4f      	ldr	r3, [pc, #316]	; (800c684 <netif_add+0x184>)
 800c546:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c54e:	4b4d      	ldr	r3, [pc, #308]	; (800c684 <netif_add+0x184>)
 800c550:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c558:	4b4a      	ldr	r3, [pc, #296]	; (800c684 <netif_add+0x184>)
 800c55a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4a45      	ldr	r2, [pc, #276]	; (800c688 <netif_add+0x188>)
 800c572:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6a3a      	ldr	r2, [r7, #32]
 800c58c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c58e:	4b3f      	ldr	r3, [pc, #252]	; (800c68c <netif_add+0x18c>)
 800c590:	781a      	ldrb	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c59c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 f913 	bl	800c7d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	4798      	blx	r3
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <netif_add+0xba>
    return NULL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e058      	b.n	800c66c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5c0:	2bff      	cmp	r3, #255	; 0xff
 800c5c2:	d103      	bne.n	800c5cc <netif_add+0xcc>
        netif->num = 0;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c5d0:	4b2f      	ldr	r3, [pc, #188]	; (800c690 <netif_add+0x190>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	e02b      	b.n	800c630 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d106      	bne.n	800c5ee <netif_add+0xee>
 800c5e0:	4b24      	ldr	r3, [pc, #144]	; (800c674 <netif_add+0x174>)
 800c5e2:	f240 128b 	movw	r2, #395	; 0x18b
 800c5e6:	492b      	ldr	r1, [pc, #172]	; (800c694 <netif_add+0x194>)
 800c5e8:	4824      	ldr	r0, [pc, #144]	; (800c67c <netif_add+0x17c>)
 800c5ea:	f009 fa8d 	bl	8015b08 <iprintf>
        num_netifs++;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	2bff      	cmp	r3, #255	; 0xff
 800c5f8:	dd06      	ble.n	800c608 <netif_add+0x108>
 800c5fa:	4b1e      	ldr	r3, [pc, #120]	; (800c674 <netif_add+0x174>)
 800c5fc:	f240 128d 	movw	r2, #397	; 0x18d
 800c600:	4925      	ldr	r1, [pc, #148]	; (800c698 <netif_add+0x198>)
 800c602:	481e      	ldr	r0, [pc, #120]	; (800c67c <netif_add+0x17c>)
 800c604:	f009 fa80 	bl	8015b08 <iprintf>
        if (netif2->num == netif->num) {
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c614:	429a      	cmp	r2, r3
 800c616:	d108      	bne.n	800c62a <netif_add+0x12a>
          netif->num++;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c61e:	3301      	adds	r3, #1
 800c620:	b2da      	uxtb	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c628:	e005      	b.n	800c636 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1d0      	bne.n	800c5d8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1be      	bne.n	800c5ba <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c642:	2bfe      	cmp	r3, #254	; 0xfe
 800c644:	d103      	bne.n	800c64e <netif_add+0x14e>
    netif_num = 0;
 800c646:	4b11      	ldr	r3, [pc, #68]	; (800c68c <netif_add+0x18c>)
 800c648:	2200      	movs	r2, #0
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	e006      	b.n	800c65c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c654:	3301      	adds	r3, #1
 800c656:	b2da      	uxtb	r2, r3
 800c658:	4b0c      	ldr	r3, [pc, #48]	; (800c68c <netif_add+0x18c>)
 800c65a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c65c:	4b0c      	ldr	r3, [pc, #48]	; (800c690 <netif_add+0x190>)
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c664:	4a0a      	ldr	r2, [pc, #40]	; (800c690 <netif_add+0x190>)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c66a:	68fb      	ldr	r3, [r7, #12]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	080171bc 	.word	0x080171bc
 800c678:	08017250 	.word	0x08017250
 800c67c:	0801720c 	.word	0x0801720c
 800c680:	0801726c 	.word	0x0801726c
 800c684:	0801993c 	.word	0x0801993c
 800c688:	0800caab 	.word	0x0800caab
 800c68c:	2004505c 	.word	0x2004505c
 800c690:	20045054 	.word	0x20045054
 800c694:	08017290 	.word	0x08017290
 800c698:	080172a4 	.word	0x080172a4

0800c69c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f002 fb7d 	bl	800eda8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f006 fc91 	bl	8012fd8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c6b6:	bf00      	nop
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
	...

0800c6c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d106      	bne.n	800c6e0 <netif_do_set_ipaddr+0x20>
 800c6d2:	4b1d      	ldr	r3, [pc, #116]	; (800c748 <netif_do_set_ipaddr+0x88>)
 800c6d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c6d8:	491c      	ldr	r1, [pc, #112]	; (800c74c <netif_do_set_ipaddr+0x8c>)
 800c6da:	481d      	ldr	r0, [pc, #116]	; (800c750 <netif_do_set_ipaddr+0x90>)
 800c6dc:	f009 fa14 	bl	8015b08 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d106      	bne.n	800c6f4 <netif_do_set_ipaddr+0x34>
 800c6e6:	4b18      	ldr	r3, [pc, #96]	; (800c748 <netif_do_set_ipaddr+0x88>)
 800c6e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c6ec:	4917      	ldr	r1, [pc, #92]	; (800c74c <netif_do_set_ipaddr+0x8c>)
 800c6ee:	4818      	ldr	r0, [pc, #96]	; (800c750 <netif_do_set_ipaddr+0x90>)
 800c6f0:	f009 fa0a 	bl	8015b08 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	3304      	adds	r3, #4
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d01c      	beq.n	800c73c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	3304      	adds	r3, #4
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c712:	f107 0314 	add.w	r3, r7, #20
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff ffbf 	bl	800c69c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <netif_do_set_ipaddr+0x6a>
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	e000      	b.n	800c72c <netif_do_set_ipaddr+0x6c>
 800c72a:	2300      	movs	r3, #0
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c730:	2101      	movs	r1, #1
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 f8d2 	bl	800c8dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c738:	2301      	movs	r3, #1
 800c73a:	e000      	b.n	800c73e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	080171bc 	.word	0x080171bc
 800c74c:	080172d4 	.word	0x080172d4
 800c750:	0801720c 	.word	0x0801720c

0800c754 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3308      	adds	r3, #8
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d00a      	beq.n	800c784 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <netif_do_set_netmask+0x26>
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	e000      	b.n	800c77c <netif_do_set_netmask+0x28>
 800c77a:	2300      	movs	r3, #0
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c780:	2301      	movs	r3, #1
 800c782:	e000      	b.n	800c786 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c792:	b480      	push	{r7}
 800c794:	b085      	sub	sp, #20
 800c796:	af00      	add	r7, sp, #0
 800c798:	60f8      	str	r0, [r7, #12]
 800c79a:	60b9      	str	r1, [r7, #8]
 800c79c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	330c      	adds	r3, #12
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d00a      	beq.n	800c7c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <netif_do_set_gw+0x26>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	e000      	b.n	800c7ba <netif_do_set_gw+0x28>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c7ec:	4b1c      	ldr	r3, [pc, #112]	; (800c860 <netif_set_addr+0x90>)
 800c7ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c7f6:	4b1a      	ldr	r3, [pc, #104]	; (800c860 <netif_set_addr+0x90>)
 800c7f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d101      	bne.n	800c804 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c800:	4b17      	ldr	r3, [pc, #92]	; (800c860 <netif_set_addr+0x90>)
 800c802:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <netif_set_addr+0x42>
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <netif_set_addr+0x46>
 800c812:	2301      	movs	r3, #1
 800c814:	e000      	b.n	800c818 <netif_set_addr+0x48>
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d006      	beq.n	800c82e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c820:	f107 0310 	add.w	r3, r7, #16
 800c824:	461a      	mov	r2, r3
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff ff49 	bl	800c6c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	6879      	ldr	r1, [r7, #4]
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff ff8e 	bl	800c754 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c838:	69ba      	ldr	r2, [r7, #24]
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f7ff ffa8 	bl	800c792 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d106      	bne.n	800c856 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c848:	f107 0310 	add.w	r3, r7, #16
 800c84c:	461a      	mov	r2, r3
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7ff ff35 	bl	800c6c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c856:	bf00      	nop
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	0801993c 	.word	0x0801993c

0800c864 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c86c:	4a04      	ldr	r2, [pc, #16]	; (800c880 <netif_set_default+0x1c>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c872:	bf00      	nop
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	20045058 	.word	0x20045058

0800c884 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d107      	bne.n	800c8a2 <netif_set_up+0x1e>
 800c892:	4b0f      	ldr	r3, [pc, #60]	; (800c8d0 <netif_set_up+0x4c>)
 800c894:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c898:	490e      	ldr	r1, [pc, #56]	; (800c8d4 <netif_set_up+0x50>)
 800c89a:	480f      	ldr	r0, [pc, #60]	; (800c8d8 <netif_set_up+0x54>)
 800c89c:	f009 f934 	bl	8015b08 <iprintf>
 800c8a0:	e013      	b.n	800c8ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10c      	bne.n	800c8ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8b6:	f043 0301 	orr.w	r3, r3, #1
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c8c2:	2103      	movs	r1, #3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f809 	bl	800c8dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	080171bc 	.word	0x080171bc
 800c8d4:	08017344 	.word	0x08017344
 800c8d8:	0801720c 	.word	0x0801720c

0800c8dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <netif_issue_reports+0x20>
 800c8ee:	4b18      	ldr	r3, [pc, #96]	; (800c950 <netif_issue_reports+0x74>)
 800c8f0:	f240 326d 	movw	r2, #877	; 0x36d
 800c8f4:	4917      	ldr	r1, [pc, #92]	; (800c954 <netif_issue_reports+0x78>)
 800c8f6:	4818      	ldr	r0, [pc, #96]	; (800c958 <netif_issue_reports+0x7c>)
 800c8f8:	f009 f906 	bl	8015b08 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c902:	f003 0304 	and.w	r3, r3, #4
 800c906:	2b00      	cmp	r3, #0
 800c908:	d01e      	beq.n	800c948 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c910:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c914:	2b00      	cmp	r3, #0
 800c916:	d017      	beq.n	800c948 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c918:	78fb      	ldrb	r3, [r7, #3]
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d013      	beq.n	800c94a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3304      	adds	r3, #4
 800c926:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00e      	beq.n	800c94a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c932:	f003 0308 	and.w	r3, r3, #8
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	3304      	adds	r3, #4
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f007 fab3 	bl	8013eac <etharp_request>
 800c946:	e000      	b.n	800c94a <netif_issue_reports+0x6e>
    return;
 800c948:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	080171bc 	.word	0x080171bc
 800c954:	08017360 	.word	0x08017360
 800c958:	0801720c 	.word	0x0801720c

0800c95c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d107      	bne.n	800c97a <netif_set_down+0x1e>
 800c96a:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <netif_set_down+0x58>)
 800c96c:	f240 329b 	movw	r2, #923	; 0x39b
 800c970:	4911      	ldr	r1, [pc, #68]	; (800c9b8 <netif_set_down+0x5c>)
 800c972:	4812      	ldr	r0, [pc, #72]	; (800c9bc <netif_set_down+0x60>)
 800c974:	f009 f8c8 	bl	8015b08 <iprintf>
 800c978:	e019      	b.n	800c9ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d012      	beq.n	800c9ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c98e:	f023 0301 	bic.w	r3, r3, #1
 800c992:	b2da      	uxtb	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f006 fe3d 	bl	8013628 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	080171bc 	.word	0x080171bc
 800c9b8:	08017384 	.word	0x08017384
 800c9bc:	0801720c 	.word	0x0801720c

0800c9c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d107      	bne.n	800c9de <netif_set_link_up+0x1e>
 800c9ce:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <netif_set_link_up+0x5c>)
 800c9d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c9d4:	4912      	ldr	r1, [pc, #72]	; (800ca20 <netif_set_link_up+0x60>)
 800c9d6:	4813      	ldr	r0, [pc, #76]	; (800ca24 <netif_set_link_up+0x64>)
 800c9d8:	f009 f896 	bl	8015b08 <iprintf>
 800c9dc:	e01b      	b.n	800ca16 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9e4:	f003 0304 	and.w	r3, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d114      	bne.n	800ca16 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9f2:	f043 0304 	orr.w	r3, r3, #4
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9fe:	2103      	movs	r1, #3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff ff6b 	bl	800c8dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <netif_set_link_up+0x56>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	080171bc 	.word	0x080171bc
 800ca20:	080173a4 	.word	0x080173a4
 800ca24:	0801720c 	.word	0x0801720c

0800ca28 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d107      	bne.n	800ca46 <netif_set_link_down+0x1e>
 800ca36:	4b11      	ldr	r3, [pc, #68]	; (800ca7c <netif_set_link_down+0x54>)
 800ca38:	f240 4206 	movw	r2, #1030	; 0x406
 800ca3c:	4910      	ldr	r1, [pc, #64]	; (800ca80 <netif_set_link_down+0x58>)
 800ca3e:	4811      	ldr	r0, [pc, #68]	; (800ca84 <netif_set_link_down+0x5c>)
 800ca40:	f009 f862 	bl	8015b08 <iprintf>
 800ca44:	e017      	b.n	800ca76 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca4c:	f003 0304 	and.w	r3, r3, #4
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d010      	beq.n	800ca76 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca5a:	f023 0304 	bic.w	r3, r3, #4
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <netif_set_link_down+0x4e>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	080171bc 	.word	0x080171bc
 800ca80:	080173c8 	.word	0x080173c8
 800ca84:	0801720c 	.word	0x0801720c

0800ca88 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	61da      	str	r2, [r3, #28]
  }
}
 800ca9e:	bf00      	nop
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800caaa:	b480      	push	{r7}
 800caac:	b085      	sub	sp, #20
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cab6:	f06f 030b 	mvn.w	r3, #11
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
	...

0800cac8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	4603      	mov	r3, r0
 800cad0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d013      	beq.n	800cb00 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cad8:	4b0d      	ldr	r3, [pc, #52]	; (800cb10 <netif_get_by_index+0x48>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	e00c      	b.n	800cafa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cae6:	3301      	adds	r3, #1
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	79fa      	ldrb	r2, [r7, #7]
 800caec:	429a      	cmp	r2, r3
 800caee:	d101      	bne.n	800caf4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	e006      	b.n	800cb02 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	60fb      	str	r3, [r7, #12]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1ef      	bne.n	800cae0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	20045054 	.word	0x20045054

0800cb14 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cb1a:	f008 fe4b 	bl	80157b4 <sys_arch_protect>
 800cb1e:	6038      	str	r0, [r7, #0]
 800cb20:	4b0d      	ldr	r3, [pc, #52]	; (800cb58 <pbuf_free_ooseq+0x44>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	6838      	ldr	r0, [r7, #0]
 800cb28:	f008 fe52 	bl	80157d0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb2c:	4b0b      	ldr	r3, [pc, #44]	; (800cb5c <pbuf_free_ooseq+0x48>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	607b      	str	r3, [r7, #4]
 800cb32:	e00a      	b.n	800cb4a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f002 f971 	bl	800ee24 <tcp_free_ooseq>
      return;
 800cb42:	e005      	b.n	800cb50 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	607b      	str	r3, [r7, #4]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1f1      	bne.n	800cb34 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	2004505d 	.word	0x2004505d
 800cb5c:	2004506c 	.word	0x2004506c

0800cb60 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cb68:	f7ff ffd4 	bl	800cb14 <pbuf_free_ooseq>
}
 800cb6c:	bf00      	nop
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cb7a:	f008 fe1b 	bl	80157b4 <sys_arch_protect>
 800cb7e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cb80:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <pbuf_pool_is_empty+0x4c>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cb86:	4b0e      	ldr	r3, [pc, #56]	; (800cbc0 <pbuf_pool_is_empty+0x4c>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f008 fe1f 	bl	80157d0 <sys_arch_unprotect>

  if (!queued) {
 800cb92:	78fb      	ldrb	r3, [r7, #3]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10f      	bne.n	800cbb8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cb98:	2100      	movs	r1, #0
 800cb9a:	480a      	ldr	r0, [pc, #40]	; (800cbc4 <pbuf_pool_is_empty+0x50>)
 800cb9c:	f7fe fea6 	bl	800b8ec <tcpip_try_callback>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d008      	beq.n	800cbb8 <pbuf_pool_is_empty+0x44>
 800cba6:	f008 fe05 	bl	80157b4 <sys_arch_protect>
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	4b04      	ldr	r3, [pc, #16]	; (800cbc0 <pbuf_pool_is_empty+0x4c>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f008 fe0c 	bl	80157d0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	2004505d 	.word	0x2004505d
 800cbc4:	0800cb61 	.word	0x0800cb61

0800cbc8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	80fb      	strh	r3, [r7, #6]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	88fa      	ldrh	r2, [r7, #6]
 800cbee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	88ba      	ldrh	r2, [r7, #4]
 800cbf4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cbf6:	8b3b      	ldrh	r3, [r7, #24]
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	7f3a      	ldrb	r2, [r7, #28]
 800cc02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2201      	movs	r2, #1
 800cc08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	73da      	strb	r2, [r3, #15]
}
 800cc10:	bf00      	nop
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08c      	sub	sp, #48	; 0x30
 800cc20:	af02      	add	r7, sp, #8
 800cc22:	4603      	mov	r3, r0
 800cc24:	71fb      	strb	r3, [r7, #7]
 800cc26:	460b      	mov	r3, r1
 800cc28:	80bb      	strh	r3, [r7, #4]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cc32:	887b      	ldrh	r3, [r7, #2]
 800cc34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc38:	d07f      	beq.n	800cd3a <pbuf_alloc+0x11e>
 800cc3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc3e:	f300 80c8 	bgt.w	800cdd2 <pbuf_alloc+0x1b6>
 800cc42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc46:	d010      	beq.n	800cc6a <pbuf_alloc+0x4e>
 800cc48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc4c:	f300 80c1 	bgt.w	800cdd2 <pbuf_alloc+0x1b6>
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d002      	beq.n	800cc5a <pbuf_alloc+0x3e>
 800cc54:	2b41      	cmp	r3, #65	; 0x41
 800cc56:	f040 80bc 	bne.w	800cdd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cc5a:	887a      	ldrh	r2, [r7, #2]
 800cc5c:	88bb      	ldrh	r3, [r7, #4]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	2000      	movs	r0, #0
 800cc62:	f000 f8d1 	bl	800ce08 <pbuf_alloc_reference>
 800cc66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cc68:	e0bd      	b.n	800cde6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cc72:	88bb      	ldrh	r3, [r7, #4]
 800cc74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc76:	200c      	movs	r0, #12
 800cc78:	f7ff fb9a 	bl	800c3b0 <memp_malloc>
 800cc7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d109      	bne.n	800cc98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cc84:	f7ff ff76 	bl	800cb74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d002      	beq.n	800cc94 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cc8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc90:	f000 faa8 	bl	800d1e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	e0a7      	b.n	800cde8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc9a:	3303      	adds	r3, #3
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	f023 0303 	bic.w	r3, r3, #3
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	8b7a      	ldrh	r2, [r7, #26]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	bf28      	it	cs
 800ccb0:	4613      	movcs	r3, r2
 800ccb2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ccb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccb6:	3310      	adds	r3, #16
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	4413      	add	r3, r2
 800ccbc:	3303      	adds	r3, #3
 800ccbe:	f023 0303 	bic.w	r3, r3, #3
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	89f9      	ldrh	r1, [r7, #14]
 800ccc6:	8b7a      	ldrh	r2, [r7, #26]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	887b      	ldrh	r3, [r7, #2]
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	6938      	ldr	r0, [r7, #16]
 800ccd6:	f7ff ff77 	bl	800cbc8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f003 0303 	and.w	r3, r3, #3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d006      	beq.n	800ccf4 <pbuf_alloc+0xd8>
 800cce6:	4b42      	ldr	r3, [pc, #264]	; (800cdf0 <pbuf_alloc+0x1d4>)
 800cce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccec:	4941      	ldr	r1, [pc, #260]	; (800cdf4 <pbuf_alloc+0x1d8>)
 800ccee:	4842      	ldr	r0, [pc, #264]	; (800cdf8 <pbuf_alloc+0x1dc>)
 800ccf0:	f008 ff0a 	bl	8015b08 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ccf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccf6:	3303      	adds	r3, #3
 800ccf8:	f023 0303 	bic.w	r3, r3, #3
 800ccfc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd00:	d106      	bne.n	800cd10 <pbuf_alloc+0xf4>
 800cd02:	4b3b      	ldr	r3, [pc, #236]	; (800cdf0 <pbuf_alloc+0x1d4>)
 800cd04:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cd08:	493c      	ldr	r1, [pc, #240]	; (800cdfc <pbuf_alloc+0x1e0>)
 800cd0a:	483b      	ldr	r0, [pc, #236]	; (800cdf8 <pbuf_alloc+0x1dc>)
 800cd0c:	f008 fefc 	bl	8015b08 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d102      	bne.n	800cd1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	627b      	str	r3, [r7, #36]	; 0x24
 800cd1a:	e002      	b.n	800cd22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cd26:	8b7a      	ldrh	r2, [r7, #26]
 800cd28:	89fb      	ldrh	r3, [r7, #14]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cd32:	8b7b      	ldrh	r3, [r7, #26]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d19e      	bne.n	800cc76 <pbuf_alloc+0x5a>
      break;
 800cd38:	e055      	b.n	800cde6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cd3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd3c:	3303      	adds	r3, #3
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	f023 0303 	bic.w	r3, r3, #3
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	88bb      	ldrh	r3, [r7, #4]
 800cd48:	3303      	adds	r3, #3
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	f023 0303 	bic.w	r3, r3, #3
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	4413      	add	r3, r2
 800cd54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cd56:	8b3b      	ldrh	r3, [r7, #24]
 800cd58:	3310      	adds	r3, #16
 800cd5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd5c:	8b3a      	ldrh	r2, [r7, #24]
 800cd5e:	88bb      	ldrh	r3, [r7, #4]
 800cd60:	3303      	adds	r3, #3
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d306      	bcc.n	800cd78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cd6a:	8afa      	ldrh	r2, [r7, #22]
 800cd6c:	88bb      	ldrh	r3, [r7, #4]
 800cd6e:	3303      	adds	r3, #3
 800cd70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d201      	bcs.n	800cd7c <pbuf_alloc+0x160>
        return NULL;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	e035      	b.n	800cde8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cd7c:	8afb      	ldrh	r3, [r7, #22]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7ff f972 	bl	800c068 <mem_malloc>
 800cd84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <pbuf_alloc+0x174>
        return NULL;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	e02b      	b.n	800cde8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cd90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd92:	3310      	adds	r3, #16
 800cd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd96:	4413      	add	r3, r2
 800cd98:	3303      	adds	r3, #3
 800cd9a:	f023 0303 	bic.w	r3, r3, #3
 800cd9e:	4618      	mov	r0, r3
 800cda0:	88b9      	ldrh	r1, [r7, #4]
 800cda2:	88ba      	ldrh	r2, [r7, #4]
 800cda4:	2300      	movs	r3, #0
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	887b      	ldrh	r3, [r7, #2]
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	460b      	mov	r3, r1
 800cdae:	4601      	mov	r1, r0
 800cdb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdb2:	f7ff ff09 	bl	800cbc8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	f003 0303 	and.w	r3, r3, #3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d010      	beq.n	800cde4 <pbuf_alloc+0x1c8>
 800cdc2:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <pbuf_alloc+0x1d4>)
 800cdc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cdc8:	490d      	ldr	r1, [pc, #52]	; (800ce00 <pbuf_alloc+0x1e4>)
 800cdca:	480b      	ldr	r0, [pc, #44]	; (800cdf8 <pbuf_alloc+0x1dc>)
 800cdcc:	f008 fe9c 	bl	8015b08 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cdd0:	e008      	b.n	800cde4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cdd2:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <pbuf_alloc+0x1d4>)
 800cdd4:	f240 1227 	movw	r2, #295	; 0x127
 800cdd8:	490a      	ldr	r1, [pc, #40]	; (800ce04 <pbuf_alloc+0x1e8>)
 800cdda:	4807      	ldr	r0, [pc, #28]	; (800cdf8 <pbuf_alloc+0x1dc>)
 800cddc:	f008 fe94 	bl	8015b08 <iprintf>
      return NULL;
 800cde0:	2300      	movs	r3, #0
 800cde2:	e001      	b.n	800cde8 <pbuf_alloc+0x1cc>
      break;
 800cde4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3728      	adds	r7, #40	; 0x28
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	080173ec 	.word	0x080173ec
 800cdf4:	0801741c 	.word	0x0801741c
 800cdf8:	0801744c 	.word	0x0801744c
 800cdfc:	08017474 	.word	0x08017474
 800ce00:	080174a8 	.word	0x080174a8
 800ce04:	080174d4 	.word	0x080174d4

0800ce08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	460b      	mov	r3, r1
 800ce12:	807b      	strh	r3, [r7, #2]
 800ce14:	4613      	mov	r3, r2
 800ce16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ce18:	883b      	ldrh	r3, [r7, #0]
 800ce1a:	2b41      	cmp	r3, #65	; 0x41
 800ce1c:	d009      	beq.n	800ce32 <pbuf_alloc_reference+0x2a>
 800ce1e:	883b      	ldrh	r3, [r7, #0]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d006      	beq.n	800ce32 <pbuf_alloc_reference+0x2a>
 800ce24:	4b0f      	ldr	r3, [pc, #60]	; (800ce64 <pbuf_alloc_reference+0x5c>)
 800ce26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ce2a:	490f      	ldr	r1, [pc, #60]	; (800ce68 <pbuf_alloc_reference+0x60>)
 800ce2c:	480f      	ldr	r0, [pc, #60]	; (800ce6c <pbuf_alloc_reference+0x64>)
 800ce2e:	f008 fe6b 	bl	8015b08 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce32:	200b      	movs	r0, #11
 800ce34:	f7ff fabc 	bl	800c3b0 <memp_malloc>
 800ce38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	e00b      	b.n	800ce5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ce44:	8879      	ldrh	r1, [r7, #2]
 800ce46:	887a      	ldrh	r2, [r7, #2]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	883b      	ldrh	r3, [r7, #0]
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	460b      	mov	r3, r1
 800ce52:	6879      	ldr	r1, [r7, #4]
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f7ff feb7 	bl	800cbc8 <pbuf_init_alloced_pbuf>
  return p;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	080173ec 	.word	0x080173ec
 800ce68:	080174f0 	.word	0x080174f0
 800ce6c:	0801744c 	.word	0x0801744c

0800ce70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	607b      	str	r3, [r7, #4]
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73fb      	strb	r3, [r7, #15]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	81bb      	strh	r3, [r7, #12]
 800ce80:	4613      	mov	r3, r2
 800ce82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
 800ce86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ce88:	8a7b      	ldrh	r3, [r7, #18]
 800ce8a:	3303      	adds	r3, #3
 800ce8c:	f023 0203 	bic.w	r2, r3, #3
 800ce90:	89bb      	ldrh	r3, [r7, #12]
 800ce92:	441a      	add	r2, r3
 800ce94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d901      	bls.n	800ce9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e018      	b.n	800ced0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d007      	beq.n	800ceb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cea4:	8a7b      	ldrh	r3, [r7, #18]
 800cea6:	3303      	adds	r3, #3
 800cea8:	f023 0303 	bic.w	r3, r3, #3
 800ceac:	6a3a      	ldr	r2, [r7, #32]
 800ceae:	4413      	add	r3, r2
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	e001      	b.n	800ceb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	89b9      	ldrh	r1, [r7, #12]
 800cebc:	89ba      	ldrh	r2, [r7, #12]
 800cebe:	2302      	movs	r3, #2
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	897b      	ldrh	r3, [r7, #10]
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	460b      	mov	r3, r1
 800cec8:	6979      	ldr	r1, [r7, #20]
 800ceca:	f7ff fe7d 	bl	800cbc8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cece:	687b      	ldr	r3, [r7, #4]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3718      	adds	r7, #24
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	460b      	mov	r3, r1
 800cee2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <pbuf_realloc+0x20>
 800ceea:	4b3a      	ldr	r3, [pc, #232]	; (800cfd4 <pbuf_realloc+0xfc>)
 800ceec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cef0:	4939      	ldr	r1, [pc, #228]	; (800cfd8 <pbuf_realloc+0x100>)
 800cef2:	483a      	ldr	r0, [pc, #232]	; (800cfdc <pbuf_realloc+0x104>)
 800cef4:	f008 fe08 	bl	8015b08 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	891b      	ldrh	r3, [r3, #8]
 800cefc:	887a      	ldrh	r2, [r7, #2]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d263      	bcs.n	800cfca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	891a      	ldrh	r2, [r3, #8]
 800cf06:	887b      	ldrh	r3, [r7, #2]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cf0c:	887b      	ldrh	r3, [r7, #2]
 800cf0e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cf14:	e018      	b.n	800cf48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	895b      	ldrh	r3, [r3, #10]
 800cf1a:	897a      	ldrh	r2, [r7, #10]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	891a      	ldrh	r2, [r3, #8]
 800cf24:	893b      	ldrh	r3, [r7, #8]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <pbuf_realloc+0x70>
 800cf3a:	4b26      	ldr	r3, [pc, #152]	; (800cfd4 <pbuf_realloc+0xfc>)
 800cf3c:	f240 12af 	movw	r2, #431	; 0x1af
 800cf40:	4927      	ldr	r1, [pc, #156]	; (800cfe0 <pbuf_realloc+0x108>)
 800cf42:	4826      	ldr	r0, [pc, #152]	; (800cfdc <pbuf_realloc+0x104>)
 800cf44:	f008 fde0 	bl	8015b08 <iprintf>
  while (rem_len > q->len) {
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	895b      	ldrh	r3, [r3, #10]
 800cf4c:	897a      	ldrh	r2, [r7, #10]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d8e1      	bhi.n	800cf16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	7b1b      	ldrb	r3, [r3, #12]
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d121      	bne.n	800cfa2 <pbuf_realloc+0xca>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	895b      	ldrh	r3, [r3, #10]
 800cf62:	897a      	ldrh	r2, [r7, #10]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d01c      	beq.n	800cfa2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	7b5b      	ldrb	r3, [r3, #13]
 800cf6c:	f003 0302 	and.w	r3, r3, #2
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d116      	bne.n	800cfa2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	685a      	ldr	r2, [r3, #4]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	897b      	ldrh	r3, [r7, #10]
 800cf80:	4413      	add	r3, r2
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4619      	mov	r1, r3
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7fe ff64 	bl	800be54 <mem_trim>
 800cf8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <pbuf_realloc+0xca>
 800cf94:	4b0f      	ldr	r3, [pc, #60]	; (800cfd4 <pbuf_realloc+0xfc>)
 800cf96:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cf9a:	4912      	ldr	r1, [pc, #72]	; (800cfe4 <pbuf_realloc+0x10c>)
 800cf9c:	480f      	ldr	r0, [pc, #60]	; (800cfdc <pbuf_realloc+0x104>)
 800cf9e:	f008 fdb3 	bl	8015b08 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	897a      	ldrh	r2, [r7, #10]
 800cfa6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	895a      	ldrh	r2, [r3, #10]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 f911 	bl	800d1e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	e000      	b.n	800cfcc <pbuf_realloc+0xf4>
    return;
 800cfca:	bf00      	nop

}
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	080173ec 	.word	0x080173ec
 800cfd8:	08017504 	.word	0x08017504
 800cfdc:	0801744c 	.word	0x0801744c
 800cfe0:	0801751c 	.word	0x0801751c
 800cfe4:	08017534 	.word	0x08017534

0800cfe8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	4613      	mov	r3, r2
 800cff4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d106      	bne.n	800d00a <pbuf_add_header_impl+0x22>
 800cffc:	4b2b      	ldr	r3, [pc, #172]	; (800d0ac <pbuf_add_header_impl+0xc4>)
 800cffe:	f240 12df 	movw	r2, #479	; 0x1df
 800d002:	492b      	ldr	r1, [pc, #172]	; (800d0b0 <pbuf_add_header_impl+0xc8>)
 800d004:	482b      	ldr	r0, [pc, #172]	; (800d0b4 <pbuf_add_header_impl+0xcc>)
 800d006:	f008 fd7f 	bl	8015b08 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d003      	beq.n	800d018 <pbuf_add_header_impl+0x30>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d016:	d301      	bcc.n	800d01c <pbuf_add_header_impl+0x34>
    return 1;
 800d018:	2301      	movs	r3, #1
 800d01a:	e043      	b.n	800d0a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d101      	bne.n	800d026 <pbuf_add_header_impl+0x3e>
    return 0;
 800d022:	2300      	movs	r3, #0
 800d024:	e03e      	b.n	800d0a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	891a      	ldrh	r2, [r3, #8]
 800d02e:	8a7b      	ldrh	r3, [r7, #18]
 800d030:	4413      	add	r3, r2
 800d032:	b29b      	uxth	r3, r3
 800d034:	8a7a      	ldrh	r2, [r7, #18]
 800d036:	429a      	cmp	r2, r3
 800d038:	d901      	bls.n	800d03e <pbuf_add_header_impl+0x56>
    return 1;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e032      	b.n	800d0a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	7b1b      	ldrb	r3, [r3, #12]
 800d042:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d044:	8a3b      	ldrh	r3, [r7, #16]
 800d046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00c      	beq.n	800d068 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	685a      	ldr	r2, [r3, #4]
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	425b      	negs	r3, r3
 800d056:	4413      	add	r3, r2
 800d058:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3310      	adds	r3, #16
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	429a      	cmp	r2, r3
 800d062:	d20d      	bcs.n	800d080 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d064:	2301      	movs	r3, #1
 800d066:	e01d      	b.n	800d0a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d068:	79fb      	ldrb	r3, [r7, #7]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d006      	beq.n	800d07c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	425b      	negs	r3, r3
 800d076:	4413      	add	r3, r2
 800d078:	617b      	str	r3, [r7, #20]
 800d07a:	e001      	b.n	800d080 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d07c:	2301      	movs	r3, #1
 800d07e:	e011      	b.n	800d0a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	697a      	ldr	r2, [r7, #20]
 800d084:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	895a      	ldrh	r2, [r3, #10]
 800d08a:	8a7b      	ldrh	r3, [r7, #18]
 800d08c:	4413      	add	r3, r2
 800d08e:	b29a      	uxth	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	891a      	ldrh	r2, [r3, #8]
 800d098:	8a7b      	ldrh	r3, [r7, #18]
 800d09a:	4413      	add	r3, r2
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	811a      	strh	r2, [r3, #8]


  return 0;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	080173ec 	.word	0x080173ec
 800d0b0:	08017550 	.word	0x08017550
 800d0b4:	0801744c 	.word	0x0801744c

0800d0b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff ff8e 	bl	800cfe8 <pbuf_add_header_impl>
 800d0cc:	4603      	mov	r3, r0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d106      	bne.n	800d0f6 <pbuf_remove_header+0x1e>
 800d0e8:	4b20      	ldr	r3, [pc, #128]	; (800d16c <pbuf_remove_header+0x94>)
 800d0ea:	f240 224b 	movw	r2, #587	; 0x24b
 800d0ee:	4920      	ldr	r1, [pc, #128]	; (800d170 <pbuf_remove_header+0x98>)
 800d0f0:	4820      	ldr	r0, [pc, #128]	; (800d174 <pbuf_remove_header+0x9c>)
 800d0f2:	f008 fd09 	bl	8015b08 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <pbuf_remove_header+0x2c>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d102:	d301      	bcc.n	800d108 <pbuf_remove_header+0x30>
    return 1;
 800d104:	2301      	movs	r3, #1
 800d106:	e02c      	b.n	800d162 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <pbuf_remove_header+0x3a>
    return 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	e027      	b.n	800d162 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	895b      	ldrh	r3, [r3, #10]
 800d11a:	89fa      	ldrh	r2, [r7, #14]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d908      	bls.n	800d132 <pbuf_remove_header+0x5a>
 800d120:	4b12      	ldr	r3, [pc, #72]	; (800d16c <pbuf_remove_header+0x94>)
 800d122:	f240 2255 	movw	r2, #597	; 0x255
 800d126:	4914      	ldr	r1, [pc, #80]	; (800d178 <pbuf_remove_header+0xa0>)
 800d128:	4812      	ldr	r0, [pc, #72]	; (800d174 <pbuf_remove_header+0x9c>)
 800d12a:	f008 fced 	bl	8015b08 <iprintf>
 800d12e:	2301      	movs	r3, #1
 800d130:	e017      	b.n	800d162 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	441a      	add	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	895a      	ldrh	r2, [r3, #10]
 800d148:	89fb      	ldrh	r3, [r7, #14]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	891a      	ldrh	r2, [r3, #8]
 800d156:	89fb      	ldrh	r3, [r7, #14]
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	080173ec 	.word	0x080173ec
 800d170:	08017550 	.word	0x08017550
 800d174:	0801744c 	.word	0x0801744c
 800d178:	0801755c 	.word	0x0801755c

0800d17c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	460b      	mov	r3, r1
 800d186:	807b      	strh	r3, [r7, #2]
 800d188:	4613      	mov	r3, r2
 800d18a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d18c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d190:	2b00      	cmp	r3, #0
 800d192:	da08      	bge.n	800d1a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d198:	425b      	negs	r3, r3
 800d19a:	4619      	mov	r1, r3
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff ff9b 	bl	800d0d8 <pbuf_remove_header>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	e007      	b.n	800d1b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d1a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1aa:	787a      	ldrb	r2, [r7, #1]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff ff1a 	bl	800cfe8 <pbuf_add_header_impl>
 800d1b4:	4603      	mov	r3, r0
  }
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}

0800d1be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d1be:	b580      	push	{r7, lr}
 800d1c0:	b082      	sub	sp, #8
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d1ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff ffd2 	bl	800d17c <pbuf_header_impl>
 800d1d8:	4603      	mov	r3, r0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
	...

0800d1e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10b      	bne.n	800d20a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <pbuf_free+0x22>
 800d1f8:	4b3b      	ldr	r3, [pc, #236]	; (800d2e8 <pbuf_free+0x104>)
 800d1fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d1fe:	493b      	ldr	r1, [pc, #236]	; (800d2ec <pbuf_free+0x108>)
 800d200:	483b      	ldr	r0, [pc, #236]	; (800d2f0 <pbuf_free+0x10c>)
 800d202:	f008 fc81 	bl	8015b08 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d206:	2300      	movs	r3, #0
 800d208:	e069      	b.n	800d2de <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d20a:	2300      	movs	r3, #0
 800d20c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d20e:	e062      	b.n	800d2d6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d210:	f008 fad0 	bl	80157b4 <sys_arch_protect>
 800d214:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7b9b      	ldrb	r3, [r3, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <pbuf_free+0x48>
 800d21e:	4b32      	ldr	r3, [pc, #200]	; (800d2e8 <pbuf_free+0x104>)
 800d220:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d224:	4933      	ldr	r1, [pc, #204]	; (800d2f4 <pbuf_free+0x110>)
 800d226:	4832      	ldr	r0, [pc, #200]	; (800d2f0 <pbuf_free+0x10c>)
 800d228:	f008 fc6e 	bl	8015b08 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7b9b      	ldrb	r3, [r3, #14]
 800d230:	3b01      	subs	r3, #1
 800d232:	b2da      	uxtb	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	739a      	strb	r2, [r3, #14]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	7b9b      	ldrb	r3, [r3, #14]
 800d23c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d23e:	69b8      	ldr	r0, [r7, #24]
 800d240:	f008 fac6 	bl	80157d0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d143      	bne.n	800d2d2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	7b1b      	ldrb	r3, [r3, #12]
 800d254:	f003 030f 	and.w	r3, r3, #15
 800d258:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	7b5b      	ldrb	r3, [r3, #13]
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d011      	beq.n	800d28a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d106      	bne.n	800d280 <pbuf_free+0x9c>
 800d272:	4b1d      	ldr	r3, [pc, #116]	; (800d2e8 <pbuf_free+0x104>)
 800d274:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d278:	491f      	ldr	r1, [pc, #124]	; (800d2f8 <pbuf_free+0x114>)
 800d27a:	481d      	ldr	r0, [pc, #116]	; (800d2f0 <pbuf_free+0x10c>)
 800d27c:	f008 fc44 	bl	8015b08 <iprintf>
        pc->custom_free_function(p);
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	4798      	blx	r3
 800d288:	e01d      	b.n	800d2c6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d104      	bne.n	800d29a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d290:	6879      	ldr	r1, [r7, #4]
 800d292:	200c      	movs	r0, #12
 800d294:	f7ff f902 	bl	800c49c <memp_free>
 800d298:	e015      	b.n	800d2c6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d104      	bne.n	800d2aa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d2a0:	6879      	ldr	r1, [r7, #4]
 800d2a2:	200b      	movs	r0, #11
 800d2a4:	f7ff f8fa 	bl	800c49c <memp_free>
 800d2a8:	e00d      	b.n	800d2c6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d103      	bne.n	800d2b8 <pbuf_free+0xd4>
          mem_free(p);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7fe fd3f 	bl	800bd34 <mem_free>
 800d2b6:	e006      	b.n	800d2c6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d2b8:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <pbuf_free+0x104>)
 800d2ba:	f240 320f 	movw	r2, #783	; 0x30f
 800d2be:	490f      	ldr	r1, [pc, #60]	; (800d2fc <pbuf_free+0x118>)
 800d2c0:	480b      	ldr	r0, [pc, #44]	; (800d2f0 <pbuf_free+0x10c>)
 800d2c2:	f008 fc21 	bl	8015b08 <iprintf>
        }
      }
      count++;
 800d2c6:	7ffb      	ldrb	r3, [r7, #31]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	607b      	str	r3, [r7, #4]
 800d2d0:	e001      	b.n	800d2d6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d199      	bne.n	800d210 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d2dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3720      	adds	r7, #32
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	080173ec 	.word	0x080173ec
 800d2ec:	08017550 	.word	0x08017550
 800d2f0:	0801744c 	.word	0x0801744c
 800d2f4:	0801757c 	.word	0x0801757c
 800d2f8:	08017594 	.word	0x08017594
 800d2fc:	080175b8 	.word	0x080175b8

0800d300 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d30c:	e005      	b.n	800d31a <pbuf_clen+0x1a>
    ++len;
 800d30e:	89fb      	ldrh	r3, [r7, #14]
 800d310:	3301      	adds	r3, #1
 800d312:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f6      	bne.n	800d30e <pbuf_clen+0xe>
  }
  return len;
 800d320:	89fb      	ldrh	r3, [r7, #14]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
	...

0800d330 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d016      	beq.n	800d36c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d33e:	f008 fa39 	bl	80157b4 <sys_arch_protect>
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	7b9b      	ldrb	r3, [r3, #14]
 800d348:	3301      	adds	r3, #1
 800d34a:	b2da      	uxtb	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	739a      	strb	r2, [r3, #14]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f008 fa3d 	bl	80157d0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7b9b      	ldrb	r3, [r3, #14]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d106      	bne.n	800d36c <pbuf_ref+0x3c>
 800d35e:	4b05      	ldr	r3, [pc, #20]	; (800d374 <pbuf_ref+0x44>)
 800d360:	f240 3242 	movw	r2, #834	; 0x342
 800d364:	4904      	ldr	r1, [pc, #16]	; (800d378 <pbuf_ref+0x48>)
 800d366:	4805      	ldr	r0, [pc, #20]	; (800d37c <pbuf_ref+0x4c>)
 800d368:	f008 fbce 	bl	8015b08 <iprintf>
  }
}
 800d36c:	bf00      	nop
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	080173ec 	.word	0x080173ec
 800d378:	080175cc 	.word	0x080175cc
 800d37c:	0801744c 	.word	0x0801744c

0800d380 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <pbuf_cat+0x16>
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d107      	bne.n	800d3a6 <pbuf_cat+0x26>
 800d396:	4b20      	ldr	r3, [pc, #128]	; (800d418 <pbuf_cat+0x98>)
 800d398:	f240 3259 	movw	r2, #857	; 0x359
 800d39c:	491f      	ldr	r1, [pc, #124]	; (800d41c <pbuf_cat+0x9c>)
 800d39e:	4820      	ldr	r0, [pc, #128]	; (800d420 <pbuf_cat+0xa0>)
 800d3a0:	f008 fbb2 	bl	8015b08 <iprintf>
 800d3a4:	e034      	b.n	800d410 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	e00a      	b.n	800d3c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	891a      	ldrh	r2, [r3, #8]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	891b      	ldrh	r3, [r3, #8]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	60fb      	str	r3, [r7, #12]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1f0      	bne.n	800d3ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	891a      	ldrh	r2, [r3, #8]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	895b      	ldrh	r3, [r3, #10]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d006      	beq.n	800d3e4 <pbuf_cat+0x64>
 800d3d6:	4b10      	ldr	r3, [pc, #64]	; (800d418 <pbuf_cat+0x98>)
 800d3d8:	f240 3262 	movw	r2, #866	; 0x362
 800d3dc:	4911      	ldr	r1, [pc, #68]	; (800d424 <pbuf_cat+0xa4>)
 800d3de:	4810      	ldr	r0, [pc, #64]	; (800d420 <pbuf_cat+0xa0>)
 800d3e0:	f008 fb92 	bl	8015b08 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d006      	beq.n	800d3fa <pbuf_cat+0x7a>
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <pbuf_cat+0x98>)
 800d3ee:	f240 3263 	movw	r2, #867	; 0x363
 800d3f2:	490d      	ldr	r1, [pc, #52]	; (800d428 <pbuf_cat+0xa8>)
 800d3f4:	480a      	ldr	r0, [pc, #40]	; (800d420 <pbuf_cat+0xa0>)
 800d3f6:	f008 fb87 	bl	8015b08 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	891a      	ldrh	r2, [r3, #8]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	891b      	ldrh	r3, [r3, #8]
 800d402:	4413      	add	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	080173ec 	.word	0x080173ec
 800d41c:	080175e0 	.word	0x080175e0
 800d420:	0801744c 	.word	0x0801744c
 800d424:	08017618 	.word	0x08017618
 800d428:	08017648 	.word	0x08017648

0800d42c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d436:	2300      	movs	r3, #0
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	2300      	movs	r3, #0
 800d43c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d008      	beq.n	800d456 <pbuf_copy+0x2a>
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <pbuf_copy+0x2a>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	891a      	ldrh	r2, [r3, #8]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	891b      	ldrh	r3, [r3, #8]
 800d452:	429a      	cmp	r2, r3
 800d454:	d209      	bcs.n	800d46a <pbuf_copy+0x3e>
 800d456:	4b57      	ldr	r3, [pc, #348]	; (800d5b4 <pbuf_copy+0x188>)
 800d458:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d45c:	4956      	ldr	r1, [pc, #344]	; (800d5b8 <pbuf_copy+0x18c>)
 800d45e:	4857      	ldr	r0, [pc, #348]	; (800d5bc <pbuf_copy+0x190>)
 800d460:	f008 fb52 	bl	8015b08 <iprintf>
 800d464:	f06f 030f 	mvn.w	r3, #15
 800d468:	e09f      	b.n	800d5aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	895b      	ldrh	r3, [r3, #10]
 800d46e:	461a      	mov	r2, r3
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	1ad2      	subs	r2, r2, r3
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	895b      	ldrh	r3, [r3, #10]
 800d478:	4619      	mov	r1, r3
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	1acb      	subs	r3, r1, r3
 800d47e:	429a      	cmp	r2, r3
 800d480:	d306      	bcc.n	800d490 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	895b      	ldrh	r3, [r3, #10]
 800d486:	461a      	mov	r2, r3
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	e005      	b.n	800d49c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	895b      	ldrh	r3, [r3, #10]
 800d494:	461a      	mov	r2, r3
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685a      	ldr	r2, [r3, #4]
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	18d0      	adds	r0, r2, r3
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	f008 fd51 	bl	8015f56 <memcpy>
    offset_to += len;
 800d4b4:	697a      	ldr	r2, [r7, #20]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	895b      	ldrh	r3, [r3, #10]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d906      	bls.n	800d4de <pbuf_copy+0xb2>
 800d4d0:	4b38      	ldr	r3, [pc, #224]	; (800d5b4 <pbuf_copy+0x188>)
 800d4d2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d4d6:	493a      	ldr	r1, [pc, #232]	; (800d5c0 <pbuf_copy+0x194>)
 800d4d8:	4838      	ldr	r0, [pc, #224]	; (800d5bc <pbuf_copy+0x190>)
 800d4da:	f008 fb15 	bl	8015b08 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	895b      	ldrh	r3, [r3, #10]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d906      	bls.n	800d4f8 <pbuf_copy+0xcc>
 800d4ea:	4b32      	ldr	r3, [pc, #200]	; (800d5b4 <pbuf_copy+0x188>)
 800d4ec:	f240 32da 	movw	r2, #986	; 0x3da
 800d4f0:	4934      	ldr	r1, [pc, #208]	; (800d5c4 <pbuf_copy+0x198>)
 800d4f2:	4832      	ldr	r0, [pc, #200]	; (800d5bc <pbuf_copy+0x190>)
 800d4f4:	f008 fb08 	bl	8015b08 <iprintf>
    if (offset_from >= p_from->len) {
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	895b      	ldrh	r3, [r3, #10]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	4293      	cmp	r3, r2
 800d502:	d304      	bcc.n	800d50e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	895b      	ldrh	r3, [r3, #10]
 800d512:	461a      	mov	r2, r3
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	4293      	cmp	r3, r2
 800d518:	d114      	bne.n	800d544 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10c      	bne.n	800d544 <pbuf_copy+0x118>
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d009      	beq.n	800d544 <pbuf_copy+0x118>
 800d530:	4b20      	ldr	r3, [pc, #128]	; (800d5b4 <pbuf_copy+0x188>)
 800d532:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d536:	4924      	ldr	r1, [pc, #144]	; (800d5c8 <pbuf_copy+0x19c>)
 800d538:	4820      	ldr	r0, [pc, #128]	; (800d5bc <pbuf_copy+0x190>)
 800d53a:	f008 fae5 	bl	8015b08 <iprintf>
 800d53e:	f06f 030f 	mvn.w	r3, #15
 800d542:	e032      	b.n	800d5aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d013      	beq.n	800d572 <pbuf_copy+0x146>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	895a      	ldrh	r2, [r3, #10]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	891b      	ldrh	r3, [r3, #8]
 800d552:	429a      	cmp	r2, r3
 800d554:	d10d      	bne.n	800d572 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d009      	beq.n	800d572 <pbuf_copy+0x146>
 800d55e:	4b15      	ldr	r3, [pc, #84]	; (800d5b4 <pbuf_copy+0x188>)
 800d560:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d564:	4919      	ldr	r1, [pc, #100]	; (800d5cc <pbuf_copy+0x1a0>)
 800d566:	4815      	ldr	r0, [pc, #84]	; (800d5bc <pbuf_copy+0x190>)
 800d568:	f008 face 	bl	8015b08 <iprintf>
 800d56c:	f06f 0305 	mvn.w	r3, #5
 800d570:	e01b      	b.n	800d5aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d013      	beq.n	800d5a0 <pbuf_copy+0x174>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	895a      	ldrh	r2, [r3, #10]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	891b      	ldrh	r3, [r3, #8]
 800d580:	429a      	cmp	r2, r3
 800d582:	d10d      	bne.n	800d5a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d009      	beq.n	800d5a0 <pbuf_copy+0x174>
 800d58c:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <pbuf_copy+0x188>)
 800d58e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d592:	490e      	ldr	r1, [pc, #56]	; (800d5cc <pbuf_copy+0x1a0>)
 800d594:	4809      	ldr	r0, [pc, #36]	; (800d5bc <pbuf_copy+0x190>)
 800d596:	f008 fab7 	bl	8015b08 <iprintf>
 800d59a:	f06f 0305 	mvn.w	r3, #5
 800d59e:	e004      	b.n	800d5aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f47f af61 	bne.w	800d46a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	080173ec 	.word	0x080173ec
 800d5b8:	08017694 	.word	0x08017694
 800d5bc:	0801744c 	.word	0x0801744c
 800d5c0:	080176c4 	.word	0x080176c4
 800d5c4:	080176dc 	.word	0x080176dc
 800d5c8:	080176f8 	.word	0x080176f8
 800d5cc:	08017708 	.word	0x08017708

0800d5d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b088      	sub	sp, #32
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	461a      	mov	r2, r3
 800d5de:	460b      	mov	r3, r1
 800d5e0:	80fb      	strh	r3, [r7, #6]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d108      	bne.n	800d606 <pbuf_copy_partial+0x36>
 800d5f4:	4b2b      	ldr	r3, [pc, #172]	; (800d6a4 <pbuf_copy_partial+0xd4>)
 800d5f6:	f240 420a 	movw	r2, #1034	; 0x40a
 800d5fa:	492b      	ldr	r1, [pc, #172]	; (800d6a8 <pbuf_copy_partial+0xd8>)
 800d5fc:	482b      	ldr	r0, [pc, #172]	; (800d6ac <pbuf_copy_partial+0xdc>)
 800d5fe:	f008 fa83 	bl	8015b08 <iprintf>
 800d602:	2300      	movs	r3, #0
 800d604:	e04a      	b.n	800d69c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d108      	bne.n	800d61e <pbuf_copy_partial+0x4e>
 800d60c:	4b25      	ldr	r3, [pc, #148]	; (800d6a4 <pbuf_copy_partial+0xd4>)
 800d60e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d612:	4927      	ldr	r1, [pc, #156]	; (800d6b0 <pbuf_copy_partial+0xe0>)
 800d614:	4825      	ldr	r0, [pc, #148]	; (800d6ac <pbuf_copy_partial+0xdc>)
 800d616:	f008 fa77 	bl	8015b08 <iprintf>
 800d61a:	2300      	movs	r3, #0
 800d61c:	e03e      	b.n	800d69c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	61fb      	str	r3, [r7, #28]
 800d622:	e034      	b.n	800d68e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d624:	88bb      	ldrh	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <pbuf_copy_partial+0x70>
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	895b      	ldrh	r3, [r3, #10]
 800d62e:	88ba      	ldrh	r2, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	d305      	bcc.n	800d640 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	895b      	ldrh	r3, [r3, #10]
 800d638:	88ba      	ldrh	r2, [r7, #4]
 800d63a:	1ad3      	subs	r3, r2, r3
 800d63c:	80bb      	strh	r3, [r7, #4]
 800d63e:	e023      	b.n	800d688 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	895a      	ldrh	r2, [r3, #10]
 800d644:	88bb      	ldrh	r3, [r7, #4]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d64a:	8b3a      	ldrh	r2, [r7, #24]
 800d64c:	88fb      	ldrh	r3, [r7, #6]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d901      	bls.n	800d656 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d656:	8b7b      	ldrh	r3, [r7, #26]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	18d0      	adds	r0, r2, r3
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	88bb      	ldrh	r3, [r7, #4]
 800d662:	4413      	add	r3, r2
 800d664:	8b3a      	ldrh	r2, [r7, #24]
 800d666:	4619      	mov	r1, r3
 800d668:	f008 fc75 	bl	8015f56 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d66c:	8afa      	ldrh	r2, [r7, #22]
 800d66e:	8b3b      	ldrh	r3, [r7, #24]
 800d670:	4413      	add	r3, r2
 800d672:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d674:	8b7a      	ldrh	r2, [r7, #26]
 800d676:	8b3b      	ldrh	r3, [r7, #24]
 800d678:	4413      	add	r3, r2
 800d67a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d67c:	88fa      	ldrh	r2, [r7, #6]
 800d67e:	8b3b      	ldrh	r3, [r7, #24]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	61fb      	str	r3, [r7, #28]
 800d68e:	88fb      	ldrh	r3, [r7, #6]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d002      	beq.n	800d69a <pbuf_copy_partial+0xca>
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1c4      	bne.n	800d624 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d69a:	8afb      	ldrh	r3, [r7, #22]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3720      	adds	r7, #32
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	080173ec 	.word	0x080173ec
 800d6a8:	08017734 	.word	0x08017734
 800d6ac:	0801744c 	.word	0x0801744c
 800d6b0:	08017754 	.word	0x08017754

0800d6b4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	603a      	str	r2, [r7, #0]
 800d6be:	71fb      	strb	r3, [r7, #7]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	8919      	ldrh	r1, [r3, #8]
 800d6c8:	88ba      	ldrh	r2, [r7, #4]
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff faa5 	bl	800cc1c <pbuf_alloc>
 800d6d2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <pbuf_clone+0x2a>
    return NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e011      	b.n	800d702 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f7ff fea3 	bl	800d42c <pbuf_copy>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d6ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d006      	beq.n	800d700 <pbuf_clone+0x4c>
 800d6f2:	4b06      	ldr	r3, [pc, #24]	; (800d70c <pbuf_clone+0x58>)
 800d6f4:	f240 5224 	movw	r2, #1316	; 0x524
 800d6f8:	4905      	ldr	r1, [pc, #20]	; (800d710 <pbuf_clone+0x5c>)
 800d6fa:	4806      	ldr	r0, [pc, #24]	; (800d714 <pbuf_clone+0x60>)
 800d6fc:	f008 fa04 	bl	8015b08 <iprintf>
  return q;
 800d700:	68fb      	ldr	r3, [r7, #12]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	080173ec 	.word	0x080173ec
 800d710:	08017860 	.word	0x08017860
 800d714:	0801744c 	.word	0x0801744c

0800d718 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d71c:	f008 f868 	bl	80157f0 <rand>
 800d720:	4603      	mov	r3, r0
 800d722:	b29b      	uxth	r3, r3
 800d724:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d728:	b29b      	uxth	r3, r3
 800d72a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d72e:	b29a      	uxth	r2, r3
 800d730:	4b01      	ldr	r3, [pc, #4]	; (800d738 <tcp_init+0x20>)
 800d732:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d734:	bf00      	nop
 800d736:	bd80      	pop	{r7, pc}
 800d738:	20000028 	.word	0x20000028

0800d73c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	7d1b      	ldrb	r3, [r3, #20]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d105      	bne.n	800d758 <tcp_free+0x1c>
 800d74c:	4b06      	ldr	r3, [pc, #24]	; (800d768 <tcp_free+0x2c>)
 800d74e:	22d4      	movs	r2, #212	; 0xd4
 800d750:	4906      	ldr	r1, [pc, #24]	; (800d76c <tcp_free+0x30>)
 800d752:	4807      	ldr	r0, [pc, #28]	; (800d770 <tcp_free+0x34>)
 800d754:	f008 f9d8 	bl	8015b08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	2001      	movs	r0, #1
 800d75c:	f7fe fe9e 	bl	800c49c <memp_free>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	080178ec 	.word	0x080178ec
 800d76c:	0801791c 	.word	0x0801791c
 800d770:	08017930 	.word	0x08017930

0800d774 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	7d1b      	ldrb	r3, [r3, #20]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d105      	bne.n	800d790 <tcp_free_listen+0x1c>
 800d784:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <tcp_free_listen+0x2c>)
 800d786:	22df      	movs	r2, #223	; 0xdf
 800d788:	4906      	ldr	r1, [pc, #24]	; (800d7a4 <tcp_free_listen+0x30>)
 800d78a:	4807      	ldr	r0, [pc, #28]	; (800d7a8 <tcp_free_listen+0x34>)
 800d78c:	f008 f9bc 	bl	8015b08 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d790:	6879      	ldr	r1, [r7, #4]
 800d792:	2002      	movs	r0, #2
 800d794:	f7fe fe82 	bl	800c49c <memp_free>
}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	080178ec 	.word	0x080178ec
 800d7a4:	08017958 	.word	0x08017958
 800d7a8:	08017930 	.word	0x08017930

0800d7ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d7b0:	f000 fea2 	bl	800e4f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d7b4:	4b07      	ldr	r3, [pc, #28]	; (800d7d4 <tcp_tmr+0x28>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <tcp_tmr+0x28>)
 800d7be:	701a      	strb	r2, [r3, #0]
 800d7c0:	4b04      	ldr	r3, [pc, #16]	; (800d7d4 <tcp_tmr+0x28>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d001      	beq.n	800d7d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d7cc:	f000 fb54 	bl	800de78 <tcp_slowtmr>
  }
}
 800d7d0:	bf00      	nop
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20045075 	.word	0x20045075

0800d7d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d105      	bne.n	800d7f4 <tcp_remove_listener+0x1c>
 800d7e8:	4b0d      	ldr	r3, [pc, #52]	; (800d820 <tcp_remove_listener+0x48>)
 800d7ea:	22ff      	movs	r2, #255	; 0xff
 800d7ec:	490d      	ldr	r1, [pc, #52]	; (800d824 <tcp_remove_listener+0x4c>)
 800d7ee:	480e      	ldr	r0, [pc, #56]	; (800d828 <tcp_remove_listener+0x50>)
 800d7f0:	f008 f98a 	bl	8015b08 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	e00a      	b.n	800d810 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d102      	bne.n	800d80a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1f1      	bne.n	800d7fa <tcp_remove_listener+0x22>
    }
  }
}
 800d816:	bf00      	nop
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	080178ec 	.word	0x080178ec
 800d824:	08017974 	.word	0x08017974
 800d828:	08017930 	.word	0x08017930

0800d82c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <tcp_listen_closed+0x1c>
 800d83a:	4b14      	ldr	r3, [pc, #80]	; (800d88c <tcp_listen_closed+0x60>)
 800d83c:	f240 1211 	movw	r2, #273	; 0x111
 800d840:	4913      	ldr	r1, [pc, #76]	; (800d890 <tcp_listen_closed+0x64>)
 800d842:	4814      	ldr	r0, [pc, #80]	; (800d894 <tcp_listen_closed+0x68>)
 800d844:	f008 f960 	bl	8015b08 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	7d1b      	ldrb	r3, [r3, #20]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d006      	beq.n	800d85e <tcp_listen_closed+0x32>
 800d850:	4b0e      	ldr	r3, [pc, #56]	; (800d88c <tcp_listen_closed+0x60>)
 800d852:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d856:	4910      	ldr	r1, [pc, #64]	; (800d898 <tcp_listen_closed+0x6c>)
 800d858:	480e      	ldr	r0, [pc, #56]	; (800d894 <tcp_listen_closed+0x68>)
 800d85a:	f008 f955 	bl	8015b08 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d85e:	2301      	movs	r3, #1
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	e00b      	b.n	800d87c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d864:	4a0d      	ldr	r2, [pc, #52]	; (800d89c <tcp_listen_closed+0x70>)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6879      	ldr	r1, [r7, #4]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff ffb1 	bl	800d7d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	3301      	adds	r3, #1
 800d87a:	60fb      	str	r3, [r7, #12]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d9f0      	bls.n	800d864 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d882:	bf00      	nop
 800d884:	bf00      	nop
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	080178ec 	.word	0x080178ec
 800d890:	0801799c 	.word	0x0801799c
 800d894:	08017930 	.word	0x08017930
 800d898:	080179a8 	.word	0x080179a8
 800d89c:	08019914 	.word	0x08019914

0800d8a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d8a0:	b5b0      	push	{r4, r5, r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af04      	add	r7, sp, #16
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <tcp_close_shutdown+0x20>
 800d8b2:	4b63      	ldr	r3, [pc, #396]	; (800da40 <tcp_close_shutdown+0x1a0>)
 800d8b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d8b8:	4962      	ldr	r1, [pc, #392]	; (800da44 <tcp_close_shutdown+0x1a4>)
 800d8ba:	4863      	ldr	r0, [pc, #396]	; (800da48 <tcp_close_shutdown+0x1a8>)
 800d8bc:	f008 f924 	bl	8015b08 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d8c0:	78fb      	ldrb	r3, [r7, #3]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d066      	beq.n	800d994 <tcp_close_shutdown+0xf4>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ca:	2b04      	cmp	r3, #4
 800d8cc:	d003      	beq.n	800d8d6 <tcp_close_shutdown+0x36>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	7d1b      	ldrb	r3, [r3, #20]
 800d8d2:	2b07      	cmp	r3, #7
 800d8d4:	d15e      	bne.n	800d994 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d104      	bne.n	800d8e8 <tcp_close_shutdown+0x48>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8e6:	d055      	beq.n	800d994 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	8b5b      	ldrh	r3, [r3, #26]
 800d8ec:	f003 0310 	and.w	r3, r3, #16
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d106      	bne.n	800d902 <tcp_close_shutdown+0x62>
 800d8f4:	4b52      	ldr	r3, [pc, #328]	; (800da40 <tcp_close_shutdown+0x1a0>)
 800d8f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d8fa:	4954      	ldr	r1, [pc, #336]	; (800da4c <tcp_close_shutdown+0x1ac>)
 800d8fc:	4852      	ldr	r0, [pc, #328]	; (800da48 <tcp_close_shutdown+0x1a8>)
 800d8fe:	f008 f903 	bl	8015b08 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d90a:	687d      	ldr	r5, [r7, #4]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3304      	adds	r3, #4
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	8ad2      	ldrh	r2, [r2, #22]
 800d914:	6879      	ldr	r1, [r7, #4]
 800d916:	8b09      	ldrh	r1, [r1, #24]
 800d918:	9102      	str	r1, [sp, #8]
 800d91a:	9201      	str	r2, [sp, #4]
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	462b      	mov	r3, r5
 800d920:	4622      	mov	r2, r4
 800d922:	4601      	mov	r1, r0
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f004 fe91 	bl	801264c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f001 f8c6 	bl	800eabc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d930:	4b47      	ldr	r3, [pc, #284]	; (800da50 <tcp_close_shutdown+0x1b0>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	429a      	cmp	r2, r3
 800d938:	d105      	bne.n	800d946 <tcp_close_shutdown+0xa6>
 800d93a:	4b45      	ldr	r3, [pc, #276]	; (800da50 <tcp_close_shutdown+0x1b0>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	4a43      	ldr	r2, [pc, #268]	; (800da50 <tcp_close_shutdown+0x1b0>)
 800d942:	6013      	str	r3, [r2, #0]
 800d944:	e013      	b.n	800d96e <tcp_close_shutdown+0xce>
 800d946:	4b42      	ldr	r3, [pc, #264]	; (800da50 <tcp_close_shutdown+0x1b0>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	e00c      	b.n	800d968 <tcp_close_shutdown+0xc8>
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	429a      	cmp	r2, r3
 800d956:	d104      	bne.n	800d962 <tcp_close_shutdown+0xc2>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68da      	ldr	r2, [r3, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	60da      	str	r2, [r3, #12]
 800d960:	e005      	b.n	800d96e <tcp_close_shutdown+0xce>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1ef      	bne.n	800d94e <tcp_close_shutdown+0xae>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	60da      	str	r2, [r3, #12]
 800d974:	4b37      	ldr	r3, [pc, #220]	; (800da54 <tcp_close_shutdown+0x1b4>)
 800d976:	2201      	movs	r2, #1
 800d978:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d97a:	4b37      	ldr	r3, [pc, #220]	; (800da58 <tcp_close_shutdown+0x1b8>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	429a      	cmp	r2, r3
 800d982:	d102      	bne.n	800d98a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d984:	f003 fd5e 	bl	8011444 <tcp_trigger_input_pcb_close>
 800d988:	e002      	b.n	800d990 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff fed6 	bl	800d73c <tcp_free>
      }
      return ERR_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	e050      	b.n	800da36 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	7d1b      	ldrb	r3, [r3, #20]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d03b      	beq.n	800da14 <tcp_close_shutdown+0x174>
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	dc44      	bgt.n	800da2a <tcp_close_shutdown+0x18a>
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <tcp_close_shutdown+0x10a>
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d02a      	beq.n	800d9fe <tcp_close_shutdown+0x15e>
 800d9a8:	e03f      	b.n	800da2a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	8adb      	ldrh	r3, [r3, #22]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d021      	beq.n	800d9f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9b2:	4b2a      	ldr	r3, [pc, #168]	; (800da5c <tcp_close_shutdown+0x1bc>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d105      	bne.n	800d9c8 <tcp_close_shutdown+0x128>
 800d9bc:	4b27      	ldr	r3, [pc, #156]	; (800da5c <tcp_close_shutdown+0x1bc>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	4a26      	ldr	r2, [pc, #152]	; (800da5c <tcp_close_shutdown+0x1bc>)
 800d9c4:	6013      	str	r3, [r2, #0]
 800d9c6:	e013      	b.n	800d9f0 <tcp_close_shutdown+0x150>
 800d9c8:	4b24      	ldr	r3, [pc, #144]	; (800da5c <tcp_close_shutdown+0x1bc>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	60bb      	str	r3, [r7, #8]
 800d9ce:	e00c      	b.n	800d9ea <tcp_close_shutdown+0x14a>
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d104      	bne.n	800d9e4 <tcp_close_shutdown+0x144>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68da      	ldr	r2, [r3, #12]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	60da      	str	r2, [r3, #12]
 800d9e2:	e005      	b.n	800d9f0 <tcp_close_shutdown+0x150>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	60bb      	str	r3, [r7, #8]
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1ef      	bne.n	800d9d0 <tcp_close_shutdown+0x130>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff fea0 	bl	800d73c <tcp_free>
      break;
 800d9fc:	e01a      	b.n	800da34 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff ff14 	bl	800d82c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da04:	6879      	ldr	r1, [r7, #4]
 800da06:	4816      	ldr	r0, [pc, #88]	; (800da60 <tcp_close_shutdown+0x1c0>)
 800da08:	f001 f8a8 	bl	800eb5c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f7ff feb1 	bl	800d774 <tcp_free_listen>
      break;
 800da12:	e00f      	b.n	800da34 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da14:	6879      	ldr	r1, [r7, #4]
 800da16:	480e      	ldr	r0, [pc, #56]	; (800da50 <tcp_close_shutdown+0x1b0>)
 800da18:	f001 f8a0 	bl	800eb5c <tcp_pcb_remove>
 800da1c:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <tcp_close_shutdown+0x1b4>)
 800da1e:	2201      	movs	r2, #1
 800da20:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f7ff fe8a 	bl	800d73c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da28:	e004      	b.n	800da34 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f81a 	bl	800da64 <tcp_close_shutdown_fin>
 800da30:	4603      	mov	r3, r0
 800da32:	e000      	b.n	800da36 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bdb0      	pop	{r4, r5, r7, pc}
 800da3e:	bf00      	nop
 800da40:	080178ec 	.word	0x080178ec
 800da44:	080179c0 	.word	0x080179c0
 800da48:	08017930 	.word	0x08017930
 800da4c:	080179e0 	.word	0x080179e0
 800da50:	2004506c 	.word	0x2004506c
 800da54:	20045074 	.word	0x20045074
 800da58:	200450ac 	.word	0x200450ac
 800da5c:	20045064 	.word	0x20045064
 800da60:	20045068 	.word	0x20045068

0800da64 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <tcp_close_shutdown_fin+0x1c>
 800da72:	4b2e      	ldr	r3, [pc, #184]	; (800db2c <tcp_close_shutdown_fin+0xc8>)
 800da74:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800da78:	492d      	ldr	r1, [pc, #180]	; (800db30 <tcp_close_shutdown_fin+0xcc>)
 800da7a:	482e      	ldr	r0, [pc, #184]	; (800db34 <tcp_close_shutdown_fin+0xd0>)
 800da7c:	f008 f844 	bl	8015b08 <iprintf>

  switch (pcb->state) {
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	7d1b      	ldrb	r3, [r3, #20]
 800da84:	2b07      	cmp	r3, #7
 800da86:	d020      	beq.n	800daca <tcp_close_shutdown_fin+0x66>
 800da88:	2b07      	cmp	r3, #7
 800da8a:	dc2b      	bgt.n	800dae4 <tcp_close_shutdown_fin+0x80>
 800da8c:	2b03      	cmp	r3, #3
 800da8e:	d002      	beq.n	800da96 <tcp_close_shutdown_fin+0x32>
 800da90:	2b04      	cmp	r3, #4
 800da92:	d00d      	beq.n	800dab0 <tcp_close_shutdown_fin+0x4c>
 800da94:	e026      	b.n	800dae4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f003 fee6 	bl	8011868 <tcp_send_fin>
 800da9c:	4603      	mov	r3, r0
 800da9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800daa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d11f      	bne.n	800dae8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2205      	movs	r2, #5
 800daac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800daae:	e01b      	b.n	800dae8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f003 fed9 	bl	8011868 <tcp_send_fin>
 800dab6:	4603      	mov	r3, r0
 800dab8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800daba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d114      	bne.n	800daec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2205      	movs	r2, #5
 800dac6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dac8:	e010      	b.n	800daec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f003 fecc 	bl	8011868 <tcp_send_fin>
 800dad0:	4603      	mov	r3, r0
 800dad2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d109      	bne.n	800daf0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2209      	movs	r2, #9
 800dae0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dae2:	e005      	b.n	800daf0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	e01c      	b.n	800db22 <tcp_close_shutdown_fin+0xbe>
      break;
 800dae8:	bf00      	nop
 800daea:	e002      	b.n	800daf2 <tcp_close_shutdown_fin+0x8e>
      break;
 800daec:	bf00      	nop
 800daee:	e000      	b.n	800daf2 <tcp_close_shutdown_fin+0x8e>
      break;
 800daf0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800daf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d103      	bne.n	800db02 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f003 fff2 	bl	8011ae4 <tcp_output>
 800db00:	e00d      	b.n	800db1e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0a:	d108      	bne.n	800db1e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	8b5b      	ldrh	r3, [r3, #26]
 800db10:	f043 0308 	orr.w	r3, r3, #8
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e001      	b.n	800db22 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800db1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	080178ec 	.word	0x080178ec
 800db30:	0801799c 	.word	0x0801799c
 800db34:	08017930 	.word	0x08017930

0800db38 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d109      	bne.n	800db5a <tcp_close+0x22>
 800db46:	4b0f      	ldr	r3, [pc, #60]	; (800db84 <tcp_close+0x4c>)
 800db48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800db4c:	490e      	ldr	r1, [pc, #56]	; (800db88 <tcp_close+0x50>)
 800db4e:	480f      	ldr	r0, [pc, #60]	; (800db8c <tcp_close+0x54>)
 800db50:	f007 ffda 	bl	8015b08 <iprintf>
 800db54:	f06f 030f 	mvn.w	r3, #15
 800db58:	e00f      	b.n	800db7a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	7d1b      	ldrb	r3, [r3, #20]
 800db5e:	2b01      	cmp	r3, #1
 800db60:	d006      	beq.n	800db70 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	8b5b      	ldrh	r3, [r3, #26]
 800db66:	f043 0310 	orr.w	r3, r3, #16
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800db70:	2101      	movs	r1, #1
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7ff fe94 	bl	800d8a0 <tcp_close_shutdown>
 800db78:	4603      	mov	r3, r0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	080178ec 	.word	0x080178ec
 800db88:	080179fc 	.word	0x080179fc
 800db8c:	08017930 	.word	0x08017930

0800db90 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b08e      	sub	sp, #56	; 0x38
 800db94:	af04      	add	r7, sp, #16
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d107      	bne.n	800dbb0 <tcp_abandon+0x20>
 800dba0:	4b52      	ldr	r3, [pc, #328]	; (800dcec <tcp_abandon+0x15c>)
 800dba2:	f240 223d 	movw	r2, #573	; 0x23d
 800dba6:	4952      	ldr	r1, [pc, #328]	; (800dcf0 <tcp_abandon+0x160>)
 800dba8:	4852      	ldr	r0, [pc, #328]	; (800dcf4 <tcp_abandon+0x164>)
 800dbaa:	f007 ffad 	bl	8015b08 <iprintf>
 800dbae:	e099      	b.n	800dce4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	7d1b      	ldrb	r3, [r3, #20]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d106      	bne.n	800dbc6 <tcp_abandon+0x36>
 800dbb8:	4b4c      	ldr	r3, [pc, #304]	; (800dcec <tcp_abandon+0x15c>)
 800dbba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dbbe:	494e      	ldr	r1, [pc, #312]	; (800dcf8 <tcp_abandon+0x168>)
 800dbc0:	484c      	ldr	r0, [pc, #304]	; (800dcf4 <tcp_abandon+0x164>)
 800dbc2:	f007 ffa1 	bl	8015b08 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	7d1b      	ldrb	r3, [r3, #20]
 800dbca:	2b0a      	cmp	r3, #10
 800dbcc:	d107      	bne.n	800dbde <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	484a      	ldr	r0, [pc, #296]	; (800dcfc <tcp_abandon+0x16c>)
 800dbd2:	f000 ffc3 	bl	800eb5c <tcp_pcb_remove>
    tcp_free(pcb);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff fdb0 	bl	800d73c <tcp_free>
 800dbdc:	e082      	b.n	800dce4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbf8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	691b      	ldr	r3, [r3, #16]
 800dbfe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d126      	bne.n	800dc56 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	8adb      	ldrh	r3, [r3, #22]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d02e      	beq.n	800dc6e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc10:	4b3b      	ldr	r3, [pc, #236]	; (800dd00 <tcp_abandon+0x170>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d105      	bne.n	800dc26 <tcp_abandon+0x96>
 800dc1a:	4b39      	ldr	r3, [pc, #228]	; (800dd00 <tcp_abandon+0x170>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	4a37      	ldr	r2, [pc, #220]	; (800dd00 <tcp_abandon+0x170>)
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	e013      	b.n	800dc4e <tcp_abandon+0xbe>
 800dc26:	4b36      	ldr	r3, [pc, #216]	; (800dd00 <tcp_abandon+0x170>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	61fb      	str	r3, [r7, #28]
 800dc2c:	e00c      	b.n	800dc48 <tcp_abandon+0xb8>
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d104      	bne.n	800dc42 <tcp_abandon+0xb2>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68da      	ldr	r2, [r3, #12]
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	60da      	str	r2, [r3, #12]
 800dc40:	e005      	b.n	800dc4e <tcp_abandon+0xbe>
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	61fb      	str	r3, [r7, #28]
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1ef      	bne.n	800dc2e <tcp_abandon+0x9e>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	60da      	str	r2, [r3, #12]
 800dc54:	e00b      	b.n	800dc6e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	8adb      	ldrh	r3, [r3, #22]
 800dc5e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc60:	6879      	ldr	r1, [r7, #4]
 800dc62:	4828      	ldr	r0, [pc, #160]	; (800dd04 <tcp_abandon+0x174>)
 800dc64:	f000 ff7a 	bl	800eb5c <tcp_pcb_remove>
 800dc68:	4b27      	ldr	r3, [pc, #156]	; (800dd08 <tcp_abandon+0x178>)
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 fd1c 	bl	800e6b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d004      	beq.n	800dc92 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 fd13 	bl	800e6b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d004      	beq.n	800dca4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f000 fd0a 	bl	800e6b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00e      	beq.n	800dcc8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dcaa:	6879      	ldr	r1, [r7, #4]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	8b12      	ldrh	r2, [r2, #24]
 800dcb4:	9202      	str	r2, [sp, #8]
 800dcb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dcb8:	9201      	str	r2, [sp, #4]
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	69b9      	ldr	r1, [r7, #24]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f004 fcc2 	bl	801264c <tcp_rst>
    }
    last_state = pcb->state;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff fd34 	bl	800d73c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d004      	beq.n	800dce4 <tcp_abandon+0x154>
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	f06f 010c 	mvn.w	r1, #12
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	4798      	blx	r3
  }
}
 800dce4:	3728      	adds	r7, #40	; 0x28
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	080178ec 	.word	0x080178ec
 800dcf0:	08017a30 	.word	0x08017a30
 800dcf4:	08017930 	.word	0x08017930
 800dcf8:	08017a4c 	.word	0x08017a4c
 800dcfc:	20045070 	.word	0x20045070
 800dd00:	20045064 	.word	0x20045064
 800dd04:	2004506c 	.word	0x2004506c
 800dd08:	20045074 	.word	0x20045074

0800dd0c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dd14:	2101      	movs	r1, #1
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7ff ff3a 	bl	800db90 <tcp_abandon>
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <tcp_update_rcv_ann_wnd+0x1c>
 800dd32:	4b25      	ldr	r3, [pc, #148]	; (800ddc8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dd34:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dd38:	4924      	ldr	r1, [pc, #144]	; (800ddcc <tcp_update_rcv_ann_wnd+0xa8>)
 800dd3a:	4825      	ldr	r0, [pc, #148]	; (800ddd0 <tcp_update_rcv_ann_wnd+0xac>)
 800dd3c:	f007 fee4 	bl	8015b08 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dd48:	4413      	add	r3, r2
 800dd4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd54:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dd58:	bf28      	it	cs
 800dd5a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dd5e:	b292      	uxth	r2, r2
 800dd60:	4413      	add	r3, r2
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	db08      	blt.n	800dd7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	e020      	b.n	800ddbe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	dd03      	ble.n	800dd92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd90:	e014      	b.n	800ddbc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dda4:	d306      	bcc.n	800ddb4 <tcp_update_rcv_ann_wnd+0x90>
 800dda6:	4b08      	ldr	r3, [pc, #32]	; (800ddc8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dda8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ddac:	4909      	ldr	r1, [pc, #36]	; (800ddd4 <tcp_update_rcv_ann_wnd+0xb0>)
 800ddae:	4808      	ldr	r0, [pc, #32]	; (800ddd0 <tcp_update_rcv_ann_wnd+0xac>)
 800ddb0:	f007 feaa 	bl	8015b08 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ddbc:	2300      	movs	r3, #0
  }
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	080178ec 	.word	0x080178ec
 800ddcc:	08017b48 	.word	0x08017b48
 800ddd0:	08017930 	.word	0x08017930
 800ddd4:	08017b6c 	.word	0x08017b6c

0800ddd8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d107      	bne.n	800ddfa <tcp_recved+0x22>
 800ddea:	4b1f      	ldr	r3, [pc, #124]	; (800de68 <tcp_recved+0x90>)
 800ddec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ddf0:	491e      	ldr	r1, [pc, #120]	; (800de6c <tcp_recved+0x94>)
 800ddf2:	481f      	ldr	r0, [pc, #124]	; (800de70 <tcp_recved+0x98>)
 800ddf4:	f007 fe88 	bl	8015b08 <iprintf>
 800ddf8:	e032      	b.n	800de60 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	7d1b      	ldrb	r3, [r3, #20]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d106      	bne.n	800de10 <tcp_recved+0x38>
 800de02:	4b19      	ldr	r3, [pc, #100]	; (800de68 <tcp_recved+0x90>)
 800de04:	f240 32d2 	movw	r2, #978	; 0x3d2
 800de08:	491a      	ldr	r1, [pc, #104]	; (800de74 <tcp_recved+0x9c>)
 800de0a:	4819      	ldr	r0, [pc, #100]	; (800de70 <tcp_recved+0x98>)
 800de0c:	f007 fe7c 	bl	8015b08 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de14:	887b      	ldrh	r3, [r7, #2]
 800de16:	4413      	add	r3, r2
 800de18:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800de1a:	89fb      	ldrh	r3, [r7, #14]
 800de1c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de20:	d804      	bhi.n	800de2c <tcp_recved+0x54>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de26:	89fa      	ldrh	r2, [r7, #14]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d204      	bcs.n	800de36 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de32:	851a      	strh	r2, [r3, #40]	; 0x28
 800de34:	e002      	b.n	800de3c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	89fa      	ldrh	r2, [r7, #14]
 800de3a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff ff71 	bl	800dd24 <tcp_update_rcv_ann_wnd>
 800de42:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de4a:	d309      	bcc.n	800de60 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f043 0302 	orr.w	r3, r3, #2
 800de54:	b29a      	uxth	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f003 fe42 	bl	8011ae4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	080178ec 	.word	0x080178ec
 800de6c:	08017b88 	.word	0x08017b88
 800de70:	08017930 	.word	0x08017930
 800de74:	08017ba0 	.word	0x08017ba0

0800de78 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b090      	sub	sp, #64	; 0x40
 800de7c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800de84:	4b94      	ldr	r3, [pc, #592]	; (800e0d8 <tcp_slowtmr+0x260>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3301      	adds	r3, #1
 800de8a:	4a93      	ldr	r2, [pc, #588]	; (800e0d8 <tcp_slowtmr+0x260>)
 800de8c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800de8e:	4b93      	ldr	r3, [pc, #588]	; (800e0dc <tcp_slowtmr+0x264>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	b2da      	uxtb	r2, r3
 800de96:	4b91      	ldr	r3, [pc, #580]	; (800e0dc <tcp_slowtmr+0x264>)
 800de98:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800de9e:	4b90      	ldr	r3, [pc, #576]	; (800e0e0 <tcp_slowtmr+0x268>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dea4:	e29d      	b.n	800e3e2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	7d1b      	ldrb	r3, [r3, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d106      	bne.n	800debc <tcp_slowtmr+0x44>
 800deae:	4b8d      	ldr	r3, [pc, #564]	; (800e0e4 <tcp_slowtmr+0x26c>)
 800deb0:	f240 42be 	movw	r2, #1214	; 0x4be
 800deb4:	498c      	ldr	r1, [pc, #560]	; (800e0e8 <tcp_slowtmr+0x270>)
 800deb6:	488d      	ldr	r0, [pc, #564]	; (800e0ec <tcp_slowtmr+0x274>)
 800deb8:	f007 fe26 	bl	8015b08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	7d1b      	ldrb	r3, [r3, #20]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d106      	bne.n	800ded2 <tcp_slowtmr+0x5a>
 800dec4:	4b87      	ldr	r3, [pc, #540]	; (800e0e4 <tcp_slowtmr+0x26c>)
 800dec6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800deca:	4989      	ldr	r1, [pc, #548]	; (800e0f0 <tcp_slowtmr+0x278>)
 800decc:	4887      	ldr	r0, [pc, #540]	; (800e0ec <tcp_slowtmr+0x274>)
 800dece:	f007 fe1b 	bl	8015b08 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ded2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded4:	7d1b      	ldrb	r3, [r3, #20]
 800ded6:	2b0a      	cmp	r3, #10
 800ded8:	d106      	bne.n	800dee8 <tcp_slowtmr+0x70>
 800deda:	4b82      	ldr	r3, [pc, #520]	; (800e0e4 <tcp_slowtmr+0x26c>)
 800dedc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dee0:	4984      	ldr	r1, [pc, #528]	; (800e0f4 <tcp_slowtmr+0x27c>)
 800dee2:	4882      	ldr	r0, [pc, #520]	; (800e0ec <tcp_slowtmr+0x274>)
 800dee4:	f007 fe10 	bl	8015b08 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	7f9a      	ldrb	r2, [r3, #30]
 800deec:	4b7b      	ldr	r3, [pc, #492]	; (800e0dc <tcp_slowtmr+0x264>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	429a      	cmp	r2, r3
 800def2:	d105      	bne.n	800df00 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800defe:	e270      	b.n	800e3e2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800df00:	4b76      	ldr	r3, [pc, #472]	; (800e0dc <tcp_slowtmr+0x264>)
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df06:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df16:	7d1b      	ldrb	r3, [r3, #20]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d10a      	bne.n	800df32 <tcp_slowtmr+0xba>
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df22:	2b05      	cmp	r3, #5
 800df24:	d905      	bls.n	800df32 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800df26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df2a:	3301      	adds	r3, #1
 800df2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df30:	e11e      	b.n	800e170 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df38:	2b0b      	cmp	r3, #11
 800df3a:	d905      	bls.n	800df48 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800df3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df40:	3301      	adds	r3, #1
 800df42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df46:	e113      	b.n	800e170 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d075      	beq.n	800e03e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800df52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df56:	2b00      	cmp	r3, #0
 800df58:	d006      	beq.n	800df68 <tcp_slowtmr+0xf0>
 800df5a:	4b62      	ldr	r3, [pc, #392]	; (800e0e4 <tcp_slowtmr+0x26c>)
 800df5c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800df60:	4965      	ldr	r1, [pc, #404]	; (800e0f8 <tcp_slowtmr+0x280>)
 800df62:	4862      	ldr	r0, [pc, #392]	; (800e0ec <tcp_slowtmr+0x274>)
 800df64:	f007 fdd0 	bl	8015b08 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d106      	bne.n	800df7e <tcp_slowtmr+0x106>
 800df70:	4b5c      	ldr	r3, [pc, #368]	; (800e0e4 <tcp_slowtmr+0x26c>)
 800df72:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800df76:	4961      	ldr	r1, [pc, #388]	; (800e0fc <tcp_slowtmr+0x284>)
 800df78:	485c      	ldr	r0, [pc, #368]	; (800e0ec <tcp_slowtmr+0x274>)
 800df7a:	f007 fdc5 	bl	8015b08 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800df7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df84:	2b0b      	cmp	r3, #11
 800df86:	d905      	bls.n	800df94 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8c:	3301      	adds	r3, #1
 800df8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df92:	e0ed      	b.n	800e170 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800df94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df9a:	3b01      	subs	r3, #1
 800df9c:	4a58      	ldr	r2, [pc, #352]	; (800e100 <tcp_slowtmr+0x288>)
 800df9e:	5cd3      	ldrb	r3, [r2, r3]
 800dfa0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dfa8:	7c7a      	ldrb	r2, [r7, #17]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d907      	bls.n	800dfbe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dfc4:	7c7a      	ldrb	r2, [r7, #17]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	f200 80d2 	bhi.w	800e170 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dfcc:	2301      	movs	r3, #1
 800dfce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d108      	bne.n	800dfec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dfda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfdc:	f004 fc2a 	bl	8012834 <tcp_zero_window_probe>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d014      	beq.n	800e010 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	623b      	str	r3, [r7, #32]
 800dfea:	e011      	b.n	800e010 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dff2:	4619      	mov	r1, r3
 800dff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dff6:	f003 faef 	bl	80115d8 <tcp_split_unsent_seg>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d107      	bne.n	800e010 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e002:	f003 fd6f 	bl	8011ae4 <tcp_output>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e010:	6a3b      	ldr	r3, [r7, #32]
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 80ac 	beq.w	800e170 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e022:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e026:	2b06      	cmp	r3, #6
 800e028:	f200 80a2 	bhi.w	800e170 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e032:	3301      	adds	r3, #1
 800e034:	b2da      	uxtb	r2, r3
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e03c:	e098      	b.n	800e170 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e040:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e044:	2b00      	cmp	r3, #0
 800e046:	db0f      	blt.n	800e068 <tcp_slowtmr+0x1f0>
 800e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e04e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e052:	4293      	cmp	r3, r2
 800e054:	d008      	beq.n	800e068 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	3301      	adds	r3, #1
 800e060:	b29b      	uxth	r3, r3
 800e062:	b21a      	sxth	r2, r3
 800e064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e066:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e070:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e074:	429a      	cmp	r2, r3
 800e076:	db7b      	blt.n	800e170 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e07a:	f004 f827 	bl	80120cc <tcp_rexmit_rto_prepare>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d007      	beq.n	800e094 <tcp_slowtmr+0x21c>
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d171      	bne.n	800e170 <tcp_slowtmr+0x2f8>
 800e08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e090:	2b00      	cmp	r3, #0
 800e092:	d06d      	beq.n	800e170 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	7d1b      	ldrb	r3, [r3, #20]
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d03a      	beq.n	800e112 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0a2:	2b0c      	cmp	r3, #12
 800e0a4:	bf28      	it	cs
 800e0a6:	230c      	movcs	r3, #12
 800e0a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e0b0:	10db      	asrs	r3, r3, #3
 800e0b2:	b21b      	sxth	r3, r3
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e0bc:	4413      	add	r3, r2
 800e0be:	7efa      	ldrb	r2, [r7, #27]
 800e0c0:	4910      	ldr	r1, [pc, #64]	; (800e104 <tcp_slowtmr+0x28c>)
 800e0c2:	5c8a      	ldrb	r2, [r1, r2]
 800e0c4:	4093      	lsls	r3, r2
 800e0c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	dc1a      	bgt.n	800e108 <tcp_slowtmr+0x290>
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	b21a      	sxth	r2, r3
 800e0d6:	e019      	b.n	800e10c <tcp_slowtmr+0x294>
 800e0d8:	20045060 	.word	0x20045060
 800e0dc:	20045076 	.word	0x20045076
 800e0e0:	2004506c 	.word	0x2004506c
 800e0e4:	080178ec 	.word	0x080178ec
 800e0e8:	08017c30 	.word	0x08017c30
 800e0ec:	08017930 	.word	0x08017930
 800e0f0:	08017c5c 	.word	0x08017c5c
 800e0f4:	08017c88 	.word	0x08017c88
 800e0f8:	08017cb8 	.word	0x08017cb8
 800e0fc:	08017cec 	.word	0x08017cec
 800e100:	0801990c 	.word	0x0801990c
 800e104:	080198fc 	.word	0x080198fc
 800e108:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	2200      	movs	r2, #0
 800e116:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e124:	4293      	cmp	r3, r2
 800e126:	bf28      	it	cs
 800e128:	4613      	movcs	r3, r2
 800e12a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e12c:	8a7b      	ldrh	r3, [r7, #18]
 800e12e:	085b      	lsrs	r3, r3, #1
 800e130:	b29a      	uxth	r2, r3
 800e132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e134:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	b29b      	uxth	r3, r3
 800e146:	429a      	cmp	r2, r3
 800e148:	d206      	bcs.n	800e158 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e14e:	005b      	lsls	r3, r3, #1
 800e150:	b29a      	uxth	r2, r3
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e164:	2200      	movs	r2, #0
 800e166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e16c:	f004 f81e 	bl	80121ac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	2b06      	cmp	r3, #6
 800e176:	d111      	bne.n	800e19c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	8b5b      	ldrh	r3, [r3, #26]
 800e17c:	f003 0310 	and.w	r3, r3, #16
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00b      	beq.n	800e19c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e184:	4b9c      	ldr	r3, [pc, #624]	; (800e3f8 <tcp_slowtmr+0x580>)
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18a:	6a1b      	ldr	r3, [r3, #32]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	2b28      	cmp	r3, #40	; 0x28
 800e190:	d904      	bls.n	800e19c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e196:	3301      	adds	r3, #1
 800e198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	7a5b      	ldrb	r3, [r3, #9]
 800e1a0:	f003 0308 	and.w	r3, r3, #8
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d04a      	beq.n	800e23e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	d003      	beq.n	800e1b8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e1b4:	2b07      	cmp	r3, #7
 800e1b6:	d142      	bne.n	800e23e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1b8:	4b8f      	ldr	r3, [pc, #572]	; (800e3f8 <tcp_slowtmr+0x580>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	6a1b      	ldr	r3, [r3, #32]
 800e1c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e1c8:	4b8c      	ldr	r3, [pc, #560]	; (800e3fc <tcp_slowtmr+0x584>)
 800e1ca:	440b      	add	r3, r1
 800e1cc:	498c      	ldr	r1, [pc, #560]	; (800e400 <tcp_slowtmr+0x588>)
 800e1ce:	fba1 1303 	umull	r1, r3, r1, r3
 800e1d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d90a      	bls.n	800e1ee <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1dc:	3301      	adds	r3, #1
 800e1de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e1e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e1ec:	e027      	b.n	800e23e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1ee:	4b82      	ldr	r3, [pc, #520]	; (800e3f8 <tcp_slowtmr+0x580>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	6a1b      	ldr	r3, [r3, #32]
 800e1f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e204:	4618      	mov	r0, r3
 800e206:	4b7f      	ldr	r3, [pc, #508]	; (800e404 <tcp_slowtmr+0x58c>)
 800e208:	fb00 f303 	mul.w	r3, r0, r3
 800e20c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e20e:	497c      	ldr	r1, [pc, #496]	; (800e400 <tcp_slowtmr+0x588>)
 800e210:	fba1 1303 	umull	r1, r3, r1, r3
 800e214:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e216:	429a      	cmp	r2, r3
 800e218:	d911      	bls.n	800e23e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e21c:	f004 faca 	bl	80127b4 <tcp_keepalive>
 800e220:	4603      	mov	r3, r0
 800e222:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e226:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d107      	bne.n	800e23e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e234:	3301      	adds	r3, #1
 800e236:	b2da      	uxtb	r2, r3
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e242:	2b00      	cmp	r3, #0
 800e244:	d011      	beq.n	800e26a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e246:	4b6c      	ldr	r3, [pc, #432]	; (800e3f8 <tcp_slowtmr+0x580>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	1ad2      	subs	r2, r2, r3
 800e250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e252:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e256:	4619      	mov	r1, r3
 800e258:	460b      	mov	r3, r1
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	440b      	add	r3, r1
 800e25e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e260:	429a      	cmp	r2, r3
 800e262:	d302      	bcc.n	800e26a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e266:	f000 fddd 	bl	800ee24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	7d1b      	ldrb	r3, [r3, #20]
 800e26e:	2b03      	cmp	r3, #3
 800e270:	d10b      	bne.n	800e28a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e272:	4b61      	ldr	r3, [pc, #388]	; (800e3f8 <tcp_slowtmr+0x580>)
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	6a1b      	ldr	r3, [r3, #32]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	2b28      	cmp	r3, #40	; 0x28
 800e27e:	d904      	bls.n	800e28a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	3301      	adds	r3, #1
 800e286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28c:	7d1b      	ldrb	r3, [r3, #20]
 800e28e:	2b09      	cmp	r3, #9
 800e290:	d10b      	bne.n	800e2aa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e292:	4b59      	ldr	r3, [pc, #356]	; (800e3f8 <tcp_slowtmr+0x580>)
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	2bf0      	cmp	r3, #240	; 0xf0
 800e29e:	d904      	bls.n	800e2aa <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e2aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d060      	beq.n	800e374 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e2ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2bc:	f000 fbfe 	bl	800eabc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d010      	beq.n	800e2e8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e2c6:	4b50      	ldr	r3, [pc, #320]	; (800e408 <tcp_slowtmr+0x590>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d106      	bne.n	800e2de <tcp_slowtmr+0x466>
 800e2d0:	4b4e      	ldr	r3, [pc, #312]	; (800e40c <tcp_slowtmr+0x594>)
 800e2d2:	f240 526d 	movw	r2, #1389	; 0x56d
 800e2d6:	494e      	ldr	r1, [pc, #312]	; (800e410 <tcp_slowtmr+0x598>)
 800e2d8:	484e      	ldr	r0, [pc, #312]	; (800e414 <tcp_slowtmr+0x59c>)
 800e2da:	f007 fc15 	bl	8015b08 <iprintf>
        prev->next = pcb->next;
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	68da      	ldr	r2, [r3, #12]
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	60da      	str	r2, [r3, #12]
 800e2e6:	e00f      	b.n	800e308 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e2e8:	4b47      	ldr	r3, [pc, #284]	; (800e408 <tcp_slowtmr+0x590>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d006      	beq.n	800e300 <tcp_slowtmr+0x488>
 800e2f2:	4b46      	ldr	r3, [pc, #280]	; (800e40c <tcp_slowtmr+0x594>)
 800e2f4:	f240 5271 	movw	r2, #1393	; 0x571
 800e2f8:	4947      	ldr	r1, [pc, #284]	; (800e418 <tcp_slowtmr+0x5a0>)
 800e2fa:	4846      	ldr	r0, [pc, #280]	; (800e414 <tcp_slowtmr+0x59c>)
 800e2fc:	f007 fc04 	bl	8015b08 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	4a40      	ldr	r2, [pc, #256]	; (800e408 <tcp_slowtmr+0x590>)
 800e306:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d013      	beq.n	800e338 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e318:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	3304      	adds	r3, #4
 800e31e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e320:	8ad2      	ldrh	r2, [r2, #22]
 800e322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e324:	8b09      	ldrh	r1, [r1, #24]
 800e326:	9102      	str	r1, [sp, #8]
 800e328:	9201      	str	r2, [sp, #4]
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	462b      	mov	r3, r5
 800e32e:	4622      	mov	r2, r4
 800e330:	4601      	mov	r1, r0
 800e332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e334:	f004 f98a 	bl	801264c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33a:	691b      	ldr	r3, [r3, #16]
 800e33c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	7d1b      	ldrb	r3, [r3, #20]
 800e342:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e34e:	6838      	ldr	r0, [r7, #0]
 800e350:	f7ff f9f4 	bl	800d73c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e354:	4b31      	ldr	r3, [pc, #196]	; (800e41c <tcp_slowtmr+0x5a4>)
 800e356:	2200      	movs	r2, #0
 800e358:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d004      	beq.n	800e36a <tcp_slowtmr+0x4f2>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f06f 010c 	mvn.w	r1, #12
 800e366:	68b8      	ldr	r0, [r7, #8]
 800e368:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e36a:	4b2c      	ldr	r3, [pc, #176]	; (800e41c <tcp_slowtmr+0x5a4>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d037      	beq.n	800e3e2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e372:	e592      	b.n	800de9a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e380:	7f1b      	ldrb	r3, [r3, #28]
 800e382:	3301      	adds	r3, #1
 800e384:	b2da      	uxtb	r2, r3
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	7f1a      	ldrb	r2, [r3, #28]
 800e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e390:	7f5b      	ldrb	r3, [r3, #29]
 800e392:	429a      	cmp	r2, r3
 800e394:	d325      	bcc.n	800e3e2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e398:	2200      	movs	r2, #0
 800e39a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e39c:	4b1f      	ldr	r3, [pc, #124]	; (800e41c <tcp_slowtmr+0x5a4>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00b      	beq.n	800e3c4 <tcp_slowtmr+0x54c>
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3b4:	6912      	ldr	r2, [r2, #16]
 800e3b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3b8:	4610      	mov	r0, r2
 800e3ba:	4798      	blx	r3
 800e3bc:	4603      	mov	r3, r0
 800e3be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e3c2:	e002      	b.n	800e3ca <tcp_slowtmr+0x552>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e3ca:	4b14      	ldr	r3, [pc, #80]	; (800e41c <tcp_slowtmr+0x5a4>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d000      	beq.n	800e3d4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e3d2:	e562      	b.n	800de9a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e3d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d102      	bne.n	800e3e2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3de:	f003 fb81 	bl	8011ae4 <tcp_output>
  while (pcb != NULL) {
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f47f ad5e 	bne.w	800dea6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e3ee:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <tcp_slowtmr+0x5a8>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e3f4:	e069      	b.n	800e4ca <tcp_slowtmr+0x652>
 800e3f6:	bf00      	nop
 800e3f8:	20045060 	.word	0x20045060
 800e3fc:	000a4cb8 	.word	0x000a4cb8
 800e400:	10624dd3 	.word	0x10624dd3
 800e404:	000124f8 	.word	0x000124f8
 800e408:	2004506c 	.word	0x2004506c
 800e40c:	080178ec 	.word	0x080178ec
 800e410:	08017d24 	.word	0x08017d24
 800e414:	08017930 	.word	0x08017930
 800e418:	08017d50 	.word	0x08017d50
 800e41c:	20045074 	.word	0x20045074
 800e420:	20045070 	.word	0x20045070
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	7d1b      	ldrb	r3, [r3, #20]
 800e428:	2b0a      	cmp	r3, #10
 800e42a:	d006      	beq.n	800e43a <tcp_slowtmr+0x5c2>
 800e42c:	4b2b      	ldr	r3, [pc, #172]	; (800e4dc <tcp_slowtmr+0x664>)
 800e42e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e432:	492b      	ldr	r1, [pc, #172]	; (800e4e0 <tcp_slowtmr+0x668>)
 800e434:	482b      	ldr	r0, [pc, #172]	; (800e4e4 <tcp_slowtmr+0x66c>)
 800e436:	f007 fb67 	bl	8015b08 <iprintf>
    pcb_remove = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e440:	4b29      	ldr	r3, [pc, #164]	; (800e4e8 <tcp_slowtmr+0x670>)
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	6a1b      	ldr	r3, [r3, #32]
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	2bf0      	cmp	r3, #240	; 0xf0
 800e44c:	d904      	bls.n	800e458 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e44e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e452:	3301      	adds	r3, #1
 800e454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d02f      	beq.n	800e4c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e462:	f000 fb2b 	bl	800eabc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d010      	beq.n	800e48e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e46c:	4b1f      	ldr	r3, [pc, #124]	; (800e4ec <tcp_slowtmr+0x674>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e472:	429a      	cmp	r2, r3
 800e474:	d106      	bne.n	800e484 <tcp_slowtmr+0x60c>
 800e476:	4b19      	ldr	r3, [pc, #100]	; (800e4dc <tcp_slowtmr+0x664>)
 800e478:	f240 52af 	movw	r2, #1455	; 0x5af
 800e47c:	491c      	ldr	r1, [pc, #112]	; (800e4f0 <tcp_slowtmr+0x678>)
 800e47e:	4819      	ldr	r0, [pc, #100]	; (800e4e4 <tcp_slowtmr+0x66c>)
 800e480:	f007 fb42 	bl	8015b08 <iprintf>
        prev->next = pcb->next;
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	68da      	ldr	r2, [r3, #12]
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	60da      	str	r2, [r3, #12]
 800e48c:	e00f      	b.n	800e4ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e48e:	4b17      	ldr	r3, [pc, #92]	; (800e4ec <tcp_slowtmr+0x674>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e494:	429a      	cmp	r2, r3
 800e496:	d006      	beq.n	800e4a6 <tcp_slowtmr+0x62e>
 800e498:	4b10      	ldr	r3, [pc, #64]	; (800e4dc <tcp_slowtmr+0x664>)
 800e49a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e49e:	4915      	ldr	r1, [pc, #84]	; (800e4f4 <tcp_slowtmr+0x67c>)
 800e4a0:	4810      	ldr	r0, [pc, #64]	; (800e4e4 <tcp_slowtmr+0x66c>)
 800e4a2:	f007 fb31 	bl	8015b08 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	4a10      	ldr	r2, [pc, #64]	; (800e4ec <tcp_slowtmr+0x674>)
 800e4ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e4b8:	69f8      	ldr	r0, [r7, #28]
 800e4ba:	f7ff f93f 	bl	800d73c <tcp_free>
 800e4be:	e004      	b.n	800e4ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	68db      	ldr	r3, [r3, #12]
 800e4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d1a9      	bne.n	800e424 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e4d0:	bf00      	nop
 800e4d2:	bf00      	nop
 800e4d4:	3730      	adds	r7, #48	; 0x30
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	080178ec 	.word	0x080178ec
 800e4e0:	08017d7c 	.word	0x08017d7c
 800e4e4:	08017930 	.word	0x08017930
 800e4e8:	20045060 	.word	0x20045060
 800e4ec:	20045070 	.word	0x20045070
 800e4f0:	08017dac 	.word	0x08017dac
 800e4f4:	08017dd4 	.word	0x08017dd4

0800e4f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e4fe:	4b2d      	ldr	r3, [pc, #180]	; (800e5b4 <tcp_fasttmr+0xbc>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	3301      	adds	r3, #1
 800e504:	b2da      	uxtb	r2, r3
 800e506:	4b2b      	ldr	r3, [pc, #172]	; (800e5b4 <tcp_fasttmr+0xbc>)
 800e508:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e50a:	4b2b      	ldr	r3, [pc, #172]	; (800e5b8 <tcp_fasttmr+0xc0>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e510:	e048      	b.n	800e5a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	7f9a      	ldrb	r2, [r3, #30]
 800e516:	4b27      	ldr	r3, [pc, #156]	; (800e5b4 <tcp_fasttmr+0xbc>)
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d03f      	beq.n	800e59e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e51e:	4b25      	ldr	r3, [pc, #148]	; (800e5b4 <tcp_fasttmr+0xbc>)
 800e520:	781a      	ldrb	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	8b5b      	ldrh	r3, [r3, #26]
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d010      	beq.n	800e554 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	8b5b      	ldrh	r3, [r3, #26]
 800e536:	f043 0302 	orr.w	r3, r3, #2
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f003 facf 	bl	8011ae4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	8b5b      	ldrh	r3, [r3, #26]
 800e54a:	f023 0303 	bic.w	r3, r3, #3
 800e54e:	b29a      	uxth	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	8b5b      	ldrh	r3, [r3, #26]
 800e558:	f003 0308 	and.w	r3, r3, #8
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d009      	beq.n	800e574 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	8b5b      	ldrh	r3, [r3, #26]
 800e564:	f023 0308 	bic.w	r3, r3, #8
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fa78 	bl	800da64 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e582:	4b0e      	ldr	r3, [pc, #56]	; (800e5bc <tcp_fasttmr+0xc4>)
 800e584:	2200      	movs	r2, #0
 800e586:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f819 	bl	800e5c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e58e:	4b0b      	ldr	r3, [pc, #44]	; (800e5bc <tcp_fasttmr+0xc4>)
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d000      	beq.n	800e598 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e596:	e7b8      	b.n	800e50a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	607b      	str	r3, [r7, #4]
 800e59c:	e002      	b.n	800e5a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68db      	ldr	r3, [r3, #12]
 800e5a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1b3      	bne.n	800e512 <tcp_fasttmr+0x1a>
    }
  }
}
 800e5aa:	bf00      	nop
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20045076 	.word	0x20045076
 800e5b8:	2004506c 	.word	0x2004506c
 800e5bc:	20045074 	.word	0x20045074

0800e5c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e5c0:	b590      	push	{r4, r7, lr}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d109      	bne.n	800e5e2 <tcp_process_refused_data+0x22>
 800e5ce:	4b37      	ldr	r3, [pc, #220]	; (800e6ac <tcp_process_refused_data+0xec>)
 800e5d0:	f240 6209 	movw	r2, #1545	; 0x609
 800e5d4:	4936      	ldr	r1, [pc, #216]	; (800e6b0 <tcp_process_refused_data+0xf0>)
 800e5d6:	4837      	ldr	r0, [pc, #220]	; (800e6b4 <tcp_process_refused_data+0xf4>)
 800e5d8:	f007 fa96 	bl	8015b08 <iprintf>
 800e5dc:	f06f 030f 	mvn.w	r3, #15
 800e5e0:	e060      	b.n	800e6a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5e6:	7b5b      	ldrb	r3, [r3, #13]
 800e5e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <tcp_process_refused_data+0x58>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6918      	ldr	r0, [r3, #16]
 800e60a:	2300      	movs	r3, #0
 800e60c:	68ba      	ldr	r2, [r7, #8]
 800e60e:	6879      	ldr	r1, [r7, #4]
 800e610:	47a0      	blx	r4
 800e612:	4603      	mov	r3, r0
 800e614:	73fb      	strb	r3, [r7, #15]
 800e616:	e007      	b.n	800e628 <tcp_process_refused_data+0x68>
 800e618:	2300      	movs	r3, #0
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	6879      	ldr	r1, [r7, #4]
 800e61e:	2000      	movs	r0, #0
 800e620:	f000 f8a4 	bl	800e76c <tcp_recv_null>
 800e624:	4603      	mov	r3, r0
 800e626:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d12a      	bne.n	800e686 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e630:	7bbb      	ldrb	r3, [r7, #14]
 800e632:	f003 0320 	and.w	r3, r3, #32
 800e636:	2b00      	cmp	r3, #0
 800e638:	d033      	beq.n	800e6a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e63e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e642:	d005      	beq.n	800e650 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e648:	3301      	adds	r3, #1
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00b      	beq.n	800e672 <tcp_process_refused_data+0xb2>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6918      	ldr	r0, [r3, #16]
 800e664:	2300      	movs	r3, #0
 800e666:	2200      	movs	r2, #0
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	47a0      	blx	r4
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]
 800e670:	e001      	b.n	800e676 <tcp_process_refused_data+0xb6>
 800e672:	2300      	movs	r3, #0
 800e674:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e67a:	f113 0f0d 	cmn.w	r3, #13
 800e67e:	d110      	bne.n	800e6a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e680:	f06f 030c 	mvn.w	r3, #12
 800e684:	e00e      	b.n	800e6a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e68a:	f113 0f0d 	cmn.w	r3, #13
 800e68e:	d102      	bne.n	800e696 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e690:	f06f 030c 	mvn.w	r3, #12
 800e694:	e006      	b.n	800e6a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e69c:	f06f 0304 	mvn.w	r3, #4
 800e6a0:	e000      	b.n	800e6a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd90      	pop	{r4, r7, pc}
 800e6ac:	080178ec 	.word	0x080178ec
 800e6b0:	08017dfc 	.word	0x08017dfc
 800e6b4:	08017930 	.word	0x08017930

0800e6b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e6c0:	e007      	b.n	800e6d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f80a 	bl	800e6e2 <tcp_seg_free>
    seg = next;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1f4      	bne.n	800e6c2 <tcp_segs_free+0xa>
  }
}
 800e6d8:	bf00      	nop
 800e6da:	bf00      	nop
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00c      	beq.n	800e70a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d004      	beq.n	800e702 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe fd71 	bl	800d1e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e702:	6879      	ldr	r1, [r7, #4]
 800e704:	2003      	movs	r0, #3
 800e706:	f7fd fec9 	bl	800c49c <memp_free>
  }
}
 800e70a:	bf00      	nop
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
	...

0800e714 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d106      	bne.n	800e730 <tcp_seg_copy+0x1c>
 800e722:	4b0f      	ldr	r3, [pc, #60]	; (800e760 <tcp_seg_copy+0x4c>)
 800e724:	f240 6282 	movw	r2, #1666	; 0x682
 800e728:	490e      	ldr	r1, [pc, #56]	; (800e764 <tcp_seg_copy+0x50>)
 800e72a:	480f      	ldr	r0, [pc, #60]	; (800e768 <tcp_seg_copy+0x54>)
 800e72c:	f007 f9ec 	bl	8015b08 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e730:	2003      	movs	r0, #3
 800e732:	f7fd fe3d 	bl	800c3b0 <memp_malloc>
 800e736:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <tcp_seg_copy+0x2e>
    return NULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	e00a      	b.n	800e758 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e742:	2210      	movs	r2, #16
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	f007 fc05 	bl	8015f56 <memcpy>
  pbuf_ref(cseg->p);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe fded 	bl	800d330 <pbuf_ref>
  return cseg;
 800e756:	68fb      	ldr	r3, [r7, #12]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	080178ec 	.word	0x080178ec
 800e764:	08017e40 	.word	0x08017e40
 800e768:	08017930 	.word	0x08017930

0800e76c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <tcp_recv_null+0x28>
 800e780:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <tcp_recv_null+0x60>)
 800e782:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e786:	4912      	ldr	r1, [pc, #72]	; (800e7d0 <tcp_recv_null+0x64>)
 800e788:	4812      	ldr	r0, [pc, #72]	; (800e7d4 <tcp_recv_null+0x68>)
 800e78a:	f007 f9bd 	bl	8015b08 <iprintf>
 800e78e:	f06f 030f 	mvn.w	r3, #15
 800e792:	e016      	b.n	800e7c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d009      	beq.n	800e7ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	891b      	ldrh	r3, [r3, #8]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	68b8      	ldr	r0, [r7, #8]
 800e7a2:	f7ff fb19 	bl	800ddd8 <tcp_recved>
    pbuf_free(p);
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7fe fd1c 	bl	800d1e4 <pbuf_free>
 800e7ac:	e008      	b.n	800e7c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e7ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d104      	bne.n	800e7c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e7b6:	68b8      	ldr	r0, [r7, #8]
 800e7b8:	f7ff f9be 	bl	800db38 <tcp_close>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	e000      	b.n	800e7c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	080178ec 	.word	0x080178ec
 800e7d0:	08017e5c 	.word	0x08017e5c
 800e7d4:	08017930 	.word	0x08017930

0800e7d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	db01      	blt.n	800e7ee <tcp_kill_prio+0x16>
 800e7ea:	79fb      	ldrb	r3, [r7, #7]
 800e7ec:	e000      	b.n	800e7f0 <tcp_kill_prio+0x18>
 800e7ee:	237f      	movs	r3, #127	; 0x7f
 800e7f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e7f2:	7afb      	ldrb	r3, [r7, #11]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d034      	beq.n	800e862 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e7f8:	7afb      	ldrb	r3, [r7, #11]
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e7fe:	2300      	movs	r3, #0
 800e800:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e806:	4b19      	ldr	r3, [pc, #100]	; (800e86c <tcp_kill_prio+0x94>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	e01f      	b.n	800e84e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	7d5b      	ldrb	r3, [r3, #21]
 800e812:	7afa      	ldrb	r2, [r7, #11]
 800e814:	429a      	cmp	r2, r3
 800e816:	d80c      	bhi.n	800e832 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e81c:	7afa      	ldrb	r2, [r7, #11]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d112      	bne.n	800e848 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e822:	4b13      	ldr	r3, [pc, #76]	; (800e870 <tcp_kill_prio+0x98>)
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d80a      	bhi.n	800e848 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e832:	4b0f      	ldr	r3, [pc, #60]	; (800e870 <tcp_kill_prio+0x98>)
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	7d5b      	ldrb	r3, [r3, #21]
 800e846:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	617b      	str	r3, [r7, #20]
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1dc      	bne.n	800e80e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d004      	beq.n	800e864 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e85a:	6938      	ldr	r0, [r7, #16]
 800e85c:	f7ff fa56 	bl	800dd0c <tcp_abort>
 800e860:	e000      	b.n	800e864 <tcp_kill_prio+0x8c>
    return;
 800e862:	bf00      	nop
  }
}
 800e864:	3718      	adds	r7, #24
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	2004506c 	.word	0x2004506c
 800e870:	20045060 	.word	0x20045060

0800e874 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b086      	sub	sp, #24
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	2b08      	cmp	r3, #8
 800e882:	d009      	beq.n	800e898 <tcp_kill_state+0x24>
 800e884:	79fb      	ldrb	r3, [r7, #7]
 800e886:	2b09      	cmp	r3, #9
 800e888:	d006      	beq.n	800e898 <tcp_kill_state+0x24>
 800e88a:	4b1a      	ldr	r3, [pc, #104]	; (800e8f4 <tcp_kill_state+0x80>)
 800e88c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e890:	4919      	ldr	r1, [pc, #100]	; (800e8f8 <tcp_kill_state+0x84>)
 800e892:	481a      	ldr	r0, [pc, #104]	; (800e8fc <tcp_kill_state+0x88>)
 800e894:	f007 f938 	bl	8015b08 <iprintf>

  inactivity = 0;
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e89c:	2300      	movs	r3, #0
 800e89e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a0:	4b17      	ldr	r3, [pc, #92]	; (800e900 <tcp_kill_state+0x8c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	617b      	str	r3, [r7, #20]
 800e8a6:	e017      	b.n	800e8d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	7d1b      	ldrb	r3, [r3, #20]
 800e8ac:	79fa      	ldrb	r2, [r7, #7]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d10f      	bne.n	800e8d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e8b2:	4b14      	ldr	r3, [pc, #80]	; (800e904 <tcp_kill_state+0x90>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	6a1b      	ldr	r3, [r3, #32]
 800e8ba:	1ad3      	subs	r3, r2, r3
 800e8bc:	68fa      	ldr	r2, [r7, #12]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d807      	bhi.n	800e8d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e8c2:	4b10      	ldr	r3, [pc, #64]	; (800e904 <tcp_kill_state+0x90>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	617b      	str	r3, [r7, #20]
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e4      	bne.n	800e8a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d003      	beq.n	800e8ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	6938      	ldr	r0, [r7, #16]
 800e8e8:	f7ff f952 	bl	800db90 <tcp_abandon>
  }
}
 800e8ec:	bf00      	nop
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	080178ec 	.word	0x080178ec
 800e8f8:	08017e78 	.word	0x08017e78
 800e8fc:	08017930 	.word	0x08017930
 800e900:	2004506c 	.word	0x2004506c
 800e904:	20045060 	.word	0x20045060

0800e908 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e912:	2300      	movs	r3, #0
 800e914:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e916:	4b12      	ldr	r3, [pc, #72]	; (800e960 <tcp_kill_timewait+0x58>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
 800e91c:	e012      	b.n	800e944 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e91e:	4b11      	ldr	r3, [pc, #68]	; (800e964 <tcp_kill_timewait+0x5c>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d807      	bhi.n	800e93e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e92e:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <tcp_kill_timewait+0x5c>)
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	1ad3      	subs	r3, r2, r3
 800e938:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1e9      	bne.n	800e91e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e950:	68b8      	ldr	r0, [r7, #8]
 800e952:	f7ff f9db 	bl	800dd0c <tcp_abort>
  }
}
 800e956:	bf00      	nop
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	20045070 	.word	0x20045070
 800e964:	20045060 	.word	0x20045060

0800e968 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e96e:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <tcp_handle_closepend+0x48>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e974:	e014      	b.n	800e9a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	68db      	ldr	r3, [r3, #12]
 800e97a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	8b5b      	ldrh	r3, [r3, #26]
 800e980:	f003 0308 	and.w	r3, r3, #8
 800e984:	2b00      	cmp	r3, #0
 800e986:	d009      	beq.n	800e99c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	8b5b      	ldrh	r3, [r3, #26]
 800e98c:	f023 0308 	bic.w	r3, r3, #8
 800e990:	b29a      	uxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7ff f864 	bl	800da64 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e7      	bne.n	800e976 <tcp_handle_closepend+0xe>
  }
}
 800e9a6:	bf00      	nop
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	2004506c 	.word	0x2004506c

0800e9b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9be:	2001      	movs	r0, #1
 800e9c0:	f7fd fcf6 	bl	800c3b0 <memp_malloc>
 800e9c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d126      	bne.n	800ea1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e9cc:	f7ff ffcc 	bl	800e968 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e9d0:	f7ff ff9a 	bl	800e908 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9d4:	2001      	movs	r0, #1
 800e9d6:	f7fd fceb 	bl	800c3b0 <memp_malloc>
 800e9da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d11b      	bne.n	800ea1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e9e2:	2009      	movs	r0, #9
 800e9e4:	f7ff ff46 	bl	800e874 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	f7fd fce1 	bl	800c3b0 <memp_malloc>
 800e9ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d111      	bne.n	800ea1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e9f6:	2008      	movs	r0, #8
 800e9f8:	f7ff ff3c 	bl	800e874 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9fc:	2001      	movs	r0, #1
 800e9fe:	f7fd fcd7 	bl	800c3b0 <memp_malloc>
 800ea02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d107      	bne.n	800ea1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff fee3 	bl	800e7d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea12:	2001      	movs	r0, #1
 800ea14:	f7fd fccc 	bl	800c3b0 <memp_malloc>
 800ea18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d03f      	beq.n	800eaa0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ea20:	229c      	movs	r2, #156	; 0x9c
 800ea22:	2100      	movs	r1, #0
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f007 f9c5 	bl	8015db4 <memset>
    pcb->prio = prio;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	79fa      	ldrb	r2, [r7, #7]
 800ea2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ea36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ea40:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	22ff      	movs	r2, #255	; 0xff
 800ea4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ea56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2206      	movs	r2, #6
 800ea5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2206      	movs	r2, #6
 800ea64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ea76:	4b0d      	ldr	r3, [pc, #52]	; (800eaac <tcp_alloc+0xf8>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ea7e:	4b0c      	ldr	r3, [pc, #48]	; (800eab0 <tcp_alloc+0xfc>)
 800ea80:	781a      	ldrb	r2, [r3, #0]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ea8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	4a08      	ldr	r2, [pc, #32]	; (800eab4 <tcp_alloc+0x100>)
 800ea94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4a07      	ldr	r2, [pc, #28]	; (800eab8 <tcp_alloc+0x104>)
 800ea9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20045060 	.word	0x20045060
 800eab0:	20045076 	.word	0x20045076
 800eab4:	0800e76d 	.word	0x0800e76d
 800eab8:	006ddd00 	.word	0x006ddd00

0800eabc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d107      	bne.n	800eada <tcp_pcb_purge+0x1e>
 800eaca:	4b21      	ldr	r3, [pc, #132]	; (800eb50 <tcp_pcb_purge+0x94>)
 800eacc:	f640 0251 	movw	r2, #2129	; 0x851
 800ead0:	4920      	ldr	r1, [pc, #128]	; (800eb54 <tcp_pcb_purge+0x98>)
 800ead2:	4821      	ldr	r0, [pc, #132]	; (800eb58 <tcp_pcb_purge+0x9c>)
 800ead4:	f007 f818 	bl	8015b08 <iprintf>
 800ead8:	e037      	b.n	800eb4a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	7d1b      	ldrb	r3, [r3, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d033      	beq.n	800eb4a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eae6:	2b0a      	cmp	r3, #10
 800eae8:	d02f      	beq.n	800eb4a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d02b      	beq.n	800eb4a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d007      	beq.n	800eb0a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fb70 	bl	800d1e4 <pbuf_free>
      pcb->refused_data = NULL;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f986 	bl	800ee24 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb1e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7ff fdc7 	bl	800e6b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff fdc2 	bl	800e6b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	080178ec 	.word	0x080178ec
 800eb54:	08017f38 	.word	0x08017f38
 800eb58:	08017930 	.word	0x08017930

0800eb5c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d106      	bne.n	800eb7a <tcp_pcb_remove+0x1e>
 800eb6c:	4b3e      	ldr	r3, [pc, #248]	; (800ec68 <tcp_pcb_remove+0x10c>)
 800eb6e:	f640 0283 	movw	r2, #2179	; 0x883
 800eb72:	493e      	ldr	r1, [pc, #248]	; (800ec6c <tcp_pcb_remove+0x110>)
 800eb74:	483e      	ldr	r0, [pc, #248]	; (800ec70 <tcp_pcb_remove+0x114>)
 800eb76:	f006 ffc7 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d106      	bne.n	800eb8e <tcp_pcb_remove+0x32>
 800eb80:	4b39      	ldr	r3, [pc, #228]	; (800ec68 <tcp_pcb_remove+0x10c>)
 800eb82:	f640 0284 	movw	r2, #2180	; 0x884
 800eb86:	493b      	ldr	r1, [pc, #236]	; (800ec74 <tcp_pcb_remove+0x118>)
 800eb88:	4839      	ldr	r0, [pc, #228]	; (800ec70 <tcp_pcb_remove+0x114>)
 800eb8a:	f006 ffbd 	bl	8015b08 <iprintf>

  TCP_RMV(pcblist, pcb);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	683a      	ldr	r2, [r7, #0]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d105      	bne.n	800eba4 <tcp_pcb_remove+0x48>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	e013      	b.n	800ebcc <tcp_pcb_remove+0x70>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	e00c      	b.n	800ebc6 <tcp_pcb_remove+0x6a>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d104      	bne.n	800ebc0 <tcp_pcb_remove+0x64>
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	68da      	ldr	r2, [r3, #12]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	60da      	str	r2, [r3, #12]
 800ebbe:	e005      	b.n	800ebcc <tcp_pcb_remove+0x70>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	60fb      	str	r3, [r7, #12]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1ef      	bne.n	800ebac <tcp_pcb_remove+0x50>
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ebd2:	6838      	ldr	r0, [r7, #0]
 800ebd4:	f7ff ff72 	bl	800eabc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	7d1b      	ldrb	r3, [r3, #20]
 800ebdc:	2b0a      	cmp	r3, #10
 800ebde:	d013      	beq.n	800ec08 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d00f      	beq.n	800ec08 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	8b5b      	ldrh	r3, [r3, #26]
 800ebec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d009      	beq.n	800ec08 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	8b5b      	ldrh	r3, [r3, #26]
 800ebf8:	f043 0302 	orr.w	r3, r3, #2
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec02:	6838      	ldr	r0, [r7, #0]
 800ec04:	f002 ff6e 	bl	8011ae4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	7d1b      	ldrb	r3, [r3, #20]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d020      	beq.n	800ec52 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d006      	beq.n	800ec26 <tcp_pcb_remove+0xca>
 800ec18:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <tcp_pcb_remove+0x10c>)
 800ec1a:	f640 0293 	movw	r2, #2195	; 0x893
 800ec1e:	4916      	ldr	r1, [pc, #88]	; (800ec78 <tcp_pcb_remove+0x11c>)
 800ec20:	4813      	ldr	r0, [pc, #76]	; (800ec70 <tcp_pcb_remove+0x114>)
 800ec22:	f006 ff71 	bl	8015b08 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d006      	beq.n	800ec3c <tcp_pcb_remove+0xe0>
 800ec2e:	4b0e      	ldr	r3, [pc, #56]	; (800ec68 <tcp_pcb_remove+0x10c>)
 800ec30:	f640 0294 	movw	r2, #2196	; 0x894
 800ec34:	4911      	ldr	r1, [pc, #68]	; (800ec7c <tcp_pcb_remove+0x120>)
 800ec36:	480e      	ldr	r0, [pc, #56]	; (800ec70 <tcp_pcb_remove+0x114>)
 800ec38:	f006 ff66 	bl	8015b08 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d006      	beq.n	800ec52 <tcp_pcb_remove+0xf6>
 800ec44:	4b08      	ldr	r3, [pc, #32]	; (800ec68 <tcp_pcb_remove+0x10c>)
 800ec46:	f640 0296 	movw	r2, #2198	; 0x896
 800ec4a:	490d      	ldr	r1, [pc, #52]	; (800ec80 <tcp_pcb_remove+0x124>)
 800ec4c:	4808      	ldr	r0, [pc, #32]	; (800ec70 <tcp_pcb_remove+0x114>)
 800ec4e:	f006 ff5b 	bl	8015b08 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	2200      	movs	r2, #0
 800ec56:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ec5e:	bf00      	nop
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	080178ec 	.word	0x080178ec
 800ec6c:	08017f54 	.word	0x08017f54
 800ec70:	08017930 	.word	0x08017930
 800ec74:	08017f70 	.word	0x08017f70
 800ec78:	08017f90 	.word	0x08017f90
 800ec7c:	08017fa8 	.word	0x08017fa8
 800ec80:	08017fc4 	.word	0x08017fc4

0800ec84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d106      	bne.n	800eca0 <tcp_next_iss+0x1c>
 800ec92:	4b0a      	ldr	r3, [pc, #40]	; (800ecbc <tcp_next_iss+0x38>)
 800ec94:	f640 02af 	movw	r2, #2223	; 0x8af
 800ec98:	4909      	ldr	r1, [pc, #36]	; (800ecc0 <tcp_next_iss+0x3c>)
 800ec9a:	480a      	ldr	r0, [pc, #40]	; (800ecc4 <tcp_next_iss+0x40>)
 800ec9c:	f006 ff34 	bl	8015b08 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eca0:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <tcp_next_iss+0x44>)
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	4b09      	ldr	r3, [pc, #36]	; (800eccc <tcp_next_iss+0x48>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4413      	add	r3, r2
 800ecaa:	4a07      	ldr	r2, [pc, #28]	; (800ecc8 <tcp_next_iss+0x44>)
 800ecac:	6013      	str	r3, [r2, #0]
  return iss;
 800ecae:	4b06      	ldr	r3, [pc, #24]	; (800ecc8 <tcp_next_iss+0x44>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	080178ec 	.word	0x080178ec
 800ecc0:	08017fdc 	.word	0x08017fdc
 800ecc4:	08017930 	.word	0x08017930
 800ecc8:	2000002c 	.word	0x2000002c
 800eccc:	20045060 	.word	0x20045060

0800ecd0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <tcp_eff_send_mss_netif+0x22>
 800ece4:	4b14      	ldr	r3, [pc, #80]	; (800ed38 <tcp_eff_send_mss_netif+0x68>)
 800ece6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ecea:	4914      	ldr	r1, [pc, #80]	; (800ed3c <tcp_eff_send_mss_netif+0x6c>)
 800ecec:	4814      	ldr	r0, [pc, #80]	; (800ed40 <tcp_eff_send_mss_netif+0x70>)
 800ecee:	f006 ff0b 	bl	8015b08 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ecf8:	89fb      	ldrh	r3, [r7, #14]
 800ecfa:	e019      	b.n	800ed30 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed00:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ed02:	8afb      	ldrh	r3, [r7, #22]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d012      	beq.n	800ed2e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ed08:	2328      	movs	r3, #40	; 0x28
 800ed0a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ed0c:	8afa      	ldrh	r2, [r7, #22]
 800ed0e:	8abb      	ldrh	r3, [r7, #20]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d904      	bls.n	800ed1e <tcp_eff_send_mss_netif+0x4e>
 800ed14:	8afa      	ldrh	r2, [r7, #22]
 800ed16:	8abb      	ldrh	r3, [r7, #20]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	e000      	b.n	800ed20 <tcp_eff_send_mss_netif+0x50>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ed22:	8a7a      	ldrh	r2, [r7, #18]
 800ed24:	89fb      	ldrh	r3, [r7, #14]
 800ed26:	4293      	cmp	r3, r2
 800ed28:	bf28      	it	cs
 800ed2a:	4613      	movcs	r3, r2
 800ed2c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ed2e:	89fb      	ldrh	r3, [r7, #14]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3718      	adds	r7, #24
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	080178ec 	.word	0x080178ec
 800ed3c:	08017ff8 	.word	0x08017ff8
 800ed40:	08017930 	.word	0x08017930

0800ed44 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d119      	bne.n	800ed8c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ed58:	4b10      	ldr	r3, [pc, #64]	; (800ed9c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ed5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ed5e:	4910      	ldr	r1, [pc, #64]	; (800eda0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ed60:	4810      	ldr	r0, [pc, #64]	; (800eda4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ed62:	f006 fed1 	bl	8015b08 <iprintf>

  while (pcb != NULL) {
 800ed66:	e011      	b.n	800ed8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d108      	bne.n	800ed86 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7fe ffc6 	bl	800dd0c <tcp_abort>
      pcb = next;
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	e002      	b.n	800ed8c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d1ea      	bne.n	800ed68 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ed92:	bf00      	nop
 800ed94:	bf00      	nop
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	080178ec 	.word	0x080178ec
 800eda0:	08018020 	.word	0x08018020
 800eda4:	08017930 	.word	0x08017930

0800eda8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d02a      	beq.n	800ee0e <tcp_netif_ip_addr_changed+0x66>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d026      	beq.n	800ee0e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800edc0:	4b15      	ldr	r3, [pc, #84]	; (800ee18 <tcp_netif_ip_addr_changed+0x70>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4619      	mov	r1, r3
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff ffbc 	bl	800ed44 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800edcc:	4b13      	ldr	r3, [pc, #76]	; (800ee1c <tcp_netif_ip_addr_changed+0x74>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4619      	mov	r1, r3
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff ffb6 	bl	800ed44 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d017      	beq.n	800ee0e <tcp_netif_ip_addr_changed+0x66>
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d013      	beq.n	800ee0e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ede6:	4b0e      	ldr	r3, [pc, #56]	; (800ee20 <tcp_netif_ip_addr_changed+0x78>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	60fb      	str	r3, [r7, #12]
 800edec:	e00c      	b.n	800ee08 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d103      	bne.n	800ee02 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1ef      	bne.n	800edee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ee0e:	bf00      	nop
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	2004506c 	.word	0x2004506c
 800ee1c:	20045064 	.word	0x20045064
 800ee20:	20045068 	.word	0x20045068

0800ee24 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d007      	beq.n	800ee44 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7ff fc3d 	bl	800e6b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2200      	movs	r2, #0
 800ee42:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ee44:	bf00      	nop
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ee4c:	b590      	push	{r4, r7, lr}
 800ee4e:	b08d      	sub	sp, #52	; 0x34
 800ee50:	af04      	add	r7, sp, #16
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d105      	bne.n	800ee68 <tcp_input+0x1c>
 800ee5c:	4b9b      	ldr	r3, [pc, #620]	; (800f0cc <tcp_input+0x280>)
 800ee5e:	2283      	movs	r2, #131	; 0x83
 800ee60:	499b      	ldr	r1, [pc, #620]	; (800f0d0 <tcp_input+0x284>)
 800ee62:	489c      	ldr	r0, [pc, #624]	; (800f0d4 <tcp_input+0x288>)
 800ee64:	f006 fe50 	bl	8015b08 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	4a9a      	ldr	r2, [pc, #616]	; (800f0d8 <tcp_input+0x28c>)
 800ee6e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	895b      	ldrh	r3, [r3, #10]
 800ee74:	2b13      	cmp	r3, #19
 800ee76:	f240 83d1 	bls.w	800f61c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee7a:	4b98      	ldr	r3, [pc, #608]	; (800f0dc <tcp_input+0x290>)
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	4a97      	ldr	r2, [pc, #604]	; (800f0dc <tcp_input+0x290>)
 800ee80:	6812      	ldr	r2, [r2, #0]
 800ee82:	4611      	mov	r1, r2
 800ee84:	4618      	mov	r0, r3
 800ee86:	f005 fc47 	bl	8014718 <ip4_addr_isbroadcast_u32>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f040 83c7 	bne.w	800f620 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ee92:	4b92      	ldr	r3, [pc, #584]	; (800f0dc <tcp_input+0x290>)
 800ee94:	695b      	ldr	r3, [r3, #20]
 800ee96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee9a:	2be0      	cmp	r3, #224	; 0xe0
 800ee9c:	f000 83c0 	beq.w	800f620 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eea0:	4b8d      	ldr	r3, [pc, #564]	; (800f0d8 <tcp_input+0x28c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	899b      	ldrh	r3, [r3, #12]
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fc fda9 	bl	800ba00 <lwip_htons>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	0b1b      	lsrs	r3, r3, #12
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800eeba:	7cbb      	ldrb	r3, [r7, #18]
 800eebc:	2b13      	cmp	r3, #19
 800eebe:	f240 83b1 	bls.w	800f624 <tcp_input+0x7d8>
 800eec2:	7cbb      	ldrb	r3, [r7, #18]
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	891b      	ldrh	r3, [r3, #8]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	f200 83aa 	bhi.w	800f624 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800eed0:	7cbb      	ldrb	r3, [r7, #18]
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	3b14      	subs	r3, #20
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	4b81      	ldr	r3, [pc, #516]	; (800f0e0 <tcp_input+0x294>)
 800eeda:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800eedc:	4b81      	ldr	r3, [pc, #516]	; (800f0e4 <tcp_input+0x298>)
 800eede:	2200      	movs	r2, #0
 800eee0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	895a      	ldrh	r2, [r3, #10]
 800eee6:	7cbb      	ldrb	r3, [r7, #18]
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d309      	bcc.n	800ef02 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800eeee:	4b7c      	ldr	r3, [pc, #496]	; (800f0e0 <tcp_input+0x294>)
 800eef0:	881a      	ldrh	r2, [r3, #0]
 800eef2:	4b7d      	ldr	r3, [pc, #500]	; (800f0e8 <tcp_input+0x29c>)
 800eef4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800eef6:	7cbb      	ldrb	r3, [r7, #18]
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7fe f8ec 	bl	800d0d8 <pbuf_remove_header>
 800ef00:	e04e      	b.n	800efa0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d105      	bne.n	800ef16 <tcp_input+0xca>
 800ef0a:	4b70      	ldr	r3, [pc, #448]	; (800f0cc <tcp_input+0x280>)
 800ef0c:	22c2      	movs	r2, #194	; 0xc2
 800ef0e:	4977      	ldr	r1, [pc, #476]	; (800f0ec <tcp_input+0x2a0>)
 800ef10:	4870      	ldr	r0, [pc, #448]	; (800f0d4 <tcp_input+0x288>)
 800ef12:	f006 fdf9 	bl	8015b08 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ef16:	2114      	movs	r1, #20
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7fe f8dd 	bl	800d0d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	895a      	ldrh	r2, [r3, #10]
 800ef22:	4b71      	ldr	r3, [pc, #452]	; (800f0e8 <tcp_input+0x29c>)
 800ef24:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ef26:	4b6e      	ldr	r3, [pc, #440]	; (800f0e0 <tcp_input+0x294>)
 800ef28:	881a      	ldrh	r2, [r3, #0]
 800ef2a:	4b6f      	ldr	r3, [pc, #444]	; (800f0e8 <tcp_input+0x29c>)
 800ef2c:	881b      	ldrh	r3, [r3, #0]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ef32:	4b6d      	ldr	r3, [pc, #436]	; (800f0e8 <tcp_input+0x29c>)
 800ef34:	881b      	ldrh	r3, [r3, #0]
 800ef36:	4619      	mov	r1, r3
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f7fe f8cd 	bl	800d0d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	895b      	ldrh	r3, [r3, #10]
 800ef44:	8a3a      	ldrh	r2, [r7, #16]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	f200 836e 	bhi.w	800f628 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	4a64      	ldr	r2, [pc, #400]	; (800f0e4 <tcp_input+0x298>)
 800ef54:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	8a3a      	ldrh	r2, [r7, #16]
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe f8ba 	bl	800d0d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	891a      	ldrh	r2, [r3, #8]
 800ef68:	8a3b      	ldrh	r3, [r7, #16]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	895b      	ldrh	r3, [r3, #10]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <tcp_input+0x13a>
 800ef7a:	4b54      	ldr	r3, [pc, #336]	; (800f0cc <tcp_input+0x280>)
 800ef7c:	22df      	movs	r2, #223	; 0xdf
 800ef7e:	495c      	ldr	r1, [pc, #368]	; (800f0f0 <tcp_input+0x2a4>)
 800ef80:	4854      	ldr	r0, [pc, #336]	; (800f0d4 <tcp_input+0x288>)
 800ef82:	f006 fdc1 	bl	8015b08 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	891a      	ldrh	r2, [r3, #8]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	891b      	ldrh	r3, [r3, #8]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d005      	beq.n	800efa0 <tcp_input+0x154>
 800ef94:	4b4d      	ldr	r3, [pc, #308]	; (800f0cc <tcp_input+0x280>)
 800ef96:	22e0      	movs	r2, #224	; 0xe0
 800ef98:	4956      	ldr	r1, [pc, #344]	; (800f0f4 <tcp_input+0x2a8>)
 800ef9a:	484e      	ldr	r0, [pc, #312]	; (800f0d4 <tcp_input+0x288>)
 800ef9c:	f006 fdb4 	bl	8015b08 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800efa0:	4b4d      	ldr	r3, [pc, #308]	; (800f0d8 <tcp_input+0x28c>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4a4b      	ldr	r2, [pc, #300]	; (800f0d8 <tcp_input+0x28c>)
 800efaa:	6814      	ldr	r4, [r2, #0]
 800efac:	4618      	mov	r0, r3
 800efae:	f7fc fd27 	bl	800ba00 <lwip_htons>
 800efb2:	4603      	mov	r3, r0
 800efb4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800efb6:	4b48      	ldr	r3, [pc, #288]	; (800f0d8 <tcp_input+0x28c>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	885b      	ldrh	r3, [r3, #2]
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	4a46      	ldr	r2, [pc, #280]	; (800f0d8 <tcp_input+0x28c>)
 800efc0:	6814      	ldr	r4, [r2, #0]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fc fd1c 	bl	800ba00 <lwip_htons>
 800efc8:	4603      	mov	r3, r0
 800efca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800efcc:	4b42      	ldr	r3, [pc, #264]	; (800f0d8 <tcp_input+0x28c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	4a41      	ldr	r2, [pc, #260]	; (800f0d8 <tcp_input+0x28c>)
 800efd4:	6814      	ldr	r4, [r2, #0]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fc fd27 	bl	800ba2a <lwip_htonl>
 800efdc:	4603      	mov	r3, r0
 800efde:	6063      	str	r3, [r4, #4]
 800efe0:	6863      	ldr	r3, [r4, #4]
 800efe2:	4a45      	ldr	r2, [pc, #276]	; (800f0f8 <tcp_input+0x2ac>)
 800efe4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800efe6:	4b3c      	ldr	r3, [pc, #240]	; (800f0d8 <tcp_input+0x28c>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	4a3a      	ldr	r2, [pc, #232]	; (800f0d8 <tcp_input+0x28c>)
 800efee:	6814      	ldr	r4, [r2, #0]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fc fd1a 	bl	800ba2a <lwip_htonl>
 800eff6:	4603      	mov	r3, r0
 800eff8:	60a3      	str	r3, [r4, #8]
 800effa:	68a3      	ldr	r3, [r4, #8]
 800effc:	4a3f      	ldr	r2, [pc, #252]	; (800f0fc <tcp_input+0x2b0>)
 800effe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f000:	4b35      	ldr	r3, [pc, #212]	; (800f0d8 <tcp_input+0x28c>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	89db      	ldrh	r3, [r3, #14]
 800f006:	b29b      	uxth	r3, r3
 800f008:	4a33      	ldr	r2, [pc, #204]	; (800f0d8 <tcp_input+0x28c>)
 800f00a:	6814      	ldr	r4, [r2, #0]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fc fcf7 	bl	800ba00 <lwip_htons>
 800f012:	4603      	mov	r3, r0
 800f014:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f016:	4b30      	ldr	r3, [pc, #192]	; (800f0d8 <tcp_input+0x28c>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	899b      	ldrh	r3, [r3, #12]
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fc fcee 	bl	800ba00 <lwip_htons>
 800f024:	4603      	mov	r3, r0
 800f026:	b2db      	uxtb	r3, r3
 800f028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	4b34      	ldr	r3, [pc, #208]	; (800f100 <tcp_input+0x2b4>)
 800f030:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	891a      	ldrh	r2, [r3, #8]
 800f036:	4b33      	ldr	r3, [pc, #204]	; (800f104 <tcp_input+0x2b8>)
 800f038:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f03a:	4b31      	ldr	r3, [pc, #196]	; (800f100 <tcp_input+0x2b4>)
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	f003 0303 	and.w	r3, r3, #3
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00c      	beq.n	800f060 <tcp_input+0x214>
    tcplen++;
 800f046:	4b2f      	ldr	r3, [pc, #188]	; (800f104 <tcp_input+0x2b8>)
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	3301      	adds	r3, #1
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	4b2d      	ldr	r3, [pc, #180]	; (800f104 <tcp_input+0x2b8>)
 800f050:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	891a      	ldrh	r2, [r3, #8]
 800f056:	4b2b      	ldr	r3, [pc, #172]	; (800f104 <tcp_input+0x2b8>)
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	f200 82e6 	bhi.w	800f62c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f060:	2300      	movs	r3, #0
 800f062:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f064:	4b28      	ldr	r3, [pc, #160]	; (800f108 <tcp_input+0x2bc>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	61fb      	str	r3, [r7, #28]
 800f06a:	e09d      	b.n	800f1a8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	7d1b      	ldrb	r3, [r3, #20]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d105      	bne.n	800f080 <tcp_input+0x234>
 800f074:	4b15      	ldr	r3, [pc, #84]	; (800f0cc <tcp_input+0x280>)
 800f076:	22fb      	movs	r2, #251	; 0xfb
 800f078:	4924      	ldr	r1, [pc, #144]	; (800f10c <tcp_input+0x2c0>)
 800f07a:	4816      	ldr	r0, [pc, #88]	; (800f0d4 <tcp_input+0x288>)
 800f07c:	f006 fd44 	bl	8015b08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	7d1b      	ldrb	r3, [r3, #20]
 800f084:	2b0a      	cmp	r3, #10
 800f086:	d105      	bne.n	800f094 <tcp_input+0x248>
 800f088:	4b10      	ldr	r3, [pc, #64]	; (800f0cc <tcp_input+0x280>)
 800f08a:	22fc      	movs	r2, #252	; 0xfc
 800f08c:	4920      	ldr	r1, [pc, #128]	; (800f110 <tcp_input+0x2c4>)
 800f08e:	4811      	ldr	r0, [pc, #68]	; (800f0d4 <tcp_input+0x288>)
 800f090:	f006 fd3a 	bl	8015b08 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	7d1b      	ldrb	r3, [r3, #20]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d105      	bne.n	800f0a8 <tcp_input+0x25c>
 800f09c:	4b0b      	ldr	r3, [pc, #44]	; (800f0cc <tcp_input+0x280>)
 800f09e:	22fd      	movs	r2, #253	; 0xfd
 800f0a0:	491c      	ldr	r1, [pc, #112]	; (800f114 <tcp_input+0x2c8>)
 800f0a2:	480c      	ldr	r0, [pc, #48]	; (800f0d4 <tcp_input+0x288>)
 800f0a4:	f006 fd30 	bl	8015b08 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	7a1b      	ldrb	r3, [r3, #8]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d033      	beq.n	800f118 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0b0:	69fb      	ldr	r3, [r7, #28]
 800f0b2:	7a1a      	ldrb	r2, [r3, #8]
 800f0b4:	4b09      	ldr	r3, [pc, #36]	; (800f0dc <tcp_input+0x290>)
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f0bc:	3301      	adds	r3, #1
 800f0be:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d029      	beq.n	800f118 <tcp_input+0x2cc>
      prev = pcb;
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	61bb      	str	r3, [r7, #24]
      continue;
 800f0c8:	e06b      	b.n	800f1a2 <tcp_input+0x356>
 800f0ca:	bf00      	nop
 800f0cc:	08018054 	.word	0x08018054
 800f0d0:	08018088 	.word	0x08018088
 800f0d4:	080180a0 	.word	0x080180a0
 800f0d8:	20045088 	.word	0x20045088
 800f0dc:	2004190c 	.word	0x2004190c
 800f0e0:	2004508c 	.word	0x2004508c
 800f0e4:	20045090 	.word	0x20045090
 800f0e8:	2004508e 	.word	0x2004508e
 800f0ec:	080180c8 	.word	0x080180c8
 800f0f0:	080180d8 	.word	0x080180d8
 800f0f4:	080180e4 	.word	0x080180e4
 800f0f8:	20045098 	.word	0x20045098
 800f0fc:	2004509c 	.word	0x2004509c
 800f100:	200450a4 	.word	0x200450a4
 800f104:	200450a2 	.word	0x200450a2
 800f108:	2004506c 	.word	0x2004506c
 800f10c:	08018104 	.word	0x08018104
 800f110:	0801812c 	.word	0x0801812c
 800f114:	08018158 	.word	0x08018158
    }

    if (pcb->remote_port == tcphdr->src &&
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	8b1a      	ldrh	r2, [r3, #24]
 800f11c:	4b72      	ldr	r3, [pc, #456]	; (800f2e8 <tcp_input+0x49c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	b29b      	uxth	r3, r3
 800f124:	429a      	cmp	r2, r3
 800f126:	d13a      	bne.n	800f19e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	8ada      	ldrh	r2, [r3, #22]
 800f12c:	4b6e      	ldr	r3, [pc, #440]	; (800f2e8 <tcp_input+0x49c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	885b      	ldrh	r3, [r3, #2]
 800f132:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f134:	429a      	cmp	r2, r3
 800f136:	d132      	bne.n	800f19e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	4b6b      	ldr	r3, [pc, #428]	; (800f2ec <tcp_input+0x4a0>)
 800f13e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f140:	429a      	cmp	r2, r3
 800f142:	d12c      	bne.n	800f19e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	4b68      	ldr	r3, [pc, #416]	; (800f2ec <tcp_input+0x4a0>)
 800f14a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d126      	bne.n	800f19e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	69fa      	ldr	r2, [r7, #28]
 800f156:	429a      	cmp	r2, r3
 800f158:	d106      	bne.n	800f168 <tcp_input+0x31c>
 800f15a:	4b65      	ldr	r3, [pc, #404]	; (800f2f0 <tcp_input+0x4a4>)
 800f15c:	f240 120d 	movw	r2, #269	; 0x10d
 800f160:	4964      	ldr	r1, [pc, #400]	; (800f2f4 <tcp_input+0x4a8>)
 800f162:	4865      	ldr	r0, [pc, #404]	; (800f2f8 <tcp_input+0x4ac>)
 800f164:	f006 fcd0 	bl	8015b08 <iprintf>
      if (prev != NULL) {
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00a      	beq.n	800f184 <tcp_input+0x338>
        prev->next = pcb->next;
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	68da      	ldr	r2, [r3, #12]
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f176:	4b61      	ldr	r3, [pc, #388]	; (800f2fc <tcp_input+0x4b0>)
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f17e:	4a5f      	ldr	r2, [pc, #380]	; (800f2fc <tcp_input+0x4b0>)
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	69fa      	ldr	r2, [r7, #28]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d111      	bne.n	800f1b2 <tcp_input+0x366>
 800f18e:	4b58      	ldr	r3, [pc, #352]	; (800f2f0 <tcp_input+0x4a4>)
 800f190:	f240 1215 	movw	r2, #277	; 0x115
 800f194:	495a      	ldr	r1, [pc, #360]	; (800f300 <tcp_input+0x4b4>)
 800f196:	4858      	ldr	r0, [pc, #352]	; (800f2f8 <tcp_input+0x4ac>)
 800f198:	f006 fcb6 	bl	8015b08 <iprintf>
      break;
 800f19c:	e009      	b.n	800f1b2 <tcp_input+0x366>
    }
    prev = pcb;
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	61fb      	str	r3, [r7, #28]
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f47f af5e 	bne.w	800f06c <tcp_input+0x220>
 800f1b0:	e000      	b.n	800f1b4 <tcp_input+0x368>
      break;
 800f1b2:	bf00      	nop
  }

  if (pcb == NULL) {
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f040 80aa 	bne.w	800f310 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1bc:	4b51      	ldr	r3, [pc, #324]	; (800f304 <tcp_input+0x4b8>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e03f      	b.n	800f244 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
 800f1c8:	2b0a      	cmp	r3, #10
 800f1ca:	d006      	beq.n	800f1da <tcp_input+0x38e>
 800f1cc:	4b48      	ldr	r3, [pc, #288]	; (800f2f0 <tcp_input+0x4a4>)
 800f1ce:	f240 121f 	movw	r2, #287	; 0x11f
 800f1d2:	494d      	ldr	r1, [pc, #308]	; (800f308 <tcp_input+0x4bc>)
 800f1d4:	4848      	ldr	r0, [pc, #288]	; (800f2f8 <tcp_input+0x4ac>)
 800f1d6:	f006 fc97 	bl	8015b08 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	7a1b      	ldrb	r3, [r3, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d009      	beq.n	800f1f6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	7a1a      	ldrb	r2, [r3, #8]
 800f1e6:	4b41      	ldr	r3, [pc, #260]	; (800f2ec <tcp_input+0x4a0>)
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d122      	bne.n	800f23c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	8b1a      	ldrh	r2, [r3, #24]
 800f1fa:	4b3b      	ldr	r3, [pc, #236]	; (800f2e8 <tcp_input+0x49c>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	b29b      	uxth	r3, r3
 800f202:	429a      	cmp	r2, r3
 800f204:	d11b      	bne.n	800f23e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	8ada      	ldrh	r2, [r3, #22]
 800f20a:	4b37      	ldr	r3, [pc, #220]	; (800f2e8 <tcp_input+0x49c>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	885b      	ldrh	r3, [r3, #2]
 800f210:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f212:	429a      	cmp	r2, r3
 800f214:	d113      	bne.n	800f23e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	685a      	ldr	r2, [r3, #4]
 800f21a:	4b34      	ldr	r3, [pc, #208]	; (800f2ec <tcp_input+0x4a0>)
 800f21c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f21e:	429a      	cmp	r2, r3
 800f220:	d10d      	bne.n	800f23e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	4b31      	ldr	r3, [pc, #196]	; (800f2ec <tcp_input+0x4a0>)
 800f228:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d107      	bne.n	800f23e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f22e:	69f8      	ldr	r0, [r7, #28]
 800f230:	f000 fb56 	bl	800f8e0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7fd ffd5 	bl	800d1e4 <pbuf_free>
        return;
 800f23a:	e1fd      	b.n	800f638 <tcp_input+0x7ec>
        continue;
 800f23c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	68db      	ldr	r3, [r3, #12]
 800f242:	61fb      	str	r3, [r7, #28]
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d1bc      	bne.n	800f1c4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f24a:	2300      	movs	r3, #0
 800f24c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f24e:	4b2f      	ldr	r3, [pc, #188]	; (800f30c <tcp_input+0x4c0>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	617b      	str	r3, [r7, #20]
 800f254:	e02a      	b.n	800f2ac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	7a1b      	ldrb	r3, [r3, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00c      	beq.n	800f278 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	7a1a      	ldrb	r2, [r3, #8]
 800f262:	4b22      	ldr	r3, [pc, #136]	; (800f2ec <tcp_input+0x4a0>)
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f26a:	3301      	adds	r3, #1
 800f26c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f26e:	429a      	cmp	r2, r3
 800f270:	d002      	beq.n	800f278 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	61bb      	str	r3, [r7, #24]
        continue;
 800f276:	e016      	b.n	800f2a6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	8ada      	ldrh	r2, [r3, #22]
 800f27c:	4b1a      	ldr	r3, [pc, #104]	; (800f2e8 <tcp_input+0x49c>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	885b      	ldrh	r3, [r3, #2]
 800f282:	b29b      	uxth	r3, r3
 800f284:	429a      	cmp	r2, r3
 800f286:	d10c      	bne.n	800f2a2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	4b17      	ldr	r3, [pc, #92]	; (800f2ec <tcp_input+0x4a0>)
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	429a      	cmp	r2, r3
 800f292:	d00f      	beq.n	800f2b4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00d      	beq.n	800f2b6 <tcp_input+0x46a>
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d009      	beq.n	800f2b6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	617b      	str	r3, [r7, #20]
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1d1      	bne.n	800f256 <tcp_input+0x40a>
 800f2b2:	e000      	b.n	800f2b6 <tcp_input+0x46a>
            break;
 800f2b4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d029      	beq.n	800f310 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	68da      	ldr	r2, [r3, #12]
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f2ca:	4b10      	ldr	r3, [pc, #64]	; (800f30c <tcp_input+0x4c0>)
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f2d2:	4a0e      	ldr	r2, [pc, #56]	; (800f30c <tcp_input+0x4c0>)
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f2d8:	6978      	ldr	r0, [r7, #20]
 800f2da:	f000 fa03 	bl	800f6e4 <tcp_listen_input>
      }
      pbuf_free(p);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7fd ff80 	bl	800d1e4 <pbuf_free>
      return;
 800f2e4:	e1a8      	b.n	800f638 <tcp_input+0x7ec>
 800f2e6:	bf00      	nop
 800f2e8:	20045088 	.word	0x20045088
 800f2ec:	2004190c 	.word	0x2004190c
 800f2f0:	08018054 	.word	0x08018054
 800f2f4:	08018180 	.word	0x08018180
 800f2f8:	080180a0 	.word	0x080180a0
 800f2fc:	2004506c 	.word	0x2004506c
 800f300:	080181ac 	.word	0x080181ac
 800f304:	20045070 	.word	0x20045070
 800f308:	080181d8 	.word	0x080181d8
 800f30c:	20045068 	.word	0x20045068
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 8158 	beq.w	800f5c8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f318:	4b95      	ldr	r3, [pc, #596]	; (800f570 <tcp_input+0x724>)
 800f31a:	2200      	movs	r2, #0
 800f31c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	891a      	ldrh	r2, [r3, #8]
 800f322:	4b93      	ldr	r3, [pc, #588]	; (800f570 <tcp_input+0x724>)
 800f324:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f326:	4a92      	ldr	r2, [pc, #584]	; (800f570 <tcp_input+0x724>)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f32c:	4b91      	ldr	r3, [pc, #580]	; (800f574 <tcp_input+0x728>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a8f      	ldr	r2, [pc, #572]	; (800f570 <tcp_input+0x724>)
 800f332:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f334:	4b90      	ldr	r3, [pc, #576]	; (800f578 <tcp_input+0x72c>)
 800f336:	2200      	movs	r2, #0
 800f338:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f33a:	4b90      	ldr	r3, [pc, #576]	; (800f57c <tcp_input+0x730>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f340:	4b8f      	ldr	r3, [pc, #572]	; (800f580 <tcp_input+0x734>)
 800f342:	2200      	movs	r2, #0
 800f344:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f346:	4b8f      	ldr	r3, [pc, #572]	; (800f584 <tcp_input+0x738>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 0308 	and.w	r3, r3, #8
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d006      	beq.n	800f360 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	7b5b      	ldrb	r3, [r3, #13]
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f364:	2b00      	cmp	r3, #0
 800f366:	d017      	beq.n	800f398 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f368:	69f8      	ldr	r0, [r7, #28]
 800f36a:	f7ff f929 	bl	800e5c0 <tcp_process_refused_data>
 800f36e:	4603      	mov	r3, r0
 800f370:	f113 0f0d 	cmn.w	r3, #13
 800f374:	d007      	beq.n	800f386 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00c      	beq.n	800f398 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f37e:	4b82      	ldr	r3, [pc, #520]	; (800f588 <tcp_input+0x73c>)
 800f380:	881b      	ldrh	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d008      	beq.n	800f398 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f040 80e3 	bne.w	800f556 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f390:	69f8      	ldr	r0, [r7, #28]
 800f392:	f003 f9ad 	bl	80126f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f396:	e0de      	b.n	800f556 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f398:	4a7c      	ldr	r2, [pc, #496]	; (800f58c <tcp_input+0x740>)
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f39e:	69f8      	ldr	r0, [r7, #28]
 800f3a0:	f000 fb18 	bl	800f9d4 <tcp_process>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f3a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3ac:	f113 0f0d 	cmn.w	r3, #13
 800f3b0:	f000 80d3 	beq.w	800f55a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f3b4:	4b71      	ldr	r3, [pc, #452]	; (800f57c <tcp_input+0x730>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f003 0308 	and.w	r3, r3, #8
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d015      	beq.n	800f3ec <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d008      	beq.n	800f3dc <tcp_input+0x590>
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3d0:	69fa      	ldr	r2, [r7, #28]
 800f3d2:	6912      	ldr	r2, [r2, #16]
 800f3d4:	f06f 010d 	mvn.w	r1, #13
 800f3d8:	4610      	mov	r0, r2
 800f3da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f3dc:	69f9      	ldr	r1, [r7, #28]
 800f3de:	486c      	ldr	r0, [pc, #432]	; (800f590 <tcp_input+0x744>)
 800f3e0:	f7ff fbbc 	bl	800eb5c <tcp_pcb_remove>
        tcp_free(pcb);
 800f3e4:	69f8      	ldr	r0, [r7, #28]
 800f3e6:	f7fe f9a9 	bl	800d73c <tcp_free>
 800f3ea:	e0da      	b.n	800f5a2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f3f0:	4b63      	ldr	r3, [pc, #396]	; (800f580 <tcp_input+0x734>)
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d01d      	beq.n	800f434 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f3f8:	4b61      	ldr	r3, [pc, #388]	; (800f580 <tcp_input+0x734>)
 800f3fa:	881b      	ldrh	r3, [r3, #0]
 800f3fc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00a      	beq.n	800f41e <tcp_input+0x5d2>
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f40e:	69fa      	ldr	r2, [r7, #28]
 800f410:	6910      	ldr	r0, [r2, #16]
 800f412:	89fa      	ldrh	r2, [r7, #14]
 800f414:	69f9      	ldr	r1, [r7, #28]
 800f416:	4798      	blx	r3
 800f418:	4603      	mov	r3, r0
 800f41a:	74fb      	strb	r3, [r7, #19]
 800f41c:	e001      	b.n	800f422 <tcp_input+0x5d6>
 800f41e:	2300      	movs	r3, #0
 800f420:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f422:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f426:	f113 0f0d 	cmn.w	r3, #13
 800f42a:	f000 8098 	beq.w	800f55e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f42e:	4b54      	ldr	r3, [pc, #336]	; (800f580 <tcp_input+0x734>)
 800f430:	2200      	movs	r2, #0
 800f432:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f434:	69f8      	ldr	r0, [r7, #28]
 800f436:	f000 f915 	bl	800f664 <tcp_input_delayed_close>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 8090 	bne.w	800f562 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f442:	4b4d      	ldr	r3, [pc, #308]	; (800f578 <tcp_input+0x72c>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d041      	beq.n	800f4ce <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d006      	beq.n	800f460 <tcp_input+0x614>
 800f452:	4b50      	ldr	r3, [pc, #320]	; (800f594 <tcp_input+0x748>)
 800f454:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f458:	494f      	ldr	r1, [pc, #316]	; (800f598 <tcp_input+0x74c>)
 800f45a:	4850      	ldr	r0, [pc, #320]	; (800f59c <tcp_input+0x750>)
 800f45c:	f006 fb54 	bl	8015b08 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	8b5b      	ldrh	r3, [r3, #26]
 800f464:	f003 0310 	and.w	r3, r3, #16
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d008      	beq.n	800f47e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f46c:	4b42      	ldr	r3, [pc, #264]	; (800f578 <tcp_input+0x72c>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4618      	mov	r0, r3
 800f472:	f7fd feb7 	bl	800d1e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f476:	69f8      	ldr	r0, [r7, #28]
 800f478:	f7fe fc48 	bl	800dd0c <tcp_abort>
            goto aborted;
 800f47c:	e091      	b.n	800f5a2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00c      	beq.n	800f4a2 <tcp_input+0x656>
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	6918      	ldr	r0, [r3, #16]
 800f492:	4b39      	ldr	r3, [pc, #228]	; (800f578 <tcp_input+0x72c>)
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	2300      	movs	r3, #0
 800f498:	69f9      	ldr	r1, [r7, #28]
 800f49a:	47a0      	blx	r4
 800f49c:	4603      	mov	r3, r0
 800f49e:	74fb      	strb	r3, [r7, #19]
 800f4a0:	e008      	b.n	800f4b4 <tcp_input+0x668>
 800f4a2:	4b35      	ldr	r3, [pc, #212]	; (800f578 <tcp_input+0x72c>)
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	69f9      	ldr	r1, [r7, #28]
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	f7ff f95e 	bl	800e76c <tcp_recv_null>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f4b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4b8:	f113 0f0d 	cmn.w	r3, #13
 800f4bc:	d053      	beq.n	800f566 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f4be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d003      	beq.n	800f4ce <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f4c6:	4b2c      	ldr	r3, [pc, #176]	; (800f578 <tcp_input+0x72c>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f4ce:	4b2b      	ldr	r3, [pc, #172]	; (800f57c <tcp_input+0x730>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	f003 0320 	and.w	r3, r3, #32
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d030      	beq.n	800f53c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4e6:	7b5a      	ldrb	r2, [r3, #13]
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4ec:	f042 0220 	orr.w	r2, r2, #32
 800f4f0:	b2d2      	uxtb	r2, r2
 800f4f2:	735a      	strb	r2, [r3, #13]
 800f4f4:	e022      	b.n	800f53c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f4fe:	d005      	beq.n	800f50c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f504:	3301      	adds	r3, #1
 800f506:	b29a      	uxth	r2, r3
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f512:	2b00      	cmp	r3, #0
 800f514:	d00b      	beq.n	800f52e <tcp_input+0x6e2>
 800f516:	69fb      	ldr	r3, [r7, #28]
 800f518:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	6918      	ldr	r0, [r3, #16]
 800f520:	2300      	movs	r3, #0
 800f522:	2200      	movs	r2, #0
 800f524:	69f9      	ldr	r1, [r7, #28]
 800f526:	47a0      	blx	r4
 800f528:	4603      	mov	r3, r0
 800f52a:	74fb      	strb	r3, [r7, #19]
 800f52c:	e001      	b.n	800f532 <tcp_input+0x6e6>
 800f52e:	2300      	movs	r3, #0
 800f530:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f536:	f113 0f0d 	cmn.w	r3, #13
 800f53a:	d016      	beq.n	800f56a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f53c:	4b13      	ldr	r3, [pc, #76]	; (800f58c <tcp_input+0x740>)
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f542:	69f8      	ldr	r0, [r7, #28]
 800f544:	f000 f88e 	bl	800f664 <tcp_input_delayed_close>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d128      	bne.n	800f5a0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f54e:	69f8      	ldr	r0, [r7, #28]
 800f550:	f002 fac8 	bl	8011ae4 <tcp_output>
 800f554:	e025      	b.n	800f5a2 <tcp_input+0x756>
        goto aborted;
 800f556:	bf00      	nop
 800f558:	e023      	b.n	800f5a2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f55a:	bf00      	nop
 800f55c:	e021      	b.n	800f5a2 <tcp_input+0x756>
              goto aborted;
 800f55e:	bf00      	nop
 800f560:	e01f      	b.n	800f5a2 <tcp_input+0x756>
          goto aborted;
 800f562:	bf00      	nop
 800f564:	e01d      	b.n	800f5a2 <tcp_input+0x756>
            goto aborted;
 800f566:	bf00      	nop
 800f568:	e01b      	b.n	800f5a2 <tcp_input+0x756>
              goto aborted;
 800f56a:	bf00      	nop
 800f56c:	e019      	b.n	800f5a2 <tcp_input+0x756>
 800f56e:	bf00      	nop
 800f570:	20045078 	.word	0x20045078
 800f574:	20045088 	.word	0x20045088
 800f578:	200450a8 	.word	0x200450a8
 800f57c:	200450a5 	.word	0x200450a5
 800f580:	200450a0 	.word	0x200450a0
 800f584:	200450a4 	.word	0x200450a4
 800f588:	200450a2 	.word	0x200450a2
 800f58c:	200450ac 	.word	0x200450ac
 800f590:	2004506c 	.word	0x2004506c
 800f594:	08018054 	.word	0x08018054
 800f598:	08018208 	.word	0x08018208
 800f59c:	080180a0 	.word	0x080180a0
          goto aborted;
 800f5a0:	bf00      	nop
    tcp_input_pcb = NULL;
 800f5a2:	4b27      	ldr	r3, [pc, #156]	; (800f640 <tcp_input+0x7f4>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f5a8:	4b26      	ldr	r3, [pc, #152]	; (800f644 <tcp_input+0x7f8>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f5ae:	4b26      	ldr	r3, [pc, #152]	; (800f648 <tcp_input+0x7fc>)
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d03f      	beq.n	800f636 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f5b6:	4b24      	ldr	r3, [pc, #144]	; (800f648 <tcp_input+0x7fc>)
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fd fe12 	bl	800d1e4 <pbuf_free>
      inseg.p = NULL;
 800f5c0:	4b21      	ldr	r3, [pc, #132]	; (800f648 <tcp_input+0x7fc>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f5c6:	e036      	b.n	800f636 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f5c8:	4b20      	ldr	r3, [pc, #128]	; (800f64c <tcp_input+0x800>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	899b      	ldrh	r3, [r3, #12]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fc fa15 	bl	800ba00 <lwip_htons>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	f003 0304 	and.w	r3, r3, #4
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d118      	bne.n	800f614 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5e2:	4b1b      	ldr	r3, [pc, #108]	; (800f650 <tcp_input+0x804>)
 800f5e4:	6819      	ldr	r1, [r3, #0]
 800f5e6:	4b1b      	ldr	r3, [pc, #108]	; (800f654 <tcp_input+0x808>)
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4b1a      	ldr	r3, [pc, #104]	; (800f658 <tcp_input+0x80c>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5f2:	4b16      	ldr	r3, [pc, #88]	; (800f64c <tcp_input+0x800>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5f6:	885b      	ldrh	r3, [r3, #2]
 800f5f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5fa:	4a14      	ldr	r2, [pc, #80]	; (800f64c <tcp_input+0x800>)
 800f5fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5fe:	8812      	ldrh	r2, [r2, #0]
 800f600:	b292      	uxth	r2, r2
 800f602:	9202      	str	r2, [sp, #8]
 800f604:	9301      	str	r3, [sp, #4]
 800f606:	4b15      	ldr	r3, [pc, #84]	; (800f65c <tcp_input+0x810>)
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	4b15      	ldr	r3, [pc, #84]	; (800f660 <tcp_input+0x814>)
 800f60c:	4602      	mov	r2, r0
 800f60e:	2000      	movs	r0, #0
 800f610:	f003 f81c 	bl	801264c <tcp_rst>
    pbuf_free(p);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7fd fde5 	bl	800d1e4 <pbuf_free>
  return;
 800f61a:	e00c      	b.n	800f636 <tcp_input+0x7ea>
    goto dropped;
 800f61c:	bf00      	nop
 800f61e:	e006      	b.n	800f62e <tcp_input+0x7e2>
    goto dropped;
 800f620:	bf00      	nop
 800f622:	e004      	b.n	800f62e <tcp_input+0x7e2>
    goto dropped;
 800f624:	bf00      	nop
 800f626:	e002      	b.n	800f62e <tcp_input+0x7e2>
      goto dropped;
 800f628:	bf00      	nop
 800f62a:	e000      	b.n	800f62e <tcp_input+0x7e2>
      goto dropped;
 800f62c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7fd fdd8 	bl	800d1e4 <pbuf_free>
 800f634:	e000      	b.n	800f638 <tcp_input+0x7ec>
  return;
 800f636:	bf00      	nop
}
 800f638:	3724      	adds	r7, #36	; 0x24
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd90      	pop	{r4, r7, pc}
 800f63e:	bf00      	nop
 800f640:	200450ac 	.word	0x200450ac
 800f644:	200450a8 	.word	0x200450a8
 800f648:	20045078 	.word	0x20045078
 800f64c:	20045088 	.word	0x20045088
 800f650:	2004509c 	.word	0x2004509c
 800f654:	200450a2 	.word	0x200450a2
 800f658:	20045098 	.word	0x20045098
 800f65c:	2004191c 	.word	0x2004191c
 800f660:	20041920 	.word	0x20041920

0800f664 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <tcp_input_delayed_close+0x1c>
 800f672:	4b17      	ldr	r3, [pc, #92]	; (800f6d0 <tcp_input_delayed_close+0x6c>)
 800f674:	f240 225a 	movw	r2, #602	; 0x25a
 800f678:	4916      	ldr	r1, [pc, #88]	; (800f6d4 <tcp_input_delayed_close+0x70>)
 800f67a:	4817      	ldr	r0, [pc, #92]	; (800f6d8 <tcp_input_delayed_close+0x74>)
 800f67c:	f006 fa44 	bl	8015b08 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f680:	4b16      	ldr	r3, [pc, #88]	; (800f6dc <tcp_input_delayed_close+0x78>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	f003 0310 	and.w	r3, r3, #16
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01c      	beq.n	800f6c6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	8b5b      	ldrh	r3, [r3, #26]
 800f690:	f003 0310 	and.w	r3, r3, #16
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10d      	bne.n	800f6b4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d008      	beq.n	800f6b4 <tcp_input_delayed_close+0x50>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	6912      	ldr	r2, [r2, #16]
 800f6ac:	f06f 010e 	mvn.w	r1, #14
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	480a      	ldr	r0, [pc, #40]	; (800f6e0 <tcp_input_delayed_close+0x7c>)
 800f6b8:	f7ff fa50 	bl	800eb5c <tcp_pcb_remove>
    tcp_free(pcb);
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7fe f83d 	bl	800d73c <tcp_free>
    return 1;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e000      	b.n	800f6c8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	08018054 	.word	0x08018054
 800f6d4:	08018224 	.word	0x08018224
 800f6d8:	080180a0 	.word	0x080180a0
 800f6dc:	200450a5 	.word	0x200450a5
 800f6e0:	2004506c 	.word	0x2004506c

0800f6e4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f6e4:	b590      	push	{r4, r7, lr}
 800f6e6:	b08b      	sub	sp, #44	; 0x2c
 800f6e8:	af04      	add	r7, sp, #16
 800f6ea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f6ec:	4b6f      	ldr	r3, [pc, #444]	; (800f8ac <tcp_listen_input+0x1c8>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	f003 0304 	and.w	r3, r3, #4
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f040 80d2 	bne.w	800f89e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d106      	bne.n	800f70e <tcp_listen_input+0x2a>
 800f700:	4b6b      	ldr	r3, [pc, #428]	; (800f8b0 <tcp_listen_input+0x1cc>)
 800f702:	f240 2281 	movw	r2, #641	; 0x281
 800f706:	496b      	ldr	r1, [pc, #428]	; (800f8b4 <tcp_listen_input+0x1d0>)
 800f708:	486b      	ldr	r0, [pc, #428]	; (800f8b8 <tcp_listen_input+0x1d4>)
 800f70a:	f006 f9fd 	bl	8015b08 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f70e:	4b67      	ldr	r3, [pc, #412]	; (800f8ac <tcp_listen_input+0x1c8>)
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	f003 0310 	and.w	r3, r3, #16
 800f716:	2b00      	cmp	r3, #0
 800f718:	d019      	beq.n	800f74e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f71a:	4b68      	ldr	r3, [pc, #416]	; (800f8bc <tcp_listen_input+0x1d8>)
 800f71c:	6819      	ldr	r1, [r3, #0]
 800f71e:	4b68      	ldr	r3, [pc, #416]	; (800f8c0 <tcp_listen_input+0x1dc>)
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	4b67      	ldr	r3, [pc, #412]	; (800f8c4 <tcp_listen_input+0x1e0>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f72a:	4b67      	ldr	r3, [pc, #412]	; (800f8c8 <tcp_listen_input+0x1e4>)
 800f72c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f72e:	885b      	ldrh	r3, [r3, #2]
 800f730:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f732:	4a65      	ldr	r2, [pc, #404]	; (800f8c8 <tcp_listen_input+0x1e4>)
 800f734:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f736:	8812      	ldrh	r2, [r2, #0]
 800f738:	b292      	uxth	r2, r2
 800f73a:	9202      	str	r2, [sp, #8]
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	4b63      	ldr	r3, [pc, #396]	; (800f8cc <tcp_listen_input+0x1e8>)
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	4b63      	ldr	r3, [pc, #396]	; (800f8d0 <tcp_listen_input+0x1ec>)
 800f744:	4602      	mov	r2, r0
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f002 ff80 	bl	801264c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f74c:	e0a9      	b.n	800f8a2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f74e:	4b57      	ldr	r3, [pc, #348]	; (800f8ac <tcp_listen_input+0x1c8>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	f003 0302 	and.w	r3, r3, #2
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 80a3 	beq.w	800f8a2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	7d5b      	ldrb	r3, [r3, #21]
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff f927 	bl	800e9b4 <tcp_alloc>
 800f766:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d111      	bne.n	800f792 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	699b      	ldr	r3, [r3, #24]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00a      	beq.n	800f78c <tcp_listen_input+0xa8>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	699b      	ldr	r3, [r3, #24]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	6910      	ldr	r0, [r2, #16]
 800f77e:	f04f 32ff 	mov.w	r2, #4294967295
 800f782:	2100      	movs	r1, #0
 800f784:	4798      	blx	r3
 800f786:	4603      	mov	r3, r0
 800f788:	73bb      	strb	r3, [r7, #14]
      return;
 800f78a:	e08b      	b.n	800f8a4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f78c:	23f0      	movs	r3, #240	; 0xf0
 800f78e:	73bb      	strb	r3, [r7, #14]
      return;
 800f790:	e088      	b.n	800f8a4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f792:	4b50      	ldr	r3, [pc, #320]	; (800f8d4 <tcp_listen_input+0x1f0>)
 800f794:	695a      	ldr	r2, [r3, #20]
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f79a:	4b4e      	ldr	r3, [pc, #312]	; (800f8d4 <tcp_listen_input+0x1f0>)
 800f79c:	691a      	ldr	r2, [r3, #16]
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	8ada      	ldrh	r2, [r3, #22]
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f7aa:	4b47      	ldr	r3, [pc, #284]	; (800f8c8 <tcp_listen_input+0x1e4>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	2203      	movs	r2, #3
 800f7ba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f7bc:	4b41      	ldr	r3, [pc, #260]	; (800f8c4 <tcp_listen_input+0x1e0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	1c5a      	adds	r2, r3, #1
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f7ce:	6978      	ldr	r0, [r7, #20]
 800f7d0:	f7ff fa58 	bl	800ec84 <tcp_next_iss>
 800f7d4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	693a      	ldr	r2, [r7, #16]
 800f7da:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f7ee:	4b35      	ldr	r3, [pc, #212]	; (800f8c4 <tcp_listen_input+0x1e0>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	1e5a      	subs	r2, r3, #1
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	691a      	ldr	r2, [r3, #16]
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	7a5b      	ldrb	r3, [r3, #9]
 800f80a:	f003 030c 	and.w	r3, r3, #12
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	7a1a      	ldrb	r2, [r3, #8]
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f81c:	4b2e      	ldr	r3, [pc, #184]	; (800f8d8 <tcp_listen_input+0x1f4>)
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	60da      	str	r2, [r3, #12]
 800f824:	4a2c      	ldr	r2, [pc, #176]	; (800f8d8 <tcp_listen_input+0x1f4>)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	f003 f8d1 	bl	80129d0 <tcp_timer_needed>
 800f82e:	4b2b      	ldr	r3, [pc, #172]	; (800f8dc <tcp_listen_input+0x1f8>)
 800f830:	2201      	movs	r2, #1
 800f832:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f834:	6978      	ldr	r0, [r7, #20]
 800f836:	f001 fd8f 	bl	8011358 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f83a:	4b23      	ldr	r3, [pc, #140]	; (800f8c8 <tcp_listen_input+0x1e4>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	89db      	ldrh	r3, [r3, #14]
 800f840:	b29a      	uxth	r2, r3
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	3304      	adds	r3, #4
 800f85c:	4618      	mov	r0, r3
 800f85e:	f004 fcc5 	bl	80141ec <ip4_route>
 800f862:	4601      	mov	r1, r0
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	3304      	adds	r3, #4
 800f868:	461a      	mov	r2, r3
 800f86a:	4620      	mov	r0, r4
 800f86c:	f7ff fa30 	bl	800ecd0 <tcp_eff_send_mss_netif>
 800f870:	4603      	mov	r3, r0
 800f872:	461a      	mov	r2, r3
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f878:	2112      	movs	r1, #18
 800f87a:	6978      	ldr	r0, [r7, #20]
 800f87c:	f002 f844 	bl	8011908 <tcp_enqueue_flags>
 800f880:	4603      	mov	r3, r0
 800f882:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d004      	beq.n	800f896 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f88c:	2100      	movs	r1, #0
 800f88e:	6978      	ldr	r0, [r7, #20]
 800f890:	f7fe f97e 	bl	800db90 <tcp_abandon>
      return;
 800f894:	e006      	b.n	800f8a4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f896:	6978      	ldr	r0, [r7, #20]
 800f898:	f002 f924 	bl	8011ae4 <tcp_output>
  return;
 800f89c:	e001      	b.n	800f8a2 <tcp_listen_input+0x1be>
    return;
 800f89e:	bf00      	nop
 800f8a0:	e000      	b.n	800f8a4 <tcp_listen_input+0x1c0>
  return;
 800f8a2:	bf00      	nop
}
 800f8a4:	371c      	adds	r7, #28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd90      	pop	{r4, r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	200450a4 	.word	0x200450a4
 800f8b0:	08018054 	.word	0x08018054
 800f8b4:	0801824c 	.word	0x0801824c
 800f8b8:	080180a0 	.word	0x080180a0
 800f8bc:	2004509c 	.word	0x2004509c
 800f8c0:	200450a2 	.word	0x200450a2
 800f8c4:	20045098 	.word	0x20045098
 800f8c8:	20045088 	.word	0x20045088
 800f8cc:	2004191c 	.word	0x2004191c
 800f8d0:	20041920 	.word	0x20041920
 800f8d4:	2004190c 	.word	0x2004190c
 800f8d8:	2004506c 	.word	0x2004506c
 800f8dc:	20045074 	.word	0x20045074

0800f8e0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af04      	add	r7, sp, #16
 800f8e6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f8e8:	4b2f      	ldr	r3, [pc, #188]	; (800f9a8 <tcp_timewait_input+0xc8>)
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	f003 0304 	and.w	r3, r3, #4
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d153      	bne.n	800f99c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <tcp_timewait_input+0x28>
 800f8fa:	4b2c      	ldr	r3, [pc, #176]	; (800f9ac <tcp_timewait_input+0xcc>)
 800f8fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f900:	492b      	ldr	r1, [pc, #172]	; (800f9b0 <tcp_timewait_input+0xd0>)
 800f902:	482c      	ldr	r0, [pc, #176]	; (800f9b4 <tcp_timewait_input+0xd4>)
 800f904:	f006 f900 	bl	8015b08 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f908:	4b27      	ldr	r3, [pc, #156]	; (800f9a8 <tcp_timewait_input+0xc8>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	f003 0302 	and.w	r3, r3, #2
 800f910:	2b00      	cmp	r3, #0
 800f912:	d02a      	beq.n	800f96a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f914:	4b28      	ldr	r3, [pc, #160]	; (800f9b8 <tcp_timewait_input+0xd8>)
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	db2d      	blt.n	800f97e <tcp_timewait_input+0x9e>
 800f922:	4b25      	ldr	r3, [pc, #148]	; (800f9b8 <tcp_timewait_input+0xd8>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92a:	6879      	ldr	r1, [r7, #4]
 800f92c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f92e:	440b      	add	r3, r1
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	2b00      	cmp	r3, #0
 800f934:	dc23      	bgt.n	800f97e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f936:	4b21      	ldr	r3, [pc, #132]	; (800f9bc <tcp_timewait_input+0xdc>)
 800f938:	6819      	ldr	r1, [r3, #0]
 800f93a:	4b21      	ldr	r3, [pc, #132]	; (800f9c0 <tcp_timewait_input+0xe0>)
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	4b1d      	ldr	r3, [pc, #116]	; (800f9b8 <tcp_timewait_input+0xd8>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f946:	4b1f      	ldr	r3, [pc, #124]	; (800f9c4 <tcp_timewait_input+0xe4>)
 800f948:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f94a:	885b      	ldrh	r3, [r3, #2]
 800f94c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f94e:	4a1d      	ldr	r2, [pc, #116]	; (800f9c4 <tcp_timewait_input+0xe4>)
 800f950:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f952:	8812      	ldrh	r2, [r2, #0]
 800f954:	b292      	uxth	r2, r2
 800f956:	9202      	str	r2, [sp, #8]
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	4b1b      	ldr	r3, [pc, #108]	; (800f9c8 <tcp_timewait_input+0xe8>)
 800f95c:	9300      	str	r3, [sp, #0]
 800f95e:	4b1b      	ldr	r3, [pc, #108]	; (800f9cc <tcp_timewait_input+0xec>)
 800f960:	4602      	mov	r2, r0
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f002 fe72 	bl	801264c <tcp_rst>
      return;
 800f968:	e01b      	b.n	800f9a2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f96a:	4b0f      	ldr	r3, [pc, #60]	; (800f9a8 <tcp_timewait_input+0xc8>)
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	f003 0301 	and.w	r3, r3, #1
 800f972:	2b00      	cmp	r3, #0
 800f974:	d003      	beq.n	800f97e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f976:	4b16      	ldr	r3, [pc, #88]	; (800f9d0 <tcp_timewait_input+0xf0>)
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f97e:	4b10      	ldr	r3, [pc, #64]	; (800f9c0 <tcp_timewait_input+0xe0>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00c      	beq.n	800f9a0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	8b5b      	ldrh	r3, [r3, #26]
 800f98a:	f043 0302 	orr.w	r3, r3, #2
 800f98e:	b29a      	uxth	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f002 f8a5 	bl	8011ae4 <tcp_output>
  }
  return;
 800f99a:	e001      	b.n	800f9a0 <tcp_timewait_input+0xc0>
    return;
 800f99c:	bf00      	nop
 800f99e:	e000      	b.n	800f9a2 <tcp_timewait_input+0xc2>
  return;
 800f9a0:	bf00      	nop
}
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	200450a4 	.word	0x200450a4
 800f9ac:	08018054 	.word	0x08018054
 800f9b0:	0801826c 	.word	0x0801826c
 800f9b4:	080180a0 	.word	0x080180a0
 800f9b8:	20045098 	.word	0x20045098
 800f9bc:	2004509c 	.word	0x2004509c
 800f9c0:	200450a2 	.word	0x200450a2
 800f9c4:	20045088 	.word	0x20045088
 800f9c8:	2004191c 	.word	0x2004191c
 800f9cc:	20041920 	.word	0x20041920
 800f9d0:	20045060 	.word	0x20045060

0800f9d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f9d4:	b590      	push	{r4, r7, lr}
 800f9d6:	b08d      	sub	sp, #52	; 0x34
 800f9d8:	af04      	add	r7, sp, #16
 800f9da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d106      	bne.n	800f9f8 <tcp_process+0x24>
 800f9ea:	4b9d      	ldr	r3, [pc, #628]	; (800fc60 <tcp_process+0x28c>)
 800f9ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f9f0:	499c      	ldr	r1, [pc, #624]	; (800fc64 <tcp_process+0x290>)
 800f9f2:	489d      	ldr	r0, [pc, #628]	; (800fc68 <tcp_process+0x294>)
 800f9f4:	f006 f888 	bl	8015b08 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f9f8:	4b9c      	ldr	r3, [pc, #624]	; (800fc6c <tcp_process+0x298>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	f003 0304 	and.w	r3, r3, #4
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d04e      	beq.n	800faa2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	7d1b      	ldrb	r3, [r3, #20]
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d108      	bne.n	800fa1e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa10:	4b97      	ldr	r3, [pc, #604]	; (800fc70 <tcp_process+0x29c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d123      	bne.n	800fa60 <tcp_process+0x8c>
        acceptable = 1;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	76fb      	strb	r3, [r7, #27]
 800fa1c:	e020      	b.n	800fa60 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa22:	4b94      	ldr	r3, [pc, #592]	; (800fc74 <tcp_process+0x2a0>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d102      	bne.n	800fa30 <tcp_process+0x5c>
        acceptable = 1;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	76fb      	strb	r3, [r7, #27]
 800fa2e:	e017      	b.n	800fa60 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa30:	4b90      	ldr	r3, [pc, #576]	; (800fc74 <tcp_process+0x2a0>)
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa38:	1ad3      	subs	r3, r2, r3
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	db10      	blt.n	800fa60 <tcp_process+0x8c>
 800fa3e:	4b8d      	ldr	r3, [pc, #564]	; (800fc74 <tcp_process+0x2a0>)
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa4a:	440b      	add	r3, r1
 800fa4c:	1ad3      	subs	r3, r2, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	dc06      	bgt.n	800fa60 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	8b5b      	ldrh	r3, [r3, #26]
 800fa56:	f043 0302 	orr.w	r3, r3, #2
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fa60:	7efb      	ldrb	r3, [r7, #27]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d01b      	beq.n	800fa9e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	7d1b      	ldrb	r3, [r3, #20]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_process+0xa8>
 800fa6e:	4b7c      	ldr	r3, [pc, #496]	; (800fc60 <tcp_process+0x28c>)
 800fa70:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fa74:	4980      	ldr	r1, [pc, #512]	; (800fc78 <tcp_process+0x2a4>)
 800fa76:	487c      	ldr	r0, [pc, #496]	; (800fc68 <tcp_process+0x294>)
 800fa78:	f006 f846 	bl	8015b08 <iprintf>
      recv_flags |= TF_RESET;
 800fa7c:	4b7f      	ldr	r3, [pc, #508]	; (800fc7c <tcp_process+0x2a8>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	f043 0308 	orr.w	r3, r3, #8
 800fa84:	b2da      	uxtb	r2, r3
 800fa86:	4b7d      	ldr	r3, [pc, #500]	; (800fc7c <tcp_process+0x2a8>)
 800fa88:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	8b5b      	ldrh	r3, [r3, #26]
 800fa8e:	f023 0301 	bic.w	r3, r3, #1
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fa98:	f06f 030d 	mvn.w	r3, #13
 800fa9c:	e37a      	b.n	8010194 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	e378      	b.n	8010194 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800faa2:	4b72      	ldr	r3, [pc, #456]	; (800fc6c <tcp_process+0x298>)
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	f003 0302 	and.w	r3, r3, #2
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d010      	beq.n	800fad0 <tcp_process+0xfc>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	7d1b      	ldrb	r3, [r3, #20]
 800fab2:	2b02      	cmp	r3, #2
 800fab4:	d00c      	beq.n	800fad0 <tcp_process+0xfc>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	7d1b      	ldrb	r3, [r3, #20]
 800faba:	2b03      	cmp	r3, #3
 800fabc:	d008      	beq.n	800fad0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	8b5b      	ldrh	r3, [r3, #26]
 800fac2:	f043 0302 	orr.w	r3, r3, #2
 800fac6:	b29a      	uxth	r2, r3
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800facc:	2300      	movs	r3, #0
 800face:	e361      	b.n	8010194 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	8b5b      	ldrh	r3, [r3, #26]
 800fad4:	f003 0310 	and.w	r3, r3, #16
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d103      	bne.n	800fae4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fadc:	4b68      	ldr	r3, [pc, #416]	; (800fc80 <tcp_process+0x2ac>)
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f001 fc2f 	bl	8011358 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	3b02      	subs	r3, #2
 800fb00:	2b07      	cmp	r3, #7
 800fb02:	f200 8337 	bhi.w	8010174 <tcp_process+0x7a0>
 800fb06:	a201      	add	r2, pc, #4	; (adr r2, 800fb0c <tcp_process+0x138>)
 800fb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0c:	0800fb2d 	.word	0x0800fb2d
 800fb10:	0800fd5d 	.word	0x0800fd5d
 800fb14:	0800fed5 	.word	0x0800fed5
 800fb18:	0800feff 	.word	0x0800feff
 800fb1c:	08010023 	.word	0x08010023
 800fb20:	0800fed5 	.word	0x0800fed5
 800fb24:	080100af 	.word	0x080100af
 800fb28:	0801013f 	.word	0x0801013f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fb2c:	4b4f      	ldr	r3, [pc, #316]	; (800fc6c <tcp_process+0x298>)
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	f003 0310 	and.w	r3, r3, #16
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 80e4 	beq.w	800fd02 <tcp_process+0x32e>
 800fb3a:	4b4c      	ldr	r3, [pc, #304]	; (800fc6c <tcp_process+0x298>)
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	f003 0302 	and.w	r3, r3, #2
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f000 80dd 	beq.w	800fd02 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	4b48      	ldr	r3, [pc, #288]	; (800fc70 <tcp_process+0x29c>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	f040 80d5 	bne.w	800fd02 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fb58:	4b46      	ldr	r3, [pc, #280]	; (800fc74 <tcp_process+0x2a0>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fb6a:	4b41      	ldr	r3, [pc, #260]	; (800fc70 <tcp_process+0x29c>)
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fb72:	4b44      	ldr	r3, [pc, #272]	; (800fc84 <tcp_process+0x2b0>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	89db      	ldrh	r3, [r3, #14]
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fb8c:	4b39      	ldr	r3, [pc, #228]	; (800fc74 <tcp_process+0x2a0>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	1e5a      	subs	r2, r3, #1
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2204      	movs	r2, #4
 800fb9a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	3304      	adds	r3, #4
 800fba4:	4618      	mov	r0, r3
 800fba6:	f004 fb21 	bl	80141ec <ip4_route>
 800fbaa:	4601      	mov	r1, r0
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3304      	adds	r3, #4
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	f7ff f88c 	bl	800ecd0 <tcp_eff_send_mss_netif>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbc4:	009a      	lsls	r2, r3, #2
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	f241 111c 	movw	r1, #4380	; 0x111c
 800fbd0:	428b      	cmp	r3, r1
 800fbd2:	bf38      	it	cc
 800fbd4:	460b      	movcc	r3, r1
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d204      	bcs.n	800fbe4 <tcp_process+0x210>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	e00d      	b.n	800fc00 <tcp_process+0x22c>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	f241 121c 	movw	r2, #4380	; 0x111c
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d904      	bls.n	800fbfc <tcp_process+0x228>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	e001      	b.n	800fc00 <tcp_process+0x22c>
 800fbfc:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d106      	bne.n	800fc1e <tcp_process+0x24a>
 800fc10:	4b13      	ldr	r3, [pc, #76]	; (800fc60 <tcp_process+0x28c>)
 800fc12:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fc16:	491c      	ldr	r1, [pc, #112]	; (800fc88 <tcp_process+0x2b4>)
 800fc18:	4813      	ldr	r0, [pc, #76]	; (800fc68 <tcp_process+0x294>)
 800fc1a:	f005 ff75 	bl	8015b08 <iprintf>
        --pcb->snd_queuelen;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc24:	3b01      	subs	r3, #1
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc32:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d12a      	bne.n	800fc90 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc3e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d106      	bne.n	800fc54 <tcp_process+0x280>
 800fc46:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <tcp_process+0x28c>)
 800fc48:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fc4c:	490f      	ldr	r1, [pc, #60]	; (800fc8c <tcp_process+0x2b8>)
 800fc4e:	4806      	ldr	r0, [pc, #24]	; (800fc68 <tcp_process+0x294>)
 800fc50:	f005 ff5a 	bl	8015b08 <iprintf>
          pcb->unsent = rseg->next;
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc5c:	e01c      	b.n	800fc98 <tcp_process+0x2c4>
 800fc5e:	bf00      	nop
 800fc60:	08018054 	.word	0x08018054
 800fc64:	0801828c 	.word	0x0801828c
 800fc68:	080180a0 	.word	0x080180a0
 800fc6c:	200450a4 	.word	0x200450a4
 800fc70:	2004509c 	.word	0x2004509c
 800fc74:	20045098 	.word	0x20045098
 800fc78:	080182a8 	.word	0x080182a8
 800fc7c:	200450a5 	.word	0x200450a5
 800fc80:	20045060 	.word	0x20045060
 800fc84:	20045088 	.word	0x20045088
 800fc88:	080182c8 	.word	0x080182c8
 800fc8c:	080182e0 	.word	0x080182e0
        } else {
          pcb->unacked = rseg->next;
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fc98:	69f8      	ldr	r0, [r7, #28]
 800fc9a:	f7fe fd22 	bl	800e6e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d104      	bne.n	800fcb0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcac:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcae:	e006      	b.n	800fcbe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00a      	beq.n	800fcde <tcp_process+0x30a>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	6910      	ldr	r0, [r2, #16]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	6879      	ldr	r1, [r7, #4]
 800fcd6:	4798      	blx	r3
 800fcd8:	4603      	mov	r3, r0
 800fcda:	76bb      	strb	r3, [r7, #26]
 800fcdc:	e001      	b.n	800fce2 <tcp_process+0x30e>
 800fcde:	2300      	movs	r3, #0
 800fce0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fce2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fce6:	f113 0f0d 	cmn.w	r3, #13
 800fcea:	d102      	bne.n	800fcf2 <tcp_process+0x31e>
          return ERR_ABRT;
 800fcec:	f06f 030c 	mvn.w	r3, #12
 800fcf0:	e250      	b.n	8010194 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8b5b      	ldrh	r3, [r3, #26]
 800fcf6:	f043 0302 	orr.w	r3, r3, #2
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fd00:	e23a      	b.n	8010178 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fd02:	4b98      	ldr	r3, [pc, #608]	; (800ff64 <tcp_process+0x590>)
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	f003 0310 	and.w	r3, r3, #16
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f000 8234 	beq.w	8010178 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd10:	4b95      	ldr	r3, [pc, #596]	; (800ff68 <tcp_process+0x594>)
 800fd12:	6819      	ldr	r1, [r3, #0]
 800fd14:	4b95      	ldr	r3, [pc, #596]	; (800ff6c <tcp_process+0x598>)
 800fd16:	881b      	ldrh	r3, [r3, #0]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4b95      	ldr	r3, [pc, #596]	; (800ff70 <tcp_process+0x59c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd20:	4b94      	ldr	r3, [pc, #592]	; (800ff74 <tcp_process+0x5a0>)
 800fd22:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd24:	885b      	ldrh	r3, [r3, #2]
 800fd26:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd28:	4a92      	ldr	r2, [pc, #584]	; (800ff74 <tcp_process+0x5a0>)
 800fd2a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd2c:	8812      	ldrh	r2, [r2, #0]
 800fd2e:	b292      	uxth	r2, r2
 800fd30:	9202      	str	r2, [sp, #8]
 800fd32:	9301      	str	r3, [sp, #4]
 800fd34:	4b90      	ldr	r3, [pc, #576]	; (800ff78 <tcp_process+0x5a4>)
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	4b90      	ldr	r3, [pc, #576]	; (800ff7c <tcp_process+0x5a8>)
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f002 fc85 	bl	801264c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd48:	2b05      	cmp	r3, #5
 800fd4a:	f200 8215 	bhi.w	8010178 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f002 fa51 	bl	80121fc <tcp_rexmit_rto>
      break;
 800fd5a:	e20d      	b.n	8010178 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fd5c:	4b81      	ldr	r3, [pc, #516]	; (800ff64 <tcp_process+0x590>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	f003 0310 	and.w	r3, r3, #16
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80a1 	beq.w	800feac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd6a:	4b7f      	ldr	r3, [pc, #508]	; (800ff68 <tcp_process+0x594>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	3b01      	subs	r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	db7e      	blt.n	800fe78 <tcp_process+0x4a4>
 800fd7a:	4b7b      	ldr	r3, [pc, #492]	; (800ff68 <tcp_process+0x594>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	dc77      	bgt.n	800fe78 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d102      	bne.n	800fd9c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fd96:	23fa      	movs	r3, #250	; 0xfa
 800fd98:	76bb      	strb	r3, [r7, #26]
 800fd9a:	e01d      	b.n	800fdd8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fda0:	699b      	ldr	r3, [r3, #24]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d106      	bne.n	800fdb4 <tcp_process+0x3e0>
 800fda6:	4b76      	ldr	r3, [pc, #472]	; (800ff80 <tcp_process+0x5ac>)
 800fda8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fdac:	4975      	ldr	r1, [pc, #468]	; (800ff84 <tcp_process+0x5b0>)
 800fdae:	4876      	ldr	r0, [pc, #472]	; (800ff88 <tcp_process+0x5b4>)
 800fdb0:	f005 feaa 	bl	8015b08 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00a      	beq.n	800fdd4 <tcp_process+0x400>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	6910      	ldr	r0, [r2, #16]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	4798      	blx	r3
 800fdce:	4603      	mov	r3, r0
 800fdd0:	76bb      	strb	r3, [r7, #26]
 800fdd2:	e001      	b.n	800fdd8 <tcp_process+0x404>
 800fdd4:	23f0      	movs	r3, #240	; 0xf0
 800fdd6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fdd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00a      	beq.n	800fdf6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fde0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fde4:	f113 0f0d 	cmn.w	r3, #13
 800fde8:	d002      	beq.n	800fdf0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7fd ff8e 	bl	800dd0c <tcp_abort>
            }
            return ERR_ABRT;
 800fdf0:	f06f 030c 	mvn.w	r3, #12
 800fdf4:	e1ce      	b.n	8010194 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 fae0 	bl	80103bc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fdfc:	4b63      	ldr	r3, [pc, #396]	; (800ff8c <tcp_process+0x5b8>)
 800fdfe:	881b      	ldrh	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d005      	beq.n	800fe10 <tcp_process+0x43c>
            recv_acked--;
 800fe04:	4b61      	ldr	r3, [pc, #388]	; (800ff8c <tcp_process+0x5b8>)
 800fe06:	881b      	ldrh	r3, [r3, #0]
 800fe08:	3b01      	subs	r3, #1
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	4b5f      	ldr	r3, [pc, #380]	; (800ff8c <tcp_process+0x5b8>)
 800fe0e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe14:	009a      	lsls	r2, r3, #2
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe1a:	005b      	lsls	r3, r3, #1
 800fe1c:	f241 111c 	movw	r1, #4380	; 0x111c
 800fe20:	428b      	cmp	r3, r1
 800fe22:	bf38      	it	cc
 800fe24:	460b      	movcc	r3, r1
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d204      	bcs.n	800fe34 <tcp_process+0x460>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	e00d      	b.n	800fe50 <tcp_process+0x47c>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe38:	005b      	lsls	r3, r3, #1
 800fe3a:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d904      	bls.n	800fe4c <tcp_process+0x478>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe46:	005b      	lsls	r3, r3, #1
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	e001      	b.n	800fe50 <tcp_process+0x47c>
 800fe4c:	f241 131c 	movw	r3, #4380	; 0x111c
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fe56:	4b4e      	ldr	r3, [pc, #312]	; (800ff90 <tcp_process+0x5bc>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f003 0320 	and.w	r3, r3, #32
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d037      	beq.n	800fed2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	8b5b      	ldrh	r3, [r3, #26]
 800fe66:	f043 0302 	orr.w	r3, r3, #2
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2207      	movs	r2, #7
 800fe74:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fe76:	e02c      	b.n	800fed2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe78:	4b3b      	ldr	r3, [pc, #236]	; (800ff68 <tcp_process+0x594>)
 800fe7a:	6819      	ldr	r1, [r3, #0]
 800fe7c:	4b3b      	ldr	r3, [pc, #236]	; (800ff6c <tcp_process+0x598>)
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	461a      	mov	r2, r3
 800fe82:	4b3b      	ldr	r3, [pc, #236]	; (800ff70 <tcp_process+0x59c>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe88:	4b3a      	ldr	r3, [pc, #232]	; (800ff74 <tcp_process+0x5a0>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe8c:	885b      	ldrh	r3, [r3, #2]
 800fe8e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe90:	4a38      	ldr	r2, [pc, #224]	; (800ff74 <tcp_process+0x5a0>)
 800fe92:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe94:	8812      	ldrh	r2, [r2, #0]
 800fe96:	b292      	uxth	r2, r2
 800fe98:	9202      	str	r2, [sp, #8]
 800fe9a:	9301      	str	r3, [sp, #4]
 800fe9c:	4b36      	ldr	r3, [pc, #216]	; (800ff78 <tcp_process+0x5a4>)
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	4b36      	ldr	r3, [pc, #216]	; (800ff7c <tcp_process+0x5a8>)
 800fea2:	4602      	mov	r2, r0
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f002 fbd1 	bl	801264c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800feaa:	e167      	b.n	801017c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800feac:	4b2d      	ldr	r3, [pc, #180]	; (800ff64 <tcp_process+0x590>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 0302 	and.w	r3, r3, #2
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 8161 	beq.w	801017c <tcp_process+0x7a8>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800febe:	1e5a      	subs	r2, r3, #1
 800fec0:	4b2b      	ldr	r3, [pc, #172]	; (800ff70 <tcp_process+0x59c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	f040 8159 	bne.w	801017c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f002 f9b8 	bl	8012240 <tcp_rexmit>
      break;
 800fed0:	e154      	b.n	801017c <tcp_process+0x7a8>
 800fed2:	e153      	b.n	801017c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fa71 	bl	80103bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800feda:	4b2d      	ldr	r3, [pc, #180]	; (800ff90 <tcp_process+0x5bc>)
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	f003 0320 	and.w	r3, r3, #32
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	f000 814c 	beq.w	8010180 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	8b5b      	ldrh	r3, [r3, #26]
 800feec:	f043 0302 	orr.w	r3, r3, #2
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2207      	movs	r2, #7
 800fefa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fefc:	e140      	b.n	8010180 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fa5c 	bl	80103bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff04:	4b22      	ldr	r3, [pc, #136]	; (800ff90 <tcp_process+0x5bc>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	f003 0320 	and.w	r3, r3, #32
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d071      	beq.n	800fff4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff10:	4b14      	ldr	r3, [pc, #80]	; (800ff64 <tcp_process+0x590>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f003 0310 	and.w	r3, r3, #16
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d060      	beq.n	800ffde <tcp_process+0x60a>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff20:	4b11      	ldr	r3, [pc, #68]	; (800ff68 <tcp_process+0x594>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d15a      	bne.n	800ffde <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d156      	bne.n	800ffde <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	8b5b      	ldrh	r3, [r3, #26]
 800ff34:	f043 0302 	orr.w	r3, r3, #2
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7fe fdbc 	bl	800eabc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ff44:	4b13      	ldr	r3, [pc, #76]	; (800ff94 <tcp_process+0x5c0>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d105      	bne.n	800ff5a <tcp_process+0x586>
 800ff4e:	4b11      	ldr	r3, [pc, #68]	; (800ff94 <tcp_process+0x5c0>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	4a0f      	ldr	r2, [pc, #60]	; (800ff94 <tcp_process+0x5c0>)
 800ff56:	6013      	str	r3, [r2, #0]
 800ff58:	e02e      	b.n	800ffb8 <tcp_process+0x5e4>
 800ff5a:	4b0e      	ldr	r3, [pc, #56]	; (800ff94 <tcp_process+0x5c0>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	617b      	str	r3, [r7, #20]
 800ff60:	e027      	b.n	800ffb2 <tcp_process+0x5de>
 800ff62:	bf00      	nop
 800ff64:	200450a4 	.word	0x200450a4
 800ff68:	2004509c 	.word	0x2004509c
 800ff6c:	200450a2 	.word	0x200450a2
 800ff70:	20045098 	.word	0x20045098
 800ff74:	20045088 	.word	0x20045088
 800ff78:	2004191c 	.word	0x2004191c
 800ff7c:	20041920 	.word	0x20041920
 800ff80:	08018054 	.word	0x08018054
 800ff84:	080182f4 	.word	0x080182f4
 800ff88:	080180a0 	.word	0x080180a0
 800ff8c:	200450a0 	.word	0x200450a0
 800ff90:	200450a5 	.word	0x200450a5
 800ff94:	2004506c 	.word	0x2004506c
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d104      	bne.n	800ffac <tcp_process+0x5d8>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	68da      	ldr	r2, [r3, #12]
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	60da      	str	r2, [r3, #12]
 800ffaa:	e005      	b.n	800ffb8 <tcp_process+0x5e4>
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	617b      	str	r3, [r7, #20]
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1ef      	bne.n	800ff98 <tcp_process+0x5c4>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	60da      	str	r2, [r3, #12]
 800ffbe:	4b77      	ldr	r3, [pc, #476]	; (801019c <tcp_process+0x7c8>)
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	220a      	movs	r2, #10
 800ffc8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ffca:	4b75      	ldr	r3, [pc, #468]	; (80101a0 <tcp_process+0x7cc>)
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	60da      	str	r2, [r3, #12]
 800ffd2:	4a73      	ldr	r2, [pc, #460]	; (80101a0 <tcp_process+0x7cc>)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6013      	str	r3, [r2, #0]
 800ffd8:	f002 fcfa 	bl	80129d0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ffdc:	e0d2      	b.n	8010184 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8b5b      	ldrh	r3, [r3, #26]
 800ffe2:	f043 0302 	orr.w	r3, r3, #2
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2208      	movs	r2, #8
 800fff0:	751a      	strb	r2, [r3, #20]
      break;
 800fff2:	e0c7      	b.n	8010184 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fff4:	4b6b      	ldr	r3, [pc, #428]	; (80101a4 <tcp_process+0x7d0>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	f003 0310 	and.w	r3, r3, #16
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	f000 80c1 	beq.w	8010184 <tcp_process+0x7b0>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010006:	4b68      	ldr	r3, [pc, #416]	; (80101a8 <tcp_process+0x7d4>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	429a      	cmp	r2, r3
 801000c:	f040 80ba 	bne.w	8010184 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010014:	2b00      	cmp	r3, #0
 8010016:	f040 80b5 	bne.w	8010184 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2206      	movs	r2, #6
 801001e:	751a      	strb	r2, [r3, #20]
      break;
 8010020:	e0b0      	b.n	8010184 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f9ca 	bl	80103bc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010028:	4b60      	ldr	r3, [pc, #384]	; (80101ac <tcp_process+0x7d8>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	f003 0320 	and.w	r3, r3, #32
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 80a9 	beq.w	8010188 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8b5b      	ldrh	r3, [r3, #26]
 801003a:	f043 0302 	orr.w	r3, r3, #2
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7fe fd39 	bl	800eabc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801004a:	4b59      	ldr	r3, [pc, #356]	; (80101b0 <tcp_process+0x7dc>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	429a      	cmp	r2, r3
 8010052:	d105      	bne.n	8010060 <tcp_process+0x68c>
 8010054:	4b56      	ldr	r3, [pc, #344]	; (80101b0 <tcp_process+0x7dc>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	4a55      	ldr	r2, [pc, #340]	; (80101b0 <tcp_process+0x7dc>)
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	e013      	b.n	8010088 <tcp_process+0x6b4>
 8010060:	4b53      	ldr	r3, [pc, #332]	; (80101b0 <tcp_process+0x7dc>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	613b      	str	r3, [r7, #16]
 8010066:	e00c      	b.n	8010082 <tcp_process+0x6ae>
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	429a      	cmp	r2, r3
 8010070:	d104      	bne.n	801007c <tcp_process+0x6a8>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68da      	ldr	r2, [r3, #12]
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	60da      	str	r2, [r3, #12]
 801007a:	e005      	b.n	8010088 <tcp_process+0x6b4>
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	613b      	str	r3, [r7, #16]
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1ef      	bne.n	8010068 <tcp_process+0x694>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	60da      	str	r2, [r3, #12]
 801008e:	4b43      	ldr	r3, [pc, #268]	; (801019c <tcp_process+0x7c8>)
 8010090:	2201      	movs	r2, #1
 8010092:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	220a      	movs	r2, #10
 8010098:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801009a:	4b41      	ldr	r3, [pc, #260]	; (80101a0 <tcp_process+0x7cc>)
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	60da      	str	r2, [r3, #12]
 80100a2:	4a3f      	ldr	r2, [pc, #252]	; (80101a0 <tcp_process+0x7cc>)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6013      	str	r3, [r2, #0]
 80100a8:	f002 fc92 	bl	80129d0 <tcp_timer_needed>
      }
      break;
 80100ac:	e06c      	b.n	8010188 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f984 	bl	80103bc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80100b4:	4b3b      	ldr	r3, [pc, #236]	; (80101a4 <tcp_process+0x7d0>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 0310 	and.w	r3, r3, #16
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d065      	beq.n	801018c <tcp_process+0x7b8>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100c4:	4b38      	ldr	r3, [pc, #224]	; (80101a8 <tcp_process+0x7d4>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d15f      	bne.n	801018c <tcp_process+0x7b8>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d15b      	bne.n	801018c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fe fcf1 	bl	800eabc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100da:	4b35      	ldr	r3, [pc, #212]	; (80101b0 <tcp_process+0x7dc>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d105      	bne.n	80100f0 <tcp_process+0x71c>
 80100e4:	4b32      	ldr	r3, [pc, #200]	; (80101b0 <tcp_process+0x7dc>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	4a31      	ldr	r2, [pc, #196]	; (80101b0 <tcp_process+0x7dc>)
 80100ec:	6013      	str	r3, [r2, #0]
 80100ee:	e013      	b.n	8010118 <tcp_process+0x744>
 80100f0:	4b2f      	ldr	r3, [pc, #188]	; (80101b0 <tcp_process+0x7dc>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	60fb      	str	r3, [r7, #12]
 80100f6:	e00c      	b.n	8010112 <tcp_process+0x73e>
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d104      	bne.n	801010c <tcp_process+0x738>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	68da      	ldr	r2, [r3, #12]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	60da      	str	r2, [r3, #12]
 801010a:	e005      	b.n	8010118 <tcp_process+0x744>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	60fb      	str	r3, [r7, #12]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d1ef      	bne.n	80100f8 <tcp_process+0x724>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	60da      	str	r2, [r3, #12]
 801011e:	4b1f      	ldr	r3, [pc, #124]	; (801019c <tcp_process+0x7c8>)
 8010120:	2201      	movs	r2, #1
 8010122:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	220a      	movs	r2, #10
 8010128:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801012a:	4b1d      	ldr	r3, [pc, #116]	; (80101a0 <tcp_process+0x7cc>)
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	60da      	str	r2, [r3, #12]
 8010132:	4a1b      	ldr	r2, [pc, #108]	; (80101a0 <tcp_process+0x7cc>)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	f002 fc4a 	bl	80129d0 <tcp_timer_needed>
      }
      break;
 801013c:	e026      	b.n	801018c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 f93c 	bl	80103bc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010144:	4b17      	ldr	r3, [pc, #92]	; (80101a4 <tcp_process+0x7d0>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f003 0310 	and.w	r3, r3, #16
 801014c:	2b00      	cmp	r3, #0
 801014e:	d01f      	beq.n	8010190 <tcp_process+0x7bc>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010154:	4b14      	ldr	r3, [pc, #80]	; (80101a8 <tcp_process+0x7d4>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	429a      	cmp	r2, r3
 801015a:	d119      	bne.n	8010190 <tcp_process+0x7bc>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010160:	2b00      	cmp	r3, #0
 8010162:	d115      	bne.n	8010190 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010164:	4b11      	ldr	r3, [pc, #68]	; (80101ac <tcp_process+0x7d8>)
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	f043 0310 	orr.w	r3, r3, #16
 801016c:	b2da      	uxtb	r2, r3
 801016e:	4b0f      	ldr	r3, [pc, #60]	; (80101ac <tcp_process+0x7d8>)
 8010170:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010172:	e00d      	b.n	8010190 <tcp_process+0x7bc>
    default:
      break;
 8010174:	bf00      	nop
 8010176:	e00c      	b.n	8010192 <tcp_process+0x7be>
      break;
 8010178:	bf00      	nop
 801017a:	e00a      	b.n	8010192 <tcp_process+0x7be>
      break;
 801017c:	bf00      	nop
 801017e:	e008      	b.n	8010192 <tcp_process+0x7be>
      break;
 8010180:	bf00      	nop
 8010182:	e006      	b.n	8010192 <tcp_process+0x7be>
      break;
 8010184:	bf00      	nop
 8010186:	e004      	b.n	8010192 <tcp_process+0x7be>
      break;
 8010188:	bf00      	nop
 801018a:	e002      	b.n	8010192 <tcp_process+0x7be>
      break;
 801018c:	bf00      	nop
 801018e:	e000      	b.n	8010192 <tcp_process+0x7be>
      break;
 8010190:	bf00      	nop
  }
  return ERR_OK;
 8010192:	2300      	movs	r3, #0
}
 8010194:	4618      	mov	r0, r3
 8010196:	3724      	adds	r7, #36	; 0x24
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}
 801019c:	20045074 	.word	0x20045074
 80101a0:	20045070 	.word	0x20045070
 80101a4:	200450a4 	.word	0x200450a4
 80101a8:	2004509c 	.word	0x2004509c
 80101ac:	200450a5 	.word	0x200450a5
 80101b0:	2004506c 	.word	0x2004506c

080101b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80101b4:	b590      	push	{r4, r7, lr}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d106      	bne.n	80101d2 <tcp_oos_insert_segment+0x1e>
 80101c4:	4b3b      	ldr	r3, [pc, #236]	; (80102b4 <tcp_oos_insert_segment+0x100>)
 80101c6:	f240 421f 	movw	r2, #1055	; 0x41f
 80101ca:	493b      	ldr	r1, [pc, #236]	; (80102b8 <tcp_oos_insert_segment+0x104>)
 80101cc:	483b      	ldr	r0, [pc, #236]	; (80102bc <tcp_oos_insert_segment+0x108>)
 80101ce:	f005 fc9b 	bl	8015b08 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	899b      	ldrh	r3, [r3, #12]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fb fc10 	bl	800ba00 <lwip_htons>
 80101e0:	4603      	mov	r3, r0
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f003 0301 	and.w	r3, r3, #1
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d028      	beq.n	801023e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80101ec:	6838      	ldr	r0, [r7, #0]
 80101ee:	f7fe fa63 	bl	800e6b8 <tcp_segs_free>
    next = NULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	603b      	str	r3, [r7, #0]
 80101f6:	e056      	b.n	80102a6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	899b      	ldrh	r3, [r3, #12]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	4618      	mov	r0, r3
 8010202:	f7fb fbfd 	bl	800ba00 <lwip_htons>
 8010206:	4603      	mov	r3, r0
 8010208:	b2db      	uxtb	r3, r3
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00d      	beq.n	801022e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	899b      	ldrh	r3, [r3, #12]
 8010218:	b29c      	uxth	r4, r3
 801021a:	2001      	movs	r0, #1
 801021c:	f7fb fbf0 	bl	800ba00 <lwip_htons>
 8010220:	4603      	mov	r3, r0
 8010222:	461a      	mov	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	4322      	orrs	r2, r4
 801022a:	b292      	uxth	r2, r2
 801022c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f7fe fa52 	bl	800e6e2 <tcp_seg_free>
    while (next &&
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00e      	beq.n	8010262 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	891b      	ldrh	r3, [r3, #8]
 8010248:	461a      	mov	r2, r3
 801024a:	4b1d      	ldr	r3, [pc, #116]	; (80102c0 <tcp_oos_insert_segment+0x10c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	441a      	add	r2, r3
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	8909      	ldrh	r1, [r1, #8]
 801025a:	440b      	add	r3, r1
 801025c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801025e:	2b00      	cmp	r3, #0
 8010260:	daca      	bge.n	80101f8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d01e      	beq.n	80102a6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	891b      	ldrh	r3, [r3, #8]
 801026c:	461a      	mov	r2, r3
 801026e:	4b14      	ldr	r3, [pc, #80]	; (80102c0 <tcp_oos_insert_segment+0x10c>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	441a      	add	r2, r3
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801027c:	2b00      	cmp	r3, #0
 801027e:	dd12      	ble.n	80102a6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	b29a      	uxth	r2, r3
 8010288:	4b0d      	ldr	r3, [pc, #52]	; (80102c0 <tcp_oos_insert_segment+0x10c>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	b29b      	uxth	r3, r3
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	b29a      	uxth	r2, r3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	685a      	ldr	r2, [r3, #4]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	891b      	ldrh	r3, [r3, #8]
 801029e:	4619      	mov	r1, r3
 80102a0:	4610      	mov	r0, r2
 80102a2:	f7fc fe19 	bl	800ced8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	601a      	str	r2, [r3, #0]
}
 80102ac:	bf00      	nop
 80102ae:	3714      	adds	r7, #20
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd90      	pop	{r4, r7, pc}
 80102b4:	08018054 	.word	0x08018054
 80102b8:	08018314 	.word	0x08018314
 80102bc:	080180a0 	.word	0x080180a0
 80102c0:	20045098 	.word	0x20045098

080102c4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80102c4:	b5b0      	push	{r4, r5, r7, lr}
 80102c6:	b086      	sub	sp, #24
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
 80102d0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80102d2:	e03e      	b.n	8010352 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fd f80c 	bl	800d300 <pbuf_clen>
 80102e8:	4603      	mov	r3, r0
 80102ea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102f2:	8a7a      	ldrh	r2, [r7, #18]
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d906      	bls.n	8010306 <tcp_free_acked_segments+0x42>
 80102f8:	4b2a      	ldr	r3, [pc, #168]	; (80103a4 <tcp_free_acked_segments+0xe0>)
 80102fa:	f240 4257 	movw	r2, #1111	; 0x457
 80102fe:	492a      	ldr	r1, [pc, #168]	; (80103a8 <tcp_free_acked_segments+0xe4>)
 8010300:	482a      	ldr	r0, [pc, #168]	; (80103ac <tcp_free_acked_segments+0xe8>)
 8010302:	f005 fc01 	bl	8015b08 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801030c:	8a7b      	ldrh	r3, [r7, #18]
 801030e:	1ad3      	subs	r3, r2, r3
 8010310:	b29a      	uxth	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	891a      	ldrh	r2, [r3, #8]
 801031c:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <tcp_free_acked_segments+0xec>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	4413      	add	r3, r2
 8010322:	b29a      	uxth	r2, r3
 8010324:	4b22      	ldr	r3, [pc, #136]	; (80103b0 <tcp_free_acked_segments+0xec>)
 8010326:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010328:	6978      	ldr	r0, [r7, #20]
 801032a:	f7fe f9da 	bl	800e6e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00c      	beq.n	8010352 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d109      	bne.n	8010352 <tcp_free_acked_segments+0x8e>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d106      	bne.n	8010352 <tcp_free_acked_segments+0x8e>
 8010344:	4b17      	ldr	r3, [pc, #92]	; (80103a4 <tcp_free_acked_segments+0xe0>)
 8010346:	f240 4261 	movw	r2, #1121	; 0x461
 801034a:	491a      	ldr	r1, [pc, #104]	; (80103b4 <tcp_free_acked_segments+0xf0>)
 801034c:	4817      	ldr	r0, [pc, #92]	; (80103ac <tcp_free_acked_segments+0xe8>)
 801034e:	f005 fbdb 	bl	8015b08 <iprintf>
  while (seg_list != NULL &&
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d020      	beq.n	801039a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	4618      	mov	r0, r3
 8010360:	f7fb fb63 	bl	800ba2a <lwip_htonl>
 8010364:	4604      	mov	r4, r0
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	891b      	ldrh	r3, [r3, #8]
 801036a:	461d      	mov	r5, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	899b      	ldrh	r3, [r3, #12]
 8010372:	b29b      	uxth	r3, r3
 8010374:	4618      	mov	r0, r3
 8010376:	f7fb fb43 	bl	800ba00 <lwip_htons>
 801037a:	4603      	mov	r3, r0
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f003 0303 	and.w	r3, r3, #3
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <tcp_free_acked_segments+0xc6>
 8010386:	2301      	movs	r3, #1
 8010388:	e000      	b.n	801038c <tcp_free_acked_segments+0xc8>
 801038a:	2300      	movs	r3, #0
 801038c:	442b      	add	r3, r5
 801038e:	18e2      	adds	r2, r4, r3
 8010390:	4b09      	ldr	r3, [pc, #36]	; (80103b8 <tcp_free_acked_segments+0xf4>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010396:	2b00      	cmp	r3, #0
 8010398:	dd9c      	ble.n	80102d4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801039a:	68bb      	ldr	r3, [r7, #8]
}
 801039c:	4618      	mov	r0, r3
 801039e:	3718      	adds	r7, #24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bdb0      	pop	{r4, r5, r7, pc}
 80103a4:	08018054 	.word	0x08018054
 80103a8:	0801833c 	.word	0x0801833c
 80103ac:	080180a0 	.word	0x080180a0
 80103b0:	200450a0 	.word	0x200450a0
 80103b4:	08018364 	.word	0x08018364
 80103b8:	2004509c 	.word	0x2004509c

080103bc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80103bc:	b5b0      	push	{r4, r5, r7, lr}
 80103be:	b094      	sub	sp, #80	; 0x50
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <tcp_receive+0x20>
 80103ce:	4b91      	ldr	r3, [pc, #580]	; (8010614 <tcp_receive+0x258>)
 80103d0:	f240 427b 	movw	r2, #1147	; 0x47b
 80103d4:	4990      	ldr	r1, [pc, #576]	; (8010618 <tcp_receive+0x25c>)
 80103d6:	4891      	ldr	r0, [pc, #580]	; (801061c <tcp_receive+0x260>)
 80103d8:	f005 fb96 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	7d1b      	ldrb	r3, [r3, #20]
 80103e0:	2b03      	cmp	r3, #3
 80103e2:	d806      	bhi.n	80103f2 <tcp_receive+0x36>
 80103e4:	4b8b      	ldr	r3, [pc, #556]	; (8010614 <tcp_receive+0x258>)
 80103e6:	f240 427c 	movw	r2, #1148	; 0x47c
 80103ea:	498d      	ldr	r1, [pc, #564]	; (8010620 <tcp_receive+0x264>)
 80103ec:	488b      	ldr	r0, [pc, #556]	; (801061c <tcp_receive+0x260>)
 80103ee:	f005 fb8b 	bl	8015b08 <iprintf>

  if (flags & TCP_ACK) {
 80103f2:	4b8c      	ldr	r3, [pc, #560]	; (8010624 <tcp_receive+0x268>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	f003 0310 	and.w	r3, r3, #16
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f000 8264 	beq.w	80108c8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010406:	461a      	mov	r2, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801040c:	4413      	add	r3, r2
 801040e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010414:	4b84      	ldr	r3, [pc, #528]	; (8010628 <tcp_receive+0x26c>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	db1b      	blt.n	8010456 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010422:	4b81      	ldr	r3, [pc, #516]	; (8010628 <tcp_receive+0x26c>)
 8010424:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010426:	429a      	cmp	r2, r3
 8010428:	d106      	bne.n	8010438 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801042e:	4b7f      	ldr	r3, [pc, #508]	; (801062c <tcp_receive+0x270>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	2b00      	cmp	r3, #0
 8010436:	db0e      	blt.n	8010456 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801043c:	4b7b      	ldr	r3, [pc, #492]	; (801062c <tcp_receive+0x270>)
 801043e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010440:	429a      	cmp	r2, r3
 8010442:	d125      	bne.n	8010490 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010444:	4b7a      	ldr	r3, [pc, #488]	; (8010630 <tcp_receive+0x274>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	89db      	ldrh	r3, [r3, #14]
 801044a:	b29a      	uxth	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010452:	429a      	cmp	r2, r3
 8010454:	d91c      	bls.n	8010490 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010456:	4b76      	ldr	r3, [pc, #472]	; (8010630 <tcp_receive+0x274>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	89db      	ldrh	r3, [r3, #14]
 801045c:	b29a      	uxth	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010470:	429a      	cmp	r2, r3
 8010472:	d205      	bcs.n	8010480 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010480:	4b69      	ldr	r3, [pc, #420]	; (8010628 <tcp_receive+0x26c>)
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010488:	4b68      	ldr	r3, [pc, #416]	; (801062c <tcp_receive+0x270>)
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010490:	4b66      	ldr	r3, [pc, #408]	; (801062c <tcp_receive+0x270>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	2b00      	cmp	r3, #0
 801049c:	dc58      	bgt.n	8010550 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801049e:	4b65      	ldr	r3, [pc, #404]	; (8010634 <tcp_receive+0x278>)
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d14b      	bne.n	801053e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80104b0:	4413      	add	r3, r2
 80104b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d142      	bne.n	801053e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80104be:	2b00      	cmp	r3, #0
 80104c0:	db3d      	blt.n	801053e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104c6:	4b59      	ldr	r3, [pc, #356]	; (801062c <tcp_receive+0x270>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d137      	bne.n	801053e <tcp_receive+0x182>
              found_dupack = 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104d8:	2bff      	cmp	r3, #255	; 0xff
 80104da:	d007      	beq.n	80104ec <tcp_receive+0x130>
                ++pcb->dupacks;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104e2:	3301      	adds	r3, #1
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104f2:	2b03      	cmp	r3, #3
 80104f4:	d91b      	bls.n	801052e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010500:	4413      	add	r3, r2
 8010502:	b29a      	uxth	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801050a:	429a      	cmp	r2, r3
 801050c:	d30a      	bcc.n	8010524 <tcp_receive+0x168>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010518:	4413      	add	r3, r2
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010522:	e004      	b.n	801052e <tcp_receive+0x172>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801052a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010534:	2b02      	cmp	r3, #2
 8010536:	d902      	bls.n	801053e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f001 feed 	bl	8012318 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801053e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010540:	2b00      	cmp	r3, #0
 8010542:	f040 8161 	bne.w	8010808 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801054e:	e15b      	b.n	8010808 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010550:	4b36      	ldr	r3, [pc, #216]	; (801062c <tcp_receive+0x270>)
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	3b01      	subs	r3, #1
 801055c:	2b00      	cmp	r3, #0
 801055e:	f2c0 814e 	blt.w	80107fe <tcp_receive+0x442>
 8010562:	4b32      	ldr	r3, [pc, #200]	; (801062c <tcp_receive+0x270>)
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801056a:	1ad3      	subs	r3, r2, r3
 801056c:	2b00      	cmp	r3, #0
 801056e:	f300 8146 	bgt.w	80107fe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	8b5b      	ldrh	r3, [r3, #26]
 8010576:	f003 0304 	and.w	r3, r3, #4
 801057a:	2b00      	cmp	r3, #0
 801057c:	d010      	beq.n	80105a0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	8b5b      	ldrh	r3, [r3, #26]
 8010582:	f023 0304 	bic.w	r3, r3, #4
 8010586:	b29a      	uxth	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105ae:	10db      	asrs	r3, r3, #3
 80105b0:	b21b      	sxth	r3, r3
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	4413      	add	r3, r2
 80105be:	b29b      	uxth	r3, r3
 80105c0:	b21a      	sxth	r2, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80105c8:	4b18      	ldr	r3, [pc, #96]	; (801062c <tcp_receive+0x270>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80105e0:	4b12      	ldr	r3, [pc, #72]	; (801062c <tcp_receive+0x270>)
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	7d1b      	ldrb	r3, [r3, #20]
 80105ec:	2b03      	cmp	r3, #3
 80105ee:	f240 8097 	bls.w	8010720 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80105fe:	429a      	cmp	r2, r3
 8010600:	d245      	bcs.n	801068e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	8b5b      	ldrh	r3, [r3, #26]
 8010606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801060a:	2b00      	cmp	r3, #0
 801060c:	d014      	beq.n	8010638 <tcp_receive+0x27c>
 801060e:	2301      	movs	r3, #1
 8010610:	e013      	b.n	801063a <tcp_receive+0x27e>
 8010612:	bf00      	nop
 8010614:	08018054 	.word	0x08018054
 8010618:	08018384 	.word	0x08018384
 801061c:	080180a0 	.word	0x080180a0
 8010620:	080183a0 	.word	0x080183a0
 8010624:	200450a4 	.word	0x200450a4
 8010628:	20045098 	.word	0x20045098
 801062c:	2004509c 	.word	0x2004509c
 8010630:	20045088 	.word	0x20045088
 8010634:	200450a2 	.word	0x200450a2
 8010638:	2302      	movs	r3, #2
 801063a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801063e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010642:	b29a      	uxth	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010648:	fb12 f303 	smulbb	r3, r2, r3
 801064c:	b29b      	uxth	r3, r3
 801064e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010650:	4293      	cmp	r3, r2
 8010652:	bf28      	it	cs
 8010654:	4613      	movcs	r3, r2
 8010656:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801065e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010660:	4413      	add	r3, r2
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801066a:	429a      	cmp	r2, r3
 801066c:	d309      	bcc.n	8010682 <tcp_receive+0x2c6>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010674:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010676:	4413      	add	r3, r2
 8010678:	b29a      	uxth	r2, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010680:	e04e      	b.n	8010720 <tcp_receive+0x364>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010688:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801068c:	e048      	b.n	8010720 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010694:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010696:	4413      	add	r3, r2
 8010698:	b29a      	uxth	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d309      	bcc.n	80106b8 <tcp_receive+0x2fc>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80106aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80106ac:	4413      	add	r3, r2
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80106b6:	e004      	b.n	80106c2 <tcp_receive+0x306>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d326      	bcc.n	8010720 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f2:	4413      	add	r3, r2
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d30a      	bcc.n	8010716 <tcp_receive+0x35a>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801070a:	4413      	add	r3, r2
 801070c:	b29a      	uxth	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010714:	e004      	b.n	8010720 <tcp_receive+0x364>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801071c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010728:	4a98      	ldr	r2, [pc, #608]	; (801098c <tcp_receive+0x5d0>)
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f7ff fdca 	bl	80102c4 <tcp_free_acked_segments>
 8010730:	4602      	mov	r2, r0
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801073e:	4a94      	ldr	r2, [pc, #592]	; (8010990 <tcp_receive+0x5d4>)
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7ff fdbf 	bl	80102c4 <tcp_free_acked_segments>
 8010746:	4602      	mov	r2, r0
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010750:	2b00      	cmp	r3, #0
 8010752:	d104      	bne.n	801075e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801075a:	861a      	strh	r2, [r3, #48]	; 0x30
 801075c:	e002      	b.n	8010764 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2200      	movs	r2, #0
 8010762:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801076e:	2b00      	cmp	r3, #0
 8010770:	d103      	bne.n	801077a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010780:	4b84      	ldr	r3, [pc, #528]	; (8010994 <tcp_receive+0x5d8>)
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	4413      	add	r3, r2
 8010786:	b29a      	uxth	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	8b5b      	ldrh	r3, [r3, #26]
 8010792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010796:	2b00      	cmp	r3, #0
 8010798:	d035      	beq.n	8010806 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d118      	bne.n	80107d4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00c      	beq.n	80107c4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fb f937 	bl	800ba2a <lwip_htonl>
 80107bc:	4603      	mov	r3, r0
 80107be:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	dc20      	bgt.n	8010806 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	8b5b      	ldrh	r3, [r3, #26]
 80107c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107d2:	e018      	b.n	8010806 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7fb f922 	bl	800ba2a <lwip_htonl>
 80107e6:	4603      	mov	r3, r0
 80107e8:	1ae3      	subs	r3, r4, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	dc0b      	bgt.n	8010806 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	8b5b      	ldrh	r3, [r3, #26]
 80107f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80107fc:	e003      	b.n	8010806 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f001 ff76 	bl	80126f0 <tcp_send_empty_ack>
 8010804:	e000      	b.n	8010808 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010806:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080c:	2b00      	cmp	r3, #0
 801080e:	d05b      	beq.n	80108c8 <tcp_receive+0x50c>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010814:	4b60      	ldr	r3, [pc, #384]	; (8010998 <tcp_receive+0x5dc>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	1ad3      	subs	r3, r2, r3
 801081a:	2b00      	cmp	r3, #0
 801081c:	da54      	bge.n	80108c8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801081e:	4b5f      	ldr	r3, [pc, #380]	; (801099c <tcp_receive+0x5e0>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	b29a      	uxth	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010828:	b29b      	uxth	r3, r3
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	b29b      	uxth	r3, r3
 801082e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010832:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801083c:	10db      	asrs	r3, r3, #3
 801083e:	b21b      	sxth	r3, r3
 8010840:	b29b      	uxth	r3, r3
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	b29b      	uxth	r3, r3
 8010846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010850:	b29a      	uxth	r2, r3
 8010852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010856:	4413      	add	r3, r2
 8010858:	b29b      	uxth	r3, r3
 801085a:	b21a      	sxth	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010860:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010864:	2b00      	cmp	r3, #0
 8010866:	da05      	bge.n	8010874 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801086c:	425b      	negs	r3, r3
 801086e:	b29b      	uxth	r3, r3
 8010870:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010874:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801087e:	109b      	asrs	r3, r3, #2
 8010880:	b21b      	sxth	r3, r3
 8010882:	b29b      	uxth	r3, r3
 8010884:	1ad3      	subs	r3, r2, r3
 8010886:	b29b      	uxth	r3, r3
 8010888:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010892:	b29a      	uxth	r2, r3
 8010894:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010898:	4413      	add	r3, r2
 801089a:	b29b      	uxth	r3, r3
 801089c:	b21a      	sxth	r2, r3
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108a8:	10db      	asrs	r3, r3, #3
 80108aa:	b21b      	sxth	r3, r3
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	4413      	add	r3, r2
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	b21a      	sxth	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2200      	movs	r2, #0
 80108c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80108c8:	4b35      	ldr	r3, [pc, #212]	; (80109a0 <tcp_receive+0x5e4>)
 80108ca:	881b      	ldrh	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 84e2 	beq.w	8011296 <tcp_receive+0xeda>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7d1b      	ldrb	r3, [r3, #20]
 80108d6:	2b06      	cmp	r3, #6
 80108d8:	f200 84dd 	bhi.w	8011296 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108e0:	4b30      	ldr	r3, [pc, #192]	; (80109a4 <tcp_receive+0x5e8>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	3b01      	subs	r3, #1
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f2c0 808f 	blt.w	8010a0c <tcp_receive+0x650>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108f2:	4b2b      	ldr	r3, [pc, #172]	; (80109a0 <tcp_receive+0x5e4>)
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	4619      	mov	r1, r3
 80108f8:	4b2a      	ldr	r3, [pc, #168]	; (80109a4 <tcp_receive+0x5e8>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	440b      	add	r3, r1
 80108fe:	1ad3      	subs	r3, r2, r3
 8010900:	3301      	adds	r3, #1
 8010902:	2b00      	cmp	r3, #0
 8010904:	f300 8082 	bgt.w	8010a0c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010908:	4b27      	ldr	r3, [pc, #156]	; (80109a8 <tcp_receive+0x5ec>)
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010912:	4b24      	ldr	r3, [pc, #144]	; (80109a4 <tcp_receive+0x5e8>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801091a:	4b23      	ldr	r3, [pc, #140]	; (80109a8 <tcp_receive+0x5ec>)
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d106      	bne.n	8010930 <tcp_receive+0x574>
 8010922:	4b22      	ldr	r3, [pc, #136]	; (80109ac <tcp_receive+0x5f0>)
 8010924:	f240 5294 	movw	r2, #1428	; 0x594
 8010928:	4921      	ldr	r1, [pc, #132]	; (80109b0 <tcp_receive+0x5f4>)
 801092a:	4822      	ldr	r0, [pc, #136]	; (80109b4 <tcp_receive+0x5f8>)
 801092c:	f005 f8ec 	bl	8015b08 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010936:	4293      	cmp	r3, r2
 8010938:	d906      	bls.n	8010948 <tcp_receive+0x58c>
 801093a:	4b1c      	ldr	r3, [pc, #112]	; (80109ac <tcp_receive+0x5f0>)
 801093c:	f240 5295 	movw	r2, #1429	; 0x595
 8010940:	491d      	ldr	r1, [pc, #116]	; (80109b8 <tcp_receive+0x5fc>)
 8010942:	481c      	ldr	r0, [pc, #112]	; (80109b4 <tcp_receive+0x5f8>)
 8010944:	f005 f8e0 	bl	8015b08 <iprintf>
      off = (u16_t)off32;
 8010948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801094e:	4b16      	ldr	r3, [pc, #88]	; (80109a8 <tcp_receive+0x5ec>)
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	891b      	ldrh	r3, [r3, #8]
 8010954:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010958:	429a      	cmp	r2, r3
 801095a:	d906      	bls.n	801096a <tcp_receive+0x5ae>
 801095c:	4b13      	ldr	r3, [pc, #76]	; (80109ac <tcp_receive+0x5f0>)
 801095e:	f240 5297 	movw	r2, #1431	; 0x597
 8010962:	4916      	ldr	r1, [pc, #88]	; (80109bc <tcp_receive+0x600>)
 8010964:	4813      	ldr	r0, [pc, #76]	; (80109b4 <tcp_receive+0x5f8>)
 8010966:	f005 f8cf 	bl	8015b08 <iprintf>
      inseg.len -= off;
 801096a:	4b0f      	ldr	r3, [pc, #60]	; (80109a8 <tcp_receive+0x5ec>)
 801096c:	891a      	ldrh	r2, [r3, #8]
 801096e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	b29a      	uxth	r2, r3
 8010976:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <tcp_receive+0x5ec>)
 8010978:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801097a:	4b0b      	ldr	r3, [pc, #44]	; (80109a8 <tcp_receive+0x5ec>)
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	891a      	ldrh	r2, [r3, #8]
 8010980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010988:	e02a      	b.n	80109e0 <tcp_receive+0x624>
 801098a:	bf00      	nop
 801098c:	080183bc 	.word	0x080183bc
 8010990:	080183c4 	.word	0x080183c4
 8010994:	200450a0 	.word	0x200450a0
 8010998:	2004509c 	.word	0x2004509c
 801099c:	20045060 	.word	0x20045060
 80109a0:	200450a2 	.word	0x200450a2
 80109a4:	20045098 	.word	0x20045098
 80109a8:	20045078 	.word	0x20045078
 80109ac:	08018054 	.word	0x08018054
 80109b0:	080183cc 	.word	0x080183cc
 80109b4:	080180a0 	.word	0x080180a0
 80109b8:	080183dc 	.word	0x080183dc
 80109bc:	080183ec 	.word	0x080183ec
        off -= p->len;
 80109c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109c2:	895b      	ldrh	r3, [r3, #10]
 80109c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80109ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80109d2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80109d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109d6:	2200      	movs	r2, #0
 80109d8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80109da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80109e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e2:	895b      	ldrh	r3, [r3, #10]
 80109e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d8e9      	bhi.n	80109c0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80109ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109f0:	4619      	mov	r1, r3
 80109f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80109f4:	f7fc fb70 	bl	800d0d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fc:	4a91      	ldr	r2, [pc, #580]	; (8010c44 <tcp_receive+0x888>)
 80109fe:	6013      	str	r3, [r2, #0]
 8010a00:	4b91      	ldr	r3, [pc, #580]	; (8010c48 <tcp_receive+0x88c>)
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	4a8f      	ldr	r2, [pc, #572]	; (8010c44 <tcp_receive+0x888>)
 8010a06:	6812      	ldr	r2, [r2, #0]
 8010a08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a0a:	e00d      	b.n	8010a28 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010a0c:	4b8d      	ldr	r3, [pc, #564]	; (8010c44 <tcp_receive+0x888>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a14:	1ad3      	subs	r3, r2, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	da06      	bge.n	8010a28 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	8b5b      	ldrh	r3, [r3, #26]
 8010a1e:	f043 0302 	orr.w	r3, r3, #2
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a28:	4b86      	ldr	r3, [pc, #536]	; (8010c44 <tcp_receive+0x888>)
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a30:	1ad3      	subs	r3, r2, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f2c0 842a 	blt.w	801128c <tcp_receive+0xed0>
 8010a38:	4b82      	ldr	r3, [pc, #520]	; (8010c44 <tcp_receive+0x888>)
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a40:	6879      	ldr	r1, [r7, #4]
 8010a42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a44:	440b      	add	r3, r1
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	3301      	adds	r3, #1
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f300 841e 	bgt.w	801128c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a54:	4b7b      	ldr	r3, [pc, #492]	; (8010c44 <tcp_receive+0x888>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	f040 829a 	bne.w	8010f92 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010a5e:	4b7a      	ldr	r3, [pc, #488]	; (8010c48 <tcp_receive+0x88c>)
 8010a60:	891c      	ldrh	r4, [r3, #8]
 8010a62:	4b79      	ldr	r3, [pc, #484]	; (8010c48 <tcp_receive+0x88c>)
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	899b      	ldrh	r3, [r3, #12]
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fa ffc8 	bl	800ba00 <lwip_htons>
 8010a70:	4603      	mov	r3, r0
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	f003 0303 	and.w	r3, r3, #3
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d001      	beq.n	8010a80 <tcp_receive+0x6c4>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e000      	b.n	8010a82 <tcp_receive+0x6c6>
 8010a80:	2300      	movs	r3, #0
 8010a82:	4423      	add	r3, r4
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	4b71      	ldr	r3, [pc, #452]	; (8010c4c <tcp_receive+0x890>)
 8010a88:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a8e:	4b6f      	ldr	r3, [pc, #444]	; (8010c4c <tcp_receive+0x890>)
 8010a90:	881b      	ldrh	r3, [r3, #0]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d275      	bcs.n	8010b82 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a96:	4b6c      	ldr	r3, [pc, #432]	; (8010c48 <tcp_receive+0x88c>)
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	899b      	ldrh	r3, [r3, #12]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fa ffae 	bl	800ba00 <lwip_htons>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d01f      	beq.n	8010af0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ab0:	4b65      	ldr	r3, [pc, #404]	; (8010c48 <tcp_receive+0x88c>)
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	899b      	ldrh	r3, [r3, #12]
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	b21b      	sxth	r3, r3
 8010aba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010abe:	b21c      	sxth	r4, r3
 8010ac0:	4b61      	ldr	r3, [pc, #388]	; (8010c48 <tcp_receive+0x88c>)
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	899b      	ldrh	r3, [r3, #12]
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fa ff99 	bl	800ba00 <lwip_htons>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fa ff90 	bl	800ba00 <lwip_htons>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	b21b      	sxth	r3, r3
 8010ae4:	4323      	orrs	r3, r4
 8010ae6:	b21a      	sxth	r2, r3
 8010ae8:	4b57      	ldr	r3, [pc, #348]	; (8010c48 <tcp_receive+0x88c>)
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	b292      	uxth	r2, r2
 8010aee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010af4:	4b54      	ldr	r3, [pc, #336]	; (8010c48 <tcp_receive+0x88c>)
 8010af6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010af8:	4b53      	ldr	r3, [pc, #332]	; (8010c48 <tcp_receive+0x88c>)
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	899b      	ldrh	r3, [r3, #12]
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fa ff7d 	bl	800ba00 <lwip_htons>
 8010b06:	4603      	mov	r3, r0
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	f003 0302 	and.w	r3, r3, #2
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d005      	beq.n	8010b1e <tcp_receive+0x762>
            inseg.len -= 1;
 8010b12:	4b4d      	ldr	r3, [pc, #308]	; (8010c48 <tcp_receive+0x88c>)
 8010b14:	891b      	ldrh	r3, [r3, #8]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	4b4b      	ldr	r3, [pc, #300]	; (8010c48 <tcp_receive+0x88c>)
 8010b1c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010b1e:	4b4a      	ldr	r3, [pc, #296]	; (8010c48 <tcp_receive+0x88c>)
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	4a49      	ldr	r2, [pc, #292]	; (8010c48 <tcp_receive+0x88c>)
 8010b24:	8912      	ldrh	r2, [r2, #8]
 8010b26:	4611      	mov	r1, r2
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fc f9d5 	bl	800ced8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010b2e:	4b46      	ldr	r3, [pc, #280]	; (8010c48 <tcp_receive+0x88c>)
 8010b30:	891c      	ldrh	r4, [r3, #8]
 8010b32:	4b45      	ldr	r3, [pc, #276]	; (8010c48 <tcp_receive+0x88c>)
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	899b      	ldrh	r3, [r3, #12]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fa ff60 	bl	800ba00 <lwip_htons>
 8010b40:	4603      	mov	r3, r0
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	f003 0303 	and.w	r3, r3, #3
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d001      	beq.n	8010b50 <tcp_receive+0x794>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	e000      	b.n	8010b52 <tcp_receive+0x796>
 8010b50:	2300      	movs	r3, #0
 8010b52:	4423      	add	r3, r4
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	4b3d      	ldr	r3, [pc, #244]	; (8010c4c <tcp_receive+0x890>)
 8010b58:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b5a:	4b3c      	ldr	r3, [pc, #240]	; (8010c4c <tcp_receive+0x890>)
 8010b5c:	881b      	ldrh	r3, [r3, #0]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4b38      	ldr	r3, [pc, #224]	; (8010c44 <tcp_receive+0x888>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	441a      	add	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b6a:	6879      	ldr	r1, [r7, #4]
 8010b6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b6e:	440b      	add	r3, r1
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d006      	beq.n	8010b82 <tcp_receive+0x7c6>
 8010b74:	4b36      	ldr	r3, [pc, #216]	; (8010c50 <tcp_receive+0x894>)
 8010b76:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010b7a:	4936      	ldr	r1, [pc, #216]	; (8010c54 <tcp_receive+0x898>)
 8010b7c:	4836      	ldr	r0, [pc, #216]	; (8010c58 <tcp_receive+0x89c>)
 8010b7e:	f004 ffc3 	bl	8015b08 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f000 80e7 	beq.w	8010d5a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b8c:	4b2e      	ldr	r3, [pc, #184]	; (8010c48 <tcp_receive+0x88c>)
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	899b      	ldrh	r3, [r3, #12]
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7fa ff33 	bl	800ba00 <lwip_htons>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	f003 0301 	and.w	r3, r3, #1
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d010      	beq.n	8010bc8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010ba6:	e00a      	b.n	8010bbe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f7fd fd92 	bl	800e6e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1f0      	bne.n	8010ba8 <tcp_receive+0x7ec>
 8010bc6:	e0c8      	b.n	8010d5a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010bce:	e052      	b.n	8010c76 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	899b      	ldrh	r3, [r3, #12]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fa ff11 	bl	800ba00 <lwip_htons>
 8010bde:	4603      	mov	r3, r0
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	f003 0301 	and.w	r3, r3, #1
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d03d      	beq.n	8010c66 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010bea:	4b17      	ldr	r3, [pc, #92]	; (8010c48 <tcp_receive+0x88c>)
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	899b      	ldrh	r3, [r3, #12]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fa ff04 	bl	800ba00 <lwip_htons>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d130      	bne.n	8010c66 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c04:	4b10      	ldr	r3, [pc, #64]	; (8010c48 <tcp_receive+0x88c>)
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	899b      	ldrh	r3, [r3, #12]
 8010c0a:	b29c      	uxth	r4, r3
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	f7fa fef7 	bl	800ba00 <lwip_htons>
 8010c12:	4603      	mov	r3, r0
 8010c14:	461a      	mov	r2, r3
 8010c16:	4b0c      	ldr	r3, [pc, #48]	; (8010c48 <tcp_receive+0x88c>)
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	4322      	orrs	r2, r4
 8010c1c:	b292      	uxth	r2, r2
 8010c1e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010c20:	4b09      	ldr	r3, [pc, #36]	; (8010c48 <tcp_receive+0x88c>)
 8010c22:	891c      	ldrh	r4, [r3, #8]
 8010c24:	4b08      	ldr	r3, [pc, #32]	; (8010c48 <tcp_receive+0x88c>)
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	899b      	ldrh	r3, [r3, #12]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fa fee7 	bl	800ba00 <lwip_htons>
 8010c32:	4603      	mov	r3, r0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	f003 0303 	and.w	r3, r3, #3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00e      	beq.n	8010c5c <tcp_receive+0x8a0>
 8010c3e:	2301      	movs	r3, #1
 8010c40:	e00d      	b.n	8010c5e <tcp_receive+0x8a2>
 8010c42:	bf00      	nop
 8010c44:	20045098 	.word	0x20045098
 8010c48:	20045078 	.word	0x20045078
 8010c4c:	200450a2 	.word	0x200450a2
 8010c50:	08018054 	.word	0x08018054
 8010c54:	080183fc 	.word	0x080183fc
 8010c58:	080180a0 	.word	0x080180a0
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	4423      	add	r3, r4
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	4b98      	ldr	r3, [pc, #608]	; (8010ec4 <tcp_receive+0xb08>)
 8010c64:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c68:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010c70:	6938      	ldr	r0, [r7, #16]
 8010c72:	f7fd fd36 	bl	800e6e2 <tcp_seg_free>
            while (next &&
 8010c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d00e      	beq.n	8010c9a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010c7c:	4b91      	ldr	r3, [pc, #580]	; (8010ec4 <tcp_receive+0xb08>)
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	461a      	mov	r2, r3
 8010c82:	4b91      	ldr	r3, [pc, #580]	; (8010ec8 <tcp_receive+0xb0c>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	441a      	add	r2, r3
 8010c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c90:	8909      	ldrh	r1, [r1, #8]
 8010c92:	440b      	add	r3, r1
 8010c94:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	da9a      	bge.n	8010bd0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d059      	beq.n	8010d54 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010ca0:	4b88      	ldr	r3, [pc, #544]	; (8010ec4 <tcp_receive+0xb08>)
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	461a      	mov	r2, r3
 8010ca6:	4b88      	ldr	r3, [pc, #544]	; (8010ec8 <tcp_receive+0xb0c>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	441a      	add	r2, r3
 8010cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	dd4d      	ble.n	8010d54 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	b29a      	uxth	r2, r3
 8010cc0:	4b81      	ldr	r3, [pc, #516]	; (8010ec8 <tcp_receive+0xb0c>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	1ad3      	subs	r3, r2, r3
 8010cc8:	b29a      	uxth	r2, r3
 8010cca:	4b80      	ldr	r3, [pc, #512]	; (8010ecc <tcp_receive+0xb10>)
 8010ccc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010cce:	4b7f      	ldr	r3, [pc, #508]	; (8010ecc <tcp_receive+0xb10>)
 8010cd0:	68db      	ldr	r3, [r3, #12]
 8010cd2:	899b      	ldrh	r3, [r3, #12]
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fa fe92 	bl	800ba00 <lwip_htons>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	f003 0302 	and.w	r3, r3, #2
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d005      	beq.n	8010cf4 <tcp_receive+0x938>
                inseg.len -= 1;
 8010ce8:	4b78      	ldr	r3, [pc, #480]	; (8010ecc <tcp_receive+0xb10>)
 8010cea:	891b      	ldrh	r3, [r3, #8]
 8010cec:	3b01      	subs	r3, #1
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	4b76      	ldr	r3, [pc, #472]	; (8010ecc <tcp_receive+0xb10>)
 8010cf2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010cf4:	4b75      	ldr	r3, [pc, #468]	; (8010ecc <tcp_receive+0xb10>)
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	4a74      	ldr	r2, [pc, #464]	; (8010ecc <tcp_receive+0xb10>)
 8010cfa:	8912      	ldrh	r2, [r2, #8]
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fc f8ea 	bl	800ced8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d04:	4b71      	ldr	r3, [pc, #452]	; (8010ecc <tcp_receive+0xb10>)
 8010d06:	891c      	ldrh	r4, [r3, #8]
 8010d08:	4b70      	ldr	r3, [pc, #448]	; (8010ecc <tcp_receive+0xb10>)
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	899b      	ldrh	r3, [r3, #12]
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fa fe75 	bl	800ba00 <lwip_htons>
 8010d16:	4603      	mov	r3, r0
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	f003 0303 	and.w	r3, r3, #3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <tcp_receive+0x96a>
 8010d22:	2301      	movs	r3, #1
 8010d24:	e000      	b.n	8010d28 <tcp_receive+0x96c>
 8010d26:	2300      	movs	r3, #0
 8010d28:	4423      	add	r3, r4
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	4b65      	ldr	r3, [pc, #404]	; (8010ec4 <tcp_receive+0xb08>)
 8010d2e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010d30:	4b64      	ldr	r3, [pc, #400]	; (8010ec4 <tcp_receive+0xb08>)
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	461a      	mov	r2, r3
 8010d36:	4b64      	ldr	r3, [pc, #400]	; (8010ec8 <tcp_receive+0xb0c>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	441a      	add	r2, r3
 8010d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d006      	beq.n	8010d54 <tcp_receive+0x998>
 8010d46:	4b62      	ldr	r3, [pc, #392]	; (8010ed0 <tcp_receive+0xb14>)
 8010d48:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010d4c:	4961      	ldr	r1, [pc, #388]	; (8010ed4 <tcp_receive+0xb18>)
 8010d4e:	4862      	ldr	r0, [pc, #392]	; (8010ed8 <tcp_receive+0xb1c>)
 8010d50:	f004 feda 	bl	8015b08 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d58:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010d5a:	4b5a      	ldr	r3, [pc, #360]	; (8010ec4 <tcp_receive+0xb08>)
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	4b59      	ldr	r3, [pc, #356]	; (8010ec8 <tcp_receive+0xb0c>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	441a      	add	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d6e:	4b55      	ldr	r3, [pc, #340]	; (8010ec4 <tcp_receive+0xb08>)
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d206      	bcs.n	8010d84 <tcp_receive+0x9c8>
 8010d76:	4b56      	ldr	r3, [pc, #344]	; (8010ed0 <tcp_receive+0xb14>)
 8010d78:	f240 6207 	movw	r2, #1543	; 0x607
 8010d7c:	4957      	ldr	r1, [pc, #348]	; (8010edc <tcp_receive+0xb20>)
 8010d7e:	4856      	ldr	r0, [pc, #344]	; (8010ed8 <tcp_receive+0xb1c>)
 8010d80:	f004 fec2 	bl	8015b08 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d88:	4b4e      	ldr	r3, [pc, #312]	; (8010ec4 <tcp_receive+0xb08>)
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	1ad3      	subs	r3, r2, r3
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7fc ffc5 	bl	800dd24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010d9a:	4b4c      	ldr	r3, [pc, #304]	; (8010ecc <tcp_receive+0xb10>)
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	891b      	ldrh	r3, [r3, #8]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d006      	beq.n	8010db2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010da4:	4b49      	ldr	r3, [pc, #292]	; (8010ecc <tcp_receive+0xb10>)
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	4a4d      	ldr	r2, [pc, #308]	; (8010ee0 <tcp_receive+0xb24>)
 8010daa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010dac:	4b47      	ldr	r3, [pc, #284]	; (8010ecc <tcp_receive+0xb10>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010db2:	4b46      	ldr	r3, [pc, #280]	; (8010ecc <tcp_receive+0xb10>)
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	899b      	ldrh	r3, [r3, #12]
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fa fe20 	bl	800ba00 <lwip_htons>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f000 80b8 	beq.w	8010f3e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010dce:	4b45      	ldr	r3, [pc, #276]	; (8010ee4 <tcp_receive+0xb28>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	f043 0320 	orr.w	r3, r3, #32
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	4b42      	ldr	r3, [pc, #264]	; (8010ee4 <tcp_receive+0xb28>)
 8010dda:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010ddc:	e0af      	b.n	8010f3e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010de2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	4a36      	ldr	r2, [pc, #216]	; (8010ec8 <tcp_receive+0xb0c>)
 8010dee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	891b      	ldrh	r3, [r3, #8]
 8010df4:	461c      	mov	r4, r3
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	899b      	ldrh	r3, [r3, #12]
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fa fdfe 	bl	800ba00 <lwip_htons>
 8010e04:	4603      	mov	r3, r0
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	f003 0303 	and.w	r3, r3, #3
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <tcp_receive+0xa58>
 8010e10:	2301      	movs	r3, #1
 8010e12:	e000      	b.n	8010e16 <tcp_receive+0xa5a>
 8010e14:	2300      	movs	r3, #0
 8010e16:	191a      	adds	r2, r3, r4
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e1c:	441a      	add	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e26:	461c      	mov	r4, r3
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	891b      	ldrh	r3, [r3, #8]
 8010e2c:	461d      	mov	r5, r3
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	899b      	ldrh	r3, [r3, #12]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7fa fde2 	bl	800ba00 <lwip_htons>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	f003 0303 	and.w	r3, r3, #3
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <tcp_receive+0xa90>
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e000      	b.n	8010e4e <tcp_receive+0xa92>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	442b      	add	r3, r5
 8010e50:	429c      	cmp	r4, r3
 8010e52:	d206      	bcs.n	8010e62 <tcp_receive+0xaa6>
 8010e54:	4b1e      	ldr	r3, [pc, #120]	; (8010ed0 <tcp_receive+0xb14>)
 8010e56:	f240 622b 	movw	r2, #1579	; 0x62b
 8010e5a:	4923      	ldr	r1, [pc, #140]	; (8010ee8 <tcp_receive+0xb2c>)
 8010e5c:	481e      	ldr	r0, [pc, #120]	; (8010ed8 <tcp_receive+0xb1c>)
 8010e5e:	f004 fe53 	bl	8015b08 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	891b      	ldrh	r3, [r3, #8]
 8010e66:	461c      	mov	r4, r3
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	899b      	ldrh	r3, [r3, #12]
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fa fdc5 	bl	800ba00 <lwip_htons>
 8010e76:	4603      	mov	r3, r0
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	f003 0303 	and.w	r3, r3, #3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d001      	beq.n	8010e86 <tcp_receive+0xaca>
 8010e82:	2301      	movs	r3, #1
 8010e84:	e000      	b.n	8010e88 <tcp_receive+0xacc>
 8010e86:	2300      	movs	r3, #0
 8010e88:	1919      	adds	r1, r3, r4
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e8e:	b28b      	uxth	r3, r1
 8010e90:	1ad3      	subs	r3, r2, r3
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7fc ff43 	bl	800dd24 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	891b      	ldrh	r3, [r3, #8]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d028      	beq.n	8010efa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010ea8:	4b0d      	ldr	r3, [pc, #52]	; (8010ee0 <tcp_receive+0xb24>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d01d      	beq.n	8010eec <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010eb0:	4b0b      	ldr	r3, [pc, #44]	; (8010ee0 <tcp_receive+0xb24>)
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4610      	mov	r0, r2
 8010ebc:	f7fc fa60 	bl	800d380 <pbuf_cat>
 8010ec0:	e018      	b.n	8010ef4 <tcp_receive+0xb38>
 8010ec2:	bf00      	nop
 8010ec4:	200450a2 	.word	0x200450a2
 8010ec8:	20045098 	.word	0x20045098
 8010ecc:	20045078 	.word	0x20045078
 8010ed0:	08018054 	.word	0x08018054
 8010ed4:	08018434 	.word	0x08018434
 8010ed8:	080180a0 	.word	0x080180a0
 8010edc:	08018470 	.word	0x08018470
 8010ee0:	200450a8 	.word	0x200450a8
 8010ee4:	200450a5 	.word	0x200450a5
 8010ee8:	08018490 	.word	0x08018490
            } else {
              recv_data = cseg->p;
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	4a70      	ldr	r2, [pc, #448]	; (80110b4 <tcp_receive+0xcf8>)
 8010ef2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	899b      	ldrh	r3, [r3, #12]
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7fa fd7c 	bl	800ba00 <lwip_htons>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	f003 0301 	and.w	r3, r3, #1
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00d      	beq.n	8010f30 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010f14:	4b68      	ldr	r3, [pc, #416]	; (80110b8 <tcp_receive+0xcfc>)
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	f043 0320 	orr.w	r3, r3, #32
 8010f1c:	b2da      	uxtb	r2, r3
 8010f1e:	4b66      	ldr	r3, [pc, #408]	; (80110b8 <tcp_receive+0xcfc>)
 8010f20:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	7d1b      	ldrb	r3, [r3, #20]
 8010f26:	2b04      	cmp	r3, #4
 8010f28:	d102      	bne.n	8010f30 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2207      	movs	r2, #7
 8010f2e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010f38:	68b8      	ldr	r0, [r7, #8]
 8010f3a:	f7fd fbd2 	bl	800e6e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d008      	beq.n	8010f58 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	685a      	ldr	r2, [r3, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010f52:	429a      	cmp	r2, r3
 8010f54:	f43f af43 	beq.w	8010dde <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8b5b      	ldrh	r3, [r3, #26]
 8010f5c:	f003 0301 	and.w	r3, r3, #1
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00e      	beq.n	8010f82 <tcp_receive+0xbc6>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8b5b      	ldrh	r3, [r3, #26]
 8010f68:	f023 0301 	bic.w	r3, r3, #1
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	835a      	strh	r2, [r3, #26]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	8b5b      	ldrh	r3, [r3, #26]
 8010f76:	f043 0302 	orr.w	r3, r3, #2
 8010f7a:	b29a      	uxth	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f80:	e188      	b.n	8011294 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	8b5b      	ldrh	r3, [r3, #26]
 8010f86:	f043 0301 	orr.w	r3, r3, #1
 8010f8a:	b29a      	uxth	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f90:	e180      	b.n	8011294 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d106      	bne.n	8010fa8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010f9a:	4848      	ldr	r0, [pc, #288]	; (80110bc <tcp_receive+0xd00>)
 8010f9c:	f7fd fbba 	bl	800e714 <tcp_seg_copy>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	675a      	str	r2, [r3, #116]	; 0x74
 8010fa6:	e16d      	b.n	8011284 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fb2:	e157      	b.n	8011264 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	4b41      	ldr	r3, [pc, #260]	; (80110c0 <tcp_receive+0xd04>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d11d      	bne.n	8010ffe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010fc2:	4b3e      	ldr	r3, [pc, #248]	; (80110bc <tcp_receive+0xd00>)
 8010fc4:	891a      	ldrh	r2, [r3, #8]
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	891b      	ldrh	r3, [r3, #8]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	f240 814f 	bls.w	801126e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010fd0:	483a      	ldr	r0, [pc, #232]	; (80110bc <tcp_receive+0xd00>)
 8010fd2:	f7fd fb9f 	bl	800e714 <tcp_seg_copy>
 8010fd6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 8149 	beq.w	8011272 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d003      	beq.n	8010fee <tcp_receive+0xc32>
                    prev->next = cseg;
 8010fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe8:	697a      	ldr	r2, [r7, #20]
 8010fea:	601a      	str	r2, [r3, #0]
 8010fec:	e002      	b.n	8010ff4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	697a      	ldr	r2, [r7, #20]
 8010ff2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ff6:	6978      	ldr	r0, [r7, #20]
 8010ff8:	f7ff f8dc 	bl	80101b4 <tcp_oos_insert_segment>
                }
                break;
 8010ffc:	e139      	b.n	8011272 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011000:	2b00      	cmp	r3, #0
 8011002:	d117      	bne.n	8011034 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011004:	4b2e      	ldr	r3, [pc, #184]	; (80110c0 <tcp_receive+0xd04>)
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	2b00      	cmp	r3, #0
 8011012:	da57      	bge.n	80110c4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011014:	4829      	ldr	r0, [pc, #164]	; (80110bc <tcp_receive+0xd00>)
 8011016:	f7fd fb7d 	bl	800e714 <tcp_seg_copy>
 801101a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801101c:	69bb      	ldr	r3, [r7, #24]
 801101e:	2b00      	cmp	r3, #0
 8011020:	f000 8129 	beq.w	8011276 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	69ba      	ldr	r2, [r7, #24]
 8011028:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801102a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801102c:	69b8      	ldr	r0, [r7, #24]
 801102e:	f7ff f8c1 	bl	80101b4 <tcp_oos_insert_segment>
                  }
                  break;
 8011032:	e120      	b.n	8011276 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011034:	4b22      	ldr	r3, [pc, #136]	; (80110c0 <tcp_receive+0xd04>)
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	3b01      	subs	r3, #1
 8011042:	2b00      	cmp	r3, #0
 8011044:	db3e      	blt.n	80110c4 <tcp_receive+0xd08>
 8011046:	4b1e      	ldr	r3, [pc, #120]	; (80110c0 <tcp_receive+0xd04>)
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	3301      	adds	r3, #1
 8011054:	2b00      	cmp	r3, #0
 8011056:	dc35      	bgt.n	80110c4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011058:	4818      	ldr	r0, [pc, #96]	; (80110bc <tcp_receive+0xd00>)
 801105a:	f7fd fb5b 	bl	800e714 <tcp_seg_copy>
 801105e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 8109 	beq.w	801127a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011070:	8912      	ldrh	r2, [r2, #8]
 8011072:	441a      	add	r2, r3
 8011074:	4b12      	ldr	r3, [pc, #72]	; (80110c0 <tcp_receive+0xd04>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	1ad3      	subs	r3, r2, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	dd12      	ble.n	80110a4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801107e:	4b10      	ldr	r3, [pc, #64]	; (80110c0 <tcp_receive+0xd04>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	b29a      	uxth	r2, r3
 8011084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	b29b      	uxth	r3, r3
 801108c:	1ad3      	subs	r3, r2, r3
 801108e:	b29a      	uxth	r2, r3
 8011090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011092:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011096:	685a      	ldr	r2, [r3, #4]
 8011098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109a:	891b      	ldrh	r3, [r3, #8]
 801109c:	4619      	mov	r1, r3
 801109e:	4610      	mov	r0, r2
 80110a0:	f7fb ff1a 	bl	800ced8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	69fa      	ldr	r2, [r7, #28]
 80110a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80110aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110ac:	69f8      	ldr	r0, [r7, #28]
 80110ae:	f7ff f881 	bl	80101b4 <tcp_oos_insert_segment>
                  }
                  break;
 80110b2:	e0e2      	b.n	801127a <tcp_receive+0xebe>
 80110b4:	200450a8 	.word	0x200450a8
 80110b8:	200450a5 	.word	0x200450a5
 80110bc:	20045078 	.word	0x20045078
 80110c0:	20045098 	.word	0x20045098
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80110c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80110c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	f040 80c6 	bne.w	801125e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80110d2:	4b80      	ldr	r3, [pc, #512]	; (80112d4 <tcp_receive+0xf18>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f340 80bd 	ble.w	801125e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	899b      	ldrh	r3, [r3, #12]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fa fc87 	bl	800ba00 <lwip_htons>
 80110f2:	4603      	mov	r3, r0
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f040 80bf 	bne.w	801127e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011100:	4875      	ldr	r0, [pc, #468]	; (80112d8 <tcp_receive+0xf1c>)
 8011102:	f7fd fb07 	bl	800e714 <tcp_seg_copy>
 8011106:	4602      	mov	r2, r0
 8011108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 80b6 	beq.w	8011282 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801111e:	8912      	ldrh	r2, [r2, #8]
 8011120:	441a      	add	r2, r3
 8011122:	4b6c      	ldr	r3, [pc, #432]	; (80112d4 <tcp_receive+0xf18>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	2b00      	cmp	r3, #0
 801112a:	dd12      	ble.n	8011152 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801112c:	4b69      	ldr	r3, [pc, #420]	; (80112d4 <tcp_receive+0xf18>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	b29a      	uxth	r2, r3
 8011132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	b29b      	uxth	r3, r3
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	b29a      	uxth	r2, r3
 801113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011140:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011144:	685a      	ldr	r2, [r3, #4]
 8011146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011148:	891b      	ldrh	r3, [r3, #8]
 801114a:	4619      	mov	r1, r3
 801114c:	4610      	mov	r0, r2
 801114e:	f7fb fec3 	bl	800ced8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011152:	4b62      	ldr	r3, [pc, #392]	; (80112dc <tcp_receive+0xf20>)
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	461a      	mov	r2, r3
 8011158:	4b5e      	ldr	r3, [pc, #376]	; (80112d4 <tcp_receive+0xf18>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	441a      	add	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011162:	6879      	ldr	r1, [r7, #4]
 8011164:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011166:	440b      	add	r3, r1
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	2b00      	cmp	r3, #0
 801116c:	f340 8089 	ble.w	8011282 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	899b      	ldrh	r3, [r3, #12]
 8011178:	b29b      	uxth	r3, r3
 801117a:	4618      	mov	r0, r3
 801117c:	f7fa fc40 	bl	800ba00 <lwip_htons>
 8011180:	4603      	mov	r3, r0
 8011182:	b2db      	uxtb	r3, r3
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	2b00      	cmp	r3, #0
 801118a:	d022      	beq.n	80111d2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	899b      	ldrh	r3, [r3, #12]
 8011194:	b29b      	uxth	r3, r3
 8011196:	b21b      	sxth	r3, r3
 8011198:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801119c:	b21c      	sxth	r4, r3
 801119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	899b      	ldrh	r3, [r3, #12]
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fa fc29 	bl	800ba00 <lwip_htons>
 80111ae:	4603      	mov	r3, r0
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7fa fc20 	bl	800ba00 <lwip_htons>
 80111c0:	4603      	mov	r3, r0
 80111c2:	b21b      	sxth	r3, r3
 80111c4:	4323      	orrs	r3, r4
 80111c6:	b21a      	sxth	r2, r3
 80111c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	b292      	uxth	r2, r2
 80111d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111dc:	4413      	add	r3, r2
 80111de:	b299      	uxth	r1, r3
 80111e0:	4b3c      	ldr	r3, [pc, #240]	; (80112d4 <tcp_receive+0xf18>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	1a8a      	subs	r2, r1, r2
 80111ec:	b292      	uxth	r2, r2
 80111ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80111f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	685a      	ldr	r2, [r3, #4]
 80111f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	891b      	ldrh	r3, [r3, #8]
 80111fc:	4619      	mov	r1, r3
 80111fe:	4610      	mov	r0, r2
 8011200:	f7fb fe6a 	bl	800ced8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	891c      	ldrh	r4, [r3, #8]
 801120a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	b29b      	uxth	r3, r3
 8011214:	4618      	mov	r0, r3
 8011216:	f7fa fbf3 	bl	800ba00 <lwip_htons>
 801121a:	4603      	mov	r3, r0
 801121c:	b2db      	uxtb	r3, r3
 801121e:	f003 0303 	and.w	r3, r3, #3
 8011222:	2b00      	cmp	r3, #0
 8011224:	d001      	beq.n	801122a <tcp_receive+0xe6e>
 8011226:	2301      	movs	r3, #1
 8011228:	e000      	b.n	801122c <tcp_receive+0xe70>
 801122a:	2300      	movs	r3, #0
 801122c:	4423      	add	r3, r4
 801122e:	b29a      	uxth	r2, r3
 8011230:	4b2a      	ldr	r3, [pc, #168]	; (80112dc <tcp_receive+0xf20>)
 8011232:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011234:	4b29      	ldr	r3, [pc, #164]	; (80112dc <tcp_receive+0xf20>)
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	461a      	mov	r2, r3
 801123a:	4b26      	ldr	r3, [pc, #152]	; (80112d4 <tcp_receive+0xf18>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	441a      	add	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011244:	6879      	ldr	r1, [r7, #4]
 8011246:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011248:	440b      	add	r3, r1
 801124a:	429a      	cmp	r2, r3
 801124c:	d019      	beq.n	8011282 <tcp_receive+0xec6>
 801124e:	4b24      	ldr	r3, [pc, #144]	; (80112e0 <tcp_receive+0xf24>)
 8011250:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011254:	4923      	ldr	r1, [pc, #140]	; (80112e4 <tcp_receive+0xf28>)
 8011256:	4824      	ldr	r0, [pc, #144]	; (80112e8 <tcp_receive+0xf2c>)
 8011258:	f004 fc56 	bl	8015b08 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801125c:	e011      	b.n	8011282 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	63bb      	str	r3, [r7, #56]	; 0x38
 8011264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011266:	2b00      	cmp	r3, #0
 8011268:	f47f aea4 	bne.w	8010fb4 <tcp_receive+0xbf8>
 801126c:	e00a      	b.n	8011284 <tcp_receive+0xec8>
                break;
 801126e:	bf00      	nop
 8011270:	e008      	b.n	8011284 <tcp_receive+0xec8>
                break;
 8011272:	bf00      	nop
 8011274:	e006      	b.n	8011284 <tcp_receive+0xec8>
                  break;
 8011276:	bf00      	nop
 8011278:	e004      	b.n	8011284 <tcp_receive+0xec8>
                  break;
 801127a:	bf00      	nop
 801127c:	e002      	b.n	8011284 <tcp_receive+0xec8>
                  break;
 801127e:	bf00      	nop
 8011280:	e000      	b.n	8011284 <tcp_receive+0xec8>
                break;
 8011282:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f001 fa33 	bl	80126f0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801128a:	e003      	b.n	8011294 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f001 fa2f 	bl	80126f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011292:	e01a      	b.n	80112ca <tcp_receive+0xf0e>
 8011294:	e019      	b.n	80112ca <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011296:	4b0f      	ldr	r3, [pc, #60]	; (80112d4 <tcp_receive+0xf18>)
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801129e:	1ad3      	subs	r3, r2, r3
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	db0a      	blt.n	80112ba <tcp_receive+0xefe>
 80112a4:	4b0b      	ldr	r3, [pc, #44]	; (80112d4 <tcp_receive+0xf18>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112ac:	6879      	ldr	r1, [r7, #4]
 80112ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112b0:	440b      	add	r3, r1
 80112b2:	1ad3      	subs	r3, r2, r3
 80112b4:	3301      	adds	r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	dd07      	ble.n	80112ca <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	8b5b      	ldrh	r3, [r3, #26]
 80112be:	f043 0302 	orr.w	r3, r3, #2
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80112c8:	e7ff      	b.n	80112ca <tcp_receive+0xf0e>
 80112ca:	bf00      	nop
 80112cc:	3750      	adds	r7, #80	; 0x50
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bdb0      	pop	{r4, r5, r7, pc}
 80112d2:	bf00      	nop
 80112d4:	20045098 	.word	0x20045098
 80112d8:	20045078 	.word	0x20045078
 80112dc:	200450a2 	.word	0x200450a2
 80112e0:	08018054 	.word	0x08018054
 80112e4:	080183fc 	.word	0x080183fc
 80112e8:	080180a0 	.word	0x080180a0

080112ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80112f2:	4b15      	ldr	r3, [pc, #84]	; (8011348 <tcp_get_next_optbyte+0x5c>)
 80112f4:	881b      	ldrh	r3, [r3, #0]
 80112f6:	1c5a      	adds	r2, r3, #1
 80112f8:	b291      	uxth	r1, r2
 80112fa:	4a13      	ldr	r2, [pc, #76]	; (8011348 <tcp_get_next_optbyte+0x5c>)
 80112fc:	8011      	strh	r1, [r2, #0]
 80112fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <tcp_get_next_optbyte+0x60>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d004      	beq.n	8011312 <tcp_get_next_optbyte+0x26>
 8011308:	4b11      	ldr	r3, [pc, #68]	; (8011350 <tcp_get_next_optbyte+0x64>)
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	88fa      	ldrh	r2, [r7, #6]
 801130e:	429a      	cmp	r2, r3
 8011310:	d208      	bcs.n	8011324 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011312:	4b10      	ldr	r3, [pc, #64]	; (8011354 <tcp_get_next_optbyte+0x68>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	3314      	adds	r3, #20
 8011318:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801131a:	88fb      	ldrh	r3, [r7, #6]
 801131c:	683a      	ldr	r2, [r7, #0]
 801131e:	4413      	add	r3, r2
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	e00b      	b.n	801133c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011324:	88fb      	ldrh	r3, [r7, #6]
 8011326:	b2da      	uxtb	r2, r3
 8011328:	4b09      	ldr	r3, [pc, #36]	; (8011350 <tcp_get_next_optbyte+0x64>)
 801132a:	881b      	ldrh	r3, [r3, #0]
 801132c:	b2db      	uxtb	r3, r3
 801132e:	1ad3      	subs	r3, r2, r3
 8011330:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011332:	4b06      	ldr	r3, [pc, #24]	; (801134c <tcp_get_next_optbyte+0x60>)
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	797b      	ldrb	r3, [r7, #5]
 8011338:	4413      	add	r3, r2
 801133a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801133c:	4618      	mov	r0, r3
 801133e:	370c      	adds	r7, #12
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr
 8011348:	20045094 	.word	0x20045094
 801134c:	20045090 	.word	0x20045090
 8011350:	2004508e 	.word	0x2004508e
 8011354:	20045088 	.word	0x20045088

08011358 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <tcp_parseopt+0x1c>
 8011366:	4b32      	ldr	r3, [pc, #200]	; (8011430 <tcp_parseopt+0xd8>)
 8011368:	f240 727d 	movw	r2, #1917	; 0x77d
 801136c:	4931      	ldr	r1, [pc, #196]	; (8011434 <tcp_parseopt+0xdc>)
 801136e:	4832      	ldr	r0, [pc, #200]	; (8011438 <tcp_parseopt+0xe0>)
 8011370:	f004 fbca 	bl	8015b08 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011374:	4b31      	ldr	r3, [pc, #196]	; (801143c <tcp_parseopt+0xe4>)
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d055      	beq.n	8011428 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801137c:	4b30      	ldr	r3, [pc, #192]	; (8011440 <tcp_parseopt+0xe8>)
 801137e:	2200      	movs	r2, #0
 8011380:	801a      	strh	r2, [r3, #0]
 8011382:	e045      	b.n	8011410 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011384:	f7ff ffb2 	bl	80112ec <tcp_get_next_optbyte>
 8011388:	4603      	mov	r3, r0
 801138a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	2b02      	cmp	r3, #2
 8011390:	d006      	beq.n	80113a0 <tcp_parseopt+0x48>
 8011392:	2b02      	cmp	r3, #2
 8011394:	dc2b      	bgt.n	80113ee <tcp_parseopt+0x96>
 8011396:	2b00      	cmp	r3, #0
 8011398:	d041      	beq.n	801141e <tcp_parseopt+0xc6>
 801139a:	2b01      	cmp	r3, #1
 801139c:	d127      	bne.n	80113ee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801139e:	e037      	b.n	8011410 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80113a0:	f7ff ffa4 	bl	80112ec <tcp_get_next_optbyte>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b04      	cmp	r3, #4
 80113a8:	d13b      	bne.n	8011422 <tcp_parseopt+0xca>
 80113aa:	4b25      	ldr	r3, [pc, #148]	; (8011440 <tcp_parseopt+0xe8>)
 80113ac:	881b      	ldrh	r3, [r3, #0]
 80113ae:	3301      	adds	r3, #1
 80113b0:	4a22      	ldr	r2, [pc, #136]	; (801143c <tcp_parseopt+0xe4>)
 80113b2:	8812      	ldrh	r2, [r2, #0]
 80113b4:	4293      	cmp	r3, r2
 80113b6:	da34      	bge.n	8011422 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80113b8:	f7ff ff98 	bl	80112ec <tcp_get_next_optbyte>
 80113bc:	4603      	mov	r3, r0
 80113be:	b29b      	uxth	r3, r3
 80113c0:	021b      	lsls	r3, r3, #8
 80113c2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80113c4:	f7ff ff92 	bl	80112ec <tcp_get_next_optbyte>
 80113c8:	4603      	mov	r3, r0
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	89bb      	ldrh	r3, [r7, #12]
 80113ce:	4313      	orrs	r3, r2
 80113d0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80113d2:	89bb      	ldrh	r3, [r7, #12]
 80113d4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80113d8:	d804      	bhi.n	80113e4 <tcp_parseopt+0x8c>
 80113da:	89bb      	ldrh	r3, [r7, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d001      	beq.n	80113e4 <tcp_parseopt+0x8c>
 80113e0:	89ba      	ldrh	r2, [r7, #12]
 80113e2:	e001      	b.n	80113e8 <tcp_parseopt+0x90>
 80113e4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80113ec:	e010      	b.n	8011410 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80113ee:	f7ff ff7d 	bl	80112ec <tcp_get_next_optbyte>
 80113f2:	4603      	mov	r3, r0
 80113f4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80113f6:	7afb      	ldrb	r3, [r7, #11]
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d914      	bls.n	8011426 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80113fc:	7afb      	ldrb	r3, [r7, #11]
 80113fe:	b29a      	uxth	r2, r3
 8011400:	4b0f      	ldr	r3, [pc, #60]	; (8011440 <tcp_parseopt+0xe8>)
 8011402:	881b      	ldrh	r3, [r3, #0]
 8011404:	4413      	add	r3, r2
 8011406:	b29b      	uxth	r3, r3
 8011408:	3b02      	subs	r3, #2
 801140a:	b29a      	uxth	r2, r3
 801140c:	4b0c      	ldr	r3, [pc, #48]	; (8011440 <tcp_parseopt+0xe8>)
 801140e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011410:	4b0b      	ldr	r3, [pc, #44]	; (8011440 <tcp_parseopt+0xe8>)
 8011412:	881a      	ldrh	r2, [r3, #0]
 8011414:	4b09      	ldr	r3, [pc, #36]	; (801143c <tcp_parseopt+0xe4>)
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	429a      	cmp	r2, r3
 801141a:	d3b3      	bcc.n	8011384 <tcp_parseopt+0x2c>
 801141c:	e004      	b.n	8011428 <tcp_parseopt+0xd0>
          return;
 801141e:	bf00      	nop
 8011420:	e002      	b.n	8011428 <tcp_parseopt+0xd0>
            return;
 8011422:	bf00      	nop
 8011424:	e000      	b.n	8011428 <tcp_parseopt+0xd0>
            return;
 8011426:	bf00      	nop
      }
    }
  }
}
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	08018054 	.word	0x08018054
 8011434:	080184b8 	.word	0x080184b8
 8011438:	080180a0 	.word	0x080180a0
 801143c:	2004508c 	.word	0x2004508c
 8011440:	20045094 	.word	0x20045094

08011444 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011444:	b480      	push	{r7}
 8011446:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011448:	4b05      	ldr	r3, [pc, #20]	; (8011460 <tcp_trigger_input_pcb_close+0x1c>)
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	f043 0310 	orr.w	r3, r3, #16
 8011450:	b2da      	uxtb	r2, r3
 8011452:	4b03      	ldr	r3, [pc, #12]	; (8011460 <tcp_trigger_input_pcb_close+0x1c>)
 8011454:	701a      	strb	r2, [r3, #0]
}
 8011456:	bf00      	nop
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	200450a5 	.word	0x200450a5

08011464 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00a      	beq.n	801148c <tcp_route+0x28>
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	7a1b      	ldrb	r3, [r3, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d006      	beq.n	801148c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	7a1b      	ldrb	r3, [r3, #8]
 8011482:	4618      	mov	r0, r3
 8011484:	f7fb fb20 	bl	800cac8 <netif_get_by_index>
 8011488:	4603      	mov	r3, r0
 801148a:	e003      	b.n	8011494 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f002 fead 	bl	80141ec <ip4_route>
 8011492:	4603      	mov	r3, r0
  }
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801149c:	b590      	push	{r4, r7, lr}
 801149e:	b087      	sub	sp, #28
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	4613      	mov	r3, r2
 80114aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d105      	bne.n	80114be <tcp_create_segment+0x22>
 80114b2:	4b44      	ldr	r3, [pc, #272]	; (80115c4 <tcp_create_segment+0x128>)
 80114b4:	22a3      	movs	r2, #163	; 0xa3
 80114b6:	4944      	ldr	r1, [pc, #272]	; (80115c8 <tcp_create_segment+0x12c>)
 80114b8:	4844      	ldr	r0, [pc, #272]	; (80115cc <tcp_create_segment+0x130>)
 80114ba:	f004 fb25 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d105      	bne.n	80114d0 <tcp_create_segment+0x34>
 80114c4:	4b3f      	ldr	r3, [pc, #252]	; (80115c4 <tcp_create_segment+0x128>)
 80114c6:	22a4      	movs	r2, #164	; 0xa4
 80114c8:	4941      	ldr	r1, [pc, #260]	; (80115d0 <tcp_create_segment+0x134>)
 80114ca:	4840      	ldr	r0, [pc, #256]	; (80115cc <tcp_create_segment+0x130>)
 80114cc:	f004 fb1c 	bl	8015b08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80114d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80114de:	2003      	movs	r0, #3
 80114e0:	f7fa ff66 	bl	800c3b0 <memp_malloc>
 80114e4:	6138      	str	r0, [r7, #16]
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d104      	bne.n	80114f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80114ec:	68b8      	ldr	r0, [r7, #8]
 80114ee:	f7fb fe79 	bl	800d1e4 <pbuf_free>
    return NULL;
 80114f2:	2300      	movs	r3, #0
 80114f4:	e061      	b.n	80115ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80114fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	891a      	ldrh	r2, [r3, #8]
 801150e:	7dfb      	ldrb	r3, [r7, #23]
 8011510:	b29b      	uxth	r3, r3
 8011512:	429a      	cmp	r2, r3
 8011514:	d205      	bcs.n	8011522 <tcp_create_segment+0x86>
 8011516:	4b2b      	ldr	r3, [pc, #172]	; (80115c4 <tcp_create_segment+0x128>)
 8011518:	22b0      	movs	r2, #176	; 0xb0
 801151a:	492e      	ldr	r1, [pc, #184]	; (80115d4 <tcp_create_segment+0x138>)
 801151c:	482b      	ldr	r0, [pc, #172]	; (80115cc <tcp_create_segment+0x130>)
 801151e:	f004 faf3 	bl	8015b08 <iprintf>
  seg->len = p->tot_len - optlen;
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	891a      	ldrh	r2, [r3, #8]
 8011526:	7dfb      	ldrb	r3, [r7, #23]
 8011528:	b29b      	uxth	r3, r3
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	b29a      	uxth	r2, r3
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011532:	2114      	movs	r1, #20
 8011534:	68b8      	ldr	r0, [r7, #8]
 8011536:	f7fb fdbf 	bl	800d0b8 <pbuf_add_header>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d004      	beq.n	801154a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011540:	6938      	ldr	r0, [r7, #16]
 8011542:	f7fd f8ce 	bl	800e6e2 <tcp_seg_free>
    return NULL;
 8011546:	2300      	movs	r3, #0
 8011548:	e037      	b.n	80115ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	685a      	ldr	r2, [r3, #4]
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	8ada      	ldrh	r2, [r3, #22]
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	68dc      	ldr	r4, [r3, #12]
 801155c:	4610      	mov	r0, r2
 801155e:	f7fa fa4f 	bl	800ba00 <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	8b1a      	ldrh	r2, [r3, #24]
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	68dc      	ldr	r4, [r3, #12]
 801156e:	4610      	mov	r0, r2
 8011570:	f7fa fa46 	bl	800ba00 <lwip_htons>
 8011574:	4603      	mov	r3, r0
 8011576:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	68dc      	ldr	r4, [r3, #12]
 801157c:	6838      	ldr	r0, [r7, #0]
 801157e:	f7fa fa54 	bl	800ba2a <lwip_htonl>
 8011582:	4603      	mov	r3, r0
 8011584:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	089b      	lsrs	r3, r3, #2
 801158a:	b2db      	uxtb	r3, r3
 801158c:	b29b      	uxth	r3, r3
 801158e:	3305      	adds	r3, #5
 8011590:	b29b      	uxth	r3, r3
 8011592:	031b      	lsls	r3, r3, #12
 8011594:	b29a      	uxth	r2, r3
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	b29b      	uxth	r3, r3
 801159a:	4313      	orrs	r3, r2
 801159c:	b29a      	uxth	r2, r3
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	68dc      	ldr	r4, [r3, #12]
 80115a2:	4610      	mov	r0, r2
 80115a4:	f7fa fa2c 	bl	800ba00 <lwip_htons>
 80115a8:	4603      	mov	r3, r0
 80115aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	2200      	movs	r2, #0
 80115b2:	749a      	strb	r2, [r3, #18]
 80115b4:	2200      	movs	r2, #0
 80115b6:	74da      	strb	r2, [r3, #19]
  return seg;
 80115b8:	693b      	ldr	r3, [r7, #16]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	371c      	adds	r7, #28
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd90      	pop	{r4, r7, pc}
 80115c2:	bf00      	nop
 80115c4:	080184d4 	.word	0x080184d4
 80115c8:	08018508 	.word	0x08018508
 80115cc:	08018528 	.word	0x08018528
 80115d0:	08018550 	.word	0x08018550
 80115d4:	08018574 	.word	0x08018574

080115d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80115d8:	b590      	push	{r4, r7, lr}
 80115da:	b08b      	sub	sp, #44	; 0x2c
 80115dc:	af02      	add	r7, sp, #8
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	460b      	mov	r3, r1
 80115e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80115e4:	2300      	movs	r3, #0
 80115e6:	61fb      	str	r3, [r7, #28]
 80115e8:	2300      	movs	r3, #0
 80115ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80115ec:	2300      	movs	r3, #0
 80115ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d106      	bne.n	8011604 <tcp_split_unsent_seg+0x2c>
 80115f6:	4b95      	ldr	r3, [pc, #596]	; (801184c <tcp_split_unsent_seg+0x274>)
 80115f8:	f240 324b 	movw	r2, #843	; 0x34b
 80115fc:	4994      	ldr	r1, [pc, #592]	; (8011850 <tcp_split_unsent_seg+0x278>)
 80115fe:	4895      	ldr	r0, [pc, #596]	; (8011854 <tcp_split_unsent_seg+0x27c>)
 8011600:	f004 fa82 	bl	8015b08 <iprintf>

  useg = pcb->unsent;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011608:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d102      	bne.n	8011616 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011610:	f04f 33ff 	mov.w	r3, #4294967295
 8011614:	e116      	b.n	8011844 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011616:	887b      	ldrh	r3, [r7, #2]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801161c:	4b8b      	ldr	r3, [pc, #556]	; (801184c <tcp_split_unsent_seg+0x274>)
 801161e:	f240 3253 	movw	r2, #851	; 0x353
 8011622:	498d      	ldr	r1, [pc, #564]	; (8011858 <tcp_split_unsent_seg+0x280>)
 8011624:	488b      	ldr	r0, [pc, #556]	; (8011854 <tcp_split_unsent_seg+0x27c>)
 8011626:	f004 fa6f 	bl	8015b08 <iprintf>
    return ERR_VAL;
 801162a:	f06f 0305 	mvn.w	r3, #5
 801162e:	e109      	b.n	8011844 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	891b      	ldrh	r3, [r3, #8]
 8011634:	887a      	ldrh	r2, [r7, #2]
 8011636:	429a      	cmp	r2, r3
 8011638:	d301      	bcc.n	801163e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	e102      	b.n	8011844 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011642:	887a      	ldrh	r2, [r7, #2]
 8011644:	429a      	cmp	r2, r3
 8011646:	d906      	bls.n	8011656 <tcp_split_unsent_seg+0x7e>
 8011648:	4b80      	ldr	r3, [pc, #512]	; (801184c <tcp_split_unsent_seg+0x274>)
 801164a:	f240 325b 	movw	r2, #859	; 0x35b
 801164e:	4983      	ldr	r1, [pc, #524]	; (801185c <tcp_split_unsent_seg+0x284>)
 8011650:	4880      	ldr	r0, [pc, #512]	; (8011854 <tcp_split_unsent_seg+0x27c>)
 8011652:	f004 fa59 	bl	8015b08 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	891b      	ldrh	r3, [r3, #8]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d106      	bne.n	801166c <tcp_split_unsent_seg+0x94>
 801165e:	4b7b      	ldr	r3, [pc, #492]	; (801184c <tcp_split_unsent_seg+0x274>)
 8011660:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011664:	497e      	ldr	r1, [pc, #504]	; (8011860 <tcp_split_unsent_seg+0x288>)
 8011666:	487b      	ldr	r0, [pc, #492]	; (8011854 <tcp_split_unsent_seg+0x27c>)
 8011668:	f004 fa4e 	bl	8015b08 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	7a9b      	ldrb	r3, [r3, #10]
 8011670:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011672:	7bfb      	ldrb	r3, [r7, #15]
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	b2db      	uxtb	r3, r3
 8011678:	f003 0304 	and.w	r3, r3, #4
 801167c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	891a      	ldrh	r2, [r3, #8]
 8011682:	887b      	ldrh	r3, [r7, #2]
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011688:	7bbb      	ldrb	r3, [r7, #14]
 801168a:	b29a      	uxth	r2, r3
 801168c:	89bb      	ldrh	r3, [r7, #12]
 801168e:	4413      	add	r3, r2
 8011690:	b29b      	uxth	r3, r3
 8011692:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011696:	4619      	mov	r1, r3
 8011698:	2036      	movs	r0, #54	; 0x36
 801169a:	f7fb fabf 	bl	800cc1c <pbuf_alloc>
 801169e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 80b7 	beq.w	8011816 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	891a      	ldrh	r2, [r3, #8]
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	1ad3      	subs	r3, r2, r3
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	887b      	ldrh	r3, [r7, #2]
 80116b8:	4413      	add	r3, r2
 80116ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	6858      	ldr	r0, [r3, #4]
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	7bbb      	ldrb	r3, [r7, #14]
 80116c6:	18d1      	adds	r1, r2, r3
 80116c8:	897b      	ldrh	r3, [r7, #10]
 80116ca:	89ba      	ldrh	r2, [r7, #12]
 80116cc:	f7fb ff80 	bl	800d5d0 <pbuf_copy_partial>
 80116d0:	4603      	mov	r3, r0
 80116d2:	461a      	mov	r2, r3
 80116d4:	89bb      	ldrh	r3, [r7, #12]
 80116d6:	4293      	cmp	r3, r2
 80116d8:	f040 809f 	bne.w	801181a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	899b      	ldrh	r3, [r3, #12]
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fa f98b 	bl	800ba00 <lwip_htons>
 80116ea:	4603      	mov	r3, r0
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80116f4:	2300      	movs	r3, #0
 80116f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80116f8:	7efb      	ldrb	r3, [r7, #27]
 80116fa:	f003 0308 	and.w	r3, r3, #8
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d007      	beq.n	8011712 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011702:	7efb      	ldrb	r3, [r7, #27]
 8011704:	f023 0308 	bic.w	r3, r3, #8
 8011708:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801170a:	7ebb      	ldrb	r3, [r7, #26]
 801170c:	f043 0308 	orr.w	r3, r3, #8
 8011710:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011712:	7efb      	ldrb	r3, [r7, #27]
 8011714:	f003 0301 	and.w	r3, r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	d007      	beq.n	801172c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801171c:	7efb      	ldrb	r3, [r7, #27]
 801171e:	f023 0301 	bic.w	r3, r3, #1
 8011722:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011724:	7ebb      	ldrb	r3, [r7, #26]
 8011726:	f043 0301 	orr.w	r3, r3, #1
 801172a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	68db      	ldr	r3, [r3, #12]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	4618      	mov	r0, r3
 8011734:	f7fa f979 	bl	800ba2a <lwip_htonl>
 8011738:	4602      	mov	r2, r0
 801173a:	887b      	ldrh	r3, [r7, #2]
 801173c:	18d1      	adds	r1, r2, r3
 801173e:	7eba      	ldrb	r2, [r7, #26]
 8011740:	7bfb      	ldrb	r3, [r7, #15]
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	460b      	mov	r3, r1
 8011746:	6939      	ldr	r1, [r7, #16]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff fea7 	bl	801149c <tcp_create_segment>
 801174e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d063      	beq.n	801181e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	4618      	mov	r0, r3
 801175c:	f7fb fdd0 	bl	800d300 <pbuf_clen>
 8011760:	4603      	mov	r3, r0
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801176a:	1a9b      	subs	r3, r3, r2
 801176c:	b29a      	uxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	6858      	ldr	r0, [r3, #4]
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	891a      	ldrh	r2, [r3, #8]
 801177e:	89bb      	ldrh	r3, [r7, #12]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	b29b      	uxth	r3, r3
 8011784:	4619      	mov	r1, r3
 8011786:	f7fb fba7 	bl	800ced8 <pbuf_realloc>
  useg->len -= remainder;
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	891a      	ldrh	r2, [r3, #8]
 801178e:	89bb      	ldrh	r3, [r7, #12]
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	b29a      	uxth	r2, r3
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	899b      	ldrh	r3, [r3, #12]
 801179e:	b29c      	uxth	r4, r3
 80117a0:	7efb      	ldrb	r3, [r7, #27]
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7fa f92b 	bl	800ba00 <lwip_htons>
 80117aa:	4603      	mov	r3, r0
 80117ac:	461a      	mov	r2, r3
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	4322      	orrs	r2, r4
 80117b4:	b292      	uxth	r2, r2
 80117b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fb fd9f 	bl	800d300 <pbuf_clen>
 80117c2:	4603      	mov	r3, r0
 80117c4:	461a      	mov	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117cc:	4413      	add	r3, r2
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fb fd90 	bl	800d300 <pbuf_clen>
 80117e0:	4603      	mov	r3, r0
 80117e2:	461a      	mov	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117ea:	4413      	add	r3, r2
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	69fa      	ldr	r2, [r7, #28]
 8011800:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d103      	bne.n	8011812 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011812:	2300      	movs	r3, #0
 8011814:	e016      	b.n	8011844 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011816:	bf00      	nop
 8011818:	e002      	b.n	8011820 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801181a:	bf00      	nop
 801181c:	e000      	b.n	8011820 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801181e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d006      	beq.n	8011834 <tcp_split_unsent_seg+0x25c>
 8011826:	4b09      	ldr	r3, [pc, #36]	; (801184c <tcp_split_unsent_seg+0x274>)
 8011828:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801182c:	490d      	ldr	r1, [pc, #52]	; (8011864 <tcp_split_unsent_seg+0x28c>)
 801182e:	4809      	ldr	r0, [pc, #36]	; (8011854 <tcp_split_unsent_seg+0x27c>)
 8011830:	f004 f96a 	bl	8015b08 <iprintf>
  if (p != NULL) {
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d002      	beq.n	8011840 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801183a:	6938      	ldr	r0, [r7, #16]
 801183c:	f7fb fcd2 	bl	800d1e4 <pbuf_free>
  }

  return ERR_MEM;
 8011840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011844:	4618      	mov	r0, r3
 8011846:	3724      	adds	r7, #36	; 0x24
 8011848:	46bd      	mov	sp, r7
 801184a:	bd90      	pop	{r4, r7, pc}
 801184c:	080184d4 	.word	0x080184d4
 8011850:	08018868 	.word	0x08018868
 8011854:	08018528 	.word	0x08018528
 8011858:	0801888c 	.word	0x0801888c
 801185c:	080188b0 	.word	0x080188b0
 8011860:	080188c0 	.word	0x080188c0
 8011864:	080188d0 	.word	0x080188d0

08011868 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011868:	b590      	push	{r4, r7, lr}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <tcp_send_fin+0x1c>
 8011876:	4b21      	ldr	r3, [pc, #132]	; (80118fc <tcp_send_fin+0x94>)
 8011878:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801187c:	4920      	ldr	r1, [pc, #128]	; (8011900 <tcp_send_fin+0x98>)
 801187e:	4821      	ldr	r0, [pc, #132]	; (8011904 <tcp_send_fin+0x9c>)
 8011880:	f004 f942 	bl	8015b08 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011888:	2b00      	cmp	r3, #0
 801188a:	d02e      	beq.n	80118ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011890:	60fb      	str	r3, [r7, #12]
 8011892:	e002      	b.n	801189a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1f8      	bne.n	8011894 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fa f8a8 	bl	800ba00 <lwip_htons>
 80118b0:	4603      	mov	r3, r0
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	f003 0307 	and.w	r3, r3, #7
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d116      	bne.n	80118ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	899b      	ldrh	r3, [r3, #12]
 80118c2:	b29c      	uxth	r4, r3
 80118c4:	2001      	movs	r0, #1
 80118c6:	f7fa f89b 	bl	800ba00 <lwip_htons>
 80118ca:	4603      	mov	r3, r0
 80118cc:	461a      	mov	r2, r3
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	4322      	orrs	r2, r4
 80118d4:	b292      	uxth	r2, r2
 80118d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	8b5b      	ldrh	r3, [r3, #26]
 80118dc:	f043 0320 	orr.w	r3, r3, #32
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80118e6:	2300      	movs	r3, #0
 80118e8:	e004      	b.n	80118f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80118ea:	2101      	movs	r1, #1
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f000 f80b 	bl	8011908 <tcp_enqueue_flags>
 80118f2:	4603      	mov	r3, r0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3714      	adds	r7, #20
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd90      	pop	{r4, r7, pc}
 80118fc:	080184d4 	.word	0x080184d4
 8011900:	080188dc 	.word	0x080188dc
 8011904:	08018528 	.word	0x08018528

08011908 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b08a      	sub	sp, #40	; 0x28
 801190c:	af02      	add	r7, sp, #8
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	460b      	mov	r3, r1
 8011912:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011914:	2300      	movs	r3, #0
 8011916:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801191c:	78fb      	ldrb	r3, [r7, #3]
 801191e:	f003 0303 	and.w	r3, r3, #3
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <tcp_enqueue_flags+0x2c>
 8011926:	4b67      	ldr	r3, [pc, #412]	; (8011ac4 <tcp_enqueue_flags+0x1bc>)
 8011928:	f240 4211 	movw	r2, #1041	; 0x411
 801192c:	4966      	ldr	r1, [pc, #408]	; (8011ac8 <tcp_enqueue_flags+0x1c0>)
 801192e:	4867      	ldr	r0, [pc, #412]	; (8011acc <tcp_enqueue_flags+0x1c4>)
 8011930:	f004 f8ea 	bl	8015b08 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d106      	bne.n	8011948 <tcp_enqueue_flags+0x40>
 801193a:	4b62      	ldr	r3, [pc, #392]	; (8011ac4 <tcp_enqueue_flags+0x1bc>)
 801193c:	f240 4213 	movw	r2, #1043	; 0x413
 8011940:	4963      	ldr	r1, [pc, #396]	; (8011ad0 <tcp_enqueue_flags+0x1c8>)
 8011942:	4862      	ldr	r0, [pc, #392]	; (8011acc <tcp_enqueue_flags+0x1c4>)
 8011944:	f004 f8e0 	bl	8015b08 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011948:	78fb      	ldrb	r3, [r7, #3]
 801194a:	f003 0302 	and.w	r3, r3, #2
 801194e:	2b00      	cmp	r3, #0
 8011950:	d001      	beq.n	8011956 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011952:	2301      	movs	r3, #1
 8011954:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011956:	7ffb      	ldrb	r3, [r7, #31]
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	b2db      	uxtb	r3, r3
 801195c:	f003 0304 	and.w	r3, r3, #4
 8011960:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011962:	7dfb      	ldrb	r3, [r7, #23]
 8011964:	b29b      	uxth	r3, r3
 8011966:	f44f 7220 	mov.w	r2, #640	; 0x280
 801196a:	4619      	mov	r1, r3
 801196c:	2036      	movs	r0, #54	; 0x36
 801196e:	f7fb f955 	bl	800cc1c <pbuf_alloc>
 8011972:	6138      	str	r0, [r7, #16]
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d109      	bne.n	801198e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	8b5b      	ldrh	r3, [r3, #26]
 801197e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011982:	b29a      	uxth	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011988:	f04f 33ff 	mov.w	r3, #4294967295
 801198c:	e095      	b.n	8011aba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	895a      	ldrh	r2, [r3, #10]
 8011992:	7dfb      	ldrb	r3, [r7, #23]
 8011994:	b29b      	uxth	r3, r3
 8011996:	429a      	cmp	r2, r3
 8011998:	d206      	bcs.n	80119a8 <tcp_enqueue_flags+0xa0>
 801199a:	4b4a      	ldr	r3, [pc, #296]	; (8011ac4 <tcp_enqueue_flags+0x1bc>)
 801199c:	f240 4239 	movw	r2, #1081	; 0x439
 80119a0:	494c      	ldr	r1, [pc, #304]	; (8011ad4 <tcp_enqueue_flags+0x1cc>)
 80119a2:	484a      	ldr	r0, [pc, #296]	; (8011acc <tcp_enqueue_flags+0x1c4>)
 80119a4:	f004 f8b0 	bl	8015b08 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80119ac:	78fa      	ldrb	r2, [r7, #3]
 80119ae:	7ffb      	ldrb	r3, [r7, #31]
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	460b      	mov	r3, r1
 80119b4:	6939      	ldr	r1, [r7, #16]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff fd70 	bl	801149c <tcp_create_segment>
 80119bc:	60f8      	str	r0, [r7, #12]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d109      	bne.n	80119d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	8b5b      	ldrh	r3, [r3, #26]
 80119c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80119d2:	f04f 33ff 	mov.w	r3, #4294967295
 80119d6:	e070      	b.n	8011aba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	f003 0303 	and.w	r3, r3, #3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d006      	beq.n	80119f2 <tcp_enqueue_flags+0xea>
 80119e4:	4b37      	ldr	r3, [pc, #220]	; (8011ac4 <tcp_enqueue_flags+0x1bc>)
 80119e6:	f240 4242 	movw	r2, #1090	; 0x442
 80119ea:	493b      	ldr	r1, [pc, #236]	; (8011ad8 <tcp_enqueue_flags+0x1d0>)
 80119ec:	4837      	ldr	r0, [pc, #220]	; (8011acc <tcp_enqueue_flags+0x1c4>)
 80119ee:	f004 f88b 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	891b      	ldrh	r3, [r3, #8]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d006      	beq.n	8011a08 <tcp_enqueue_flags+0x100>
 80119fa:	4b32      	ldr	r3, [pc, #200]	; (8011ac4 <tcp_enqueue_flags+0x1bc>)
 80119fc:	f240 4243 	movw	r2, #1091	; 0x443
 8011a00:	4936      	ldr	r1, [pc, #216]	; (8011adc <tcp_enqueue_flags+0x1d4>)
 8011a02:	4832      	ldr	r0, [pc, #200]	; (8011acc <tcp_enqueue_flags+0x1c4>)
 8011a04:	f004 f880 	bl	8015b08 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d103      	bne.n	8011a18 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	68fa      	ldr	r2, [r7, #12]
 8011a14:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a16:	e00d      	b.n	8011a34 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a1c:	61bb      	str	r3, [r7, #24]
 8011a1e:	e002      	b.n	8011a26 <tcp_enqueue_flags+0x11e>
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	61bb      	str	r3, [r7, #24]
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d1f8      	bne.n	8011a20 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	68fa      	ldr	r2, [r7, #12]
 8011a32:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011a3c:	78fb      	ldrb	r3, [r7, #3]
 8011a3e:	f003 0302 	and.w	r3, r3, #2
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d104      	bne.n	8011a50 <tcp_enqueue_flags+0x148>
 8011a46:	78fb      	ldrb	r3, [r7, #3]
 8011a48:	f003 0301 	and.w	r3, r3, #1
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d004      	beq.n	8011a5a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a54:	1c5a      	adds	r2, r3, #1
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011a5a:	78fb      	ldrb	r3, [r7, #3]
 8011a5c:	f003 0301 	and.w	r3, r3, #1
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d006      	beq.n	8011a72 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	8b5b      	ldrh	r3, [r3, #26]
 8011a68:	f043 0320 	orr.w	r3, r3, #32
 8011a6c:	b29a      	uxth	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	685b      	ldr	r3, [r3, #4]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fb fc42 	bl	800d300 <pbuf_clen>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	461a      	mov	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a86:	4413      	add	r3, r2
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00e      	beq.n	8011ab8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10a      	bne.n	8011ab8 <tcp_enqueue_flags+0x1b0>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d106      	bne.n	8011ab8 <tcp_enqueue_flags+0x1b0>
 8011aaa:	4b06      	ldr	r3, [pc, #24]	; (8011ac4 <tcp_enqueue_flags+0x1bc>)
 8011aac:	f240 4265 	movw	r2, #1125	; 0x465
 8011ab0:	490b      	ldr	r1, [pc, #44]	; (8011ae0 <tcp_enqueue_flags+0x1d8>)
 8011ab2:	4806      	ldr	r0, [pc, #24]	; (8011acc <tcp_enqueue_flags+0x1c4>)
 8011ab4:	f004 f828 	bl	8015b08 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011ab8:	2300      	movs	r3, #0
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3720      	adds	r7, #32
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	080184d4 	.word	0x080184d4
 8011ac8:	080188f8 	.word	0x080188f8
 8011acc:	08018528 	.word	0x08018528
 8011ad0:	08018950 	.word	0x08018950
 8011ad4:	08018970 	.word	0x08018970
 8011ad8:	080189ac 	.word	0x080189ac
 8011adc:	080189c4 	.word	0x080189c4
 8011ae0:	080189f0 	.word	0x080189f0

08011ae4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011ae4:	b5b0      	push	{r4, r5, r7, lr}
 8011ae6:	b08a      	sub	sp, #40	; 0x28
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <tcp_output+0x1c>
 8011af2:	4b8a      	ldr	r3, [pc, #552]	; (8011d1c <tcp_output+0x238>)
 8011af4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011af8:	4989      	ldr	r1, [pc, #548]	; (8011d20 <tcp_output+0x23c>)
 8011afa:	488a      	ldr	r0, [pc, #552]	; (8011d24 <tcp_output+0x240>)
 8011afc:	f004 f804 	bl	8015b08 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	7d1b      	ldrb	r3, [r3, #20]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d106      	bne.n	8011b16 <tcp_output+0x32>
 8011b08:	4b84      	ldr	r3, [pc, #528]	; (8011d1c <tcp_output+0x238>)
 8011b0a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011b0e:	4986      	ldr	r1, [pc, #536]	; (8011d28 <tcp_output+0x244>)
 8011b10:	4884      	ldr	r0, [pc, #528]	; (8011d24 <tcp_output+0x240>)
 8011b12:	f003 fff9 	bl	8015b08 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011b16:	4b85      	ldr	r3, [pc, #532]	; (8011d2c <tcp_output+0x248>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d101      	bne.n	8011b24 <tcp_output+0x40>
    return ERR_OK;
 8011b20:	2300      	movs	r3, #0
 8011b22:	e1ce      	b.n	8011ec2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b30:	4293      	cmp	r3, r2
 8011b32:	bf28      	it	cs
 8011b34:	4613      	movcs	r3, r2
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d10b      	bne.n	8011b5e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	8b5b      	ldrh	r3, [r3, #26]
 8011b4a:	f003 0302 	and.w	r3, r3, #2
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 81aa 	beq.w	8011ea8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 fdcb 	bl	80126f0 <tcp_send_empty_ack>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	e1b1      	b.n	8011ec2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011b5e:	6879      	ldr	r1, [r7, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	3304      	adds	r3, #4
 8011b64:	461a      	mov	r2, r3
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7ff fc7c 	bl	8011464 <tcp_route>
 8011b6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d102      	bne.n	8011b7a <tcp_output+0x96>
    return ERR_RTE;
 8011b74:	f06f 0303 	mvn.w	r3, #3
 8011b78:	e1a3      	b.n	8011ec2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d003      	beq.n	8011b88 <tcp_output+0xa4>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d111      	bne.n	8011bac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d002      	beq.n	8011b94 <tcp_output+0xb0>
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	3304      	adds	r3, #4
 8011b92:	e000      	b.n	8011b96 <tcp_output+0xb2>
 8011b94:	2300      	movs	r3, #0
 8011b96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d102      	bne.n	8011ba4 <tcp_output+0xc0>
      return ERR_RTE;
 8011b9e:	f06f 0303 	mvn.w	r3, #3
 8011ba2:	e18e      	b.n	8011ec2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7f9 ff39 	bl	800ba2a <lwip_htonl>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bbe:	1ad3      	subs	r3, r2, r3
 8011bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bc2:	8912      	ldrh	r2, [r2, #8]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d227      	bcs.n	8011c1c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d114      	bne.n	8011c04 <tcp_output+0x120>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d110      	bne.n	8011c04 <tcp_output+0x120>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d10b      	bne.n	8011c04 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	8b5b      	ldrh	r3, [r3, #26]
 8011c08:	f003 0302 	and.w	r3, r3, #2
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f000 814d 	beq.w	8011eac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f000 fd6c 	bl	80126f0 <tcp_send_empty_ack>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	e152      	b.n	8011ec2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c28:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011c2a:	6a3b      	ldr	r3, [r7, #32]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f000 811c 	beq.w	8011e6a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011c32:	e002      	b.n	8011c3a <tcp_output+0x156>
 8011c34:	6a3b      	ldr	r3, [r7, #32]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	623b      	str	r3, [r7, #32]
 8011c3a:	6a3b      	ldr	r3, [r7, #32]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d1f8      	bne.n	8011c34 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011c42:	e112      	b.n	8011e6a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	899b      	ldrh	r3, [r3, #12]
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f9 fed7 	bl	800ba00 <lwip_htons>
 8011c52:	4603      	mov	r3, r0
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	f003 0304 	and.w	r3, r3, #4
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d006      	beq.n	8011c6c <tcp_output+0x188>
 8011c5e:	4b2f      	ldr	r3, [pc, #188]	; (8011d1c <tcp_output+0x238>)
 8011c60:	f240 5236 	movw	r2, #1334	; 0x536
 8011c64:	4932      	ldr	r1, [pc, #200]	; (8011d30 <tcp_output+0x24c>)
 8011c66:	482f      	ldr	r0, [pc, #188]	; (8011d24 <tcp_output+0x240>)
 8011c68:	f003 ff4e 	bl	8015b08 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d01f      	beq.n	8011cb4 <tcp_output+0x1d0>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	8b5b      	ldrh	r3, [r3, #26]
 8011c78:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d119      	bne.n	8011cb4 <tcp_output+0x1d0>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d00b      	beq.n	8011ca0 <tcp_output+0x1bc>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d110      	bne.n	8011cb4 <tcp_output+0x1d0>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c96:	891a      	ldrh	r2, [r3, #8]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d209      	bcs.n	8011cb4 <tcp_output+0x1d0>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d004      	beq.n	8011cb4 <tcp_output+0x1d0>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cb0:	2b08      	cmp	r3, #8
 8011cb2:	d901      	bls.n	8011cb8 <tcp_output+0x1d4>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e000      	b.n	8011cba <tcp_output+0x1d6>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d106      	bne.n	8011ccc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8b5b      	ldrh	r3, [r3, #26]
 8011cc2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f000 80e4 	beq.w	8011e94 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	7d1b      	ldrb	r3, [r3, #20]
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d00d      	beq.n	8011cf0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	899b      	ldrh	r3, [r3, #12]
 8011cda:	b29c      	uxth	r4, r3
 8011cdc:	2010      	movs	r0, #16
 8011cde:	f7f9 fe8f 	bl	800ba00 <lwip_htons>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	4322      	orrs	r2, r4
 8011cec:	b292      	uxth	r2, r2
 8011cee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011cf0:	697a      	ldr	r2, [r7, #20]
 8011cf2:	6879      	ldr	r1, [r7, #4]
 8011cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cf6:	f000 f909 	bl	8011f0c <tcp_output_segment>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d016      	beq.n	8011d34 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	8b5b      	ldrh	r3, [r3, #26]
 8011d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	835a      	strh	r2, [r3, #26]
      return err;
 8011d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d18:	e0d3      	b.n	8011ec2 <tcp_output+0x3de>
 8011d1a:	bf00      	nop
 8011d1c:	080184d4 	.word	0x080184d4
 8011d20:	08018a18 	.word	0x08018a18
 8011d24:	08018528 	.word	0x08018528
 8011d28:	08018a30 	.word	0x08018a30
 8011d2c:	200450ac 	.word	0x200450ac
 8011d30:	08018a58 	.word	0x08018a58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	7d1b      	ldrb	r3, [r3, #20]
 8011d40:	2b02      	cmp	r3, #2
 8011d42:	d006      	beq.n	8011d52 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	8b5b      	ldrh	r3, [r3, #26]
 8011d48:	f023 0303 	bic.w	r3, r3, #3
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7f9 fe66 	bl	800ba2a <lwip_htonl>
 8011d5e:	4604      	mov	r4, r0
 8011d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d62:	891b      	ldrh	r3, [r3, #8]
 8011d64:	461d      	mov	r5, r3
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	899b      	ldrh	r3, [r3, #12]
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7f9 fe46 	bl	800ba00 <lwip_htons>
 8011d74:	4603      	mov	r3, r0
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	f003 0303 	and.w	r3, r3, #3
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d001      	beq.n	8011d84 <tcp_output+0x2a0>
 8011d80:	2301      	movs	r3, #1
 8011d82:	e000      	b.n	8011d86 <tcp_output+0x2a2>
 8011d84:	2300      	movs	r3, #0
 8011d86:	442b      	add	r3, r5
 8011d88:	4423      	add	r3, r4
 8011d8a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	da02      	bge.n	8011d9e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	68ba      	ldr	r2, [r7, #8]
 8011d9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da0:	891b      	ldrh	r3, [r3, #8]
 8011da2:	461c      	mov	r4, r3
 8011da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	899b      	ldrh	r3, [r3, #12]
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7f9 fe27 	bl	800ba00 <lwip_htons>
 8011db2:	4603      	mov	r3, r0
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	f003 0303 	and.w	r3, r3, #3
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d001      	beq.n	8011dc2 <tcp_output+0x2de>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e000      	b.n	8011dc4 <tcp_output+0x2e0>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	4423      	add	r3, r4
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d049      	beq.n	8011e5e <tcp_output+0x37a>
      seg->next = NULL;
 8011dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dcc:	2200      	movs	r2, #0
 8011dce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d105      	bne.n	8011de4 <tcp_output+0x300>
        pcb->unacked = seg;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ddc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de0:	623b      	str	r3, [r7, #32]
 8011de2:	e03f      	b.n	8011e64 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7f9 fe1d 	bl	800ba2a <lwip_htonl>
 8011df0:	4604      	mov	r4, r0
 8011df2:	6a3b      	ldr	r3, [r7, #32]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7f9 fe16 	bl	800ba2a <lwip_htonl>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	1ae3      	subs	r3, r4, r3
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	da24      	bge.n	8011e50 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	3370      	adds	r3, #112	; 0x70
 8011e0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e0c:	e002      	b.n	8011e14 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d011      	beq.n	8011e40 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7f9 fe00 	bl	800ba2a <lwip_htonl>
 8011e2a:	4604      	mov	r4, r0
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7f9 fdf9 	bl	800ba2a <lwip_htonl>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	dbe6      	blt.n	8011e0e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e4c:	601a      	str	r2, [r3, #0]
 8011e4e:	e009      	b.n	8011e64 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011e50:	6a3b      	ldr	r3, [r7, #32]
 8011e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e54:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011e56:	6a3b      	ldr	r3, [r7, #32]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	623b      	str	r3, [r7, #32]
 8011e5c:	e002      	b.n	8011e64 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e60:	f7fc fc3f 	bl	800e6e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d012      	beq.n	8011e96 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7f9 fdd7 	bl	800ba2a <lwip_htonl>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e82:	1ad3      	subs	r3, r2, r3
 8011e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e86:	8912      	ldrh	r2, [r2, #8]
 8011e88:	4413      	add	r3, r2
  while (seg != NULL &&
 8011e8a:	69ba      	ldr	r2, [r7, #24]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	f4bf aed9 	bcs.w	8011c44 <tcp_output+0x160>
 8011e92:	e000      	b.n	8011e96 <tcp_output+0x3b2>
      break;
 8011e94:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d108      	bne.n	8011eb0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011ea6:	e004      	b.n	8011eb2 <tcp_output+0x3ce>
    goto output_done;
 8011ea8:	bf00      	nop
 8011eaa:	e002      	b.n	8011eb2 <tcp_output+0x3ce>
    goto output_done;
 8011eac:	bf00      	nop
 8011eae:	e000      	b.n	8011eb2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011eb0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8b5b      	ldrh	r3, [r3, #26]
 8011eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011ec0:	2300      	movs	r3, #0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3728      	adds	r7, #40	; 0x28
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8011eca:	bf00      	nop

08011ecc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <tcp_output_segment_busy+0x1c>
 8011eda:	4b09      	ldr	r3, [pc, #36]	; (8011f00 <tcp_output_segment_busy+0x34>)
 8011edc:	f240 529a 	movw	r2, #1434	; 0x59a
 8011ee0:	4908      	ldr	r1, [pc, #32]	; (8011f04 <tcp_output_segment_busy+0x38>)
 8011ee2:	4809      	ldr	r0, [pc, #36]	; (8011f08 <tcp_output_segment_busy+0x3c>)
 8011ee4:	f003 fe10 	bl	8015b08 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	7b9b      	ldrb	r3, [r3, #14]
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d001      	beq.n	8011ef6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e000      	b.n	8011ef8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	080184d4 	.word	0x080184d4
 8011f04:	08018a70 	.word	0x08018a70
 8011f08:	08018528 	.word	0x08018528

08011f0c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011f0c:	b5b0      	push	{r4, r5, r7, lr}
 8011f0e:	b08c      	sub	sp, #48	; 0x30
 8011f10:	af04      	add	r7, sp, #16
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d106      	bne.n	8011f2c <tcp_output_segment+0x20>
 8011f1e:	4b64      	ldr	r3, [pc, #400]	; (80120b0 <tcp_output_segment+0x1a4>)
 8011f20:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011f24:	4963      	ldr	r1, [pc, #396]	; (80120b4 <tcp_output_segment+0x1a8>)
 8011f26:	4864      	ldr	r0, [pc, #400]	; (80120b8 <tcp_output_segment+0x1ac>)
 8011f28:	f003 fdee 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d106      	bne.n	8011f40 <tcp_output_segment+0x34>
 8011f32:	4b5f      	ldr	r3, [pc, #380]	; (80120b0 <tcp_output_segment+0x1a4>)
 8011f34:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011f38:	4960      	ldr	r1, [pc, #384]	; (80120bc <tcp_output_segment+0x1b0>)
 8011f3a:	485f      	ldr	r0, [pc, #380]	; (80120b8 <tcp_output_segment+0x1ac>)
 8011f3c:	f003 fde4 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d106      	bne.n	8011f54 <tcp_output_segment+0x48>
 8011f46:	4b5a      	ldr	r3, [pc, #360]	; (80120b0 <tcp_output_segment+0x1a4>)
 8011f48:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011f4c:	495c      	ldr	r1, [pc, #368]	; (80120c0 <tcp_output_segment+0x1b4>)
 8011f4e:	485a      	ldr	r0, [pc, #360]	; (80120b8 <tcp_output_segment+0x1ac>)
 8011f50:	f003 fdda 	bl	8015b08 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f7ff ffb9 	bl	8011ecc <tcp_output_segment_busy>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011f60:	2300      	movs	r3, #0
 8011f62:	e0a1      	b.n	80120a8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	68dc      	ldr	r4, [r3, #12]
 8011f6c:	4610      	mov	r0, r2
 8011f6e:	f7f9 fd5c 	bl	800ba2a <lwip_htonl>
 8011f72:	4603      	mov	r3, r0
 8011f74:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	68dc      	ldr	r4, [r3, #12]
 8011f7e:	4610      	mov	r0, r2
 8011f80:	f7f9 fd3e 	bl	800ba00 <lwip_htons>
 8011f84:	4603      	mov	r3, r0
 8011f86:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8c:	68ba      	ldr	r2, [r7, #8]
 8011f8e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011f90:	441a      	add	r2, r3
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	3314      	adds	r3, #20
 8011f9c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	7a9b      	ldrb	r3, [r3, #10]
 8011fa2:	f003 0301 	and.w	r3, r3, #1
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d015      	beq.n	8011fd6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	3304      	adds	r3, #4
 8011fae:	461a      	mov	r2, r3
 8011fb0:	6879      	ldr	r1, [r7, #4]
 8011fb2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011fb6:	f7fc fe8b 	bl	800ecd0 <tcp_eff_send_mss_netif>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011fbe:	8b7b      	ldrh	r3, [r7, #26]
 8011fc0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7f9 fd30 	bl	800ba2a <lwip_htonl>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da02      	bge.n	8011fe6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d10c      	bne.n	8012008 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011fee:	4b35      	ldr	r3, [pc, #212]	; (80120c4 <tcp_output_segment+0x1b8>)
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7f9 fd14 	bl	800ba2a <lwip_htonl>
 8012002:	4602      	mov	r2, r0
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	68da      	ldr	r2, [r3, #12]
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	8959      	ldrh	r1, [r3, #10]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	8b3a      	ldrh	r2, [r7, #24]
 8012022:	1a8a      	subs	r2, r1, r2
 8012024:	b292      	uxth	r2, r2
 8012026:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	8919      	ldrh	r1, [r3, #8]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	8b3a      	ldrh	r2, [r7, #24]
 8012034:	1a8a      	subs	r2, r1, r2
 8012036:	b292      	uxth	r2, r2
 8012038:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	68d2      	ldr	r2, [r2, #12]
 8012042:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	2200      	movs	r2, #0
 801204a:	741a      	strb	r2, [r3, #16]
 801204c:	2200      	movs	r2, #0
 801204e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	68da      	ldr	r2, [r3, #12]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	7a9b      	ldrb	r3, [r3, #10]
 8012058:	f003 0301 	and.w	r3, r3, #1
 801205c:	2b00      	cmp	r3, #0
 801205e:	d001      	beq.n	8012064 <tcp_output_segment+0x158>
 8012060:	2318      	movs	r3, #24
 8012062:	e000      	b.n	8012066 <tcp_output_segment+0x15a>
 8012064:	2314      	movs	r3, #20
 8012066:	4413      	add	r3, r2
 8012068:	69fa      	ldr	r2, [r7, #28]
 801206a:	429a      	cmp	r2, r3
 801206c:	d006      	beq.n	801207c <tcp_output_segment+0x170>
 801206e:	4b10      	ldr	r3, [pc, #64]	; (80120b0 <tcp_output_segment+0x1a4>)
 8012070:	f240 621c 	movw	r2, #1564	; 0x61c
 8012074:	4914      	ldr	r1, [pc, #80]	; (80120c8 <tcp_output_segment+0x1bc>)
 8012076:	4810      	ldr	r0, [pc, #64]	; (80120b8 <tcp_output_segment+0x1ac>)
 8012078:	f003 fd46 	bl	8015b08 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	6858      	ldr	r0, [r3, #4]
 8012080:	68b9      	ldr	r1, [r7, #8]
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	1d1c      	adds	r4, r3, #4
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	7add      	ldrb	r5, [r3, #11]
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	7a9b      	ldrb	r3, [r3, #10]
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	9202      	str	r2, [sp, #8]
 8012092:	2206      	movs	r2, #6
 8012094:	9201      	str	r2, [sp, #4]
 8012096:	9300      	str	r3, [sp, #0]
 8012098:	462b      	mov	r3, r5
 801209a:	4622      	mov	r2, r4
 801209c:	f002 fa64 	bl	8014568 <ip4_output_if>
 80120a0:	4603      	mov	r3, r0
 80120a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80120a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3720      	adds	r7, #32
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bdb0      	pop	{r4, r5, r7, pc}
 80120b0:	080184d4 	.word	0x080184d4
 80120b4:	08018a98 	.word	0x08018a98
 80120b8:	08018528 	.word	0x08018528
 80120bc:	08018ab8 	.word	0x08018ab8
 80120c0:	08018ad8 	.word	0x08018ad8
 80120c4:	20045060 	.word	0x20045060
 80120c8:	08018afc 	.word	0x08018afc

080120cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80120cc:	b5b0      	push	{r4, r5, r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <tcp_rexmit_rto_prepare+0x1c>
 80120da:	4b31      	ldr	r3, [pc, #196]	; (80121a0 <tcp_rexmit_rto_prepare+0xd4>)
 80120dc:	f240 6263 	movw	r2, #1635	; 0x663
 80120e0:	4930      	ldr	r1, [pc, #192]	; (80121a4 <tcp_rexmit_rto_prepare+0xd8>)
 80120e2:	4831      	ldr	r0, [pc, #196]	; (80121a8 <tcp_rexmit_rto_prepare+0xdc>)
 80120e4:	f003 fd10 	bl	8015b08 <iprintf>

  if (pcb->unacked == NULL) {
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d102      	bne.n	80120f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80120f0:	f06f 0305 	mvn.w	r3, #5
 80120f4:	e050      	b.n	8012198 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	e00b      	b.n	8012116 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f7ff fee4 	bl	8011ecc <tcp_output_segment_busy>
 8012104:	4603      	mov	r3, r0
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801210a:	f06f 0305 	mvn.w	r3, #5
 801210e:	e043      	b.n	8012198 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	60fb      	str	r3, [r7, #12]
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d1ef      	bne.n	80120fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f7ff fed4 	bl	8011ecc <tcp_output_segment_busy>
 8012124:	4603      	mov	r3, r0
 8012126:	2b00      	cmp	r3, #0
 8012128:	d002      	beq.n	8012130 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801212a:	f06f 0305 	mvn.w	r3, #5
 801212e:	e033      	b.n	8012198 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	8b5b      	ldrh	r3, [r3, #26]
 801214a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801214e:	b29a      	uxth	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	4618      	mov	r0, r3
 801215c:	f7f9 fc65 	bl	800ba2a <lwip_htonl>
 8012160:	4604      	mov	r4, r0
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	891b      	ldrh	r3, [r3, #8]
 8012166:	461d      	mov	r5, r3
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	899b      	ldrh	r3, [r3, #12]
 801216e:	b29b      	uxth	r3, r3
 8012170:	4618      	mov	r0, r3
 8012172:	f7f9 fc45 	bl	800ba00 <lwip_htons>
 8012176:	4603      	mov	r3, r0
 8012178:	b2db      	uxtb	r3, r3
 801217a:	f003 0303 	and.w	r3, r3, #3
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <tcp_rexmit_rto_prepare+0xba>
 8012182:	2301      	movs	r3, #1
 8012184:	e000      	b.n	8012188 <tcp_rexmit_rto_prepare+0xbc>
 8012186:	2300      	movs	r3, #0
 8012188:	442b      	add	r3, r5
 801218a:	18e2      	adds	r2, r4, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2200      	movs	r2, #0
 8012194:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012196:	2300      	movs	r3, #0
}
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bdb0      	pop	{r4, r5, r7, pc}
 80121a0:	080184d4 	.word	0x080184d4
 80121a4:	08018b10 	.word	0x08018b10
 80121a8:	08018528 	.word	0x08018528

080121ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d106      	bne.n	80121c8 <tcp_rexmit_rto_commit+0x1c>
 80121ba:	4b0d      	ldr	r3, [pc, #52]	; (80121f0 <tcp_rexmit_rto_commit+0x44>)
 80121bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80121c0:	490c      	ldr	r1, [pc, #48]	; (80121f4 <tcp_rexmit_rto_commit+0x48>)
 80121c2:	480d      	ldr	r0, [pc, #52]	; (80121f8 <tcp_rexmit_rto_commit+0x4c>)
 80121c4:	f003 fca0 	bl	8015b08 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121ce:	2bff      	cmp	r3, #255	; 0xff
 80121d0:	d007      	beq.n	80121e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121d8:	3301      	adds	r3, #1
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f7ff fc7e 	bl	8011ae4 <tcp_output>
}
 80121e8:	bf00      	nop
 80121ea:	3708      	adds	r7, #8
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	080184d4 	.word	0x080184d4
 80121f4:	08018b34 	.word	0x08018b34
 80121f8:	08018528 	.word	0x08018528

080121fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <tcp_rexmit_rto+0x1c>
 801220a:	4b0a      	ldr	r3, [pc, #40]	; (8012234 <tcp_rexmit_rto+0x38>)
 801220c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012210:	4909      	ldr	r1, [pc, #36]	; (8012238 <tcp_rexmit_rto+0x3c>)
 8012212:	480a      	ldr	r0, [pc, #40]	; (801223c <tcp_rexmit_rto+0x40>)
 8012214:	f003 fc78 	bl	8015b08 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7ff ff57 	bl	80120cc <tcp_rexmit_rto_prepare>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d102      	bne.n	801222a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f7ff ffc1 	bl	80121ac <tcp_rexmit_rto_commit>
  }
}
 801222a:	bf00      	nop
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	080184d4 	.word	0x080184d4
 8012238:	08018b58 	.word	0x08018b58
 801223c:	08018528 	.word	0x08018528

08012240 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012240:	b590      	push	{r4, r7, lr}
 8012242:	b085      	sub	sp, #20
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_rexmit+0x1c>
 801224e:	4b2f      	ldr	r3, [pc, #188]	; (801230c <tcp_rexmit+0xcc>)
 8012250:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012254:	492e      	ldr	r1, [pc, #184]	; (8012310 <tcp_rexmit+0xd0>)
 8012256:	482f      	ldr	r0, [pc, #188]	; (8012314 <tcp_rexmit+0xd4>)
 8012258:	f003 fc56 	bl	8015b08 <iprintf>

  if (pcb->unacked == NULL) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012260:	2b00      	cmp	r3, #0
 8012262:	d102      	bne.n	801226a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012264:	f06f 0305 	mvn.w	r3, #5
 8012268:	e04c      	b.n	8012304 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801226e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012270:	68b8      	ldr	r0, [r7, #8]
 8012272:	f7ff fe2b 	bl	8011ecc <tcp_output_segment_busy>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801227c:	f06f 0305 	mvn.w	r3, #5
 8012280:	e040      	b.n	8012304 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	336c      	adds	r3, #108	; 0x6c
 801228e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012290:	e002      	b.n	8012298 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d011      	beq.n	80122c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7f9 fbbe 	bl	800ba2a <lwip_htonl>
 80122ae:	4604      	mov	r4, r0
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7f9 fbb7 	bl	800ba2a <lwip_htonl>
 80122bc:	4603      	mov	r3, r0
 80122be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	dbe6      	blt.n	8012292 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	68ba      	ldr	r2, [r7, #8]
 80122d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d103      	bne.n	80122e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2200      	movs	r2, #0
 80122de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122e8:	2bff      	cmp	r3, #255	; 0xff
 80122ea:	d007      	beq.n	80122fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122f2:	3301      	adds	r3, #1
 80122f4:	b2da      	uxtb	r2, r3
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012302:	2300      	movs	r3, #0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3714      	adds	r7, #20
 8012308:	46bd      	mov	sp, r7
 801230a:	bd90      	pop	{r4, r7, pc}
 801230c:	080184d4 	.word	0x080184d4
 8012310:	08018b74 	.word	0x08018b74
 8012314:	08018528 	.word	0x08018528

08012318 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d106      	bne.n	8012334 <tcp_rexmit_fast+0x1c>
 8012326:	4b2a      	ldr	r3, [pc, #168]	; (80123d0 <tcp_rexmit_fast+0xb8>)
 8012328:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801232c:	4929      	ldr	r1, [pc, #164]	; (80123d4 <tcp_rexmit_fast+0xbc>)
 801232e:	482a      	ldr	r0, [pc, #168]	; (80123d8 <tcp_rexmit_fast+0xc0>)
 8012330:	f003 fbea 	bl	8015b08 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012338:	2b00      	cmp	r3, #0
 801233a:	d045      	beq.n	80123c8 <tcp_rexmit_fast+0xb0>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	8b5b      	ldrh	r3, [r3, #26]
 8012340:	f003 0304 	and.w	r3, r3, #4
 8012344:	2b00      	cmp	r3, #0
 8012346:	d13f      	bne.n	80123c8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ff ff79 	bl	8012240 <tcp_rexmit>
 801234e:	4603      	mov	r3, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d139      	bne.n	80123c8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012360:	4293      	cmp	r3, r2
 8012362:	bf28      	it	cs
 8012364:	4613      	movcs	r3, r2
 8012366:	b29b      	uxth	r3, r3
 8012368:	2b00      	cmp	r3, #0
 801236a:	da00      	bge.n	801236e <tcp_rexmit_fast+0x56>
 801236c:	3301      	adds	r3, #1
 801236e:	105b      	asrs	r3, r3, #1
 8012370:	b29a      	uxth	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801237e:	461a      	mov	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012384:	005b      	lsls	r3, r3, #1
 8012386:	429a      	cmp	r2, r3
 8012388:	d206      	bcs.n	8012398 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801238e:	005b      	lsls	r3, r3, #1
 8012390:	b29a      	uxth	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123a2:	4619      	mov	r1, r3
 80123a4:	0049      	lsls	r1, r1, #1
 80123a6:	440b      	add	r3, r1
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	4413      	add	r3, r2
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	8b5b      	ldrh	r3, [r3, #26]
 80123b8:	f043 0304 	orr.w	r3, r3, #4
 80123bc:	b29a      	uxth	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80123c8:	bf00      	nop
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	080184d4 	.word	0x080184d4
 80123d4:	08018b8c 	.word	0x08018b8c
 80123d8:	08018528 	.word	0x08018528

080123dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	607b      	str	r3, [r7, #4]
 80123e6:	460b      	mov	r3, r1
 80123e8:	817b      	strh	r3, [r7, #10]
 80123ea:	4613      	mov	r3, r2
 80123ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80123ee:	897a      	ldrh	r2, [r7, #10]
 80123f0:	893b      	ldrh	r3, [r7, #8]
 80123f2:	4413      	add	r3, r2
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	3314      	adds	r3, #20
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123fe:	4619      	mov	r1, r3
 8012400:	2022      	movs	r0, #34	; 0x22
 8012402:	f7fa fc0b 	bl	800cc1c <pbuf_alloc>
 8012406:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d04d      	beq.n	80124aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801240e:	897b      	ldrh	r3, [r7, #10]
 8012410:	3313      	adds	r3, #19
 8012412:	697a      	ldr	r2, [r7, #20]
 8012414:	8952      	ldrh	r2, [r2, #10]
 8012416:	4293      	cmp	r3, r2
 8012418:	db06      	blt.n	8012428 <tcp_output_alloc_header_common+0x4c>
 801241a:	4b26      	ldr	r3, [pc, #152]	; (80124b4 <tcp_output_alloc_header_common+0xd8>)
 801241c:	f240 7223 	movw	r2, #1827	; 0x723
 8012420:	4925      	ldr	r1, [pc, #148]	; (80124b8 <tcp_output_alloc_header_common+0xdc>)
 8012422:	4826      	ldr	r0, [pc, #152]	; (80124bc <tcp_output_alloc_header_common+0xe0>)
 8012424:	f003 fb70 	bl	8015b08 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801242e:	8c3b      	ldrh	r3, [r7, #32]
 8012430:	4618      	mov	r0, r3
 8012432:	f7f9 fae5 	bl	800ba00 <lwip_htons>
 8012436:	4603      	mov	r3, r0
 8012438:	461a      	mov	r2, r3
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801243e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012440:	4618      	mov	r0, r3
 8012442:	f7f9 fadd 	bl	800ba00 <lwip_htons>
 8012446:	4603      	mov	r3, r0
 8012448:	461a      	mov	r2, r3
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	687a      	ldr	r2, [r7, #4]
 8012452:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f7f9 fae8 	bl	800ba2a <lwip_htonl>
 801245a:	4602      	mov	r2, r0
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012460:	897b      	ldrh	r3, [r7, #10]
 8012462:	089b      	lsrs	r3, r3, #2
 8012464:	b29b      	uxth	r3, r3
 8012466:	3305      	adds	r3, #5
 8012468:	b29b      	uxth	r3, r3
 801246a:	031b      	lsls	r3, r3, #12
 801246c:	b29a      	uxth	r2, r3
 801246e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012472:	b29b      	uxth	r3, r3
 8012474:	4313      	orrs	r3, r2
 8012476:	b29b      	uxth	r3, r3
 8012478:	4618      	mov	r0, r3
 801247a:	f7f9 fac1 	bl	800ba00 <lwip_htons>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012486:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012488:	4618      	mov	r0, r3
 801248a:	f7f9 fab9 	bl	800ba00 <lwip_htons>
 801248e:	4603      	mov	r3, r0
 8012490:	461a      	mov	r2, r3
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	2200      	movs	r2, #0
 801249a:	741a      	strb	r2, [r3, #16]
 801249c:	2200      	movs	r2, #0
 801249e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	2200      	movs	r2, #0
 80124a4:	749a      	strb	r2, [r3, #18]
 80124a6:	2200      	movs	r2, #0
 80124a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80124aa:	697b      	ldr	r3, [r7, #20]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	080184d4 	.word	0x080184d4
 80124b8:	08018bac 	.word	0x08018bac
 80124bc:	08018528 	.word	0x08018528

080124c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80124c0:	b5b0      	push	{r4, r5, r7, lr}
 80124c2:	b08a      	sub	sp, #40	; 0x28
 80124c4:	af04      	add	r7, sp, #16
 80124c6:	60f8      	str	r0, [r7, #12]
 80124c8:	607b      	str	r3, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	817b      	strh	r3, [r7, #10]
 80124ce:	4613      	mov	r3, r2
 80124d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <tcp_output_alloc_header+0x26>
 80124d8:	4b15      	ldr	r3, [pc, #84]	; (8012530 <tcp_output_alloc_header+0x70>)
 80124da:	f240 7242 	movw	r2, #1858	; 0x742
 80124de:	4915      	ldr	r1, [pc, #84]	; (8012534 <tcp_output_alloc_header+0x74>)
 80124e0:	4815      	ldr	r0, [pc, #84]	; (8012538 <tcp_output_alloc_header+0x78>)
 80124e2:	f003 fb11 	bl	8015b08 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	8adb      	ldrh	r3, [r3, #22]
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	8b12      	ldrh	r2, [r2, #24]
 80124f2:	68f9      	ldr	r1, [r7, #12]
 80124f4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80124f6:	893d      	ldrh	r5, [r7, #8]
 80124f8:	897c      	ldrh	r4, [r7, #10]
 80124fa:	9103      	str	r1, [sp, #12]
 80124fc:	2110      	movs	r1, #16
 80124fe:	9102      	str	r1, [sp, #8]
 8012500:	9201      	str	r2, [sp, #4]
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	462a      	mov	r2, r5
 8012508:	4621      	mov	r1, r4
 801250a:	f7ff ff67 	bl	80123dc <tcp_output_alloc_header_common>
 801250e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d006      	beq.n	8012524 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801251e:	441a      	add	r2, r3
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012524:	697b      	ldr	r3, [r7, #20]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3718      	adds	r7, #24
 801252a:	46bd      	mov	sp, r7
 801252c:	bdb0      	pop	{r4, r5, r7, pc}
 801252e:	bf00      	nop
 8012530:	080184d4 	.word	0x080184d4
 8012534:	08018bdc 	.word	0x08018bdc
 8012538:	08018528 	.word	0x08018528

0801253c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b088      	sub	sp, #32
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	4611      	mov	r1, r2
 8012548:	461a      	mov	r2, r3
 801254a:	460b      	mov	r3, r1
 801254c:	71fb      	strb	r3, [r7, #7]
 801254e:	4613      	mov	r3, r2
 8012550:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d106      	bne.n	801256a <tcp_output_fill_options+0x2e>
 801255c:	4b12      	ldr	r3, [pc, #72]	; (80125a8 <tcp_output_fill_options+0x6c>)
 801255e:	f240 7256 	movw	r2, #1878	; 0x756
 8012562:	4912      	ldr	r1, [pc, #72]	; (80125ac <tcp_output_fill_options+0x70>)
 8012564:	4812      	ldr	r0, [pc, #72]	; (80125b0 <tcp_output_fill_options+0x74>)
 8012566:	f003 facf 	bl	8015b08 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	3314      	adds	r3, #20
 8012574:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012576:	8bfb      	ldrh	r3, [r7, #30]
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	461a      	mov	r2, r3
 801257c:	79fb      	ldrb	r3, [r7, #7]
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	f003 0304 	and.w	r3, r3, #4
 8012584:	4413      	add	r3, r2
 8012586:	3314      	adds	r3, #20
 8012588:	69ba      	ldr	r2, [r7, #24]
 801258a:	4413      	add	r3, r2
 801258c:	697a      	ldr	r2, [r7, #20]
 801258e:	429a      	cmp	r2, r3
 8012590:	d006      	beq.n	80125a0 <tcp_output_fill_options+0x64>
 8012592:	4b05      	ldr	r3, [pc, #20]	; (80125a8 <tcp_output_fill_options+0x6c>)
 8012594:	f240 7275 	movw	r2, #1909	; 0x775
 8012598:	4906      	ldr	r1, [pc, #24]	; (80125b4 <tcp_output_fill_options+0x78>)
 801259a:	4805      	ldr	r0, [pc, #20]	; (80125b0 <tcp_output_fill_options+0x74>)
 801259c:	f003 fab4 	bl	8015b08 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80125a0:	bf00      	nop
 80125a2:	3720      	adds	r7, #32
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	080184d4 	.word	0x080184d4
 80125ac:	08018c04 	.word	0x08018c04
 80125b0:	08018528 	.word	0x08018528
 80125b4:	08018afc 	.word	0x08018afc

080125b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08a      	sub	sp, #40	; 0x28
 80125bc:	af04      	add	r7, sp, #16
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d106      	bne.n	80125da <tcp_output_control_segment+0x22>
 80125cc:	4b1c      	ldr	r3, [pc, #112]	; (8012640 <tcp_output_control_segment+0x88>)
 80125ce:	f240 7287 	movw	r2, #1927	; 0x787
 80125d2:	491c      	ldr	r1, [pc, #112]	; (8012644 <tcp_output_control_segment+0x8c>)
 80125d4:	481c      	ldr	r0, [pc, #112]	; (8012648 <tcp_output_control_segment+0x90>)
 80125d6:	f003 fa97 	bl	8015b08 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80125da:	683a      	ldr	r2, [r7, #0]
 80125dc:	6879      	ldr	r1, [r7, #4]
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f7fe ff40 	bl	8011464 <tcp_route>
 80125e4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d102      	bne.n	80125f2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80125ec:	23fc      	movs	r3, #252	; 0xfc
 80125ee:	75fb      	strb	r3, [r7, #23]
 80125f0:	e01c      	b.n	801262c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d006      	beq.n	8012606 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	7adb      	ldrb	r3, [r3, #11]
 80125fc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	7a9b      	ldrb	r3, [r3, #10]
 8012602:	757b      	strb	r3, [r7, #21]
 8012604:	e003      	b.n	801260e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012606:	23ff      	movs	r3, #255	; 0xff
 8012608:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801260a:	2300      	movs	r3, #0
 801260c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801260e:	7dba      	ldrb	r2, [r7, #22]
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	9302      	str	r3, [sp, #8]
 8012614:	2306      	movs	r3, #6
 8012616:	9301      	str	r3, [sp, #4]
 8012618:	7d7b      	ldrb	r3, [r7, #21]
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	4613      	mov	r3, r2
 801261e:	683a      	ldr	r2, [r7, #0]
 8012620:	6879      	ldr	r1, [r7, #4]
 8012622:	68b8      	ldr	r0, [r7, #8]
 8012624:	f001 ffa0 	bl	8014568 <ip4_output_if>
 8012628:	4603      	mov	r3, r0
 801262a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801262c:	68b8      	ldr	r0, [r7, #8]
 801262e:	f7fa fdd9 	bl	800d1e4 <pbuf_free>
  return err;
 8012632:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012636:	4618      	mov	r0, r3
 8012638:	3718      	adds	r7, #24
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	080184d4 	.word	0x080184d4
 8012644:	08018c2c 	.word	0x08018c2c
 8012648:	08018528 	.word	0x08018528

0801264c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801264c:	b590      	push	{r4, r7, lr}
 801264e:	b08b      	sub	sp, #44	; 0x2c
 8012650:	af04      	add	r7, sp, #16
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	60b9      	str	r1, [r7, #8]
 8012656:	607a      	str	r2, [r7, #4]
 8012658:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d106      	bne.n	801266e <tcp_rst+0x22>
 8012660:	4b1f      	ldr	r3, [pc, #124]	; (80126e0 <tcp_rst+0x94>)
 8012662:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012666:	491f      	ldr	r1, [pc, #124]	; (80126e4 <tcp_rst+0x98>)
 8012668:	481f      	ldr	r0, [pc, #124]	; (80126e8 <tcp_rst+0x9c>)
 801266a:	f003 fa4d 	bl	8015b08 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012670:	2b00      	cmp	r3, #0
 8012672:	d106      	bne.n	8012682 <tcp_rst+0x36>
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <tcp_rst+0x94>)
 8012676:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801267a:	491c      	ldr	r1, [pc, #112]	; (80126ec <tcp_rst+0xa0>)
 801267c:	481a      	ldr	r0, [pc, #104]	; (80126e8 <tcp_rst+0x9c>)
 801267e:	f003 fa43 	bl	8015b08 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012682:	2300      	movs	r3, #0
 8012684:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012686:	f246 0308 	movw	r3, #24584	; 0x6008
 801268a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801268c:	7dfb      	ldrb	r3, [r7, #23]
 801268e:	b29c      	uxth	r4, r3
 8012690:	68b8      	ldr	r0, [r7, #8]
 8012692:	f7f9 f9ca 	bl	800ba2a <lwip_htonl>
 8012696:	4602      	mov	r2, r0
 8012698:	8abb      	ldrh	r3, [r7, #20]
 801269a:	9303      	str	r3, [sp, #12]
 801269c:	2314      	movs	r3, #20
 801269e:	9302      	str	r3, [sp, #8]
 80126a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	4613      	mov	r3, r2
 80126aa:	2200      	movs	r2, #0
 80126ac:	4621      	mov	r1, r4
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7ff fe94 	bl	80123dc <tcp_output_alloc_header_common>
 80126b4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00c      	beq.n	80126d6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80126bc:	7dfb      	ldrb	r3, [r7, #23]
 80126be:	2200      	movs	r2, #0
 80126c0:	6939      	ldr	r1, [r7, #16]
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f7ff ff3a 	bl	801253c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80126c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	6939      	ldr	r1, [r7, #16]
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7ff ff72 	bl	80125b8 <tcp_output_control_segment>
 80126d4:	e000      	b.n	80126d8 <tcp_rst+0x8c>
    return;
 80126d6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80126d8:	371c      	adds	r7, #28
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd90      	pop	{r4, r7, pc}
 80126de:	bf00      	nop
 80126e0:	080184d4 	.word	0x080184d4
 80126e4:	08018c58 	.word	0x08018c58
 80126e8:	08018528 	.word	0x08018528
 80126ec:	08018c74 	.word	0x08018c74

080126f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80126f0:	b590      	push	{r4, r7, lr}
 80126f2:	b087      	sub	sp, #28
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80126f8:	2300      	movs	r3, #0
 80126fa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80126fc:	2300      	movs	r3, #0
 80126fe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d106      	bne.n	8012714 <tcp_send_empty_ack+0x24>
 8012706:	4b28      	ldr	r3, [pc, #160]	; (80127a8 <tcp_send_empty_ack+0xb8>)
 8012708:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801270c:	4927      	ldr	r1, [pc, #156]	; (80127ac <tcp_send_empty_ack+0xbc>)
 801270e:	4828      	ldr	r0, [pc, #160]	; (80127b0 <tcp_send_empty_ack+0xc0>)
 8012710:	f003 f9fa 	bl	8015b08 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012714:	7dfb      	ldrb	r3, [r7, #23]
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	b2db      	uxtb	r3, r3
 801271a:	f003 0304 	and.w	r3, r3, #4
 801271e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012720:	7d7b      	ldrb	r3, [r7, #21]
 8012722:	b29c      	uxth	r4, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012728:	4618      	mov	r0, r3
 801272a:	f7f9 f97e 	bl	800ba2a <lwip_htonl>
 801272e:	4603      	mov	r3, r0
 8012730:	2200      	movs	r2, #0
 8012732:	4621      	mov	r1, r4
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff fec3 	bl	80124c0 <tcp_output_alloc_header>
 801273a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d109      	bne.n	8012756 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	8b5b      	ldrh	r3, [r3, #26]
 8012746:	f043 0303 	orr.w	r3, r3, #3
 801274a:	b29a      	uxth	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012750:	f06f 0301 	mvn.w	r3, #1
 8012754:	e023      	b.n	801279e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012756:	7dbb      	ldrb	r3, [r7, #22]
 8012758:	7dfa      	ldrb	r2, [r7, #23]
 801275a:	6939      	ldr	r1, [r7, #16]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7ff feed 	bl	801253c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012762:	687a      	ldr	r2, [r7, #4]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	3304      	adds	r3, #4
 8012768:	6939      	ldr	r1, [r7, #16]
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f7ff ff24 	bl	80125b8 <tcp_output_control_segment>
 8012770:	4603      	mov	r3, r0
 8012772:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d007      	beq.n	801278c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	8b5b      	ldrh	r3, [r3, #26]
 8012780:	f043 0303 	orr.w	r3, r3, #3
 8012784:	b29a      	uxth	r2, r3
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	835a      	strh	r2, [r3, #26]
 801278a:	e006      	b.n	801279a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	8b5b      	ldrh	r3, [r3, #26]
 8012790:	f023 0303 	bic.w	r3, r3, #3
 8012794:	b29a      	uxth	r2, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801279e:	4618      	mov	r0, r3
 80127a0:	371c      	adds	r7, #28
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd90      	pop	{r4, r7, pc}
 80127a6:	bf00      	nop
 80127a8:	080184d4 	.word	0x080184d4
 80127ac:	08018c90 	.word	0x08018c90
 80127b0:	08018528 	.word	0x08018528

080127b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80127b4:	b590      	push	{r4, r7, lr}
 80127b6:	b087      	sub	sp, #28
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80127bc:	2300      	movs	r3, #0
 80127be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d106      	bne.n	80127d4 <tcp_keepalive+0x20>
 80127c6:	4b18      	ldr	r3, [pc, #96]	; (8012828 <tcp_keepalive+0x74>)
 80127c8:	f640 0224 	movw	r2, #2084	; 0x824
 80127cc:	4917      	ldr	r1, [pc, #92]	; (801282c <tcp_keepalive+0x78>)
 80127ce:	4818      	ldr	r0, [pc, #96]	; (8012830 <tcp_keepalive+0x7c>)
 80127d0:	f003 f99a 	bl	8015b08 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80127d4:	7dfb      	ldrb	r3, [r7, #23]
 80127d6:	b29c      	uxth	r4, r3
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127dc:	3b01      	subs	r3, #1
 80127de:	4618      	mov	r0, r3
 80127e0:	f7f9 f923 	bl	800ba2a <lwip_htonl>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2200      	movs	r2, #0
 80127e8:	4621      	mov	r1, r4
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f7ff fe68 	bl	80124c0 <tcp_output_alloc_header>
 80127f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d102      	bne.n	80127fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80127f8:	f04f 33ff 	mov.w	r3, #4294967295
 80127fc:	e010      	b.n	8012820 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80127fe:	7dfb      	ldrb	r3, [r7, #23]
 8012800:	2200      	movs	r2, #0
 8012802:	6939      	ldr	r1, [r7, #16]
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f7ff fe99 	bl	801253c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	3304      	adds	r3, #4
 8012810:	6939      	ldr	r1, [r7, #16]
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f7ff fed0 	bl	80125b8 <tcp_output_control_segment>
 8012818:	4603      	mov	r3, r0
 801281a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801281c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012820:	4618      	mov	r0, r3
 8012822:	371c      	adds	r7, #28
 8012824:	46bd      	mov	sp, r7
 8012826:	bd90      	pop	{r4, r7, pc}
 8012828:	080184d4 	.word	0x080184d4
 801282c:	08018cb0 	.word	0x08018cb0
 8012830:	08018528 	.word	0x08018528

08012834 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012834:	b590      	push	{r4, r7, lr}
 8012836:	b08b      	sub	sp, #44	; 0x2c
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801283c:	2300      	movs	r3, #0
 801283e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d106      	bne.n	8012856 <tcp_zero_window_probe+0x22>
 8012848:	4b4c      	ldr	r3, [pc, #304]	; (801297c <tcp_zero_window_probe+0x148>)
 801284a:	f640 024f 	movw	r2, #2127	; 0x84f
 801284e:	494c      	ldr	r1, [pc, #304]	; (8012980 <tcp_zero_window_probe+0x14c>)
 8012850:	484c      	ldr	r0, [pc, #304]	; (8012984 <tcp_zero_window_probe+0x150>)
 8012852:	f003 f959 	bl	8015b08 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801285a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801285c:	6a3b      	ldr	r3, [r7, #32]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d101      	bne.n	8012866 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012862:	2300      	movs	r3, #0
 8012864:	e086      	b.n	8012974 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801286c:	2bff      	cmp	r3, #255	; 0xff
 801286e:	d007      	beq.n	8012880 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012876:	3301      	adds	r3, #1
 8012878:	b2da      	uxtb	r2, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012880:	6a3b      	ldr	r3, [r7, #32]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	899b      	ldrh	r3, [r3, #12]
 8012886:	b29b      	uxth	r3, r3
 8012888:	4618      	mov	r0, r3
 801288a:	f7f9 f8b9 	bl	800ba00 <lwip_htons>
 801288e:	4603      	mov	r3, r0
 8012890:	b2db      	uxtb	r3, r3
 8012892:	f003 0301 	and.w	r3, r3, #1
 8012896:	2b00      	cmp	r3, #0
 8012898:	d005      	beq.n	80128a6 <tcp_zero_window_probe+0x72>
 801289a:	6a3b      	ldr	r3, [r7, #32]
 801289c:	891b      	ldrh	r3, [r3, #8]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <tcp_zero_window_probe+0x72>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e000      	b.n	80128a8 <tcp_zero_window_probe+0x74>
 80128a6:	2300      	movs	r3, #0
 80128a8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80128aa:	7ffb      	ldrb	r3, [r7, #31]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	bf0c      	ite	eq
 80128b0:	2301      	moveq	r3, #1
 80128b2:	2300      	movne	r3, #0
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80128b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128bc:	b299      	uxth	r1, r3
 80128be:	6a3b      	ldr	r3, [r7, #32]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	8bba      	ldrh	r2, [r7, #28]
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ff fdfa 	bl	80124c0 <tcp_output_alloc_header>
 80128cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d102      	bne.n	80128da <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80128d4:	f04f 33ff 	mov.w	r3, #4294967295
 80128d8:	e04c      	b.n	8012974 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80128e0:	7ffb      	ldrb	r3, [r7, #31]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d011      	beq.n	801290a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	899b      	ldrh	r3, [r3, #12]
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	b21b      	sxth	r3, r3
 80128ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80128f2:	b21c      	sxth	r4, r3
 80128f4:	2011      	movs	r0, #17
 80128f6:	f7f9 f883 	bl	800ba00 <lwip_htons>
 80128fa:	4603      	mov	r3, r0
 80128fc:	b21b      	sxth	r3, r3
 80128fe:	4323      	orrs	r3, r4
 8012900:	b21b      	sxth	r3, r3
 8012902:	b29a      	uxth	r2, r3
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	819a      	strh	r2, [r3, #12]
 8012908:	e010      	b.n	801292c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	3314      	adds	r3, #20
 8012910:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	6858      	ldr	r0, [r3, #4]
 8012916:	6a3b      	ldr	r3, [r7, #32]
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	891a      	ldrh	r2, [r3, #8]
 801291c:	6a3b      	ldr	r3, [r7, #32]
 801291e:	891b      	ldrh	r3, [r3, #8]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	b29b      	uxth	r3, r3
 8012924:	2201      	movs	r2, #1
 8012926:	6939      	ldr	r1, [r7, #16]
 8012928:	f7fa fe52 	bl	800d5d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801292c:	6a3b      	ldr	r3, [r7, #32]
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	4618      	mov	r0, r3
 8012934:	f7f9 f879 	bl	800ba2a <lwip_htonl>
 8012938:	4603      	mov	r3, r0
 801293a:	3301      	adds	r3, #1
 801293c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	2b00      	cmp	r3, #0
 8012948:	da02      	bge.n	8012950 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012954:	2200      	movs	r2, #0
 8012956:	69b9      	ldr	r1, [r7, #24]
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7ff fdef 	bl	801253c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	3304      	adds	r3, #4
 8012964:	69b9      	ldr	r1, [r7, #24]
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f7ff fe26 	bl	80125b8 <tcp_output_control_segment>
 801296c:	4603      	mov	r3, r0
 801296e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012970:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012974:	4618      	mov	r0, r3
 8012976:	372c      	adds	r7, #44	; 0x2c
 8012978:	46bd      	mov	sp, r7
 801297a:	bd90      	pop	{r4, r7, pc}
 801297c:	080184d4 	.word	0x080184d4
 8012980:	08018ccc 	.word	0x08018ccc
 8012984:	08018528 	.word	0x08018528

08012988 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012990:	f7fa ff0c 	bl	800d7ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012994:	4b0a      	ldr	r3, [pc, #40]	; (80129c0 <tcpip_tcp_timer+0x38>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d103      	bne.n	80129a4 <tcpip_tcp_timer+0x1c>
 801299c:	4b09      	ldr	r3, [pc, #36]	; (80129c4 <tcpip_tcp_timer+0x3c>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d005      	beq.n	80129b0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80129a4:	2200      	movs	r2, #0
 80129a6:	4908      	ldr	r1, [pc, #32]	; (80129c8 <tcpip_tcp_timer+0x40>)
 80129a8:	20fa      	movs	r0, #250	; 0xfa
 80129aa:	f000 f8f3 	bl	8012b94 <sys_timeout>
 80129ae:	e003      	b.n	80129b8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80129b0:	4b06      	ldr	r3, [pc, #24]	; (80129cc <tcpip_tcp_timer+0x44>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
  }
}
 80129b6:	bf00      	nop
 80129b8:	bf00      	nop
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	2004506c 	.word	0x2004506c
 80129c4:	20045070 	.word	0x20045070
 80129c8:	08012989 	.word	0x08012989
 80129cc:	200450b8 	.word	0x200450b8

080129d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80129d4:	4b0a      	ldr	r3, [pc, #40]	; (8012a00 <tcp_timer_needed+0x30>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d10f      	bne.n	80129fc <tcp_timer_needed+0x2c>
 80129dc:	4b09      	ldr	r3, [pc, #36]	; (8012a04 <tcp_timer_needed+0x34>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d103      	bne.n	80129ec <tcp_timer_needed+0x1c>
 80129e4:	4b08      	ldr	r3, [pc, #32]	; (8012a08 <tcp_timer_needed+0x38>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d007      	beq.n	80129fc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80129ec:	4b04      	ldr	r3, [pc, #16]	; (8012a00 <tcp_timer_needed+0x30>)
 80129ee:	2201      	movs	r2, #1
 80129f0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80129f2:	2200      	movs	r2, #0
 80129f4:	4905      	ldr	r1, [pc, #20]	; (8012a0c <tcp_timer_needed+0x3c>)
 80129f6:	20fa      	movs	r0, #250	; 0xfa
 80129f8:	f000 f8cc 	bl	8012b94 <sys_timeout>
  }
}
 80129fc:	bf00      	nop
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	200450b8 	.word	0x200450b8
 8012a04:	2004506c 	.word	0x2004506c
 8012a08:	20045070 	.word	0x20045070
 8012a0c:	08012989 	.word	0x08012989

08012a10 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012a1c:	200a      	movs	r0, #10
 8012a1e:	f7f9 fcc7 	bl	800c3b0 <memp_malloc>
 8012a22:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d109      	bne.n	8012a3e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d151      	bne.n	8012ad4 <sys_timeout_abs+0xc4>
 8012a30:	4b2a      	ldr	r3, [pc, #168]	; (8012adc <sys_timeout_abs+0xcc>)
 8012a32:	22be      	movs	r2, #190	; 0xbe
 8012a34:	492a      	ldr	r1, [pc, #168]	; (8012ae0 <sys_timeout_abs+0xd0>)
 8012a36:	482b      	ldr	r0, [pc, #172]	; (8012ae4 <sys_timeout_abs+0xd4>)
 8012a38:	f003 f866 	bl	8015b08 <iprintf>
    return;
 8012a3c:	e04a      	b.n	8012ad4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	2200      	movs	r2, #0
 8012a42:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	68ba      	ldr	r2, [r7, #8]
 8012a48:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012a56:	4b24      	ldr	r3, [pc, #144]	; (8012ae8 <sys_timeout_abs+0xd8>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d103      	bne.n	8012a66 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012a5e:	4a22      	ldr	r2, [pc, #136]	; (8012ae8 <sys_timeout_abs+0xd8>)
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	6013      	str	r3, [r2, #0]
    return;
 8012a64:	e037      	b.n	8012ad6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	685a      	ldr	r2, [r3, #4]
 8012a6a:	4b1f      	ldr	r3, [pc, #124]	; (8012ae8 <sys_timeout_abs+0xd8>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	1ad3      	subs	r3, r2, r3
 8012a72:	0fdb      	lsrs	r3, r3, #31
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d007      	beq.n	8012a8e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012a7e:	4b1a      	ldr	r3, [pc, #104]	; (8012ae8 <sys_timeout_abs+0xd8>)
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012a86:	4a18      	ldr	r2, [pc, #96]	; (8012ae8 <sys_timeout_abs+0xd8>)
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	e023      	b.n	8012ad6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a8e:	4b16      	ldr	r3, [pc, #88]	; (8012ae8 <sys_timeout_abs+0xd8>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	617b      	str	r3, [r7, #20]
 8012a94:	e01a      	b.n	8012acc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00b      	beq.n	8012ab6 <sys_timeout_abs+0xa6>
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	685a      	ldr	r2, [r3, #4]
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	0fdb      	lsrs	r3, r3, #31
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d007      	beq.n	8012ac6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	693a      	ldr	r2, [r7, #16]
 8012ac2:	601a      	str	r2, [r3, #0]
        break;
 8012ac4:	e007      	b.n	8012ad6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	617b      	str	r3, [r7, #20]
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d1e1      	bne.n	8012a96 <sys_timeout_abs+0x86>
 8012ad2:	e000      	b.n	8012ad6 <sys_timeout_abs+0xc6>
    return;
 8012ad4:	bf00      	nop
      }
    }
  }
}
 8012ad6:	3718      	adds	r7, #24
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}
 8012adc:	08018cf0 	.word	0x08018cf0
 8012ae0:	08018d24 	.word	0x08018d24
 8012ae4:	08018d64 	.word	0x08018d64
 8012ae8:	200450b0 	.word	0x200450b0

08012aec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b086      	sub	sp, #24
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	4798      	blx	r3

  now = sys_now();
 8012afe:	f7f5 fb59 	bl	80081b4 <sys_now>
 8012b02:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	4b0f      	ldr	r3, [pc, #60]	; (8012b48 <lwip_cyclic_timer+0x5c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	0fdb      	lsrs	r3, r3, #31
 8012b18:	f003 0301 	and.w	r3, r3, #1
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d009      	beq.n	8012b36 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	4413      	add	r3, r2
 8012b2a:	687a      	ldr	r2, [r7, #4]
 8012b2c:	4907      	ldr	r1, [pc, #28]	; (8012b4c <lwip_cyclic_timer+0x60>)
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff ff6e 	bl	8012a10 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012b34:	e004      	b.n	8012b40 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	4904      	ldr	r1, [pc, #16]	; (8012b4c <lwip_cyclic_timer+0x60>)
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	f7ff ff68 	bl	8012a10 <sys_timeout_abs>
}
 8012b40:	bf00      	nop
 8012b42:	3718      	adds	r7, #24
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	200450b4 	.word	0x200450b4
 8012b4c:	08012aed 	.word	0x08012aed

08012b50 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012b56:	2301      	movs	r3, #1
 8012b58:	607b      	str	r3, [r7, #4]
 8012b5a:	e00e      	b.n	8012b7a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012b5c:	4a0b      	ldr	r2, [pc, #44]	; (8012b8c <sys_timeouts_init+0x3c>)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	00db      	lsls	r3, r3, #3
 8012b68:	4a08      	ldr	r2, [pc, #32]	; (8012b8c <sys_timeouts_init+0x3c>)
 8012b6a:	4413      	add	r3, r2
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	4908      	ldr	r1, [pc, #32]	; (8012b90 <sys_timeouts_init+0x40>)
 8012b70:	f000 f810 	bl	8012b94 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	3301      	adds	r3, #1
 8012b78:	607b      	str	r3, [r7, #4]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2b02      	cmp	r3, #2
 8012b7e:	d9ed      	bls.n	8012b5c <sys_timeouts_init+0xc>
  }
}
 8012b80:	bf00      	nop
 8012b82:	bf00      	nop
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	08019924 	.word	0x08019924
 8012b90:	08012aed 	.word	0x08012aed

08012b94 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b086      	sub	sp, #24
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ba6:	d306      	bcc.n	8012bb6 <sys_timeout+0x22>
 8012ba8:	4b0a      	ldr	r3, [pc, #40]	; (8012bd4 <sys_timeout+0x40>)
 8012baa:	f240 1229 	movw	r2, #297	; 0x129
 8012bae:	490a      	ldr	r1, [pc, #40]	; (8012bd8 <sys_timeout+0x44>)
 8012bb0:	480a      	ldr	r0, [pc, #40]	; (8012bdc <sys_timeout+0x48>)
 8012bb2:	f002 ffa9 	bl	8015b08 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012bb6:	f7f5 fafd 	bl	80081b4 <sys_now>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	4413      	add	r3, r2
 8012bc0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	68b9      	ldr	r1, [r7, #8]
 8012bc6:	6978      	ldr	r0, [r7, #20]
 8012bc8:	f7ff ff22 	bl	8012a10 <sys_timeout_abs>
#endif
}
 8012bcc:	bf00      	nop
 8012bce:	3718      	adds	r7, #24
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	08018cf0 	.word	0x08018cf0
 8012bd8:	08018d8c 	.word	0x08018d8c
 8012bdc:	08018d64 	.word	0x08018d64

08012be0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012be6:	f7f5 fae5 	bl	80081b4 <sys_now>
 8012bea:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012bec:	4b17      	ldr	r3, [pc, #92]	; (8012c4c <sys_check_timeouts+0x6c>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d022      	beq.n	8012c3e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	68fa      	ldr	r2, [r7, #12]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	0fdb      	lsrs	r3, r3, #31
 8012c02:	f003 0301 	and.w	r3, r3, #1
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d11a      	bne.n	8012c42 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a0e      	ldr	r2, [pc, #56]	; (8012c4c <sys_check_timeouts+0x6c>)
 8012c12:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	68db      	ldr	r3, [r3, #12]
 8012c1e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	4a0a      	ldr	r2, [pc, #40]	; (8012c50 <sys_check_timeouts+0x70>)
 8012c26:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012c28:	68b9      	ldr	r1, [r7, #8]
 8012c2a:	200a      	movs	r0, #10
 8012c2c:	f7f9 fc36 	bl	800c49c <memp_free>
    if (handler != NULL) {
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d0da      	beq.n	8012bec <sys_check_timeouts+0xc>
      handler(arg);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6838      	ldr	r0, [r7, #0]
 8012c3a:	4798      	blx	r3
  do {
 8012c3c:	e7d6      	b.n	8012bec <sys_check_timeouts+0xc>
      return;
 8012c3e:	bf00      	nop
 8012c40:	e000      	b.n	8012c44 <sys_check_timeouts+0x64>
      return;
 8012c42:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	200450b0 	.word	0x200450b0
 8012c50:	200450b4 	.word	0x200450b4

08012c54 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012c5a:	4b16      	ldr	r3, [pc, #88]	; (8012cb4 <sys_timeouts_sleeptime+0x60>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d102      	bne.n	8012c68 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012c62:	f04f 33ff 	mov.w	r3, #4294967295
 8012c66:	e020      	b.n	8012caa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012c68:	f7f5 faa4 	bl	80081b4 <sys_now>
 8012c6c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012c6e:	4b11      	ldr	r3, [pc, #68]	; (8012cb4 <sys_timeouts_sleeptime+0x60>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	685a      	ldr	r2, [r3, #4]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	0fdb      	lsrs	r3, r3, #31
 8012c7a:	f003 0301 	and.w	r3, r3, #1
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d001      	beq.n	8012c88 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012c84:	2300      	movs	r3, #0
 8012c86:	e010      	b.n	8012caa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012c88:	4b0a      	ldr	r3, [pc, #40]	; (8012cb4 <sys_timeouts_sleeptime+0x60>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	685a      	ldr	r2, [r3, #4]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	1ad3      	subs	r3, r2, r3
 8012c92:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	da06      	bge.n	8012ca8 <sys_timeouts_sleeptime+0x54>
 8012c9a:	4b07      	ldr	r3, [pc, #28]	; (8012cb8 <sys_timeouts_sleeptime+0x64>)
 8012c9c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012ca0:	4906      	ldr	r1, [pc, #24]	; (8012cbc <sys_timeouts_sleeptime+0x68>)
 8012ca2:	4807      	ldr	r0, [pc, #28]	; (8012cc0 <sys_timeouts_sleeptime+0x6c>)
 8012ca4:	f002 ff30 	bl	8015b08 <iprintf>
    return ret;
 8012ca8:	683b      	ldr	r3, [r7, #0]
  }
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	200450b0 	.word	0x200450b0
 8012cb8:	08018cf0 	.word	0x08018cf0
 8012cbc:	08018dc4 	.word	0x08018dc4
 8012cc0:	08018d64 	.word	0x08018d64

08012cc4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012cc8:	f002 fd92 	bl	80157f0 <rand>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	4b01      	ldr	r3, [pc, #4]	; (8012ce4 <udp_init+0x20>)
 8012cde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ce0:	bf00      	nop
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	20000030 	.word	0x20000030

08012ce8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	4613      	mov	r3, r2
 8012cf4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d105      	bne.n	8012d08 <udp_input_local_match+0x20>
 8012cfc:	4b27      	ldr	r3, [pc, #156]	; (8012d9c <udp_input_local_match+0xb4>)
 8012cfe:	2287      	movs	r2, #135	; 0x87
 8012d00:	4927      	ldr	r1, [pc, #156]	; (8012da0 <udp_input_local_match+0xb8>)
 8012d02:	4828      	ldr	r0, [pc, #160]	; (8012da4 <udp_input_local_match+0xbc>)
 8012d04:	f002 ff00 	bl	8015b08 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d105      	bne.n	8012d1a <udp_input_local_match+0x32>
 8012d0e:	4b23      	ldr	r3, [pc, #140]	; (8012d9c <udp_input_local_match+0xb4>)
 8012d10:	2288      	movs	r2, #136	; 0x88
 8012d12:	4925      	ldr	r1, [pc, #148]	; (8012da8 <udp_input_local_match+0xc0>)
 8012d14:	4823      	ldr	r0, [pc, #140]	; (8012da4 <udp_input_local_match+0xbc>)
 8012d16:	f002 fef7 	bl	8015b08 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	7a1b      	ldrb	r3, [r3, #8]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d00b      	beq.n	8012d3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	7a1a      	ldrb	r2, [r3, #8]
 8012d26:	4b21      	ldr	r3, [pc, #132]	; (8012dac <udp_input_local_match+0xc4>)
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d2e:	3301      	adds	r3, #1
 8012d30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d001      	beq.n	8012d3a <udp_input_local_match+0x52>
    return 0;
 8012d36:	2300      	movs	r3, #0
 8012d38:	e02b      	b.n	8012d92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012d3a:	79fb      	ldrb	r3, [r7, #7]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d018      	beq.n	8012d72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d013      	beq.n	8012d6e <udp_input_local_match+0x86>
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00f      	beq.n	8012d6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012d4e:	4b17      	ldr	r3, [pc, #92]	; (8012dac <udp_input_local_match+0xc4>)
 8012d50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d56:	d00a      	beq.n	8012d6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	4b13      	ldr	r3, [pc, #76]	; (8012dac <udp_input_local_match+0xc4>)
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	405a      	eors	r2, r3
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	3308      	adds	r3, #8
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d110      	bne.n	8012d90 <udp_input_local_match+0xa8>
          return 1;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e00f      	b.n	8012d92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d009      	beq.n	8012d8c <udp_input_local_match+0xa4>
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d005      	beq.n	8012d8c <udp_input_local_match+0xa4>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	4b09      	ldr	r3, [pc, #36]	; (8012dac <udp_input_local_match+0xc4>)
 8012d86:	695b      	ldr	r3, [r3, #20]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d101      	bne.n	8012d90 <udp_input_local_match+0xa8>
        return 1;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e000      	b.n	8012d92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	08018dd8 	.word	0x08018dd8
 8012da0:	08018e08 	.word	0x08018e08
 8012da4:	08018e2c 	.word	0x08018e2c
 8012da8:	08018e54 	.word	0x08018e54
 8012dac:	2004190c 	.word	0x2004190c

08012db0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012db0:	b590      	push	{r4, r7, lr}
 8012db2:	b08d      	sub	sp, #52	; 0x34
 8012db4:	af02      	add	r7, sp, #8
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d105      	bne.n	8012dd0 <udp_input+0x20>
 8012dc4:	4b7c      	ldr	r3, [pc, #496]	; (8012fb8 <udp_input+0x208>)
 8012dc6:	22cf      	movs	r2, #207	; 0xcf
 8012dc8:	497c      	ldr	r1, [pc, #496]	; (8012fbc <udp_input+0x20c>)
 8012dca:	487d      	ldr	r0, [pc, #500]	; (8012fc0 <udp_input+0x210>)
 8012dcc:	f002 fe9c 	bl	8015b08 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d105      	bne.n	8012de2 <udp_input+0x32>
 8012dd6:	4b78      	ldr	r3, [pc, #480]	; (8012fb8 <udp_input+0x208>)
 8012dd8:	22d0      	movs	r2, #208	; 0xd0
 8012dda:	497a      	ldr	r1, [pc, #488]	; (8012fc4 <udp_input+0x214>)
 8012ddc:	4878      	ldr	r0, [pc, #480]	; (8012fc0 <udp_input+0x210>)
 8012dde:	f002 fe93 	bl	8015b08 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	895b      	ldrh	r3, [r3, #10]
 8012de6:	2b07      	cmp	r3, #7
 8012de8:	d803      	bhi.n	8012df2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7fa f9fa 	bl	800d1e4 <pbuf_free>
    goto end;
 8012df0:	e0de      	b.n	8012fb0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012df8:	4b73      	ldr	r3, [pc, #460]	; (8012fc8 <udp_input+0x218>)
 8012dfa:	695b      	ldr	r3, [r3, #20]
 8012dfc:	4a72      	ldr	r2, [pc, #456]	; (8012fc8 <udp_input+0x218>)
 8012dfe:	6812      	ldr	r2, [r2, #0]
 8012e00:	4611      	mov	r1, r2
 8012e02:	4618      	mov	r0, r3
 8012e04:	f001 fc88 	bl	8014718 <ip4_addr_isbroadcast_u32>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	881b      	ldrh	r3, [r3, #0]
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7f8 fdf4 	bl	800ba00 <lwip_htons>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	885b      	ldrh	r3, [r3, #2]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7f8 fdec 	bl	800ba00 <lwip_htons>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012e30:	2300      	movs	r3, #0
 8012e32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012e34:	2300      	movs	r3, #0
 8012e36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e38:	4b64      	ldr	r3, [pc, #400]	; (8012fcc <udp_input+0x21c>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8012e3e:	e054      	b.n	8012eea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	8a5b      	ldrh	r3, [r3, #18]
 8012e44:	89fa      	ldrh	r2, [r7, #14]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d14a      	bne.n	8012ee0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012e4a:	7cfb      	ldrb	r3, [r7, #19]
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	6839      	ldr	r1, [r7, #0]
 8012e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e52:	f7ff ff49 	bl	8012ce8 <udp_input_local_match>
 8012e56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d041      	beq.n	8012ee0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5e:	7c1b      	ldrb	r3, [r3, #16]
 8012e60:	f003 0304 	and.w	r3, r3, #4
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d11d      	bne.n	8012ea4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d102      	bne.n	8012e74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e70:	61fb      	str	r3, [r7, #28]
 8012e72:	e017      	b.n	8012ea4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012e74:	7cfb      	ldrb	r3, [r7, #19]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d014      	beq.n	8012ea4 <udp_input+0xf4>
 8012e7a:	4b53      	ldr	r3, [pc, #332]	; (8012fc8 <udp_input+0x218>)
 8012e7c:	695b      	ldr	r3, [r3, #20]
 8012e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e82:	d10f      	bne.n	8012ea4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012e84:	69fb      	ldr	r3, [r7, #28]
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	3304      	adds	r3, #4
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d008      	beq.n	8012ea4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	3304      	adds	r3, #4
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d101      	bne.n	8012ea4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea6:	8a9b      	ldrh	r3, [r3, #20]
 8012ea8:	8a3a      	ldrh	r2, [r7, #16]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d118      	bne.n	8012ee0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d005      	beq.n	8012ec2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb8:	685a      	ldr	r2, [r3, #4]
 8012eba:	4b43      	ldr	r3, [pc, #268]	; (8012fc8 <udp_input+0x218>)
 8012ebc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d10e      	bne.n	8012ee0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012ec2:	6a3b      	ldr	r3, [r7, #32]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d014      	beq.n	8012ef2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	68da      	ldr	r2, [r3, #12]
 8012ecc:	6a3b      	ldr	r3, [r7, #32]
 8012ece:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012ed0:	4b3e      	ldr	r3, [pc, #248]	; (8012fcc <udp_input+0x21c>)
 8012ed2:	681a      	ldr	r2, [r3, #0]
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012ed8:	4a3c      	ldr	r2, [pc, #240]	; (8012fcc <udp_input+0x21c>)
 8012eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012edc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012ede:	e008      	b.n	8012ef2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8012eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1a7      	bne.n	8012e40 <udp_input+0x90>
 8012ef0:	e000      	b.n	8012ef4 <udp_input+0x144>
        break;
 8012ef2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d101      	bne.n	8012efe <udp_input+0x14e>
    pcb = uncon_pcb;
 8012efa:	69fb      	ldr	r3, [r7, #28]
 8012efc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d002      	beq.n	8012f0a <udp_input+0x15a>
    for_us = 1;
 8012f04:	2301      	movs	r3, #1
 8012f06:	76fb      	strb	r3, [r7, #27]
 8012f08:	e00a      	b.n	8012f20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	3304      	adds	r3, #4
 8012f0e:	681a      	ldr	r2, [r3, #0]
 8012f10:	4b2d      	ldr	r3, [pc, #180]	; (8012fc8 <udp_input+0x218>)
 8012f12:	695b      	ldr	r3, [r3, #20]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	bf0c      	ite	eq
 8012f18:	2301      	moveq	r3, #1
 8012f1a:	2300      	movne	r3, #0
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012f20:	7efb      	ldrb	r3, [r7, #27]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d041      	beq.n	8012faa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012f26:	2108      	movs	r1, #8
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7fa f8d5 	bl	800d0d8 <pbuf_remove_header>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00a      	beq.n	8012f4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012f34:	4b20      	ldr	r3, [pc, #128]	; (8012fb8 <udp_input+0x208>)
 8012f36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012f3a:	4925      	ldr	r1, [pc, #148]	; (8012fd0 <udp_input+0x220>)
 8012f3c:	4820      	ldr	r0, [pc, #128]	; (8012fc0 <udp_input+0x210>)
 8012f3e:	f002 fde3 	bl	8015b08 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7fa f94e 	bl	800d1e4 <pbuf_free>
      goto end;
 8012f48:	e032      	b.n	8012fb0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d012      	beq.n	8012f76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f52:	699b      	ldr	r3, [r3, #24]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00a      	beq.n	8012f6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	699c      	ldr	r4, [r3, #24]
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	69d8      	ldr	r0, [r3, #28]
 8012f60:	8a3b      	ldrh	r3, [r7, #16]
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	4b1b      	ldr	r3, [pc, #108]	; (8012fd4 <udp_input+0x224>)
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012f6c:	e021      	b.n	8012fb2 <udp_input+0x202>
        pbuf_free(p);
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7fa f938 	bl	800d1e4 <pbuf_free>
        goto end;
 8012f74:	e01c      	b.n	8012fb0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012f76:	7cfb      	ldrb	r3, [r7, #19]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d112      	bne.n	8012fa2 <udp_input+0x1f2>
 8012f7c:	4b12      	ldr	r3, [pc, #72]	; (8012fc8 <udp_input+0x218>)
 8012f7e:	695b      	ldr	r3, [r3, #20]
 8012f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f84:	2be0      	cmp	r3, #224	; 0xe0
 8012f86:	d00c      	beq.n	8012fa2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012f88:	4b0f      	ldr	r3, [pc, #60]	; (8012fc8 <udp_input+0x218>)
 8012f8a:	899b      	ldrh	r3, [r3, #12]
 8012f8c:	3308      	adds	r3, #8
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	b21b      	sxth	r3, r3
 8012f92:	4619      	mov	r1, r3
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7fa f912 	bl	800d1be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012f9a:	2103      	movs	r1, #3
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f001 f89b 	bl	80140d8 <icmp_dest_unreach>
      pbuf_free(p);
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7fa f91e 	bl	800d1e4 <pbuf_free>
  return;
 8012fa8:	e003      	b.n	8012fb2 <udp_input+0x202>
    pbuf_free(p);
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7fa f91a 	bl	800d1e4 <pbuf_free>
  return;
 8012fb0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012fb2:	372c      	adds	r7, #44	; 0x2c
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd90      	pop	{r4, r7, pc}
 8012fb8:	08018dd8 	.word	0x08018dd8
 8012fbc:	08018e7c 	.word	0x08018e7c
 8012fc0:	08018e2c 	.word	0x08018e2c
 8012fc4:	08018e94 	.word	0x08018e94
 8012fc8:	2004190c 	.word	0x2004190c
 8012fcc:	200450bc 	.word	0x200450bc
 8012fd0:	08018eb0 	.word	0x08018eb0
 8012fd4:	2004191c 	.word	0x2004191c

08012fd8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012fd8:	b480      	push	{r7}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d01e      	beq.n	8013026 <udp_netif_ip_addr_changed+0x4e>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d01a      	beq.n	8013026 <udp_netif_ip_addr_changed+0x4e>
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d017      	beq.n	8013026 <udp_netif_ip_addr_changed+0x4e>
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d013      	beq.n	8013026 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012ffe:	4b0d      	ldr	r3, [pc, #52]	; (8013034 <udp_netif_ip_addr_changed+0x5c>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	60fb      	str	r3, [r7, #12]
 8013004:	e00c      	b.n	8013020 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	429a      	cmp	r2, r3
 8013010:	d103      	bne.n	801301a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d1ef      	bne.n	8013006 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013026:	bf00      	nop
 8013028:	3714      	adds	r7, #20
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	200450bc 	.word	0x200450bc

08013038 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013040:	4915      	ldr	r1, [pc, #84]	; (8013098 <etharp_free_entry+0x60>)
 8013042:	687a      	ldr	r2, [r7, #4]
 8013044:	4613      	mov	r3, r2
 8013046:	005b      	lsls	r3, r3, #1
 8013048:	4413      	add	r3, r2
 801304a:	00db      	lsls	r3, r3, #3
 801304c:	440b      	add	r3, r1
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d013      	beq.n	801307c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013054:	4910      	ldr	r1, [pc, #64]	; (8013098 <etharp_free_entry+0x60>)
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	4613      	mov	r3, r2
 801305a:	005b      	lsls	r3, r3, #1
 801305c:	4413      	add	r3, r2
 801305e:	00db      	lsls	r3, r3, #3
 8013060:	440b      	add	r3, r1
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4618      	mov	r0, r3
 8013066:	f7fa f8bd 	bl	800d1e4 <pbuf_free>
    arp_table[i].q = NULL;
 801306a:	490b      	ldr	r1, [pc, #44]	; (8013098 <etharp_free_entry+0x60>)
 801306c:	687a      	ldr	r2, [r7, #4]
 801306e:	4613      	mov	r3, r2
 8013070:	005b      	lsls	r3, r3, #1
 8013072:	4413      	add	r3, r2
 8013074:	00db      	lsls	r3, r3, #3
 8013076:	440b      	add	r3, r1
 8013078:	2200      	movs	r2, #0
 801307a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801307c:	4906      	ldr	r1, [pc, #24]	; (8013098 <etharp_free_entry+0x60>)
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	4613      	mov	r3, r2
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	4413      	add	r3, r2
 8013086:	00db      	lsls	r3, r3, #3
 8013088:	440b      	add	r3, r1
 801308a:	3314      	adds	r3, #20
 801308c:	2200      	movs	r2, #0
 801308e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013090:	bf00      	nop
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}
 8013098:	200450c0 	.word	0x200450c0

0801309c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130a2:	2300      	movs	r3, #0
 80130a4:	607b      	str	r3, [r7, #4]
 80130a6:	e096      	b.n	80131d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80130a8:	494f      	ldr	r1, [pc, #316]	; (80131e8 <etharp_tmr+0x14c>)
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	4613      	mov	r3, r2
 80130ae:	005b      	lsls	r3, r3, #1
 80130b0:	4413      	add	r3, r2
 80130b2:	00db      	lsls	r3, r3, #3
 80130b4:	440b      	add	r3, r1
 80130b6:	3314      	adds	r3, #20
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80130bc:	78fb      	ldrb	r3, [r7, #3]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	f000 8086 	beq.w	80131d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80130c4:	4948      	ldr	r1, [pc, #288]	; (80131e8 <etharp_tmr+0x14c>)
 80130c6:	687a      	ldr	r2, [r7, #4]
 80130c8:	4613      	mov	r3, r2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	4413      	add	r3, r2
 80130ce:	00db      	lsls	r3, r3, #3
 80130d0:	440b      	add	r3, r1
 80130d2:	3312      	adds	r3, #18
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	3301      	adds	r3, #1
 80130d8:	b298      	uxth	r0, r3
 80130da:	4943      	ldr	r1, [pc, #268]	; (80131e8 <etharp_tmr+0x14c>)
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	4613      	mov	r3, r2
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	4413      	add	r3, r2
 80130e4:	00db      	lsls	r3, r3, #3
 80130e6:	440b      	add	r3, r1
 80130e8:	3312      	adds	r3, #18
 80130ea:	4602      	mov	r2, r0
 80130ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80130ee:	493e      	ldr	r1, [pc, #248]	; (80131e8 <etharp_tmr+0x14c>)
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	4613      	mov	r3, r2
 80130f4:	005b      	lsls	r3, r3, #1
 80130f6:	4413      	add	r3, r2
 80130f8:	00db      	lsls	r3, r3, #3
 80130fa:	440b      	add	r3, r1
 80130fc:	3312      	adds	r3, #18
 80130fe:	881b      	ldrh	r3, [r3, #0]
 8013100:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013104:	d215      	bcs.n	8013132 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013106:	4938      	ldr	r1, [pc, #224]	; (80131e8 <etharp_tmr+0x14c>)
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	4613      	mov	r3, r2
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	4413      	add	r3, r2
 8013110:	00db      	lsls	r3, r3, #3
 8013112:	440b      	add	r3, r1
 8013114:	3314      	adds	r3, #20
 8013116:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013118:	2b01      	cmp	r3, #1
 801311a:	d10e      	bne.n	801313a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801311c:	4932      	ldr	r1, [pc, #200]	; (80131e8 <etharp_tmr+0x14c>)
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	4613      	mov	r3, r2
 8013122:	005b      	lsls	r3, r3, #1
 8013124:	4413      	add	r3, r2
 8013126:	00db      	lsls	r3, r3, #3
 8013128:	440b      	add	r3, r1
 801312a:	3312      	adds	r3, #18
 801312c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801312e:	2b04      	cmp	r3, #4
 8013130:	d903      	bls.n	801313a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013132:	6878      	ldr	r0, [r7, #4]
 8013134:	f7ff ff80 	bl	8013038 <etharp_free_entry>
 8013138:	e04a      	b.n	80131d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801313a:	492b      	ldr	r1, [pc, #172]	; (80131e8 <etharp_tmr+0x14c>)
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	4613      	mov	r3, r2
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	4413      	add	r3, r2
 8013144:	00db      	lsls	r3, r3, #3
 8013146:	440b      	add	r3, r1
 8013148:	3314      	adds	r3, #20
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	2b03      	cmp	r3, #3
 801314e:	d10a      	bne.n	8013166 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013150:	4925      	ldr	r1, [pc, #148]	; (80131e8 <etharp_tmr+0x14c>)
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	4613      	mov	r3, r2
 8013156:	005b      	lsls	r3, r3, #1
 8013158:	4413      	add	r3, r2
 801315a:	00db      	lsls	r3, r3, #3
 801315c:	440b      	add	r3, r1
 801315e:	3314      	adds	r3, #20
 8013160:	2204      	movs	r2, #4
 8013162:	701a      	strb	r2, [r3, #0]
 8013164:	e034      	b.n	80131d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013166:	4920      	ldr	r1, [pc, #128]	; (80131e8 <etharp_tmr+0x14c>)
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	4613      	mov	r3, r2
 801316c:	005b      	lsls	r3, r3, #1
 801316e:	4413      	add	r3, r2
 8013170:	00db      	lsls	r3, r3, #3
 8013172:	440b      	add	r3, r1
 8013174:	3314      	adds	r3, #20
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b04      	cmp	r3, #4
 801317a:	d10a      	bne.n	8013192 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801317c:	491a      	ldr	r1, [pc, #104]	; (80131e8 <etharp_tmr+0x14c>)
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	4613      	mov	r3, r2
 8013182:	005b      	lsls	r3, r3, #1
 8013184:	4413      	add	r3, r2
 8013186:	00db      	lsls	r3, r3, #3
 8013188:	440b      	add	r3, r1
 801318a:	3314      	adds	r3, #20
 801318c:	2202      	movs	r2, #2
 801318e:	701a      	strb	r2, [r3, #0]
 8013190:	e01e      	b.n	80131d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013192:	4915      	ldr	r1, [pc, #84]	; (80131e8 <etharp_tmr+0x14c>)
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	4613      	mov	r3, r2
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	4413      	add	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	440b      	add	r3, r1
 80131a0:	3314      	adds	r3, #20
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d113      	bne.n	80131d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80131a8:	490f      	ldr	r1, [pc, #60]	; (80131e8 <etharp_tmr+0x14c>)
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	4613      	mov	r3, r2
 80131ae:	005b      	lsls	r3, r3, #1
 80131b0:	4413      	add	r3, r2
 80131b2:	00db      	lsls	r3, r3, #3
 80131b4:	440b      	add	r3, r1
 80131b6:	3308      	adds	r3, #8
 80131b8:	6818      	ldr	r0, [r3, #0]
 80131ba:	687a      	ldr	r2, [r7, #4]
 80131bc:	4613      	mov	r3, r2
 80131be:	005b      	lsls	r3, r3, #1
 80131c0:	4413      	add	r3, r2
 80131c2:	00db      	lsls	r3, r3, #3
 80131c4:	4a08      	ldr	r2, [pc, #32]	; (80131e8 <etharp_tmr+0x14c>)
 80131c6:	4413      	add	r3, r2
 80131c8:	3304      	adds	r3, #4
 80131ca:	4619      	mov	r1, r3
 80131cc:	f000 fe6e 	bl	8013eac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	3301      	adds	r3, #1
 80131d4:	607b      	str	r3, [r7, #4]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2b09      	cmp	r3, #9
 80131da:	f77f af65 	ble.w	80130a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80131de:	bf00      	nop
 80131e0:	bf00      	nop
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	200450c0 	.word	0x200450c0

080131ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b08a      	sub	sp, #40	; 0x28
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	460b      	mov	r3, r1
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80131fa:	230a      	movs	r3, #10
 80131fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80131fe:	230a      	movs	r3, #10
 8013200:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013202:	230a      	movs	r3, #10
 8013204:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801320a:	230a      	movs	r3, #10
 801320c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	83bb      	strh	r3, [r7, #28]
 8013212:	2300      	movs	r3, #0
 8013214:	837b      	strh	r3, [r7, #26]
 8013216:	2300      	movs	r3, #0
 8013218:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801321a:	2300      	movs	r3, #0
 801321c:	843b      	strh	r3, [r7, #32]
 801321e:	e0ae      	b.n	801337e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013220:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013224:	49a6      	ldr	r1, [pc, #664]	; (80134c0 <etharp_find_entry+0x2d4>)
 8013226:	4613      	mov	r3, r2
 8013228:	005b      	lsls	r3, r3, #1
 801322a:	4413      	add	r3, r2
 801322c:	00db      	lsls	r3, r3, #3
 801322e:	440b      	add	r3, r1
 8013230:	3314      	adds	r3, #20
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013236:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801323a:	2b0a      	cmp	r3, #10
 801323c:	d105      	bne.n	801324a <etharp_find_entry+0x5e>
 801323e:	7dfb      	ldrb	r3, [r7, #23]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d102      	bne.n	801324a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013244:	8c3b      	ldrh	r3, [r7, #32]
 8013246:	847b      	strh	r3, [r7, #34]	; 0x22
 8013248:	e095      	b.n	8013376 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801324a:	7dfb      	ldrb	r3, [r7, #23]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f000 8092 	beq.w	8013376 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013252:	7dfb      	ldrb	r3, [r7, #23]
 8013254:	2b01      	cmp	r3, #1
 8013256:	d009      	beq.n	801326c <etharp_find_entry+0x80>
 8013258:	7dfb      	ldrb	r3, [r7, #23]
 801325a:	2b01      	cmp	r3, #1
 801325c:	d806      	bhi.n	801326c <etharp_find_entry+0x80>
 801325e:	4b99      	ldr	r3, [pc, #612]	; (80134c4 <etharp_find_entry+0x2d8>)
 8013260:	f240 1223 	movw	r2, #291	; 0x123
 8013264:	4998      	ldr	r1, [pc, #608]	; (80134c8 <etharp_find_entry+0x2dc>)
 8013266:	4899      	ldr	r0, [pc, #612]	; (80134cc <etharp_find_entry+0x2e0>)
 8013268:	f002 fc4e 	bl	8015b08 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d020      	beq.n	80132b4 <etharp_find_entry+0xc8>
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6819      	ldr	r1, [r3, #0]
 8013276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801327a:	4891      	ldr	r0, [pc, #580]	; (80134c0 <etharp_find_entry+0x2d4>)
 801327c:	4613      	mov	r3, r2
 801327e:	005b      	lsls	r3, r3, #1
 8013280:	4413      	add	r3, r2
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	4403      	add	r3, r0
 8013286:	3304      	adds	r3, #4
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4299      	cmp	r1, r3
 801328c:	d112      	bne.n	80132b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d00c      	beq.n	80132ae <etharp_find_entry+0xc2>
 8013294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013298:	4989      	ldr	r1, [pc, #548]	; (80134c0 <etharp_find_entry+0x2d4>)
 801329a:	4613      	mov	r3, r2
 801329c:	005b      	lsls	r3, r3, #1
 801329e:	4413      	add	r3, r2
 80132a0:	00db      	lsls	r3, r3, #3
 80132a2:	440b      	add	r3, r1
 80132a4:	3308      	adds	r3, #8
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d102      	bne.n	80132b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80132ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80132b2:	e100      	b.n	80134b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
 80132b6:	2b01      	cmp	r3, #1
 80132b8:	d140      	bne.n	801333c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80132ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132be:	4980      	ldr	r1, [pc, #512]	; (80134c0 <etharp_find_entry+0x2d4>)
 80132c0:	4613      	mov	r3, r2
 80132c2:	005b      	lsls	r3, r3, #1
 80132c4:	4413      	add	r3, r2
 80132c6:	00db      	lsls	r3, r3, #3
 80132c8:	440b      	add	r3, r1
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d01a      	beq.n	8013306 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80132d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132d4:	497a      	ldr	r1, [pc, #488]	; (80134c0 <etharp_find_entry+0x2d4>)
 80132d6:	4613      	mov	r3, r2
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	4413      	add	r3, r2
 80132dc:	00db      	lsls	r3, r3, #3
 80132de:	440b      	add	r3, r1
 80132e0:	3312      	adds	r3, #18
 80132e2:	881b      	ldrh	r3, [r3, #0]
 80132e4:	8bba      	ldrh	r2, [r7, #28]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d845      	bhi.n	8013376 <etharp_find_entry+0x18a>
            old_queue = i;
 80132ea:	8c3b      	ldrh	r3, [r7, #32]
 80132ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80132ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132f2:	4973      	ldr	r1, [pc, #460]	; (80134c0 <etharp_find_entry+0x2d4>)
 80132f4:	4613      	mov	r3, r2
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	4413      	add	r3, r2
 80132fa:	00db      	lsls	r3, r3, #3
 80132fc:	440b      	add	r3, r1
 80132fe:	3312      	adds	r3, #18
 8013300:	881b      	ldrh	r3, [r3, #0]
 8013302:	83bb      	strh	r3, [r7, #28]
 8013304:	e037      	b.n	8013376 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013306:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801330a:	496d      	ldr	r1, [pc, #436]	; (80134c0 <etharp_find_entry+0x2d4>)
 801330c:	4613      	mov	r3, r2
 801330e:	005b      	lsls	r3, r3, #1
 8013310:	4413      	add	r3, r2
 8013312:	00db      	lsls	r3, r3, #3
 8013314:	440b      	add	r3, r1
 8013316:	3312      	adds	r3, #18
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	8b7a      	ldrh	r2, [r7, #26]
 801331c:	429a      	cmp	r2, r3
 801331e:	d82a      	bhi.n	8013376 <etharp_find_entry+0x18a>
            old_pending = i;
 8013320:	8c3b      	ldrh	r3, [r7, #32]
 8013322:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013328:	4965      	ldr	r1, [pc, #404]	; (80134c0 <etharp_find_entry+0x2d4>)
 801332a:	4613      	mov	r3, r2
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	4413      	add	r3, r2
 8013330:	00db      	lsls	r3, r3, #3
 8013332:	440b      	add	r3, r1
 8013334:	3312      	adds	r3, #18
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	837b      	strh	r3, [r7, #26]
 801333a:	e01c      	b.n	8013376 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801333c:	7dfb      	ldrb	r3, [r7, #23]
 801333e:	2b01      	cmp	r3, #1
 8013340:	d919      	bls.n	8013376 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013346:	495e      	ldr	r1, [pc, #376]	; (80134c0 <etharp_find_entry+0x2d4>)
 8013348:	4613      	mov	r3, r2
 801334a:	005b      	lsls	r3, r3, #1
 801334c:	4413      	add	r3, r2
 801334e:	00db      	lsls	r3, r3, #3
 8013350:	440b      	add	r3, r1
 8013352:	3312      	adds	r3, #18
 8013354:	881b      	ldrh	r3, [r3, #0]
 8013356:	8b3a      	ldrh	r2, [r7, #24]
 8013358:	429a      	cmp	r2, r3
 801335a:	d80c      	bhi.n	8013376 <etharp_find_entry+0x18a>
            old_stable = i;
 801335c:	8c3b      	ldrh	r3, [r7, #32]
 801335e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013364:	4956      	ldr	r1, [pc, #344]	; (80134c0 <etharp_find_entry+0x2d4>)
 8013366:	4613      	mov	r3, r2
 8013368:	005b      	lsls	r3, r3, #1
 801336a:	4413      	add	r3, r2
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	440b      	add	r3, r1
 8013370:	3312      	adds	r3, #18
 8013372:	881b      	ldrh	r3, [r3, #0]
 8013374:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013376:	8c3b      	ldrh	r3, [r7, #32]
 8013378:	3301      	adds	r3, #1
 801337a:	b29b      	uxth	r3, r3
 801337c:	843b      	strh	r3, [r7, #32]
 801337e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013382:	2b09      	cmp	r3, #9
 8013384:	f77f af4c 	ble.w	8013220 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013388:	7afb      	ldrb	r3, [r7, #11]
 801338a:	f003 0302 	and.w	r3, r3, #2
 801338e:	2b00      	cmp	r3, #0
 8013390:	d108      	bne.n	80133a4 <etharp_find_entry+0x1b8>
 8013392:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013396:	2b0a      	cmp	r3, #10
 8013398:	d107      	bne.n	80133aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801339a:	7afb      	ldrb	r3, [r7, #11]
 801339c:	f003 0301 	and.w	r3, r3, #1
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d102      	bne.n	80133aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80133a4:	f04f 33ff 	mov.w	r3, #4294967295
 80133a8:	e085      	b.n	80134b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80133aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80133ae:	2b09      	cmp	r3, #9
 80133b0:	dc02      	bgt.n	80133b8 <etharp_find_entry+0x1cc>
    i = empty;
 80133b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133b4:	843b      	strh	r3, [r7, #32]
 80133b6:	e039      	b.n	801342c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80133b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80133bc:	2b09      	cmp	r3, #9
 80133be:	dc14      	bgt.n	80133ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80133c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80133c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133c8:	493d      	ldr	r1, [pc, #244]	; (80134c0 <etharp_find_entry+0x2d4>)
 80133ca:	4613      	mov	r3, r2
 80133cc:	005b      	lsls	r3, r3, #1
 80133ce:	4413      	add	r3, r2
 80133d0:	00db      	lsls	r3, r3, #3
 80133d2:	440b      	add	r3, r1
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d018      	beq.n	801340c <etharp_find_entry+0x220>
 80133da:	4b3a      	ldr	r3, [pc, #232]	; (80134c4 <etharp_find_entry+0x2d8>)
 80133dc:	f240 126d 	movw	r2, #365	; 0x16d
 80133e0:	493b      	ldr	r1, [pc, #236]	; (80134d0 <etharp_find_entry+0x2e4>)
 80133e2:	483a      	ldr	r0, [pc, #232]	; (80134cc <etharp_find_entry+0x2e0>)
 80133e4:	f002 fb90 	bl	8015b08 <iprintf>
 80133e8:	e010      	b.n	801340c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80133ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80133ee:	2b09      	cmp	r3, #9
 80133f0:	dc02      	bgt.n	80133f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80133f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133f4:	843b      	strh	r3, [r7, #32]
 80133f6:	e009      	b.n	801340c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80133f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80133fc:	2b09      	cmp	r3, #9
 80133fe:	dc02      	bgt.n	8013406 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013400:	8bfb      	ldrh	r3, [r7, #30]
 8013402:	843b      	strh	r3, [r7, #32]
 8013404:	e002      	b.n	801340c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013406:	f04f 33ff 	mov.w	r3, #4294967295
 801340a:	e054      	b.n	80134b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801340c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013410:	2b09      	cmp	r3, #9
 8013412:	dd06      	ble.n	8013422 <etharp_find_entry+0x236>
 8013414:	4b2b      	ldr	r3, [pc, #172]	; (80134c4 <etharp_find_entry+0x2d8>)
 8013416:	f240 127f 	movw	r2, #383	; 0x17f
 801341a:	492e      	ldr	r1, [pc, #184]	; (80134d4 <etharp_find_entry+0x2e8>)
 801341c:	482b      	ldr	r0, [pc, #172]	; (80134cc <etharp_find_entry+0x2e0>)
 801341e:	f002 fb73 	bl	8015b08 <iprintf>
    etharp_free_entry(i);
 8013422:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013426:	4618      	mov	r0, r3
 8013428:	f7ff fe06 	bl	8013038 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801342c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013430:	2b09      	cmp	r3, #9
 8013432:	dd06      	ble.n	8013442 <etharp_find_entry+0x256>
 8013434:	4b23      	ldr	r3, [pc, #140]	; (80134c4 <etharp_find_entry+0x2d8>)
 8013436:	f240 1283 	movw	r2, #387	; 0x183
 801343a:	4926      	ldr	r1, [pc, #152]	; (80134d4 <etharp_find_entry+0x2e8>)
 801343c:	4823      	ldr	r0, [pc, #140]	; (80134cc <etharp_find_entry+0x2e0>)
 801343e:	f002 fb63 	bl	8015b08 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013446:	491e      	ldr	r1, [pc, #120]	; (80134c0 <etharp_find_entry+0x2d4>)
 8013448:	4613      	mov	r3, r2
 801344a:	005b      	lsls	r3, r3, #1
 801344c:	4413      	add	r3, r2
 801344e:	00db      	lsls	r3, r3, #3
 8013450:	440b      	add	r3, r1
 8013452:	3314      	adds	r3, #20
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d006      	beq.n	8013468 <etharp_find_entry+0x27c>
 801345a:	4b1a      	ldr	r3, [pc, #104]	; (80134c4 <etharp_find_entry+0x2d8>)
 801345c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013460:	491d      	ldr	r1, [pc, #116]	; (80134d8 <etharp_find_entry+0x2ec>)
 8013462:	481a      	ldr	r0, [pc, #104]	; (80134cc <etharp_find_entry+0x2e0>)
 8013464:	f002 fb50 	bl	8015b08 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d00b      	beq.n	8013486 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801346e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	6819      	ldr	r1, [r3, #0]
 8013476:	4812      	ldr	r0, [pc, #72]	; (80134c0 <etharp_find_entry+0x2d4>)
 8013478:	4613      	mov	r3, r2
 801347a:	005b      	lsls	r3, r3, #1
 801347c:	4413      	add	r3, r2
 801347e:	00db      	lsls	r3, r3, #3
 8013480:	4403      	add	r3, r0
 8013482:	3304      	adds	r3, #4
 8013484:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801348a:	490d      	ldr	r1, [pc, #52]	; (80134c0 <etharp_find_entry+0x2d4>)
 801348c:	4613      	mov	r3, r2
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	440b      	add	r3, r1
 8013496:	3312      	adds	r3, #18
 8013498:	2200      	movs	r2, #0
 801349a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801349c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134a0:	4907      	ldr	r1, [pc, #28]	; (80134c0 <etharp_find_entry+0x2d4>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	005b      	lsls	r3, r3, #1
 80134a6:	4413      	add	r3, r2
 80134a8:	00db      	lsls	r3, r3, #3
 80134aa:	440b      	add	r3, r1
 80134ac:	3308      	adds	r3, #8
 80134ae:	687a      	ldr	r2, [r7, #4]
 80134b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80134b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3728      	adds	r7, #40	; 0x28
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	200450c0 	.word	0x200450c0
 80134c4:	0801913c 	.word	0x0801913c
 80134c8:	08019174 	.word	0x08019174
 80134cc:	080191b4 	.word	0x080191b4
 80134d0:	080191dc 	.word	0x080191dc
 80134d4:	080191f4 	.word	0x080191f4
 80134d8:	08019208 	.word	0x08019208

080134dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b088      	sub	sp, #32
 80134e0:	af02      	add	r7, sp, #8
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80134f0:	2b06      	cmp	r3, #6
 80134f2:	d006      	beq.n	8013502 <etharp_update_arp_entry+0x26>
 80134f4:	4b48      	ldr	r3, [pc, #288]	; (8013618 <etharp_update_arp_entry+0x13c>)
 80134f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80134fa:	4948      	ldr	r1, [pc, #288]	; (801361c <etharp_update_arp_entry+0x140>)
 80134fc:	4848      	ldr	r0, [pc, #288]	; (8013620 <etharp_update_arp_entry+0x144>)
 80134fe:	f002 fb03 	bl	8015b08 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d012      	beq.n	801352e <etharp_update_arp_entry+0x52>
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d00e      	beq.n	801352e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013510:	68bb      	ldr	r3, [r7, #8]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	68f9      	ldr	r1, [r7, #12]
 8013516:	4618      	mov	r0, r3
 8013518:	f001 f8fe 	bl	8014718 <ip4_addr_isbroadcast_u32>
 801351c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801351e:	2b00      	cmp	r3, #0
 8013520:	d105      	bne.n	801352e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801352a:	2be0      	cmp	r3, #224	; 0xe0
 801352c:	d102      	bne.n	8013534 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801352e:	f06f 030f 	mvn.w	r3, #15
 8013532:	e06c      	b.n	801360e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013534:	78fb      	ldrb	r3, [r7, #3]
 8013536:	68fa      	ldr	r2, [r7, #12]
 8013538:	4619      	mov	r1, r3
 801353a:	68b8      	ldr	r0, [r7, #8]
 801353c:	f7ff fe56 	bl	80131ec <etharp_find_entry>
 8013540:	4603      	mov	r3, r0
 8013542:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013544:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013548:	2b00      	cmp	r3, #0
 801354a:	da02      	bge.n	8013552 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801354c:	8afb      	ldrh	r3, [r7, #22]
 801354e:	b25b      	sxtb	r3, r3
 8013550:	e05d      	b.n	801360e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013556:	4933      	ldr	r1, [pc, #204]	; (8013624 <etharp_update_arp_entry+0x148>)
 8013558:	4613      	mov	r3, r2
 801355a:	005b      	lsls	r3, r3, #1
 801355c:	4413      	add	r3, r2
 801355e:	00db      	lsls	r3, r3, #3
 8013560:	440b      	add	r3, r1
 8013562:	3314      	adds	r3, #20
 8013564:	2202      	movs	r2, #2
 8013566:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801356c:	492d      	ldr	r1, [pc, #180]	; (8013624 <etharp_update_arp_entry+0x148>)
 801356e:	4613      	mov	r3, r2
 8013570:	005b      	lsls	r3, r3, #1
 8013572:	4413      	add	r3, r2
 8013574:	00db      	lsls	r3, r3, #3
 8013576:	440b      	add	r3, r1
 8013578:	3308      	adds	r3, #8
 801357a:	68fa      	ldr	r2, [r7, #12]
 801357c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801357e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013582:	4613      	mov	r3, r2
 8013584:	005b      	lsls	r3, r3, #1
 8013586:	4413      	add	r3, r2
 8013588:	00db      	lsls	r3, r3, #3
 801358a:	3308      	adds	r3, #8
 801358c:	4a25      	ldr	r2, [pc, #148]	; (8013624 <etharp_update_arp_entry+0x148>)
 801358e:	4413      	add	r3, r2
 8013590:	3304      	adds	r3, #4
 8013592:	2206      	movs	r2, #6
 8013594:	6879      	ldr	r1, [r7, #4]
 8013596:	4618      	mov	r0, r3
 8013598:	f002 fcdd 	bl	8015f56 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801359c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135a0:	4920      	ldr	r1, [pc, #128]	; (8013624 <etharp_update_arp_entry+0x148>)
 80135a2:	4613      	mov	r3, r2
 80135a4:	005b      	lsls	r3, r3, #1
 80135a6:	4413      	add	r3, r2
 80135a8:	00db      	lsls	r3, r3, #3
 80135aa:	440b      	add	r3, r1
 80135ac:	3312      	adds	r3, #18
 80135ae:	2200      	movs	r2, #0
 80135b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80135b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135b6:	491b      	ldr	r1, [pc, #108]	; (8013624 <etharp_update_arp_entry+0x148>)
 80135b8:	4613      	mov	r3, r2
 80135ba:	005b      	lsls	r3, r3, #1
 80135bc:	4413      	add	r3, r2
 80135be:	00db      	lsls	r3, r3, #3
 80135c0:	440b      	add	r3, r1
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d021      	beq.n	801360c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80135c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135cc:	4915      	ldr	r1, [pc, #84]	; (8013624 <etharp_update_arp_entry+0x148>)
 80135ce:	4613      	mov	r3, r2
 80135d0:	005b      	lsls	r3, r3, #1
 80135d2:	4413      	add	r3, r2
 80135d4:	00db      	lsls	r3, r3, #3
 80135d6:	440b      	add	r3, r1
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80135dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135e0:	4910      	ldr	r1, [pc, #64]	; (8013624 <etharp_update_arp_entry+0x148>)
 80135e2:	4613      	mov	r3, r2
 80135e4:	005b      	lsls	r3, r3, #1
 80135e6:	4413      	add	r3, r2
 80135e8:	00db      	lsls	r3, r3, #3
 80135ea:	440b      	add	r3, r1
 80135ec:	2200      	movs	r2, #0
 80135ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80135f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80135fa:	9300      	str	r3, [sp, #0]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6939      	ldr	r1, [r7, #16]
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f001 ff97 	bl	8015534 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013606:	6938      	ldr	r0, [r7, #16]
 8013608:	f7f9 fdec 	bl	800d1e4 <pbuf_free>
  }
  return ERR_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3718      	adds	r7, #24
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	0801913c 	.word	0x0801913c
 801361c:	08019234 	.word	0x08019234
 8013620:	080191b4 	.word	0x080191b4
 8013624:	200450c0 	.word	0x200450c0

08013628 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013630:	2300      	movs	r3, #0
 8013632:	60fb      	str	r3, [r7, #12]
 8013634:	e01e      	b.n	8013674 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013636:	4913      	ldr	r1, [pc, #76]	; (8013684 <etharp_cleanup_netif+0x5c>)
 8013638:	68fa      	ldr	r2, [r7, #12]
 801363a:	4613      	mov	r3, r2
 801363c:	005b      	lsls	r3, r3, #1
 801363e:	4413      	add	r3, r2
 8013640:	00db      	lsls	r3, r3, #3
 8013642:	440b      	add	r3, r1
 8013644:	3314      	adds	r3, #20
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801364a:	7afb      	ldrb	r3, [r7, #11]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00e      	beq.n	801366e <etharp_cleanup_netif+0x46>
 8013650:	490c      	ldr	r1, [pc, #48]	; (8013684 <etharp_cleanup_netif+0x5c>)
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	4613      	mov	r3, r2
 8013656:	005b      	lsls	r3, r3, #1
 8013658:	4413      	add	r3, r2
 801365a:	00db      	lsls	r3, r3, #3
 801365c:	440b      	add	r3, r1
 801365e:	3308      	adds	r3, #8
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	429a      	cmp	r2, r3
 8013666:	d102      	bne.n	801366e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ff fce5 	bl	8013038 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	3301      	adds	r3, #1
 8013672:	60fb      	str	r3, [r7, #12]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2b09      	cmp	r3, #9
 8013678:	dddd      	ble.n	8013636 <etharp_cleanup_netif+0xe>
    }
  }
}
 801367a:	bf00      	nop
 801367c:	bf00      	nop
 801367e:	3710      	adds	r7, #16
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}
 8013684:	200450c0 	.word	0x200450c0

08013688 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013688:	b5b0      	push	{r4, r5, r7, lr}
 801368a:	b08a      	sub	sp, #40	; 0x28
 801368c:	af04      	add	r7, sp, #16
 801368e:	6078      	str	r0, [r7, #4]
 8013690:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d107      	bne.n	80136a8 <etharp_input+0x20>
 8013698:	4b3d      	ldr	r3, [pc, #244]	; (8013790 <etharp_input+0x108>)
 801369a:	f240 228a 	movw	r2, #650	; 0x28a
 801369e:	493d      	ldr	r1, [pc, #244]	; (8013794 <etharp_input+0x10c>)
 80136a0:	483d      	ldr	r0, [pc, #244]	; (8013798 <etharp_input+0x110>)
 80136a2:	f002 fa31 	bl	8015b08 <iprintf>
 80136a6:	e06f      	b.n	8013788 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136b8:	d10c      	bne.n	80136d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80136be:	2b06      	cmp	r3, #6
 80136c0:	d108      	bne.n	80136d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80136c6:	2b04      	cmp	r3, #4
 80136c8:	d104      	bne.n	80136d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	885b      	ldrh	r3, [r3, #2]
 80136ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80136d0:	2b08      	cmp	r3, #8
 80136d2:	d003      	beq.n	80136dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f7f9 fd85 	bl	800d1e4 <pbuf_free>
    return;
 80136da:	e055      	b.n	8013788 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	330e      	adds	r3, #14
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	3318      	adds	r3, #24
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	3304      	adds	r3, #4
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d102      	bne.n	80136fc <etharp_input+0x74>
    for_us = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	75fb      	strb	r3, [r7, #23]
 80136fa:	e009      	b.n	8013710 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80136fc:	68ba      	ldr	r2, [r7, #8]
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	3304      	adds	r3, #4
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	429a      	cmp	r2, r3
 8013706:	bf0c      	ite	eq
 8013708:	2301      	moveq	r3, #1
 801370a:	2300      	movne	r3, #0
 801370c:	b2db      	uxtb	r3, r3
 801370e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	f103 0208 	add.w	r2, r3, #8
 8013716:	7dfb      	ldrb	r3, [r7, #23]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d001      	beq.n	8013720 <etharp_input+0x98>
 801371c:	2301      	movs	r3, #1
 801371e:	e000      	b.n	8013722 <etharp_input+0x9a>
 8013720:	2302      	movs	r3, #2
 8013722:	f107 010c 	add.w	r1, r7, #12
 8013726:	6838      	ldr	r0, [r7, #0]
 8013728:	f7ff fed8 	bl	80134dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	88db      	ldrh	r3, [r3, #6]
 8013730:	b29b      	uxth	r3, r3
 8013732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013736:	d003      	beq.n	8013740 <etharp_input+0xb8>
 8013738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801373c:	d01e      	beq.n	801377c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801373e:	e020      	b.n	8013782 <etharp_input+0xfa>
      if (for_us) {
 8013740:	7dfb      	ldrb	r3, [r7, #23]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d01c      	beq.n	8013780 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801375c:	693a      	ldr	r2, [r7, #16]
 801375e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013760:	2102      	movs	r1, #2
 8013762:	9103      	str	r1, [sp, #12]
 8013764:	f107 010c 	add.w	r1, r7, #12
 8013768:	9102      	str	r1, [sp, #8]
 801376a:	9201      	str	r2, [sp, #4]
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	462b      	mov	r3, r5
 8013770:	4622      	mov	r2, r4
 8013772:	4601      	mov	r1, r0
 8013774:	6838      	ldr	r0, [r7, #0]
 8013776:	f000 faeb 	bl	8013d50 <etharp_raw>
      break;
 801377a:	e001      	b.n	8013780 <etharp_input+0xf8>
      break;
 801377c:	bf00      	nop
 801377e:	e000      	b.n	8013782 <etharp_input+0xfa>
      break;
 8013780:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7f9 fd2e 	bl	800d1e4 <pbuf_free>
}
 8013788:	3718      	adds	r7, #24
 801378a:	46bd      	mov	sp, r7
 801378c:	bdb0      	pop	{r4, r5, r7, pc}
 801378e:	bf00      	nop
 8013790:	0801913c 	.word	0x0801913c
 8013794:	0801928c 	.word	0x0801928c
 8013798:	080191b4 	.word	0x080191b4

0801379c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af02      	add	r7, sp, #8
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	60b9      	str	r1, [r7, #8]
 80137a6:	4613      	mov	r3, r2
 80137a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80137aa:	79fa      	ldrb	r2, [r7, #7]
 80137ac:	4944      	ldr	r1, [pc, #272]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 80137ae:	4613      	mov	r3, r2
 80137b0:	005b      	lsls	r3, r3, #1
 80137b2:	4413      	add	r3, r2
 80137b4:	00db      	lsls	r3, r3, #3
 80137b6:	440b      	add	r3, r1
 80137b8:	3314      	adds	r3, #20
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d806      	bhi.n	80137ce <etharp_output_to_arp_index+0x32>
 80137c0:	4b40      	ldr	r3, [pc, #256]	; (80138c4 <etharp_output_to_arp_index+0x128>)
 80137c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80137c6:	4940      	ldr	r1, [pc, #256]	; (80138c8 <etharp_output_to_arp_index+0x12c>)
 80137c8:	4840      	ldr	r0, [pc, #256]	; (80138cc <etharp_output_to_arp_index+0x130>)
 80137ca:	f002 f99d 	bl	8015b08 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80137ce:	79fa      	ldrb	r2, [r7, #7]
 80137d0:	493b      	ldr	r1, [pc, #236]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 80137d2:	4613      	mov	r3, r2
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	4413      	add	r3, r2
 80137d8:	00db      	lsls	r3, r3, #3
 80137da:	440b      	add	r3, r1
 80137dc:	3314      	adds	r3, #20
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b02      	cmp	r3, #2
 80137e2:	d153      	bne.n	801388c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80137e4:	79fa      	ldrb	r2, [r7, #7]
 80137e6:	4936      	ldr	r1, [pc, #216]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 80137e8:	4613      	mov	r3, r2
 80137ea:	005b      	lsls	r3, r3, #1
 80137ec:	4413      	add	r3, r2
 80137ee:	00db      	lsls	r3, r3, #3
 80137f0:	440b      	add	r3, r1
 80137f2:	3312      	adds	r3, #18
 80137f4:	881b      	ldrh	r3, [r3, #0]
 80137f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80137fa:	d919      	bls.n	8013830 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80137fc:	79fa      	ldrb	r2, [r7, #7]
 80137fe:	4613      	mov	r3, r2
 8013800:	005b      	lsls	r3, r3, #1
 8013802:	4413      	add	r3, r2
 8013804:	00db      	lsls	r3, r3, #3
 8013806:	4a2e      	ldr	r2, [pc, #184]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 8013808:	4413      	add	r3, r2
 801380a:	3304      	adds	r3, #4
 801380c:	4619      	mov	r1, r3
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f000 fb4c 	bl	8013eac <etharp_request>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d138      	bne.n	801388c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801381a:	79fa      	ldrb	r2, [r7, #7]
 801381c:	4928      	ldr	r1, [pc, #160]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 801381e:	4613      	mov	r3, r2
 8013820:	005b      	lsls	r3, r3, #1
 8013822:	4413      	add	r3, r2
 8013824:	00db      	lsls	r3, r3, #3
 8013826:	440b      	add	r3, r1
 8013828:	3314      	adds	r3, #20
 801382a:	2203      	movs	r2, #3
 801382c:	701a      	strb	r2, [r3, #0]
 801382e:	e02d      	b.n	801388c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013830:	79fa      	ldrb	r2, [r7, #7]
 8013832:	4923      	ldr	r1, [pc, #140]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 8013834:	4613      	mov	r3, r2
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	4413      	add	r3, r2
 801383a:	00db      	lsls	r3, r3, #3
 801383c:	440b      	add	r3, r1
 801383e:	3312      	adds	r3, #18
 8013840:	881b      	ldrh	r3, [r3, #0]
 8013842:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013846:	d321      	bcc.n	801388c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013848:	79fa      	ldrb	r2, [r7, #7]
 801384a:	4613      	mov	r3, r2
 801384c:	005b      	lsls	r3, r3, #1
 801384e:	4413      	add	r3, r2
 8013850:	00db      	lsls	r3, r3, #3
 8013852:	4a1b      	ldr	r2, [pc, #108]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 8013854:	4413      	add	r3, r2
 8013856:	1d19      	adds	r1, r3, #4
 8013858:	79fa      	ldrb	r2, [r7, #7]
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	3308      	adds	r3, #8
 8013864:	4a16      	ldr	r2, [pc, #88]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 8013866:	4413      	add	r3, r2
 8013868:	3304      	adds	r3, #4
 801386a:	461a      	mov	r2, r3
 801386c:	68f8      	ldr	r0, [r7, #12]
 801386e:	f000 fafb 	bl	8013e68 <etharp_request_dst>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d109      	bne.n	801388c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013878:	79fa      	ldrb	r2, [r7, #7]
 801387a:	4911      	ldr	r1, [pc, #68]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 801387c:	4613      	mov	r3, r2
 801387e:	005b      	lsls	r3, r3, #1
 8013880:	4413      	add	r3, r2
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	440b      	add	r3, r1
 8013886:	3314      	adds	r3, #20
 8013888:	2203      	movs	r2, #3
 801388a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013892:	79fa      	ldrb	r2, [r7, #7]
 8013894:	4613      	mov	r3, r2
 8013896:	005b      	lsls	r3, r3, #1
 8013898:	4413      	add	r3, r2
 801389a:	00db      	lsls	r3, r3, #3
 801389c:	3308      	adds	r3, #8
 801389e:	4a08      	ldr	r2, [pc, #32]	; (80138c0 <etharp_output_to_arp_index+0x124>)
 80138a0:	4413      	add	r3, r2
 80138a2:	3304      	adds	r3, #4
 80138a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80138a8:	9200      	str	r2, [sp, #0]
 80138aa:	460a      	mov	r2, r1
 80138ac:	68b9      	ldr	r1, [r7, #8]
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f001 fe40 	bl	8015534 <ethernet_output>
 80138b4:	4603      	mov	r3, r0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3710      	adds	r7, #16
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}
 80138be:	bf00      	nop
 80138c0:	200450c0 	.word	0x200450c0
 80138c4:	0801913c 	.word	0x0801913c
 80138c8:	080192ac 	.word	0x080192ac
 80138cc:	080191b4 	.word	0x080191b4

080138d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08a      	sub	sp, #40	; 0x28
 80138d4:	af02      	add	r7, sp, #8
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d106      	bne.n	80138f4 <etharp_output+0x24>
 80138e6:	4b73      	ldr	r3, [pc, #460]	; (8013ab4 <etharp_output+0x1e4>)
 80138e8:	f240 321e 	movw	r2, #798	; 0x31e
 80138ec:	4972      	ldr	r1, [pc, #456]	; (8013ab8 <etharp_output+0x1e8>)
 80138ee:	4873      	ldr	r0, [pc, #460]	; (8013abc <etharp_output+0x1ec>)
 80138f0:	f002 f90a 	bl	8015b08 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <etharp_output+0x38>
 80138fa:	4b6e      	ldr	r3, [pc, #440]	; (8013ab4 <etharp_output+0x1e4>)
 80138fc:	f240 321f 	movw	r2, #799	; 0x31f
 8013900:	496f      	ldr	r1, [pc, #444]	; (8013ac0 <etharp_output+0x1f0>)
 8013902:	486e      	ldr	r0, [pc, #440]	; (8013abc <etharp_output+0x1ec>)
 8013904:	f002 f900 	bl	8015b08 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d106      	bne.n	801391c <etharp_output+0x4c>
 801390e:	4b69      	ldr	r3, [pc, #420]	; (8013ab4 <etharp_output+0x1e4>)
 8013910:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013914:	496b      	ldr	r1, [pc, #428]	; (8013ac4 <etharp_output+0x1f4>)
 8013916:	4869      	ldr	r0, [pc, #420]	; (8013abc <etharp_output+0x1ec>)
 8013918:	f002 f8f6 	bl	8015b08 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	68f9      	ldr	r1, [r7, #12]
 8013922:	4618      	mov	r0, r3
 8013924:	f000 fef8 	bl	8014718 <ip4_addr_isbroadcast_u32>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d002      	beq.n	8013934 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801392e:	4b66      	ldr	r3, [pc, #408]	; (8013ac8 <etharp_output+0x1f8>)
 8013930:	61fb      	str	r3, [r7, #28]
 8013932:	e0af      	b.n	8013a94 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801393c:	2be0      	cmp	r3, #224	; 0xe0
 801393e:	d118      	bne.n	8013972 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013940:	2301      	movs	r3, #1
 8013942:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013944:	2300      	movs	r3, #0
 8013946:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013948:	235e      	movs	r3, #94	; 0x5e
 801394a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	3301      	adds	r3, #1
 8013950:	781b      	ldrb	r3, [r3, #0]
 8013952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013956:	b2db      	uxtb	r3, r3
 8013958:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	3302      	adds	r3, #2
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	3303      	adds	r3, #3
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801396a:	f107 0310 	add.w	r3, r7, #16
 801396e:	61fb      	str	r3, [r7, #28]
 8013970:	e090      	b.n	8013a94 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	3304      	adds	r3, #4
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	405a      	eors	r2, r3
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	3308      	adds	r3, #8
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	4013      	ands	r3, r2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d012      	beq.n	80139b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013990:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013994:	4293      	cmp	r3, r2
 8013996:	d00b      	beq.n	80139b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	330c      	adds	r3, #12
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d003      	beq.n	80139aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	330c      	adds	r3, #12
 80139a6:	61bb      	str	r3, [r7, #24]
 80139a8:	e002      	b.n	80139b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80139aa:	f06f 0303 	mvn.w	r3, #3
 80139ae:	e07d      	b.n	8013aac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80139b0:	4b46      	ldr	r3, [pc, #280]	; (8013acc <etharp_output+0x1fc>)
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	4619      	mov	r1, r3
 80139b6:	4a46      	ldr	r2, [pc, #280]	; (8013ad0 <etharp_output+0x200>)
 80139b8:	460b      	mov	r3, r1
 80139ba:	005b      	lsls	r3, r3, #1
 80139bc:	440b      	add	r3, r1
 80139be:	00db      	lsls	r3, r3, #3
 80139c0:	4413      	add	r3, r2
 80139c2:	3314      	adds	r3, #20
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d925      	bls.n	8013a16 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80139ca:	4b40      	ldr	r3, [pc, #256]	; (8013acc <etharp_output+0x1fc>)
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	4619      	mov	r1, r3
 80139d0:	4a3f      	ldr	r2, [pc, #252]	; (8013ad0 <etharp_output+0x200>)
 80139d2:	460b      	mov	r3, r1
 80139d4:	005b      	lsls	r3, r3, #1
 80139d6:	440b      	add	r3, r1
 80139d8:	00db      	lsls	r3, r3, #3
 80139da:	4413      	add	r3, r2
 80139dc:	3308      	adds	r3, #8
 80139de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80139e0:	68fa      	ldr	r2, [r7, #12]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d117      	bne.n	8013a16 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80139e6:	69bb      	ldr	r3, [r7, #24]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	4b38      	ldr	r3, [pc, #224]	; (8013acc <etharp_output+0x1fc>)
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	4618      	mov	r0, r3
 80139f0:	4937      	ldr	r1, [pc, #220]	; (8013ad0 <etharp_output+0x200>)
 80139f2:	4603      	mov	r3, r0
 80139f4:	005b      	lsls	r3, r3, #1
 80139f6:	4403      	add	r3, r0
 80139f8:	00db      	lsls	r3, r3, #3
 80139fa:	440b      	add	r3, r1
 80139fc:	3304      	adds	r3, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d108      	bne.n	8013a16 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013a04:	4b31      	ldr	r3, [pc, #196]	; (8013acc <etharp_output+0x1fc>)
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	461a      	mov	r2, r3
 8013a0a:	68b9      	ldr	r1, [r7, #8]
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f7ff fec5 	bl	801379c <etharp_output_to_arp_index>
 8013a12:	4603      	mov	r3, r0
 8013a14:	e04a      	b.n	8013aac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013a16:	2300      	movs	r3, #0
 8013a18:	75fb      	strb	r3, [r7, #23]
 8013a1a:	e031      	b.n	8013a80 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013a1c:	7dfa      	ldrb	r2, [r7, #23]
 8013a1e:	492c      	ldr	r1, [pc, #176]	; (8013ad0 <etharp_output+0x200>)
 8013a20:	4613      	mov	r3, r2
 8013a22:	005b      	lsls	r3, r3, #1
 8013a24:	4413      	add	r3, r2
 8013a26:	00db      	lsls	r3, r3, #3
 8013a28:	440b      	add	r3, r1
 8013a2a:	3314      	adds	r3, #20
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d923      	bls.n	8013a7a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013a32:	7dfa      	ldrb	r2, [r7, #23]
 8013a34:	4926      	ldr	r1, [pc, #152]	; (8013ad0 <etharp_output+0x200>)
 8013a36:	4613      	mov	r3, r2
 8013a38:	005b      	lsls	r3, r3, #1
 8013a3a:	4413      	add	r3, r2
 8013a3c:	00db      	lsls	r3, r3, #3
 8013a3e:	440b      	add	r3, r1
 8013a40:	3308      	adds	r3, #8
 8013a42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d117      	bne.n	8013a7a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013a4a:	69bb      	ldr	r3, [r7, #24]
 8013a4c:	6819      	ldr	r1, [r3, #0]
 8013a4e:	7dfa      	ldrb	r2, [r7, #23]
 8013a50:	481f      	ldr	r0, [pc, #124]	; (8013ad0 <etharp_output+0x200>)
 8013a52:	4613      	mov	r3, r2
 8013a54:	005b      	lsls	r3, r3, #1
 8013a56:	4413      	add	r3, r2
 8013a58:	00db      	lsls	r3, r3, #3
 8013a5a:	4403      	add	r3, r0
 8013a5c:	3304      	adds	r3, #4
 8013a5e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013a60:	4299      	cmp	r1, r3
 8013a62:	d10a      	bne.n	8013a7a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013a64:	4a19      	ldr	r2, [pc, #100]	; (8013acc <etharp_output+0x1fc>)
 8013a66:	7dfb      	ldrb	r3, [r7, #23]
 8013a68:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013a6a:	7dfb      	ldrb	r3, [r7, #23]
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	68b9      	ldr	r1, [r7, #8]
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	f7ff fe93 	bl	801379c <etharp_output_to_arp_index>
 8013a76:	4603      	mov	r3, r0
 8013a78:	e018      	b.n	8013aac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013a7a:	7dfb      	ldrb	r3, [r7, #23]
 8013a7c:	3301      	adds	r3, #1
 8013a7e:	75fb      	strb	r3, [r7, #23]
 8013a80:	7dfb      	ldrb	r3, [r7, #23]
 8013a82:	2b09      	cmp	r3, #9
 8013a84:	d9ca      	bls.n	8013a1c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013a86:	68ba      	ldr	r2, [r7, #8]
 8013a88:	69b9      	ldr	r1, [r7, #24]
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f000 f822 	bl	8013ad4 <etharp_query>
 8013a90:	4603      	mov	r3, r0
 8013a92:	e00b      	b.n	8013aac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	68b9      	ldr	r1, [r7, #8]
 8013aa4:	68f8      	ldr	r0, [r7, #12]
 8013aa6:	f001 fd45 	bl	8015534 <ethernet_output>
 8013aaa:	4603      	mov	r3, r0
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3720      	adds	r7, #32
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	0801913c 	.word	0x0801913c
 8013ab8:	0801928c 	.word	0x0801928c
 8013abc:	080191b4 	.word	0x080191b4
 8013ac0:	080192dc 	.word	0x080192dc
 8013ac4:	0801927c 	.word	0x0801927c
 8013ac8:	08019940 	.word	0x08019940
 8013acc:	200451b0 	.word	0x200451b0
 8013ad0:	200450c0 	.word	0x200450c0

08013ad4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b08c      	sub	sp, #48	; 0x30
 8013ad8:	af02      	add	r7, sp, #8
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	3326      	adds	r3, #38	; 0x26
 8013ae4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013ae6:	23ff      	movs	r3, #255	; 0xff
 8013ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013aec:	2300      	movs	r3, #0
 8013aee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	68f9      	ldr	r1, [r7, #12]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f000 fe0e 	bl	8014718 <ip4_addr_isbroadcast_u32>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d10c      	bne.n	8013b1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b0a:	2be0      	cmp	r3, #224	; 0xe0
 8013b0c:	d006      	beq.n	8013b1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d003      	beq.n	8013b1c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013b1c:	f06f 030f 	mvn.w	r3, #15
 8013b20:	e101      	b.n	8013d26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013b22:	68fa      	ldr	r2, [r7, #12]
 8013b24:	2101      	movs	r1, #1
 8013b26:	68b8      	ldr	r0, [r7, #8]
 8013b28:	f7ff fb60 	bl	80131ec <etharp_find_entry>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	da02      	bge.n	8013b3e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013b38:	8a7b      	ldrh	r3, [r7, #18]
 8013b3a:	b25b      	sxtb	r3, r3
 8013b3c:	e0f3      	b.n	8013d26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013b3e:	8a7b      	ldrh	r3, [r7, #18]
 8013b40:	2b7e      	cmp	r3, #126	; 0x7e
 8013b42:	d906      	bls.n	8013b52 <etharp_query+0x7e>
 8013b44:	4b7a      	ldr	r3, [pc, #488]	; (8013d30 <etharp_query+0x25c>)
 8013b46:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013b4a:	497a      	ldr	r1, [pc, #488]	; (8013d34 <etharp_query+0x260>)
 8013b4c:	487a      	ldr	r0, [pc, #488]	; (8013d38 <etharp_query+0x264>)
 8013b4e:	f001 ffdb 	bl	8015b08 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013b52:	8a7b      	ldrh	r3, [r7, #18]
 8013b54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013b56:	7c7a      	ldrb	r2, [r7, #17]
 8013b58:	4978      	ldr	r1, [pc, #480]	; (8013d3c <etharp_query+0x268>)
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	005b      	lsls	r3, r3, #1
 8013b5e:	4413      	add	r3, r2
 8013b60:	00db      	lsls	r3, r3, #3
 8013b62:	440b      	add	r3, r1
 8013b64:	3314      	adds	r3, #20
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d115      	bne.n	8013b98 <etharp_query+0xc4>
    is_new_entry = 1;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013b70:	7c7a      	ldrb	r2, [r7, #17]
 8013b72:	4972      	ldr	r1, [pc, #456]	; (8013d3c <etharp_query+0x268>)
 8013b74:	4613      	mov	r3, r2
 8013b76:	005b      	lsls	r3, r3, #1
 8013b78:	4413      	add	r3, r2
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	440b      	add	r3, r1
 8013b7e:	3314      	adds	r3, #20
 8013b80:	2201      	movs	r2, #1
 8013b82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013b84:	7c7a      	ldrb	r2, [r7, #17]
 8013b86:	496d      	ldr	r1, [pc, #436]	; (8013d3c <etharp_query+0x268>)
 8013b88:	4613      	mov	r3, r2
 8013b8a:	005b      	lsls	r3, r3, #1
 8013b8c:	4413      	add	r3, r2
 8013b8e:	00db      	lsls	r3, r3, #3
 8013b90:	440b      	add	r3, r1
 8013b92:	3308      	adds	r3, #8
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013b98:	7c7a      	ldrb	r2, [r7, #17]
 8013b9a:	4968      	ldr	r1, [pc, #416]	; (8013d3c <etharp_query+0x268>)
 8013b9c:	4613      	mov	r3, r2
 8013b9e:	005b      	lsls	r3, r3, #1
 8013ba0:	4413      	add	r3, r2
 8013ba2:	00db      	lsls	r3, r3, #3
 8013ba4:	440b      	add	r3, r1
 8013ba6:	3314      	adds	r3, #20
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	2b01      	cmp	r3, #1
 8013bac:	d011      	beq.n	8013bd2 <etharp_query+0xfe>
 8013bae:	7c7a      	ldrb	r2, [r7, #17]
 8013bb0:	4962      	ldr	r1, [pc, #392]	; (8013d3c <etharp_query+0x268>)
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	4413      	add	r3, r2
 8013bb8:	00db      	lsls	r3, r3, #3
 8013bba:	440b      	add	r3, r1
 8013bbc:	3314      	adds	r3, #20
 8013bbe:	781b      	ldrb	r3, [r3, #0]
 8013bc0:	2b01      	cmp	r3, #1
 8013bc2:	d806      	bhi.n	8013bd2 <etharp_query+0xfe>
 8013bc4:	4b5a      	ldr	r3, [pc, #360]	; (8013d30 <etharp_query+0x25c>)
 8013bc6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013bca:	495d      	ldr	r1, [pc, #372]	; (8013d40 <etharp_query+0x26c>)
 8013bcc:	485a      	ldr	r0, [pc, #360]	; (8013d38 <etharp_query+0x264>)
 8013bce:	f001 ff9b 	bl	8015b08 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d102      	bne.n	8013bde <etharp_query+0x10a>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d10c      	bne.n	8013bf8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013bde:	68b9      	ldr	r1, [r7, #8]
 8013be0:	68f8      	ldr	r0, [r7, #12]
 8013be2:	f000 f963 	bl	8013eac <etharp_request>
 8013be6:	4603      	mov	r3, r0
 8013be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d102      	bne.n	8013bf8 <etharp_query+0x124>
      return result;
 8013bf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013bf6:	e096      	b.n	8013d26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d106      	bne.n	8013c0c <etharp_query+0x138>
 8013bfe:	4b4c      	ldr	r3, [pc, #304]	; (8013d30 <etharp_query+0x25c>)
 8013c00:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013c04:	494f      	ldr	r1, [pc, #316]	; (8013d44 <etharp_query+0x270>)
 8013c06:	484c      	ldr	r0, [pc, #304]	; (8013d38 <etharp_query+0x264>)
 8013c08:	f001 ff7e 	bl	8015b08 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013c0c:	7c7a      	ldrb	r2, [r7, #17]
 8013c0e:	494b      	ldr	r1, [pc, #300]	; (8013d3c <etharp_query+0x268>)
 8013c10:	4613      	mov	r3, r2
 8013c12:	005b      	lsls	r3, r3, #1
 8013c14:	4413      	add	r3, r2
 8013c16:	00db      	lsls	r3, r3, #3
 8013c18:	440b      	add	r3, r1
 8013c1a:	3314      	adds	r3, #20
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d917      	bls.n	8013c52 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013c22:	4a49      	ldr	r2, [pc, #292]	; (8013d48 <etharp_query+0x274>)
 8013c24:	7c7b      	ldrb	r3, [r7, #17]
 8013c26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013c28:	7c7a      	ldrb	r2, [r7, #17]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	005b      	lsls	r3, r3, #1
 8013c2e:	4413      	add	r3, r2
 8013c30:	00db      	lsls	r3, r3, #3
 8013c32:	3308      	adds	r3, #8
 8013c34:	4a41      	ldr	r2, [pc, #260]	; (8013d3c <etharp_query+0x268>)
 8013c36:	4413      	add	r3, r2
 8013c38:	3304      	adds	r3, #4
 8013c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c3e:	9200      	str	r2, [sp, #0]
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	6879      	ldr	r1, [r7, #4]
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f001 fc75 	bl	8015534 <ethernet_output>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c50:	e067      	b.n	8013d22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013c52:	7c7a      	ldrb	r2, [r7, #17]
 8013c54:	4939      	ldr	r1, [pc, #228]	; (8013d3c <etharp_query+0x268>)
 8013c56:	4613      	mov	r3, r2
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	4413      	add	r3, r2
 8013c5c:	00db      	lsls	r3, r3, #3
 8013c5e:	440b      	add	r3, r1
 8013c60:	3314      	adds	r3, #20
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d15c      	bne.n	8013d22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013c70:	e01c      	b.n	8013cac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	895a      	ldrh	r2, [r3, #10]
 8013c76:	69fb      	ldr	r3, [r7, #28]
 8013c78:	891b      	ldrh	r3, [r3, #8]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d10a      	bne.n	8013c94 <etharp_query+0x1c0>
 8013c7e:	69fb      	ldr	r3, [r7, #28]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d006      	beq.n	8013c94 <etharp_query+0x1c0>
 8013c86:	4b2a      	ldr	r3, [pc, #168]	; (8013d30 <etharp_query+0x25c>)
 8013c88:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013c8c:	492f      	ldr	r1, [pc, #188]	; (8013d4c <etharp_query+0x278>)
 8013c8e:	482a      	ldr	r0, [pc, #168]	; (8013d38 <etharp_query+0x264>)
 8013c90:	f001 ff3a 	bl	8015b08 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	7b1b      	ldrb	r3, [r3, #12]
 8013c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d002      	beq.n	8013ca6 <etharp_query+0x1d2>
        copy_needed = 1;
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	61bb      	str	r3, [r7, #24]
        break;
 8013ca4:	e005      	b.n	8013cb2 <etharp_query+0x1de>
      }
      p = p->next;
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d1df      	bne.n	8013c72 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d007      	beq.n	8013cc8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013cb8:	687a      	ldr	r2, [r7, #4]
 8013cba:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013cbe:	200e      	movs	r0, #14
 8013cc0:	f7f9 fcf8 	bl	800d6b4 <pbuf_clone>
 8013cc4:	61f8      	str	r0, [r7, #28]
 8013cc6:	e004      	b.n	8013cd2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ccc:	69f8      	ldr	r0, [r7, #28]
 8013cce:	f7f9 fb2f 	bl	800d330 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d021      	beq.n	8013d1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013cd8:	7c7a      	ldrb	r2, [r7, #17]
 8013cda:	4918      	ldr	r1, [pc, #96]	; (8013d3c <etharp_query+0x268>)
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00a      	beq.n	8013d02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013cec:	7c7a      	ldrb	r2, [r7, #17]
 8013cee:	4913      	ldr	r1, [pc, #76]	; (8013d3c <etharp_query+0x268>)
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	005b      	lsls	r3, r3, #1
 8013cf4:	4413      	add	r3, r2
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	440b      	add	r3, r1
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f9 fa71 	bl	800d1e4 <pbuf_free>
      }
      arp_table[i].q = p;
 8013d02:	7c7a      	ldrb	r2, [r7, #17]
 8013d04:	490d      	ldr	r1, [pc, #52]	; (8013d3c <etharp_query+0x268>)
 8013d06:	4613      	mov	r3, r2
 8013d08:	005b      	lsls	r3, r3, #1
 8013d0a:	4413      	add	r3, r2
 8013d0c:	00db      	lsls	r3, r3, #3
 8013d0e:	440b      	add	r3, r1
 8013d10:	69fa      	ldr	r2, [r7, #28]
 8013d12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013d14:	2300      	movs	r3, #0
 8013d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d1a:	e002      	b.n	8013d22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013d1c:	23ff      	movs	r3, #255	; 0xff
 8013d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013d22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3728      	adds	r7, #40	; 0x28
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	0801913c 	.word	0x0801913c
 8013d34:	080192e8 	.word	0x080192e8
 8013d38:	080191b4 	.word	0x080191b4
 8013d3c:	200450c0 	.word	0x200450c0
 8013d40:	080192f8 	.word	0x080192f8
 8013d44:	080192dc 	.word	0x080192dc
 8013d48:	200451b0 	.word	0x200451b0
 8013d4c:	08019320 	.word	0x08019320

08013d50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b08a      	sub	sp, #40	; 0x28
 8013d54:	af02      	add	r7, sp, #8
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
 8013d5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d106      	bne.n	8013d76 <etharp_raw+0x26>
 8013d68:	4b3a      	ldr	r3, [pc, #232]	; (8013e54 <etharp_raw+0x104>)
 8013d6a:	f240 4257 	movw	r2, #1111	; 0x457
 8013d6e:	493a      	ldr	r1, [pc, #232]	; (8013e58 <etharp_raw+0x108>)
 8013d70:	483a      	ldr	r0, [pc, #232]	; (8013e5c <etharp_raw+0x10c>)
 8013d72:	f001 fec9 	bl	8015b08 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013d76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d7a:	211c      	movs	r1, #28
 8013d7c:	200e      	movs	r0, #14
 8013d7e:	f7f8 ff4d 	bl	800cc1c <pbuf_alloc>
 8013d82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013d84:	69bb      	ldr	r3, [r7, #24]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d102      	bne.n	8013d90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d8e:	e05d      	b.n	8013e4c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	895b      	ldrh	r3, [r3, #10]
 8013d94:	2b1b      	cmp	r3, #27
 8013d96:	d806      	bhi.n	8013da6 <etharp_raw+0x56>
 8013d98:	4b2e      	ldr	r3, [pc, #184]	; (8013e54 <etharp_raw+0x104>)
 8013d9a:	f240 4262 	movw	r2, #1122	; 0x462
 8013d9e:	4930      	ldr	r1, [pc, #192]	; (8013e60 <etharp_raw+0x110>)
 8013da0:	482e      	ldr	r0, [pc, #184]	; (8013e5c <etharp_raw+0x10c>)
 8013da2:	f001 feb1 	bl	8015b08 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013dac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7f7 fe26 	bl	800ba00 <lwip_htons>
 8013db4:	4603      	mov	r3, r0
 8013db6:	461a      	mov	r2, r3
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013dc2:	2b06      	cmp	r3, #6
 8013dc4:	d006      	beq.n	8013dd4 <etharp_raw+0x84>
 8013dc6:	4b23      	ldr	r3, [pc, #140]	; (8013e54 <etharp_raw+0x104>)
 8013dc8:	f240 4269 	movw	r2, #1129	; 0x469
 8013dcc:	4925      	ldr	r1, [pc, #148]	; (8013e64 <etharp_raw+0x114>)
 8013dce:	4823      	ldr	r0, [pc, #140]	; (8013e5c <etharp_raw+0x10c>)
 8013dd0:	f001 fe9a 	bl	8015b08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	3308      	adds	r3, #8
 8013dd8:	2206      	movs	r2, #6
 8013dda:	6839      	ldr	r1, [r7, #0]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f002 f8ba 	bl	8015f56 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	3312      	adds	r3, #18
 8013de6:	2206      	movs	r2, #6
 8013de8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013dea:	4618      	mov	r0, r3
 8013dec:	f002 f8b3 	bl	8015f56 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	330e      	adds	r3, #14
 8013df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013df6:	6812      	ldr	r2, [r2, #0]
 8013df8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	3318      	adds	r3, #24
 8013dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e00:	6812      	ldr	r2, [r2, #0]
 8013e02:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2200      	movs	r2, #0
 8013e08:	701a      	strb	r2, [r3, #0]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f042 0201 	orr.w	r2, r2, #1
 8013e10:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2200      	movs	r2, #0
 8013e16:	f042 0208 	orr.w	r2, r2, #8
 8013e1a:	709a      	strb	r2, [r3, #2]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	2206      	movs	r2, #6
 8013e24:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	2204      	movs	r2, #4
 8013e2a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013e2c:	f640 0306 	movw	r3, #2054	; 0x806
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	69b9      	ldr	r1, [r7, #24]
 8013e38:	68f8      	ldr	r0, [r7, #12]
 8013e3a:	f001 fb7b 	bl	8015534 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013e3e:	69b8      	ldr	r0, [r7, #24]
 8013e40:	f7f9 f9d0 	bl	800d1e4 <pbuf_free>
  p = NULL;
 8013e44:	2300      	movs	r3, #0
 8013e46:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013e48:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3720      	adds	r7, #32
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	0801913c 	.word	0x0801913c
 8013e58:	0801928c 	.word	0x0801928c
 8013e5c:	080191b4 	.word	0x080191b4
 8013e60:	0801933c 	.word	0x0801933c
 8013e64:	08019370 	.word	0x08019370

08013e68 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b088      	sub	sp, #32
 8013e6c:	af04      	add	r7, sp, #16
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013e84:	2201      	movs	r2, #1
 8013e86:	9203      	str	r2, [sp, #12]
 8013e88:	68ba      	ldr	r2, [r7, #8]
 8013e8a:	9202      	str	r2, [sp, #8]
 8013e8c:	4a06      	ldr	r2, [pc, #24]	; (8013ea8 <etharp_request_dst+0x40>)
 8013e8e:	9201      	str	r2, [sp, #4]
 8013e90:	9300      	str	r3, [sp, #0]
 8013e92:	4603      	mov	r3, r0
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	f7ff ff5a 	bl	8013d50 <etharp_raw>
 8013e9c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	3710      	adds	r7, #16
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	08019948 	.word	0x08019948

08013eac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013eb6:	4a05      	ldr	r2, [pc, #20]	; (8013ecc <etharp_request+0x20>)
 8013eb8:	6839      	ldr	r1, [r7, #0]
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7ff ffd4 	bl	8013e68 <etharp_request_dst>
 8013ec0:	4603      	mov	r3, r0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3708      	adds	r7, #8
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	08019940 	.word	0x08019940

08013ed0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b08e      	sub	sp, #56	; 0x38
 8013ed4:	af04      	add	r7, sp, #16
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013eda:	4b79      	ldr	r3, [pc, #484]	; (80140c0 <icmp_input+0x1f0>)
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f003 030f 	and.w	r3, r3, #15
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ef2:	2b13      	cmp	r3, #19
 8013ef4:	f240 80cd 	bls.w	8014092 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	895b      	ldrh	r3, [r3, #10]
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	f240 80ca 	bls.w	8014096 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	685b      	ldr	r3, [r3, #4]
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013f0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	f000 80b7 	beq.w	8014084 <icmp_input+0x1b4>
 8013f16:	2b08      	cmp	r3, #8
 8013f18:	f040 80b7 	bne.w	801408a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013f1c:	4b69      	ldr	r3, [pc, #420]	; (80140c4 <icmp_input+0x1f4>)
 8013f1e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013f20:	4b67      	ldr	r3, [pc, #412]	; (80140c0 <icmp_input+0x1f0>)
 8013f22:	695b      	ldr	r3, [r3, #20]
 8013f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f28:	2be0      	cmp	r3, #224	; 0xe0
 8013f2a:	f000 80bb 	beq.w	80140a4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013f2e:	4b64      	ldr	r3, [pc, #400]	; (80140c0 <icmp_input+0x1f0>)
 8013f30:	695b      	ldr	r3, [r3, #20]
 8013f32:	4a63      	ldr	r2, [pc, #396]	; (80140c0 <icmp_input+0x1f0>)
 8013f34:	6812      	ldr	r2, [r2, #0]
 8013f36:	4611      	mov	r1, r2
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 fbed 	bl	8014718 <ip4_addr_isbroadcast_u32>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f040 80b1 	bne.w	80140a8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	891b      	ldrh	r3, [r3, #8]
 8013f4a:	2b07      	cmp	r3, #7
 8013f4c:	f240 80a5 	bls.w	801409a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f52:	330e      	adds	r3, #14
 8013f54:	4619      	mov	r1, r3
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7f9 f8ae 	bl	800d0b8 <pbuf_add_header>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d04b      	beq.n	8013ffa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	891a      	ldrh	r2, [r3, #8]
 8013f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f68:	4413      	add	r3, r2
 8013f6a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	891b      	ldrh	r3, [r3, #8]
 8013f70:	8b7a      	ldrh	r2, [r7, #26]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	f0c0 809a 	bcc.w	80140ac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013f78:	8b7b      	ldrh	r3, [r7, #26]
 8013f7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f7e:	4619      	mov	r1, r3
 8013f80:	200e      	movs	r0, #14
 8013f82:	f7f8 fe4b 	bl	800cc1c <pbuf_alloc>
 8013f86:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	f000 8090 	beq.w	80140b0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	895b      	ldrh	r3, [r3, #10]
 8013f94:	461a      	mov	r2, r3
 8013f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f98:	3308      	adds	r3, #8
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d203      	bcs.n	8013fa6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013f9e:	6978      	ldr	r0, [r7, #20]
 8013fa0:	f7f9 f920 	bl	800d1e4 <pbuf_free>
          goto icmperr;
 8013fa4:	e085      	b.n	80140b2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	685b      	ldr	r3, [r3, #4]
 8013faa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f001 ffd1 	bl	8015f56 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	6978      	ldr	r0, [r7, #20]
 8013fba:	f7f9 f88d 	bl	800d0d8 <pbuf_remove_header>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d009      	beq.n	8013fd8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013fc4:	4b40      	ldr	r3, [pc, #256]	; (80140c8 <icmp_input+0x1f8>)
 8013fc6:	22b6      	movs	r2, #182	; 0xb6
 8013fc8:	4940      	ldr	r1, [pc, #256]	; (80140cc <icmp_input+0x1fc>)
 8013fca:	4841      	ldr	r0, [pc, #260]	; (80140d0 <icmp_input+0x200>)
 8013fcc:	f001 fd9c 	bl	8015b08 <iprintf>
          pbuf_free(r);
 8013fd0:	6978      	ldr	r0, [r7, #20]
 8013fd2:	f7f9 f907 	bl	800d1e4 <pbuf_free>
          goto icmperr;
 8013fd6:	e06c      	b.n	80140b2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013fd8:	6879      	ldr	r1, [r7, #4]
 8013fda:	6978      	ldr	r0, [r7, #20]
 8013fdc:	f7f9 fa26 	bl	800d42c <pbuf_copy>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d003      	beq.n	8013fee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013fe6:	6978      	ldr	r0, [r7, #20]
 8013fe8:	f7f9 f8fc 	bl	800d1e4 <pbuf_free>
          goto icmperr;
 8013fec:	e061      	b.n	80140b2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7f9 f8f8 	bl	800d1e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	607b      	str	r3, [r7, #4]
 8013ff8:	e00f      	b.n	801401a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013ffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ffc:	330e      	adds	r3, #14
 8013ffe:	4619      	mov	r1, r3
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7f9 f869 	bl	800d0d8 <pbuf_remove_header>
 8014006:	4603      	mov	r3, r0
 8014008:	2b00      	cmp	r3, #0
 801400a:	d006      	beq.n	801401a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801400c:	4b2e      	ldr	r3, [pc, #184]	; (80140c8 <icmp_input+0x1f8>)
 801400e:	22c7      	movs	r2, #199	; 0xc7
 8014010:	4930      	ldr	r1, [pc, #192]	; (80140d4 <icmp_input+0x204>)
 8014012:	482f      	ldr	r0, [pc, #188]	; (80140d0 <icmp_input+0x200>)
 8014014:	f001 fd78 	bl	8015b08 <iprintf>
          goto icmperr;
 8014018:	e04b      	b.n	80140b2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	685b      	ldr	r3, [r3, #4]
 801401e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014022:	4619      	mov	r1, r3
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7f9 f847 	bl	800d0b8 <pbuf_add_header>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d12b      	bne.n	8014088 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801403e:	4b20      	ldr	r3, [pc, #128]	; (80140c0 <icmp_input+0x1f0>)
 8014040:	691a      	ldr	r2, [r3, #16]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	2200      	movs	r2, #0
 801404a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	2200      	movs	r2, #0
 8014050:	709a      	strb	r2, [r3, #2]
 8014052:	2200      	movs	r2, #0
 8014054:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	22ff      	movs	r2, #255	; 0xff
 801405a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	2200      	movs	r2, #0
 8014060:	729a      	strb	r2, [r3, #10]
 8014062:	2200      	movs	r2, #0
 8014064:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	9302      	str	r3, [sp, #8]
 801406a:	2301      	movs	r3, #1
 801406c:	9301      	str	r3, [sp, #4]
 801406e:	2300      	movs	r3, #0
 8014070:	9300      	str	r3, [sp, #0]
 8014072:	23ff      	movs	r3, #255	; 0xff
 8014074:	2200      	movs	r2, #0
 8014076:	69f9      	ldr	r1, [r7, #28]
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 fa75 	bl	8014568 <ip4_output_if>
 801407e:	4603      	mov	r3, r0
 8014080:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014082:	e001      	b.n	8014088 <icmp_input+0x1b8>
      break;
 8014084:	bf00      	nop
 8014086:	e000      	b.n	801408a <icmp_input+0x1ba>
      break;
 8014088:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f7f9 f8aa 	bl	800d1e4 <pbuf_free>
  return;
 8014090:	e013      	b.n	80140ba <icmp_input+0x1ea>
    goto lenerr;
 8014092:	bf00      	nop
 8014094:	e002      	b.n	801409c <icmp_input+0x1cc>
    goto lenerr;
 8014096:	bf00      	nop
 8014098:	e000      	b.n	801409c <icmp_input+0x1cc>
        goto lenerr;
 801409a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7f9 f8a1 	bl	800d1e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80140a2:	e00a      	b.n	80140ba <icmp_input+0x1ea>
        goto icmperr;
 80140a4:	bf00      	nop
 80140a6:	e004      	b.n	80140b2 <icmp_input+0x1e2>
        goto icmperr;
 80140a8:	bf00      	nop
 80140aa:	e002      	b.n	80140b2 <icmp_input+0x1e2>
          goto icmperr;
 80140ac:	bf00      	nop
 80140ae:	e000      	b.n	80140b2 <icmp_input+0x1e2>
          goto icmperr;
 80140b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f7f9 f896 	bl	800d1e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80140b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80140ba:	3728      	adds	r7, #40	; 0x28
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	2004190c 	.word	0x2004190c
 80140c4:	20041920 	.word	0x20041920
 80140c8:	080193b4 	.word	0x080193b4
 80140cc:	080193ec 	.word	0x080193ec
 80140d0:	08019424 	.word	0x08019424
 80140d4:	0801944c 	.word	0x0801944c

080140d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	460b      	mov	r3, r1
 80140e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80140e4:	78fb      	ldrb	r3, [r7, #3]
 80140e6:	461a      	mov	r2, r3
 80140e8:	2103      	movs	r1, #3
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 f814 	bl	8014118 <icmp_send_response>
}
 80140f0:	bf00      	nop
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	460b      	mov	r3, r1
 8014102:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014104:	78fb      	ldrb	r3, [r7, #3]
 8014106:	461a      	mov	r2, r3
 8014108:	210b      	movs	r1, #11
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 f804 	bl	8014118 <icmp_send_response>
}
 8014110:	bf00      	nop
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b08c      	sub	sp, #48	; 0x30
 801411c:	af04      	add	r7, sp, #16
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	460b      	mov	r3, r1
 8014122:	70fb      	strb	r3, [r7, #3]
 8014124:	4613      	mov	r3, r2
 8014126:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014128:	f44f 7220 	mov.w	r2, #640	; 0x280
 801412c:	2124      	movs	r1, #36	; 0x24
 801412e:	2022      	movs	r0, #34	; 0x22
 8014130:	f7f8 fd74 	bl	800cc1c <pbuf_alloc>
 8014134:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014136:	69fb      	ldr	r3, [r7, #28]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d04c      	beq.n	80141d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	895b      	ldrh	r3, [r3, #10]
 8014140:	2b23      	cmp	r3, #35	; 0x23
 8014142:	d806      	bhi.n	8014152 <icmp_send_response+0x3a>
 8014144:	4b26      	ldr	r3, [pc, #152]	; (80141e0 <icmp_send_response+0xc8>)
 8014146:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801414a:	4926      	ldr	r1, [pc, #152]	; (80141e4 <icmp_send_response+0xcc>)
 801414c:	4826      	ldr	r0, [pc, #152]	; (80141e8 <icmp_send_response+0xd0>)
 801414e:	f001 fcdb 	bl	8015b08 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014158:	69fb      	ldr	r3, [r7, #28]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	78fa      	ldrb	r2, [r7, #3]
 8014162:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	78ba      	ldrb	r2, [r7, #2]
 8014168:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	2200      	movs	r2, #0
 801416e:	711a      	strb	r2, [r3, #4]
 8014170:	2200      	movs	r2, #0
 8014172:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	2200      	movs	r2, #0
 8014178:	719a      	strb	r2, [r3, #6]
 801417a:	2200      	movs	r2, #0
 801417c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801417e:	69fb      	ldr	r3, [r7, #28]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	f103 0008 	add.w	r0, r3, #8
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	221c      	movs	r2, #28
 801418c:	4619      	mov	r1, r3
 801418e:	f001 fee2 	bl	8015f56 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	68db      	ldr	r3, [r3, #12]
 8014196:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014198:	f107 030c 	add.w	r3, r7, #12
 801419c:	4618      	mov	r0, r3
 801419e:	f000 f825 	bl	80141ec <ip4_route>
 80141a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d011      	beq.n	80141ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2200      	movs	r2, #0
 80141ae:	709a      	strb	r2, [r3, #2]
 80141b0:	2200      	movs	r2, #0
 80141b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80141b4:	f107 020c 	add.w	r2, r7, #12
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	9302      	str	r3, [sp, #8]
 80141bc:	2301      	movs	r3, #1
 80141be:	9301      	str	r3, [sp, #4]
 80141c0:	2300      	movs	r3, #0
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	23ff      	movs	r3, #255	; 0xff
 80141c6:	2100      	movs	r1, #0
 80141c8:	69f8      	ldr	r0, [r7, #28]
 80141ca:	f000 f9cd 	bl	8014568 <ip4_output_if>
  }
  pbuf_free(q);
 80141ce:	69f8      	ldr	r0, [r7, #28]
 80141d0:	f7f9 f808 	bl	800d1e4 <pbuf_free>
 80141d4:	e000      	b.n	80141d8 <icmp_send_response+0xc0>
    return;
 80141d6:	bf00      	nop
}
 80141d8:	3720      	adds	r7, #32
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	080193b4 	.word	0x080193b4
 80141e4:	08019480 	.word	0x08019480
 80141e8:	08019424 	.word	0x08019424

080141ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b085      	sub	sp, #20
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80141f4:	4b33      	ldr	r3, [pc, #204]	; (80142c4 <ip4_route+0xd8>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	60fb      	str	r3, [r7, #12]
 80141fa:	e036      	b.n	801426a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014202:	f003 0301 	and.w	r3, r3, #1
 8014206:	b2db      	uxtb	r3, r3
 8014208:	2b00      	cmp	r3, #0
 801420a:	d02b      	beq.n	8014264 <ip4_route+0x78>
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014212:	089b      	lsrs	r3, r3, #2
 8014214:	f003 0301 	and.w	r3, r3, #1
 8014218:	b2db      	uxtb	r3, r3
 801421a:	2b00      	cmp	r3, #0
 801421c:	d022      	beq.n	8014264 <ip4_route+0x78>
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	3304      	adds	r3, #4
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d01d      	beq.n	8014264 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	3304      	adds	r3, #4
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	405a      	eors	r2, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	3308      	adds	r3, #8
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	4013      	ands	r3, r2
 801423c:	2b00      	cmp	r3, #0
 801423e:	d101      	bne.n	8014244 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	e038      	b.n	80142b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801424a:	f003 0302 	and.w	r3, r3, #2
 801424e:	2b00      	cmp	r3, #0
 8014250:	d108      	bne.n	8014264 <ip4_route+0x78>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	330c      	adds	r3, #12
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	429a      	cmp	r2, r3
 801425e:	d101      	bne.n	8014264 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	e028      	b.n	80142b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	60fb      	str	r3, [r7, #12]
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d1c5      	bne.n	80141fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014270:	4b15      	ldr	r3, [pc, #84]	; (80142c8 <ip4_route+0xdc>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d01a      	beq.n	80142ae <ip4_route+0xc2>
 8014278:	4b13      	ldr	r3, [pc, #76]	; (80142c8 <ip4_route+0xdc>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014280:	f003 0301 	and.w	r3, r3, #1
 8014284:	2b00      	cmp	r3, #0
 8014286:	d012      	beq.n	80142ae <ip4_route+0xc2>
 8014288:	4b0f      	ldr	r3, [pc, #60]	; (80142c8 <ip4_route+0xdc>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014290:	f003 0304 	and.w	r3, r3, #4
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00a      	beq.n	80142ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014298:	4b0b      	ldr	r3, [pc, #44]	; (80142c8 <ip4_route+0xdc>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	3304      	adds	r3, #4
 801429e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d004      	beq.n	80142ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	b2db      	uxtb	r3, r3
 80142aa:	2b7f      	cmp	r3, #127	; 0x7f
 80142ac:	d101      	bne.n	80142b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80142ae:	2300      	movs	r3, #0
 80142b0:	e001      	b.n	80142b6 <ip4_route+0xca>
  }

  return netif_default;
 80142b2:	4b05      	ldr	r3, [pc, #20]	; (80142c8 <ip4_route+0xdc>)
 80142b4:	681b      	ldr	r3, [r3, #0]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3714      	adds	r7, #20
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr
 80142c2:	bf00      	nop
 80142c4:	20045054 	.word	0x20045054
 80142c8:	20045058 	.word	0x20045058

080142cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142da:	f003 0301 	and.w	r3, r3, #1
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d016      	beq.n	8014312 <ip4_input_accept+0x46>
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	3304      	adds	r3, #4
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d011      	beq.n	8014312 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80142ee:	4b0b      	ldr	r3, [pc, #44]	; (801431c <ip4_input_accept+0x50>)
 80142f0:	695a      	ldr	r2, [r3, #20]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	3304      	adds	r3, #4
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d008      	beq.n	801430e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80142fc:	4b07      	ldr	r3, [pc, #28]	; (801431c <ip4_input_accept+0x50>)
 80142fe:	695b      	ldr	r3, [r3, #20]
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	4618      	mov	r0, r3
 8014304:	f000 fa08 	bl	8014718 <ip4_addr_isbroadcast_u32>
 8014308:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801430a:	2b00      	cmp	r3, #0
 801430c:	d001      	beq.n	8014312 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801430e:	2301      	movs	r3, #1
 8014310:	e000      	b.n	8014314 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014312:	2300      	movs	r3, #0
}
 8014314:	4618      	mov	r0, r3
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	2004190c 	.word	0x2004190c

08014320 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b086      	sub	sp, #24
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014330:	697b      	ldr	r3, [r7, #20]
 8014332:	781b      	ldrb	r3, [r3, #0]
 8014334:	091b      	lsrs	r3, r3, #4
 8014336:	b2db      	uxtb	r3, r3
 8014338:	2b04      	cmp	r3, #4
 801433a:	d004      	beq.n	8014346 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f7f8 ff51 	bl	800d1e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014342:	2300      	movs	r3, #0
 8014344:	e107      	b.n	8014556 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	f003 030f 	and.w	r3, r3, #15
 801434e:	b2db      	uxtb	r3, r3
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	b2db      	uxtb	r3, r3
 8014354:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	885b      	ldrh	r3, [r3, #2]
 801435a:	b29b      	uxth	r3, r3
 801435c:	4618      	mov	r0, r3
 801435e:	f7f7 fb4f 	bl	800ba00 <lwip_htons>
 8014362:	4603      	mov	r3, r0
 8014364:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	891b      	ldrh	r3, [r3, #8]
 801436a:	89ba      	ldrh	r2, [r7, #12]
 801436c:	429a      	cmp	r2, r3
 801436e:	d204      	bcs.n	801437a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014370:	89bb      	ldrh	r3, [r7, #12]
 8014372:	4619      	mov	r1, r3
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f7f8 fdaf 	bl	800ced8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	895b      	ldrh	r3, [r3, #10]
 801437e:	89fa      	ldrh	r2, [r7, #14]
 8014380:	429a      	cmp	r2, r3
 8014382:	d807      	bhi.n	8014394 <ip4_input+0x74>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	891b      	ldrh	r3, [r3, #8]
 8014388:	89ba      	ldrh	r2, [r7, #12]
 801438a:	429a      	cmp	r2, r3
 801438c:	d802      	bhi.n	8014394 <ip4_input+0x74>
 801438e:	89fb      	ldrh	r3, [r7, #14]
 8014390:	2b13      	cmp	r3, #19
 8014392:	d804      	bhi.n	801439e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7f8 ff25 	bl	800d1e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801439a:	2300      	movs	r3, #0
 801439c:	e0db      	b.n	8014556 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	691b      	ldr	r3, [r3, #16]
 80143a2:	4a6f      	ldr	r2, [pc, #444]	; (8014560 <ip4_input+0x240>)
 80143a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	4a6d      	ldr	r2, [pc, #436]	; (8014560 <ip4_input+0x240>)
 80143ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80143ae:	4b6c      	ldr	r3, [pc, #432]	; (8014560 <ip4_input+0x240>)
 80143b0:	695b      	ldr	r3, [r3, #20]
 80143b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143b6:	2be0      	cmp	r3, #224	; 0xe0
 80143b8:	d112      	bne.n	80143e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143c0:	f003 0301 	and.w	r3, r3, #1
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d007      	beq.n	80143da <ip4_input+0xba>
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	3304      	adds	r3, #4
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d002      	beq.n	80143da <ip4_input+0xba>
      netif = inp;
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	613b      	str	r3, [r7, #16]
 80143d8:	e02a      	b.n	8014430 <ip4_input+0x110>
    } else {
      netif = NULL;
 80143da:	2300      	movs	r3, #0
 80143dc:	613b      	str	r3, [r7, #16]
 80143de:	e027      	b.n	8014430 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80143e0:	6838      	ldr	r0, [r7, #0]
 80143e2:	f7ff ff73 	bl	80142cc <ip4_input_accept>
 80143e6:	4603      	mov	r3, r0
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <ip4_input+0xd2>
      netif = inp;
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	613b      	str	r3, [r7, #16]
 80143f0:	e01e      	b.n	8014430 <ip4_input+0x110>
    } else {
      netif = NULL;
 80143f2:	2300      	movs	r3, #0
 80143f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80143f6:	4b5a      	ldr	r3, [pc, #360]	; (8014560 <ip4_input+0x240>)
 80143f8:	695b      	ldr	r3, [r3, #20]
 80143fa:	b2db      	uxtb	r3, r3
 80143fc:	2b7f      	cmp	r3, #127	; 0x7f
 80143fe:	d017      	beq.n	8014430 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014400:	4b58      	ldr	r3, [pc, #352]	; (8014564 <ip4_input+0x244>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	613b      	str	r3, [r7, #16]
 8014406:	e00e      	b.n	8014426 <ip4_input+0x106>
          if (netif == inp) {
 8014408:	693a      	ldr	r2, [r7, #16]
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	429a      	cmp	r2, r3
 801440e:	d006      	beq.n	801441e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014410:	6938      	ldr	r0, [r7, #16]
 8014412:	f7ff ff5b 	bl	80142cc <ip4_input_accept>
 8014416:	4603      	mov	r3, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	d108      	bne.n	801442e <ip4_input+0x10e>
 801441c:	e000      	b.n	8014420 <ip4_input+0x100>
            continue;
 801441e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	613b      	str	r3, [r7, #16]
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d1ed      	bne.n	8014408 <ip4_input+0xe8>
 801442c:	e000      	b.n	8014430 <ip4_input+0x110>
            break;
 801442e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014430:	4b4b      	ldr	r3, [pc, #300]	; (8014560 <ip4_input+0x240>)
 8014432:	691b      	ldr	r3, [r3, #16]
 8014434:	6839      	ldr	r1, [r7, #0]
 8014436:	4618      	mov	r0, r3
 8014438:	f000 f96e 	bl	8014718 <ip4_addr_isbroadcast_u32>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d105      	bne.n	801444e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014442:	4b47      	ldr	r3, [pc, #284]	; (8014560 <ip4_input+0x240>)
 8014444:	691b      	ldr	r3, [r3, #16]
 8014446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801444a:	2be0      	cmp	r3, #224	; 0xe0
 801444c:	d104      	bne.n	8014458 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7f8 fec8 	bl	800d1e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014454:	2300      	movs	r3, #0
 8014456:	e07e      	b.n	8014556 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d104      	bne.n	8014468 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7f8 fec0 	bl	800d1e4 <pbuf_free>
    return ERR_OK;
 8014464:	2300      	movs	r3, #0
 8014466:	e076      	b.n	8014556 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	88db      	ldrh	r3, [r3, #6]
 801446c:	b29b      	uxth	r3, r3
 801446e:	461a      	mov	r2, r3
 8014470:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014474:	4013      	ands	r3, r2
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00b      	beq.n	8014492 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f000 fc92 	bl	8014da4 <ip4_reass>
 8014480:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d101      	bne.n	801448c <ip4_input+0x16c>
      return ERR_OK;
 8014488:	2300      	movs	r3, #0
 801448a:	e064      	b.n	8014556 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014492:	4a33      	ldr	r2, [pc, #204]	; (8014560 <ip4_input+0x240>)
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014498:	4a31      	ldr	r2, [pc, #196]	; (8014560 <ip4_input+0x240>)
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801449e:	4a30      	ldr	r2, [pc, #192]	; (8014560 <ip4_input+0x240>)
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	781b      	ldrb	r3, [r3, #0]
 80144a8:	f003 030f 	and.w	r3, r3, #15
 80144ac:	b2db      	uxtb	r3, r3
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	b2db      	uxtb	r3, r3
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	4b2a      	ldr	r3, [pc, #168]	; (8014560 <ip4_input+0x240>)
 80144b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80144b8:	89fb      	ldrh	r3, [r7, #14]
 80144ba:	4619      	mov	r1, r3
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f7f8 fe0b 	bl	800d0d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	7a5b      	ldrb	r3, [r3, #9]
 80144c6:	2b11      	cmp	r3, #17
 80144c8:	d006      	beq.n	80144d8 <ip4_input+0x1b8>
 80144ca:	2b11      	cmp	r3, #17
 80144cc:	dc13      	bgt.n	80144f6 <ip4_input+0x1d6>
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d00c      	beq.n	80144ec <ip4_input+0x1cc>
 80144d2:	2b06      	cmp	r3, #6
 80144d4:	d005      	beq.n	80144e2 <ip4_input+0x1c2>
 80144d6:	e00e      	b.n	80144f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80144d8:	6839      	ldr	r1, [r7, #0]
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f7fe fc68 	bl	8012db0 <udp_input>
        break;
 80144e0:	e026      	b.n	8014530 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80144e2:	6839      	ldr	r1, [r7, #0]
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7fa fcb1 	bl	800ee4c <tcp_input>
        break;
 80144ea:	e021      	b.n	8014530 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f7ff fcee 	bl	8013ed0 <icmp_input>
        break;
 80144f4:	e01c      	b.n	8014530 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80144f6:	4b1a      	ldr	r3, [pc, #104]	; (8014560 <ip4_input+0x240>)
 80144f8:	695b      	ldr	r3, [r3, #20]
 80144fa:	6939      	ldr	r1, [r7, #16]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f000 f90b 	bl	8014718 <ip4_addr_isbroadcast_u32>
 8014502:	4603      	mov	r3, r0
 8014504:	2b00      	cmp	r3, #0
 8014506:	d10f      	bne.n	8014528 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014508:	4b15      	ldr	r3, [pc, #84]	; (8014560 <ip4_input+0x240>)
 801450a:	695b      	ldr	r3, [r3, #20]
 801450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014510:	2be0      	cmp	r3, #224	; 0xe0
 8014512:	d009      	beq.n	8014528 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014518:	4619      	mov	r1, r3
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f7f8 fe4f 	bl	800d1be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014520:	2102      	movs	r1, #2
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f7ff fdd8 	bl	80140d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f7f8 fe5b 	bl	800d1e4 <pbuf_free>
        break;
 801452e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014530:	4b0b      	ldr	r3, [pc, #44]	; (8014560 <ip4_input+0x240>)
 8014532:	2200      	movs	r2, #0
 8014534:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014536:	4b0a      	ldr	r3, [pc, #40]	; (8014560 <ip4_input+0x240>)
 8014538:	2200      	movs	r2, #0
 801453a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801453c:	4b08      	ldr	r3, [pc, #32]	; (8014560 <ip4_input+0x240>)
 801453e:	2200      	movs	r2, #0
 8014540:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014542:	4b07      	ldr	r3, [pc, #28]	; (8014560 <ip4_input+0x240>)
 8014544:	2200      	movs	r2, #0
 8014546:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014548:	4b05      	ldr	r3, [pc, #20]	; (8014560 <ip4_input+0x240>)
 801454a:	2200      	movs	r2, #0
 801454c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801454e:	4b04      	ldr	r3, [pc, #16]	; (8014560 <ip4_input+0x240>)
 8014550:	2200      	movs	r2, #0
 8014552:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	2004190c 	.word	0x2004190c
 8014564:	20045054 	.word	0x20045054

08014568 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b08a      	sub	sp, #40	; 0x28
 801456c:	af04      	add	r7, sp, #16
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
 8014574:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014576:	68bb      	ldr	r3, [r7, #8]
 8014578:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d009      	beq.n	8014594 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d003      	beq.n	801458e <ip4_output_if+0x26>
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d102      	bne.n	8014594 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014590:	3304      	adds	r3, #4
 8014592:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014594:	78fa      	ldrb	r2, [r7, #3]
 8014596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014598:	9302      	str	r3, [sp, #8]
 801459a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801459e:	9301      	str	r3, [sp, #4]
 80145a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	4613      	mov	r3, r2
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	6979      	ldr	r1, [r7, #20]
 80145ac:	68f8      	ldr	r0, [r7, #12]
 80145ae:	f000 f805 	bl	80145bc <ip4_output_if_src>
 80145b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3718      	adds	r7, #24
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b088      	sub	sp, #32
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	60f8      	str	r0, [r7, #12]
 80145c4:	60b9      	str	r1, [r7, #8]
 80145c6:	607a      	str	r2, [r7, #4]
 80145c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	7b9b      	ldrb	r3, [r3, #14]
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d006      	beq.n	80145e0 <ip4_output_if_src+0x24>
 80145d2:	4b4b      	ldr	r3, [pc, #300]	; (8014700 <ip4_output_if_src+0x144>)
 80145d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80145d8:	494a      	ldr	r1, [pc, #296]	; (8014704 <ip4_output_if_src+0x148>)
 80145da:	484b      	ldr	r0, [pc, #300]	; (8014708 <ip4_output_if_src+0x14c>)
 80145dc:	f001 fa94 	bl	8015b08 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d060      	beq.n	80146a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80145e6:	2314      	movs	r3, #20
 80145e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80145ea:	2114      	movs	r1, #20
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f7f8 fd63 	bl	800d0b8 <pbuf_add_header>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d002      	beq.n	80145fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80145f8:	f06f 0301 	mvn.w	r3, #1
 80145fc:	e07c      	b.n	80146f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	895b      	ldrh	r3, [r3, #10]
 8014608:	2b13      	cmp	r3, #19
 801460a:	d806      	bhi.n	801461a <ip4_output_if_src+0x5e>
 801460c:	4b3c      	ldr	r3, [pc, #240]	; (8014700 <ip4_output_if_src+0x144>)
 801460e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014612:	493e      	ldr	r1, [pc, #248]	; (801470c <ip4_output_if_src+0x150>)
 8014614:	483c      	ldr	r0, [pc, #240]	; (8014708 <ip4_output_if_src+0x14c>)
 8014616:	f001 fa77 	bl	8015b08 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	78fa      	ldrb	r2, [r7, #3]
 801461e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014626:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681a      	ldr	r2, [r3, #0]
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014630:	8b7b      	ldrh	r3, [r7, #26]
 8014632:	089b      	lsrs	r3, r3, #2
 8014634:	b29b      	uxth	r3, r3
 8014636:	b2db      	uxtb	r3, r3
 8014638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801463c:	b2da      	uxtb	r2, r3
 801463e:	69fb      	ldr	r3, [r7, #28]
 8014640:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014642:	69fb      	ldr	r3, [r7, #28]
 8014644:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014648:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	891b      	ldrh	r3, [r3, #8]
 801464e:	4618      	mov	r0, r3
 8014650:	f7f7 f9d6 	bl	800ba00 <lwip_htons>
 8014654:	4603      	mov	r3, r0
 8014656:	461a      	mov	r2, r3
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	2200      	movs	r2, #0
 8014660:	719a      	strb	r2, [r3, #6]
 8014662:	2200      	movs	r2, #0
 8014664:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014666:	4b2a      	ldr	r3, [pc, #168]	; (8014710 <ip4_output_if_src+0x154>)
 8014668:	881b      	ldrh	r3, [r3, #0]
 801466a:	4618      	mov	r0, r3
 801466c:	f7f7 f9c8 	bl	800ba00 <lwip_htons>
 8014670:	4603      	mov	r3, r0
 8014672:	461a      	mov	r2, r3
 8014674:	69fb      	ldr	r3, [r7, #28]
 8014676:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014678:	4b25      	ldr	r3, [pc, #148]	; (8014710 <ip4_output_if_src+0x154>)
 801467a:	881b      	ldrh	r3, [r3, #0]
 801467c:	3301      	adds	r3, #1
 801467e:	b29a      	uxth	r2, r3
 8014680:	4b23      	ldr	r3, [pc, #140]	; (8014710 <ip4_output_if_src+0x154>)
 8014682:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d104      	bne.n	8014694 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801468a:	4b22      	ldr	r3, [pc, #136]	; (8014714 <ip4_output_if_src+0x158>)
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	60da      	str	r2, [r3, #12]
 8014692:	e003      	b.n	801469c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	681a      	ldr	r2, [r3, #0]
 8014698:	69fb      	ldr	r3, [r7, #28]
 801469a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	2200      	movs	r2, #0
 80146a0:	729a      	strb	r2, [r3, #10]
 80146a2:	2200      	movs	r2, #0
 80146a4:	72da      	strb	r2, [r3, #11]
 80146a6:	e00f      	b.n	80146c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	895b      	ldrh	r3, [r3, #10]
 80146ac:	2b13      	cmp	r3, #19
 80146ae:	d802      	bhi.n	80146b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80146b0:	f06f 0301 	mvn.w	r3, #1
 80146b4:	e020      	b.n	80146f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	691b      	ldr	r3, [r3, #16]
 80146c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80146c2:	f107 0314 	add.w	r3, r7, #20
 80146c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80146c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d00c      	beq.n	80146ea <ip4_output_if_src+0x12e>
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	891a      	ldrh	r2, [r3, #8]
 80146d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80146d8:	429a      	cmp	r2, r3
 80146da:	d906      	bls.n	80146ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80146e0:	68f8      	ldr	r0, [r7, #12]
 80146e2:	f000 fd53 	bl	801518c <ip4_frag>
 80146e6:	4603      	mov	r3, r0
 80146e8:	e006      	b.n	80146f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80146ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ec:	695b      	ldr	r3, [r3, #20]
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	68f9      	ldr	r1, [r7, #12]
 80146f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146f4:	4798      	blx	r3
 80146f6:	4603      	mov	r3, r0
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3720      	adds	r7, #32
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	080194ac 	.word	0x080194ac
 8014704:	080194e0 	.word	0x080194e0
 8014708:	080194ec 	.word	0x080194ec
 801470c:	08019514 	.word	0x08019514
 8014710:	200451b2 	.word	0x200451b2
 8014714:	0801993c 	.word	0x0801993c

08014718 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014718:	b480      	push	{r7}
 801471a:	b085      	sub	sp, #20
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801472c:	d002      	beq.n	8014734 <ip4_addr_isbroadcast_u32+0x1c>
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d101      	bne.n	8014738 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014734:	2301      	movs	r3, #1
 8014736:	e02a      	b.n	801478e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801473e:	f003 0302 	and.w	r3, r3, #2
 8014742:	2b00      	cmp	r3, #0
 8014744:	d101      	bne.n	801474a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014746:	2300      	movs	r3, #0
 8014748:	e021      	b.n	801478e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	3304      	adds	r3, #4
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	687a      	ldr	r2, [r7, #4]
 8014752:	429a      	cmp	r2, r3
 8014754:	d101      	bne.n	801475a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014756:	2300      	movs	r3, #0
 8014758:	e019      	b.n	801478e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	3304      	adds	r3, #4
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	405a      	eors	r2, r3
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	3308      	adds	r3, #8
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4013      	ands	r3, r2
 801476c:	2b00      	cmp	r3, #0
 801476e:	d10d      	bne.n	801478c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	3308      	adds	r3, #8
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	43da      	mvns	r2, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	3308      	adds	r3, #8
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014784:	429a      	cmp	r2, r3
 8014786:	d101      	bne.n	801478c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014788:	2301      	movs	r3, #1
 801478a:	e000      	b.n	801478e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801478c:	2300      	movs	r3, #0
  }
}
 801478e:	4618      	mov	r0, r3
 8014790:	3714      	adds	r7, #20
 8014792:	46bd      	mov	sp, r7
 8014794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014798:	4770      	bx	lr
	...

0801479c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b084      	sub	sp, #16
 80147a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80147a2:	2300      	movs	r3, #0
 80147a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80147a6:	4b12      	ldr	r3, [pc, #72]	; (80147f0 <ip_reass_tmr+0x54>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80147ac:	e018      	b.n	80147e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	7fdb      	ldrb	r3, [r3, #31]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d00b      	beq.n	80147ce <ip_reass_tmr+0x32>
      r->timer--;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	7fdb      	ldrb	r3, [r3, #31]
 80147ba:	3b01      	subs	r3, #1
 80147bc:	b2da      	uxtb	r2, r3
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	60fb      	str	r3, [r7, #12]
 80147cc:	e008      	b.n	80147e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80147d8:	68b9      	ldr	r1, [r7, #8]
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f000 f80a 	bl	80147f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d1e3      	bne.n	80147ae <ip_reass_tmr+0x12>
    }
  }
}
 80147e6:	bf00      	nop
 80147e8:	bf00      	nop
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	200451b4 	.word	0x200451b4

080147f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b088      	sub	sp, #32
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80147fe:	2300      	movs	r3, #0
 8014800:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	429a      	cmp	r2, r3
 8014808:	d105      	bne.n	8014816 <ip_reass_free_complete_datagram+0x22>
 801480a:	4b45      	ldr	r3, [pc, #276]	; (8014920 <ip_reass_free_complete_datagram+0x12c>)
 801480c:	22ab      	movs	r2, #171	; 0xab
 801480e:	4945      	ldr	r1, [pc, #276]	; (8014924 <ip_reass_free_complete_datagram+0x130>)
 8014810:	4845      	ldr	r0, [pc, #276]	; (8014928 <ip_reass_free_complete_datagram+0x134>)
 8014812:	f001 f979 	bl	8015b08 <iprintf>
  if (prev != NULL) {
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00a      	beq.n	8014832 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	429a      	cmp	r2, r3
 8014824:	d005      	beq.n	8014832 <ip_reass_free_complete_datagram+0x3e>
 8014826:	4b3e      	ldr	r3, [pc, #248]	; (8014920 <ip_reass_free_complete_datagram+0x12c>)
 8014828:	22ad      	movs	r2, #173	; 0xad
 801482a:	4940      	ldr	r1, [pc, #256]	; (801492c <ip_reass_free_complete_datagram+0x138>)
 801482c:	483e      	ldr	r0, [pc, #248]	; (8014928 <ip_reass_free_complete_datagram+0x134>)
 801482e:	f001 f96b 	bl	8015b08 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801483a:	697b      	ldr	r3, [r7, #20]
 801483c:	889b      	ldrh	r3, [r3, #4]
 801483e:	b29b      	uxth	r3, r3
 8014840:	2b00      	cmp	r3, #0
 8014842:	d12a      	bne.n	801489a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	6858      	ldr	r0, [r3, #4]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	3308      	adds	r3, #8
 801485a:	2214      	movs	r2, #20
 801485c:	4619      	mov	r1, r3
 801485e:	f001 fb7a 	bl	8015f56 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014862:	2101      	movs	r1, #1
 8014864:	69b8      	ldr	r0, [r7, #24]
 8014866:	f7ff fc47 	bl	80140f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801486a:	69b8      	ldr	r0, [r7, #24]
 801486c:	f7f8 fd48 	bl	800d300 <pbuf_clen>
 8014870:	4603      	mov	r3, r0
 8014872:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014874:	8bfa      	ldrh	r2, [r7, #30]
 8014876:	8a7b      	ldrh	r3, [r7, #18]
 8014878:	4413      	add	r3, r2
 801487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801487e:	db05      	blt.n	801488c <ip_reass_free_complete_datagram+0x98>
 8014880:	4b27      	ldr	r3, [pc, #156]	; (8014920 <ip_reass_free_complete_datagram+0x12c>)
 8014882:	22bc      	movs	r2, #188	; 0xbc
 8014884:	492a      	ldr	r1, [pc, #168]	; (8014930 <ip_reass_free_complete_datagram+0x13c>)
 8014886:	4828      	ldr	r0, [pc, #160]	; (8014928 <ip_reass_free_complete_datagram+0x134>)
 8014888:	f001 f93e 	bl	8015b08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801488c:	8bfa      	ldrh	r2, [r7, #30]
 801488e:	8a7b      	ldrh	r3, [r7, #18]
 8014890:	4413      	add	r3, r2
 8014892:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014894:	69b8      	ldr	r0, [r7, #24]
 8014896:	f7f8 fca5 	bl	800d1e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80148a0:	e01f      	b.n	80148e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80148b2:	68f8      	ldr	r0, [r7, #12]
 80148b4:	f7f8 fd24 	bl	800d300 <pbuf_clen>
 80148b8:	4603      	mov	r3, r0
 80148ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80148bc:	8bfa      	ldrh	r2, [r7, #30]
 80148be:	8a7b      	ldrh	r3, [r7, #18]
 80148c0:	4413      	add	r3, r2
 80148c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148c6:	db05      	blt.n	80148d4 <ip_reass_free_complete_datagram+0xe0>
 80148c8:	4b15      	ldr	r3, [pc, #84]	; (8014920 <ip_reass_free_complete_datagram+0x12c>)
 80148ca:	22cc      	movs	r2, #204	; 0xcc
 80148cc:	4918      	ldr	r1, [pc, #96]	; (8014930 <ip_reass_free_complete_datagram+0x13c>)
 80148ce:	4816      	ldr	r0, [pc, #88]	; (8014928 <ip_reass_free_complete_datagram+0x134>)
 80148d0:	f001 f91a 	bl	8015b08 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80148d4:	8bfa      	ldrh	r2, [r7, #30]
 80148d6:	8a7b      	ldrh	r3, [r7, #18]
 80148d8:	4413      	add	r3, r2
 80148da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f7f8 fc81 	bl	800d1e4 <pbuf_free>
  while (p != NULL) {
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d1dc      	bne.n	80148a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80148e8:	6839      	ldr	r1, [r7, #0]
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f000 f8c2 	bl	8014a74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80148f0:	4b10      	ldr	r3, [pc, #64]	; (8014934 <ip_reass_free_complete_datagram+0x140>)
 80148f2:	881b      	ldrh	r3, [r3, #0]
 80148f4:	8bfa      	ldrh	r2, [r7, #30]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d905      	bls.n	8014906 <ip_reass_free_complete_datagram+0x112>
 80148fa:	4b09      	ldr	r3, [pc, #36]	; (8014920 <ip_reass_free_complete_datagram+0x12c>)
 80148fc:	22d2      	movs	r2, #210	; 0xd2
 80148fe:	490e      	ldr	r1, [pc, #56]	; (8014938 <ip_reass_free_complete_datagram+0x144>)
 8014900:	4809      	ldr	r0, [pc, #36]	; (8014928 <ip_reass_free_complete_datagram+0x134>)
 8014902:	f001 f901 	bl	8015b08 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014906:	4b0b      	ldr	r3, [pc, #44]	; (8014934 <ip_reass_free_complete_datagram+0x140>)
 8014908:	881a      	ldrh	r2, [r3, #0]
 801490a:	8bfb      	ldrh	r3, [r7, #30]
 801490c:	1ad3      	subs	r3, r2, r3
 801490e:	b29a      	uxth	r2, r3
 8014910:	4b08      	ldr	r3, [pc, #32]	; (8014934 <ip_reass_free_complete_datagram+0x140>)
 8014912:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014914:	8bfb      	ldrh	r3, [r7, #30]
}
 8014916:	4618      	mov	r0, r3
 8014918:	3720      	adds	r7, #32
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	08019544 	.word	0x08019544
 8014924:	08019580 	.word	0x08019580
 8014928:	0801958c 	.word	0x0801958c
 801492c:	080195b4 	.word	0x080195b4
 8014930:	080195c8 	.word	0x080195c8
 8014934:	200451b8 	.word	0x200451b8
 8014938:	080195e8 	.word	0x080195e8

0801493c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08a      	sub	sp, #40	; 0x28
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014946:	2300      	movs	r3, #0
 8014948:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801494a:	2300      	movs	r3, #0
 801494c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801494e:	2300      	movs	r3, #0
 8014950:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014952:	2300      	movs	r3, #0
 8014954:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014956:	2300      	movs	r3, #0
 8014958:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801495a:	4b28      	ldr	r3, [pc, #160]	; (80149fc <ip_reass_remove_oldest_datagram+0xc0>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014960:	e030      	b.n	80149c4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014964:	695a      	ldr	r2, [r3, #20]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	429a      	cmp	r2, r3
 801496c:	d10c      	bne.n	8014988 <ip_reass_remove_oldest_datagram+0x4c>
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	699a      	ldr	r2, [r3, #24]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	691b      	ldr	r3, [r3, #16]
 8014976:	429a      	cmp	r2, r3
 8014978:	d106      	bne.n	8014988 <ip_reass_remove_oldest_datagram+0x4c>
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	899a      	ldrh	r2, [r3, #12]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	889b      	ldrh	r3, [r3, #4]
 8014982:	b29b      	uxth	r3, r3
 8014984:	429a      	cmp	r2, r3
 8014986:	d014      	beq.n	80149b2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	3301      	adds	r3, #1
 801498c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d104      	bne.n	801499e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014996:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	61bb      	str	r3, [r7, #24]
 801499c:	e009      	b.n	80149b2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a0:	7fda      	ldrb	r2, [r3, #31]
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	7fdb      	ldrb	r3, [r3, #31]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d803      	bhi.n	80149b2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80149b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d001      	beq.n	80149be <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80149ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149bc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80149be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d1cb      	bne.n	8014962 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80149ca:	6a3b      	ldr	r3, [r7, #32]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d008      	beq.n	80149e2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80149d0:	69b9      	ldr	r1, [r7, #24]
 80149d2:	6a38      	ldr	r0, [r7, #32]
 80149d4:	f7ff ff0e 	bl	80147f4 <ip_reass_free_complete_datagram>
 80149d8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80149da:	697a      	ldr	r2, [r7, #20]
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	4413      	add	r3, r2
 80149e0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80149e2:	697a      	ldr	r2, [r7, #20]
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	da02      	bge.n	80149f0 <ip_reass_remove_oldest_datagram+0xb4>
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	dcac      	bgt.n	801494a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80149f0:	697b      	ldr	r3, [r7, #20]
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3728      	adds	r7, #40	; 0x28
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	200451b4 	.word	0x200451b4

08014a00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b084      	sub	sp, #16
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014a0a:	2004      	movs	r0, #4
 8014a0c:	f7f7 fcd0 	bl	800c3b0 <memp_malloc>
 8014a10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d110      	bne.n	8014a3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f7ff ff8e 	bl	801493c <ip_reass_remove_oldest_datagram>
 8014a20:	4602      	mov	r2, r0
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	4293      	cmp	r3, r2
 8014a26:	dc03      	bgt.n	8014a30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014a28:	2004      	movs	r0, #4
 8014a2a:	f7f7 fcc1 	bl	800c3b0 <memp_malloc>
 8014a2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d101      	bne.n	8014a3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	e016      	b.n	8014a68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014a3a:	2220      	movs	r2, #32
 8014a3c:	2100      	movs	r1, #0
 8014a3e:	68f8      	ldr	r0, [r7, #12]
 8014a40:	f001 f9b8 	bl	8015db4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	220f      	movs	r2, #15
 8014a48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014a4a:	4b09      	ldr	r3, [pc, #36]	; (8014a70 <ip_reass_enqueue_new_datagram+0x70>)
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014a52:	4a07      	ldr	r2, [pc, #28]	; (8014a70 <ip_reass_enqueue_new_datagram+0x70>)
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	3308      	adds	r3, #8
 8014a5c:	2214      	movs	r2, #20
 8014a5e:	6879      	ldr	r1, [r7, #4]
 8014a60:	4618      	mov	r0, r3
 8014a62:	f001 fa78 	bl	8015f56 <memcpy>
  return ipr;
 8014a66:	68fb      	ldr	r3, [r7, #12]
}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	3710      	adds	r7, #16
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	200451b4 	.word	0x200451b4

08014a74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b082      	sub	sp, #8
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014a7e:	4b10      	ldr	r3, [pc, #64]	; (8014ac0 <ip_reass_dequeue_datagram+0x4c>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	687a      	ldr	r2, [r7, #4]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d104      	bne.n	8014a92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	4a0c      	ldr	r2, [pc, #48]	; (8014ac0 <ip_reass_dequeue_datagram+0x4c>)
 8014a8e:	6013      	str	r3, [r2, #0]
 8014a90:	e00d      	b.n	8014aae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d106      	bne.n	8014aa6 <ip_reass_dequeue_datagram+0x32>
 8014a98:	4b0a      	ldr	r3, [pc, #40]	; (8014ac4 <ip_reass_dequeue_datagram+0x50>)
 8014a9a:	f240 1245 	movw	r2, #325	; 0x145
 8014a9e:	490a      	ldr	r1, [pc, #40]	; (8014ac8 <ip_reass_dequeue_datagram+0x54>)
 8014aa0:	480a      	ldr	r0, [pc, #40]	; (8014acc <ip_reass_dequeue_datagram+0x58>)
 8014aa2:	f001 f831 	bl	8015b08 <iprintf>
    prev->next = ipr->next;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014aae:	6879      	ldr	r1, [r7, #4]
 8014ab0:	2004      	movs	r0, #4
 8014ab2:	f7f7 fcf3 	bl	800c49c <memp_free>
}
 8014ab6:	bf00      	nop
 8014ab8:	3708      	adds	r7, #8
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	200451b4 	.word	0x200451b4
 8014ac4:	08019544 	.word	0x08019544
 8014ac8:	0801960c 	.word	0x0801960c
 8014acc:	0801958c 	.word	0x0801958c

08014ad0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b08c      	sub	sp, #48	; 0x30
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	60f8      	str	r0, [r7, #12]
 8014ad8:	60b9      	str	r1, [r7, #8]
 8014ada:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014adc:	2300      	movs	r3, #0
 8014ade:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	885b      	ldrh	r3, [r3, #2]
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f6 ff85 	bl	800ba00 <lwip_htons>
 8014af6:	4603      	mov	r3, r0
 8014af8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014afa:	69fb      	ldr	r3, [r7, #28]
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	f003 030f 	and.w	r3, r3, #15
 8014b02:	b2db      	uxtb	r3, r3
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014b08:	7e7b      	ldrb	r3, [r7, #25]
 8014b0a:	b29b      	uxth	r3, r3
 8014b0c:	8b7a      	ldrh	r2, [r7, #26]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d202      	bcs.n	8014b18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014b12:	f04f 33ff 	mov.w	r3, #4294967295
 8014b16:	e135      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014b18:	7e7b      	ldrb	r3, [r7, #25]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	8b7a      	ldrh	r2, [r7, #26]
 8014b1e:	1ad3      	subs	r3, r2, r3
 8014b20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	88db      	ldrh	r3, [r3, #6]
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7f6 ff69 	bl	800ba00 <lwip_htons>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	00db      	lsls	r3, r3, #3
 8014b38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b42:	2200      	movs	r2, #0
 8014b44:	701a      	strb	r2, [r3, #0]
 8014b46:	2200      	movs	r2, #0
 8014b48:	705a      	strb	r2, [r3, #1]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	709a      	strb	r2, [r3, #2]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b54:	8afa      	ldrh	r2, [r7, #22]
 8014b56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014b58:	8afa      	ldrh	r2, [r7, #22]
 8014b5a:	8b7b      	ldrh	r3, [r7, #26]
 8014b5c:	4413      	add	r3, r2
 8014b5e:	b29a      	uxth	r2, r3
 8014b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b66:	88db      	ldrh	r3, [r3, #6]
 8014b68:	b29b      	uxth	r3, r3
 8014b6a:	8afa      	ldrh	r2, [r7, #22]
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d902      	bls.n	8014b76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014b70:	f04f 33ff 	mov.w	r3, #4294967295
 8014b74:	e106      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8014b7c:	e068      	b.n	8014c50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b86:	889b      	ldrh	r3, [r3, #4]
 8014b88:	b29a      	uxth	r2, r3
 8014b8a:	693b      	ldr	r3, [r7, #16]
 8014b8c:	889b      	ldrh	r3, [r3, #4]
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d235      	bcs.n	8014c00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d020      	beq.n	8014be2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba2:	889b      	ldrh	r3, [r3, #4]
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba8:	88db      	ldrh	r3, [r3, #6]
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d307      	bcc.n	8014bc0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb2:	88db      	ldrh	r3, [r3, #6]
 8014bb4:	b29a      	uxth	r2, r3
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	889b      	ldrh	r3, [r3, #4]
 8014bba:	b29b      	uxth	r3, r3
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d902      	bls.n	8014bc6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc4:	e0de      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc8:	68ba      	ldr	r2, [r7, #8]
 8014bca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bce:	88db      	ldrh	r3, [r3, #6]
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bd4:	889b      	ldrh	r3, [r3, #4]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d03d      	beq.n	8014c58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014be0:	e03a      	b.n	8014c58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014be4:	88db      	ldrh	r3, [r3, #6]
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	889b      	ldrh	r3, [r3, #4]
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d902      	bls.n	8014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf6:	e0c5      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	68ba      	ldr	r2, [r7, #8]
 8014bfc:	605a      	str	r2, [r3, #4]
      break;
 8014bfe:	e02b      	b.n	8014c58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c02:	889b      	ldrh	r3, [r3, #4]
 8014c04:	b29a      	uxth	r2, r3
 8014c06:	693b      	ldr	r3, [r7, #16]
 8014c08:	889b      	ldrh	r3, [r3, #4]
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d102      	bne.n	8014c16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c10:	f04f 33ff 	mov.w	r3, #4294967295
 8014c14:	e0b6      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c18:	889b      	ldrh	r3, [r3, #4]
 8014c1a:	b29a      	uxth	r2, r3
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	88db      	ldrh	r3, [r3, #6]
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d202      	bcs.n	8014c2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c26:	f04f 33ff 	mov.w	r3, #4294967295
 8014c2a:	e0ab      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d009      	beq.n	8014c46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c34:	88db      	ldrh	r3, [r3, #6]
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	889b      	ldrh	r3, [r3, #4]
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	d001      	beq.n	8014c46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014c42:	2300      	movs	r3, #0
 8014c44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d193      	bne.n	8014b7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014c56:	e000      	b.n	8014c5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014c58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d12d      	bne.n	8014cbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d01c      	beq.n	8014ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c68:	88db      	ldrh	r3, [r3, #6]
 8014c6a:	b29a      	uxth	r2, r3
 8014c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c6e:	889b      	ldrh	r3, [r3, #4]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d906      	bls.n	8014c84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014c76:	4b45      	ldr	r3, [pc, #276]	; (8014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014c78:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014c7c:	4944      	ldr	r1, [pc, #272]	; (8014d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014c7e:	4845      	ldr	r0, [pc, #276]	; (8014d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014c80:	f000 ff42 	bl	8015b08 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8c:	88db      	ldrh	r3, [r3, #6]
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c92:	889b      	ldrh	r3, [r3, #4]
 8014c94:	b29b      	uxth	r3, r3
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d010      	beq.n	8014cbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	623b      	str	r3, [r7, #32]
 8014c9e:	e00d      	b.n	8014cbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d006      	beq.n	8014cb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014ca8:	4b38      	ldr	r3, [pc, #224]	; (8014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014caa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014cae:	493a      	ldr	r1, [pc, #232]	; (8014d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014cb0:	4838      	ldr	r0, [pc, #224]	; (8014d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014cb2:	f000 ff29 	bl	8015b08 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	68ba      	ldr	r2, [r7, #8]
 8014cba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d105      	bne.n	8014cce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	7f9b      	ldrb	r3, [r3, #30]
 8014cc6:	f003 0301 	and.w	r3, r3, #1
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d059      	beq.n	8014d82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014cce:	6a3b      	ldr	r3, [r7, #32]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d04f      	beq.n	8014d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d006      	beq.n	8014cea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	889b      	ldrh	r3, [r3, #4]
 8014ce4:	b29b      	uxth	r3, r3
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d002      	beq.n	8014cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014cea:	2300      	movs	r3, #0
 8014cec:	623b      	str	r3, [r7, #32]
 8014cee:	e041      	b.n	8014d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014cfa:	e012      	b.n	8014d22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d04:	88db      	ldrh	r3, [r3, #6]
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0a:	889b      	ldrh	r3, [r3, #4]
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d002      	beq.n	8014d18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014d12:	2300      	movs	r3, #0
 8014d14:	623b      	str	r3, [r7, #32]
            break;
 8014d16:	e007      	b.n	8014d28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d1e9      	bne.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014d28:	6a3b      	ldr	r3, [r7, #32]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d022      	beq.n	8014d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d106      	bne.n	8014d44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014d36:	4b15      	ldr	r3, [pc, #84]	; (8014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d38:	f240 12df 	movw	r2, #479	; 0x1df
 8014d3c:	4917      	ldr	r1, [pc, #92]	; (8014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014d3e:	4815      	ldr	r0, [pc, #84]	; (8014d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d40:	f000 fee2 	bl	8015b08 <iprintf>
          LWIP_ASSERT("sanity check",
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d106      	bne.n	8014d5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014d50:	4b0e      	ldr	r3, [pc, #56]	; (8014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014d56:	4911      	ldr	r1, [pc, #68]	; (8014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014d58:	480e      	ldr	r0, [pc, #56]	; (8014d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d5a:	f000 fed5 	bl	8015b08 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d006      	beq.n	8014d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014d66:	4b09      	ldr	r3, [pc, #36]	; (8014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d68:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014d6c:	490c      	ldr	r1, [pc, #48]	; (8014da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014d6e:	4809      	ldr	r0, [pc, #36]	; (8014d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d70:	f000 feca 	bl	8015b08 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014d74:	6a3b      	ldr	r3, [r7, #32]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	bf14      	ite	ne
 8014d7a:	2301      	movne	r3, #1
 8014d7c:	2300      	moveq	r3, #0
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	e000      	b.n	8014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014d82:	2300      	movs	r3, #0
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3730      	adds	r7, #48	; 0x30
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	08019544 	.word	0x08019544
 8014d90:	08019628 	.word	0x08019628
 8014d94:	0801958c 	.word	0x0801958c
 8014d98:	08019648 	.word	0x08019648
 8014d9c:	08019680 	.word	0x08019680
 8014da0:	08019690 	.word	0x08019690

08014da4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b08e      	sub	sp, #56	; 0x38
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	f003 030f 	and.w	r3, r3, #15
 8014dba:	b2db      	uxtb	r3, r3
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	2b14      	cmp	r3, #20
 8014dc2:	f040 8171 	bne.w	80150a8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dc8:	88db      	ldrh	r3, [r3, #6]
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7f6 fe17 	bl	800ba00 <lwip_htons>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	00db      	lsls	r3, r3, #3
 8014ddc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de0:	885b      	ldrh	r3, [r3, #2]
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7f6 fe0b 	bl	800ba00 <lwip_htons>
 8014dea:	4603      	mov	r3, r0
 8014dec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	f003 030f 	and.w	r3, r3, #15
 8014df6:	b2db      	uxtb	r3, r3
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014e06:	429a      	cmp	r2, r3
 8014e08:	f0c0 8150 	bcc.w	80150ac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014e14:	1ad3      	subs	r3, r2, r3
 8014e16:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7f8 fa71 	bl	800d300 <pbuf_clen>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014e22:	4b8c      	ldr	r3, [pc, #560]	; (8015054 <ip4_reass+0x2b0>)
 8014e24:	881b      	ldrh	r3, [r3, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	8c3b      	ldrh	r3, [r7, #32]
 8014e2a:	4413      	add	r3, r2
 8014e2c:	2b0a      	cmp	r3, #10
 8014e2e:	dd10      	ble.n	8014e52 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014e30:	8c3b      	ldrh	r3, [r7, #32]
 8014e32:	4619      	mov	r1, r3
 8014e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e36:	f7ff fd81 	bl	801493c <ip_reass_remove_oldest_datagram>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	f000 8137 	beq.w	80150b0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014e42:	4b84      	ldr	r3, [pc, #528]	; (8015054 <ip4_reass+0x2b0>)
 8014e44:	881b      	ldrh	r3, [r3, #0]
 8014e46:	461a      	mov	r2, r3
 8014e48:	8c3b      	ldrh	r3, [r7, #32]
 8014e4a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014e4c:	2b0a      	cmp	r3, #10
 8014e4e:	f300 812f 	bgt.w	80150b0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014e52:	4b81      	ldr	r3, [pc, #516]	; (8015058 <ip4_reass+0x2b4>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	633b      	str	r3, [r7, #48]	; 0x30
 8014e58:	e015      	b.n	8014e86 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5c:	695a      	ldr	r2, [r3, #20]
 8014e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e60:	68db      	ldr	r3, [r3, #12]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d10c      	bne.n	8014e80 <ip4_reass+0xdc>
 8014e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e68:	699a      	ldr	r2, [r3, #24]
 8014e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e6c:	691b      	ldr	r3, [r3, #16]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d106      	bne.n	8014e80 <ip4_reass+0xdc>
 8014e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e74:	899a      	ldrh	r2, [r3, #12]
 8014e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e78:	889b      	ldrh	r3, [r3, #4]
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d006      	beq.n	8014e8e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	633b      	str	r3, [r7, #48]	; 0x30
 8014e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d1e6      	bne.n	8014e5a <ip4_reass+0xb6>
 8014e8c:	e000      	b.n	8014e90 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014e8e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d109      	bne.n	8014eaa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014e96:	8c3b      	ldrh	r3, [r7, #32]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e9c:	f7ff fdb0 	bl	8014a00 <ip_reass_enqueue_new_datagram>
 8014ea0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d11c      	bne.n	8014ee2 <ip4_reass+0x13e>
      goto nullreturn;
 8014ea8:	e105      	b.n	80150b6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	88db      	ldrh	r3, [r3, #6]
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f6 fda5 	bl	800ba00 <lwip_htons>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d110      	bne.n	8014ee2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec2:	89db      	ldrh	r3, [r3, #14]
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7f6 fd9b 	bl	800ba00 <lwip_htons>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d006      	beq.n	8014ee2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed6:	3308      	adds	r3, #8
 8014ed8:	2214      	movs	r2, #20
 8014eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014edc:	4618      	mov	r0, r3
 8014ede:	f001 f83a 	bl	8015f56 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee4:	88db      	ldrh	r3, [r3, #6]
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	f003 0320 	and.w	r3, r3, #32
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	bf0c      	ite	eq
 8014ef0:	2301      	moveq	r3, #1
 8014ef2:	2300      	movne	r3, #0
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014ef8:	69fb      	ldr	r3, [r7, #28]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00e      	beq.n	8014f1c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014efe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f02:	4413      	add	r3, r2
 8014f04:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014f06:	8b7a      	ldrh	r2, [r7, #26]
 8014f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	f0c0 80a0 	bcc.w	8015050 <ip4_reass+0x2ac>
 8014f10:	8b7b      	ldrh	r3, [r7, #26]
 8014f12:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014f16:	4293      	cmp	r3, r2
 8014f18:	f200 809a 	bhi.w	8015050 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014f1c:	69fa      	ldr	r2, [r7, #28]
 8014f1e:	6879      	ldr	r1, [r7, #4]
 8014f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f22:	f7ff fdd5 	bl	8014ad0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014f26:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f2e:	f000 809b 	beq.w	8015068 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014f32:	4b48      	ldr	r3, [pc, #288]	; (8015054 <ip4_reass+0x2b0>)
 8014f34:	881a      	ldrh	r2, [r3, #0]
 8014f36:	8c3b      	ldrh	r3, [r7, #32]
 8014f38:	4413      	add	r3, r2
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	4b45      	ldr	r3, [pc, #276]	; (8015054 <ip4_reass+0x2b0>)
 8014f3e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d00d      	beq.n	8014f62 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014f46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014f4a:	4413      	add	r3, r2
 8014f4c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f50:	8a7a      	ldrh	r2, [r7, #18]
 8014f52:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f56:	7f9b      	ldrb	r3, [r3, #30]
 8014f58:	f043 0301 	orr.w	r3, r3, #1
 8014f5c:	b2da      	uxtb	r2, r3
 8014f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f60:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d171      	bne.n	801504c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f6a:	8b9b      	ldrh	r3, [r3, #28]
 8014f6c:	3314      	adds	r3, #20
 8014f6e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f84:	3308      	adds	r3, #8
 8014f86:	2214      	movs	r2, #20
 8014f88:	4619      	mov	r1, r3
 8014f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f8c:	f000 ffe3 	bl	8015f56 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014f90:	8a3b      	ldrh	r3, [r7, #16]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7f6 fd34 	bl	800ba00 <lwip_htons>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f9e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	719a      	strb	r2, [r3, #6]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fac:	2200      	movs	r2, #0
 8014fae:	729a      	strb	r2, [r3, #10]
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014fba:	e00d      	b.n	8014fd8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014fc2:	2114      	movs	r1, #20
 8014fc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014fc6:	f7f8 f887 	bl	800d0d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014fca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f7f8 f9d7 	bl	800d380 <pbuf_cat>
      r = iprh->next_pbuf;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d1ee      	bne.n	8014fbc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014fde:	4b1e      	ldr	r3, [pc, #120]	; (8015058 <ip4_reass+0x2b4>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fe4:	429a      	cmp	r2, r3
 8014fe6:	d102      	bne.n	8014fee <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fec:	e010      	b.n	8015010 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014fee:	4b1a      	ldr	r3, [pc, #104]	; (8015058 <ip4_reass+0x2b4>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ff4:	e007      	b.n	8015006 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d006      	beq.n	801500e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015008:	2b00      	cmp	r3, #0
 801500a:	d1f4      	bne.n	8014ff6 <ip4_reass+0x252>
 801500c:	e000      	b.n	8015010 <ip4_reass+0x26c>
          break;
 801500e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015014:	f7ff fd2e 	bl	8014a74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f7f8 f971 	bl	800d300 <pbuf_clen>
 801501e:	4603      	mov	r3, r0
 8015020:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015022:	4b0c      	ldr	r3, [pc, #48]	; (8015054 <ip4_reass+0x2b0>)
 8015024:	881b      	ldrh	r3, [r3, #0]
 8015026:	8c3a      	ldrh	r2, [r7, #32]
 8015028:	429a      	cmp	r2, r3
 801502a:	d906      	bls.n	801503a <ip4_reass+0x296>
 801502c:	4b0b      	ldr	r3, [pc, #44]	; (801505c <ip4_reass+0x2b8>)
 801502e:	f240 229b 	movw	r2, #667	; 0x29b
 8015032:	490b      	ldr	r1, [pc, #44]	; (8015060 <ip4_reass+0x2bc>)
 8015034:	480b      	ldr	r0, [pc, #44]	; (8015064 <ip4_reass+0x2c0>)
 8015036:	f000 fd67 	bl	8015b08 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801503a:	4b06      	ldr	r3, [pc, #24]	; (8015054 <ip4_reass+0x2b0>)
 801503c:	881a      	ldrh	r2, [r3, #0]
 801503e:	8c3b      	ldrh	r3, [r7, #32]
 8015040:	1ad3      	subs	r3, r2, r3
 8015042:	b29a      	uxth	r2, r3
 8015044:	4b03      	ldr	r3, [pc, #12]	; (8015054 <ip4_reass+0x2b0>)
 8015046:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	e038      	b.n	80150be <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801504c:	2300      	movs	r3, #0
 801504e:	e036      	b.n	80150be <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015050:	bf00      	nop
 8015052:	e00a      	b.n	801506a <ip4_reass+0x2c6>
 8015054:	200451b8 	.word	0x200451b8
 8015058:	200451b4 	.word	0x200451b4
 801505c:	08019544 	.word	0x08019544
 8015060:	080196b4 	.word	0x080196b4
 8015064:	0801958c 	.word	0x0801958c
    goto nullreturn_ipr;
 8015068:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801506c:	2b00      	cmp	r3, #0
 801506e:	d106      	bne.n	801507e <ip4_reass+0x2da>
 8015070:	4b15      	ldr	r3, [pc, #84]	; (80150c8 <ip4_reass+0x324>)
 8015072:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015076:	4915      	ldr	r1, [pc, #84]	; (80150cc <ip4_reass+0x328>)
 8015078:	4815      	ldr	r0, [pc, #84]	; (80150d0 <ip4_reass+0x32c>)
 801507a:	f000 fd45 	bl	8015b08 <iprintf>
  if (ipr->p == NULL) {
 801507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015080:	685b      	ldr	r3, [r3, #4]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d116      	bne.n	80150b4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015086:	4b13      	ldr	r3, [pc, #76]	; (80150d4 <ip4_reass+0x330>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801508c:	429a      	cmp	r2, r3
 801508e:	d006      	beq.n	801509e <ip4_reass+0x2fa>
 8015090:	4b0d      	ldr	r3, [pc, #52]	; (80150c8 <ip4_reass+0x324>)
 8015092:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015096:	4910      	ldr	r1, [pc, #64]	; (80150d8 <ip4_reass+0x334>)
 8015098:	480d      	ldr	r0, [pc, #52]	; (80150d0 <ip4_reass+0x32c>)
 801509a:	f000 fd35 	bl	8015b08 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801509e:	2100      	movs	r1, #0
 80150a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150a2:	f7ff fce7 	bl	8014a74 <ip_reass_dequeue_datagram>
 80150a6:	e006      	b.n	80150b6 <ip4_reass+0x312>
    goto nullreturn;
 80150a8:	bf00      	nop
 80150aa:	e004      	b.n	80150b6 <ip4_reass+0x312>
    goto nullreturn;
 80150ac:	bf00      	nop
 80150ae:	e002      	b.n	80150b6 <ip4_reass+0x312>
      goto nullreturn;
 80150b0:	bf00      	nop
 80150b2:	e000      	b.n	80150b6 <ip4_reass+0x312>
  }

nullreturn:
 80150b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7f8 f894 	bl	800d1e4 <pbuf_free>
  return NULL;
 80150bc:	2300      	movs	r3, #0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3738      	adds	r7, #56	; 0x38
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	08019544 	.word	0x08019544
 80150cc:	080196d0 	.word	0x080196d0
 80150d0:	0801958c 	.word	0x0801958c
 80150d4:	200451b4 	.word	0x200451b4
 80150d8:	080196dc 	.word	0x080196dc

080150dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80150e0:	2005      	movs	r0, #5
 80150e2:	f7f7 f965 	bl	800c3b0 <memp_malloc>
 80150e6:	4603      	mov	r3, r0
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	bd80      	pop	{r7, pc}

080150ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d106      	bne.n	8015108 <ip_frag_free_pbuf_custom_ref+0x1c>
 80150fa:	4b07      	ldr	r3, [pc, #28]	; (8015118 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80150fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015100:	4906      	ldr	r1, [pc, #24]	; (801511c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015102:	4807      	ldr	r0, [pc, #28]	; (8015120 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015104:	f000 fd00 	bl	8015b08 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015108:	6879      	ldr	r1, [r7, #4]
 801510a:	2005      	movs	r0, #5
 801510c:	f7f7 f9c6 	bl	800c49c <memp_free>
}
 8015110:	bf00      	nop
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	08019544 	.word	0x08019544
 801511c:	080196fc 	.word	0x080196fc
 8015120:	0801958c 	.word	0x0801958c

08015124 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d106      	bne.n	8015144 <ipfrag_free_pbuf_custom+0x20>
 8015136:	4b11      	ldr	r3, [pc, #68]	; (801517c <ipfrag_free_pbuf_custom+0x58>)
 8015138:	f240 22ce 	movw	r2, #718	; 0x2ce
 801513c:	4910      	ldr	r1, [pc, #64]	; (8015180 <ipfrag_free_pbuf_custom+0x5c>)
 801513e:	4811      	ldr	r0, [pc, #68]	; (8015184 <ipfrag_free_pbuf_custom+0x60>)
 8015140:	f000 fce2 	bl	8015b08 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015144:	68fa      	ldr	r2, [r7, #12]
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	429a      	cmp	r2, r3
 801514a:	d006      	beq.n	801515a <ipfrag_free_pbuf_custom+0x36>
 801514c:	4b0b      	ldr	r3, [pc, #44]	; (801517c <ipfrag_free_pbuf_custom+0x58>)
 801514e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015152:	490d      	ldr	r1, [pc, #52]	; (8015188 <ipfrag_free_pbuf_custom+0x64>)
 8015154:	480b      	ldr	r0, [pc, #44]	; (8015184 <ipfrag_free_pbuf_custom+0x60>)
 8015156:	f000 fcd7 	bl	8015b08 <iprintf>
  if (pcr->original != NULL) {
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	695b      	ldr	r3, [r3, #20]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d004      	beq.n	801516c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	695b      	ldr	r3, [r3, #20]
 8015166:	4618      	mov	r0, r3
 8015168:	f7f8 f83c 	bl	800d1e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f7ff ffbd 	bl	80150ec <ip_frag_free_pbuf_custom_ref>
}
 8015172:	bf00      	nop
 8015174:	3710      	adds	r7, #16
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}
 801517a:	bf00      	nop
 801517c:	08019544 	.word	0x08019544
 8015180:	08019708 	.word	0x08019708
 8015184:	0801958c 	.word	0x0801958c
 8015188:	08019714 	.word	0x08019714

0801518c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b094      	sub	sp, #80	; 0x50
 8015190:	af02      	add	r7, sp, #8
 8015192:	60f8      	str	r0, [r7, #12]
 8015194:	60b9      	str	r1, [r7, #8]
 8015196:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015198:	2300      	movs	r3, #0
 801519a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80151a2:	3b14      	subs	r3, #20
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	da00      	bge.n	80151aa <ip4_frag+0x1e>
 80151a8:	3307      	adds	r3, #7
 80151aa:	10db      	asrs	r3, r3, #3
 80151ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80151ae:	2314      	movs	r3, #20
 80151b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80151b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80151bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151be:	781b      	ldrb	r3, [r3, #0]
 80151c0:	f003 030f 	and.w	r3, r3, #15
 80151c4:	b2db      	uxtb	r3, r3
 80151c6:	009b      	lsls	r3, r3, #2
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	2b14      	cmp	r3, #20
 80151cc:	d002      	beq.n	80151d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80151ce:	f06f 0305 	mvn.w	r3, #5
 80151d2:	e110      	b.n	80153f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	895b      	ldrh	r3, [r3, #10]
 80151d8:	2b13      	cmp	r3, #19
 80151da:	d809      	bhi.n	80151f0 <ip4_frag+0x64>
 80151dc:	4b88      	ldr	r3, [pc, #544]	; (8015400 <ip4_frag+0x274>)
 80151de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80151e2:	4988      	ldr	r1, [pc, #544]	; (8015404 <ip4_frag+0x278>)
 80151e4:	4888      	ldr	r0, [pc, #544]	; (8015408 <ip4_frag+0x27c>)
 80151e6:	f000 fc8f 	bl	8015b08 <iprintf>
 80151ea:	f06f 0305 	mvn.w	r3, #5
 80151ee:	e102      	b.n	80153f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80151f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f2:	88db      	ldrh	r3, [r3, #6]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7f6 fc02 	bl	800ba00 <lwip_htons>
 80151fc:	4603      	mov	r3, r0
 80151fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015200:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015206:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801520a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801520c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015210:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	891b      	ldrh	r3, [r3, #8]
 8015216:	3b14      	subs	r3, #20
 8015218:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801521c:	e0e1      	b.n	80153e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801521e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	b29b      	uxth	r3, r3
 8015224:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015228:	4293      	cmp	r3, r2
 801522a:	bf28      	it	cs
 801522c:	4613      	movcs	r3, r2
 801522e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015230:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015234:	2114      	movs	r1, #20
 8015236:	200e      	movs	r0, #14
 8015238:	f7f7 fcf0 	bl	800cc1c <pbuf_alloc>
 801523c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015240:	2b00      	cmp	r3, #0
 8015242:	f000 80d5 	beq.w	80153f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015248:	895b      	ldrh	r3, [r3, #10]
 801524a:	2b13      	cmp	r3, #19
 801524c:	d806      	bhi.n	801525c <ip4_frag+0xd0>
 801524e:	4b6c      	ldr	r3, [pc, #432]	; (8015400 <ip4_frag+0x274>)
 8015250:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015254:	496d      	ldr	r1, [pc, #436]	; (801540c <ip4_frag+0x280>)
 8015256:	486c      	ldr	r0, [pc, #432]	; (8015408 <ip4_frag+0x27c>)
 8015258:	f000 fc56 	bl	8015b08 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	2214      	movs	r2, #20
 8015262:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015264:	4618      	mov	r0, r3
 8015266:	f000 fe76 	bl	8015f56 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015270:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015272:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015276:	e064      	b.n	8015342 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	895a      	ldrh	r2, [r3, #10]
 801527c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801527e:	1ad3      	subs	r3, r2, r3
 8015280:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	895b      	ldrh	r3, [r3, #10]
 8015286:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015288:	429a      	cmp	r2, r3
 801528a:	d906      	bls.n	801529a <ip4_frag+0x10e>
 801528c:	4b5c      	ldr	r3, [pc, #368]	; (8015400 <ip4_frag+0x274>)
 801528e:	f240 322d 	movw	r2, #813	; 0x32d
 8015292:	495f      	ldr	r1, [pc, #380]	; (8015410 <ip4_frag+0x284>)
 8015294:	485c      	ldr	r0, [pc, #368]	; (8015408 <ip4_frag+0x27c>)
 8015296:	f000 fc37 	bl	8015b08 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801529a:	8bfa      	ldrh	r2, [r7, #30]
 801529c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80152a0:	4293      	cmp	r3, r2
 80152a2:	bf28      	it	cs
 80152a4:	4613      	movcs	r3, r2
 80152a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80152aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d105      	bne.n	80152be <ip4_frag+0x132>
        poff = 0;
 80152b2:	2300      	movs	r3, #0
 80152b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	60fb      	str	r3, [r7, #12]
        continue;
 80152bc:	e041      	b.n	8015342 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80152be:	f7ff ff0d 	bl	80150dc <ip_frag_alloc_pbuf_custom_ref>
 80152c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d103      	bne.n	80152d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80152ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152cc:	f7f7 ff8a 	bl	800d1e4 <pbuf_free>
        goto memerr;
 80152d0:	e08f      	b.n	80153f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80152d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80152d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80152da:	4413      	add	r3, r2
 80152dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80152e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80152e4:	9201      	str	r2, [sp, #4]
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	4603      	mov	r3, r0
 80152ea:	2241      	movs	r2, #65	; 0x41
 80152ec:	2000      	movs	r0, #0
 80152ee:	f7f7 fdbf 	bl	800ce70 <pbuf_alloced_custom>
 80152f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80152fa:	69b8      	ldr	r0, [r7, #24]
 80152fc:	f7ff fef6 	bl	80150ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015302:	f7f7 ff6f 	bl	800d1e4 <pbuf_free>
        goto memerr;
 8015306:	e074      	b.n	80153f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015308:	68f8      	ldr	r0, [r7, #12]
 801530a:	f7f8 f811 	bl	800d330 <pbuf_ref>
      pcr->original = p;
 801530e:	69bb      	ldr	r3, [r7, #24]
 8015310:	68fa      	ldr	r2, [r7, #12]
 8015312:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015314:	69bb      	ldr	r3, [r7, #24]
 8015316:	4a3f      	ldr	r2, [pc, #252]	; (8015414 <ip4_frag+0x288>)
 8015318:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801531a:	6979      	ldr	r1, [r7, #20]
 801531c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801531e:	f7f8 f82f 	bl	800d380 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015322:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015326:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015330:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015334:	2b00      	cmp	r3, #0
 8015336:	d004      	beq.n	8015342 <ip4_frag+0x1b6>
        poff = 0;
 8015338:	2300      	movs	r3, #0
 801533a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015342:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015346:	2b00      	cmp	r3, #0
 8015348:	d196      	bne.n	8015278 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801534a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801534c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015350:	4413      	add	r3, r2
 8015352:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015358:	f1a3 0213 	sub.w	r2, r3, #19
 801535c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015360:	429a      	cmp	r2, r3
 8015362:	bfcc      	ite	gt
 8015364:	2301      	movgt	r3, #1
 8015366:	2300      	movle	r3, #0
 8015368:	b2db      	uxtb	r3, r3
 801536a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801536c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015374:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015376:	6a3b      	ldr	r3, [r7, #32]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d002      	beq.n	8015382 <ip4_frag+0x1f6>
 801537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537e:	2b00      	cmp	r3, #0
 8015380:	d003      	beq.n	801538a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015382:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015388:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801538a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801538c:	4618      	mov	r0, r3
 801538e:	f7f6 fb37 	bl	800ba00 <lwip_htons>
 8015392:	4603      	mov	r3, r0
 8015394:	461a      	mov	r2, r3
 8015396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015398:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801539a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801539c:	3314      	adds	r3, #20
 801539e:	b29b      	uxth	r3, r3
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7f6 fb2d 	bl	800ba00 <lwip_htons>
 80153a6:	4603      	mov	r3, r0
 80153a8:	461a      	mov	r2, r3
 80153aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80153ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b0:	2200      	movs	r2, #0
 80153b2:	729a      	strb	r2, [r3, #10]
 80153b4:	2200      	movs	r2, #0
 80153b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	695b      	ldr	r3, [r3, #20]
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80153c0:	68b8      	ldr	r0, [r7, #8]
 80153c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80153c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153c6:	f7f7 ff0d 	bl	800d1e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80153ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80153d0:	1ad3      	subs	r3, r2, r3
 80153d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80153d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80153da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153dc:	4413      	add	r3, r2
 80153de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80153e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f47f af19 	bne.w	801521e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80153ec:	2300      	movs	r3, #0
 80153ee:	e002      	b.n	80153f6 <ip4_frag+0x26a>
      goto memerr;
 80153f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80153f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3748      	adds	r7, #72	; 0x48
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	08019544 	.word	0x08019544
 8015404:	08019720 	.word	0x08019720
 8015408:	0801958c 	.word	0x0801958c
 801540c:	0801973c 	.word	0x0801973c
 8015410:	0801975c 	.word	0x0801975c
 8015414:	08015125 	.word	0x08015125

08015418 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015422:	230e      	movs	r3, #14
 8015424:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	895b      	ldrh	r3, [r3, #10]
 801542a:	2b0e      	cmp	r3, #14
 801542c:	d96e      	bls.n	801550c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	7bdb      	ldrb	r3, [r3, #15]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d106      	bne.n	8015444 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015436:	683b      	ldr	r3, [r7, #0]
 8015438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801543c:	3301      	adds	r3, #1
 801543e:	b2da      	uxtb	r2, r3
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801544a:	693b      	ldr	r3, [r7, #16]
 801544c:	7b1a      	ldrb	r2, [r3, #12]
 801544e:	7b5b      	ldrb	r3, [r3, #13]
 8015450:	021b      	lsls	r3, r3, #8
 8015452:	4313      	orrs	r3, r2
 8015454:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	f003 0301 	and.w	r3, r3, #1
 801545e:	2b00      	cmp	r3, #0
 8015460:	d023      	beq.n	80154aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	2b01      	cmp	r3, #1
 8015468:	d10f      	bne.n	801548a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	785b      	ldrb	r3, [r3, #1]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d11b      	bne.n	80154aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015476:	2b5e      	cmp	r3, #94	; 0x5e
 8015478:	d117      	bne.n	80154aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	7b5b      	ldrb	r3, [r3, #13]
 801547e:	f043 0310 	orr.w	r3, r3, #16
 8015482:	b2da      	uxtb	r2, r3
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	735a      	strb	r2, [r3, #13]
 8015488:	e00f      	b.n	80154aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	2206      	movs	r2, #6
 801548e:	4928      	ldr	r1, [pc, #160]	; (8015530 <ethernet_input+0x118>)
 8015490:	4618      	mov	r0, r3
 8015492:	f000 fc7f 	bl	8015d94 <memcmp>
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d106      	bne.n	80154aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	7b5b      	ldrb	r3, [r3, #13]
 80154a0:	f043 0308 	orr.w	r3, r3, #8
 80154a4:	b2da      	uxtb	r2, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80154aa:	89fb      	ldrh	r3, [r7, #14]
 80154ac:	2b08      	cmp	r3, #8
 80154ae:	d003      	beq.n	80154b8 <ethernet_input+0xa0>
 80154b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80154b4:	d014      	beq.n	80154e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80154b6:	e032      	b.n	801551e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154be:	f003 0308 	and.w	r3, r3, #8
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d024      	beq.n	8015510 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80154c6:	8afb      	ldrh	r3, [r7, #22]
 80154c8:	4619      	mov	r1, r3
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f7f7 fe04 	bl	800d0d8 <pbuf_remove_header>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d11e      	bne.n	8015514 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80154d6:	6839      	ldr	r1, [r7, #0]
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7fe ff21 	bl	8014320 <ip4_input>
      break;
 80154de:	e013      	b.n	8015508 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154e6:	f003 0308 	and.w	r3, r3, #8
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d014      	beq.n	8015518 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80154ee:	8afb      	ldrh	r3, [r7, #22]
 80154f0:	4619      	mov	r1, r3
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7f7 fdf0 	bl	800d0d8 <pbuf_remove_header>
 80154f8:	4603      	mov	r3, r0
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d10e      	bne.n	801551c <ethernet_input+0x104>
        etharp_input(p, netif);
 80154fe:	6839      	ldr	r1, [r7, #0]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f7fe f8c1 	bl	8013688 <etharp_input>
      break;
 8015506:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015508:	2300      	movs	r3, #0
 801550a:	e00c      	b.n	8015526 <ethernet_input+0x10e>
    goto free_and_return;
 801550c:	bf00      	nop
 801550e:	e006      	b.n	801551e <ethernet_input+0x106>
        goto free_and_return;
 8015510:	bf00      	nop
 8015512:	e004      	b.n	801551e <ethernet_input+0x106>
        goto free_and_return;
 8015514:	bf00      	nop
 8015516:	e002      	b.n	801551e <ethernet_input+0x106>
        goto free_and_return;
 8015518:	bf00      	nop
 801551a:	e000      	b.n	801551e <ethernet_input+0x106>
        goto free_and_return;
 801551c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7f7 fe60 	bl	800d1e4 <pbuf_free>
  return ERR_OK;
 8015524:	2300      	movs	r3, #0
}
 8015526:	4618      	mov	r0, r3
 8015528:	3718      	adds	r7, #24
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop
 8015530:	08019940 	.word	0x08019940

08015534 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015534:	b580      	push	{r7, lr}
 8015536:	b086      	sub	sp, #24
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	607a      	str	r2, [r7, #4]
 8015540:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015542:	8c3b      	ldrh	r3, [r7, #32]
 8015544:	4618      	mov	r0, r3
 8015546:	f7f6 fa5b 	bl	800ba00 <lwip_htons>
 801554a:	4603      	mov	r3, r0
 801554c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801554e:	210e      	movs	r1, #14
 8015550:	68b8      	ldr	r0, [r7, #8]
 8015552:	f7f7 fdb1 	bl	800d0b8 <pbuf_add_header>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d125      	bne.n	80155a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	685b      	ldr	r3, [r3, #4]
 8015560:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	8afa      	ldrh	r2, [r7, #22]
 8015566:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015568:	693b      	ldr	r3, [r7, #16]
 801556a:	2206      	movs	r2, #6
 801556c:	6839      	ldr	r1, [r7, #0]
 801556e:	4618      	mov	r0, r3
 8015570:	f000 fcf1 	bl	8015f56 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	3306      	adds	r3, #6
 8015578:	2206      	movs	r2, #6
 801557a:	6879      	ldr	r1, [r7, #4]
 801557c:	4618      	mov	r0, r3
 801557e:	f000 fcea 	bl	8015f56 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015588:	2b06      	cmp	r3, #6
 801558a:	d006      	beq.n	801559a <ethernet_output+0x66>
 801558c:	4b0a      	ldr	r3, [pc, #40]	; (80155b8 <ethernet_output+0x84>)
 801558e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015592:	490a      	ldr	r1, [pc, #40]	; (80155bc <ethernet_output+0x88>)
 8015594:	480a      	ldr	r0, [pc, #40]	; (80155c0 <ethernet_output+0x8c>)
 8015596:	f000 fab7 	bl	8015b08 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	699b      	ldr	r3, [r3, #24]
 801559e:	68b9      	ldr	r1, [r7, #8]
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	4798      	blx	r3
 80155a4:	4603      	mov	r3, r0
 80155a6:	e002      	b.n	80155ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80155a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80155aa:	f06f 0301 	mvn.w	r3, #1
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3718      	adds	r7, #24
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}
 80155b6:	bf00      	nop
 80155b8:	0801976c 	.word	0x0801976c
 80155bc:	080197a4 	.word	0x080197a4
 80155c0:	080197d8 	.word	0x080197d8

080155c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	60bb      	str	r3, [r7, #8]
 80155d2:	2304      	movs	r3, #4
 80155d4:	60fb      	str	r3, [r7, #12]
 80155d6:	2300      	movs	r3, #0
 80155d8:	613b      	str	r3, [r7, #16]
 80155da:	2300      	movs	r3, #0
 80155dc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80155de:	f107 0308 	add.w	r3, r7, #8
 80155e2:	2100      	movs	r1, #0
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7f3 fa3b 	bl	8008a60 <osMessageCreate>
 80155ea:	4602      	mov	r2, r0
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d102      	bne.n	80155fe <sys_mbox_new+0x3a>
    return ERR_MEM;
 80155f8:	f04f 33ff 	mov.w	r3, #4294967295
 80155fc:	e000      	b.n	8015600 <sys_mbox_new+0x3c>

  return ERR_OK;
 80155fe:	2300      	movs	r3, #0
}
 8015600:	4618      	mov	r0, r3
 8015602:	3718      	adds	r7, #24
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b084      	sub	sp, #16
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	6839      	ldr	r1, [r7, #0]
 8015618:	2200      	movs	r2, #0
 801561a:	4618      	mov	r0, r3
 801561c:	f7f3 fa48 	bl	8008ab0 <osMessagePut>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d102      	bne.n	801562c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	73fb      	strb	r3, [r7, #15]
 801562a:	e001      	b.n	8015630 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801562c:	23ff      	movs	r3, #255	; 0xff
 801562e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015634:	4618      	mov	r0, r3
 8015636:	3710      	adds	r7, #16
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b08c      	sub	sp, #48	; 0x30
 8015640:	af00      	add	r7, sp, #0
 8015642:	61f8      	str	r0, [r7, #28]
 8015644:	61b9      	str	r1, [r7, #24]
 8015646:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015648:	f7f3 f83b 	bl	80086c2 <osKernelSysTick>
 801564c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d017      	beq.n	8015684 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	6819      	ldr	r1, [r3, #0]
 8015658:	f107 0320 	add.w	r3, r7, #32
 801565c:	697a      	ldr	r2, [r7, #20]
 801565e:	4618      	mov	r0, r3
 8015660:	f7f3 fa66 	bl	8008b30 <osMessageGet>

    if(event.status == osEventMessage)
 8015664:	6a3b      	ldr	r3, [r7, #32]
 8015666:	2b10      	cmp	r3, #16
 8015668:	d109      	bne.n	801567e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566c:	461a      	mov	r2, r3
 801566e:	69bb      	ldr	r3, [r7, #24]
 8015670:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015672:	f7f3 f826 	bl	80086c2 <osKernelSysTick>
 8015676:	4602      	mov	r2, r0
 8015678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567a:	1ad3      	subs	r3, r2, r3
 801567c:	e019      	b.n	80156b2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801567e:	f04f 33ff 	mov.w	r3, #4294967295
 8015682:	e016      	b.n	80156b2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	6819      	ldr	r1, [r3, #0]
 8015688:	463b      	mov	r3, r7
 801568a:	f04f 32ff 	mov.w	r2, #4294967295
 801568e:	4618      	mov	r0, r3
 8015690:	f7f3 fa4e 	bl	8008b30 <osMessageGet>
 8015694:	f107 0320 	add.w	r3, r7, #32
 8015698:	463a      	mov	r2, r7
 801569a:	ca07      	ldmia	r2, {r0, r1, r2}
 801569c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80156a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a2:	461a      	mov	r2, r3
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80156a8:	f7f3 f80b 	bl	80086c2 <osKernelSysTick>
 80156ac:	4602      	mov	r2, r0
 80156ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3730      	adds	r7, #48	; 0x30
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}

080156ba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80156ba:	b480      	push	{r7}
 80156bc:	b083      	sub	sp, #12
 80156be:	af00      	add	r7, sp, #0
 80156c0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d101      	bne.n	80156ce <sys_mbox_valid+0x14>
    return 0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	e000      	b.n	80156d0 <sys_mbox_valid+0x16>
  else
    return 1;
 80156ce:	2301      	movs	r3, #1
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr

080156dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80156e0:	4803      	ldr	r0, [pc, #12]	; (80156f0 <sys_init+0x14>)
 80156e2:	f7f3 f86a 	bl	80087ba <osMutexCreate>
 80156e6:	4603      	mov	r3, r0
 80156e8:	4a02      	ldr	r2, [pc, #8]	; (80156f4 <sys_init+0x18>)
 80156ea:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80156ec:	bf00      	nop
 80156ee:	bd80      	pop	{r7, pc}
 80156f0:	08019950 	.word	0x08019950
 80156f4:	200451bc 	.word	0x200451bc

080156f8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015700:	2300      	movs	r3, #0
 8015702:	60bb      	str	r3, [r7, #8]
 8015704:	2300      	movs	r3, #0
 8015706:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015708:	f107 0308 	add.w	r3, r7, #8
 801570c:	4618      	mov	r0, r3
 801570e:	f7f3 f854 	bl	80087ba <osMutexCreate>
 8015712:	4602      	mov	r2, r0
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d102      	bne.n	8015726 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015720:	f04f 33ff 	mov.w	r3, #4294967295
 8015724:	e000      	b.n	8015728 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015726:	2300      	movs	r3, #0
}
 8015728:	4618      	mov	r0, r3
 801572a:	3710      	adds	r7, #16
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}

08015730 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f04f 31ff 	mov.w	r1, #4294967295
 8015740:	4618      	mov	r0, r3
 8015742:	f7f3 f853 	bl	80087ec <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015746:	bf00      	nop
 8015748:	3708      	adds	r7, #8
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801574e:	b580      	push	{r7, lr}
 8015750:	b082      	sub	sp, #8
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	4618      	mov	r0, r3
 801575c:	f7f3 f894 	bl	8008888 <osMutexRelease>
}
 8015760:	bf00      	nop
 8015762:	3708      	adds	r7, #8
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b08c      	sub	sp, #48	; 0x30
 801576c:	af00      	add	r7, sp, #0
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	60b9      	str	r1, [r7, #8]
 8015772:	607a      	str	r2, [r7, #4]
 8015774:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015776:	f107 0314 	add.w	r3, r7, #20
 801577a:	2200      	movs	r2, #0
 801577c:	601a      	str	r2, [r3, #0]
 801577e:	605a      	str	r2, [r3, #4]
 8015780:	609a      	str	r2, [r3, #8]
 8015782:	60da      	str	r2, [r3, #12]
 8015784:	611a      	str	r2, [r3, #16]
 8015786:	615a      	str	r2, [r3, #20]
 8015788:	619a      	str	r2, [r3, #24]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	617b      	str	r3, [r7, #20]
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	61bb      	str	r3, [r7, #24]
 8015792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015794:	b21b      	sxth	r3, r3
 8015796:	83bb      	strh	r3, [r7, #28]
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801579c:	f107 0314 	add.w	r3, r7, #20
 80157a0:	6879      	ldr	r1, [r7, #4]
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7f2 ff9d 	bl	80086e2 <osThreadCreate>
 80157a8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3730      	adds	r7, #48	; 0x30
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80157b8:	4b04      	ldr	r3, [pc, #16]	; (80157cc <sys_arch_protect+0x18>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	f04f 31ff 	mov.w	r1, #4294967295
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7f3 f813 	bl	80087ec <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80157c6:	2301      	movs	r3, #1
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	bd80      	pop	{r7, pc}
 80157cc:	200451bc 	.word	0x200451bc

080157d0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80157d8:	4b04      	ldr	r3, [pc, #16]	; (80157ec <sys_arch_unprotect+0x1c>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	f7f3 f853 	bl	8008888 <osMutexRelease>
}
 80157e2:	bf00      	nop
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	200451bc 	.word	0x200451bc

080157f0 <rand>:
 80157f0:	4b16      	ldr	r3, [pc, #88]	; (801584c <rand+0x5c>)
 80157f2:	b510      	push	{r4, lr}
 80157f4:	681c      	ldr	r4, [r3, #0]
 80157f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80157f8:	b9b3      	cbnz	r3, 8015828 <rand+0x38>
 80157fa:	2018      	movs	r0, #24
 80157fc:	f000 fc24 	bl	8016048 <malloc>
 8015800:	4602      	mov	r2, r0
 8015802:	6320      	str	r0, [r4, #48]	; 0x30
 8015804:	b920      	cbnz	r0, 8015810 <rand+0x20>
 8015806:	4b12      	ldr	r3, [pc, #72]	; (8015850 <rand+0x60>)
 8015808:	4812      	ldr	r0, [pc, #72]	; (8015854 <rand+0x64>)
 801580a:	2152      	movs	r1, #82	; 0x52
 801580c:	f000 fbb2 	bl	8015f74 <__assert_func>
 8015810:	4911      	ldr	r1, [pc, #68]	; (8015858 <rand+0x68>)
 8015812:	4b12      	ldr	r3, [pc, #72]	; (801585c <rand+0x6c>)
 8015814:	e9c0 1300 	strd	r1, r3, [r0]
 8015818:	4b11      	ldr	r3, [pc, #68]	; (8015860 <rand+0x70>)
 801581a:	6083      	str	r3, [r0, #8]
 801581c:	230b      	movs	r3, #11
 801581e:	8183      	strh	r3, [r0, #12]
 8015820:	2100      	movs	r1, #0
 8015822:	2001      	movs	r0, #1
 8015824:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015828:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801582a:	480e      	ldr	r0, [pc, #56]	; (8015864 <rand+0x74>)
 801582c:	690b      	ldr	r3, [r1, #16]
 801582e:	694c      	ldr	r4, [r1, #20]
 8015830:	4a0d      	ldr	r2, [pc, #52]	; (8015868 <rand+0x78>)
 8015832:	4358      	muls	r0, r3
 8015834:	fb02 0004 	mla	r0, r2, r4, r0
 8015838:	fba3 3202 	umull	r3, r2, r3, r2
 801583c:	3301      	adds	r3, #1
 801583e:	eb40 0002 	adc.w	r0, r0, r2
 8015842:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015846:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801584a:	bd10      	pop	{r4, pc}
 801584c:	2000008c 	.word	0x2000008c
 8015850:	08019958 	.word	0x08019958
 8015854:	0801996f 	.word	0x0801996f
 8015858:	abcd330e 	.word	0xabcd330e
 801585c:	e66d1234 	.word	0xe66d1234
 8015860:	0005deec 	.word	0x0005deec
 8015864:	5851f42d 	.word	0x5851f42d
 8015868:	4c957f2d 	.word	0x4c957f2d

0801586c <_strtol_l.constprop.0>:
 801586c:	2b01      	cmp	r3, #1
 801586e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015872:	d001      	beq.n	8015878 <_strtol_l.constprop.0+0xc>
 8015874:	2b24      	cmp	r3, #36	; 0x24
 8015876:	d906      	bls.n	8015886 <_strtol_l.constprop.0+0x1a>
 8015878:	f000 fb40 	bl	8015efc <__errno>
 801587c:	2316      	movs	r3, #22
 801587e:	6003      	str	r3, [r0, #0]
 8015880:	2000      	movs	r0, #0
 8015882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015886:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801596c <_strtol_l.constprop.0+0x100>
 801588a:	460d      	mov	r5, r1
 801588c:	462e      	mov	r6, r5
 801588e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015892:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015896:	f017 0708 	ands.w	r7, r7, #8
 801589a:	d1f7      	bne.n	801588c <_strtol_l.constprop.0+0x20>
 801589c:	2c2d      	cmp	r4, #45	; 0x2d
 801589e:	d132      	bne.n	8015906 <_strtol_l.constprop.0+0x9a>
 80158a0:	782c      	ldrb	r4, [r5, #0]
 80158a2:	2701      	movs	r7, #1
 80158a4:	1cb5      	adds	r5, r6, #2
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d05b      	beq.n	8015962 <_strtol_l.constprop.0+0xf6>
 80158aa:	2b10      	cmp	r3, #16
 80158ac:	d109      	bne.n	80158c2 <_strtol_l.constprop.0+0x56>
 80158ae:	2c30      	cmp	r4, #48	; 0x30
 80158b0:	d107      	bne.n	80158c2 <_strtol_l.constprop.0+0x56>
 80158b2:	782c      	ldrb	r4, [r5, #0]
 80158b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80158b8:	2c58      	cmp	r4, #88	; 0x58
 80158ba:	d14d      	bne.n	8015958 <_strtol_l.constprop.0+0xec>
 80158bc:	786c      	ldrb	r4, [r5, #1]
 80158be:	2310      	movs	r3, #16
 80158c0:	3502      	adds	r5, #2
 80158c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80158c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80158ca:	f04f 0e00 	mov.w	lr, #0
 80158ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80158d2:	4676      	mov	r6, lr
 80158d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80158d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80158dc:	f1bc 0f09 	cmp.w	ip, #9
 80158e0:	d816      	bhi.n	8015910 <_strtol_l.constprop.0+0xa4>
 80158e2:	4664      	mov	r4, ip
 80158e4:	42a3      	cmp	r3, r4
 80158e6:	dd24      	ble.n	8015932 <_strtol_l.constprop.0+0xc6>
 80158e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80158ec:	d008      	beq.n	8015900 <_strtol_l.constprop.0+0x94>
 80158ee:	45b1      	cmp	r9, r6
 80158f0:	d31c      	bcc.n	801592c <_strtol_l.constprop.0+0xc0>
 80158f2:	d101      	bne.n	80158f8 <_strtol_l.constprop.0+0x8c>
 80158f4:	45a2      	cmp	sl, r4
 80158f6:	db19      	blt.n	801592c <_strtol_l.constprop.0+0xc0>
 80158f8:	fb06 4603 	mla	r6, r6, r3, r4
 80158fc:	f04f 0e01 	mov.w	lr, #1
 8015900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015904:	e7e8      	b.n	80158d8 <_strtol_l.constprop.0+0x6c>
 8015906:	2c2b      	cmp	r4, #43	; 0x2b
 8015908:	bf04      	itt	eq
 801590a:	782c      	ldrbeq	r4, [r5, #0]
 801590c:	1cb5      	addeq	r5, r6, #2
 801590e:	e7ca      	b.n	80158a6 <_strtol_l.constprop.0+0x3a>
 8015910:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015914:	f1bc 0f19 	cmp.w	ip, #25
 8015918:	d801      	bhi.n	801591e <_strtol_l.constprop.0+0xb2>
 801591a:	3c37      	subs	r4, #55	; 0x37
 801591c:	e7e2      	b.n	80158e4 <_strtol_l.constprop.0+0x78>
 801591e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015922:	f1bc 0f19 	cmp.w	ip, #25
 8015926:	d804      	bhi.n	8015932 <_strtol_l.constprop.0+0xc6>
 8015928:	3c57      	subs	r4, #87	; 0x57
 801592a:	e7db      	b.n	80158e4 <_strtol_l.constprop.0+0x78>
 801592c:	f04f 3eff 	mov.w	lr, #4294967295
 8015930:	e7e6      	b.n	8015900 <_strtol_l.constprop.0+0x94>
 8015932:	f1be 3fff 	cmp.w	lr, #4294967295
 8015936:	d105      	bne.n	8015944 <_strtol_l.constprop.0+0xd8>
 8015938:	2322      	movs	r3, #34	; 0x22
 801593a:	6003      	str	r3, [r0, #0]
 801593c:	4646      	mov	r6, r8
 801593e:	b942      	cbnz	r2, 8015952 <_strtol_l.constprop.0+0xe6>
 8015940:	4630      	mov	r0, r6
 8015942:	e79e      	b.n	8015882 <_strtol_l.constprop.0+0x16>
 8015944:	b107      	cbz	r7, 8015948 <_strtol_l.constprop.0+0xdc>
 8015946:	4276      	negs	r6, r6
 8015948:	2a00      	cmp	r2, #0
 801594a:	d0f9      	beq.n	8015940 <_strtol_l.constprop.0+0xd4>
 801594c:	f1be 0f00 	cmp.w	lr, #0
 8015950:	d000      	beq.n	8015954 <_strtol_l.constprop.0+0xe8>
 8015952:	1e69      	subs	r1, r5, #1
 8015954:	6011      	str	r1, [r2, #0]
 8015956:	e7f3      	b.n	8015940 <_strtol_l.constprop.0+0xd4>
 8015958:	2430      	movs	r4, #48	; 0x30
 801595a:	2b00      	cmp	r3, #0
 801595c:	d1b1      	bne.n	80158c2 <_strtol_l.constprop.0+0x56>
 801595e:	2308      	movs	r3, #8
 8015960:	e7af      	b.n	80158c2 <_strtol_l.constprop.0+0x56>
 8015962:	2c30      	cmp	r4, #48	; 0x30
 8015964:	d0a5      	beq.n	80158b2 <_strtol_l.constprop.0+0x46>
 8015966:	230a      	movs	r3, #10
 8015968:	e7ab      	b.n	80158c2 <_strtol_l.constprop.0+0x56>
 801596a:	bf00      	nop
 801596c:	080199c8 	.word	0x080199c8

08015970 <strtol>:
 8015970:	4613      	mov	r3, r2
 8015972:	460a      	mov	r2, r1
 8015974:	4601      	mov	r1, r0
 8015976:	4802      	ldr	r0, [pc, #8]	; (8015980 <strtol+0x10>)
 8015978:	6800      	ldr	r0, [r0, #0]
 801597a:	f7ff bf77 	b.w	801586c <_strtol_l.constprop.0>
 801597e:	bf00      	nop
 8015980:	2000008c 	.word	0x2000008c

08015984 <std>:
 8015984:	2300      	movs	r3, #0
 8015986:	b510      	push	{r4, lr}
 8015988:	4604      	mov	r4, r0
 801598a:	e9c0 3300 	strd	r3, r3, [r0]
 801598e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015992:	6083      	str	r3, [r0, #8]
 8015994:	8181      	strh	r1, [r0, #12]
 8015996:	6643      	str	r3, [r0, #100]	; 0x64
 8015998:	81c2      	strh	r2, [r0, #14]
 801599a:	6183      	str	r3, [r0, #24]
 801599c:	4619      	mov	r1, r3
 801599e:	2208      	movs	r2, #8
 80159a0:	305c      	adds	r0, #92	; 0x5c
 80159a2:	f000 fa07 	bl	8015db4 <memset>
 80159a6:	4b0d      	ldr	r3, [pc, #52]	; (80159dc <std+0x58>)
 80159a8:	6263      	str	r3, [r4, #36]	; 0x24
 80159aa:	4b0d      	ldr	r3, [pc, #52]	; (80159e0 <std+0x5c>)
 80159ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80159ae:	4b0d      	ldr	r3, [pc, #52]	; (80159e4 <std+0x60>)
 80159b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80159b2:	4b0d      	ldr	r3, [pc, #52]	; (80159e8 <std+0x64>)
 80159b4:	6323      	str	r3, [r4, #48]	; 0x30
 80159b6:	4b0d      	ldr	r3, [pc, #52]	; (80159ec <std+0x68>)
 80159b8:	6224      	str	r4, [r4, #32]
 80159ba:	429c      	cmp	r4, r3
 80159bc:	d006      	beq.n	80159cc <std+0x48>
 80159be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80159c2:	4294      	cmp	r4, r2
 80159c4:	d002      	beq.n	80159cc <std+0x48>
 80159c6:	33d0      	adds	r3, #208	; 0xd0
 80159c8:	429c      	cmp	r4, r3
 80159ca:	d105      	bne.n	80159d8 <std+0x54>
 80159cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80159d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159d4:	f000 babc 	b.w	8015f50 <__retarget_lock_init_recursive>
 80159d8:	bd10      	pop	{r4, pc}
 80159da:	bf00      	nop
 80159dc:	08015be5 	.word	0x08015be5
 80159e0:	08015c07 	.word	0x08015c07
 80159e4:	08015c3f 	.word	0x08015c3f
 80159e8:	08015c63 	.word	0x08015c63
 80159ec:	200451c0 	.word	0x200451c0

080159f0 <stdio_exit_handler>:
 80159f0:	4a02      	ldr	r2, [pc, #8]	; (80159fc <stdio_exit_handler+0xc>)
 80159f2:	4903      	ldr	r1, [pc, #12]	; (8015a00 <stdio_exit_handler+0x10>)
 80159f4:	4803      	ldr	r0, [pc, #12]	; (8015a04 <stdio_exit_handler+0x14>)
 80159f6:	f000 b869 	b.w	8015acc <_fwalk_sglue>
 80159fa:	bf00      	nop
 80159fc:	20000034 	.word	0x20000034
 8015a00:	08016865 	.word	0x08016865
 8015a04:	20000040 	.word	0x20000040

08015a08 <cleanup_stdio>:
 8015a08:	6841      	ldr	r1, [r0, #4]
 8015a0a:	4b0c      	ldr	r3, [pc, #48]	; (8015a3c <cleanup_stdio+0x34>)
 8015a0c:	4299      	cmp	r1, r3
 8015a0e:	b510      	push	{r4, lr}
 8015a10:	4604      	mov	r4, r0
 8015a12:	d001      	beq.n	8015a18 <cleanup_stdio+0x10>
 8015a14:	f000 ff26 	bl	8016864 <_fflush_r>
 8015a18:	68a1      	ldr	r1, [r4, #8]
 8015a1a:	4b09      	ldr	r3, [pc, #36]	; (8015a40 <cleanup_stdio+0x38>)
 8015a1c:	4299      	cmp	r1, r3
 8015a1e:	d002      	beq.n	8015a26 <cleanup_stdio+0x1e>
 8015a20:	4620      	mov	r0, r4
 8015a22:	f000 ff1f 	bl	8016864 <_fflush_r>
 8015a26:	68e1      	ldr	r1, [r4, #12]
 8015a28:	4b06      	ldr	r3, [pc, #24]	; (8015a44 <cleanup_stdio+0x3c>)
 8015a2a:	4299      	cmp	r1, r3
 8015a2c:	d004      	beq.n	8015a38 <cleanup_stdio+0x30>
 8015a2e:	4620      	mov	r0, r4
 8015a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a34:	f000 bf16 	b.w	8016864 <_fflush_r>
 8015a38:	bd10      	pop	{r4, pc}
 8015a3a:	bf00      	nop
 8015a3c:	200451c0 	.word	0x200451c0
 8015a40:	20045228 	.word	0x20045228
 8015a44:	20045290 	.word	0x20045290

08015a48 <global_stdio_init.part.0>:
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	4b0b      	ldr	r3, [pc, #44]	; (8015a78 <global_stdio_init.part.0+0x30>)
 8015a4c:	4c0b      	ldr	r4, [pc, #44]	; (8015a7c <global_stdio_init.part.0+0x34>)
 8015a4e:	4a0c      	ldr	r2, [pc, #48]	; (8015a80 <global_stdio_init.part.0+0x38>)
 8015a50:	601a      	str	r2, [r3, #0]
 8015a52:	4620      	mov	r0, r4
 8015a54:	2200      	movs	r2, #0
 8015a56:	2104      	movs	r1, #4
 8015a58:	f7ff ff94 	bl	8015984 <std>
 8015a5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015a60:	2201      	movs	r2, #1
 8015a62:	2109      	movs	r1, #9
 8015a64:	f7ff ff8e 	bl	8015984 <std>
 8015a68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015a6c:	2202      	movs	r2, #2
 8015a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a72:	2112      	movs	r1, #18
 8015a74:	f7ff bf86 	b.w	8015984 <std>
 8015a78:	200452f8 	.word	0x200452f8
 8015a7c:	200451c0 	.word	0x200451c0
 8015a80:	080159f1 	.word	0x080159f1

08015a84 <__sfp_lock_acquire>:
 8015a84:	4801      	ldr	r0, [pc, #4]	; (8015a8c <__sfp_lock_acquire+0x8>)
 8015a86:	f000 ba64 	b.w	8015f52 <__retarget_lock_acquire_recursive>
 8015a8a:	bf00      	nop
 8015a8c:	20045301 	.word	0x20045301

08015a90 <__sfp_lock_release>:
 8015a90:	4801      	ldr	r0, [pc, #4]	; (8015a98 <__sfp_lock_release+0x8>)
 8015a92:	f000 ba5f 	b.w	8015f54 <__retarget_lock_release_recursive>
 8015a96:	bf00      	nop
 8015a98:	20045301 	.word	0x20045301

08015a9c <__sinit>:
 8015a9c:	b510      	push	{r4, lr}
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	f7ff fff0 	bl	8015a84 <__sfp_lock_acquire>
 8015aa4:	6a23      	ldr	r3, [r4, #32]
 8015aa6:	b11b      	cbz	r3, 8015ab0 <__sinit+0x14>
 8015aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aac:	f7ff bff0 	b.w	8015a90 <__sfp_lock_release>
 8015ab0:	4b04      	ldr	r3, [pc, #16]	; (8015ac4 <__sinit+0x28>)
 8015ab2:	6223      	str	r3, [r4, #32]
 8015ab4:	4b04      	ldr	r3, [pc, #16]	; (8015ac8 <__sinit+0x2c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1f5      	bne.n	8015aa8 <__sinit+0xc>
 8015abc:	f7ff ffc4 	bl	8015a48 <global_stdio_init.part.0>
 8015ac0:	e7f2      	b.n	8015aa8 <__sinit+0xc>
 8015ac2:	bf00      	nop
 8015ac4:	08015a09 	.word	0x08015a09
 8015ac8:	200452f8 	.word	0x200452f8

08015acc <_fwalk_sglue>:
 8015acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ad0:	4607      	mov	r7, r0
 8015ad2:	4688      	mov	r8, r1
 8015ad4:	4614      	mov	r4, r2
 8015ad6:	2600      	movs	r6, #0
 8015ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015adc:	f1b9 0901 	subs.w	r9, r9, #1
 8015ae0:	d505      	bpl.n	8015aee <_fwalk_sglue+0x22>
 8015ae2:	6824      	ldr	r4, [r4, #0]
 8015ae4:	2c00      	cmp	r4, #0
 8015ae6:	d1f7      	bne.n	8015ad8 <_fwalk_sglue+0xc>
 8015ae8:	4630      	mov	r0, r6
 8015aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aee:	89ab      	ldrh	r3, [r5, #12]
 8015af0:	2b01      	cmp	r3, #1
 8015af2:	d907      	bls.n	8015b04 <_fwalk_sglue+0x38>
 8015af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015af8:	3301      	adds	r3, #1
 8015afa:	d003      	beq.n	8015b04 <_fwalk_sglue+0x38>
 8015afc:	4629      	mov	r1, r5
 8015afe:	4638      	mov	r0, r7
 8015b00:	47c0      	blx	r8
 8015b02:	4306      	orrs	r6, r0
 8015b04:	3568      	adds	r5, #104	; 0x68
 8015b06:	e7e9      	b.n	8015adc <_fwalk_sglue+0x10>

08015b08 <iprintf>:
 8015b08:	b40f      	push	{r0, r1, r2, r3}
 8015b0a:	b507      	push	{r0, r1, r2, lr}
 8015b0c:	4906      	ldr	r1, [pc, #24]	; (8015b28 <iprintf+0x20>)
 8015b0e:	ab04      	add	r3, sp, #16
 8015b10:	6808      	ldr	r0, [r1, #0]
 8015b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b16:	6881      	ldr	r1, [r0, #8]
 8015b18:	9301      	str	r3, [sp, #4]
 8015b1a:	f000 fb73 	bl	8016204 <_vfiprintf_r>
 8015b1e:	b003      	add	sp, #12
 8015b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b24:	b004      	add	sp, #16
 8015b26:	4770      	bx	lr
 8015b28:	2000008c 	.word	0x2000008c

08015b2c <_puts_r>:
 8015b2c:	6a03      	ldr	r3, [r0, #32]
 8015b2e:	b570      	push	{r4, r5, r6, lr}
 8015b30:	6884      	ldr	r4, [r0, #8]
 8015b32:	4605      	mov	r5, r0
 8015b34:	460e      	mov	r6, r1
 8015b36:	b90b      	cbnz	r3, 8015b3c <_puts_r+0x10>
 8015b38:	f7ff ffb0 	bl	8015a9c <__sinit>
 8015b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b3e:	07db      	lsls	r3, r3, #31
 8015b40:	d405      	bmi.n	8015b4e <_puts_r+0x22>
 8015b42:	89a3      	ldrh	r3, [r4, #12]
 8015b44:	0598      	lsls	r0, r3, #22
 8015b46:	d402      	bmi.n	8015b4e <_puts_r+0x22>
 8015b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b4a:	f000 fa02 	bl	8015f52 <__retarget_lock_acquire_recursive>
 8015b4e:	89a3      	ldrh	r3, [r4, #12]
 8015b50:	0719      	lsls	r1, r3, #28
 8015b52:	d513      	bpl.n	8015b7c <_puts_r+0x50>
 8015b54:	6923      	ldr	r3, [r4, #16]
 8015b56:	b18b      	cbz	r3, 8015b7c <_puts_r+0x50>
 8015b58:	3e01      	subs	r6, #1
 8015b5a:	68a3      	ldr	r3, [r4, #8]
 8015b5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b60:	3b01      	subs	r3, #1
 8015b62:	60a3      	str	r3, [r4, #8]
 8015b64:	b9e9      	cbnz	r1, 8015ba2 <_puts_r+0x76>
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	da2e      	bge.n	8015bc8 <_puts_r+0x9c>
 8015b6a:	4622      	mov	r2, r4
 8015b6c:	210a      	movs	r1, #10
 8015b6e:	4628      	mov	r0, r5
 8015b70:	f000 f87b 	bl	8015c6a <__swbuf_r>
 8015b74:	3001      	adds	r0, #1
 8015b76:	d007      	beq.n	8015b88 <_puts_r+0x5c>
 8015b78:	250a      	movs	r5, #10
 8015b7a:	e007      	b.n	8015b8c <_puts_r+0x60>
 8015b7c:	4621      	mov	r1, r4
 8015b7e:	4628      	mov	r0, r5
 8015b80:	f000 f8b0 	bl	8015ce4 <__swsetup_r>
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d0e7      	beq.n	8015b58 <_puts_r+0x2c>
 8015b88:	f04f 35ff 	mov.w	r5, #4294967295
 8015b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b8e:	07da      	lsls	r2, r3, #31
 8015b90:	d405      	bmi.n	8015b9e <_puts_r+0x72>
 8015b92:	89a3      	ldrh	r3, [r4, #12]
 8015b94:	059b      	lsls	r3, r3, #22
 8015b96:	d402      	bmi.n	8015b9e <_puts_r+0x72>
 8015b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b9a:	f000 f9db 	bl	8015f54 <__retarget_lock_release_recursive>
 8015b9e:	4628      	mov	r0, r5
 8015ba0:	bd70      	pop	{r4, r5, r6, pc}
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	da04      	bge.n	8015bb0 <_puts_r+0x84>
 8015ba6:	69a2      	ldr	r2, [r4, #24]
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	dc06      	bgt.n	8015bba <_puts_r+0x8e>
 8015bac:	290a      	cmp	r1, #10
 8015bae:	d004      	beq.n	8015bba <_puts_r+0x8e>
 8015bb0:	6823      	ldr	r3, [r4, #0]
 8015bb2:	1c5a      	adds	r2, r3, #1
 8015bb4:	6022      	str	r2, [r4, #0]
 8015bb6:	7019      	strb	r1, [r3, #0]
 8015bb8:	e7cf      	b.n	8015b5a <_puts_r+0x2e>
 8015bba:	4622      	mov	r2, r4
 8015bbc:	4628      	mov	r0, r5
 8015bbe:	f000 f854 	bl	8015c6a <__swbuf_r>
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	d1c9      	bne.n	8015b5a <_puts_r+0x2e>
 8015bc6:	e7df      	b.n	8015b88 <_puts_r+0x5c>
 8015bc8:	6823      	ldr	r3, [r4, #0]
 8015bca:	250a      	movs	r5, #10
 8015bcc:	1c5a      	adds	r2, r3, #1
 8015bce:	6022      	str	r2, [r4, #0]
 8015bd0:	701d      	strb	r5, [r3, #0]
 8015bd2:	e7db      	b.n	8015b8c <_puts_r+0x60>

08015bd4 <puts>:
 8015bd4:	4b02      	ldr	r3, [pc, #8]	; (8015be0 <puts+0xc>)
 8015bd6:	4601      	mov	r1, r0
 8015bd8:	6818      	ldr	r0, [r3, #0]
 8015bda:	f7ff bfa7 	b.w	8015b2c <_puts_r>
 8015bde:	bf00      	nop
 8015be0:	2000008c 	.word	0x2000008c

08015be4 <__sread>:
 8015be4:	b510      	push	{r4, lr}
 8015be6:	460c      	mov	r4, r1
 8015be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bec:	f000 f962 	bl	8015eb4 <_read_r>
 8015bf0:	2800      	cmp	r0, #0
 8015bf2:	bfab      	itete	ge
 8015bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8015bf8:	181b      	addge	r3, r3, r0
 8015bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015bfe:	bfac      	ite	ge
 8015c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8015c02:	81a3      	strhlt	r3, [r4, #12]
 8015c04:	bd10      	pop	{r4, pc}

08015c06 <__swrite>:
 8015c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c0a:	461f      	mov	r7, r3
 8015c0c:	898b      	ldrh	r3, [r1, #12]
 8015c0e:	05db      	lsls	r3, r3, #23
 8015c10:	4605      	mov	r5, r0
 8015c12:	460c      	mov	r4, r1
 8015c14:	4616      	mov	r6, r2
 8015c16:	d505      	bpl.n	8015c24 <__swrite+0x1e>
 8015c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c1c:	2302      	movs	r3, #2
 8015c1e:	2200      	movs	r2, #0
 8015c20:	f000 f936 	bl	8015e90 <_lseek_r>
 8015c24:	89a3      	ldrh	r3, [r4, #12]
 8015c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015c2e:	81a3      	strh	r3, [r4, #12]
 8015c30:	4632      	mov	r2, r6
 8015c32:	463b      	mov	r3, r7
 8015c34:	4628      	mov	r0, r5
 8015c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c3a:	f000 b94d 	b.w	8015ed8 <_write_r>

08015c3e <__sseek>:
 8015c3e:	b510      	push	{r4, lr}
 8015c40:	460c      	mov	r4, r1
 8015c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c46:	f000 f923 	bl	8015e90 <_lseek_r>
 8015c4a:	1c43      	adds	r3, r0, #1
 8015c4c:	89a3      	ldrh	r3, [r4, #12]
 8015c4e:	bf15      	itete	ne
 8015c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8015c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015c5a:	81a3      	strheq	r3, [r4, #12]
 8015c5c:	bf18      	it	ne
 8015c5e:	81a3      	strhne	r3, [r4, #12]
 8015c60:	bd10      	pop	{r4, pc}

08015c62 <__sclose>:
 8015c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c66:	f000 b8ad 	b.w	8015dc4 <_close_r>

08015c6a <__swbuf_r>:
 8015c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c6c:	460e      	mov	r6, r1
 8015c6e:	4614      	mov	r4, r2
 8015c70:	4605      	mov	r5, r0
 8015c72:	b118      	cbz	r0, 8015c7c <__swbuf_r+0x12>
 8015c74:	6a03      	ldr	r3, [r0, #32]
 8015c76:	b90b      	cbnz	r3, 8015c7c <__swbuf_r+0x12>
 8015c78:	f7ff ff10 	bl	8015a9c <__sinit>
 8015c7c:	69a3      	ldr	r3, [r4, #24]
 8015c7e:	60a3      	str	r3, [r4, #8]
 8015c80:	89a3      	ldrh	r3, [r4, #12]
 8015c82:	071a      	lsls	r2, r3, #28
 8015c84:	d525      	bpl.n	8015cd2 <__swbuf_r+0x68>
 8015c86:	6923      	ldr	r3, [r4, #16]
 8015c88:	b31b      	cbz	r3, 8015cd2 <__swbuf_r+0x68>
 8015c8a:	6823      	ldr	r3, [r4, #0]
 8015c8c:	6922      	ldr	r2, [r4, #16]
 8015c8e:	1a98      	subs	r0, r3, r2
 8015c90:	6963      	ldr	r3, [r4, #20]
 8015c92:	b2f6      	uxtb	r6, r6
 8015c94:	4283      	cmp	r3, r0
 8015c96:	4637      	mov	r7, r6
 8015c98:	dc04      	bgt.n	8015ca4 <__swbuf_r+0x3a>
 8015c9a:	4621      	mov	r1, r4
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	f000 fde1 	bl	8016864 <_fflush_r>
 8015ca2:	b9e0      	cbnz	r0, 8015cde <__swbuf_r+0x74>
 8015ca4:	68a3      	ldr	r3, [r4, #8]
 8015ca6:	3b01      	subs	r3, #1
 8015ca8:	60a3      	str	r3, [r4, #8]
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	1c5a      	adds	r2, r3, #1
 8015cae:	6022      	str	r2, [r4, #0]
 8015cb0:	701e      	strb	r6, [r3, #0]
 8015cb2:	6962      	ldr	r2, [r4, #20]
 8015cb4:	1c43      	adds	r3, r0, #1
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d004      	beq.n	8015cc4 <__swbuf_r+0x5a>
 8015cba:	89a3      	ldrh	r3, [r4, #12]
 8015cbc:	07db      	lsls	r3, r3, #31
 8015cbe:	d506      	bpl.n	8015cce <__swbuf_r+0x64>
 8015cc0:	2e0a      	cmp	r6, #10
 8015cc2:	d104      	bne.n	8015cce <__swbuf_r+0x64>
 8015cc4:	4621      	mov	r1, r4
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f000 fdcc 	bl	8016864 <_fflush_r>
 8015ccc:	b938      	cbnz	r0, 8015cde <__swbuf_r+0x74>
 8015cce:	4638      	mov	r0, r7
 8015cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	f000 f805 	bl	8015ce4 <__swsetup_r>
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	d0d5      	beq.n	8015c8a <__swbuf_r+0x20>
 8015cde:	f04f 37ff 	mov.w	r7, #4294967295
 8015ce2:	e7f4      	b.n	8015cce <__swbuf_r+0x64>

08015ce4 <__swsetup_r>:
 8015ce4:	b538      	push	{r3, r4, r5, lr}
 8015ce6:	4b2a      	ldr	r3, [pc, #168]	; (8015d90 <__swsetup_r+0xac>)
 8015ce8:	4605      	mov	r5, r0
 8015cea:	6818      	ldr	r0, [r3, #0]
 8015cec:	460c      	mov	r4, r1
 8015cee:	b118      	cbz	r0, 8015cf8 <__swsetup_r+0x14>
 8015cf0:	6a03      	ldr	r3, [r0, #32]
 8015cf2:	b90b      	cbnz	r3, 8015cf8 <__swsetup_r+0x14>
 8015cf4:	f7ff fed2 	bl	8015a9c <__sinit>
 8015cf8:	89a3      	ldrh	r3, [r4, #12]
 8015cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cfe:	0718      	lsls	r0, r3, #28
 8015d00:	d422      	bmi.n	8015d48 <__swsetup_r+0x64>
 8015d02:	06d9      	lsls	r1, r3, #27
 8015d04:	d407      	bmi.n	8015d16 <__swsetup_r+0x32>
 8015d06:	2309      	movs	r3, #9
 8015d08:	602b      	str	r3, [r5, #0]
 8015d0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015d0e:	81a3      	strh	r3, [r4, #12]
 8015d10:	f04f 30ff 	mov.w	r0, #4294967295
 8015d14:	e034      	b.n	8015d80 <__swsetup_r+0x9c>
 8015d16:	0758      	lsls	r0, r3, #29
 8015d18:	d512      	bpl.n	8015d40 <__swsetup_r+0x5c>
 8015d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d1c:	b141      	cbz	r1, 8015d30 <__swsetup_r+0x4c>
 8015d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d22:	4299      	cmp	r1, r3
 8015d24:	d002      	beq.n	8015d2c <__swsetup_r+0x48>
 8015d26:	4628      	mov	r0, r5
 8015d28:	f000 f942 	bl	8015fb0 <_free_r>
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	6363      	str	r3, [r4, #52]	; 0x34
 8015d30:	89a3      	ldrh	r3, [r4, #12]
 8015d32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d36:	81a3      	strh	r3, [r4, #12]
 8015d38:	2300      	movs	r3, #0
 8015d3a:	6063      	str	r3, [r4, #4]
 8015d3c:	6923      	ldr	r3, [r4, #16]
 8015d3e:	6023      	str	r3, [r4, #0]
 8015d40:	89a3      	ldrh	r3, [r4, #12]
 8015d42:	f043 0308 	orr.w	r3, r3, #8
 8015d46:	81a3      	strh	r3, [r4, #12]
 8015d48:	6923      	ldr	r3, [r4, #16]
 8015d4a:	b94b      	cbnz	r3, 8015d60 <__swsetup_r+0x7c>
 8015d4c:	89a3      	ldrh	r3, [r4, #12]
 8015d4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d56:	d003      	beq.n	8015d60 <__swsetup_r+0x7c>
 8015d58:	4621      	mov	r1, r4
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f000 fde2 	bl	8016924 <__smakebuf_r>
 8015d60:	89a0      	ldrh	r0, [r4, #12]
 8015d62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d66:	f010 0301 	ands.w	r3, r0, #1
 8015d6a:	d00a      	beq.n	8015d82 <__swsetup_r+0x9e>
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	60a3      	str	r3, [r4, #8]
 8015d70:	6963      	ldr	r3, [r4, #20]
 8015d72:	425b      	negs	r3, r3
 8015d74:	61a3      	str	r3, [r4, #24]
 8015d76:	6923      	ldr	r3, [r4, #16]
 8015d78:	b943      	cbnz	r3, 8015d8c <__swsetup_r+0xa8>
 8015d7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d7e:	d1c4      	bne.n	8015d0a <__swsetup_r+0x26>
 8015d80:	bd38      	pop	{r3, r4, r5, pc}
 8015d82:	0781      	lsls	r1, r0, #30
 8015d84:	bf58      	it	pl
 8015d86:	6963      	ldrpl	r3, [r4, #20]
 8015d88:	60a3      	str	r3, [r4, #8]
 8015d8a:	e7f4      	b.n	8015d76 <__swsetup_r+0x92>
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	e7f7      	b.n	8015d80 <__swsetup_r+0x9c>
 8015d90:	2000008c 	.word	0x2000008c

08015d94 <memcmp>:
 8015d94:	b510      	push	{r4, lr}
 8015d96:	3901      	subs	r1, #1
 8015d98:	4402      	add	r2, r0
 8015d9a:	4290      	cmp	r0, r2
 8015d9c:	d101      	bne.n	8015da2 <memcmp+0xe>
 8015d9e:	2000      	movs	r0, #0
 8015da0:	e005      	b.n	8015dae <memcmp+0x1a>
 8015da2:	7803      	ldrb	r3, [r0, #0]
 8015da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015da8:	42a3      	cmp	r3, r4
 8015daa:	d001      	beq.n	8015db0 <memcmp+0x1c>
 8015dac:	1b18      	subs	r0, r3, r4
 8015dae:	bd10      	pop	{r4, pc}
 8015db0:	3001      	adds	r0, #1
 8015db2:	e7f2      	b.n	8015d9a <memcmp+0x6>

08015db4 <memset>:
 8015db4:	4402      	add	r2, r0
 8015db6:	4603      	mov	r3, r0
 8015db8:	4293      	cmp	r3, r2
 8015dba:	d100      	bne.n	8015dbe <memset+0xa>
 8015dbc:	4770      	bx	lr
 8015dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8015dc2:	e7f9      	b.n	8015db8 <memset+0x4>

08015dc4 <_close_r>:
 8015dc4:	b538      	push	{r3, r4, r5, lr}
 8015dc6:	4d06      	ldr	r5, [pc, #24]	; (8015de0 <_close_r+0x1c>)
 8015dc8:	2300      	movs	r3, #0
 8015dca:	4604      	mov	r4, r0
 8015dcc:	4608      	mov	r0, r1
 8015dce:	602b      	str	r3, [r5, #0]
 8015dd0:	f7eb fe77 	bl	8001ac2 <_close>
 8015dd4:	1c43      	adds	r3, r0, #1
 8015dd6:	d102      	bne.n	8015dde <_close_r+0x1a>
 8015dd8:	682b      	ldr	r3, [r5, #0]
 8015dda:	b103      	cbz	r3, 8015dde <_close_r+0x1a>
 8015ddc:	6023      	str	r3, [r4, #0]
 8015dde:	bd38      	pop	{r3, r4, r5, pc}
 8015de0:	200452fc 	.word	0x200452fc

08015de4 <_reclaim_reent>:
 8015de4:	4b29      	ldr	r3, [pc, #164]	; (8015e8c <_reclaim_reent+0xa8>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	4283      	cmp	r3, r0
 8015dea:	b570      	push	{r4, r5, r6, lr}
 8015dec:	4604      	mov	r4, r0
 8015dee:	d04b      	beq.n	8015e88 <_reclaim_reent+0xa4>
 8015df0:	69c3      	ldr	r3, [r0, #28]
 8015df2:	b143      	cbz	r3, 8015e06 <_reclaim_reent+0x22>
 8015df4:	68db      	ldr	r3, [r3, #12]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d144      	bne.n	8015e84 <_reclaim_reent+0xa0>
 8015dfa:	69e3      	ldr	r3, [r4, #28]
 8015dfc:	6819      	ldr	r1, [r3, #0]
 8015dfe:	b111      	cbz	r1, 8015e06 <_reclaim_reent+0x22>
 8015e00:	4620      	mov	r0, r4
 8015e02:	f000 f8d5 	bl	8015fb0 <_free_r>
 8015e06:	6961      	ldr	r1, [r4, #20]
 8015e08:	b111      	cbz	r1, 8015e10 <_reclaim_reent+0x2c>
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f000 f8d0 	bl	8015fb0 <_free_r>
 8015e10:	69e1      	ldr	r1, [r4, #28]
 8015e12:	b111      	cbz	r1, 8015e1a <_reclaim_reent+0x36>
 8015e14:	4620      	mov	r0, r4
 8015e16:	f000 f8cb 	bl	8015fb0 <_free_r>
 8015e1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015e1c:	b111      	cbz	r1, 8015e24 <_reclaim_reent+0x40>
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f000 f8c6 	bl	8015fb0 <_free_r>
 8015e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e26:	b111      	cbz	r1, 8015e2e <_reclaim_reent+0x4a>
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f000 f8c1 	bl	8015fb0 <_free_r>
 8015e2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015e30:	b111      	cbz	r1, 8015e38 <_reclaim_reent+0x54>
 8015e32:	4620      	mov	r0, r4
 8015e34:	f000 f8bc 	bl	8015fb0 <_free_r>
 8015e38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015e3a:	b111      	cbz	r1, 8015e42 <_reclaim_reent+0x5e>
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	f000 f8b7 	bl	8015fb0 <_free_r>
 8015e42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8015e44:	b111      	cbz	r1, 8015e4c <_reclaim_reent+0x68>
 8015e46:	4620      	mov	r0, r4
 8015e48:	f000 f8b2 	bl	8015fb0 <_free_r>
 8015e4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015e4e:	b111      	cbz	r1, 8015e56 <_reclaim_reent+0x72>
 8015e50:	4620      	mov	r0, r4
 8015e52:	f000 f8ad 	bl	8015fb0 <_free_r>
 8015e56:	6a23      	ldr	r3, [r4, #32]
 8015e58:	b1b3      	cbz	r3, 8015e88 <_reclaim_reent+0xa4>
 8015e5a:	4620      	mov	r0, r4
 8015e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e60:	4718      	bx	r3
 8015e62:	5949      	ldr	r1, [r1, r5]
 8015e64:	b941      	cbnz	r1, 8015e78 <_reclaim_reent+0x94>
 8015e66:	3504      	adds	r5, #4
 8015e68:	69e3      	ldr	r3, [r4, #28]
 8015e6a:	2d80      	cmp	r5, #128	; 0x80
 8015e6c:	68d9      	ldr	r1, [r3, #12]
 8015e6e:	d1f8      	bne.n	8015e62 <_reclaim_reent+0x7e>
 8015e70:	4620      	mov	r0, r4
 8015e72:	f000 f89d 	bl	8015fb0 <_free_r>
 8015e76:	e7c0      	b.n	8015dfa <_reclaim_reent+0x16>
 8015e78:	680e      	ldr	r6, [r1, #0]
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f000 f898 	bl	8015fb0 <_free_r>
 8015e80:	4631      	mov	r1, r6
 8015e82:	e7ef      	b.n	8015e64 <_reclaim_reent+0x80>
 8015e84:	2500      	movs	r5, #0
 8015e86:	e7ef      	b.n	8015e68 <_reclaim_reent+0x84>
 8015e88:	bd70      	pop	{r4, r5, r6, pc}
 8015e8a:	bf00      	nop
 8015e8c:	2000008c 	.word	0x2000008c

08015e90 <_lseek_r>:
 8015e90:	b538      	push	{r3, r4, r5, lr}
 8015e92:	4d07      	ldr	r5, [pc, #28]	; (8015eb0 <_lseek_r+0x20>)
 8015e94:	4604      	mov	r4, r0
 8015e96:	4608      	mov	r0, r1
 8015e98:	4611      	mov	r1, r2
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	602a      	str	r2, [r5, #0]
 8015e9e:	461a      	mov	r2, r3
 8015ea0:	f7eb fe36 	bl	8001b10 <_lseek>
 8015ea4:	1c43      	adds	r3, r0, #1
 8015ea6:	d102      	bne.n	8015eae <_lseek_r+0x1e>
 8015ea8:	682b      	ldr	r3, [r5, #0]
 8015eaa:	b103      	cbz	r3, 8015eae <_lseek_r+0x1e>
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	bd38      	pop	{r3, r4, r5, pc}
 8015eb0:	200452fc 	.word	0x200452fc

08015eb4 <_read_r>:
 8015eb4:	b538      	push	{r3, r4, r5, lr}
 8015eb6:	4d07      	ldr	r5, [pc, #28]	; (8015ed4 <_read_r+0x20>)
 8015eb8:	4604      	mov	r4, r0
 8015eba:	4608      	mov	r0, r1
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	602a      	str	r2, [r5, #0]
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	f7eb fde0 	bl	8001a88 <_read>
 8015ec8:	1c43      	adds	r3, r0, #1
 8015eca:	d102      	bne.n	8015ed2 <_read_r+0x1e>
 8015ecc:	682b      	ldr	r3, [r5, #0]
 8015ece:	b103      	cbz	r3, 8015ed2 <_read_r+0x1e>
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	bd38      	pop	{r3, r4, r5, pc}
 8015ed4:	200452fc 	.word	0x200452fc

08015ed8 <_write_r>:
 8015ed8:	b538      	push	{r3, r4, r5, lr}
 8015eda:	4d07      	ldr	r5, [pc, #28]	; (8015ef8 <_write_r+0x20>)
 8015edc:	4604      	mov	r4, r0
 8015ede:	4608      	mov	r0, r1
 8015ee0:	4611      	mov	r1, r2
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	602a      	str	r2, [r5, #0]
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	f7eb fb96 	bl	8001618 <_write>
 8015eec:	1c43      	adds	r3, r0, #1
 8015eee:	d102      	bne.n	8015ef6 <_write_r+0x1e>
 8015ef0:	682b      	ldr	r3, [r5, #0]
 8015ef2:	b103      	cbz	r3, 8015ef6 <_write_r+0x1e>
 8015ef4:	6023      	str	r3, [r4, #0]
 8015ef6:	bd38      	pop	{r3, r4, r5, pc}
 8015ef8:	200452fc 	.word	0x200452fc

08015efc <__errno>:
 8015efc:	4b01      	ldr	r3, [pc, #4]	; (8015f04 <__errno+0x8>)
 8015efe:	6818      	ldr	r0, [r3, #0]
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop
 8015f04:	2000008c 	.word	0x2000008c

08015f08 <__libc_init_array>:
 8015f08:	b570      	push	{r4, r5, r6, lr}
 8015f0a:	4d0d      	ldr	r5, [pc, #52]	; (8015f40 <__libc_init_array+0x38>)
 8015f0c:	4c0d      	ldr	r4, [pc, #52]	; (8015f44 <__libc_init_array+0x3c>)
 8015f0e:	1b64      	subs	r4, r4, r5
 8015f10:	10a4      	asrs	r4, r4, #2
 8015f12:	2600      	movs	r6, #0
 8015f14:	42a6      	cmp	r6, r4
 8015f16:	d109      	bne.n	8015f2c <__libc_init_array+0x24>
 8015f18:	4d0b      	ldr	r5, [pc, #44]	; (8015f48 <__libc_init_array+0x40>)
 8015f1a:	4c0c      	ldr	r4, [pc, #48]	; (8015f4c <__libc_init_array+0x44>)
 8015f1c:	f000 fdbc 	bl	8016a98 <_init>
 8015f20:	1b64      	subs	r4, r4, r5
 8015f22:	10a4      	asrs	r4, r4, #2
 8015f24:	2600      	movs	r6, #0
 8015f26:	42a6      	cmp	r6, r4
 8015f28:	d105      	bne.n	8015f36 <__libc_init_array+0x2e>
 8015f2a:	bd70      	pop	{r4, r5, r6, pc}
 8015f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f30:	4798      	blx	r3
 8015f32:	3601      	adds	r6, #1
 8015f34:	e7ee      	b.n	8015f14 <__libc_init_array+0xc>
 8015f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f3a:	4798      	blx	r3
 8015f3c:	3601      	adds	r6, #1
 8015f3e:	e7f2      	b.n	8015f26 <__libc_init_array+0x1e>
 8015f40:	08019b40 	.word	0x08019b40
 8015f44:	08019b40 	.word	0x08019b40
 8015f48:	08019b40 	.word	0x08019b40
 8015f4c:	08019b44 	.word	0x08019b44

08015f50 <__retarget_lock_init_recursive>:
 8015f50:	4770      	bx	lr

08015f52 <__retarget_lock_acquire_recursive>:
 8015f52:	4770      	bx	lr

08015f54 <__retarget_lock_release_recursive>:
 8015f54:	4770      	bx	lr

08015f56 <memcpy>:
 8015f56:	440a      	add	r2, r1
 8015f58:	4291      	cmp	r1, r2
 8015f5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f5e:	d100      	bne.n	8015f62 <memcpy+0xc>
 8015f60:	4770      	bx	lr
 8015f62:	b510      	push	{r4, lr}
 8015f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f6c:	4291      	cmp	r1, r2
 8015f6e:	d1f9      	bne.n	8015f64 <memcpy+0xe>
 8015f70:	bd10      	pop	{r4, pc}
	...

08015f74 <__assert_func>:
 8015f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f76:	4614      	mov	r4, r2
 8015f78:	461a      	mov	r2, r3
 8015f7a:	4b09      	ldr	r3, [pc, #36]	; (8015fa0 <__assert_func+0x2c>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	4605      	mov	r5, r0
 8015f80:	68d8      	ldr	r0, [r3, #12]
 8015f82:	b14c      	cbz	r4, 8015f98 <__assert_func+0x24>
 8015f84:	4b07      	ldr	r3, [pc, #28]	; (8015fa4 <__assert_func+0x30>)
 8015f86:	9100      	str	r1, [sp, #0]
 8015f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f8c:	4906      	ldr	r1, [pc, #24]	; (8015fa8 <__assert_func+0x34>)
 8015f8e:	462b      	mov	r3, r5
 8015f90:	f000 fc90 	bl	80168b4 <fiprintf>
 8015f94:	f000 fd34 	bl	8016a00 <abort>
 8015f98:	4b04      	ldr	r3, [pc, #16]	; (8015fac <__assert_func+0x38>)
 8015f9a:	461c      	mov	r4, r3
 8015f9c:	e7f3      	b.n	8015f86 <__assert_func+0x12>
 8015f9e:	bf00      	nop
 8015fa0:	2000008c 	.word	0x2000008c
 8015fa4:	08019ac8 	.word	0x08019ac8
 8015fa8:	08019ad5 	.word	0x08019ad5
 8015fac:	08019b03 	.word	0x08019b03

08015fb0 <_free_r>:
 8015fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fb2:	2900      	cmp	r1, #0
 8015fb4:	d044      	beq.n	8016040 <_free_r+0x90>
 8015fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fba:	9001      	str	r0, [sp, #4]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8015fc2:	bfb8      	it	lt
 8015fc4:	18e4      	addlt	r4, r4, r3
 8015fc6:	f000 f8e7 	bl	8016198 <__malloc_lock>
 8015fca:	4a1e      	ldr	r2, [pc, #120]	; (8016044 <_free_r+0x94>)
 8015fcc:	9801      	ldr	r0, [sp, #4]
 8015fce:	6813      	ldr	r3, [r2, #0]
 8015fd0:	b933      	cbnz	r3, 8015fe0 <_free_r+0x30>
 8015fd2:	6063      	str	r3, [r4, #4]
 8015fd4:	6014      	str	r4, [r2, #0]
 8015fd6:	b003      	add	sp, #12
 8015fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fdc:	f000 b8e2 	b.w	80161a4 <__malloc_unlock>
 8015fe0:	42a3      	cmp	r3, r4
 8015fe2:	d908      	bls.n	8015ff6 <_free_r+0x46>
 8015fe4:	6825      	ldr	r5, [r4, #0]
 8015fe6:	1961      	adds	r1, r4, r5
 8015fe8:	428b      	cmp	r3, r1
 8015fea:	bf01      	itttt	eq
 8015fec:	6819      	ldreq	r1, [r3, #0]
 8015fee:	685b      	ldreq	r3, [r3, #4]
 8015ff0:	1949      	addeq	r1, r1, r5
 8015ff2:	6021      	streq	r1, [r4, #0]
 8015ff4:	e7ed      	b.n	8015fd2 <_free_r+0x22>
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	685b      	ldr	r3, [r3, #4]
 8015ffa:	b10b      	cbz	r3, 8016000 <_free_r+0x50>
 8015ffc:	42a3      	cmp	r3, r4
 8015ffe:	d9fa      	bls.n	8015ff6 <_free_r+0x46>
 8016000:	6811      	ldr	r1, [r2, #0]
 8016002:	1855      	adds	r5, r2, r1
 8016004:	42a5      	cmp	r5, r4
 8016006:	d10b      	bne.n	8016020 <_free_r+0x70>
 8016008:	6824      	ldr	r4, [r4, #0]
 801600a:	4421      	add	r1, r4
 801600c:	1854      	adds	r4, r2, r1
 801600e:	42a3      	cmp	r3, r4
 8016010:	6011      	str	r1, [r2, #0]
 8016012:	d1e0      	bne.n	8015fd6 <_free_r+0x26>
 8016014:	681c      	ldr	r4, [r3, #0]
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	6053      	str	r3, [r2, #4]
 801601a:	440c      	add	r4, r1
 801601c:	6014      	str	r4, [r2, #0]
 801601e:	e7da      	b.n	8015fd6 <_free_r+0x26>
 8016020:	d902      	bls.n	8016028 <_free_r+0x78>
 8016022:	230c      	movs	r3, #12
 8016024:	6003      	str	r3, [r0, #0]
 8016026:	e7d6      	b.n	8015fd6 <_free_r+0x26>
 8016028:	6825      	ldr	r5, [r4, #0]
 801602a:	1961      	adds	r1, r4, r5
 801602c:	428b      	cmp	r3, r1
 801602e:	bf04      	itt	eq
 8016030:	6819      	ldreq	r1, [r3, #0]
 8016032:	685b      	ldreq	r3, [r3, #4]
 8016034:	6063      	str	r3, [r4, #4]
 8016036:	bf04      	itt	eq
 8016038:	1949      	addeq	r1, r1, r5
 801603a:	6021      	streq	r1, [r4, #0]
 801603c:	6054      	str	r4, [r2, #4]
 801603e:	e7ca      	b.n	8015fd6 <_free_r+0x26>
 8016040:	b003      	add	sp, #12
 8016042:	bd30      	pop	{r4, r5, pc}
 8016044:	20045304 	.word	0x20045304

08016048 <malloc>:
 8016048:	4b02      	ldr	r3, [pc, #8]	; (8016054 <malloc+0xc>)
 801604a:	4601      	mov	r1, r0
 801604c:	6818      	ldr	r0, [r3, #0]
 801604e:	f000 b823 	b.w	8016098 <_malloc_r>
 8016052:	bf00      	nop
 8016054:	2000008c 	.word	0x2000008c

08016058 <sbrk_aligned>:
 8016058:	b570      	push	{r4, r5, r6, lr}
 801605a:	4e0e      	ldr	r6, [pc, #56]	; (8016094 <sbrk_aligned+0x3c>)
 801605c:	460c      	mov	r4, r1
 801605e:	6831      	ldr	r1, [r6, #0]
 8016060:	4605      	mov	r5, r0
 8016062:	b911      	cbnz	r1, 801606a <sbrk_aligned+0x12>
 8016064:	f000 fcbc 	bl	80169e0 <_sbrk_r>
 8016068:	6030      	str	r0, [r6, #0]
 801606a:	4621      	mov	r1, r4
 801606c:	4628      	mov	r0, r5
 801606e:	f000 fcb7 	bl	80169e0 <_sbrk_r>
 8016072:	1c43      	adds	r3, r0, #1
 8016074:	d00a      	beq.n	801608c <sbrk_aligned+0x34>
 8016076:	1cc4      	adds	r4, r0, #3
 8016078:	f024 0403 	bic.w	r4, r4, #3
 801607c:	42a0      	cmp	r0, r4
 801607e:	d007      	beq.n	8016090 <sbrk_aligned+0x38>
 8016080:	1a21      	subs	r1, r4, r0
 8016082:	4628      	mov	r0, r5
 8016084:	f000 fcac 	bl	80169e0 <_sbrk_r>
 8016088:	3001      	adds	r0, #1
 801608a:	d101      	bne.n	8016090 <sbrk_aligned+0x38>
 801608c:	f04f 34ff 	mov.w	r4, #4294967295
 8016090:	4620      	mov	r0, r4
 8016092:	bd70      	pop	{r4, r5, r6, pc}
 8016094:	20045308 	.word	0x20045308

08016098 <_malloc_r>:
 8016098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801609c:	1ccd      	adds	r5, r1, #3
 801609e:	f025 0503 	bic.w	r5, r5, #3
 80160a2:	3508      	adds	r5, #8
 80160a4:	2d0c      	cmp	r5, #12
 80160a6:	bf38      	it	cc
 80160a8:	250c      	movcc	r5, #12
 80160aa:	2d00      	cmp	r5, #0
 80160ac:	4607      	mov	r7, r0
 80160ae:	db01      	blt.n	80160b4 <_malloc_r+0x1c>
 80160b0:	42a9      	cmp	r1, r5
 80160b2:	d905      	bls.n	80160c0 <_malloc_r+0x28>
 80160b4:	230c      	movs	r3, #12
 80160b6:	603b      	str	r3, [r7, #0]
 80160b8:	2600      	movs	r6, #0
 80160ba:	4630      	mov	r0, r6
 80160bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016194 <_malloc_r+0xfc>
 80160c4:	f000 f868 	bl	8016198 <__malloc_lock>
 80160c8:	f8d8 3000 	ldr.w	r3, [r8]
 80160cc:	461c      	mov	r4, r3
 80160ce:	bb5c      	cbnz	r4, 8016128 <_malloc_r+0x90>
 80160d0:	4629      	mov	r1, r5
 80160d2:	4638      	mov	r0, r7
 80160d4:	f7ff ffc0 	bl	8016058 <sbrk_aligned>
 80160d8:	1c43      	adds	r3, r0, #1
 80160da:	4604      	mov	r4, r0
 80160dc:	d155      	bne.n	801618a <_malloc_r+0xf2>
 80160de:	f8d8 4000 	ldr.w	r4, [r8]
 80160e2:	4626      	mov	r6, r4
 80160e4:	2e00      	cmp	r6, #0
 80160e6:	d145      	bne.n	8016174 <_malloc_r+0xdc>
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	d048      	beq.n	801617e <_malloc_r+0xe6>
 80160ec:	6823      	ldr	r3, [r4, #0]
 80160ee:	4631      	mov	r1, r6
 80160f0:	4638      	mov	r0, r7
 80160f2:	eb04 0903 	add.w	r9, r4, r3
 80160f6:	f000 fc73 	bl	80169e0 <_sbrk_r>
 80160fa:	4581      	cmp	r9, r0
 80160fc:	d13f      	bne.n	801617e <_malloc_r+0xe6>
 80160fe:	6821      	ldr	r1, [r4, #0]
 8016100:	1a6d      	subs	r5, r5, r1
 8016102:	4629      	mov	r1, r5
 8016104:	4638      	mov	r0, r7
 8016106:	f7ff ffa7 	bl	8016058 <sbrk_aligned>
 801610a:	3001      	adds	r0, #1
 801610c:	d037      	beq.n	801617e <_malloc_r+0xe6>
 801610e:	6823      	ldr	r3, [r4, #0]
 8016110:	442b      	add	r3, r5
 8016112:	6023      	str	r3, [r4, #0]
 8016114:	f8d8 3000 	ldr.w	r3, [r8]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d038      	beq.n	801618e <_malloc_r+0xf6>
 801611c:	685a      	ldr	r2, [r3, #4]
 801611e:	42a2      	cmp	r2, r4
 8016120:	d12b      	bne.n	801617a <_malloc_r+0xe2>
 8016122:	2200      	movs	r2, #0
 8016124:	605a      	str	r2, [r3, #4]
 8016126:	e00f      	b.n	8016148 <_malloc_r+0xb0>
 8016128:	6822      	ldr	r2, [r4, #0]
 801612a:	1b52      	subs	r2, r2, r5
 801612c:	d41f      	bmi.n	801616e <_malloc_r+0xd6>
 801612e:	2a0b      	cmp	r2, #11
 8016130:	d917      	bls.n	8016162 <_malloc_r+0xca>
 8016132:	1961      	adds	r1, r4, r5
 8016134:	42a3      	cmp	r3, r4
 8016136:	6025      	str	r5, [r4, #0]
 8016138:	bf18      	it	ne
 801613a:	6059      	strne	r1, [r3, #4]
 801613c:	6863      	ldr	r3, [r4, #4]
 801613e:	bf08      	it	eq
 8016140:	f8c8 1000 	streq.w	r1, [r8]
 8016144:	5162      	str	r2, [r4, r5]
 8016146:	604b      	str	r3, [r1, #4]
 8016148:	4638      	mov	r0, r7
 801614a:	f104 060b 	add.w	r6, r4, #11
 801614e:	f000 f829 	bl	80161a4 <__malloc_unlock>
 8016152:	f026 0607 	bic.w	r6, r6, #7
 8016156:	1d23      	adds	r3, r4, #4
 8016158:	1af2      	subs	r2, r6, r3
 801615a:	d0ae      	beq.n	80160ba <_malloc_r+0x22>
 801615c:	1b9b      	subs	r3, r3, r6
 801615e:	50a3      	str	r3, [r4, r2]
 8016160:	e7ab      	b.n	80160ba <_malloc_r+0x22>
 8016162:	42a3      	cmp	r3, r4
 8016164:	6862      	ldr	r2, [r4, #4]
 8016166:	d1dd      	bne.n	8016124 <_malloc_r+0x8c>
 8016168:	f8c8 2000 	str.w	r2, [r8]
 801616c:	e7ec      	b.n	8016148 <_malloc_r+0xb0>
 801616e:	4623      	mov	r3, r4
 8016170:	6864      	ldr	r4, [r4, #4]
 8016172:	e7ac      	b.n	80160ce <_malloc_r+0x36>
 8016174:	4634      	mov	r4, r6
 8016176:	6876      	ldr	r6, [r6, #4]
 8016178:	e7b4      	b.n	80160e4 <_malloc_r+0x4c>
 801617a:	4613      	mov	r3, r2
 801617c:	e7cc      	b.n	8016118 <_malloc_r+0x80>
 801617e:	230c      	movs	r3, #12
 8016180:	603b      	str	r3, [r7, #0]
 8016182:	4638      	mov	r0, r7
 8016184:	f000 f80e 	bl	80161a4 <__malloc_unlock>
 8016188:	e797      	b.n	80160ba <_malloc_r+0x22>
 801618a:	6025      	str	r5, [r4, #0]
 801618c:	e7dc      	b.n	8016148 <_malloc_r+0xb0>
 801618e:	605b      	str	r3, [r3, #4]
 8016190:	deff      	udf	#255	; 0xff
 8016192:	bf00      	nop
 8016194:	20045304 	.word	0x20045304

08016198 <__malloc_lock>:
 8016198:	4801      	ldr	r0, [pc, #4]	; (80161a0 <__malloc_lock+0x8>)
 801619a:	f7ff beda 	b.w	8015f52 <__retarget_lock_acquire_recursive>
 801619e:	bf00      	nop
 80161a0:	20045300 	.word	0x20045300

080161a4 <__malloc_unlock>:
 80161a4:	4801      	ldr	r0, [pc, #4]	; (80161ac <__malloc_unlock+0x8>)
 80161a6:	f7ff bed5 	b.w	8015f54 <__retarget_lock_release_recursive>
 80161aa:	bf00      	nop
 80161ac:	20045300 	.word	0x20045300

080161b0 <__sfputc_r>:
 80161b0:	6893      	ldr	r3, [r2, #8]
 80161b2:	3b01      	subs	r3, #1
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	b410      	push	{r4}
 80161b8:	6093      	str	r3, [r2, #8]
 80161ba:	da08      	bge.n	80161ce <__sfputc_r+0x1e>
 80161bc:	6994      	ldr	r4, [r2, #24]
 80161be:	42a3      	cmp	r3, r4
 80161c0:	db01      	blt.n	80161c6 <__sfputc_r+0x16>
 80161c2:	290a      	cmp	r1, #10
 80161c4:	d103      	bne.n	80161ce <__sfputc_r+0x1e>
 80161c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161ca:	f7ff bd4e 	b.w	8015c6a <__swbuf_r>
 80161ce:	6813      	ldr	r3, [r2, #0]
 80161d0:	1c58      	adds	r0, r3, #1
 80161d2:	6010      	str	r0, [r2, #0]
 80161d4:	7019      	strb	r1, [r3, #0]
 80161d6:	4608      	mov	r0, r1
 80161d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161dc:	4770      	bx	lr

080161de <__sfputs_r>:
 80161de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e0:	4606      	mov	r6, r0
 80161e2:	460f      	mov	r7, r1
 80161e4:	4614      	mov	r4, r2
 80161e6:	18d5      	adds	r5, r2, r3
 80161e8:	42ac      	cmp	r4, r5
 80161ea:	d101      	bne.n	80161f0 <__sfputs_r+0x12>
 80161ec:	2000      	movs	r0, #0
 80161ee:	e007      	b.n	8016200 <__sfputs_r+0x22>
 80161f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161f4:	463a      	mov	r2, r7
 80161f6:	4630      	mov	r0, r6
 80161f8:	f7ff ffda 	bl	80161b0 <__sfputc_r>
 80161fc:	1c43      	adds	r3, r0, #1
 80161fe:	d1f3      	bne.n	80161e8 <__sfputs_r+0xa>
 8016200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016204 <_vfiprintf_r>:
 8016204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016208:	460d      	mov	r5, r1
 801620a:	b09d      	sub	sp, #116	; 0x74
 801620c:	4614      	mov	r4, r2
 801620e:	4698      	mov	r8, r3
 8016210:	4606      	mov	r6, r0
 8016212:	b118      	cbz	r0, 801621c <_vfiprintf_r+0x18>
 8016214:	6a03      	ldr	r3, [r0, #32]
 8016216:	b90b      	cbnz	r3, 801621c <_vfiprintf_r+0x18>
 8016218:	f7ff fc40 	bl	8015a9c <__sinit>
 801621c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801621e:	07d9      	lsls	r1, r3, #31
 8016220:	d405      	bmi.n	801622e <_vfiprintf_r+0x2a>
 8016222:	89ab      	ldrh	r3, [r5, #12]
 8016224:	059a      	lsls	r2, r3, #22
 8016226:	d402      	bmi.n	801622e <_vfiprintf_r+0x2a>
 8016228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801622a:	f7ff fe92 	bl	8015f52 <__retarget_lock_acquire_recursive>
 801622e:	89ab      	ldrh	r3, [r5, #12]
 8016230:	071b      	lsls	r3, r3, #28
 8016232:	d501      	bpl.n	8016238 <_vfiprintf_r+0x34>
 8016234:	692b      	ldr	r3, [r5, #16]
 8016236:	b99b      	cbnz	r3, 8016260 <_vfiprintf_r+0x5c>
 8016238:	4629      	mov	r1, r5
 801623a:	4630      	mov	r0, r6
 801623c:	f7ff fd52 	bl	8015ce4 <__swsetup_r>
 8016240:	b170      	cbz	r0, 8016260 <_vfiprintf_r+0x5c>
 8016242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016244:	07dc      	lsls	r4, r3, #31
 8016246:	d504      	bpl.n	8016252 <_vfiprintf_r+0x4e>
 8016248:	f04f 30ff 	mov.w	r0, #4294967295
 801624c:	b01d      	add	sp, #116	; 0x74
 801624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016252:	89ab      	ldrh	r3, [r5, #12]
 8016254:	0598      	lsls	r0, r3, #22
 8016256:	d4f7      	bmi.n	8016248 <_vfiprintf_r+0x44>
 8016258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801625a:	f7ff fe7b 	bl	8015f54 <__retarget_lock_release_recursive>
 801625e:	e7f3      	b.n	8016248 <_vfiprintf_r+0x44>
 8016260:	2300      	movs	r3, #0
 8016262:	9309      	str	r3, [sp, #36]	; 0x24
 8016264:	2320      	movs	r3, #32
 8016266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801626a:	f8cd 800c 	str.w	r8, [sp, #12]
 801626e:	2330      	movs	r3, #48	; 0x30
 8016270:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016424 <_vfiprintf_r+0x220>
 8016274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016278:	f04f 0901 	mov.w	r9, #1
 801627c:	4623      	mov	r3, r4
 801627e:	469a      	mov	sl, r3
 8016280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016284:	b10a      	cbz	r2, 801628a <_vfiprintf_r+0x86>
 8016286:	2a25      	cmp	r2, #37	; 0x25
 8016288:	d1f9      	bne.n	801627e <_vfiprintf_r+0x7a>
 801628a:	ebba 0b04 	subs.w	fp, sl, r4
 801628e:	d00b      	beq.n	80162a8 <_vfiprintf_r+0xa4>
 8016290:	465b      	mov	r3, fp
 8016292:	4622      	mov	r2, r4
 8016294:	4629      	mov	r1, r5
 8016296:	4630      	mov	r0, r6
 8016298:	f7ff ffa1 	bl	80161de <__sfputs_r>
 801629c:	3001      	adds	r0, #1
 801629e:	f000 80a9 	beq.w	80163f4 <_vfiprintf_r+0x1f0>
 80162a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162a4:	445a      	add	r2, fp
 80162a6:	9209      	str	r2, [sp, #36]	; 0x24
 80162a8:	f89a 3000 	ldrb.w	r3, [sl]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	f000 80a1 	beq.w	80163f4 <_vfiprintf_r+0x1f0>
 80162b2:	2300      	movs	r3, #0
 80162b4:	f04f 32ff 	mov.w	r2, #4294967295
 80162b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162bc:	f10a 0a01 	add.w	sl, sl, #1
 80162c0:	9304      	str	r3, [sp, #16]
 80162c2:	9307      	str	r3, [sp, #28]
 80162c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162c8:	931a      	str	r3, [sp, #104]	; 0x68
 80162ca:	4654      	mov	r4, sl
 80162cc:	2205      	movs	r2, #5
 80162ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162d2:	4854      	ldr	r0, [pc, #336]	; (8016424 <_vfiprintf_r+0x220>)
 80162d4:	f7e9 ffb4 	bl	8000240 <memchr>
 80162d8:	9a04      	ldr	r2, [sp, #16]
 80162da:	b9d8      	cbnz	r0, 8016314 <_vfiprintf_r+0x110>
 80162dc:	06d1      	lsls	r1, r2, #27
 80162de:	bf44      	itt	mi
 80162e0:	2320      	movmi	r3, #32
 80162e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162e6:	0713      	lsls	r3, r2, #28
 80162e8:	bf44      	itt	mi
 80162ea:	232b      	movmi	r3, #43	; 0x2b
 80162ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162f0:	f89a 3000 	ldrb.w	r3, [sl]
 80162f4:	2b2a      	cmp	r3, #42	; 0x2a
 80162f6:	d015      	beq.n	8016324 <_vfiprintf_r+0x120>
 80162f8:	9a07      	ldr	r2, [sp, #28]
 80162fa:	4654      	mov	r4, sl
 80162fc:	2000      	movs	r0, #0
 80162fe:	f04f 0c0a 	mov.w	ip, #10
 8016302:	4621      	mov	r1, r4
 8016304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016308:	3b30      	subs	r3, #48	; 0x30
 801630a:	2b09      	cmp	r3, #9
 801630c:	d94d      	bls.n	80163aa <_vfiprintf_r+0x1a6>
 801630e:	b1b0      	cbz	r0, 801633e <_vfiprintf_r+0x13a>
 8016310:	9207      	str	r2, [sp, #28]
 8016312:	e014      	b.n	801633e <_vfiprintf_r+0x13a>
 8016314:	eba0 0308 	sub.w	r3, r0, r8
 8016318:	fa09 f303 	lsl.w	r3, r9, r3
 801631c:	4313      	orrs	r3, r2
 801631e:	9304      	str	r3, [sp, #16]
 8016320:	46a2      	mov	sl, r4
 8016322:	e7d2      	b.n	80162ca <_vfiprintf_r+0xc6>
 8016324:	9b03      	ldr	r3, [sp, #12]
 8016326:	1d19      	adds	r1, r3, #4
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	9103      	str	r1, [sp, #12]
 801632c:	2b00      	cmp	r3, #0
 801632e:	bfbb      	ittet	lt
 8016330:	425b      	neglt	r3, r3
 8016332:	f042 0202 	orrlt.w	r2, r2, #2
 8016336:	9307      	strge	r3, [sp, #28]
 8016338:	9307      	strlt	r3, [sp, #28]
 801633a:	bfb8      	it	lt
 801633c:	9204      	strlt	r2, [sp, #16]
 801633e:	7823      	ldrb	r3, [r4, #0]
 8016340:	2b2e      	cmp	r3, #46	; 0x2e
 8016342:	d10c      	bne.n	801635e <_vfiprintf_r+0x15a>
 8016344:	7863      	ldrb	r3, [r4, #1]
 8016346:	2b2a      	cmp	r3, #42	; 0x2a
 8016348:	d134      	bne.n	80163b4 <_vfiprintf_r+0x1b0>
 801634a:	9b03      	ldr	r3, [sp, #12]
 801634c:	1d1a      	adds	r2, r3, #4
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	9203      	str	r2, [sp, #12]
 8016352:	2b00      	cmp	r3, #0
 8016354:	bfb8      	it	lt
 8016356:	f04f 33ff 	movlt.w	r3, #4294967295
 801635a:	3402      	adds	r4, #2
 801635c:	9305      	str	r3, [sp, #20]
 801635e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016434 <_vfiprintf_r+0x230>
 8016362:	7821      	ldrb	r1, [r4, #0]
 8016364:	2203      	movs	r2, #3
 8016366:	4650      	mov	r0, sl
 8016368:	f7e9 ff6a 	bl	8000240 <memchr>
 801636c:	b138      	cbz	r0, 801637e <_vfiprintf_r+0x17a>
 801636e:	9b04      	ldr	r3, [sp, #16]
 8016370:	eba0 000a 	sub.w	r0, r0, sl
 8016374:	2240      	movs	r2, #64	; 0x40
 8016376:	4082      	lsls	r2, r0
 8016378:	4313      	orrs	r3, r2
 801637a:	3401      	adds	r4, #1
 801637c:	9304      	str	r3, [sp, #16]
 801637e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016382:	4829      	ldr	r0, [pc, #164]	; (8016428 <_vfiprintf_r+0x224>)
 8016384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016388:	2206      	movs	r2, #6
 801638a:	f7e9 ff59 	bl	8000240 <memchr>
 801638e:	2800      	cmp	r0, #0
 8016390:	d03f      	beq.n	8016412 <_vfiprintf_r+0x20e>
 8016392:	4b26      	ldr	r3, [pc, #152]	; (801642c <_vfiprintf_r+0x228>)
 8016394:	bb1b      	cbnz	r3, 80163de <_vfiprintf_r+0x1da>
 8016396:	9b03      	ldr	r3, [sp, #12]
 8016398:	3307      	adds	r3, #7
 801639a:	f023 0307 	bic.w	r3, r3, #7
 801639e:	3308      	adds	r3, #8
 80163a0:	9303      	str	r3, [sp, #12]
 80163a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a4:	443b      	add	r3, r7
 80163a6:	9309      	str	r3, [sp, #36]	; 0x24
 80163a8:	e768      	b.n	801627c <_vfiprintf_r+0x78>
 80163aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80163ae:	460c      	mov	r4, r1
 80163b0:	2001      	movs	r0, #1
 80163b2:	e7a6      	b.n	8016302 <_vfiprintf_r+0xfe>
 80163b4:	2300      	movs	r3, #0
 80163b6:	3401      	adds	r4, #1
 80163b8:	9305      	str	r3, [sp, #20]
 80163ba:	4619      	mov	r1, r3
 80163bc:	f04f 0c0a 	mov.w	ip, #10
 80163c0:	4620      	mov	r0, r4
 80163c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163c6:	3a30      	subs	r2, #48	; 0x30
 80163c8:	2a09      	cmp	r2, #9
 80163ca:	d903      	bls.n	80163d4 <_vfiprintf_r+0x1d0>
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d0c6      	beq.n	801635e <_vfiprintf_r+0x15a>
 80163d0:	9105      	str	r1, [sp, #20]
 80163d2:	e7c4      	b.n	801635e <_vfiprintf_r+0x15a>
 80163d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80163d8:	4604      	mov	r4, r0
 80163da:	2301      	movs	r3, #1
 80163dc:	e7f0      	b.n	80163c0 <_vfiprintf_r+0x1bc>
 80163de:	ab03      	add	r3, sp, #12
 80163e0:	9300      	str	r3, [sp, #0]
 80163e2:	462a      	mov	r2, r5
 80163e4:	4b12      	ldr	r3, [pc, #72]	; (8016430 <_vfiprintf_r+0x22c>)
 80163e6:	a904      	add	r1, sp, #16
 80163e8:	4630      	mov	r0, r6
 80163ea:	f3af 8000 	nop.w
 80163ee:	4607      	mov	r7, r0
 80163f0:	1c78      	adds	r0, r7, #1
 80163f2:	d1d6      	bne.n	80163a2 <_vfiprintf_r+0x19e>
 80163f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163f6:	07d9      	lsls	r1, r3, #31
 80163f8:	d405      	bmi.n	8016406 <_vfiprintf_r+0x202>
 80163fa:	89ab      	ldrh	r3, [r5, #12]
 80163fc:	059a      	lsls	r2, r3, #22
 80163fe:	d402      	bmi.n	8016406 <_vfiprintf_r+0x202>
 8016400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016402:	f7ff fda7 	bl	8015f54 <__retarget_lock_release_recursive>
 8016406:	89ab      	ldrh	r3, [r5, #12]
 8016408:	065b      	lsls	r3, r3, #25
 801640a:	f53f af1d 	bmi.w	8016248 <_vfiprintf_r+0x44>
 801640e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016410:	e71c      	b.n	801624c <_vfiprintf_r+0x48>
 8016412:	ab03      	add	r3, sp, #12
 8016414:	9300      	str	r3, [sp, #0]
 8016416:	462a      	mov	r2, r5
 8016418:	4b05      	ldr	r3, [pc, #20]	; (8016430 <_vfiprintf_r+0x22c>)
 801641a:	a904      	add	r1, sp, #16
 801641c:	4630      	mov	r0, r6
 801641e:	f000 f879 	bl	8016514 <_printf_i>
 8016422:	e7e4      	b.n	80163ee <_vfiprintf_r+0x1ea>
 8016424:	08019b04 	.word	0x08019b04
 8016428:	08019b0e 	.word	0x08019b0e
 801642c:	00000000 	.word	0x00000000
 8016430:	080161df 	.word	0x080161df
 8016434:	08019b0a 	.word	0x08019b0a

08016438 <_printf_common>:
 8016438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801643c:	4616      	mov	r6, r2
 801643e:	4699      	mov	r9, r3
 8016440:	688a      	ldr	r2, [r1, #8]
 8016442:	690b      	ldr	r3, [r1, #16]
 8016444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016448:	4293      	cmp	r3, r2
 801644a:	bfb8      	it	lt
 801644c:	4613      	movlt	r3, r2
 801644e:	6033      	str	r3, [r6, #0]
 8016450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016454:	4607      	mov	r7, r0
 8016456:	460c      	mov	r4, r1
 8016458:	b10a      	cbz	r2, 801645e <_printf_common+0x26>
 801645a:	3301      	adds	r3, #1
 801645c:	6033      	str	r3, [r6, #0]
 801645e:	6823      	ldr	r3, [r4, #0]
 8016460:	0699      	lsls	r1, r3, #26
 8016462:	bf42      	ittt	mi
 8016464:	6833      	ldrmi	r3, [r6, #0]
 8016466:	3302      	addmi	r3, #2
 8016468:	6033      	strmi	r3, [r6, #0]
 801646a:	6825      	ldr	r5, [r4, #0]
 801646c:	f015 0506 	ands.w	r5, r5, #6
 8016470:	d106      	bne.n	8016480 <_printf_common+0x48>
 8016472:	f104 0a19 	add.w	sl, r4, #25
 8016476:	68e3      	ldr	r3, [r4, #12]
 8016478:	6832      	ldr	r2, [r6, #0]
 801647a:	1a9b      	subs	r3, r3, r2
 801647c:	42ab      	cmp	r3, r5
 801647e:	dc26      	bgt.n	80164ce <_printf_common+0x96>
 8016480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016484:	1e13      	subs	r3, r2, #0
 8016486:	6822      	ldr	r2, [r4, #0]
 8016488:	bf18      	it	ne
 801648a:	2301      	movne	r3, #1
 801648c:	0692      	lsls	r2, r2, #26
 801648e:	d42b      	bmi.n	80164e8 <_printf_common+0xb0>
 8016490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016494:	4649      	mov	r1, r9
 8016496:	4638      	mov	r0, r7
 8016498:	47c0      	blx	r8
 801649a:	3001      	adds	r0, #1
 801649c:	d01e      	beq.n	80164dc <_printf_common+0xa4>
 801649e:	6823      	ldr	r3, [r4, #0]
 80164a0:	6922      	ldr	r2, [r4, #16]
 80164a2:	f003 0306 	and.w	r3, r3, #6
 80164a6:	2b04      	cmp	r3, #4
 80164a8:	bf02      	ittt	eq
 80164aa:	68e5      	ldreq	r5, [r4, #12]
 80164ac:	6833      	ldreq	r3, [r6, #0]
 80164ae:	1aed      	subeq	r5, r5, r3
 80164b0:	68a3      	ldr	r3, [r4, #8]
 80164b2:	bf0c      	ite	eq
 80164b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164b8:	2500      	movne	r5, #0
 80164ba:	4293      	cmp	r3, r2
 80164bc:	bfc4      	itt	gt
 80164be:	1a9b      	subgt	r3, r3, r2
 80164c0:	18ed      	addgt	r5, r5, r3
 80164c2:	2600      	movs	r6, #0
 80164c4:	341a      	adds	r4, #26
 80164c6:	42b5      	cmp	r5, r6
 80164c8:	d11a      	bne.n	8016500 <_printf_common+0xc8>
 80164ca:	2000      	movs	r0, #0
 80164cc:	e008      	b.n	80164e0 <_printf_common+0xa8>
 80164ce:	2301      	movs	r3, #1
 80164d0:	4652      	mov	r2, sl
 80164d2:	4649      	mov	r1, r9
 80164d4:	4638      	mov	r0, r7
 80164d6:	47c0      	blx	r8
 80164d8:	3001      	adds	r0, #1
 80164da:	d103      	bne.n	80164e4 <_printf_common+0xac>
 80164dc:	f04f 30ff 	mov.w	r0, #4294967295
 80164e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164e4:	3501      	adds	r5, #1
 80164e6:	e7c6      	b.n	8016476 <_printf_common+0x3e>
 80164e8:	18e1      	adds	r1, r4, r3
 80164ea:	1c5a      	adds	r2, r3, #1
 80164ec:	2030      	movs	r0, #48	; 0x30
 80164ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80164f2:	4422      	add	r2, r4
 80164f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80164f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80164fc:	3302      	adds	r3, #2
 80164fe:	e7c7      	b.n	8016490 <_printf_common+0x58>
 8016500:	2301      	movs	r3, #1
 8016502:	4622      	mov	r2, r4
 8016504:	4649      	mov	r1, r9
 8016506:	4638      	mov	r0, r7
 8016508:	47c0      	blx	r8
 801650a:	3001      	adds	r0, #1
 801650c:	d0e6      	beq.n	80164dc <_printf_common+0xa4>
 801650e:	3601      	adds	r6, #1
 8016510:	e7d9      	b.n	80164c6 <_printf_common+0x8e>
	...

08016514 <_printf_i>:
 8016514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016518:	7e0f      	ldrb	r7, [r1, #24]
 801651a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801651c:	2f78      	cmp	r7, #120	; 0x78
 801651e:	4691      	mov	r9, r2
 8016520:	4680      	mov	r8, r0
 8016522:	460c      	mov	r4, r1
 8016524:	469a      	mov	sl, r3
 8016526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801652a:	d807      	bhi.n	801653c <_printf_i+0x28>
 801652c:	2f62      	cmp	r7, #98	; 0x62
 801652e:	d80a      	bhi.n	8016546 <_printf_i+0x32>
 8016530:	2f00      	cmp	r7, #0
 8016532:	f000 80d4 	beq.w	80166de <_printf_i+0x1ca>
 8016536:	2f58      	cmp	r7, #88	; 0x58
 8016538:	f000 80c0 	beq.w	80166bc <_printf_i+0x1a8>
 801653c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016544:	e03a      	b.n	80165bc <_printf_i+0xa8>
 8016546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801654a:	2b15      	cmp	r3, #21
 801654c:	d8f6      	bhi.n	801653c <_printf_i+0x28>
 801654e:	a101      	add	r1, pc, #4	; (adr r1, 8016554 <_printf_i+0x40>)
 8016550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016554:	080165ad 	.word	0x080165ad
 8016558:	080165c1 	.word	0x080165c1
 801655c:	0801653d 	.word	0x0801653d
 8016560:	0801653d 	.word	0x0801653d
 8016564:	0801653d 	.word	0x0801653d
 8016568:	0801653d 	.word	0x0801653d
 801656c:	080165c1 	.word	0x080165c1
 8016570:	0801653d 	.word	0x0801653d
 8016574:	0801653d 	.word	0x0801653d
 8016578:	0801653d 	.word	0x0801653d
 801657c:	0801653d 	.word	0x0801653d
 8016580:	080166c5 	.word	0x080166c5
 8016584:	080165ed 	.word	0x080165ed
 8016588:	0801667f 	.word	0x0801667f
 801658c:	0801653d 	.word	0x0801653d
 8016590:	0801653d 	.word	0x0801653d
 8016594:	080166e7 	.word	0x080166e7
 8016598:	0801653d 	.word	0x0801653d
 801659c:	080165ed 	.word	0x080165ed
 80165a0:	0801653d 	.word	0x0801653d
 80165a4:	0801653d 	.word	0x0801653d
 80165a8:	08016687 	.word	0x08016687
 80165ac:	682b      	ldr	r3, [r5, #0]
 80165ae:	1d1a      	adds	r2, r3, #4
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	602a      	str	r2, [r5, #0]
 80165b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165bc:	2301      	movs	r3, #1
 80165be:	e09f      	b.n	8016700 <_printf_i+0x1ec>
 80165c0:	6820      	ldr	r0, [r4, #0]
 80165c2:	682b      	ldr	r3, [r5, #0]
 80165c4:	0607      	lsls	r7, r0, #24
 80165c6:	f103 0104 	add.w	r1, r3, #4
 80165ca:	6029      	str	r1, [r5, #0]
 80165cc:	d501      	bpl.n	80165d2 <_printf_i+0xbe>
 80165ce:	681e      	ldr	r6, [r3, #0]
 80165d0:	e003      	b.n	80165da <_printf_i+0xc6>
 80165d2:	0646      	lsls	r6, r0, #25
 80165d4:	d5fb      	bpl.n	80165ce <_printf_i+0xba>
 80165d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80165da:	2e00      	cmp	r6, #0
 80165dc:	da03      	bge.n	80165e6 <_printf_i+0xd2>
 80165de:	232d      	movs	r3, #45	; 0x2d
 80165e0:	4276      	negs	r6, r6
 80165e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165e6:	485a      	ldr	r0, [pc, #360]	; (8016750 <_printf_i+0x23c>)
 80165e8:	230a      	movs	r3, #10
 80165ea:	e012      	b.n	8016612 <_printf_i+0xfe>
 80165ec:	682b      	ldr	r3, [r5, #0]
 80165ee:	6820      	ldr	r0, [r4, #0]
 80165f0:	1d19      	adds	r1, r3, #4
 80165f2:	6029      	str	r1, [r5, #0]
 80165f4:	0605      	lsls	r5, r0, #24
 80165f6:	d501      	bpl.n	80165fc <_printf_i+0xe8>
 80165f8:	681e      	ldr	r6, [r3, #0]
 80165fa:	e002      	b.n	8016602 <_printf_i+0xee>
 80165fc:	0641      	lsls	r1, r0, #25
 80165fe:	d5fb      	bpl.n	80165f8 <_printf_i+0xe4>
 8016600:	881e      	ldrh	r6, [r3, #0]
 8016602:	4853      	ldr	r0, [pc, #332]	; (8016750 <_printf_i+0x23c>)
 8016604:	2f6f      	cmp	r7, #111	; 0x6f
 8016606:	bf0c      	ite	eq
 8016608:	2308      	moveq	r3, #8
 801660a:	230a      	movne	r3, #10
 801660c:	2100      	movs	r1, #0
 801660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016612:	6865      	ldr	r5, [r4, #4]
 8016614:	60a5      	str	r5, [r4, #8]
 8016616:	2d00      	cmp	r5, #0
 8016618:	bfa2      	ittt	ge
 801661a:	6821      	ldrge	r1, [r4, #0]
 801661c:	f021 0104 	bicge.w	r1, r1, #4
 8016620:	6021      	strge	r1, [r4, #0]
 8016622:	b90e      	cbnz	r6, 8016628 <_printf_i+0x114>
 8016624:	2d00      	cmp	r5, #0
 8016626:	d04b      	beq.n	80166c0 <_printf_i+0x1ac>
 8016628:	4615      	mov	r5, r2
 801662a:	fbb6 f1f3 	udiv	r1, r6, r3
 801662e:	fb03 6711 	mls	r7, r3, r1, r6
 8016632:	5dc7      	ldrb	r7, [r0, r7]
 8016634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016638:	4637      	mov	r7, r6
 801663a:	42bb      	cmp	r3, r7
 801663c:	460e      	mov	r6, r1
 801663e:	d9f4      	bls.n	801662a <_printf_i+0x116>
 8016640:	2b08      	cmp	r3, #8
 8016642:	d10b      	bne.n	801665c <_printf_i+0x148>
 8016644:	6823      	ldr	r3, [r4, #0]
 8016646:	07de      	lsls	r6, r3, #31
 8016648:	d508      	bpl.n	801665c <_printf_i+0x148>
 801664a:	6923      	ldr	r3, [r4, #16]
 801664c:	6861      	ldr	r1, [r4, #4]
 801664e:	4299      	cmp	r1, r3
 8016650:	bfde      	ittt	le
 8016652:	2330      	movle	r3, #48	; 0x30
 8016654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016658:	f105 35ff 	addle.w	r5, r5, #4294967295
 801665c:	1b52      	subs	r2, r2, r5
 801665e:	6122      	str	r2, [r4, #16]
 8016660:	f8cd a000 	str.w	sl, [sp]
 8016664:	464b      	mov	r3, r9
 8016666:	aa03      	add	r2, sp, #12
 8016668:	4621      	mov	r1, r4
 801666a:	4640      	mov	r0, r8
 801666c:	f7ff fee4 	bl	8016438 <_printf_common>
 8016670:	3001      	adds	r0, #1
 8016672:	d14a      	bne.n	801670a <_printf_i+0x1f6>
 8016674:	f04f 30ff 	mov.w	r0, #4294967295
 8016678:	b004      	add	sp, #16
 801667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801667e:	6823      	ldr	r3, [r4, #0]
 8016680:	f043 0320 	orr.w	r3, r3, #32
 8016684:	6023      	str	r3, [r4, #0]
 8016686:	4833      	ldr	r0, [pc, #204]	; (8016754 <_printf_i+0x240>)
 8016688:	2778      	movs	r7, #120	; 0x78
 801668a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801668e:	6823      	ldr	r3, [r4, #0]
 8016690:	6829      	ldr	r1, [r5, #0]
 8016692:	061f      	lsls	r7, r3, #24
 8016694:	f851 6b04 	ldr.w	r6, [r1], #4
 8016698:	d402      	bmi.n	80166a0 <_printf_i+0x18c>
 801669a:	065f      	lsls	r7, r3, #25
 801669c:	bf48      	it	mi
 801669e:	b2b6      	uxthmi	r6, r6
 80166a0:	07df      	lsls	r7, r3, #31
 80166a2:	bf48      	it	mi
 80166a4:	f043 0320 	orrmi.w	r3, r3, #32
 80166a8:	6029      	str	r1, [r5, #0]
 80166aa:	bf48      	it	mi
 80166ac:	6023      	strmi	r3, [r4, #0]
 80166ae:	b91e      	cbnz	r6, 80166b8 <_printf_i+0x1a4>
 80166b0:	6823      	ldr	r3, [r4, #0]
 80166b2:	f023 0320 	bic.w	r3, r3, #32
 80166b6:	6023      	str	r3, [r4, #0]
 80166b8:	2310      	movs	r3, #16
 80166ba:	e7a7      	b.n	801660c <_printf_i+0xf8>
 80166bc:	4824      	ldr	r0, [pc, #144]	; (8016750 <_printf_i+0x23c>)
 80166be:	e7e4      	b.n	801668a <_printf_i+0x176>
 80166c0:	4615      	mov	r5, r2
 80166c2:	e7bd      	b.n	8016640 <_printf_i+0x12c>
 80166c4:	682b      	ldr	r3, [r5, #0]
 80166c6:	6826      	ldr	r6, [r4, #0]
 80166c8:	6961      	ldr	r1, [r4, #20]
 80166ca:	1d18      	adds	r0, r3, #4
 80166cc:	6028      	str	r0, [r5, #0]
 80166ce:	0635      	lsls	r5, r6, #24
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	d501      	bpl.n	80166d8 <_printf_i+0x1c4>
 80166d4:	6019      	str	r1, [r3, #0]
 80166d6:	e002      	b.n	80166de <_printf_i+0x1ca>
 80166d8:	0670      	lsls	r0, r6, #25
 80166da:	d5fb      	bpl.n	80166d4 <_printf_i+0x1c0>
 80166dc:	8019      	strh	r1, [r3, #0]
 80166de:	2300      	movs	r3, #0
 80166e0:	6123      	str	r3, [r4, #16]
 80166e2:	4615      	mov	r5, r2
 80166e4:	e7bc      	b.n	8016660 <_printf_i+0x14c>
 80166e6:	682b      	ldr	r3, [r5, #0]
 80166e8:	1d1a      	adds	r2, r3, #4
 80166ea:	602a      	str	r2, [r5, #0]
 80166ec:	681d      	ldr	r5, [r3, #0]
 80166ee:	6862      	ldr	r2, [r4, #4]
 80166f0:	2100      	movs	r1, #0
 80166f2:	4628      	mov	r0, r5
 80166f4:	f7e9 fda4 	bl	8000240 <memchr>
 80166f8:	b108      	cbz	r0, 80166fe <_printf_i+0x1ea>
 80166fa:	1b40      	subs	r0, r0, r5
 80166fc:	6060      	str	r0, [r4, #4]
 80166fe:	6863      	ldr	r3, [r4, #4]
 8016700:	6123      	str	r3, [r4, #16]
 8016702:	2300      	movs	r3, #0
 8016704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016708:	e7aa      	b.n	8016660 <_printf_i+0x14c>
 801670a:	6923      	ldr	r3, [r4, #16]
 801670c:	462a      	mov	r2, r5
 801670e:	4649      	mov	r1, r9
 8016710:	4640      	mov	r0, r8
 8016712:	47d0      	blx	sl
 8016714:	3001      	adds	r0, #1
 8016716:	d0ad      	beq.n	8016674 <_printf_i+0x160>
 8016718:	6823      	ldr	r3, [r4, #0]
 801671a:	079b      	lsls	r3, r3, #30
 801671c:	d413      	bmi.n	8016746 <_printf_i+0x232>
 801671e:	68e0      	ldr	r0, [r4, #12]
 8016720:	9b03      	ldr	r3, [sp, #12]
 8016722:	4298      	cmp	r0, r3
 8016724:	bfb8      	it	lt
 8016726:	4618      	movlt	r0, r3
 8016728:	e7a6      	b.n	8016678 <_printf_i+0x164>
 801672a:	2301      	movs	r3, #1
 801672c:	4632      	mov	r2, r6
 801672e:	4649      	mov	r1, r9
 8016730:	4640      	mov	r0, r8
 8016732:	47d0      	blx	sl
 8016734:	3001      	adds	r0, #1
 8016736:	d09d      	beq.n	8016674 <_printf_i+0x160>
 8016738:	3501      	adds	r5, #1
 801673a:	68e3      	ldr	r3, [r4, #12]
 801673c:	9903      	ldr	r1, [sp, #12]
 801673e:	1a5b      	subs	r3, r3, r1
 8016740:	42ab      	cmp	r3, r5
 8016742:	dcf2      	bgt.n	801672a <_printf_i+0x216>
 8016744:	e7eb      	b.n	801671e <_printf_i+0x20a>
 8016746:	2500      	movs	r5, #0
 8016748:	f104 0619 	add.w	r6, r4, #25
 801674c:	e7f5      	b.n	801673a <_printf_i+0x226>
 801674e:	bf00      	nop
 8016750:	08019b15 	.word	0x08019b15
 8016754:	08019b26 	.word	0x08019b26

08016758 <__sflush_r>:
 8016758:	898a      	ldrh	r2, [r1, #12]
 801675a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801675e:	4605      	mov	r5, r0
 8016760:	0710      	lsls	r0, r2, #28
 8016762:	460c      	mov	r4, r1
 8016764:	d458      	bmi.n	8016818 <__sflush_r+0xc0>
 8016766:	684b      	ldr	r3, [r1, #4]
 8016768:	2b00      	cmp	r3, #0
 801676a:	dc05      	bgt.n	8016778 <__sflush_r+0x20>
 801676c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801676e:	2b00      	cmp	r3, #0
 8016770:	dc02      	bgt.n	8016778 <__sflush_r+0x20>
 8016772:	2000      	movs	r0, #0
 8016774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801677a:	2e00      	cmp	r6, #0
 801677c:	d0f9      	beq.n	8016772 <__sflush_r+0x1a>
 801677e:	2300      	movs	r3, #0
 8016780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016784:	682f      	ldr	r7, [r5, #0]
 8016786:	6a21      	ldr	r1, [r4, #32]
 8016788:	602b      	str	r3, [r5, #0]
 801678a:	d032      	beq.n	80167f2 <__sflush_r+0x9a>
 801678c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801678e:	89a3      	ldrh	r3, [r4, #12]
 8016790:	075a      	lsls	r2, r3, #29
 8016792:	d505      	bpl.n	80167a0 <__sflush_r+0x48>
 8016794:	6863      	ldr	r3, [r4, #4]
 8016796:	1ac0      	subs	r0, r0, r3
 8016798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801679a:	b10b      	cbz	r3, 80167a0 <__sflush_r+0x48>
 801679c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801679e:	1ac0      	subs	r0, r0, r3
 80167a0:	2300      	movs	r3, #0
 80167a2:	4602      	mov	r2, r0
 80167a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167a6:	6a21      	ldr	r1, [r4, #32]
 80167a8:	4628      	mov	r0, r5
 80167aa:	47b0      	blx	r6
 80167ac:	1c43      	adds	r3, r0, #1
 80167ae:	89a3      	ldrh	r3, [r4, #12]
 80167b0:	d106      	bne.n	80167c0 <__sflush_r+0x68>
 80167b2:	6829      	ldr	r1, [r5, #0]
 80167b4:	291d      	cmp	r1, #29
 80167b6:	d82b      	bhi.n	8016810 <__sflush_r+0xb8>
 80167b8:	4a29      	ldr	r2, [pc, #164]	; (8016860 <__sflush_r+0x108>)
 80167ba:	410a      	asrs	r2, r1
 80167bc:	07d6      	lsls	r6, r2, #31
 80167be:	d427      	bmi.n	8016810 <__sflush_r+0xb8>
 80167c0:	2200      	movs	r2, #0
 80167c2:	6062      	str	r2, [r4, #4]
 80167c4:	04d9      	lsls	r1, r3, #19
 80167c6:	6922      	ldr	r2, [r4, #16]
 80167c8:	6022      	str	r2, [r4, #0]
 80167ca:	d504      	bpl.n	80167d6 <__sflush_r+0x7e>
 80167cc:	1c42      	adds	r2, r0, #1
 80167ce:	d101      	bne.n	80167d4 <__sflush_r+0x7c>
 80167d0:	682b      	ldr	r3, [r5, #0]
 80167d2:	b903      	cbnz	r3, 80167d6 <__sflush_r+0x7e>
 80167d4:	6560      	str	r0, [r4, #84]	; 0x54
 80167d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167d8:	602f      	str	r7, [r5, #0]
 80167da:	2900      	cmp	r1, #0
 80167dc:	d0c9      	beq.n	8016772 <__sflush_r+0x1a>
 80167de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167e2:	4299      	cmp	r1, r3
 80167e4:	d002      	beq.n	80167ec <__sflush_r+0x94>
 80167e6:	4628      	mov	r0, r5
 80167e8:	f7ff fbe2 	bl	8015fb0 <_free_r>
 80167ec:	2000      	movs	r0, #0
 80167ee:	6360      	str	r0, [r4, #52]	; 0x34
 80167f0:	e7c0      	b.n	8016774 <__sflush_r+0x1c>
 80167f2:	2301      	movs	r3, #1
 80167f4:	4628      	mov	r0, r5
 80167f6:	47b0      	blx	r6
 80167f8:	1c41      	adds	r1, r0, #1
 80167fa:	d1c8      	bne.n	801678e <__sflush_r+0x36>
 80167fc:	682b      	ldr	r3, [r5, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d0c5      	beq.n	801678e <__sflush_r+0x36>
 8016802:	2b1d      	cmp	r3, #29
 8016804:	d001      	beq.n	801680a <__sflush_r+0xb2>
 8016806:	2b16      	cmp	r3, #22
 8016808:	d101      	bne.n	801680e <__sflush_r+0xb6>
 801680a:	602f      	str	r7, [r5, #0]
 801680c:	e7b1      	b.n	8016772 <__sflush_r+0x1a>
 801680e:	89a3      	ldrh	r3, [r4, #12]
 8016810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016814:	81a3      	strh	r3, [r4, #12]
 8016816:	e7ad      	b.n	8016774 <__sflush_r+0x1c>
 8016818:	690f      	ldr	r7, [r1, #16]
 801681a:	2f00      	cmp	r7, #0
 801681c:	d0a9      	beq.n	8016772 <__sflush_r+0x1a>
 801681e:	0793      	lsls	r3, r2, #30
 8016820:	680e      	ldr	r6, [r1, #0]
 8016822:	bf08      	it	eq
 8016824:	694b      	ldreq	r3, [r1, #20]
 8016826:	600f      	str	r7, [r1, #0]
 8016828:	bf18      	it	ne
 801682a:	2300      	movne	r3, #0
 801682c:	eba6 0807 	sub.w	r8, r6, r7
 8016830:	608b      	str	r3, [r1, #8]
 8016832:	f1b8 0f00 	cmp.w	r8, #0
 8016836:	dd9c      	ble.n	8016772 <__sflush_r+0x1a>
 8016838:	6a21      	ldr	r1, [r4, #32]
 801683a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801683c:	4643      	mov	r3, r8
 801683e:	463a      	mov	r2, r7
 8016840:	4628      	mov	r0, r5
 8016842:	47b0      	blx	r6
 8016844:	2800      	cmp	r0, #0
 8016846:	dc06      	bgt.n	8016856 <__sflush_r+0xfe>
 8016848:	89a3      	ldrh	r3, [r4, #12]
 801684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801684e:	81a3      	strh	r3, [r4, #12]
 8016850:	f04f 30ff 	mov.w	r0, #4294967295
 8016854:	e78e      	b.n	8016774 <__sflush_r+0x1c>
 8016856:	4407      	add	r7, r0
 8016858:	eba8 0800 	sub.w	r8, r8, r0
 801685c:	e7e9      	b.n	8016832 <__sflush_r+0xda>
 801685e:	bf00      	nop
 8016860:	dfbffffe 	.word	0xdfbffffe

08016864 <_fflush_r>:
 8016864:	b538      	push	{r3, r4, r5, lr}
 8016866:	690b      	ldr	r3, [r1, #16]
 8016868:	4605      	mov	r5, r0
 801686a:	460c      	mov	r4, r1
 801686c:	b913      	cbnz	r3, 8016874 <_fflush_r+0x10>
 801686e:	2500      	movs	r5, #0
 8016870:	4628      	mov	r0, r5
 8016872:	bd38      	pop	{r3, r4, r5, pc}
 8016874:	b118      	cbz	r0, 801687e <_fflush_r+0x1a>
 8016876:	6a03      	ldr	r3, [r0, #32]
 8016878:	b90b      	cbnz	r3, 801687e <_fflush_r+0x1a>
 801687a:	f7ff f90f 	bl	8015a9c <__sinit>
 801687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d0f3      	beq.n	801686e <_fflush_r+0xa>
 8016886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016888:	07d0      	lsls	r0, r2, #31
 801688a:	d404      	bmi.n	8016896 <_fflush_r+0x32>
 801688c:	0599      	lsls	r1, r3, #22
 801688e:	d402      	bmi.n	8016896 <_fflush_r+0x32>
 8016890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016892:	f7ff fb5e 	bl	8015f52 <__retarget_lock_acquire_recursive>
 8016896:	4628      	mov	r0, r5
 8016898:	4621      	mov	r1, r4
 801689a:	f7ff ff5d 	bl	8016758 <__sflush_r>
 801689e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168a0:	07da      	lsls	r2, r3, #31
 80168a2:	4605      	mov	r5, r0
 80168a4:	d4e4      	bmi.n	8016870 <_fflush_r+0xc>
 80168a6:	89a3      	ldrh	r3, [r4, #12]
 80168a8:	059b      	lsls	r3, r3, #22
 80168aa:	d4e1      	bmi.n	8016870 <_fflush_r+0xc>
 80168ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168ae:	f7ff fb51 	bl	8015f54 <__retarget_lock_release_recursive>
 80168b2:	e7dd      	b.n	8016870 <_fflush_r+0xc>

080168b4 <fiprintf>:
 80168b4:	b40e      	push	{r1, r2, r3}
 80168b6:	b503      	push	{r0, r1, lr}
 80168b8:	4601      	mov	r1, r0
 80168ba:	ab03      	add	r3, sp, #12
 80168bc:	4805      	ldr	r0, [pc, #20]	; (80168d4 <fiprintf+0x20>)
 80168be:	f853 2b04 	ldr.w	r2, [r3], #4
 80168c2:	6800      	ldr	r0, [r0, #0]
 80168c4:	9301      	str	r3, [sp, #4]
 80168c6:	f7ff fc9d 	bl	8016204 <_vfiprintf_r>
 80168ca:	b002      	add	sp, #8
 80168cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80168d0:	b003      	add	sp, #12
 80168d2:	4770      	bx	lr
 80168d4:	2000008c 	.word	0x2000008c

080168d8 <__swhatbuf_r>:
 80168d8:	b570      	push	{r4, r5, r6, lr}
 80168da:	460c      	mov	r4, r1
 80168dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168e0:	2900      	cmp	r1, #0
 80168e2:	b096      	sub	sp, #88	; 0x58
 80168e4:	4615      	mov	r5, r2
 80168e6:	461e      	mov	r6, r3
 80168e8:	da0d      	bge.n	8016906 <__swhatbuf_r+0x2e>
 80168ea:	89a3      	ldrh	r3, [r4, #12]
 80168ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80168f0:	f04f 0100 	mov.w	r1, #0
 80168f4:	bf0c      	ite	eq
 80168f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80168fa:	2340      	movne	r3, #64	; 0x40
 80168fc:	2000      	movs	r0, #0
 80168fe:	6031      	str	r1, [r6, #0]
 8016900:	602b      	str	r3, [r5, #0]
 8016902:	b016      	add	sp, #88	; 0x58
 8016904:	bd70      	pop	{r4, r5, r6, pc}
 8016906:	466a      	mov	r2, sp
 8016908:	f000 f848 	bl	801699c <_fstat_r>
 801690c:	2800      	cmp	r0, #0
 801690e:	dbec      	blt.n	80168ea <__swhatbuf_r+0x12>
 8016910:	9901      	ldr	r1, [sp, #4]
 8016912:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016916:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801691a:	4259      	negs	r1, r3
 801691c:	4159      	adcs	r1, r3
 801691e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016922:	e7eb      	b.n	80168fc <__swhatbuf_r+0x24>

08016924 <__smakebuf_r>:
 8016924:	898b      	ldrh	r3, [r1, #12]
 8016926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016928:	079d      	lsls	r5, r3, #30
 801692a:	4606      	mov	r6, r0
 801692c:	460c      	mov	r4, r1
 801692e:	d507      	bpl.n	8016940 <__smakebuf_r+0x1c>
 8016930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	6123      	str	r3, [r4, #16]
 8016938:	2301      	movs	r3, #1
 801693a:	6163      	str	r3, [r4, #20]
 801693c:	b002      	add	sp, #8
 801693e:	bd70      	pop	{r4, r5, r6, pc}
 8016940:	ab01      	add	r3, sp, #4
 8016942:	466a      	mov	r2, sp
 8016944:	f7ff ffc8 	bl	80168d8 <__swhatbuf_r>
 8016948:	9900      	ldr	r1, [sp, #0]
 801694a:	4605      	mov	r5, r0
 801694c:	4630      	mov	r0, r6
 801694e:	f7ff fba3 	bl	8016098 <_malloc_r>
 8016952:	b948      	cbnz	r0, 8016968 <__smakebuf_r+0x44>
 8016954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016958:	059a      	lsls	r2, r3, #22
 801695a:	d4ef      	bmi.n	801693c <__smakebuf_r+0x18>
 801695c:	f023 0303 	bic.w	r3, r3, #3
 8016960:	f043 0302 	orr.w	r3, r3, #2
 8016964:	81a3      	strh	r3, [r4, #12]
 8016966:	e7e3      	b.n	8016930 <__smakebuf_r+0xc>
 8016968:	89a3      	ldrh	r3, [r4, #12]
 801696a:	6020      	str	r0, [r4, #0]
 801696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016970:	81a3      	strh	r3, [r4, #12]
 8016972:	9b00      	ldr	r3, [sp, #0]
 8016974:	6163      	str	r3, [r4, #20]
 8016976:	9b01      	ldr	r3, [sp, #4]
 8016978:	6120      	str	r0, [r4, #16]
 801697a:	b15b      	cbz	r3, 8016994 <__smakebuf_r+0x70>
 801697c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016980:	4630      	mov	r0, r6
 8016982:	f000 f81d 	bl	80169c0 <_isatty_r>
 8016986:	b128      	cbz	r0, 8016994 <__smakebuf_r+0x70>
 8016988:	89a3      	ldrh	r3, [r4, #12]
 801698a:	f023 0303 	bic.w	r3, r3, #3
 801698e:	f043 0301 	orr.w	r3, r3, #1
 8016992:	81a3      	strh	r3, [r4, #12]
 8016994:	89a3      	ldrh	r3, [r4, #12]
 8016996:	431d      	orrs	r5, r3
 8016998:	81a5      	strh	r5, [r4, #12]
 801699a:	e7cf      	b.n	801693c <__smakebuf_r+0x18>

0801699c <_fstat_r>:
 801699c:	b538      	push	{r3, r4, r5, lr}
 801699e:	4d07      	ldr	r5, [pc, #28]	; (80169bc <_fstat_r+0x20>)
 80169a0:	2300      	movs	r3, #0
 80169a2:	4604      	mov	r4, r0
 80169a4:	4608      	mov	r0, r1
 80169a6:	4611      	mov	r1, r2
 80169a8:	602b      	str	r3, [r5, #0]
 80169aa:	f7eb f896 	bl	8001ada <_fstat>
 80169ae:	1c43      	adds	r3, r0, #1
 80169b0:	d102      	bne.n	80169b8 <_fstat_r+0x1c>
 80169b2:	682b      	ldr	r3, [r5, #0]
 80169b4:	b103      	cbz	r3, 80169b8 <_fstat_r+0x1c>
 80169b6:	6023      	str	r3, [r4, #0]
 80169b8:	bd38      	pop	{r3, r4, r5, pc}
 80169ba:	bf00      	nop
 80169bc:	200452fc 	.word	0x200452fc

080169c0 <_isatty_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d06      	ldr	r5, [pc, #24]	; (80169dc <_isatty_r+0x1c>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	f7eb f895 	bl	8001afa <_isatty>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_isatty_r+0x1a>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_isatty_r+0x1a>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	200452fc 	.word	0x200452fc

080169e0 <_sbrk_r>:
 80169e0:	b538      	push	{r3, r4, r5, lr}
 80169e2:	4d06      	ldr	r5, [pc, #24]	; (80169fc <_sbrk_r+0x1c>)
 80169e4:	2300      	movs	r3, #0
 80169e6:	4604      	mov	r4, r0
 80169e8:	4608      	mov	r0, r1
 80169ea:	602b      	str	r3, [r5, #0]
 80169ec:	f7eb f89e 	bl	8001b2c <_sbrk>
 80169f0:	1c43      	adds	r3, r0, #1
 80169f2:	d102      	bne.n	80169fa <_sbrk_r+0x1a>
 80169f4:	682b      	ldr	r3, [r5, #0]
 80169f6:	b103      	cbz	r3, 80169fa <_sbrk_r+0x1a>
 80169f8:	6023      	str	r3, [r4, #0]
 80169fa:	bd38      	pop	{r3, r4, r5, pc}
 80169fc:	200452fc 	.word	0x200452fc

08016a00 <abort>:
 8016a00:	b508      	push	{r3, lr}
 8016a02:	2006      	movs	r0, #6
 8016a04:	f000 f82c 	bl	8016a60 <raise>
 8016a08:	2001      	movs	r0, #1
 8016a0a:	f7eb f833 	bl	8001a74 <_exit>

08016a0e <_raise_r>:
 8016a0e:	291f      	cmp	r1, #31
 8016a10:	b538      	push	{r3, r4, r5, lr}
 8016a12:	4604      	mov	r4, r0
 8016a14:	460d      	mov	r5, r1
 8016a16:	d904      	bls.n	8016a22 <_raise_r+0x14>
 8016a18:	2316      	movs	r3, #22
 8016a1a:	6003      	str	r3, [r0, #0]
 8016a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a20:	bd38      	pop	{r3, r4, r5, pc}
 8016a22:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016a24:	b112      	cbz	r2, 8016a2c <_raise_r+0x1e>
 8016a26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a2a:	b94b      	cbnz	r3, 8016a40 <_raise_r+0x32>
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	f000 f831 	bl	8016a94 <_getpid_r>
 8016a32:	462a      	mov	r2, r5
 8016a34:	4601      	mov	r1, r0
 8016a36:	4620      	mov	r0, r4
 8016a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a3c:	f000 b818 	b.w	8016a70 <_kill_r>
 8016a40:	2b01      	cmp	r3, #1
 8016a42:	d00a      	beq.n	8016a5a <_raise_r+0x4c>
 8016a44:	1c59      	adds	r1, r3, #1
 8016a46:	d103      	bne.n	8016a50 <_raise_r+0x42>
 8016a48:	2316      	movs	r3, #22
 8016a4a:	6003      	str	r3, [r0, #0]
 8016a4c:	2001      	movs	r0, #1
 8016a4e:	e7e7      	b.n	8016a20 <_raise_r+0x12>
 8016a50:	2400      	movs	r4, #0
 8016a52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016a56:	4628      	mov	r0, r5
 8016a58:	4798      	blx	r3
 8016a5a:	2000      	movs	r0, #0
 8016a5c:	e7e0      	b.n	8016a20 <_raise_r+0x12>
	...

08016a60 <raise>:
 8016a60:	4b02      	ldr	r3, [pc, #8]	; (8016a6c <raise+0xc>)
 8016a62:	4601      	mov	r1, r0
 8016a64:	6818      	ldr	r0, [r3, #0]
 8016a66:	f7ff bfd2 	b.w	8016a0e <_raise_r>
 8016a6a:	bf00      	nop
 8016a6c:	2000008c 	.word	0x2000008c

08016a70 <_kill_r>:
 8016a70:	b538      	push	{r3, r4, r5, lr}
 8016a72:	4d07      	ldr	r5, [pc, #28]	; (8016a90 <_kill_r+0x20>)
 8016a74:	2300      	movs	r3, #0
 8016a76:	4604      	mov	r4, r0
 8016a78:	4608      	mov	r0, r1
 8016a7a:	4611      	mov	r1, r2
 8016a7c:	602b      	str	r3, [r5, #0]
 8016a7e:	f7ea ffe7 	bl	8001a50 <_kill>
 8016a82:	1c43      	adds	r3, r0, #1
 8016a84:	d102      	bne.n	8016a8c <_kill_r+0x1c>
 8016a86:	682b      	ldr	r3, [r5, #0]
 8016a88:	b103      	cbz	r3, 8016a8c <_kill_r+0x1c>
 8016a8a:	6023      	str	r3, [r4, #0]
 8016a8c:	bd38      	pop	{r3, r4, r5, pc}
 8016a8e:	bf00      	nop
 8016a90:	200452fc 	.word	0x200452fc

08016a94 <_getpid_r>:
 8016a94:	f7ea bfd4 	b.w	8001a40 <_getpid>

08016a98 <_init>:
 8016a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a9a:	bf00      	nop
 8016a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a9e:	bc08      	pop	{r3}
 8016aa0:	469e      	mov	lr, r3
 8016aa2:	4770      	bx	lr

08016aa4 <_fini>:
 8016aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016aa6:	bf00      	nop
 8016aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aaa:	bc08      	pop	{r3}
 8016aac:	469e      	mov	lr, r3
 8016aae:	4770      	bx	lr
